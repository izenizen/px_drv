source_filename = "test"
target datalayout = "e-m:e-p:64:64-i64:64-f80:128-n8:16:32:64-S128"

@global_var_36b40 = local_unnamed_addr global i64 0
@global_var_4e0 = constant i64 -1671247469377224696
@global_var_31d68 = local_unnamed_addr global i64 93143
@global_var_31bc8 = local_unnamed_addr global i64 11727480
@global_var_39480 = global i64 0
@global_var_3eaf8 = local_unnamed_addr global i64 0
@global_var_6220 = constant i64 253320336508977222
@global_var_d20 = constant i64 379013817381683288
@global_var_d50 = constant i64 6402015893995389016
@global_var_36b00 = local_unnamed_addr global i64 0
@global_var_6690 = constant i64 100496359211139082
@global_var_eb = constant [3 x i8] c"%(\00"
@global_var_16e8 = constant i64 7343364973139066954
@global_var_d = constant [3 x i8] c"NU\00"
@global_var_3c48 = constant [3 x i8] c"pa\00"
@global_var_36f4c = local_unnamed_addr global i64 0
@global_var_36f4d = global i64 0
@global_var_1c48 = constant i64 7091062505224536075
@global_var_5830 = local_unnamed_addr constant [3 x i8] c"H=\00"
@global_var_23 = external global i64
@global_var_22 = external global i64
@global_var_c = constant [4 x i8] c"GNU\00"
@global_var_2fa47 = constant i64 0
@global_var_3e8 = constant [3 x i8] c"%(\00"
@global_var_30dab = local_unnamed_addr constant [17 x i8] c"_release_regions\00"
@global_var_30da8 = local_unnamed_addr constant [20 x i8] c"pci_release_regions\00"
@global_var_30da9 = local_unnamed_addr constant [19 x i8] c"ci_release_regions\00"
@global_var_30daa = local_unnamed_addr constant [18 x i8] c"i_release_regions\00"
@global_var_30db3 = constant [9 x i8] c"_regions\00"
@global_var_30dac = constant [16 x i8] c"release_regions\00"
@global_var_30dad = constant [15 x i8] c"elease_regions\00"
@global_var_30dae = constant [14 x i8] c"lease_regions\00"
@global_var_30daf = constant [13 x i8] c"ease_regions\00"
@global_var_30db0 = constant [12 x i8] c"ase_regions\00"
@global_var_30db1 = constant [11 x i8] c"se_regions\00"
@global_var_30db2 = constant [10 x i8] c"e_regions\00"
@global_var_2d4 = constant [3 x i8] c" c\00"
@global_var_30dd3 = local_unnamed_addr constant i64 0
@global_var_30de3 = constant i64 8391733327442214915
@global_var_30db4 = constant [8 x i8] c"regions\00"
@global_var_2efff = constant [9 x i8] c"k : 0x%x\00"
@global_var_2f000 = constant [8 x i8] c" : 0x%x\00"
@global_var_30d58 = constant i64 0
@global_var_2d240 = local_unnamed_addr constant i64* bitcast (i32* @global_var_1 to i64*)
@global_var_3ecc8 = local_unnamed_addr global i64 0
@global_var_1800 = constant i64 328
@global_var_36fc0 = local_unnamed_addr global i64 0
@global_var_36fc8 = local_unnamed_addr global i64 0
@global_var_2dd00 = local_unnamed_addr constant i64 2850
@global_var_36880 = local_unnamed_addr global i64 0
@global_var_36888 = local_unnamed_addr global i64 0
@global_var_20c = constant i64 -4107282860161890054
@global_var_2e804 = local_unnamed_addr constant i64 1924145350656
@global_var_2e80c = local_unnamed_addr constant i64 1016482068098193863
@global_var_2e830 = local_unnamed_addr constant i64 11391165247914024
@global_var_2e833 = local_unnamed_addr constant [5 x i8] c"V4x(\00"
@global_var_2e832 = local_unnamed_addr constant [6 x i8] c".V4x(\00"
@global_var_2e834 = local_unnamed_addr constant [4 x i8] c"4x(\00"
@global_var_36f40 = local_unnamed_addr global i64 0
@global_var_4f0 = constant i64 -539526555768651767
@global_var_31ba0 = local_unnamed_addr global i64* bitcast (i8* @global_var_8 to i64*)
@global_var_36ae0 = local_unnamed_addr global i64 0
@0 = external global i32
@global_var_f = global i8 0
@global_var_10 = global i8 -9
@global_var_1 = global i32 335544320
@global_var_4 = global i16 20
@global_var_8 = global i8 3
@1 = internal constant [7 x i8] c"+ k\99\DF\D1\00"
@global_var_1e = global i8* getelementptr inbounds ([7 x i8], [7 x i8]* @1, i64 0, i64 0)
@global_var_14 = global i32* inttoptr (i64 -5886020988890227226 to i32*)
@global_var_1c = global i32* inttoptr (i64 -3323769314595849777 to i32*)
@global_var_30da4 = external constant i8*
@global_var_30dc4 = external constant i8*
@global_var_30dd4 = external constant i8*
@global_var_1c70 = constant i32* inttoptr (i64 5188146826632495202 to i32*)
@2 = internal constant [5 x i8] c"\03G6\D3\00"
@global_var_30d60 = constant i8* getelementptr inbounds ([5 x i8], [5 x i8]* @2, i64 0, i64 0)
@global_var_18 = global i32* inttoptr (i64 2318150734846142232 to i32*)
@global_var_8d06 = constant i32 1091764293
@global_var_31d60 = local_unnamed_addr global i32 0
@global_var_31bc0 = local_unnamed_addr global i32 0
@global_var_6 = global i8 0
@global_var_5 = global i8 0
@global_var_2 = global i32 1310720
@global_var_20 = external global i32*
@3 = internal constant [20 x i8] c"\C8\DA\B7\E6]\B4\98\18\A7P\AE\CF\B9+ k\99\DF\D1\00"
@global_var_11 = global i8* getelementptr inbounds ([20 x i8], [20 x i8]* @3, i64 0, i64 0)
@4 = internal constant [4 x i8] c"\B9\02\01\00"
@global_var_30da1 = constant i8* getelementptr inbounds ([4 x i8], [4 x i8]* @4, i64 0, i64 0)
@global_var_30de4 = external constant i8*
@global_var_3 = external global i8*
@global_var_7 = external global i8*
@global_var_188 = constant i32* inttoptr (i64 5613991512388927590 to i32*)
@global_var_21 = external global i32*
@global_var_e = global i16* inttoptr (i64 6766297640473133141 to i16*)
@global_var_9 = external global i8*
@5 = internal constant [6 x i8] c" k\99\DF\D1\00"
@global_var_1f = global i8* getelementptr inbounds ([6 x i8], [6 x i8]* @5, i64 0, i64 0)
@6 = internal constant [11 x i8] c"P\AE\CF\B9+ k\99\DF\D1\00"
@global_var_1a = global i8* getelementptr inbounds ([11 x i8], [11 x i8]* @6, i64 0, i64 0)
@global_var_a = global i8 0
@global_var_b = external global i8*
@7 = internal constant [10 x i8] c"\AE\CF\B9+ k\99\DF\D1\00"
@global_var_1b = global i8* getelementptr inbounds ([10 x i8], [10 x i8]* @7, i64 0, i64 0)
@8 = internal constant [2 x i8] c"`\00"
@global_var_5431 = constant i8* getelementptr inbounds ([2 x i8], [2 x i8]* @8, i64 0, i64 0)
@global_var_c90 = constant i16 88
@9 = internal constant [12 x i8] c"\A7P\AE\CF\B9+ k\99\DF\D1\00"
@global_var_19 = global i8* getelementptr inbounds ([12 x i8], [12 x i8]* @9, i64 0, i64 0)
@10 = internal constant [14 x i8] c"\98\18\A7P\AE\CF\B9+ k\99\DF\D1\00"
@global_var_17 = global i8* getelementptr inbounds ([14 x i8], [14 x i8]* @10, i64 0, i64 0)
@global_var_3d08f = global i1 false
@global_var_16 = global i32* inttoptr (i64 -5057632195089753932 to i32*)
@global_var_12 = global i32* inttoptr (i64 -6406202569497593894 to i32*)
@global_var_13 = global i32* inttoptr (i64 5811640888285062839 to i32*)
@11 = internal constant [16 x i8] c"]\B4\98\18\A7P\AE\CF\B9+ k\99\DF\D1\00"
@global_var_15 = global i8* getelementptr inbounds ([16 x i8], [16 x i8]* @11, i64 0, i64 0)
@global_var_355a0 = local_unnamed_addr global i32 11727480
@global_var_356c0 = local_unnamed_addr global i32 11727480
@global_var_35828 = local_unnamed_addr global i32 40
@global_var_35840 = local_unnamed_addr global i32 20
@global_var_3582c = local_unnamed_addr global i32 50
@global_var_35830 = local_unnamed_addr global i32 32
@global_var_35844 = local_unnamed_addr global i32 30
@global_var_35848 = local_unnamed_addr global i32 14
@global_var_35834 = local_unnamed_addr global i32 46
@global_var_35838 = local_unnamed_addr global i32 32
@global_var_3584c = local_unnamed_addr global i32 30
@global_var_35850 = local_unnamed_addr global i32 12
@global_var_3583c = local_unnamed_addr global i32 54
@global_var_35854 = local_unnamed_addr global i32 34
@12 = internal constant [2 x i8] c"%\00"
@global_var_1338 = constant i8* getelementptr inbounds ([2 x i8], [2 x i8]* @12, i64 0, i64 0)
@global_var_1d = external global i32*
@global_var_30d4c = constant i32* null
@global_var_30d50 = constant i32* null
@global_var_30d54 = external constant i8*
@13 = internal constant [4 x i8] c"G6\D3\00"
@global_var_30d61 = constant i8* getelementptr inbounds ([4 x i8], [4 x i8]* @13, i64 0, i64 0)
@global_var_30d81 = external constant i8*
@14 = internal constant [3 x i8] c"\02\01\00"
@global_var_30da2 = constant i8* getelementptr inbounds ([3 x i8], [3 x i8]* @14, i64 0, i64 0)
@15 = internal constant [2 x i8] c"\01\00"
@global_var_30da3 = constant i8* getelementptr inbounds ([2 x i8], [2 x i8]* @15, i64 0, i64 0)
@16 = internal constant [2 x i8] c"X\00"
@global_var_148b = constant i8* getelementptr inbounds ([2 x i8], [2 x i8]* @16, i64 0, i64 0)
@global_var_3ecb0 = local_unnamed_addr global i32 0
@global_var_fff = constant i32 1207959640
@global_var_30000 = constant i32 0
@global_var_2daa0 = local_unnamed_addr constant i32 13968
@global_var_2daa9 = local_unnamed_addr constant i32 13456
@global_var_2c748 = local_unnamed_addr constant i32* inttoptr (i64 3147498903 to i32*)
@global_var_2c70f = local_unnamed_addr constant i8 0
@global_var_2c6d1 = local_unnamed_addr constant i8 100
@global_var_ec = constant i8 40
@global_var_21c = constant i32 -1669085440
@global_var_2e800 = local_unnamed_addr constant i16 356
@global_var_2e808 = local_unnamed_addr constant i16 448
@global_var_2e831 = local_unnamed_addr constant i8 0
@global_var_2e835 = local_unnamed_addr constant i8 120
@global_var_36ae4 = local_unnamed_addr global i32 0
@global_var_36ae8 = local_unnamed_addr global i32 0

define void @asv5220_fini() local_unnamed_addr {
dec_label_pc_0:
  ret void
}

define i64 @asv5220_resume(i64 %arg1) local_unnamed_addr {
dec_label_pc_30:
  %0 = call i64 @mcount(), !insn.addr !0
  %1 = call i64 @pci_enable_device(i64 %arg1), !insn.addr !1
  ret i64 %1, !insn.addr !2
}

define i32 @asv5220_suspend(i64 %pci_dev, i64 %state) local_unnamed_addr {
dec_label_pc_56:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = call i64 @__decompiler_undefined_function_0()
  %2 = call i64 @__decompiler_undefined_function_0()
  %3 = trunc i64 %2 to i8
  %4 = mul i8 %3, 2, !insn.addr !3
  %5 = inttoptr i64 %2 to i8*, !insn.addr !3
  store i8 %4, i8* %5, align 1, !insn.addr !3
  %6 = mul i64 %1, ptrtoint (i16* @global_var_4 to i64), !insn.addr !4
  %7 = add i64 %1, -25, !insn.addr !4
  %8 = add i64 %7, %6, !insn.addr !4
  %9 = inttoptr i64 %8 to i8*, !insn.addr !4
  %10 = load i8, i8* %9, align 1, !insn.addr !4
  %11 = trunc i64 %1 to i8, !insn.addr !4
  %12 = add i8 %10, %11, !insn.addr !4
  store i8 %12, i8* %9, align 1, !insn.addr !4
  %13 = call i64 @pci_set_power_state(i64 %pci_dev, i64 %state), !insn.addr !5
  %14 = trunc i64 %13 to i32, !insn.addr !6
  %15 = icmp eq i32 %14, 0, !insn.addr !6
  br i1 %15, label %dec_label_pc_71, label %dec_label_pc_67, !insn.addr !7

dec_label_pc_67:                                  ; preds = %dec_label_pc_56
  %16 = call i64 @pci_disable_device(i64 %0), !insn.addr !8
  br label %dec_label_pc_79, !insn.addr !9

dec_label_pc_71:                                  ; preds = %dec_label_pc_56
  %17 = call i64 @pci_restore_state(i64 %0), !insn.addr !10
  br label %dec_label_pc_79, !insn.addr !10

dec_label_pc_79:                                  ; preds = %dec_label_pc_71, %dec_label_pc_67
  ret i32 %14, !insn.addr !11
}

define i64 @asv5220_suspend.5(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_86:
  %0 = call i64 @mcount(), !insn.addr !12
  %1 = add i64 %arg1, 144, !insn.addr !13
  %2 = call i64 @dev_get_drvdata(i64 %1), !insn.addr !14
  ret i64 %2, !insn.addr !15
}

define i32 @asv5220_release(i64 %inode, i64 %file) local_unnamed_addr {
dec_label_pc_a7:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = call i64 @__decompiler_undefined_function_0()
  %2 = call i64 @pci_save_state(), !insn.addr !16
  %3 = and i64 %0, 4294967295, !insn.addr !17
  %4 = call i64 @pci_choose_state(i64 %1, i64 %3), !insn.addr !18
  %5 = and i64 %4, 4294967295, !insn.addr !19
  %6 = call i64 @pci_set_power_state(i64 %1, i64 %5), !insn.addr !20
  %7 = trunc i64 %6 to i32, !insn.addr !21
  %8 = icmp eq i32 %7, 0, !insn.addr !21
  br i1 %8, label %dec_label_pc_cd, label %dec_label_pc_c5, !insn.addr !22

dec_label_pc_c5:                                  ; preds = %dec_label_pc_a7
  %9 = call i64 @pci_disable_device(i64 %1), !insn.addr !23
  br label %dec_label_pc_cd, !insn.addr !23

dec_label_pc_cd:                                  ; preds = %dec_label_pc_c5, %dec_label_pc_a7
  ret i32 0, !insn.addr !24
}

define i64 @asv5220_release.6(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_d7:
  %0 = call i64 @mcount(), !insn.addr !25
  %1 = call i64 @__readgsqword(i64 40), !insn.addr !26
  %2 = add i64 %arg2, 160, !insn.addr !27
  %3 = inttoptr i64 %2 to i64*, !insn.addr !27
  %4 = load i64, i64* %3, align 8, !insn.addr !27
  %5 = add i64 %4, 7480, !insn.addr !28
  %6 = inttoptr i64 %5 to i64*, !insn.addr !28
  %7 = load i64, i64* %6, align 8, !insn.addr !28
  %8 = add i64 %7, 26224, !insn.addr !29
  %9 = call i64 @mutex_lock(i64 %8), !insn.addr !30
  %10 = add i64 %4, 600548, !insn.addr !31
  %11 = inttoptr i64 %10 to i32*, !insn.addr !31
  store i32 0, i32* %11, align 4, !insn.addr !31
  %12 = add i64 %4, ptrtoint (i8** @global_var_30da4 to i64), !insn.addr !32
  %13 = inttoptr i64 %12 to i64*, !insn.addr !33
  store i64 -83, i64* %13, align 8, !insn.addr !33
  %14 = add i64 %4, add (i64 ptrtoint (i8** @global_var_30da4 to i64), i64 8), !insn.addr !34
  %15 = inttoptr i64 %14 to i64*, !insn.addr !34
  store i64 -112, i64* %15, align 8, !insn.addr !34
  %16 = add i64 %4, ptrtoint (i8** @global_var_30dc4 to i64), !insn.addr !35
  %17 = inttoptr i64 %16 to i64*, !insn.addr !36
  store i64 -3, i64* %17, align 8, !insn.addr !36
  %18 = add i64 %4, add (i64 ptrtoint (i8** @global_var_30dc4 to i64), i64 8), !insn.addr !37
  %19 = inttoptr i64 %18 to i64*, !insn.addr !37
  store i64 -85, i64* %19, align 8, !insn.addr !37
  %20 = add i64 %4, ptrtoint (i8** @global_var_30dd4 to i64), !insn.addr !38
  %21 = inttoptr i64 %20 to i64*, !insn.addr !39
  store i64 -3, i64* %21, align 8, !insn.addr !39
  %22 = add i64 %4, add (i64 ptrtoint (i8** @global_var_30dd4 to i64), i64 8), !insn.addr !40
  %23 = inttoptr i64 %22 to i64*, !insn.addr !40
  store i64 -85, i64* %23, align 8, !insn.addr !40
  %24 = add i64 %4, ptrtoint (i32** @global_var_1c70 to i64), !insn.addr !41
  %25 = inttoptr i64 %24 to i32*, !insn.addr !41
  store i32 0, i32* %25, align 4, !insn.addr !41
  %26 = add i64 %4, ptrtoint (i8** @global_var_30d60 to i64), !insn.addr !42
  %27 = inttoptr i64 %26 to i8*, !insn.addr !42
  store i8 ptrtoint (i32* @global_var_1 to i8), i8* %27, align 1, !insn.addr !42
  %28 = add i64 %4, 588476, !insn.addr !43
  %29 = inttoptr i64 %28 to i8*, !insn.addr !43
  store i8 0, i8* %29, align 1, !insn.addr !43
  %30 = add i64 %4, 588464, !insn.addr !44
  %31 = inttoptr i64 %30 to i64*, !insn.addr !44
  %32 = load i64, i64* %31, align 8, !insn.addr !44
  %33 = call i64 @TS_Destroy.387(i64 %32), !insn.addr !45
  store i64 0, i64* %31, align 8, !insn.addr !46
  %34 = add i64 %4, 732, !insn.addr !47
  %35 = inttoptr i64 %34 to i32*, !insn.addr !47
  store i32 0, i32* %35, align 4, !insn.addr !47
  %36 = add i64 %4, 412, !insn.addr !48
  %37 = inttoptr i64 %36 to i32*, !insn.addr !48
  store i32 0, i32* %37, align 4, !insn.addr !48
  %38 = add i64 %4, 416, !insn.addr !49
  %39 = inttoptr i64 %38 to i8*, !insn.addr !50
  call void @__asm_rep_stosq_memset(i8* %39, i64 0, i64 39), !insn.addr !50
  ret i64 0, !insn.addr !50
}

define i32 @asv5220_open(i64 %inode, i64 %file) local_unnamed_addr {
dec_label_pc_23b:
  %rax.0.reg2mem = alloca i32, !insn.addr !51
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = call i64 @__decompiler_undefined_function_0()
  %2 = inttoptr i64 %inode to i32*, !insn.addr !51
  store i32 0, i32* %2, align 4, !insn.addr !51
  %3 = call i64 @mutex_unlock(i64 %0), !insn.addr !52
  %4 = add i64 %1, -24, !insn.addr !53
  %5 = inttoptr i64 %4 to i64*, !insn.addr !53
  %6 = load i64, i64* %5, align 8, !insn.addr !53
  %7 = call i64 @__readgsqword(i64 40), !insn.addr !54
  %8 = icmp eq i64 %6, %7, !insn.addr !54
  store i32 0, i32* %rax.0.reg2mem, !insn.addr !55
  br i1 %8, label %dec_label_pc_262, label %dec_label_pc_25d, !insn.addr !55

dec_label_pc_25d:                                 ; preds = %dec_label_pc_23b
  %9 = call i64 @__stack_chk_fail(), !insn.addr !56
  %phitmp = trunc i64 %9 to i32
  store i32 %phitmp, i32* %rax.0.reg2mem, !insn.addr !56
  br label %dec_label_pc_262, !insn.addr !56

dec_label_pc_262:                                 ; preds = %dec_label_pc_25d, %dec_label_pc_23b
  %rax.0.reload = load i32, i32* %rax.0.reg2mem
  ret i32 %rax.0.reload, !insn.addr !57
}

define i64 @asv5220_open.7(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_26b:
  %rdx.0.reg2mem = alloca i64, !insn.addr !58
  %0 = call i64 @mcount(), !insn.addr !59
  %1 = add i64 %arg1, 88, !insn.addr !60
  %2 = inttoptr i64 %1 to i32*, !insn.addr !60
  %3 = load i32, i32* %2, align 4, !insn.addr !60
  %4 = load i64, i64* @global_var_36b40, align 8, !insn.addr !61
  %5 = add i64 %4, 26224, !insn.addr !62
  %6 = call i64 @mutex_lock(i64 %5), !insn.addr !63
  %7 = load i64, i64* inttoptr (i64 -8 to i64*), align 8, !insn.addr !64
  %8 = add i64 %7, ptrtoint (i64* @global_var_4e0 to i64), !insn.addr !65
  %9 = inttoptr i64 %8 to i64*, !insn.addr !65
  %10 = load i64, i64* %9, align 8, !insn.addr !65
  %11 = mul i32 %3, 4, !insn.addr !66
  %12 = and i32 %11, 4194300
  %13 = zext i32 %12 to i64, !insn.addr !67
  %14 = inttoptr i64 %13 to i32*, !insn.addr !67
  %15 = load i32, i32* %14, align 4, !insn.addr !67
  %16 = add i64 %10, 600540, !insn.addr !68
  %17 = inttoptr i64 %16 to i32*, !insn.addr !68
  %18 = load i32, i32* %17, align 4, !insn.addr !68
  %19 = icmp eq i32 %18, %15, !insn.addr !68
  store i64 %10, i64* %rdx.0.reg2mem, !insn.addr !69
  br i1 %19, label %dec_label_pc_338, label %dec_label_pc_322, !insn.addr !69

dec_label_pc_322:                                 ; preds = %dec_label_pc_26b
  %20 = add i64 %7, 1256, !insn.addr !70
  %21 = inttoptr i64 %20 to i64*, !insn.addr !70
  %22 = load i64, i64* %21, align 8, !insn.addr !70
  store i64 %22, i64* %rdx.0.reg2mem, !insn.addr !71
  br label %dec_label_pc_338, !insn.addr !71

dec_label_pc_338:                                 ; preds = %dec_label_pc_322, %dec_label_pc_26b
  %rdx.0.reload = load i64, i64* %rdx.0.reg2mem
  %23 = add i64 %rdx.0.reload, 600548, !insn.addr !72
  %24 = inttoptr i64 %23 to i32*, !insn.addr !72
  %25 = load i32, i32* %24, align 4, !insn.addr !72
  %26 = icmp eq i32 %25, 1, !insn.addr !72
  %27 = icmp eq i1 %26, false, !insn.addr !73
  br i1 %27, label %dec_label_pc_354, label %dec_label_pc_341, !insn.addr !73

dec_label_pc_341:                                 ; preds = %dec_label_pc_338
  %28 = add i64 %7, 26224, !insn.addr !74
  %29 = call i64 @mutex_unlock(i64 %28), !insn.addr !75
  ret i64 4294967291, !insn.addr !76

dec_label_pc_354:                                 ; preds = %dec_label_pc_338
  store i32 ptrtoint (i32* @global_var_1 to i32), i32* %24, align 4, !insn.addr !77
  %30 = add i64 %arg2, 160, !insn.addr !78
  %31 = inttoptr i64 %30 to i64*, !insn.addr !78
  store i64 %rdx.0.reload, i64* %31, align 8, !insn.addr !78
  %32 = add i64 %rdx.0.reload, 600504, !insn.addr !79
  %33 = call i64 @mutex_lock(i64 %32), !insn.addr !80
  %34 = call i64 @mutex_unlock(i64 %32), !insn.addr !81
  call void @llvm.trap()
  unreachable
}

define i32 @asv5220_ioctl(i64 %inode, i64 %file, i32 %cmd, i8* %arg) local_unnamed_addr {
dec_label_pc_39c:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = trunc i64 %0 to i32, !insn.addr !82
  ret i32 %1, !insn.addr !82
}

define i64 @asv5220_ioctl.8(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4) local_unnamed_addr {
dec_label_pc_3cc:
  %storemerge5.reg2mem = alloca i64, !insn.addr !83
  %.reg2mem = alloca i16, !insn.addr !83
  %r12.0.reg2mem = alloca i64, !insn.addr !83
  %stack_var_-406 = alloca i64, align 8
  %stack_var_-407 = alloca i8, align 1
  %stack_var_-408 = alloca i64, align 8
  %stack_var_-456 = alloca i32, align 4
  %0 = call i8 @__decompiler_undefined_function_1()
  %stack_var_-72 = alloca i64, align 8
  %1 = call i64 @__decompiler_undefined_function_0()
  %2 = call i8 @__decompiler_undefined_function_1()
  %3 = call i8 @__decompiler_undefined_function_1()
  %stack_var_-488 = alloca i64, align 8
  %stack_var_-412 = alloca i16, align 2
  %stack_var_-432 = alloca i32, align 4
  %4 = call i32 @__decompiler_undefined_function_3()
  %stack_var_-424 = alloca i32, align 4
  %stack_var_-8 = alloca i64, align 8
  %5 = call i64 @mcount(), !insn.addr !84
  %6 = call i64 @__readgsqword(i64 40), !insn.addr !85
  %7 = add i64 %arg2, 160, !insn.addr !86
  %8 = inttoptr i64 %7 to i64*, !insn.addr !86
  %9 = load i64, i64* %8, align 8, !insn.addr !86
  %10 = trunc i64 %arg3 to i32, !insn.addr !87
  %11 = icmp eq i32 %10, 1074302340, !insn.addr !87
  br i1 %11, label %dec_label_pc_7c6, label %dec_label_pc_410, !insn.addr !88

dec_label_pc_410:                                 ; preds = %dec_label_pc_3cc
  %12 = add i64 %9, 7480, !insn.addr !89
  %13 = inttoptr i64 %12 to i64*, !insn.addr !89
  %14 = load i64, i64* %13, align 8, !insn.addr !89
  %15 = icmp ult i32 %10, 1074302341
  br i1 %15, label %dec_label_pc_418, label %dec_label_pc_472, !insn.addr !90

dec_label_pc_418:                                 ; preds = %dec_label_pc_410
  %16 = icmp eq i32 %10, ptrtoint (i32* @global_var_8d06 to i32), !insn.addr !91
  br i1 %16, label %dec_label_pc_6e5, label %dec_label_pc_424, !insn.addr !92

dec_label_pc_424:                                 ; preds = %dec_label_pc_418
  %17 = icmp ugt i32 %10, ptrtoint (i32* @global_var_8d06 to i32)
  br i1 %17, label %dec_label_pc_449, label %dec_label_pc_42c, !insn.addr !93

dec_label_pc_42c:                                 ; preds = %dec_label_pc_424
  %18 = icmp eq i32 %10, 36098, !insn.addr !94
  %19 = add i64 %9, 7472
  %20 = inttoptr i64 %19 to i8*
  %21 = load i8, i8* %20, align 1
  %22 = zext i8 %21 to i64
  %23 = add i64 %14, 888
  %24 = add i64 %23, %22
  %25 = inttoptr i64 %24 to i8*
  br i1 %18, label %dec_label_pc_624, label %dec_label_pc_65e, !insn.addr !95

dec_label_pc_449:                                 ; preds = %dec_label_pc_424
  switch i32 %10, label %dec_label_pc_6c5 [
    i32 1074302209, label %dec_label_pc_4d8
    i32 1074302339, label %dec_label_pc_780
  ]

dec_label_pc_472:                                 ; preds = %dec_label_pc_410
  %26 = icmp eq i32 %10, -2146923135, !insn.addr !96
  br i1 %26, label %dec_label_pc_705, label %dec_label_pc_47e, !insn.addr !97

dec_label_pc_47e:                                 ; preds = %dec_label_pc_472
  %27 = icmp ult i32 %10, -2146923134
  br i1 %27, label %dec_label_pc_486, label %dec_label_pc_4af, !insn.addr !98

dec_label_pc_486:                                 ; preds = %dec_label_pc_47e
  switch i32 %10, label %dec_label_pc_883 [
    i32 1074302343, label %dec_label_pc_8b2
    i32 -2146923260, label %dec_label_pc_684
  ]

dec_label_pc_4af:                                 ; preds = %dec_label_pc_47e
  switch i32 %10, label %dec_label_pc_762 [
    i32 -2146923131, label %dec_label_pc_7f6
    i32 -2146923128, label %dec_label_pc_949
  ]

dec_label_pc_4d8:                                 ; preds = %dec_label_pc_449
  %28 = bitcast i32* %stack_var_-424 to i64*, !insn.addr !99
  %29 = call i64 @copy_from_user(i64* nonnull %28, i64 %arg4, i64* bitcast (i8* @global_var_8 to i64*)), !insn.addr !99
  %30 = add i64 %9, 600536, !insn.addr !100
  %31 = inttoptr i64 %30 to i32*, !insn.addr !100
  %32 = load i32, i32* %31, align 4, !insn.addr !100
  %33 = icmp eq i32 %32, 0, !insn.addr !101
  br i1 %33, label %dec_label_pc_52d, label %dec_label_pc_4f6, !insn.addr !102

dec_label_pc_4f6:                                 ; preds = %dec_label_pc_4d8
  %34 = icmp eq i32 %32, 1, !insn.addr !103
  %35 = icmp eq i1 %34, false, !insn.addr !104
  br i1 %35, label %dec_label_pc_5d7, label %dec_label_pc_4ff, !insn.addr !104

dec_label_pc_4ff:                                 ; preds = %dec_label_pc_4f6
  %36 = load i64, i64* @global_var_31d68, align 8, !insn.addr !105
  %37 = icmp eq i64 %36, 0, !insn.addr !106
  br i1 %37, label %dec_label_pc_5d7, label %dec_label_pc_50f, !insn.addr !107

dec_label_pc_50f:                                 ; preds = %dec_label_pc_4ff
  %38 = load i32, i32* %stack_var_-424, align 4, !insn.addr !108
  %39 = load i32, i32* @global_var_31d60, align 4, !insn.addr !109
  %40 = icmp eq i32 %39, %38, !insn.addr !109
  %41 = icmp eq i1 %40, false, !insn.addr !110
  br i1 %41, label %dec_label_pc_5d7, label %dec_label_pc_5ca, !insn.addr !110

dec_label_pc_52d:                                 ; preds = %dec_label_pc_4d8
  %42 = load i64, i64* @global_var_31bc8, align 8, !insn.addr !111
  %43 = icmp eq i64 %42, 0, !insn.addr !112
  br i1 %43, label %dec_label_pc_579, label %dec_label_pc_539, !insn.addr !113

dec_label_pc_539:                                 ; preds = %dec_label_pc_52d
  %44 = load i32, i32* %stack_var_-424, align 4, !insn.addr !114
  %45 = load i32, i32* @global_var_31bc0, align 4, !insn.addr !115
  %46 = icmp eq i32 %45, %44, !insn.addr !115
  %47 = icmp eq i1 %46, false, !insn.addr !116
  br i1 %47, label %dec_label_pc_579, label %dec_label_pc_56c, !insn.addr !116

dec_label_pc_56c:                                 ; preds = %dec_label_pc_539
  %48 = call i64 @DTV_SetTunerFreq.157(i64 %9, i64 %42, i64* bitcast (i8* @global_var_6 to i64*)), !insn.addr !117
  br label %dec_label_pc_579, !insn.addr !117

dec_label_pc_579:                                 ; preds = %dec_label_pc_539, %dec_label_pc_56c, %dec_label_pc_52d
  %49 = ptrtoint i64* %stack_var_-8 to i64, !insn.addr !118
  %50 = call i64 @DTV_GetTunerTSIDList.382(i64 %9), !insn.addr !119
  %51 = sext i32 %4 to i64, !insn.addr !120
  %52 = mul i64 %51, ptrtoint (i16* @global_var_4 to i64), !insn.addr !121
  %53 = add i64 %52, -544, !insn.addr !121
  %54 = add i64 %53, %49, !insn.addr !121
  %55 = inttoptr i64 %54 to i32*, !insn.addr !121
  %56 = load i32, i32* %55, align 4, !insn.addr !121
  %57 = icmp eq i32 %56, 0, !insn.addr !122
  br i1 %57, label %dec_label_pc_5d7, label %dec_label_pc_59f, !insn.addr !123

dec_label_pc_59f:                                 ; preds = %dec_label_pc_579
  %58 = call i64 @DTV_SetTunerTSID.496(i64 %9, i32 %56, i64 0), !insn.addr !124
  br label %dec_label_pc_5d7, !insn.addr !125

dec_label_pc_5ca:                                 ; preds = %dec_label_pc_50f
  %59 = call i64 @DTV_SetTunerFreq.157(i64 %9, i64 %36, i64* bitcast (i8* @global_var_6 to i64*)), !insn.addr !126
  br label %dec_label_pc_5d7, !insn.addr !126

dec_label_pc_5d7:                                 ; preds = %dec_label_pc_50f, %dec_label_pc_5ca, %dec_label_pc_59f, %dec_label_pc_579, %dec_label_pc_4ff, %dec_label_pc_4f6
  %60 = add i64 %9, 600552, !insn.addr !127
  %61 = inttoptr i64 %60 to i32*, !insn.addr !127
  store i32 ptrtoint (i8* @global_var_5 to i32), i32* %61, align 4, !insn.addr !127
  store i64 0, i64* %r12.0.reg2mem, !insn.addr !128
  br label %dec_label_pc_5e7, !insn.addr !128

dec_label_pc_5e7:                                 ; preds = %dec_label_pc_601, %dec_label_pc_5d7
  %62 = call i64 @vUSB_Wait.362(i64 50), !insn.addr !129
  %63 = call i64 @DTV_TunerLockCheck.163(i64 %9), !insn.addr !130
  %64 = trunc i64 %63 to i32, !insn.addr !131
  %65 = icmp eq i32 %64, 0, !insn.addr !131
  %66 = icmp eq i1 %65, false, !insn.addr !132
  br i1 %66, label %dec_label_pc_607, label %dec_label_pc_601, !insn.addr !132

dec_label_pc_601:                                 ; preds = %dec_label_pc_5e7
  %r12.0.reload = load i64, i64* %r12.0.reg2mem
  %67 = add nuw nsw i64 %r12.0.reload, zext (i32 ptrtoint (i32* @global_var_1 to i32) to i64), !insn.addr !133
  %68 = and i64 %67, 4294967295, !insn.addr !133
  %69 = trunc i64 %67 to i32, !insn.addr !134
  %70 = icmp slt i32 %69, 50, !insn.addr !134
  store i64 %68, i64* %r12.0.reg2mem, !insn.addr !134
  br i1 %70, label %dec_label_pc_5e7, label %dec_label_pc_607, !insn.addr !134

dec_label_pc_607:                                 ; preds = %dec_label_pc_601, %dec_label_pc_5e7
  %71 = call i64 @vUSB_Wait.362(i64 300), !insn.addr !135
  ret i64 0, !insn.addr !136

dec_label_pc_624:                                 ; preds = %dec_label_pc_42c
  store i8 ptrtoint (i32* @global_var_1 to i8), i8* %25, align 1, !insn.addr !137
  %72 = call i64 @DTV_StreamThreadRun.284(i64 %9), !insn.addr !138
  %73 = add i64 %9, 600552, !insn.addr !139
  %74 = inttoptr i64 %73 to i32*, !insn.addr !139
  store i32 ptrtoint (i8* @global_var_5 to i32), i32* %74, align 4, !insn.addr !139
  %75 = load i8, i8* %20, align 1, !insn.addr !140
  %76 = call i64 @vCleanStreamBuffer.619(i64 %14, i8 %75), !insn.addr !141
  ret i64 0, !insn.addr !142

dec_label_pc_65e:                                 ; preds = %dec_label_pc_42c
  store i8 0, i8* %25, align 1, !insn.addr !143
  %77 = call i64 @DTV_StreamThreadStop.192(i64 %9, i64 0), !insn.addr !144
  ret i64 0, !insn.addr !145

dec_label_pc_684:                                 ; preds = %dec_label_pc_486
  %78 = add i64 %9, 7472, !insn.addr !146
  %79 = inttoptr i64 %78 to i8*, !insn.addr !146
  %80 = load i8, i8* %79, align 1, !insn.addr !146
  %81 = bitcast i32* %stack_var_-432 to i64*, !insn.addr !147
  %82 = call i64 @DTV_GetCNRegisterValue.490(i64 %9, i8 %80, i64* nonnull %81), !insn.addr !147
  %83 = load i32, i32* %stack_var_-432, align 4, !insn.addr !148
  %84 = trunc i32 %83 to i16, !insn.addr !149
  store i16 %84, i16* %stack_var_-412, align 2, !insn.addr !149
  %85 = bitcast i16* %stack_var_-412 to i32*, !insn.addr !150
  %86 = call i64 @copy_to_user(i64 %arg4, i32* nonnull %85, i64* bitcast (i16* @global_var_4 to i64*)), !insn.addr !150
  ret i64 0, !insn.addr !151

dec_label_pc_6c5:                                 ; preds = %dec_label_pc_449
  %87 = call i64 @TC_SetLNB.173(i64 %14, i64 0), !insn.addr !152
  ret i64 0, !insn.addr !153

dec_label_pc_6e5:                                 ; preds = %dec_label_pc_418
  %88 = call i64 @TC_SetLNB.173(i64 %14, i64 0), !insn.addr !154
  ret i64 0, !insn.addr !155

dec_label_pc_705:                                 ; preds = %dec_label_pc_472
  store i16 0, i16* %stack_var_-412, align 2, !insn.addr !156
  %89 = add i64 %9, 5612, !insn.addr !157
  %90 = inttoptr i64 %89 to i8*, !insn.addr !157
  %91 = load i8, i8* %90, align 1, !insn.addr !157
  %92 = icmp eq i8 %91, 0, !insn.addr !157
  %93 = select i1 %92, i16 ptrtoint (i32* @global_var_2 to i16), i16 trunc (i32 or (i32 ptrtoint (i32* @global_var_1 to i32), i32 ptrtoint (i32* @global_var_2 to i32)) to i16), !insn.addr !158
  store i16 %93, i16* %stack_var_-412, align 2, !insn.addr !158
  %94 = add i64 %9, 5261, !insn.addr !159
  %95 = inttoptr i64 %94 to i8*, !insn.addr !159
  %96 = load i8, i8* %95, align 1, !insn.addr !159
  %97 = icmp eq i8 %96, 0, !insn.addr !159
  store i16 %93, i16* %.reg2mem, !insn.addr !160
  br i1 %97, label %dec_label_pc_73d, label %dec_label_pc_734, !insn.addr !160

dec_label_pc_734:                                 ; preds = %dec_label_pc_705
  %98 = or i16 %93, ptrtoint (i16* @global_var_4 to i16), !insn.addr !161
  store i16 %98, i16* %stack_var_-412, align 2, !insn.addr !162
  store i16 %98, i16* %.reg2mem, !insn.addr !162
  br label %dec_label_pc_73d, !insn.addr !162

dec_label_pc_73d:                                 ; preds = %dec_label_pc_734, %dec_label_pc_705
  %.reload = load i16, i16* %.reg2mem, !insn.addr !163
  %99 = or i16 %.reload, 64
  store i16 %99, i16* %stack_var_-412, align 2, !insn.addr !163
  %100 = bitcast i16* %stack_var_-412 to i32*, !insn.addr !164
  %101 = call i64 @copy_to_user(i64 %arg4, i32* nonnull %100, i64* bitcast (i32* @global_var_1 to i64*)), !insn.addr !164
  ret i64 0, !insn.addr !165

dec_label_pc_762:                                 ; preds = %dec_label_pc_4af
  %102 = add i64 %9, 5613, !insn.addr !166
  %103 = inttoptr i64 %102 to i32*, !insn.addr !167
  %104 = call i64 @copy_to_user(i64 %arg4, i32* %103, i64* bitcast (i8* @global_var_10 to i64*)), !insn.addr !167
  ret i64 0, !insn.addr !168

dec_label_pc_780:                                 ; preds = %dec_label_pc_449
  %105 = call i64 @copy_from_user(i64* nonnull %stack_var_-488, i64 %arg4, i64* inttoptr (i64 32 to i64*)), !insn.addr !169
  %106 = load i64, i64* %stack_var_-488, align 8, !insn.addr !170
  %107 = call i64 @DTV_GenEncSeed.172(i64 %9, i64 %106, i8 %3, i64 %1, i8 %2), !insn.addr !171
  ret i64 %107, !insn.addr !172

dec_label_pc_7c6:                                 ; preds = %dec_label_pc_3cc
  %108 = call i64 @copy_from_user(i64* nonnull %stack_var_-72, i64 %arg4, i64* bitcast (i8** @global_var_11 to i64*)), !insn.addr !173
  %109 = call i64 @DTV_Muli2LibEnable.261(i64 %9, i64* nonnull %stack_var_-72, i8 %0), !insn.addr !174
  ret i64 %109, !insn.addr !175

dec_label_pc_7f6:                                 ; preds = %dec_label_pc_4af
  %110 = add i64 %arg4, ptrtoint (i8* @global_var_10 to i64), !insn.addr !176
  %111 = inttoptr i64 %110 to i32*, !insn.addr !176
  %112 = load i32, i32* %111, align 4, !insn.addr !176
  %113 = mul i32 %112, 188, !insn.addr !176
  %114 = sext i32 %113 to i64, !insn.addr !177
  %115 = call i64 @__kmalloc(i64 %114, i64* bitcast (i32** @global_var_20 to i64*), i64 %arg3), !insn.addr !178
  %116 = load i32, i32* %111, align 4, !insn.addr !179
  %117 = call i64 @DTV_DecrypMultiTS.429(i64 %9, i64 %115, i32 %116, i64 %115), !insn.addr !180
  %118 = trunc i64 %117 to i8, !insn.addr !181
  %119 = icmp eq i8 %118, ptrtoint (i32* @global_var_1 to i8), !insn.addr !181
  %120 = icmp eq i1 %119, false, !insn.addr !182
  br i1 %120, label %dec_label_pc_871, label %dec_label_pc_849, !insn.addr !182

dec_label_pc_849:                                 ; preds = %dec_label_pc_7f6
  %121 = load i32, i32* %111, align 4, !insn.addr !183
  %122 = mul i32 %121, 188, !insn.addr !183
  %123 = zext i32 %122 to i64, !insn.addr !183
  %124 = add i64 %arg4, ptrtoint (i8* @global_var_8 to i64), !insn.addr !184
  %125 = inttoptr i64 %124 to i64*, !insn.addr !184
  %126 = load i64, i64* %125, align 8, !insn.addr !184
  %127 = inttoptr i64 %115 to i32*, !insn.addr !185
  %128 = inttoptr i64 %123 to i64*, !insn.addr !185
  %129 = call i64 @copy_to_user(i64 %126, i32* %127, i64* %128), !insn.addr !185
  %130 = call i64 @kfree(i64 %115), !insn.addr !186
  ret i64 0, !insn.addr !187

dec_label_pc_871:                                 ; preds = %dec_label_pc_7f6
  %131 = call i64 @kfree(i64 %115), !insn.addr !188
  ret i64 4294967274, !insn.addr !189

dec_label_pc_883:                                 ; preds = %dec_label_pc_486
  %132 = bitcast i32* %stack_var_-456 to i64*, !insn.addr !190
  %133 = call i64 @copy_from_user(i64* nonnull %132, i64 %arg4, i64* bitcast (i8* @global_var_10 to i64*)), !insn.addr !190
  %134 = load i32, i32* %stack_var_-456, align 4, !insn.addr !191
  %135 = zext i32 %134 to i64, !insn.addr !191
  %136 = call i64 @DTV_SetProgramID.514(i64 %9, i64 %135), !insn.addr !192
  ret i64 %136, !insn.addr !193

dec_label_pc_8b2:                                 ; preds = %dec_label_pc_486
  %137 = call i64 @copy_from_user(i64* nonnull %stack_var_-408, i64 %arg4, i64* inttoptr (i64 322 to i64*)), !insn.addr !194
  %138 = load i8, i8* %stack_var_-407, align 1, !insn.addr !195
  %139 = add i64 %14, 1248, !insn.addr !196
  %140 = inttoptr i64 %139 to i64*, !insn.addr !196
  %141 = load i64, i64* %140, align 8, !insn.addr !196
  %142 = add i64 %141, 8
  %143 = call i64 @BCAS_CMDSet_Ext.189(i64 %142, i64 %9, i64* nonnull %stack_var_-406, i8 %138)
  ret i64 %143, !insn.addr !197

dec_label_pc_949:                                 ; preds = %dec_label_pc_4af
  %144 = add i64 %9, 7472, !insn.addr !198
  %145 = inttoptr i64 %144 to i8*, !insn.addr !198
  %146 = load i8, i8* %145, align 1, !insn.addr !198
  %147 = icmp eq i8 %146, 0, !insn.addr !198
  %148 = icmp eq i1 %147, false, !insn.addr !199
  br i1 %148, label %dec_label_pc_975, label %dec_label_pc_952, !insn.addr !199

dec_label_pc_952:                                 ; preds = %dec_label_pc_949
  %149 = add i64 %9, 8, !insn.addr !200
  %150 = call i64 @BCAS_CMDGet_Ext.484(i64 %149, i64 %9, i64* nonnull %stack_var_-408, i8* nonnull %stack_var_-407, i64* nonnull %stack_var_-406, i64 320, i64 %6), !insn.addr !201
  store i64 %150, i64* %storemerge5.reg2mem, !insn.addr !202
  br label %dec_label_pc_9a2, !insn.addr !202

dec_label_pc_975:                                 ; preds = %dec_label_pc_949
  %151 = add i64 %14, 1248, !insn.addr !203
  %152 = inttoptr i64 %151 to i64*, !insn.addr !203
  %153 = load i64, i64* %152, align 8, !insn.addr !203
  %154 = icmp eq i64 %153, 0, !insn.addr !204
  br i1 %154, label %dec_label_pc_9c1, label %dec_label_pc_981, !insn.addr !205

dec_label_pc_981:                                 ; preds = %dec_label_pc_975
  %155 = add i64 %153, 8, !insn.addr !206
  %156 = call i64 @BCAS_CMDGet_Ext.484(i64 %155, i64 %9, i64* nonnull %stack_var_-408, i8* nonnull %stack_var_-407, i64* nonnull %stack_var_-406, i64 320, i64 %6), !insn.addr !207
  store i64 %156, i64* %storemerge5.reg2mem, !insn.addr !207
  br label %dec_label_pc_9a2, !insn.addr !207

dec_label_pc_9a2:                                 ; preds = %dec_label_pc_981, %dec_label_pc_952
  %storemerge5.reload = load i64, i64* %storemerge5.reg2mem
  %157 = trunc i64 %storemerge5.reload to i8, !insn.addr !208
  %158 = icmp eq i8 %157, ptrtoint (i32* @global_var_1 to i8), !insn.addr !208
  %159 = icmp eq i1 %158, false, !insn.addr !209
  br i1 %159, label %dec_label_pc_9c1, label %dec_label_pc_9a6, !insn.addr !209

dec_label_pc_9a6:                                 ; preds = %dec_label_pc_9a2
  %160 = bitcast i64* %stack_var_-408 to i32*, !insn.addr !210
  %161 = call i64 @copy_to_user(i64 %arg4, i32* nonnull %160, i64* inttoptr (i64 322 to i64*)), !insn.addr !210
  ret i64 0, !insn.addr !211

dec_label_pc_9c1:                                 ; preds = %dec_label_pc_9a2, %dec_label_pc_975
  %162 = bitcast i64* %stack_var_-408 to i32*, !insn.addr !212
  %163 = call i64 @copy_to_user(i64 %arg4, i32* nonnull %162, i64* inttoptr (i64 322 to i64*)), !insn.addr !212
  ret i64 4294967274, !insn.addr !213
}

define i64 @asv5220_read(i64 %file, i8* %buf, i64 %cnt, i64* %ppos) local_unnamed_addr {
dec_label_pc_9da:
  %rax.0.reg2mem = alloca i64, !insn.addr !214
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = add i64 %0, -40, !insn.addr !215
  %2 = inttoptr i64 %1 to i64*, !insn.addr !215
  %3 = load i64, i64* %2, align 8, !insn.addr !215
  %4 = call i64 @__readgsqword(i64 40), !insn.addr !216
  %5 = icmp eq i64 %3, %4, !insn.addr !216
  br i1 %5, label %dec_label_pc_9fc, label %dec_label_pc_9f7, !insn.addr !217

dec_label_pc_9f7:                                 ; preds = %dec_label_pc_9da
  %6 = call i64 @__stack_chk_fail(), !insn.addr !218
  store i64 %6, i64* %rax.0.reg2mem, !insn.addr !218
  br label %dec_label_pc_9fc, !insn.addr !218

dec_label_pc_9fc:                                 ; preds = %dec_label_pc_9f7, %dec_label_pc_9da
  %rax.0.reload = load i64, i64* %rax.0.reg2mem
  ret i64 %rax.0.reload, !insn.addr !219
}

define i64 @asv5220_read.9(i64 %arg1, i64 %arg2, i64 %arg3) local_unnamed_addr {
dec_label_pc_a0a:
  %rax.0.reg2mem = alloca i64, !insn.addr !220
  %rbx.0.reg2mem = alloca i64, !insn.addr !220
  %0 = call i64 @mcount(), !insn.addr !221
  %1 = add i64 %arg1, 160, !insn.addr !222
  %2 = inttoptr i64 %1 to i64*, !insn.addr !222
  %3 = load i64, i64* %2, align 8, !insn.addr !222
  %4 = add i64 %3, 7480, !insn.addr !223
  %5 = inttoptr i64 %4 to i64*, !insn.addr !223
  %6 = load i64, i64* %5, align 8, !insn.addr !223
  %7 = add i64 %3, 7472, !insn.addr !224
  %8 = inttoptr i64 %7 to i8*, !insn.addr !224
  %9 = load i8, i8* %8, align 1, !insn.addr !224
  %10 = zext i8 %9 to i64, !insn.addr !224
  %11 = mul i64 %10, 8, !insn.addr !225
  %12 = add i64 %6, 1160, !insn.addr !225
  %13 = add i64 %12, %11, !insn.addr !225
  %14 = inttoptr i64 %13 to i64*, !insn.addr !225
  %15 = load i64, i64* %14, align 8, !insn.addr !225
  %16 = add i64 %15, 296, !insn.addr !226
  %17 = inttoptr i64 %16 to i64*, !insn.addr !226
  store i64 0, i64* %rbx.0.reg2mem, !insn.addr !227
  br label %dec_label_pc_a60, !insn.addr !227

dec_label_pc_a4b:                                 ; preds = %dec_label_pc_a60
  %rbx.0.reload = load i64, i64* %rbx.0.reg2mem
  %18 = add nuw nsw i64 %rbx.0.reload, zext (i32 ptrtoint (i32* @global_var_1 to i32) to i64), !insn.addr !228
  %19 = and i64 %18, 4294967295, !insn.addr !228
  %20 = call i64 @vUSB_Wait.362(i64 ptrtoint (i32* @global_var_1 to i64)), !insn.addr !229
  %21 = trunc i64 %18 to i32, !insn.addr !230
  %22 = icmp eq i32 %21, 501, !insn.addr !230
  store i64 %19, i64* %rbx.0.reg2mem, !insn.addr !231
  br i1 %22, label %dec_label_pc_a69, label %dec_label_pc_a60, !insn.addr !231

dec_label_pc_a60:                                 ; preds = %dec_label_pc_a4b, %dec_label_pc_a0a
  %23 = load i64, i64* %17, align 8, !insn.addr !226
  %24 = icmp ult i64 %23, %arg3, !insn.addr !226
  br i1 %24, label %dec_label_pc_a4b, label %dec_label_pc_a69, !insn.addr !232

dec_label_pc_a69:                                 ; preds = %dec_label_pc_a4b, %dec_label_pc_a60
  %25 = call i64 @__kmalloc(i64 %arg3, i64* bitcast (i32** @global_var_20 to i64*), i64 %10), !insn.addr !233
  %26 = and i64 %arg3, 4294967295, !insn.addr !234
  %27 = call i64 @DTV_StreamDataRead.499(i64 %3, i64 %25, i64 %26), !insn.addr !235
  %28 = trunc i64 %27 to i32, !insn.addr !236
  %29 = icmp slt i32 %28, 0, !insn.addr !236
  store i64 %27, i64* %rax.0.reg2mem, !insn.addr !237
  br i1 %29, label %dec_label_pc_a9f, label %dec_label_pc_a90, !insn.addr !237

dec_label_pc_a90:                                 ; preds = %dec_label_pc_a69
  %30 = and i64 %27, 4294967295, !insn.addr !238
  %31 = inttoptr i64 %25 to i32*, !insn.addr !239
  %32 = inttoptr i64 %30 to i64*, !insn.addr !239
  %33 = call i64 @copy_to_user(i64 %arg2, i32* %31, i64* %32), !insn.addr !239
  store i64 %33, i64* %rax.0.reg2mem, !insn.addr !239
  br label %dec_label_pc_a9f, !insn.addr !239

dec_label_pc_a9f:                                 ; preds = %dec_label_pc_a90, %dec_label_pc_a69
  %rax.0.reload = load i64, i64* %rax.0.reg2mem
  ret i64 %rax.0.reload, !insn.addr !239
}

define i64 @SmiDrvDispatchPnpStartComplete(i8* %DeviceObject, i8* %Irp, i8* %Context) local_unnamed_addr {
dec_label_pc_aa4:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = call i64 @__decompiler_undefined_function_0()
  %2 = trunc i64 %1 to i32
  %3 = inttoptr i64 %1 to i32*, !insn.addr !240
  store i32 %2, i32* %3, align 4, !insn.addr !240
  %4 = sub i64 %1, zext (i32 ptrtoint (i32* @global_var_1 to i32) to i64), !insn.addr !241
  %5 = and i64 %4, 4294967295, !insn.addr !241
  %6 = trunc i64 %4 to i32, !insn.addr !242
  %7 = add i64 %0, 600552, !insn.addr !242
  %8 = inttoptr i64 %7 to i32*, !insn.addr !242
  store i32 %6, i32* %8, align 4, !insn.addr !242
  ret i64 %5, !insn.addr !242
}

define i64 @SmiGetDeviceInformation(i64 %FdoData) local_unnamed_addr {
dec_label_pc_ab4:
  %0 = call i64 @__decompiler_undefined_function_0()
  ret i64 %0, !insn.addr !243
}

define i64 @GetPCIBusInterfaceStandard(i8* %DeviceObject, i8* %BusInterfaceStandard) local_unnamed_addr {
dec_label_pc_ac4:
  %0 = call i64 @__decompiler_undefined_function_0()
  ret i64 %0, !insn.addr !244
}

define void @SmiCalculateTotalMemSize(i64 %FdoData) local_unnamed_addr {
dec_label_pc_ad4:
  %0 = call i64 @mcount(), !insn.addr !245
  ret void, !insn.addr !246
}

define i64 @SmiGetDeviceInformation.547() local_unnamed_addr {
dec_label_pc_ae4:
  %0 = call i64 @mcount(), !insn.addr !247
  ret i64 ptrtoint (i32* @global_var_1 to i64), !insn.addr !248
}

define i64 @GetPCIBusInterfaceStandard.210(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_af4:
  %0 = call i64 @mcount(), !insn.addr !249
  ret i64 ptrtoint (i32* @global_var_1 to i64), !insn.addr !250
}

define i64 @SmiCalculateTotalMemSize.533(i64* %arg1) local_unnamed_addr {
dec_label_pc_b04:
  %0 = ptrtoint i64* %arg1 to i64
  %1 = call i64 @mcount(), !insn.addr !251
  %2 = add i64 %0, 22760, !insn.addr !252
  %3 = inttoptr i64 %2 to i32*, !insn.addr !252
  %4 = load i32, i32* %3, align 4, !insn.addr !252
  %5 = icmp ult i32 %4, 15
  br i1 %5, label %dec_label_pc_b1a, label %dec_label_pc_cdd, !insn.addr !253

dec_label_pc_b1a:                                 ; preds = %dec_label_pc_b04
  %6 = zext i32 %4 to i64, !insn.addr !254
  ret i64 %6, !insn.addr !255

dec_label_pc_cdd:                                 ; preds = %dec_label_pc_b04
  ret i64 %1, !insn.addr !255
}

define i64 @function_b27(i64 %arg1) local_unnamed_addr {
dec_label_pc_b27:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = add i64 %arg1, 22752, !insn.addr !256
  %2 = inttoptr i64 %1 to i64*, !insn.addr !256
  store i64 58656, i64* %2, align 8, !insn.addr !256
  %3 = add i64 %arg1, 22764, !insn.addr !257
  %4 = inttoptr i64 %3 to i8*, !insn.addr !257
  store i8 ptrtoint (i32* @global_var_1 to i8), i8* %4, align 1, !insn.addr !257
  %5 = add i64 %arg1, 22765, !insn.addr !258
  %6 = inttoptr i64 %5 to i8*, !insn.addr !258
  store i8 0, i8* %6, align 1, !insn.addr !258
  ret i64 %0, !insn.addr !259
}

define i64 @function_b45(i64 %arg1) local_unnamed_addr {
dec_label_pc_b45:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = add i64 %arg1, 22752, !insn.addr !260
  %2 = inttoptr i64 %1 to i64*, !insn.addr !260
  store i64 58656, i64* %2, align 8, !insn.addr !260
  %3 = add i64 %arg1, 22764, !insn.addr !261
  %4 = inttoptr i64 %3 to i8*, !insn.addr !261
  store i8 ptrtoint (i32* @global_var_2 to i8), i8* %4, align 1, !insn.addr !261
  %5 = add i64 %arg1, 22765, !insn.addr !262
  %6 = inttoptr i64 %5 to i8*, !insn.addr !262
  store i8 0, i8* %6, align 1, !insn.addr !262
  ret i64 %0, !insn.addr !263
}

define i64 @function_b63(i64 %arg1) local_unnamed_addr {
dec_label_pc_b63:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = add i64 %arg1, 22752, !insn.addr !264
  %2 = inttoptr i64 %1 to i64*, !insn.addr !264
  store i64 58656, i64* %2, align 8, !insn.addr !264
  %3 = add i64 %arg1, 22764, !insn.addr !265
  %4 = inttoptr i64 %3 to i8*, !insn.addr !265
  store i8 0, i8* %4, align 1, !insn.addr !265
  %5 = add i64 %arg1, 22765, !insn.addr !266
  %6 = inttoptr i64 %5 to i8*, !insn.addr !266
  store i8 ptrtoint (i32* @global_var_1 to i8), i8* %6, align 1, !insn.addr !266
  ret i64 %0, !insn.addr !267
}

define i64 @function_b81(i64 %arg1) local_unnamed_addr {
dec_label_pc_b81:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = add i64 %arg1, 22752, !insn.addr !268
  %2 = inttoptr i64 %1 to i64*, !insn.addr !268
  store i64 58656, i64* %2, align 8, !insn.addr !268
  %3 = add i64 %arg1, 22764, !insn.addr !269
  %4 = inttoptr i64 %3 to i8*, !insn.addr !269
  store i8 0, i8* %4, align 1, !insn.addr !269
  %5 = add i64 %arg1, 22765, !insn.addr !270
  %6 = inttoptr i64 %5 to i8*, !insn.addr !270
  store i8 ptrtoint (i32* @global_var_2 to i8), i8* %6, align 1, !insn.addr !270
  ret i64 %0, !insn.addr !271
}

define i64 @function_b9f(i64 %arg1) local_unnamed_addr {
dec_label_pc_b9f:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = add i64 %arg1, 22752, !insn.addr !272
  %2 = inttoptr i64 %1 to i64*, !insn.addr !272
  store i64 117312, i64* %2, align 8, !insn.addr !272
  %3 = add i64 %arg1, 22764, !insn.addr !273
  %4 = inttoptr i64 %3 to i8*, !insn.addr !273
  store i8 ptrtoint (i8** @global_var_3 to i8), i8* %4, align 1, !insn.addr !273
  %5 = add i64 %arg1, 22765, !insn.addr !274
  %6 = inttoptr i64 %5 to i8*, !insn.addr !274
  store i8 0, i8* %6, align 1, !insn.addr !274
  ret i64 %0, !insn.addr !275
}

define i64 @function_bbd(i64 %arg1) local_unnamed_addr {
dec_label_pc_bbd:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = add i64 %arg1, 22752, !insn.addr !276
  %2 = inttoptr i64 %1 to i64*, !insn.addr !276
  store i64 117312, i64* %2, align 8, !insn.addr !276
  %3 = add i64 %arg1, 22764, !insn.addr !277
  %4 = inttoptr i64 %3 to i8*, !insn.addr !277
  store i8 0, i8* %4, align 1, !insn.addr !277
  %5 = add i64 %arg1, 22765, !insn.addr !278
  %6 = inttoptr i64 %5 to i8*, !insn.addr !278
  store i8 ptrtoint (i8** @global_var_3 to i8), i8* %6, align 1, !insn.addr !278
  ret i64 %0, !insn.addr !279
}

define i64 @function_bdb(i64 %arg1) local_unnamed_addr {
dec_label_pc_bdb:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = add i64 %arg1, 22752, !insn.addr !280
  %2 = inttoptr i64 %1 to i64*, !insn.addr !280
  store i64 117312, i64* %2, align 8, !insn.addr !280
  %3 = add i64 %arg1, 22764, !insn.addr !281
  %4 = inttoptr i64 %3 to i8*, !insn.addr !281
  store i8 ptrtoint (i32* @global_var_1 to i8), i8* %4, align 1, !insn.addr !281
  %5 = add i64 %arg1, 22765, !insn.addr !282
  %6 = inttoptr i64 %5 to i8*, !insn.addr !282
  store i8 ptrtoint (i32* @global_var_1 to i8), i8* %6, align 1, !insn.addr !282
  ret i64 %0, !insn.addr !283
}

define i64 @function_bf9(i64 %arg1) local_unnamed_addr {
dec_label_pc_bf9:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = add i64 %arg1, 22752, !insn.addr !284
  %2 = inttoptr i64 %1 to i64*, !insn.addr !284
  store i64 117312, i64* %2, align 8, !insn.addr !284
  %3 = add i64 %arg1, 22764, !insn.addr !285
  %4 = inttoptr i64 %3 to i8*, !insn.addr !285
  store i8 ptrtoint (i32* @global_var_1 to i8), i8* %4, align 1, !insn.addr !285
  %5 = add i64 %arg1, 22765, !insn.addr !286
  %6 = inttoptr i64 %5 to i8*, !insn.addr !286
  store i8 ptrtoint (i32* @global_var_2 to i8), i8* %6, align 1, !insn.addr !286
  ret i64 %0, !insn.addr !287
}

define i64 @function_c17(i64 %arg1) local_unnamed_addr {
dec_label_pc_c17:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = add i64 %arg1, 22752, !insn.addr !288
  %2 = inttoptr i64 %1 to i64*, !insn.addr !288
  store i64 117312, i64* %2, align 8, !insn.addr !288
  %3 = add i64 %arg1, 22764, !insn.addr !289
  %4 = inttoptr i64 %3 to i8*, !insn.addr !289
  store i8 ptrtoint (i32* @global_var_2 to i8), i8* %4, align 1, !insn.addr !289
  %5 = add i64 %arg1, 22765, !insn.addr !290
  %6 = inttoptr i64 %5 to i8*, !insn.addr !290
  store i8 ptrtoint (i32* @global_var_1 to i8), i8* %6, align 1, !insn.addr !290
  ret i64 %0, !insn.addr !291
}

define i64 @function_c35(i64 %arg1) local_unnamed_addr {
dec_label_pc_c35:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = add i64 %arg1, 22752, !insn.addr !292
  %2 = inttoptr i64 %1 to i64*, !insn.addr !292
  store i64 117312, i64* %2, align 8, !insn.addr !292
  %3 = add i64 %arg1, 22764, !insn.addr !293
  %4 = inttoptr i64 %3 to i8*, !insn.addr !293
  store i8 ptrtoint (i32* @global_var_2 to i8), i8* %4, align 1, !insn.addr !293
  %5 = add i64 %arg1, 22765, !insn.addr !294
  %6 = inttoptr i64 %5 to i8*, !insn.addr !294
  store i8 ptrtoint (i32* @global_var_2 to i8), i8* %6, align 1, !insn.addr !294
  ret i64 %0, !insn.addr !295
}

define i64 @function_c53(i64 %arg1) local_unnamed_addr {
dec_label_pc_c53:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = add i64 %arg1, 22752, !insn.addr !296
  %2 = inttoptr i64 %1 to i64*, !insn.addr !296
  store i64 175968, i64* %2, align 8, !insn.addr !296
  %3 = add i64 %arg1, 22764, !insn.addr !297
  %4 = inttoptr i64 %3 to i8*, !insn.addr !297
  store i8 ptrtoint (i8** @global_var_3 to i8), i8* %4, align 1, !insn.addr !297
  %5 = add i64 %arg1, 22765, !insn.addr !298
  %6 = inttoptr i64 %5 to i8*, !insn.addr !298
  store i8 ptrtoint (i32* @global_var_1 to i8), i8* %6, align 1, !insn.addr !298
  ret i64 %0, !insn.addr !299
}

define i64 @function_c71(i64 %arg1) local_unnamed_addr {
dec_label_pc_c71:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = add i64 %arg1, 22752, !insn.addr !300
  %2 = inttoptr i64 %1 to i64*, !insn.addr !300
  store i64 175968, i64* %2, align 8, !insn.addr !300
  %3 = add i64 %arg1, 22764, !insn.addr !301
  %4 = inttoptr i64 %3 to i8*, !insn.addr !301
  store i8 ptrtoint (i8** @global_var_3 to i8), i8* %4, align 1, !insn.addr !301
  %5 = add i64 %arg1, 22765, !insn.addr !302
  %6 = inttoptr i64 %5 to i8*, !insn.addr !302
  store i8 ptrtoint (i32* @global_var_2 to i8), i8* %6, align 1, !insn.addr !302
  ret i64 %0, !insn.addr !303
}

define i64 @function_c8c(i64 %arg1) local_unnamed_addr {
dec_label_pc_c8c:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = add i64 %arg1, 22752, !insn.addr !304
  %2 = inttoptr i64 %1 to i64*, !insn.addr !304
  store i64 175968, i64* %2, align 8, !insn.addr !304
  %3 = add i64 %arg1, 22764, !insn.addr !305
  %4 = inttoptr i64 %3 to i8*, !insn.addr !305
  store i8 ptrtoint (i32* @global_var_1 to i8), i8* %4, align 1, !insn.addr !305
  %5 = add i64 %arg1, 22765, !insn.addr !306
  %6 = inttoptr i64 %5 to i8*, !insn.addr !306
  store i8 ptrtoint (i8** @global_var_3 to i8), i8* %6, align 1, !insn.addr !306
  ret i64 %0, !insn.addr !307
}

define i64 @function_ca7(i64 %arg1) local_unnamed_addr {
dec_label_pc_ca7:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = add i64 %arg1, 22752, !insn.addr !308
  %2 = inttoptr i64 %1 to i64*, !insn.addr !308
  store i64 175968, i64* %2, align 8, !insn.addr !308
  %3 = add i64 %arg1, 22764, !insn.addr !309
  %4 = inttoptr i64 %3 to i8*, !insn.addr !309
  store i8 ptrtoint (i32* @global_var_2 to i8), i8* %4, align 1, !insn.addr !309
  %5 = add i64 %arg1, 22765, !insn.addr !310
  %6 = inttoptr i64 %5 to i8*, !insn.addr !310
  store i8 ptrtoint (i8** @global_var_3 to i8), i8* %6, align 1, !insn.addr !310
  ret i64 %0, !insn.addr !311
}

define i64 @function_cc2(i64 %arg1) local_unnamed_addr {
dec_label_pc_cc2:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = add i64 %arg1, 22752, !insn.addr !312
  %2 = inttoptr i64 %1 to i64*, !insn.addr !312
  store i64 ptrtoint (i64* @global_var_39480 to i64), i64* %2, align 8, !insn.addr !312
  %3 = add i64 %arg1, 22764, !insn.addr !313
  %4 = inttoptr i64 %3 to i8*, !insn.addr !313
  store i8 ptrtoint (i8** @global_var_3 to i8), i8* %4, align 1, !insn.addr !313
  %5 = add i64 %arg1, 22765, !insn.addr !314
  %6 = inttoptr i64 %5 to i8*, !insn.addr !314
  store i8 ptrtoint (i8** @global_var_3 to i8), i8* %6, align 1, !insn.addr !314
  ret i64 %0, !insn.addr !315
}

define void @SmiCalculateMemAddr(i64 %FdoData) local_unnamed_addr {
dec_label_pc_ce4:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = trunc i64 %0 to i8
  %2 = mul i8 %1, 2, !insn.addr !316
  %3 = inttoptr i64 %0 to i8*, !insn.addr !316
  store i8 %2, i8* %3, align 1, !insn.addr !316
  %4 = add i64 %FdoData, 22764, !insn.addr !317
  %5 = inttoptr i64 %4 to i8*, !insn.addr !317
  store i8 0, i8* %5, align 1, !insn.addr !317
  %6 = add i64 %FdoData, 22765, !insn.addr !318
  %7 = inttoptr i64 %6 to i8*, !insn.addr !318
  store i8 0, i8* %7, align 1, !insn.addr !318
  %8 = load i8, i8* %5, align 1, !insn.addr !319
  %9 = zext i8 %8 to i64, !insn.addr !319
  %10 = add i64 %FdoData, 22768, !insn.addr !320
  %11 = inttoptr i64 %10 to i64*, !insn.addr !320
  store i64 %9, i64* %11, align 8, !insn.addr !320
  ret void, !insn.addr !321
}

define i64 @SmiCalculateMemAddr.276(i64 %arg1) local_unnamed_addr {
dec_label_pc_d14:
  %0 = call i64 @mcount(), !insn.addr !322
  %1 = add i64 %arg1, 22760, !insn.addr !323
  %2 = inttoptr i64 %1 to i32*, !insn.addr !323
  %3 = load i32, i32* %2, align 4, !insn.addr !323
  %4 = icmp ult i32 %3, 15
  br i1 %4, label %dec_label_pc_d2a, label %dec_label_pc_126c, !insn.addr !324

dec_label_pc_d2a:                                 ; preds = %dec_label_pc_d14
  %5 = zext i32 %3 to i64, !insn.addr !325
  ret i64 %5, !insn.addr !326

dec_label_pc_126c:                                ; preds = %dec_label_pc_d14
  %6 = add i64 %arg1, 22680, !insn.addr !327
  %7 = inttoptr i64 %6 to i64*, !insn.addr !327
  %8 = load i64, i64* %7, align 8, !insn.addr !327
  %9 = add i64 %arg1, 22720, !insn.addr !328
  %10 = inttoptr i64 %9 to i64*, !insn.addr !328
  store i64 %8, i64* %10, align 8, !insn.addr !328
  %11 = add i64 %arg1, 22728, !insn.addr !329
  %12 = inttoptr i64 %11 to i64*, !insn.addr !329
  store i64 %8, i64* %12, align 8, !insn.addr !329
  ret i64 %8, !insn.addr !329
}

define i64 @SmiUnmapHWResources(i64 %FdoData) local_unnamed_addr {
dec_label_pc_1284:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = call i64 @__decompiler_undefined_function_0()
  %2 = call i1 @__decompiler_undefined_function_2()
  %3 = call i8* @__decompiler_undefined_function_5()
  %4 = trunc i64 %1 to i16
  %5 = zext i1 %2 to i16, !insn.addr !330
  %6 = udiv i16 %4, 2, !insn.addr !330
  %7 = urem i16 %6, 128, !insn.addr !330
  %8 = urem i16 %4, 256, !insn.addr !330
  %9 = shl i16 %8, ptrtoint (i8* @global_var_8 to i16), !insn.addr !330
  %10 = mul i16 %5, 128, !insn.addr !330
  %11 = or i16 %10, %7, !insn.addr !330
  %12 = or i16 %11, %9, !insn.addr !330
  %13 = trunc i16 %12 to i8, !insn.addr !330
  %14 = inttoptr i64 %1 to i8*, !insn.addr !330
  store i8 %13, i8* %14, align 1, !insn.addr !330
  %15 = add i64 %1, -119, !insn.addr !331
  %16 = inttoptr i64 %15 to i8*, !insn.addr !331
  %17 = load i8, i8* %16, align 1, !insn.addr !331
  %18 = trunc i64 %0 to i8, !insn.addr !331
  %19 = add i8 %17, %18, !insn.addr !331
  store i8 %19, i8* %16, align 1, !insn.addr !331
  %20 = ptrtoint i8* %3 to i64, !insn.addr !332
  %21 = load i8, i8* %3, align 1, !insn.addr !333
  %22 = trunc i64 %20 to i8, !insn.addr !333
  %23 = add i8 %21, %22, !insn.addr !333
  %24 = add i64 %FdoData, 22672, !insn.addr !334
  %25 = inttoptr i64 %24 to i64*, !insn.addr !334
  %26 = load i64, i64* %25, align 8, !insn.addr !334
  %27 = add i64 %FdoData, 22688, !insn.addr !335
  %28 = inttoptr i64 %27 to i64*, !insn.addr !335
  store i64 %26, i64* %28, align 8, !insn.addr !335
  %29 = add i64 %FdoData, 22696, !insn.addr !336
  %30 = inttoptr i64 %29 to i64*, !insn.addr !336
  store i64 %26, i64* %30, align 8, !insn.addr !336
  %31 = add i64 %FdoData, 22704, !insn.addr !337
  %32 = inttoptr i64 %31 to i64*, !insn.addr !337
  store i64 %26, i64* %32, align 8, !insn.addr !337
  %33 = add i64 %FdoData, 22712, !insn.addr !338
  %34 = inttoptr i64 %33 to i64*, !insn.addr !338
  store i64 %26, i64* %34, align 8, !insn.addr !338
  ret i64 %26, !insn.addr !339
}

define i64 @SmiUnmapHWResources.161(i64 %arg1) local_unnamed_addr {
dec_label_pc_12b4:
  %rax.0.reg2mem = alloca i64, !insn.addr !340
  %0 = call i64 @mcount(), !insn.addr !341
  %1 = add i64 %arg1, 22552, !insn.addr !342
  %2 = inttoptr i64 %1 to i64*, !insn.addr !342
  %3 = load i64, i64* %2, align 8, !insn.addr !342
  %4 = add i64 %arg1, 22536, !insn.addr !343
  %5 = inttoptr i64 %4 to i64*, !insn.addr !343
  %6 = load i64, i64* %5, align 8, !insn.addr !343
  %7 = call i64 @free_irq(i64 %6, i64 %3), !insn.addr !344
  %8 = add i64 %arg1, 22672, !insn.addr !345
  %9 = inttoptr i64 %8 to i64*, !insn.addr !345
  %10 = load i64, i64* %9, align 8, !insn.addr !345
  %11 = icmp eq i64 %10, 0, !insn.addr !346
  br i1 %11, label %12, label %dec_label_pc_12f7, !insn.addr !347

; <label>:12:                                     ; preds = %dec_label_pc_12b4
  %13 = inttoptr i64 %3 to i8*, !insn.addr !347
  %14 = call i64 @SmiMapHWResources(i64 %6, i8* %13), !insn.addr !347
  br label %dec_label_pc_12f7, !insn.addr !347

dec_label_pc_12f7:                                ; preds = %12, %dec_label_pc_12b4
  %15 = add i64 %arg1, 22512, !insn.addr !348
  %16 = inttoptr i64 %15 to i64*, !insn.addr !348
  %17 = load i64, i64* %16, align 8, !insn.addr !348
  %18 = and i64 %17, 512
  %19 = icmp eq i64 %18, 0, !insn.addr !349
  %20 = icmp eq i1 %19, false, !insn.addr !350
  store i64 %17, i64* %rax.0.reg2mem, !insn.addr !350
  br i1 %20, label %dec_label_pc_1353, label %dec_label_pc_1342, !insn.addr !350

dec_label_pc_1342:                                ; preds = %dec_label_pc_12f7
  %21 = call i64 @warn_slowpath_null(i64 0, i64 154), !insn.addr !351
  store i64 %21, i64* %rax.0.reg2mem, !insn.addr !351
  br label %dec_label_pc_1353, !insn.addr !351

dec_label_pc_1353:                                ; preds = %dec_label_pc_1342, %dec_label_pc_12f7
  %rax.0.reload = load i64, i64* %rax.0.reg2mem
  ret i64 %rax.0.reload, !insn.addr !351
}

define i64 @SmiFreeDeviceResources(i64 %pFdoData) local_unnamed_addr {
dec_label_pc_1355:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = call i64 @__decompiler_undefined_function_0()
  %2 = add i64 %0, -123, !insn.addr !352
  %3 = inttoptr i64 %2 to i8*, !insn.addr !352
  %4 = load i8, i8* %3, align 1, !insn.addr !352
  %5 = trunc i64 %1 to i8, !insn.addr !352
  %6 = or i8 %4, %5, !insn.addr !352
  store i8 %6, i8* %3, align 1, !insn.addr !352
  %7 = call i64 @__asm_int1(), !insn.addr !353
  ret i64 %7, !insn.addr !354
}

define i64 @SmiMapHWResources(i64 %FdoData, i8* %Irp) local_unnamed_addr {
dec_label_pc_136a:
  ret i64 ptrtoint (i32* @global_var_1 to i64), !insn.addr !355
}

define i64 @SmiFreeDeviceResources.341() local_unnamed_addr {
dec_label_pc_1385:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = call i64 @mcount(), !insn.addr !356
  %2 = call i64 @SmiUnmapHWResources.161(i64 %0), !insn.addr !357
  ret i64 ptrtoint (i32* @global_var_1 to i64), !insn.addr !358
}

define i64 @SmiMapHWResources.522(i64 %arg1) local_unnamed_addr {
dec_label_pc_139a:
  %rax.0.reg2mem = alloca i64, !insn.addr !359
  %0 = call i64 @mcount(), !insn.addr !360
  %1 = call i64 @smi_disable_interrupt.505(i64 %arg1, i64 65535), !insn.addr !361
  %2 = add i64 %arg1, 22552, !insn.addr !362
  %3 = inttoptr i64 %2 to i64*, !insn.addr !362
  store i64 %arg1, i64* %3, align 8, !insn.addr !362
  %4 = add i64 %arg1, 22536, !insn.addr !363
  %5 = inttoptr i64 %4 to i64*, !insn.addr !363
  %6 = load i64, i64* %5, align 8, !insn.addr !363
  %7 = call i64 @request_threaded_irq(i64 %6, i64 0, i64 0, i64 128, i64 0, i64 %arg1), !insn.addr !364
  %8 = add i64 %arg1, 22512, !insn.addr !365
  %9 = inttoptr i64 %8 to i64*, !insn.addr !365
  %10 = load i64, i64* %9, align 8, !insn.addr !365
  switch i64 %10, label %dec_label_pc_140a [
    i64 0, label %dec_label_pc_141e
    i64 -144, label %dec_label_pc_141e
  ]

dec_label_pc_140a:                                ; preds = %dec_label_pc_139a
  %11 = add i64 %10, 592, !insn.addr !366
  %12 = inttoptr i64 %11 to i64*, !insn.addr !366
  %13 = load i64, i64* %12, align 8, !insn.addr !366
  %14 = icmp eq i64 %13, 0, !insn.addr !367
  %15 = load i64, i64* @global_var_3eaf8, align 8, !insn.addr !368
  %16 = select i1 %14, i64 %15, i64 %13, !insn.addr !368
  store i64 %16, i64* %rax.0.reg2mem, !insn.addr !369
  br label %dec_label_pc_142c, !insn.addr !369

dec_label_pc_141e:                                ; preds = %dec_label_pc_139a, %dec_label_pc_139a
  %17 = load i64, i64* @global_var_3eaf8, align 8, !insn.addr !370
  store i64 %17, i64* %rax.0.reg2mem, !insn.addr !371
  br label %dec_label_pc_142c, !insn.addr !371

dec_label_pc_142c:                                ; preds = %dec_label_pc_141e, %dec_label_pc_140a
  %rax.0.reload = load i64, i64* %rax.0.reg2mem
  %18 = inttoptr i64 %rax.0.reload to i64*, !insn.addr !372
  %19 = load i64, i64* %18, align 8, !insn.addr !372
  %20 = add i64 %arg1, 22672, !insn.addr !373
  %21 = inttoptr i64 %20 to i64*, !insn.addr !373
  store i64 %19, i64* %21, align 8, !insn.addr !373
  %22 = add i64 %arg1, 22777, !insn.addr !374
  %23 = inttoptr i64 %22 to i8*, !insn.addr !374
  store i8 ptrtoint (i32* @global_var_1 to i8), i8* %23, align 1, !insn.addr !374
  %24 = add i64 %arg1, 22779, !insn.addr !375
  %25 = inttoptr i64 %24 to i8*, !insn.addr !375
  store i8 ptrtoint (i32* @global_var_1 to i8), i8* %25, align 1, !insn.addr !375
  ret i64 %19, !insn.addr !376
}

define i64 @SmiInitializeDeviceExtension(i64 %FdoData) local_unnamed_addr {
dec_label_pc_14bb:
  %0 = call i64 @__decompiler_undefined_function_0()
  %rax = alloca i64, align 8
  %1 = call i64 @__decompiler_undefined_function_0()
  %2 = bitcast i64* %rax to i8*
  %3 = trunc i64 %1 to i8
  %4 = mul i8 %3, 2, !insn.addr !377
  %5 = inttoptr i64 %1 to i8*, !insn.addr !377
  store i8 %4, i8* %5, align 1, !insn.addr !377
  %6 = load i64, i64* %rax, align 8
  %7 = add i64 %6, 5828027, !insn.addr !378
  %8 = inttoptr i64 %7 to i8*, !insn.addr !378
  %9 = load i8, i8* %8, align 1, !insn.addr !378
  %10 = trunc i64 %6 to i8, !insn.addr !378
  %11 = add i8 %9, %10, !insn.addr !378
  store i8 %11, i8* %8, align 1, !insn.addr !378
  %12 = load i8, i8* %2, align 8, !insn.addr !379
  %13 = load i64, i64* %rax, align 8
  %14 = trunc i64 %13 to i8, !insn.addr !379
  %15 = add i8 %12, %14, !insn.addr !379
  %16 = icmp eq i8 %15, 0, !insn.addr !379
  %17 = inttoptr i64 %13 to i8*, !insn.addr !379
  store i8 %15, i8* %17, align 1, !insn.addr !379
  br i1 %16, label %dec_label_pc_14d2, label %dec_label_pc_14c7, !insn.addr !380

dec_label_pc_14c7:                                ; preds = %dec_label_pc_14bb
  %18 = add i64 %0, 22864, !insn.addr !381
  %19 = inttoptr i64 %18 to i64*, !insn.addr !381
  store i64 0, i64* %19, align 8, !insn.addr !381
  br label %dec_label_pc_14d2, !insn.addr !381

dec_label_pc_14d2:                                ; preds = %dec_label_pc_14c7, %dec_label_pc_14bb
  ret i64 ptrtoint (i32* @global_var_1 to i64), !insn.addr !382
}

define i64 @SmiDrvStartDevice(i64 %FdoData, i8* %Irp) local_unnamed_addr {
dec_label_pc_14e0:
  %rax = alloca i64, align 8
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = call i1 @__decompiler_undefined_function_2()
  %2 = add i64 %0, 88
  %3 = inttoptr i64 %2 to i32*
  %4 = load i32, i32* %3, align 4, !insn.addr !383
  %5 = zext i1 %1 to i32, !insn.addr !383
  %6 = add i32 %4, %5, !insn.addr !383
  store i32 %6, i32* %3, align 4, !insn.addr !383
  %7 = bitcast i64* %rax to i8*
  %8 = load i8, i8* %7, align 8, !insn.addr !384
  %9 = load i64, i64* %rax, align 8
  %10 = trunc i64 %9 to i8, !insn.addr !384
  %11 = add i8 %8, %10, !insn.addr !384
  %12 = inttoptr i64 %9 to i8*, !insn.addr !384
  store i8 %11, i8* %12, align 1, !insn.addr !384
  %13 = load i64, i64* %rax, align 8, !insn.addr !385
  ret i64 %13, !insn.addr !385
}

define i64 @SmiInitializeDeviceExtension.255() local_unnamed_addr {
dec_label_pc_14eb:
  %0 = call i64 @mcount(), !insn.addr !386
  %1 = call i64 @NT_SUCCESS.556(i64 0), !insn.addr !387
  ret i64 0, !insn.addr !388
}

define i64 @SmiDrvStartDevice.246(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_1510:
  %0 = call i64 @mcount(), !insn.addr !389
  %1 = call i64 @SmiGetDeviceInformation.547(), !insn.addr !390
  %2 = urem i64 %1, 256, !insn.addr !391
  %3 = call i64 @NT_SUCCESS.556(i64 %2), !insn.addr !392
  %4 = add i64 %arg1, 22760, !insn.addr !393
  %5 = inttoptr i64 %4 to i32*, !insn.addr !393
  store i32 ptrtoint (i16** @global_var_e to i32), i32* %5, align 4, !insn.addr !393
  ret i64 %3, !insn.addr !393
}

define i8 @NT_SUCCESS(i8 %success_value) local_unnamed_addr {
dec_label_pc_1550:
  %stack_var_0 = alloca i64, align 8
  %0 = call i64 @SmiCalculateTotalMemSize.533(i64* nonnull %stack_var_0), !insn.addr !394
  %1 = trunc i64 %0 to i8, !insn.addr !395
  ret i8 %1, !insn.addr !395
}

define i8 @storageBufferPrioritySet(i64 %storageBuffer, i8 %priority) local_unnamed_addr {
dec_label_pc_155d:
  %0 = call i64 @SmiMapHWResources.522(i64 %storageBuffer), !insn.addr !396
  %1 = urem i64 %0, 256, !insn.addr !397
  %2 = call i64 @NT_SUCCESS.556(i64 %1), !insn.addr !398
  %3 = trunc i64 %0 to i8, !insn.addr !399
  ret i8 %3, !insn.addr !399
}

define i8 @storageBufferClean(i64 %storageBuffer) local_unnamed_addr {
dec_label_pc_1571:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = trunc i64 %0 to i8, !insn.addr !400
  ret i8 %1, !insn.addr !400
}

define i64 @NT_SUCCESS.556(i64 %arg1) local_unnamed_addr {
dec_label_pc_1580:
  %0 = call i64 @mcount(), !insn.addr !401
  %1 = and i64 %arg1, 4294967295, !insn.addr !402
  ret i64 %1, !insn.addr !403
}

define i64 @storageBufferPrioritySet.462(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_158d:
  %0 = call i64 @mcount(), !insn.addr !404
  %1 = trunc i64 %arg2 to i8, !insn.addr !405
  %2 = add i64 %arg1, 40, !insn.addr !405
  %3 = inttoptr i64 %2 to i8*, !insn.addr !405
  store i8 %1, i8* %3, align 1, !insn.addr !405
  ret i64 ptrtoint (i32* @global_var_1 to i64), !insn.addr !406
}

define i64 @storageBufferClean.524() local_unnamed_addr {
dec_label_pc_15a1:
  %0 = call i64 @__decompiler_undefined_function_0()
  ret i64 %0, !insn.addr !407
}

define i8 @storageBufferFlush(i64 %storageBuffer) local_unnamed_addr {
dec_label_pc_15ad:
  %0 = call i64 @kfree(i64 %storageBuffer), !insn.addr !408
  %1 = inttoptr i64 %storageBuffer to i64*, !insn.addr !409
  store i64 0, i64* %1, align 8, !insn.addr !409
  %2 = add i64 %storageBuffer, ptrtoint (i8* @global_var_8 to i64), !insn.addr !410
  %3 = inttoptr i64 %2 to i64*, !insn.addr !410
  store i64 0, i64* %3, align 8, !insn.addr !410
  %4 = add i64 %storageBuffer, ptrtoint (i8* @global_var_10 to i64), !insn.addr !411
  %5 = inttoptr i64 %4 to i64*, !insn.addr !411
  store i64 0, i64* %5, align 8, !insn.addr !411
  ret i8 ptrtoint (i32* @global_var_1 to i8), !insn.addr !412
}

define i64 @storageBufferFlush.347(i64 %arg1) local_unnamed_addr {
dec_label_pc_15dd:
  %0 = call i64 @mcount(), !insn.addr !413
  ret i64 %0, !insn.addr !414
}

define i8 @storageBuffInitialize(i64 %storageBuffer, i64 %initializeSize, i64 %storageBuffTag) local_unnamed_addr {
dec_label_pc_15ee:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = add i64 %storageBuffer, ptrtoint (i32** @global_var_20 to i64), !insn.addr !415
  %2 = inttoptr i64 %1 to i64*, !insn.addr !415
  %3 = load i64, i64* %2, align 8, !insn.addr !415
  %4 = call i64 @memset(i64 %storageBuffer, i64 0, i64 %3), !insn.addr !416
  %5 = add i64 %0, ptrtoint (i32** @global_var_18 to i64), !insn.addr !417
  %6 = inttoptr i64 %5 to i64*, !insn.addr !417
  store i64 0, i64* %6, align 8, !insn.addr !417
  %7 = add i64 %0, ptrtoint (i8* @global_var_8 to i64), !insn.addr !418
  %8 = inttoptr i64 %7 to i64*, !insn.addr !418
  %9 = add i64 %0, ptrtoint (i8* @global_var_10 to i64), !insn.addr !419
  %10 = inttoptr i64 %9 to i64*, !insn.addr !419
  ret i8 ptrtoint (i32* @global_var_1 to i8), !insn.addr !420
}

define i64 @storageBuffInitialize.205(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_161e:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = call i64 @mcount(), !insn.addr !421
  %2 = inttoptr i64 %arg1 to i64*, !insn.addr !422
  store i64 0, i64* %2, align 8, !insn.addr !422
  %3 = add i64 %arg1, ptrtoint (i32** @global_var_18 to i64), !insn.addr !423
  %4 = inttoptr i64 %3 to i64*, !insn.addr !423
  store i64 0, i64* %4, align 8, !insn.addr !423
  %5 = add i64 %arg1, ptrtoint (i32** @global_var_20 to i64), !insn.addr !424
  %6 = inttoptr i64 %5 to i64*, !insn.addr !424
  store i64 %arg2, i64* %6, align 8, !insn.addr !424
  %7 = add i64 %arg1, 40, !insn.addr !425
  %8 = inttoptr i64 %7 to i8*, !insn.addr !425
  store i8 0, i8* %8, align 1, !insn.addr !425
  %9 = call i64 @__kmalloc(i64 %arg2, i64* inttoptr (i64 208 to i64*), i64 %0), !insn.addr !426
  ret i64 %9, !insn.addr !427
}

define i64 @FUSBDTV_ProcessSysControlIrp(i8* %DeviceObject, i8* %Irp) local_unnamed_addr {
dec_label_pc_1658:
  %0 = call i64 @__decompiler_undefined_function_0()
  ret i64 %0, !insn.addr !428
}

define i64 @FUSBDTV_SetPowerUSBDevice(i8* %Irp, i8* %FunctionalDeviceObject, i64 %deviceExtension) local_unnamed_addr {
dec_label_pc_1668:
  %0 = call i64 @__decompiler_undefined_function_0()
  %rax = alloca i64, align 8
  %1 = call i64 @__decompiler_undefined_function_0()
  %2 = ptrtoint i8* %FunctionalDeviceObject to i64
  %3 = ptrtoint i8* %Irp to i64
  %4 = bitcast i64* %rax to i8*
  %5 = trunc i64 %1 to i8
  %6 = mul i8 %5, 2, !insn.addr !429
  %7 = inttoptr i64 %1 to i8*, !insn.addr !429
  store i8 %6, i8* %7, align 1, !insn.addr !429
  %8 = load i8, i8* %4, align 8, !insn.addr !430
  %9 = load i64, i64* %rax, align 8
  %10 = trunc i64 %9 to i8, !insn.addr !430
  %11 = add i8 %8, %10, !insn.addr !430
  %12 = inttoptr i64 %9 to i8*, !insn.addr !430
  store i8 %11, i8* %12, align 1, !insn.addr !430
  %13 = call i64 @memset(i64 %3, i64 %2, i64 %deviceExtension), !insn.addr !431
  %14 = add i64 %0, ptrtoint (i8* @global_var_8 to i64), !insn.addr !432
  %15 = inttoptr i64 %14 to i64*, !insn.addr !432
  ret i64 %0, !insn.addr !432
}

define i64 @FUSBDTV_Query_Capabilities(i64 %Device, i8* %Irp, i8* %Capabilities) local_unnamed_addr {
dec_label_pc_1678:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = add i64 %0, ptrtoint (i8* @global_var_10 to i64), !insn.addr !433
  %2 = inttoptr i64 %1 to i64*, !insn.addr !433
  ret i64 ptrtoint (i32* @global_var_1 to i64), !insn.addr !434
}

define void @AsicenFreeStreamBuffer(i64 %StreamObject) local_unnamed_addr {
dec_label_pc_1688:
  %0 = call i64 @mcount(), !insn.addr !435
  ret void, !insn.addr !436
}

define i64 @FUSBDTV_SetPowerUSBDevice.260() local_unnamed_addr {
dec_label_pc_1698:
  %0 = call i64 @mcount(), !insn.addr !437
  ret i64 ptrtoint (i32* @global_var_1 to i64), !insn.addr !438
}

define i64 @FUSBDTV_Query_Capabilities.275() local_unnamed_addr {
dec_label_pc_16a8:
  %0 = call i64 @mcount(), !insn.addr !439
  ret i64 ptrtoint (i32* @global_var_1 to i64), !insn.addr !440
}

define i64 @AsicenFreeStreamBuffer.470(i64 %arg1) local_unnamed_addr {
dec_label_pc_16b8:
  %0 = call i64 @mcount(), !insn.addr !441
  ret i64 %0, !insn.addr !442
}

define i64 @AsicenAllocateStreamBuffer(i64 %deviceExtension, i8 %DataStream_Num, i64 %TransferObjBufSize, i64 %StreamBufSize) local_unnamed_addr {
dec_label_pc_16ca:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = sext i8 %DataStream_Num to i64
  %2 = add i64 %deviceExtension, 224, !insn.addr !443
  %3 = inttoptr i64 %2 to i32*, !insn.addr !443
  %4 = load i32, i32* %3, align 4, !insn.addr !443
  %5 = icmp eq i32 %4, 0, !insn.addr !444
  br i1 %5, label %dec_label_pc_16da, label %dec_label_pc_16d5, !insn.addr !445

dec_label_pc_16d5:                                ; preds = %dec_label_pc_16ca
  %6 = call i64 @FUSB_ExFreePool.600(i32 %4, i64 %1), !insn.addr !446
  br label %dec_label_pc_16da, !insn.addr !446

dec_label_pc_16da:                                ; preds = %dec_label_pc_16d5, %dec_label_pc_16ca
  %7 = add i64 %0, 304, !insn.addr !447
  %8 = inttoptr i64 %7 to i64*, !insn.addr !447
  %9 = load i64, i64* %8, align 8, !insn.addr !447
  %10 = icmp eq i64 %9, 0, !insn.addr !448
  br i1 %10, label %dec_label_pc_16eb, label %dec_label_pc_16e6, !insn.addr !449

dec_label_pc_16e6:                                ; preds = %dec_label_pc_16da
  %11 = trunc i64 %9 to i32, !insn.addr !450
  %12 = call i64 @FUSB_ExFreePool.600(i32 %11, i64 %1), !insn.addr !450
  br label %dec_label_pc_16eb, !insn.addr !450

dec_label_pc_16eb:                                ; preds = %dec_label_pc_16e6, %dec_label_pc_16da
  %13 = trunc i64 %0 to i32, !insn.addr !451
  %14 = call i64 @FUSB_ExFreePool.600(i32 %13, i64 %1), !insn.addr !451
  ret i64 %14, !insn.addr !452
}

define i64 @AsicenAllocateStreamBuffer.366(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4) local_unnamed_addr {
dec_label_pc_16fa:
  %.pre-phi10.reg2mem = alloca i8*, !insn.addr !453
  %0 = call i64 @mcount(), !insn.addr !454
  %1 = call i64 @FUSB_ExAllocatePool.203(i64 0, i64 440), !insn.addr !455
  %2 = inttoptr i64 %1 to i8*, !insn.addr !456
  call void @__asm_rep_stosq_memset(i8* %2, i64 0, i64 55), !insn.addr !456
  %3 = trunc i64 %arg2 to i8, !insn.addr !457
  %4 = icmp ugt i8 %3, ptrtoint (i8** @global_var_7 to i8)
  br i1 %4, label %dec_label_pc_178f, label %dec_label_pc_1818, !insn.addr !458

dec_label_pc_178f:                                ; preds = %dec_label_pc_16fa
  %5 = add i64 %1, 232, !insn.addr !459
  %6 = inttoptr i64 %5 to i64*, !insn.addr !459
  store i64 5865600, i64* %6, align 8, !insn.addr !459
  %7 = call i64 @FUSB_ExAllocatePool.203(i64 0, i64 5865600), !insn.addr !460
  %8 = add i64 %1, 224, !insn.addr !461
  %9 = inttoptr i64 %8 to i64*, !insn.addr !461
  store i64 %7, i64* %9, align 8, !insn.addr !461
  %10 = add i64 %1, 296, !insn.addr !462
  %11 = inttoptr i64 %10 to i64*, !insn.addr !462
  store i64 0, i64* %11, align 8, !insn.addr !462
  %12 = add i64 %1, 288, !insn.addr !463
  %13 = inttoptr i64 %12 to i64*, !insn.addr !463
  store i64 0, i64* %13, align 8, !insn.addr !463
  %14 = add i64 %1, 280, !insn.addr !464
  %15 = inttoptr i64 %14 to i64*, !insn.addr !464
  store i64 0, i64* %15, align 8, !insn.addr !464
  %16 = add i64 %1, 312, !insn.addr !465
  %17 = inttoptr i64 %16 to i64*, !insn.addr !465
  store i64 ptrtoint (i64* @global_var_39480 to i64), i64* %17, align 8, !insn.addr !465
  %18 = call i64 @FUSB_ExAllocatePool.203(i64 0, i64 ptrtoint (i64* @global_var_39480 to i64)), !insn.addr !466
  %19 = add i64 %1, 304, !insn.addr !467
  %20 = inttoptr i64 %19 to i64*, !insn.addr !467
  store i64 %18, i64* %20, align 8, !insn.addr !467
  %21 = add i64 %1, 336, !insn.addr !468
  %22 = inttoptr i64 %21 to i64*, !insn.addr !468
  store i64 0, i64* %22, align 8, !insn.addr !468
  %23 = add i64 %1, 328, !insn.addr !469
  %24 = inttoptr i64 %23 to i64*, !insn.addr !469
  store i64 0, i64* %24, align 8, !insn.addr !469
  %25 = add i64 %1, 320, !insn.addr !470
  %26 = inttoptr i64 %25 to i64*, !insn.addr !470
  store i64 0, i64* %26, align 8, !insn.addr !470
  %.pre = add i64 %1, 128, !insn.addr !471
  %.pre9 = inttoptr i64 %.pre to i8*, !insn.addr !471
  store i8* %.pre9, i8** %.pre-phi10.reg2mem, !insn.addr !472
  br label %dec_label_pc_18ab, !insn.addr !472

dec_label_pc_1818:                                ; preds = %dec_label_pc_16fa
  %27 = lshr i64 %arg4, ptrtoint (i32* @global_var_1 to i64), !insn.addr !473
  %28 = add i64 %arg3, -1
  %29 = icmp ult i64 %28, %27
  %30 = icmp ne i64 %arg4, 0, !insn.addr !474
  %or.cond3.not = icmp eq i1 %30, %29
  %31 = icmp ult i64 %arg3, 513
  %or.cond5 = icmp eq i1 %31, %or.cond3.not
  %32 = icmp ult i64 %arg4, 37601
  %or.cond7 = icmp eq i1 %32, %or.cond5
  %arg4.op = mul i64 %arg4, 512
  %33 = select i1 %or.cond7, i64 %arg4.op, i64 19251200, !insn.addr !475
  %34 = add i64 %1, 232, !insn.addr !476
  %35 = inttoptr i64 %34 to i64*, !insn.addr !476
  store i64 %33, i64* %35, align 8, !insn.addr !476
  %36 = call i64 @FUSB_ExAllocatePool.203(i64 0, i64 %33), !insn.addr !477
  %37 = add i64 %1, 224, !insn.addr !478
  %38 = inttoptr i64 %37 to i64*, !insn.addr !478
  store i64 %36, i64* %38, align 8, !insn.addr !478
  %39 = add i64 %1, 296, !insn.addr !479
  %40 = inttoptr i64 %39 to i64*, !insn.addr !479
  store i64 0, i64* %40, align 8, !insn.addr !479
  %41 = add i64 %1, 288, !insn.addr !480
  %42 = inttoptr i64 %41 to i64*, !insn.addr !480
  store i64 0, i64* %42, align 8, !insn.addr !480
  %43 = add i64 %1, 280, !insn.addr !481
  %44 = inttoptr i64 %43 to i64*, !insn.addr !481
  store i64 0, i64* %44, align 8, !insn.addr !481
  %arg3.op = mul i64 %arg3, 2048
  %45 = select i1 %or.cond7, i64 %arg3.op, i64 1048576, !insn.addr !482
  %46 = add i64 %1, 312, !insn.addr !483
  %47 = inttoptr i64 %46 to i64*, !insn.addr !483
  store i64 %45, i64* %47, align 8, !insn.addr !483
  %48 = call i64 @FUSB_ExAllocatePool.203(i64 0, i64 %45), !insn.addr !484
  %49 = add i64 %1, 304, !insn.addr !485
  %50 = inttoptr i64 %49 to i64*, !insn.addr !485
  store i64 %48, i64* %50, align 8, !insn.addr !485
  %51 = add i64 %1, 336, !insn.addr !486
  %52 = inttoptr i64 %51 to i64*, !insn.addr !486
  store i64 0, i64* %52, align 8, !insn.addr !486
  %53 = add i64 %1, 328, !insn.addr !487
  %54 = inttoptr i64 %53 to i64*, !insn.addr !487
  store i64 0, i64* %54, align 8, !insn.addr !487
  %55 = add i64 %1, 320, !insn.addr !488
  %56 = inttoptr i64 %55 to i64*, !insn.addr !488
  store i64 0, i64* %56, align 8, !insn.addr !488
  %57 = mul i64 %arg2, 8, !insn.addr !489
  %58 = and i64 %57, 2040, !insn.addr !490
  %59 = add i64 %arg1, 1160, !insn.addr !490
  %60 = add i64 %59, %58, !insn.addr !490
  %61 = inttoptr i64 %60 to i64*, !insn.addr !490
  store i64 %1, i64* %61, align 8, !insn.addr !490
  %62 = add i64 %1, 128
  %63 = inttoptr i64 %62 to i8*
  store i8 %3, i8* %63, align 1, !insn.addr !491
  store i8* %63, i8** %.pre-phi10.reg2mem, !insn.addr !491
  br label %dec_label_pc_18ab, !insn.addr !491

dec_label_pc_18ab:                                ; preds = %dec_label_pc_1818, %dec_label_pc_178f
  %.pre-phi10.reload = load i8*, i8** %.pre-phi10.reg2mem
  %64 = add i64 %arg1, 1224, !insn.addr !492
  %65 = inttoptr i64 %64 to i64*, !insn.addr !492
  store i64 %1, i64* %65, align 8, !insn.addr !492
  store i8 ptrtoint (i8* @global_var_8 to i8), i8* %.pre-phi10.reload, align 1, !insn.addr !471
  ret i64 ptrtoint (i32* @global_var_1 to i64), !insn.addr !493
}

define i64 @FUSBDTV_GetCusGUIDInfo(i64 %deviceExtension) local_unnamed_addr {
dec_label_pc_18c5:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = call i64 @__decompiler_undefined_function_0()
  %2 = call i64 @__decompiler_undefined_function_0()
  %3 = call i64 @__decompiler_undefined_function_0()
  %4 = call i1 @__decompiler_undefined_function_2()
  %5 = add i64 %3, ptrtoint (i32* @global_var_1 to i64), !insn.addr !494
  %6 = inttoptr i64 %5 to i32*, !insn.addr !494
  %7 = load i32, i32* %6, align 4, !insn.addr !494
  %8 = trunc i64 %deviceExtension to i32, !insn.addr !494
  %.neg1 = sext i1 %4 to i32
  %.neg2 = sub i32 %.neg1, %8, !insn.addr !494
  %9 = add i32 %.neg2, %7, !insn.addr !494
  store i32 %9, i32* %6, align 4, !insn.addr !494
  %10 = trunc i64 %1 to i8, !insn.addr !495
  %11 = icmp eq i8 %10, ptrtoint (i8** @global_var_9 to i8), !insn.addr !495
  %12 = icmp eq i1 %11, false, !insn.addr !496
  br i1 %12, label %dec_label_pc_18df, label %dec_label_pc_18d1, !insn.addr !496

dec_label_pc_18d1:                                ; preds = %dec_label_pc_18c5
  %13 = add i64 %0, 1232, !insn.addr !497
  %14 = inttoptr i64 %13 to i64*, !insn.addr !497
  %15 = add i64 %2, 128, !insn.addr !498
  %16 = inttoptr i64 %15 to i8*, !insn.addr !498
  store i8 ptrtoint (i8** @global_var_9 to i8), i8* %16, align 1, !insn.addr !498
  br label %dec_label_pc_18df, !insn.addr !498

dec_label_pc_18df:                                ; preds = %dec_label_pc_18d1, %dec_label_pc_18c5
  ret i64 %3, !insn.addr !499
}

define i64 @FUSBDTV_GetCusGUIDInfo.615(i64 %arg1) local_unnamed_addr {
dec_label_pc_18f5:
  %0 = call i64 @mcount(), !insn.addr !500
  ret i64 %0, !insn.addr !501
}

define i64 @FUSBDTV_Start(i64 %deviceExtension) local_unnamed_addr {
dec_label_pc_1908:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = call i64 @__decompiler_undefined_function_0()
  %2 = call i64 @__decompiler_undefined_function_0()
  %3 = and i64 %2, -65281, !insn.addr !502
  %4 = or i64 %3, 28672, !insn.addr !502
  %5 = trunc i64 %0 to i8
  %6 = mul i8 %5, 2, !insn.addr !503
  %7 = inttoptr i64 %0 to i8*, !insn.addr !503
  store i8 %6, i8* %7, align 1, !insn.addr !503
  %8 = call i64 @FUSBDTV_Cmd_GetCusInfo.500(i64 %deviceExtension, i64 %1), !insn.addr !504
  %9 = icmp eq i64 %8, ptrtoint (i32* @global_var_1 to i64), !insn.addr !505
  %10 = icmp eq i1 %9, false, !insn.addr !506
  br i1 %10, label %dec_label_pc_1921, label %dec_label_pc_1918, !insn.addr !506

dec_label_pc_1918:                                ; preds = %dec_label_pc_1908
  %11 = add nsw i64 %4, 20336, !insn.addr !507
  %12 = inttoptr i64 %11 to i8*, !insn.addr !507
  %13 = load i8, i8* %12, align 1, !insn.addr !507
  %14 = icmp eq i8 %13, 1, !insn.addr !507
  br i1 %14, label %dec_label_pc_192a, label %dec_label_pc_1921, !insn.addr !508

dec_label_pc_1921:                                ; preds = %dec_label_pc_1918, %dec_label_pc_1908
  %15 = add nsw i64 %4, 20394, !insn.addr !509
  %16 = inttoptr i64 %15 to i8*, !insn.addr !509
  store i8 0, i8* %16, align 1, !insn.addr !509
  br label %dec_label_pc_1931, !insn.addr !510

dec_label_pc_192a:                                ; preds = %dec_label_pc_1918
  %17 = add nsw i64 %4, 20394, !insn.addr !511
  %18 = inttoptr i64 %17 to i8*, !insn.addr !511
  store i8 ptrtoint (i32* @global_var_1 to i8), i8* %18, align 1, !insn.addr !511
  br label %dec_label_pc_1931, !insn.addr !511

dec_label_pc_1931:                                ; preds = %dec_label_pc_192a, %dec_label_pc_1921
  ret i64 %8, !insn.addr !512
}

define i64 @FUSBDTV_Start.426(i64 %arg1) local_unnamed_addr {
dec_label_pc_1938:
  %r13.0.reg2mem = alloca i64, !insn.addr !513
  %r12.0.reg2mem = alloca i64, !insn.addr !513
  %stack_var_-57 = alloca i64, align 8
  %0 = call i64 @mcount(), !insn.addr !514
  %1 = add i64 %arg1, 22548, !insn.addr !515
  %2 = add i64 %arg1, 22432, !insn.addr !516
  %3 = inttoptr i64 %2 to i64*, !insn.addr !516
  %4 = load i64, i64* %3, align 8, !insn.addr !516
  %5 = call i64 @GetPCIBusInterfaceStandard.210(i64 %4, i64 %1), !insn.addr !517
  %6 = urem i64 %5, 256, !insn.addr !518
  %7 = call i64 @NT_SUCCESS.556(i64 %6), !insn.addr !519
  %8 = call i64 @SmiDrvStartDevice.246(i64 %arg1, i64 0), !insn.addr !520
  %9 = add i64 %arg1, 200, !insn.addr !521
  %10 = inttoptr i64 %9 to i8*, !insn.addr !521
  store i8 0, i8* %10, align 1, !insn.addr !521
  %11 = add i64 %arg1, 22794, !insn.addr !522
  %12 = inttoptr i64 %11 to i8*, !insn.addr !522
  store i8 0, i8* %12, align 1, !insn.addr !522
  %13 = call i64 @Hardware_Init.607(i64 %arg1), !insn.addr !523
  %14 = call i64 @RegisterInitialize.616(i64 %arg1), !insn.addr !524
  %15 = call i64 @FUSBDTV_GetCusGUIDInfo.615(i64 %arg1), !insn.addr !525
  %16 = call i64 @FUSBDTV_Cmd_Set_GPIO.468(i64 %arg1, i64* bitcast (i8* @global_var_8 to i64*), i64 255), !insn.addr !526
  %17 = call i64 @FUSBDTV_Cmd_Set_GPIO_Ex.552(i64 %arg1, i64 0, i64* bitcast (i32* @global_var_2 to i64*)), !insn.addr !527
  %18 = call i64 @TLIB_SetGPIOEx.513(i64 %arg1, i64* bitcast (i32* @global_var_1 to i64*), i64* bitcast (i32* @global_var_1 to i64*)), !insn.addr !528
  %19 = add i64 %arg1, 22880, !insn.addr !529
  %20 = and i64 %13, -256, !insn.addr !530
  store i64 %20, i64* %r12.0.reg2mem, !insn.addr !530
  store i64 %19, i64* %r13.0.reg2mem, !insn.addr !530
  br label %dec_label_pc_1a15, !insn.addr !530

dec_label_pc_1a15:                                ; preds = %dec_label_pc_1a15, %dec_label_pc_1938
  %r13.0.reload = load i64, i64* %r13.0.reg2mem
  %r12.0.reload = load i64, i64* %r12.0.reg2mem
  %21 = and i64 %r12.0.reload, 4294967295, !insn.addr !531
  %22 = call i64 @TC_PowerTunerDemod.604(i64 %arg1, i64 %21, i64 0, i64 %r13.0.reload), !insn.addr !532
  %23 = add i64 %r12.0.reload, zext (i32 ptrtoint (i32* @global_var_1 to i32) to i64), !insn.addr !533
  %24 = and i64 %23, 4294967295, !insn.addr !533
  %25 = add i64 %r13.0.reload, 80, !insn.addr !534
  %26 = trunc i64 %23 to i32, !insn.addr !535
  %27 = icmp eq i32 %26, ptrtoint (i8* @global_var_8 to i32), !insn.addr !535
  %28 = icmp eq i1 %27, false, !insn.addr !536
  store i64 %24, i64* %r12.0.reg2mem, !insn.addr !536
  store i64 %25, i64* %r13.0.reg2mem, !insn.addr !536
  br i1 %28, label %dec_label_pc_1a15, label %dec_label_pc_1a36, !insn.addr !536

dec_label_pc_1a36:                                ; preds = %dec_label_pc_1a15
  %29 = add i64 %arg1, 15976, !insn.addr !537
  %30 = inttoptr i64 %29 to i8*, !insn.addr !537
  store i8 ptrtoint (i32* @global_var_1 to i8), i8* %30, align 1, !insn.addr !537
  %31 = add i64 %arg1, 25096, !insn.addr !538
  %32 = inttoptr i64 %31 to i64*, !insn.addr !538
  store i64 2368, i64* %32, align 8, !insn.addr !538
  %33 = add i64 %arg1, 25104, !insn.addr !539
  %34 = inttoptr i64 %33 to i64*, !insn.addr !539
  store i64 2372, i64* %34, align 8, !insn.addr !539
  %35 = add i64 %arg1, 25112, !insn.addr !540
  %36 = inttoptr i64 %35 to i64*, !insn.addr !540
  store i64 2376, i64* %36, align 8, !insn.addr !540
  %37 = add i64 %arg1, ptrtoint (i64* @global_var_6220 to i64), !insn.addr !541
  %38 = inttoptr i64 %37 to i64*, !insn.addr !541
  store i64 2380, i64* %38, align 8, !insn.addr !541
  %39 = add i64 %arg1, 25128, !insn.addr !542
  %40 = inttoptr i64 %39 to i64*, !insn.addr !542
  store i64 2384, i64* %40, align 8, !insn.addr !542
  %41 = add i64 %arg1, 25136, !insn.addr !543
  %42 = inttoptr i64 %41 to i64*, !insn.addr !543
  store i64 2388, i64* %42, align 8, !insn.addr !543
  %43 = add i64 %arg1, 25144, !insn.addr !544
  %44 = inttoptr i64 %43 to i64*, !insn.addr !544
  store i64 2400, i64* %44, align 8, !insn.addr !544
  %45 = add i64 %arg1, 25152, !insn.addr !545
  %46 = inttoptr i64 %45 to i64*, !insn.addr !545
  store i64 2432, i64* %46, align 8, !insn.addr !545
  %47 = add i64 %arg1, 25160, !insn.addr !546
  %48 = inttoptr i64 %47 to i64*, !insn.addr !546
  store i64 2436, i64* %48, align 8, !insn.addr !546
  %49 = add i64 %arg1, 25168, !insn.addr !547
  %50 = inttoptr i64 %49 to i64*, !insn.addr !547
  store i64 2440, i64* %50, align 8, !insn.addr !547
  %51 = add i64 %arg1, 25176, !insn.addr !548
  %52 = inttoptr i64 %51 to i64*, !insn.addr !548
  store i64 2444, i64* %52, align 8, !insn.addr !548
  %53 = add i64 %arg1, 25184, !insn.addr !549
  %54 = inttoptr i64 %53 to i64*, !insn.addr !549
  store i64 2448, i64* %54, align 8, !insn.addr !549
  %55 = add i64 %arg1, 25192, !insn.addr !550
  %56 = inttoptr i64 %55 to i64*, !insn.addr !550
  store i64 2452, i64* %56, align 8, !insn.addr !550
  %57 = add i64 %arg1, 25200, !insn.addr !551
  %58 = inttoptr i64 %57 to i64*, !insn.addr !551
  store i64 2464, i64* %58, align 8, !insn.addr !551
  %59 = add i64 %arg1, 25208, !insn.addr !552
  %60 = inttoptr i64 %59 to i64*, !insn.addr !552
  store i64 2752, i64* %60, align 8, !insn.addr !552
  %61 = add i64 %arg1, 25216, !insn.addr !553
  %62 = inttoptr i64 %61 to i64*, !insn.addr !553
  store i64 2756, i64* %62, align 8, !insn.addr !553
  %63 = add i64 %arg1, 25224, !insn.addr !554
  %64 = inttoptr i64 %63 to i64*, !insn.addr !554
  store i64 2760, i64* %64, align 8, !insn.addr !554
  %65 = add i64 %arg1, 25232, !insn.addr !555
  %66 = inttoptr i64 %65 to i64*, !insn.addr !555
  store i64 2764, i64* %66, align 8, !insn.addr !555
  %67 = add i64 %arg1, 25240, !insn.addr !556
  %68 = inttoptr i64 %67 to i64*, !insn.addr !556
  store i64 2768, i64* %68, align 8, !insn.addr !556
  %69 = add i64 %arg1, 25248, !insn.addr !557
  %70 = inttoptr i64 %69 to i64*, !insn.addr !557
  store i64 2772, i64* %70, align 8, !insn.addr !557
  %71 = add i64 %arg1, 25256, !insn.addr !558
  %72 = inttoptr i64 %71 to i64*, !insn.addr !558
  store i64 2776, i64* %72, align 8, !insn.addr !558
  %73 = add i64 %arg1, 25264, !insn.addr !559
  %74 = inttoptr i64 %73 to i64*, !insn.addr !559
  store i64 2780, i64* %74, align 8, !insn.addr !559
  %75 = add i64 %arg1, 25272, !insn.addr !560
  %76 = inttoptr i64 %75 to i64*, !insn.addr !560
  store i64 2784, i64* %76, align 8, !insn.addr !560
  %77 = add i64 %arg1, 25280, !insn.addr !561
  %78 = inttoptr i64 %77 to i64*, !insn.addr !561
  store i64 3072, i64* %78, align 8, !insn.addr !561
  %79 = add i64 %arg1, 25288, !insn.addr !562
  %80 = inttoptr i64 %79 to i64*, !insn.addr !562
  store i64 3076, i64* %80, align 8, !insn.addr !562
  %81 = add i64 %arg1, 25296, !insn.addr !563
  %82 = inttoptr i64 %81 to i64*, !insn.addr !563
  store i64 3080, i64* %82, align 8, !insn.addr !563
  %83 = add i64 %arg1, 25304, !insn.addr !564
  %84 = inttoptr i64 %83 to i64*, !insn.addr !564
  store i64 3084, i64* %84, align 8, !insn.addr !564
  %85 = add i64 %arg1, 25312, !insn.addr !565
  %86 = inttoptr i64 %85 to i64*, !insn.addr !565
  store i64 3088, i64* %86, align 8, !insn.addr !565
  %87 = add i64 %arg1, 25320, !insn.addr !566
  %88 = inttoptr i64 %87 to i64*, !insn.addr !566
  store i64 3092, i64* %88, align 8, !insn.addr !566
  %89 = add i64 %arg1, 25328, !insn.addr !567
  %90 = inttoptr i64 %89 to i64*, !insn.addr !567
  store i64 3096, i64* %90, align 8, !insn.addr !567
  %91 = add i64 %arg1, 25336, !insn.addr !568
  %92 = inttoptr i64 %91 to i64*, !insn.addr !568
  store i64 3100, i64* %92, align 8, !insn.addr !568
  %93 = add i64 %arg1, 25344, !insn.addr !569
  %94 = inttoptr i64 %93 to i64*, !insn.addr !569
  store i64 3104, i64* %94, align 8, !insn.addr !569
  %95 = call i64 @TLIB_I2C_Read.262(i64 %arg1, i64 160, i64 0, i64* nonnull %stack_var_-57, i64* bitcast (i32* @global_var_1 to i64*), i64 0), !insn.addr !570
  %96 = trunc i64 %95 to i8, !insn.addr !571
  %97 = icmp eq i8 %96, 0, !insn.addr !571
  %98 = icmp eq i1 %97, false, !insn.addr !572
  br i1 %98, label %dec_label_pc_1d27, label %dec_label_pc_1bc7, !insn.addr !572

dec_label_pc_1bc7:                                ; preds = %dec_label_pc_1a36
  store i64 2688, i64* %32, align 8, !insn.addr !573
  store i64 2692, i64* %34, align 8, !insn.addr !574
  store i64 2696, i64* %36, align 8, !insn.addr !575
  store i64 2700, i64* %38, align 8, !insn.addr !576
  store i64 2704, i64* %40, align 8, !insn.addr !577
  store i64 2708, i64* %42, align 8, !insn.addr !578
  store i64 2720, i64* %44, align 8, !insn.addr !579
  store i64 3008, i64* %46, align 8, !insn.addr !580
  store i64 3012, i64* %48, align 8, !insn.addr !581
  store i64 3016, i64* %50, align 8, !insn.addr !582
  store i64 3020, i64* %52, align 8, !insn.addr !583
  store i64 3024, i64* %54, align 8, !insn.addr !584
  store i64 3028, i64* %56, align 8, !insn.addr !585
  store i64 3040, i64* %58, align 8, !insn.addr !586
  store i64 3328, i64* %60, align 8, !insn.addr !587
  store i64 3332, i64* %62, align 8, !insn.addr !588
  store i64 3336, i64* %64, align 8, !insn.addr !589
  store i64 3340, i64* %66, align 8, !insn.addr !590
  store i64 3344, i64* %68, align 8, !insn.addr !591
  store i64 3348, i64* %70, align 8, !insn.addr !592
  store i64 3352, i64* %72, align 8, !insn.addr !593
  store i64 3356, i64* %74, align 8, !insn.addr !594
  store i64 ptrtoint (i64* @global_var_d20 to i64), i64* %76, align 8, !insn.addr !595
  store i64 3392, i64* %78, align 8, !insn.addr !596
  store i64 3396, i64* %80, align 8, !insn.addr !597
  store i64 3400, i64* %82, align 8, !insn.addr !598
  store i64 3404, i64* %84, align 8, !insn.addr !599
  store i64 ptrtoint (i64* @global_var_d50 to i64), i64* %86, align 8, !insn.addr !600
  store i64 3412, i64* %88, align 8, !insn.addr !601
  store i64 3416, i64* %90, align 8, !insn.addr !602
  store i64 3420, i64* %92, align 8, !insn.addr !603
  store i64 3424, i64* %94, align 8, !insn.addr !604
  br label %dec_label_pc_1d27, !insn.addr !604

dec_label_pc_1d27:                                ; preds = %dec_label_pc_1bc7, %dec_label_pc_1a36
  ret i64 %95, !insn.addr !604
}

define i64 @FUSBDTV_RemoveUSBDevice(i64 %deviceExtension) local_unnamed_addr {
dec_label_pc_1d2a:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = call i64 @__decompiler_undefined_function_0()
  %2 = call i64 @__decompiler_undefined_function_0()
  %3 = call i64 @__decompiler_undefined_function_0()
  %4 = trunc i64 %2 to i8
  %5 = trunc i64 %3 to i8, !insn.addr !605
  %6 = add i8 %5, %4, !insn.addr !605
  %7 = inttoptr i64 %2 to i8*, !insn.addr !605
  store i8 %6, i8* %7, align 1, !insn.addr !605
  %8 = call i64 @TC_Preset.300(i64 %1), !insn.addr !606
  ret i64 %0, !insn.addr !607
}

define i64 @FUSBDTV_RemoveUSBDevice.410(i64 %arg1) local_unnamed_addr {
dec_label_pc_1d5a:
  %0 = call i64 @mcount(), !insn.addr !608
  %1 = call i64 @FUSB_IncrementIoCount.588(i64 0), !insn.addr !609
  ret i64 %1, !insn.addr !609
}

define i64 @function_1d8a() local_unnamed_addr {
dec_label_pc_1d8a:
  %0 = call i64 @__decompiler_undefined_function_0()
  ret i64 %0, !insn.addr !610
}

define void @FUSBDTV_Remove(i64 %deviceExtension) local_unnamed_addr {
dec_label_pc_1d8c:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = call i64 @FUSB_DecrementIoCount.574(i64 0), !insn.addr !611
  %2 = add i64 %0, 200, !insn.addr !612
  %3 = inttoptr i64 %2 to i8*, !insn.addr !612
  store i8 ptrtoint (i32* @global_var_1 to i8), i8* %3, align 1, !insn.addr !612
  %4 = call i64 @FUSB_DecrementIoCount.574(i64 0), !insn.addr !613
  ret void, !insn.addr !614
}

define i64 @FUSBDTV_Remove.405(i64 %arg1) local_unnamed_addr {
dec_label_pc_1dbc:
  %r12.3.reg2mem = alloca i64, !insn.addr !615
  %r12.2.reg2mem = alloca i64, !insn.addr !615
  %r12.1.reg2mem = alloca i64, !insn.addr !615
  %r12.0.reg2mem = alloca i64, !insn.addr !615
  %stack_var_-48 = alloca i64, align 8
  %0 = call i64 @mcount(), !insn.addr !616
  %1 = call i64 @Hardware_RemoveDevice.586(), !insn.addr !617
  %2 = call i64 @FUSBDTV_RemoveUSBDevice.410(i64 %arg1), !insn.addr !618
  %3 = add i64 %arg1, ptrtoint (i64* @global_var_4e0 to i64), !insn.addr !619
  store i64 0, i64* %r12.0.reg2mem, !insn.addr !620
  br label %dec_label_pc_1de4, !insn.addr !620

dec_label_pc_1de4:                                ; preds = %dec_label_pc_1de4, %dec_label_pc_1dbc
  %r12.0.reload = load i64, i64* %r12.0.reg2mem
  %4 = mul i64 %r12.0.reload, ptrtoint (i32* @global_var_1 to i64), !insn.addr !619
  %5 = add i64 %4, %3, !insn.addr !619
  %6 = inttoptr i64 %5 to i64*, !insn.addr !619
  %7 = load i64, i64* %6, align 8, !insn.addr !619
  %8 = call i64 @DTV_PollingThreadClose.532(i64 %7), !insn.addr !621
  %9 = call i64 @DTV_PollingWDThreadClose.170(i64 %7), !insn.addr !622
  %10 = call i64 @ASV5220_BcasThreadClose.346(i64 %7), !insn.addr !623
  %11 = add i64 %r12.0.reload, ptrtoint (i8* @global_var_8 to i64), !insn.addr !624
  %12 = icmp eq i64 %r12.0.reload, sub (i64 0, i64 add (i64 ptrtoint (i8* @global_var_8 to i64), i64 -64)), !insn.addr !625
  %13 = icmp eq i1 %12, false, !insn.addr !626
  store i64 %11, i64* %r12.0.reg2mem, !insn.addr !626
  br i1 %13, label %dec_label_pc_1de4, label %dec_label_pc_1e0e, !insn.addr !626

dec_label_pc_1e0e:                                ; preds = %dec_label_pc_1de4
  %14 = call i64 @DTV_PollingDeviceThreadClose.406(i64 %arg1), !insn.addr !627
  store i64 0, i64* %stack_var_-48, align 8, !insn.addr !628
  %15 = call i64 @StoreDeviceLNBPower.301(i64 %arg1, i64 0, i64* nonnull %stack_var_-48), !insn.addr !629
  %16 = add i64 %arg1, 1224, !insn.addr !630
  %17 = inttoptr i64 %16 to i64*, !insn.addr !630
  %18 = load i64, i64* %17, align 8, !insn.addr !630
  %19 = call i64 @AsicenFreeStreamBuffer.470(i64 %18), !insn.addr !631
  store i64 0, i64* %17, align 8, !insn.addr !632
  %20 = add i64 %arg1, 1232, !insn.addr !633
  %21 = inttoptr i64 %20 to i64*, !insn.addr !633
  %22 = load i64, i64* %21, align 8, !insn.addr !633
  %23 = call i64 @AsicenFreeStreamBuffer.470(i64 %22), !insn.addr !634
  store i64 0, i64* %21, align 8, !insn.addr !635
  %24 = and i64 %11, -256, !insn.addr !636
  %25 = add i64 %arg1, 22944, !insn.addr !637
  store i64 %24, i64* %r12.1.reg2mem, !insn.addr !636
  br label %dec_label_pc_1e62, !insn.addr !636

dec_label_pc_1e62:                                ; preds = %dec_label_pc_1e80, %dec_label_pc_1e0e
  %r12.1.reload = load i64, i64* %r12.1.reg2mem
  %26 = add i64 %25, %r12.1.reload, !insn.addr !637
  %27 = inttoptr i64 %26 to i64*, !insn.addr !637
  %28 = load i64, i64* %27, align 8, !insn.addr !637
  %29 = icmp eq i64 %28, 0, !insn.addr !638
  br i1 %29, label %dec_label_pc_1e80, label %dec_label_pc_1e6f, !insn.addr !639

dec_label_pc_1e6f:                                ; preds = %dec_label_pc_1e62
  %30 = trunc i64 %28 to i32, !insn.addr !640
  %31 = call i64 @FUSB_ExFreePool.600(i32 %30, i64 0), !insn.addr !640
  store i64 0, i64* %27, align 8, !insn.addr !641
  br label %dec_label_pc_1e80, !insn.addr !641

dec_label_pc_1e80:                                ; preds = %dec_label_pc_1e6f, %dec_label_pc_1e62
  %32 = add i64 %r12.1.reload, 80, !insn.addr !642
  %33 = icmp eq i64 %r12.1.reload, 560, !insn.addr !643
  %34 = icmp eq i1 %33, false, !insn.addr !644
  store i64 %32, i64* %r12.1.reg2mem, !insn.addr !644
  br i1 %34, label %dec_label_pc_1e62, label %dec_label_pc_1e8d, !insn.addr !644

dec_label_pc_1e8d:                                ; preds = %dec_label_pc_1e80
  %35 = and i64 %32, -65536, !insn.addr !645
  store i64 %35, i64* %r12.2.reg2mem, !insn.addr !645
  br label %dec_label_pc_1e92, !insn.addr !645

dec_label_pc_1e92:                                ; preds = %dec_label_pc_1ece, %dec_label_pc_1e8d
  %r12.2.reload = load i64, i64* %r12.2.reg2mem
  %36 = add i64 %r12.2.reload, %arg1
  %37 = add i64 %36, 1160, !insn.addr !646
  %38 = inttoptr i64 %37 to i64*, !insn.addr !646
  %39 = load i64, i64* %38, align 8, !insn.addr !646
  %40 = icmp eq i64 %39, 0, !insn.addr !647
  br i1 %40, label %dec_label_pc_1eb0, label %dec_label_pc_1e9f, !insn.addr !648

dec_label_pc_1e9f:                                ; preds = %dec_label_pc_1e92
  %41 = call i64 @AsicenFreeStreamBuffer.470(i64 %39), !insn.addr !649
  store i64 0, i64* %38, align 8, !insn.addr !650
  br label %dec_label_pc_1eb0, !insn.addr !650

dec_label_pc_1eb0:                                ; preds = %dec_label_pc_1e9f, %dec_label_pc_1e92
  %42 = add i64 %36, 24808, !insn.addr !651
  %43 = inttoptr i64 %42 to i64*, !insn.addr !651
  %44 = load i64, i64* %43, align 8, !insn.addr !651
  %45 = icmp eq i64 %44, 0, !insn.addr !652
  br i1 %45, label %dec_label_pc_1ece, label %dec_label_pc_1ebd, !insn.addr !653

dec_label_pc_1ebd:                                ; preds = %dec_label_pc_1eb0
  %46 = trunc i64 %44 to i32, !insn.addr !654
  %47 = call i64 @FUSB_ExFreePool.600(i32 %46, i64 0), !insn.addr !654
  store i64 0, i64* %43, align 8, !insn.addr !655
  br label %dec_label_pc_1ece, !insn.addr !655

dec_label_pc_1ece:                                ; preds = %dec_label_pc_1ebd, %dec_label_pc_1eb0
  %48 = add i64 %r12.2.reload, ptrtoint (i8* @global_var_8 to i64), !insn.addr !656
  %49 = icmp eq i64 %r12.2.reload, sub (i64 0, i64 add (i64 ptrtoint (i8* @global_var_8 to i64), i64 -64)), !insn.addr !657
  %50 = icmp eq i1 %49, false, !insn.addr !658
  store i64 %48, i64* %r12.2.reg2mem, !insn.addr !658
  br i1 %50, label %dec_label_pc_1e92, label %dec_label_pc_1ed8, !insn.addr !658

dec_label_pc_1ed8:                                ; preds = %dec_label_pc_1ece
  %51 = and i64 %48, -256, !insn.addr !659
  store i64 %51, i64* %r12.3.reg2mem, !insn.addr !659
  br label %dec_label_pc_1edb, !insn.addr !659

dec_label_pc_1edb:                                ; preds = %dec_label_pc_1edb, %dec_label_pc_1ed8
  %r12.3.reload = load i64, i64* %r12.3.reg2mem
  %52 = add i64 %r12.3.reload, %3, !insn.addr !660
  %53 = inttoptr i64 %52 to i64*, !insn.addr !660
  %54 = load i64, i64* %53, align 8, !insn.addr !660
  %55 = trunc i64 %54 to i32, !insn.addr !661
  %56 = call i64 @FUSB_ExFreePool.600(i32 %55, i64 0), !insn.addr !661
  %57 = add i64 %r12.3.reload, ptrtoint (i8* @global_var_8 to i64), !insn.addr !662
  %58 = icmp eq i64 %r12.3.reload, sub (i64 0, i64 add (i64 ptrtoint (i8* @global_var_8 to i64), i64 -64)), !insn.addr !663
  %59 = icmp eq i1 %58, false, !insn.addr !664
  store i64 %57, i64* %r12.3.reg2mem, !insn.addr !664
  br i1 %59, label %dec_label_pc_1edb, label %dec_label_pc_1ef2, !insn.addr !664

dec_label_pc_1ef2:                                ; preds = %dec_label_pc_1edb
  %60 = load i64, i64* @global_var_36b00, align 8, !insn.addr !665
  %61 = icmp eq i64 %60, %arg1, !insn.addr !665
  %62 = icmp eq i1 %61, false, !insn.addr !666
  %spec.select = select i1 %62, i64 ptrtoint (i32* @global_var_1 to i64), i64 and (i64 ptrtoint (i32* @global_var_1 to i64), i64 -256)
  ret i64 %spec.select, !insn.addr !667
}

define i64 @FUSBDTV_StopUSBDevice(i64 %deviceExtension) local_unnamed_addr {
dec_label_pc_1f0f:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = call i64 @__decompiler_undefined_function_0()
  %2 = call i64 @__decompiler_undefined_function_0()
  %3 = call i64 @__decompiler_undefined_function_0()
  %4 = call i1 @__decompiler_undefined_function_2()
  %5 = add i64 %3, -104, !insn.addr !668
  %6 = inttoptr i64 %5 to i8*, !insn.addr !668
  %7 = load i8, i8* %6, align 1, !insn.addr !668
  %8 = trunc i64 %2 to i8, !insn.addr !668
  %9 = zext i1 %4 to i8, !insn.addr !668
  %10 = add i8 %7, %8, !insn.addr !668
  %11 = add i8 %10, %9, !insn.addr !668
  store i8 %11, i8* %6, align 1, !insn.addr !668
  %12 = mul i64 %3, ptrtoint (i8* @global_var_8 to i64), !insn.addr !669
  %13 = inttoptr i64 %12 to i64*, !insn.addr !669
  store i64 0, i64* %13, align 8, !insn.addr !669
  %14 = trunc i64 %1 to i32, !insn.addr !670
  %15 = call i64 @FUSB_ExFreePool.600(i32 %14, i64 %0), !insn.addr !670
  ret i64 %15, !insn.addr !671
}

define i64 @FUSBDTV_StopUSBDevice.544(i64 %arg1) local_unnamed_addr {
dec_label_pc_1f3f:
  %0 = call i64 @mcount(), !insn.addr !672
  %1 = call i64 @FUSB_IncrementIoCount.588(i64 0), !insn.addr !673
  ret i64 %1, !insn.addr !673
}

define void @FUSBDTV_Stop(i64 %deviceExtension) local_unnamed_addr {
dec_label_pc_1f60:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = call i64 @__decompiler_undefined_function_0()
  %2 = call i64 @__decompiler_undefined_function_0()
  %3 = trunc i64 %2 to i8
  %4 = mul i8 %3, 2, !insn.addr !674
  %5 = inttoptr i64 %2 to i8*, !insn.addr !674
  store i8 %4, i8* %5, align 1, !insn.addr !674
  %6 = add i64 %1, -276214562, !insn.addr !675
  %7 = inttoptr i64 %6 to i8*, !insn.addr !675
  %8 = load i8, i8* %7, align 1, !insn.addr !675
  %9 = trunc i64 %1 to i8, !insn.addr !675
  %10 = add i8 %8, %9, !insn.addr !675
  store i8 %10, i8* %7, align 1, !insn.addr !675
  %11 = call i64 @FUSBDTV_StopBulkStream.338(i64 %deviceExtension, i64 %0), !insn.addr !676
  ret void, !insn.addr !677
}

define void @FUSBDTV_SetFakeDeviceObj(i8* %FunctionalDeviceObject, i64 %deviceExtension, i8* %FakeDeviceObject) local_unnamed_addr {
dec_label_pc_1f77:
  ret void, !insn.addr !678
}

define i64 @FUSBDTV_StartUSBDevice(i8* %FunctionalDeviceObject, i64 %deviceExtension) local_unnamed_addr {
dec_label_pc_1f88:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = call i64 @__decompiler_undefined_function_0()
  %2 = add i64 %0, 65, !insn.addr !679
  %3 = inttoptr i64 %2 to i8*, !insn.addr !679
  %4 = load i8, i8* %3, align 1, !insn.addr !679
  %5 = trunc i64 %0 to i8, !insn.addr !679
  %6 = or i8 %4, %5, !insn.addr !679
  store i8 %6, i8* %3, align 1, !insn.addr !679
  ret i64 %1, !insn.addr !680
}

define i64 @FUSBDTV_Stop.553(i64 %arg1) local_unnamed_addr {
dec_label_pc_1f90:
  %0 = call i64 @mcount(), !insn.addr !681
  %1 = add i64 %arg1, 25352, !insn.addr !682
  %2 = inttoptr i64 %1 to i8*, !insn.addr !682
  store i8 0, i8* %2, align 1, !insn.addr !682
  %3 = call i64 @FUSBDTV_StopUSBDevice.544(i64 %arg1), !insn.addr !683
  ret i64 %3, !insn.addr !684
}

define i64 @FUSBDTV_SetFakeDeviceObj.190(i64 %arg1, i64 %arg2, i64 %arg3) local_unnamed_addr {
dec_label_pc_1fa7:
  %0 = call i64 @mcount(), !insn.addr !685
  %1 = inttoptr i64 %arg3 to i64*, !insn.addr !686
  store i64 %arg1, i64* %1, align 8, !insn.addr !686
  ret i64 %arg1, !insn.addr !687
}

define i64 @FUSBDTV_StartUSBDevice.393(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_1fb8:
  %0 = call i64 @mcount(), !insn.addr !688
  %1 = call i64 @FUSB_ExAllocatePool.203(i64 0, i64 ptrtoint (i64* @global_var_6690 to i64)), !insn.addr !689
  ret i64 %1, !insn.addr !690
}

define i64 @FUSBDTV_AddUSBDevice(i8* %FunctionalDeviceObject, i8* %NextDeviceObject, i8* %PhysicalDeviceObject, i64 %deviceExtension) local_unnamed_addr {
dec_label_pc_1ff2:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = ptrtoint i8* %PhysicalDeviceObject to i64
  %2 = ptrtoint i8* %NextDeviceObject to i64
  %3 = ptrtoint i8* %FunctionalDeviceObject to i64
  %4 = call i64 @FUSBDTV_SetFakeDeviceObj.190(i64 %3, i64 %2, i64 %1), !insn.addr !691
  %5 = call i64 @FUSB_IncrementIoCount.588(i64 %0), !insn.addr !692
  %6 = call i64 @FUSB_DecrementIoCount.574(i64 %0), !insn.addr !693
  %7 = trunc i64 %0 to i32, !insn.addr !694
  %8 = call i64 @FUSB_ExFreePool.600(i32 %7, i64 %2), !insn.addr !694
  ret i64 ptrtoint (i32* @global_var_1 to i64), !insn.addr !695
}

define i64 @FUSBDTV_AddUSBDevice.155(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4, i64 %arg5) local_unnamed_addr {
dec_label_pc_2022:
  %rdi.3.reg2mem = alloca i64, !insn.addr !696
  %rdx.27.reg2mem = alloca i64, !insn.addr !696
  %rcx.27.reg2mem = alloca i64, !insn.addr !696
  %rax.28.reg2mem = alloca i64, !insn.addr !696
  %rdi.2.reg2mem = alloca i64, !insn.addr !696
  %rdx.26.reg2mem = alloca i64, !insn.addr !696
  %rcx.26.reg2mem = alloca i64, !insn.addr !696
  %rax.27.reg2mem = alloca i64, !insn.addr !696
  %rdi.1.reg2mem = alloca i64, !insn.addr !696
  %rdx.25.reg2mem = alloca i64, !insn.addr !696
  %rcx.25.reg2mem = alloca i64, !insn.addr !696
  %rax.26.reg2mem = alloca i64, !insn.addr !696
  %rdi.0.reg2mem = alloca i64, !insn.addr !696
  %rdx.24.reg2mem = alloca i64, !insn.addr !696
  %rcx.24.reg2mem = alloca i64, !insn.addr !696
  %rax.25.reg2mem = alloca i64, !insn.addr !696
  %r8.3.reg2mem = alloca i64, !insn.addr !696
  %rdx.23.reg2mem = alloca i64, !insn.addr !696
  %rcx.23.reg2mem = alloca i64, !insn.addr !696
  %rax.24.reg2mem = alloca i64, !insn.addr !696
  %rsi.19.reg2mem = alloca i64, !insn.addr !696
  %rdx.22.reg2mem = alloca i64, !insn.addr !696
  %rcx.22.reg2mem = alloca i64, !insn.addr !696
  %rax.23.reg2mem = alloca i64, !insn.addr !696
  %rsi.18.reg2mem = alloca i64, !insn.addr !696
  %rdx.21.reg2mem = alloca i64, !insn.addr !696
  %rcx.21.reg2mem = alloca i64, !insn.addr !696
  %rax.22.reg2mem = alloca i64, !insn.addr !696
  %rsi.17.reg2mem = alloca i64, !insn.addr !696
  %rdx.20.reg2mem = alloca i64, !insn.addr !696
  %rcx.20.reg2mem = alloca i64, !insn.addr !696
  %rax.21.reg2mem = alloca i64, !insn.addr !696
  %rsi.16.reg2mem = alloca i64, !insn.addr !696
  %rdx.19.reg2mem = alloca i64, !insn.addr !696
  %rcx.19.reg2mem = alloca i64, !insn.addr !696
  %rax.20.reg2mem = alloca i64, !insn.addr !696
  %rsi.15.reg2mem = alloca i64, !insn.addr !696
  %rdx.18.reg2mem = alloca i64, !insn.addr !696
  %rcx.18.reg2mem = alloca i64, !insn.addr !696
  %rax.19.reg2mem = alloca i64, !insn.addr !696
  %rsi.14.reg2mem = alloca i64, !insn.addr !696
  %rdx.17.reg2mem = alloca i64, !insn.addr !696
  %rcx.17.reg2mem = alloca i64, !insn.addr !696
  %rax.18.reg2mem = alloca i64, !insn.addr !696
  %rsi.13.reg2mem = alloca i64, !insn.addr !696
  %rdx.16.reg2mem = alloca i64, !insn.addr !696
  %rcx.16.reg2mem = alloca i64, !insn.addr !696
  %rax.17.reg2mem = alloca i64, !insn.addr !696
  %rsi.12.reg2mem = alloca i64, !insn.addr !696
  %rdx.15.reg2mem = alloca i64, !insn.addr !696
  %rcx.15.reg2mem = alloca i64, !insn.addr !696
  %rax.16.reg2mem = alloca i64, !insn.addr !696
  %rsi.11.reg2mem = alloca i64, !insn.addr !696
  %rdx.14.reg2mem = alloca i64, !insn.addr !696
  %rcx.14.reg2mem = alloca i64, !insn.addr !696
  %rax.15.reg2mem = alloca i64, !insn.addr !696
  %rsi.10.reg2mem = alloca i64, !insn.addr !696
  %rdx.13.reg2mem = alloca i64, !insn.addr !696
  %rcx.13.reg2mem = alloca i64, !insn.addr !696
  %rax.14.reg2mem = alloca i64, !insn.addr !696
  %rsi.9.reg2mem = alloca i64, !insn.addr !696
  %rdx.12.reg2mem = alloca i64, !insn.addr !696
  %rcx.12.reg2mem = alloca i64, !insn.addr !696
  %rax.13.reg2mem = alloca i64, !insn.addr !696
  %rsi.8.reg2mem = alloca i64, !insn.addr !696
  %rdx.11.reg2mem = alloca i64, !insn.addr !696
  %rcx.11.reg2mem = alloca i64, !insn.addr !696
  %rax.12.reg2mem = alloca i64, !insn.addr !696
  %rsi.7.reg2mem = alloca i64, !insn.addr !696
  %rdx.10.reg2mem = alloca i64, !insn.addr !696
  %rcx.10.reg2mem = alloca i64, !insn.addr !696
  %rax.11.reg2mem = alloca i64, !insn.addr !696
  %rsi.6.reg2mem = alloca i64, !insn.addr !696
  %rdx.9.reg2mem = alloca i64, !insn.addr !696
  %rcx.9.reg2mem = alloca i64, !insn.addr !696
  %rax.10.reg2mem = alloca i64, !insn.addr !696
  %rsi.5.reg2mem = alloca i64, !insn.addr !696
  %rdx.8.reg2mem = alloca i64, !insn.addr !696
  %rcx.8.reg2mem = alloca i64, !insn.addr !696
  %rax.9.reg2mem = alloca i64, !insn.addr !696
  %rsi.4.reg2mem = alloca i64, !insn.addr !696
  %rdx.7.reg2mem = alloca i64, !insn.addr !696
  %rcx.7.reg2mem = alloca i64, !insn.addr !696
  %rax.8.reg2mem = alloca i64, !insn.addr !696
  %rsi.3.reg2mem = alloca i64, !insn.addr !696
  %rdx.6.reg2mem = alloca i64, !insn.addr !696
  %rcx.6.reg2mem = alloca i64, !insn.addr !696
  %rax.7.reg2mem = alloca i64, !insn.addr !696
  %rsi.2.reg2mem = alloca i64, !insn.addr !696
  %rdx.5.reg2mem = alloca i64, !insn.addr !696
  %rcx.5.reg2mem = alloca i64, !insn.addr !696
  %rax.6.reg2mem = alloca i64, !insn.addr !696
  %rsi.1.reg2mem = alloca i64, !insn.addr !696
  %rdx.4.reg2mem = alloca i64, !insn.addr !696
  %rcx.4.reg2mem = alloca i64, !insn.addr !696
  %rax.5.reg2mem = alloca i64, !insn.addr !696
  %rsi.0.reg2mem = alloca i64, !insn.addr !696
  %rdx.3.reg2mem = alloca i64, !insn.addr !696
  %rcx.3.reg2mem = alloca i64, !insn.addr !696
  %rax.4.reg2mem = alloca i64, !insn.addr !696
  %rax.3.reg2mem = alloca i64, !insn.addr !696
  %r8.2.reg2mem = alloca i64, !insn.addr !696
  %rdx.2.reg2mem = alloca i64, !insn.addr !696
  %rcx.2.reg2mem = alloca i64, !insn.addr !696
  %rax.2.reg2mem = alloca i64, !insn.addr !696
  %r8.1.reg2mem = alloca i64, !insn.addr !696
  %rdx.1.reg2mem = alloca i64, !insn.addr !696
  %rcx.1.reg2mem = alloca i64, !insn.addr !696
  %rax.1.reg2mem = alloca i64, !insn.addr !696
  %r8.0.reg2mem = alloca i64, !insn.addr !696
  %rdx.0.reg2mem = alloca i64, !insn.addr !696
  %rcx.0.reg2mem = alloca i64, !insn.addr !696
  %rax.0.reg2mem = alloca i64, !insn.addr !696
  %stack_var_-152 = alloca i8, align 1
  %stack_var_-136 = alloca i8, align 1
  %stack_var_-120 = alloca i8, align 1
  %stack_var_-104 = alloca i8, align 1
  %stack_var_-88 = alloca i8, align 1
  %stack_var_-616 = alloca i32, align 4
  %stack_var_-584 = alloca i64, align 8
  %stack_var_-552 = alloca i64, align 8
  %stack_var_-520 = alloca i32, align 4
  %stack_var_-488 = alloca i64, align 8
  %stack_var_-456 = alloca i64, align 8
  %stack_var_-424 = alloca i64, align 8
  %stack_var_-392 = alloca i64, align 8
  %stack_var_-360 = alloca i64, align 8
  %stack_var_-328 = alloca i32, align 4
  %stack_var_-312 = alloca i32, align 4
  %stack_var_-296 = alloca i32, align 4
  %stack_var_-280 = alloca i32, align 4
  %stack_var_-264 = alloca i32, align 4
  %stack_var_-248 = alloca i32, align 4
  %stack_var_-232 = alloca i32, align 4
  %stack_var_-216 = alloca i32, align 4
  %stack_var_-200 = alloca i32, align 4
  %stack_var_-184 = alloca i32, align 4
  %stack_var_-72 = alloca i8, align 1
  %stack_var_-56 = alloca i8, align 1
  %stack_var_-40 = alloca i8, align 1
  %stack_var_-648 = alloca i64, align 8
  %0 = call i64 @mcount(), !insn.addr !697
  %1 = call i64 @__readgsqword(i64 40), !insn.addr !698
  %2 = call i64 @FUSB_CreateDeviceObject.434(i64 0, i64 %arg3, i64 0, i64 %arg4, i64* bitcast (i32* @global_var_1 to i64*)), !insn.addr !699
  %3 = urem i64 %2, 256, !insn.addr !700
  %4 = call i64 @NT_SUCCESS.556(i64 %3), !insn.addr !701
  %5 = trunc i64 %4 to i8, !insn.addr !702
  %6 = icmp eq i8 %5, 0, !insn.addr !702
  br i1 %6, label %dec_label_pc_21ca, label %dec_label_pc_2072, !insn.addr !703

dec_label_pc_2072:                                ; preds = %dec_label_pc_2022
  %7 = add i64 %arg4, 184, !insn.addr !704
  %8 = inttoptr i64 %7 to i64*, !insn.addr !704
  store i64 0, i64* %8, align 8, !insn.addr !704
  store i8 -75, i8* %stack_var_-40, align 1, !insn.addr !705
  store i8 -85, i8* %stack_var_-56, align 1, !insn.addr !706
  store i8 -118, i8* %stack_var_-72, align 1, !insn.addr !707
  %9 = ptrtoint i8* %stack_var_-40 to i64, !insn.addr !708
  %10 = add i64 %arg4, 472, !insn.addr !709
  store i64 0, i64* %r8.0.reg2mem, !insn.addr !710
  br label %dec_label_pc_212a, !insn.addr !710

dec_label_pc_20ef:                                ; preds = %dec_label_pc_20ef, %dec_label_pc_212a
  %rdx.0.reload = load i64, i64* %rdx.0.reg2mem
  %rcx.0.reload = load i64, i64* %rcx.0.reg2mem
  %rax.0.reload = load i64, i64* %rax.0.reg2mem
  %11 = inttoptr i64 %rcx.0.reload to i8*, !insn.addr !711
  %12 = load i8, i8* %11, align 1, !insn.addr !711
  %13 = trunc i64 %rax.0.reload to i8, !insn.addr !712
  %14 = sub i8 %12, %13, !insn.addr !712
  %15 = mul i64 %rax.0.reload, ptrtoint (i32* @global_var_1 to i64), !insn.addr !713
  %16 = add i64 %15, %9, !insn.addr !713
  %17 = inttoptr i64 %16 to i8*, !insn.addr !713
  %18 = load i8, i8* %17, align 1, !insn.addr !713
  %19 = xor i8 %14, %18, !insn.addr !713
  %20 = inttoptr i64 %rdx.0.reload to i8*, !insn.addr !714
  store i8 %19, i8* %20, align 1, !insn.addr !714
  %21 = add i64 %rax.0.reload, ptrtoint (i32* @global_var_1 to i64), !insn.addr !715
  %22 = add i64 %rcx.0.reload, ptrtoint (i32* @global_var_1 to i64), !insn.addr !716
  %23 = add i64 %rdx.0.reload, 1, !insn.addr !717
  %24 = icmp eq i64 %21, ptrtoint (i8* @global_var_8 to i64), !insn.addr !718
  %25 = icmp eq i1 %24, false, !insn.addr !719
  store i64 %21, i64* %rax.0.reg2mem, !insn.addr !719
  store i64 %22, i64* %rcx.0.reg2mem, !insn.addr !719
  store i64 %23, i64* %rdx.0.reg2mem, !insn.addr !719
  br i1 %25, label %dec_label_pc_20ef, label %dec_label_pc_210e, !insn.addr !719

dec_label_pc_210e:                                ; preds = %dec_label_pc_20ef
  %26 = add i64 %r8.0.reload, ptrtoint (i8* @global_var_8 to i64), !insn.addr !720
  %27 = icmp eq i64 %r8.0.reload, sub (i64 0, i64 add (i64 ptrtoint (i8* @global_var_8 to i64), i64 -192)), !insn.addr !721
  %28 = icmp eq i1 %27, false, !insn.addr !722
  store i64 %26, i64* %r8.0.reg2mem, !insn.addr !722
  br i1 %28, label %dec_label_pc_212a, label %dec_label_pc_211b, !insn.addr !722

dec_label_pc_211b:                                ; preds = %dec_label_pc_210e
  %29 = and i64 %26, -256, !insn.addr !723
  %30 = ptrtoint i8* %stack_var_-56 to i64, !insn.addr !724
  %31 = add i64 %arg4, 664, !insn.addr !725
  store i64 %29, i64* %r8.1.reg2mem, !insn.addr !726
  br label %dec_label_pc_2176, !insn.addr !726

dec_label_pc_212a:                                ; preds = %dec_label_pc_210e, %dec_label_pc_2072
  %r8.0.reload = load i64, i64* %r8.0.reg2mem
  %32 = add i64 %10, %r8.0.reload, !insn.addr !709
  store i64 0, i64* %rax.0.reg2mem, !insn.addr !727
  store i64 %r8.0.reload, i64* %rcx.0.reg2mem, !insn.addr !727
  store i64 %32, i64* %rdx.0.reg2mem, !insn.addr !727
  br label %dec_label_pc_20ef, !insn.addr !727

dec_label_pc_213e:                                ; preds = %dec_label_pc_213e, %dec_label_pc_2176
  %rdx.1.reload = load i64, i64* %rdx.1.reg2mem
  %rcx.1.reload = load i64, i64* %rcx.1.reg2mem
  %rax.1.reload = load i64, i64* %rax.1.reg2mem
  %33 = inttoptr i64 %rcx.1.reload to i8*, !insn.addr !728
  %34 = load i8, i8* %33, align 1, !insn.addr !728
  %35 = trunc i64 %rax.1.reload to i8, !insn.addr !729
  %36 = sub i8 %34, %35, !insn.addr !729
  %37 = mul i64 %rax.1.reload, ptrtoint (i32* @global_var_1 to i64), !insn.addr !730
  %38 = add i64 %37, %30, !insn.addr !730
  %39 = inttoptr i64 %38 to i8*, !insn.addr !730
  %40 = load i8, i8* %39, align 1, !insn.addr !730
  %41 = xor i8 %36, %40, !insn.addr !730
  %42 = inttoptr i64 %rdx.1.reload to i8*, !insn.addr !731
  store i8 %41, i8* %42, align 1, !insn.addr !731
  %43 = add i64 %rax.1.reload, ptrtoint (i32* @global_var_1 to i64), !insn.addr !732
  %44 = add i64 %rcx.1.reload, ptrtoint (i32* @global_var_1 to i64), !insn.addr !733
  %45 = add i64 %rdx.1.reload, 1, !insn.addr !734
  %46 = icmp eq i64 %43, ptrtoint (i8* @global_var_8 to i64), !insn.addr !735
  %47 = icmp eq i1 %46, false, !insn.addr !736
  store i64 %43, i64* %rax.1.reg2mem, !insn.addr !736
  store i64 %44, i64* %rcx.1.reg2mem, !insn.addr !736
  store i64 %45, i64* %rdx.1.reg2mem, !insn.addr !736
  br i1 %47, label %dec_label_pc_213e, label %dec_label_pc_215d, !insn.addr !736

dec_label_pc_215d:                                ; preds = %dec_label_pc_213e
  %48 = add i64 %r8.1.reload, ptrtoint (i8* @global_var_8 to i64), !insn.addr !737
  %49 = icmp eq i64 %48, ptrtoint (i32** @global_var_20 to i64), !insn.addr !738
  %50 = icmp eq i1 %49, false, !insn.addr !739
  store i64 %48, i64* %r8.1.reg2mem, !insn.addr !739
  br i1 %50, label %dec_label_pc_2176, label %dec_label_pc_2167, !insn.addr !739

dec_label_pc_2167:                                ; preds = %dec_label_pc_215d
  %51 = and i64 %48, -256, !insn.addr !740
  %52 = ptrtoint i8* %stack_var_-72 to i64, !insn.addr !741
  %53 = add i64 %arg4, 696, !insn.addr !742
  store i64 %51, i64* %r8.2.reg2mem, !insn.addr !743
  br label %dec_label_pc_21b6, !insn.addr !743

dec_label_pc_2176:                                ; preds = %dec_label_pc_215d, %dec_label_pc_211b
  %r8.1.reload = load i64, i64* %r8.1.reg2mem
  %54 = add i64 %31, %r8.1.reload, !insn.addr !725
  store i64 0, i64* %rax.1.reg2mem, !insn.addr !744
  store i64 %r8.1.reload, i64* %rcx.1.reg2mem, !insn.addr !744
  store i64 %54, i64* %rdx.1.reg2mem, !insn.addr !744
  br label %dec_label_pc_213e, !insn.addr !744

dec_label_pc_218a:                                ; preds = %dec_label_pc_218a, %dec_label_pc_21b6
  %rdx.2.reload = load i64, i64* %rdx.2.reg2mem
  %rcx.2.reload = load i64, i64* %rcx.2.reg2mem
  %rax.2.reload = load i64, i64* %rax.2.reg2mem
  %55 = inttoptr i64 %rcx.2.reload to i8*, !insn.addr !745
  %56 = load i8, i8* %55, align 1, !insn.addr !745
  %57 = trunc i64 %rax.2.reload to i8, !insn.addr !746
  %58 = sub i8 %56, %57, !insn.addr !746
  %59 = mul i64 %rax.2.reload, ptrtoint (i32* @global_var_1 to i64), !insn.addr !747
  %60 = add i64 %59, %52, !insn.addr !747
  %61 = inttoptr i64 %60 to i8*, !insn.addr !747
  %62 = load i8, i8* %61, align 1, !insn.addr !747
  %63 = xor i8 %58, %62, !insn.addr !747
  %64 = inttoptr i64 %rdx.2.reload to i8*, !insn.addr !748
  store i8 %63, i8* %64, align 1, !insn.addr !748
  %65 = add i64 %rax.2.reload, ptrtoint (i32* @global_var_1 to i64), !insn.addr !749
  %66 = add i64 %rcx.2.reload, ptrtoint (i32* @global_var_1 to i64), !insn.addr !750
  %67 = add i64 %rdx.2.reload, 1, !insn.addr !751
  %68 = icmp eq i64 %65, ptrtoint (i8* @global_var_8 to i64), !insn.addr !752
  %69 = icmp eq i1 %68, false, !insn.addr !753
  store i64 %65, i64* %rax.2.reg2mem, !insn.addr !753
  store i64 %66, i64* %rcx.2.reg2mem, !insn.addr !753
  store i64 %67, i64* %rdx.2.reg2mem, !insn.addr !753
  br i1 %69, label %dec_label_pc_218a, label %dec_label_pc_21a9, !insn.addr !753

dec_label_pc_21a9:                                ; preds = %dec_label_pc_218a
  %70 = add i64 %r8.2.reload, ptrtoint (i8* @global_var_8 to i64), !insn.addr !754
  %71 = icmp eq i64 %r8.2.reload, sub (i64 0, i64 add (i64 ptrtoint (i8* @global_var_8 to i64), i64 -192)), !insn.addr !755
  store i64 %70, i64* %r8.2.reg2mem, !insn.addr !756
  br i1 %71, label %dec_label_pc_21ca, label %dec_label_pc_21b6, !insn.addr !756

dec_label_pc_21b6:                                ; preds = %dec_label_pc_21a9, %dec_label_pc_2167
  %r8.2.reload = load i64, i64* %r8.2.reg2mem
  %72 = add i64 %53, %r8.2.reload, !insn.addr !742
  store i64 0, i64* %rax.2.reg2mem, !insn.addr !757
  store i64 %r8.2.reload, i64* %rcx.2.reg2mem, !insn.addr !757
  store i64 %72, i64* %rdx.2.reg2mem, !insn.addr !757
  br label %dec_label_pc_218a, !insn.addr !757

dec_label_pc_21ca:                                ; preds = %dec_label_pc_21a9, %dec_label_pc_2022
  store i32 -1801562347, i32* %stack_var_-184, align 4, !insn.addr !758
  store i32 226007328, i32* %stack_var_-200, align 4, !insn.addr !759
  store i32 -2115474411, i32* %stack_var_-216, align 4, !insn.addr !760
  store i32 534916092, i32* %stack_var_-232, align 4, !insn.addr !761
  store i32 1545546320, i32* %stack_var_-248, align 4, !insn.addr !762
  store i32 -46322467, i32* %stack_var_-264, align 4, !insn.addr !763
  store i32 1700805881, i32* %stack_var_-280, align 4, !insn.addr !764
  store i32 664565980, i32* %stack_var_-296, align 4, !insn.addr !765
  store i32 -2060580708, i32* %stack_var_-312, align 4, !insn.addr !766
  store i32 695186100, i32* %stack_var_-328, align 4, !insn.addr !767
  store i64 0, i64* %rax.3.reg2mem, !insn.addr !768
  br label %dec_label_pc_2377, !insn.addr !768

dec_label_pc_2377:                                ; preds = %dec_label_pc_2377, %dec_label_pc_21ca
  %rax.3.reload = load i64, i64* %rax.3.reg2mem
  %73 = mul i64 %rax.3.reload, ptrtoint (i16* @global_var_4 to i64), !insn.addr !769
  %74 = inttoptr i64 %73 to i32*, !insn.addr !769
  %75 = load i32, i32* %74, align 8, !insn.addr !769
  %76 = trunc i64 %rax.3.reload to i32, !insn.addr !770
  %77 = sub i32 %75, %76, !insn.addr !770
  %78 = xor i32 %77, 1812500957, !insn.addr !771
  %79 = mul i64 %rax.3.reload, 4, !insn.addr !772
  %80 = add i64 %79, %arg4
  %81 = add i64 %80, 14056, !insn.addr !772
  %82 = inttoptr i64 %81 to i32*, !insn.addr !772
  store i32 %78, i32* %82, align 4, !insn.addr !772
  %83 = load i32, i32* %74, align 8, !insn.addr !773
  %84 = sub i32 %83, %76, !insn.addr !774
  %85 = xor i32 %84, -205828377, !insn.addr !775
  %86 = add i64 %80, 14060, !insn.addr !776
  %87 = inttoptr i64 %86 to i32*, !insn.addr !776
  store i32 %85, i32* %87, align 4, !insn.addr !776
  %88 = add i64 %rax.3.reload, ptrtoint (i32* @global_var_2 to i64), !insn.addr !777
  %89 = icmp eq i64 %88, ptrtoint (i8* @global_var_a to i64), !insn.addr !778
  %90 = icmp eq i1 %89, false, !insn.addr !779
  store i64 %88, i64* %rax.3.reg2mem, !insn.addr !779
  br i1 %90, label %dec_label_pc_2377, label %dec_label_pc_23a4, !insn.addr !779

dec_label_pc_23a4:                                ; preds = %dec_label_pc_2377
  %91 = ptrtoint i32* %stack_var_-184 to i64, !insn.addr !780
  %92 = add i64 %arg4, 3816, !insn.addr !781
  store i64 0, i64* %rsi.0.reg2mem, !insn.addr !782
  br label %dec_label_pc_23f4, !insn.addr !782

dec_label_pc_23b8:                                ; preds = %dec_label_pc_23b8, %dec_label_pc_23f4
  %rdx.3.reload = load i64, i64* %rdx.3.reg2mem
  %rcx.3.reload = load i64, i64* %rcx.3.reg2mem
  %rax.4.reload = load i64, i64* %rax.4.reg2mem
  %93 = inttoptr i64 %rcx.3.reload to i32*, !insn.addr !783
  %94 = load i32, i32* %93, align 4, !insn.addr !783
  %95 = sub i32 %94, %116, !insn.addr !784
  %96 = mul i64 %rax.4.reload, ptrtoint (i16* @global_var_4 to i64), !insn.addr !785
  %97 = add i64 %96, %91, !insn.addr !785
  %98 = inttoptr i64 %97 to i32*, !insn.addr !785
  %99 = load i32, i32* %98, align 4, !insn.addr !785
  %100 = xor i32 %95, %99, !insn.addr !785
  %101 = inttoptr i64 %rdx.3.reload to i32*, !insn.addr !786
  store i32 %100, i32* %101, align 4, !insn.addr !786
  %102 = add i64 %rax.4.reload, ptrtoint (i32* @global_var_1 to i64), !insn.addr !787
  %103 = add i64 %rcx.3.reload, ptrtoint (i16* @global_var_4 to i64), !insn.addr !788
  %104 = add i64 %rdx.3.reload, 4, !insn.addr !789
  %105 = icmp eq i64 %102, ptrtoint (i16* @global_var_4 to i64), !insn.addr !790
  %106 = icmp eq i1 %105, false, !insn.addr !791
  store i64 %102, i64* %rax.4.reg2mem, !insn.addr !791
  store i64 %103, i64* %rcx.3.reg2mem, !insn.addr !791
  store i64 %104, i64* %rdx.3.reg2mem, !insn.addr !791
  br i1 %106, label %dec_label_pc_23b8, label %dec_label_pc_23d4, !insn.addr !791

dec_label_pc_23d4:                                ; preds = %dec_label_pc_23b8
  %107 = add i64 %rsi.0.reload, ptrtoint (i16* @global_var_4 to i64), !insn.addr !792
  %108 = icmp eq i64 %rsi.0.reload, sub (i64 0, i64 add (i64 ptrtoint (i16* @global_var_4 to i64), i64 -256)), !insn.addr !793
  %109 = icmp eq i1 %108, false, !insn.addr !794
  store i64 %107, i64* %rsi.0.reg2mem, !insn.addr !794
  br i1 %109, label %dec_label_pc_23f4, label %dec_label_pc_23e1, !insn.addr !794

dec_label_pc_23e1:                                ; preds = %dec_label_pc_23d4
  %110 = and i64 %107, -65536, !insn.addr !795
  %111 = ptrtoint i32* %stack_var_-200 to i64, !insn.addr !796
  %112 = add i64 %arg4, 4840, !insn.addr !797
  store i64 %110, i64* %rsi.1.reg2mem, !insn.addr !798
  br label %dec_label_pc_2445, !insn.addr !798

dec_label_pc_23f4:                                ; preds = %dec_label_pc_23d4, %dec_label_pc_23a4
  %rsi.0.reload = load i64, i64* %rsi.0.reg2mem
  %113 = mul i64 %rsi.0.reload, ptrtoint (i16* @global_var_4 to i64), !insn.addr !799
  %114 = mul i64 %rsi.0.reload, 4, !insn.addr !781
  %115 = add i64 %92, %114, !insn.addr !781
  %116 = trunc i64 %rsi.0.reload to i32, !insn.addr !784
  store i64 0, i64* %rax.4.reg2mem, !insn.addr !800
  store i64 %113, i64* %rcx.3.reg2mem, !insn.addr !800
  store i64 %115, i64* %rdx.3.reg2mem, !insn.addr !800
  br label %dec_label_pc_23b8, !insn.addr !800

dec_label_pc_2409:                                ; preds = %dec_label_pc_2409, %dec_label_pc_2445
  %rdx.4.reload = load i64, i64* %rdx.4.reg2mem
  %rcx.4.reload = load i64, i64* %rcx.4.reg2mem
  %rax.5.reload = load i64, i64* %rax.5.reg2mem
  %117 = inttoptr i64 %rcx.4.reload to i32*, !insn.addr !801
  %118 = load i32, i32* %117, align 4, !insn.addr !801
  %119 = sub i32 %118, %140, !insn.addr !802
  %120 = mul i64 %rax.5.reload, ptrtoint (i16* @global_var_4 to i64), !insn.addr !803
  %121 = add i64 %120, %111, !insn.addr !803
  %122 = inttoptr i64 %121 to i32*, !insn.addr !803
  %123 = load i32, i32* %122, align 4, !insn.addr !803
  %124 = xor i32 %119, %123, !insn.addr !803
  %125 = inttoptr i64 %rdx.4.reload to i32*, !insn.addr !804
  store i32 %124, i32* %125, align 4, !insn.addr !804
  %126 = add i64 %rax.5.reload, ptrtoint (i32* @global_var_1 to i64), !insn.addr !805
  %127 = add i64 %rcx.4.reload, ptrtoint (i16* @global_var_4 to i64), !insn.addr !806
  %128 = add i64 %rdx.4.reload, 4, !insn.addr !807
  %129 = icmp eq i64 %126, ptrtoint (i16* @global_var_4 to i64), !insn.addr !808
  %130 = icmp eq i1 %129, false, !insn.addr !809
  store i64 %126, i64* %rax.5.reg2mem, !insn.addr !809
  store i64 %127, i64* %rcx.4.reg2mem, !insn.addr !809
  store i64 %128, i64* %rdx.4.reg2mem, !insn.addr !809
  br i1 %130, label %dec_label_pc_2409, label %dec_label_pc_2425, !insn.addr !809

dec_label_pc_2425:                                ; preds = %dec_label_pc_2409
  %131 = add i64 %rsi.1.reload, ptrtoint (i16* @global_var_4 to i64), !insn.addr !810
  %132 = icmp eq i64 %rsi.1.reload, sub (i64 0, i64 add (i64 ptrtoint (i16* @global_var_4 to i64), i64 -256)), !insn.addr !811
  %133 = icmp eq i1 %132, false, !insn.addr !812
  store i64 %131, i64* %rsi.1.reg2mem, !insn.addr !812
  br i1 %133, label %dec_label_pc_2445, label %dec_label_pc_2432, !insn.addr !812

dec_label_pc_2432:                                ; preds = %dec_label_pc_2425
  %134 = and i64 %131, -65536, !insn.addr !813
  %135 = ptrtoint i32* %stack_var_-216 to i64, !insn.addr !814
  %136 = add i64 %arg4, ptrtoint (i64* @global_var_16e8 to i64), !insn.addr !815
  store i64 %134, i64* %rsi.2.reg2mem, !insn.addr !816
  br label %dec_label_pc_2496, !insn.addr !816

dec_label_pc_2445:                                ; preds = %dec_label_pc_2425, %dec_label_pc_23e1
  %rsi.1.reload = load i64, i64* %rsi.1.reg2mem
  %137 = mul i64 %rsi.1.reload, ptrtoint (i16* @global_var_4 to i64), !insn.addr !817
  %138 = mul i64 %rsi.1.reload, 4, !insn.addr !797
  %139 = add i64 %112, %138, !insn.addr !797
  %140 = trunc i64 %rsi.1.reload to i32, !insn.addr !802
  store i64 0, i64* %rax.5.reg2mem, !insn.addr !818
  store i64 %137, i64* %rcx.4.reg2mem, !insn.addr !818
  store i64 %139, i64* %rdx.4.reg2mem, !insn.addr !818
  br label %dec_label_pc_2409, !insn.addr !818

dec_label_pc_245a:                                ; preds = %dec_label_pc_245a, %dec_label_pc_2496
  %rdx.5.reload = load i64, i64* %rdx.5.reg2mem
  %rcx.5.reload = load i64, i64* %rcx.5.reg2mem
  %rax.6.reload = load i64, i64* %rax.6.reg2mem
  %141 = inttoptr i64 %rcx.5.reload to i32*, !insn.addr !819
  %142 = load i32, i32* %141, align 4, !insn.addr !819
  %143 = sub i32 %142, %163, !insn.addr !820
  %144 = mul i64 %rax.6.reload, ptrtoint (i16* @global_var_4 to i64), !insn.addr !821
  %145 = add i64 %144, %135, !insn.addr !821
  %146 = inttoptr i64 %145 to i32*, !insn.addr !821
  %147 = load i32, i32* %146, align 4, !insn.addr !821
  %148 = xor i32 %143, %147, !insn.addr !821
  %149 = inttoptr i64 %rdx.5.reload to i32*, !insn.addr !822
  store i32 %148, i32* %149, align 4, !insn.addr !822
  %150 = add i64 %rax.6.reload, ptrtoint (i32* @global_var_1 to i64), !insn.addr !823
  %151 = add i64 %rcx.5.reload, ptrtoint (i16* @global_var_4 to i64), !insn.addr !824
  %152 = add i64 %rdx.5.reload, ptrtoint (i16* @global_var_4 to i64), !insn.addr !825
  %153 = icmp eq i64 %150, ptrtoint (i16* @global_var_4 to i64), !insn.addr !826
  %154 = icmp eq i1 %153, false, !insn.addr !827
  store i64 %150, i64* %rax.6.reg2mem, !insn.addr !827
  store i64 %151, i64* %rcx.5.reg2mem, !insn.addr !827
  store i64 %152, i64* %rdx.5.reg2mem, !insn.addr !827
  br i1 %154, label %dec_label_pc_245a, label %dec_label_pc_2476, !insn.addr !827

dec_label_pc_2476:                                ; preds = %dec_label_pc_245a
  %155 = add i64 %rsi.2.reload, ptrtoint (i16* @global_var_4 to i64), !insn.addr !828
  %156 = icmp eq i64 %rsi.2.reload, sub (i64 0, i64 add (i64 ptrtoint (i16* @global_var_4 to i64), i64 -256)), !insn.addr !829
  %157 = icmp eq i1 %156, false, !insn.addr !830
  store i64 %155, i64* %rsi.2.reg2mem, !insn.addr !830
  br i1 %157, label %dec_label_pc_2496, label %dec_label_pc_2483, !insn.addr !830

dec_label_pc_2483:                                ; preds = %dec_label_pc_2476
  %158 = and i64 %155, -65536, !insn.addr !831
  %159 = ptrtoint i32* %stack_var_-232 to i64, !insn.addr !832
  %160 = add i64 %arg4, 6888, !insn.addr !833
  store i64 %158, i64* %rsi.3.reg2mem, !insn.addr !834
  br label %dec_label_pc_24e7, !insn.addr !834

dec_label_pc_2496:                                ; preds = %dec_label_pc_2476, %dec_label_pc_2432
  %rsi.2.reload = load i64, i64* %rsi.2.reg2mem
  %161 = mul i64 %rsi.2.reload, ptrtoint (i16* @global_var_4 to i64), !insn.addr !835
  %162 = add i64 %136, %161, !insn.addr !815
  %163 = trunc i64 %rsi.2.reload to i32, !insn.addr !820
  store i64 0, i64* %rax.6.reg2mem, !insn.addr !836
  store i64 %161, i64* %rcx.5.reg2mem, !insn.addr !836
  store i64 %162, i64* %rdx.5.reg2mem, !insn.addr !836
  br label %dec_label_pc_245a, !insn.addr !836

dec_label_pc_24ab:                                ; preds = %dec_label_pc_24ab, %dec_label_pc_24e7
  %rdx.6.reload = load i64, i64* %rdx.6.reg2mem
  %rcx.6.reload = load i64, i64* %rcx.6.reg2mem
  %rax.7.reload = load i64, i64* %rax.7.reg2mem
  %164 = inttoptr i64 %rcx.6.reload to i32*, !insn.addr !837
  %165 = load i32, i32* %164, align 4, !insn.addr !837
  %166 = sub i32 %165, %187, !insn.addr !838
  %167 = mul i64 %rax.7.reload, ptrtoint (i16* @global_var_4 to i64), !insn.addr !839
  %168 = add i64 %167, %159, !insn.addr !839
  %169 = inttoptr i64 %168 to i32*, !insn.addr !839
  %170 = load i32, i32* %169, align 4, !insn.addr !839
  %171 = xor i32 %166, %170, !insn.addr !839
  %172 = inttoptr i64 %rdx.6.reload to i32*, !insn.addr !840
  store i32 %171, i32* %172, align 4, !insn.addr !840
  %173 = add i64 %rax.7.reload, ptrtoint (i32* @global_var_1 to i64), !insn.addr !841
  %174 = add i64 %rcx.6.reload, ptrtoint (i16* @global_var_4 to i64), !insn.addr !842
  %175 = add i64 %rdx.6.reload, 4, !insn.addr !843
  %176 = icmp eq i64 %173, ptrtoint (i16* @global_var_4 to i64), !insn.addr !844
  %177 = icmp eq i1 %176, false, !insn.addr !845
  store i64 %173, i64* %rax.7.reg2mem, !insn.addr !845
  store i64 %174, i64* %rcx.6.reg2mem, !insn.addr !845
  store i64 %175, i64* %rdx.6.reg2mem, !insn.addr !845
  br i1 %177, label %dec_label_pc_24ab, label %dec_label_pc_24c7, !insn.addr !845

dec_label_pc_24c7:                                ; preds = %dec_label_pc_24ab
  %178 = add i64 %rsi.3.reload, ptrtoint (i16* @global_var_4 to i64), !insn.addr !846
  %179 = icmp eq i64 %rsi.3.reload, sub (i64 0, i64 add (i64 ptrtoint (i16* @global_var_4 to i64), i64 -256)), !insn.addr !847
  %180 = icmp eq i1 %179, false, !insn.addr !848
  store i64 %178, i64* %rsi.3.reg2mem, !insn.addr !848
  br i1 %180, label %dec_label_pc_24e7, label %dec_label_pc_24d4, !insn.addr !848

dec_label_pc_24d4:                                ; preds = %dec_label_pc_24c7
  %181 = and i64 %178, -65536, !insn.addr !849
  %182 = ptrtoint i32* %stack_var_-248 to i64, !insn.addr !850
  %183 = add i64 %arg4, 7912, !insn.addr !851
  store i64 %181, i64* %rsi.4.reg2mem, !insn.addr !852
  br label %dec_label_pc_2538, !insn.addr !852

dec_label_pc_24e7:                                ; preds = %dec_label_pc_24c7, %dec_label_pc_2483
  %rsi.3.reload = load i64, i64* %rsi.3.reg2mem
  %184 = mul i64 %rsi.3.reload, ptrtoint (i16* @global_var_4 to i64), !insn.addr !853
  %185 = mul i64 %rsi.3.reload, 4, !insn.addr !833
  %186 = add i64 %160, %185, !insn.addr !833
  %187 = trunc i64 %rsi.3.reload to i32, !insn.addr !838
  store i64 0, i64* %rax.7.reg2mem, !insn.addr !854
  store i64 %184, i64* %rcx.6.reg2mem, !insn.addr !854
  store i64 %186, i64* %rdx.6.reg2mem, !insn.addr !854
  br label %dec_label_pc_24ab, !insn.addr !854

dec_label_pc_24fc:                                ; preds = %dec_label_pc_24fc, %dec_label_pc_2538
  %rdx.7.reload = load i64, i64* %rdx.7.reg2mem
  %rcx.7.reload = load i64, i64* %rcx.7.reg2mem
  %rax.8.reload = load i64, i64* %rax.8.reg2mem
  %188 = inttoptr i64 %rcx.7.reload to i32*, !insn.addr !855
  %189 = load i32, i32* %188, align 4, !insn.addr !855
  %190 = sub i32 %189, %211, !insn.addr !856
  %191 = mul i64 %rax.8.reload, ptrtoint (i16* @global_var_4 to i64), !insn.addr !857
  %192 = add i64 %191, %182, !insn.addr !857
  %193 = inttoptr i64 %192 to i32*, !insn.addr !857
  %194 = load i32, i32* %193, align 4, !insn.addr !857
  %195 = xor i32 %190, %194, !insn.addr !857
  %196 = inttoptr i64 %rdx.7.reload to i32*, !insn.addr !858
  store i32 %195, i32* %196, align 4, !insn.addr !858
  %197 = add i64 %rax.8.reload, ptrtoint (i32* @global_var_1 to i64), !insn.addr !859
  %198 = add i64 %rcx.7.reload, ptrtoint (i16* @global_var_4 to i64), !insn.addr !860
  %199 = add i64 %rdx.7.reload, 4, !insn.addr !861
  %200 = icmp eq i64 %197, ptrtoint (i16* @global_var_4 to i64), !insn.addr !862
  %201 = icmp eq i1 %200, false, !insn.addr !863
  store i64 %197, i64* %rax.8.reg2mem, !insn.addr !863
  store i64 %198, i64* %rcx.7.reg2mem, !insn.addr !863
  store i64 %199, i64* %rdx.7.reg2mem, !insn.addr !863
  br i1 %201, label %dec_label_pc_24fc, label %dec_label_pc_2518, !insn.addr !863

dec_label_pc_2518:                                ; preds = %dec_label_pc_24fc
  %202 = add i64 %rsi.4.reload, ptrtoint (i16* @global_var_4 to i64), !insn.addr !864
  %203 = icmp eq i64 %rsi.4.reload, sub (i64 0, i64 add (i64 ptrtoint (i16* @global_var_4 to i64), i64 -256)), !insn.addr !865
  %204 = icmp eq i1 %203, false, !insn.addr !866
  store i64 %202, i64* %rsi.4.reg2mem, !insn.addr !866
  br i1 %204, label %dec_label_pc_2538, label %dec_label_pc_2525, !insn.addr !866

dec_label_pc_2525:                                ; preds = %dec_label_pc_2518
  %205 = and i64 %202, -65536, !insn.addr !867
  %206 = ptrtoint i32* %stack_var_-264 to i64, !insn.addr !868
  %207 = add i64 %arg4, 8936, !insn.addr !869
  store i64 %205, i64* %rsi.5.reg2mem, !insn.addr !870
  br label %dec_label_pc_2589, !insn.addr !870

dec_label_pc_2538:                                ; preds = %dec_label_pc_2518, %dec_label_pc_24d4
  %rsi.4.reload = load i64, i64* %rsi.4.reg2mem
  %208 = mul i64 %rsi.4.reload, ptrtoint (i16* @global_var_4 to i64), !insn.addr !871
  %209 = mul i64 %rsi.4.reload, 4, !insn.addr !851
  %210 = add i64 %183, %209, !insn.addr !851
  %211 = trunc i64 %rsi.4.reload to i32, !insn.addr !856
  store i64 0, i64* %rax.8.reg2mem, !insn.addr !872
  store i64 %208, i64* %rcx.7.reg2mem, !insn.addr !872
  store i64 %210, i64* %rdx.7.reg2mem, !insn.addr !872
  br label %dec_label_pc_24fc, !insn.addr !872

dec_label_pc_254d:                                ; preds = %dec_label_pc_254d, %dec_label_pc_2589
  %rdx.8.reload = load i64, i64* %rdx.8.reg2mem
  %rcx.8.reload = load i64, i64* %rcx.8.reg2mem
  %rax.9.reload = load i64, i64* %rax.9.reg2mem
  %212 = inttoptr i64 %rcx.8.reload to i32*, !insn.addr !873
  %213 = load i32, i32* %212, align 4, !insn.addr !873
  %214 = sub i32 %213, %235, !insn.addr !874
  %215 = mul i64 %rax.9.reload, ptrtoint (i16* @global_var_4 to i64), !insn.addr !875
  %216 = add i64 %215, %206, !insn.addr !875
  %217 = inttoptr i64 %216 to i32*, !insn.addr !875
  %218 = load i32, i32* %217, align 4, !insn.addr !875
  %219 = xor i32 %214, %218, !insn.addr !875
  %220 = inttoptr i64 %rdx.8.reload to i32*, !insn.addr !876
  store i32 %219, i32* %220, align 4, !insn.addr !876
  %221 = add i64 %rax.9.reload, ptrtoint (i32* @global_var_1 to i64), !insn.addr !877
  %222 = add i64 %rcx.8.reload, ptrtoint (i16* @global_var_4 to i64), !insn.addr !878
  %223 = add i64 %rdx.8.reload, 4, !insn.addr !879
  %224 = icmp eq i64 %221, ptrtoint (i16* @global_var_4 to i64), !insn.addr !880
  %225 = icmp eq i1 %224, false, !insn.addr !881
  store i64 %221, i64* %rax.9.reg2mem, !insn.addr !881
  store i64 %222, i64* %rcx.8.reg2mem, !insn.addr !881
  store i64 %223, i64* %rdx.8.reg2mem, !insn.addr !881
  br i1 %225, label %dec_label_pc_254d, label %dec_label_pc_2569, !insn.addr !881

dec_label_pc_2569:                                ; preds = %dec_label_pc_254d
  %226 = add i64 %rsi.5.reload, ptrtoint (i16* @global_var_4 to i64), !insn.addr !882
  %227 = icmp eq i64 %rsi.5.reload, sub (i64 0, i64 add (i64 ptrtoint (i16* @global_var_4 to i64), i64 -256)), !insn.addr !883
  %228 = icmp eq i1 %227, false, !insn.addr !884
  store i64 %226, i64* %rsi.5.reg2mem, !insn.addr !884
  br i1 %228, label %dec_label_pc_2589, label %dec_label_pc_2576, !insn.addr !884

dec_label_pc_2576:                                ; preds = %dec_label_pc_2569
  %229 = and i64 %226, -65536, !insn.addr !885
  %230 = ptrtoint i32* %stack_var_-280 to i64, !insn.addr !886
  %231 = add i64 %arg4, 9960, !insn.addr !887
  store i64 %229, i64* %rsi.6.reg2mem, !insn.addr !888
  br label %dec_label_pc_25da, !insn.addr !888

dec_label_pc_2589:                                ; preds = %dec_label_pc_2569, %dec_label_pc_2525
  %rsi.5.reload = load i64, i64* %rsi.5.reg2mem
  %232 = mul i64 %rsi.5.reload, ptrtoint (i16* @global_var_4 to i64), !insn.addr !889
  %233 = mul i64 %rsi.5.reload, 4, !insn.addr !869
  %234 = add i64 %207, %233, !insn.addr !869
  %235 = trunc i64 %rsi.5.reload to i32, !insn.addr !874
  store i64 0, i64* %rax.9.reg2mem, !insn.addr !890
  store i64 %232, i64* %rcx.8.reg2mem, !insn.addr !890
  store i64 %234, i64* %rdx.8.reg2mem, !insn.addr !890
  br label %dec_label_pc_254d, !insn.addr !890

dec_label_pc_259e:                                ; preds = %dec_label_pc_259e, %dec_label_pc_25da
  %rdx.9.reload = load i64, i64* %rdx.9.reg2mem
  %rcx.9.reload = load i64, i64* %rcx.9.reg2mem
  %rax.10.reload = load i64, i64* %rax.10.reg2mem
  %236 = inttoptr i64 %rcx.9.reload to i32*, !insn.addr !891
  %237 = load i32, i32* %236, align 4, !insn.addr !891
  %238 = sub i32 %237, %259, !insn.addr !892
  %239 = mul i64 %rax.10.reload, ptrtoint (i16* @global_var_4 to i64), !insn.addr !893
  %240 = add i64 %239, %230, !insn.addr !893
  %241 = inttoptr i64 %240 to i32*, !insn.addr !893
  %242 = load i32, i32* %241, align 4, !insn.addr !893
  %243 = xor i32 %238, %242, !insn.addr !893
  %244 = inttoptr i64 %rdx.9.reload to i32*, !insn.addr !894
  store i32 %243, i32* %244, align 4, !insn.addr !894
  %245 = add i64 %rax.10.reload, ptrtoint (i32* @global_var_1 to i64), !insn.addr !895
  %246 = add i64 %rcx.9.reload, ptrtoint (i16* @global_var_4 to i64), !insn.addr !896
  %247 = add i64 %rdx.9.reload, 4, !insn.addr !897
  %248 = icmp eq i64 %245, ptrtoint (i16* @global_var_4 to i64), !insn.addr !898
  %249 = icmp eq i1 %248, false, !insn.addr !899
  store i64 %245, i64* %rax.10.reg2mem, !insn.addr !899
  store i64 %246, i64* %rcx.9.reg2mem, !insn.addr !899
  store i64 %247, i64* %rdx.9.reg2mem, !insn.addr !899
  br i1 %249, label %dec_label_pc_259e, label %dec_label_pc_25ba, !insn.addr !899

dec_label_pc_25ba:                                ; preds = %dec_label_pc_259e
  %250 = add i64 %rsi.6.reload, ptrtoint (i16* @global_var_4 to i64), !insn.addr !900
  %251 = icmp eq i64 %rsi.6.reload, sub (i64 0, i64 add (i64 ptrtoint (i16* @global_var_4 to i64), i64 -256)), !insn.addr !901
  %252 = icmp eq i1 %251, false, !insn.addr !902
  store i64 %250, i64* %rsi.6.reg2mem, !insn.addr !902
  br i1 %252, label %dec_label_pc_25da, label %dec_label_pc_25c7, !insn.addr !902

dec_label_pc_25c7:                                ; preds = %dec_label_pc_25ba
  %253 = and i64 %250, -65536, !insn.addr !903
  %254 = ptrtoint i32* %stack_var_-296 to i64, !insn.addr !904
  %255 = add i64 %arg4, 10984, !insn.addr !905
  store i64 %253, i64* %rsi.7.reg2mem, !insn.addr !906
  br label %dec_label_pc_262b, !insn.addr !906

dec_label_pc_25da:                                ; preds = %dec_label_pc_25ba, %dec_label_pc_2576
  %rsi.6.reload = load i64, i64* %rsi.6.reg2mem
  %256 = mul i64 %rsi.6.reload, ptrtoint (i16* @global_var_4 to i64), !insn.addr !907
  %257 = mul i64 %rsi.6.reload, 4, !insn.addr !887
  %258 = add i64 %231, %257, !insn.addr !887
  %259 = trunc i64 %rsi.6.reload to i32, !insn.addr !892
  store i64 0, i64* %rax.10.reg2mem, !insn.addr !908
  store i64 %256, i64* %rcx.9.reg2mem, !insn.addr !908
  store i64 %258, i64* %rdx.9.reg2mem, !insn.addr !908
  br label %dec_label_pc_259e, !insn.addr !908

dec_label_pc_25ef:                                ; preds = %dec_label_pc_25ef, %dec_label_pc_262b
  %rdx.10.reload = load i64, i64* %rdx.10.reg2mem
  %rcx.10.reload = load i64, i64* %rcx.10.reg2mem
  %rax.11.reload = load i64, i64* %rax.11.reg2mem
  %260 = inttoptr i64 %rcx.10.reload to i32*, !insn.addr !909
  %261 = load i32, i32* %260, align 4, !insn.addr !909
  %262 = sub i32 %261, %283, !insn.addr !910
  %263 = mul i64 %rax.11.reload, ptrtoint (i16* @global_var_4 to i64), !insn.addr !911
  %264 = add i64 %263, %254, !insn.addr !911
  %265 = inttoptr i64 %264 to i32*, !insn.addr !911
  %266 = load i32, i32* %265, align 4, !insn.addr !911
  %267 = xor i32 %262, %266, !insn.addr !911
  %268 = inttoptr i64 %rdx.10.reload to i32*, !insn.addr !912
  store i32 %267, i32* %268, align 4, !insn.addr !912
  %269 = add i64 %rax.11.reload, ptrtoint (i32* @global_var_1 to i64), !insn.addr !913
  %270 = add i64 %rcx.10.reload, ptrtoint (i16* @global_var_4 to i64), !insn.addr !914
  %271 = add i64 %rdx.10.reload, 4, !insn.addr !915
  %272 = icmp eq i64 %269, ptrtoint (i16* @global_var_4 to i64), !insn.addr !916
  %273 = icmp eq i1 %272, false, !insn.addr !917
  store i64 %269, i64* %rax.11.reg2mem, !insn.addr !917
  store i64 %270, i64* %rcx.10.reg2mem, !insn.addr !917
  store i64 %271, i64* %rdx.10.reg2mem, !insn.addr !917
  br i1 %273, label %dec_label_pc_25ef, label %dec_label_pc_260b, !insn.addr !917

dec_label_pc_260b:                                ; preds = %dec_label_pc_25ef
  %274 = add i64 %rsi.7.reload, ptrtoint (i16* @global_var_4 to i64), !insn.addr !918
  %275 = icmp eq i64 %rsi.7.reload, sub (i64 0, i64 add (i64 ptrtoint (i16* @global_var_4 to i64), i64 -256)), !insn.addr !919
  %276 = icmp eq i1 %275, false, !insn.addr !920
  store i64 %274, i64* %rsi.7.reg2mem, !insn.addr !920
  br i1 %276, label %dec_label_pc_262b, label %dec_label_pc_2618, !insn.addr !920

dec_label_pc_2618:                                ; preds = %dec_label_pc_260b
  %277 = and i64 %274, -65536, !insn.addr !921
  %278 = ptrtoint i32* %stack_var_-312 to i64, !insn.addr !922
  %279 = add i64 %arg4, 12008, !insn.addr !923
  store i64 %277, i64* %rsi.8.reg2mem, !insn.addr !924
  br label %dec_label_pc_267c, !insn.addr !924

dec_label_pc_262b:                                ; preds = %dec_label_pc_260b, %dec_label_pc_25c7
  %rsi.7.reload = load i64, i64* %rsi.7.reg2mem
  %280 = mul i64 %rsi.7.reload, ptrtoint (i16* @global_var_4 to i64), !insn.addr !925
  %281 = mul i64 %rsi.7.reload, 4, !insn.addr !905
  %282 = add i64 %255, %281, !insn.addr !905
  %283 = trunc i64 %rsi.7.reload to i32, !insn.addr !910
  store i64 0, i64* %rax.11.reg2mem, !insn.addr !926
  store i64 %280, i64* %rcx.10.reg2mem, !insn.addr !926
  store i64 %282, i64* %rdx.10.reg2mem, !insn.addr !926
  br label %dec_label_pc_25ef, !insn.addr !926

dec_label_pc_2640:                                ; preds = %dec_label_pc_2640, %dec_label_pc_267c
  %rdx.11.reload = load i64, i64* %rdx.11.reg2mem
  %rcx.11.reload = load i64, i64* %rcx.11.reg2mem
  %rax.12.reload = load i64, i64* %rax.12.reg2mem
  %284 = inttoptr i64 %rcx.11.reload to i32*, !insn.addr !927
  %285 = load i32, i32* %284, align 4, !insn.addr !927
  %286 = sub i32 %285, %307, !insn.addr !928
  %287 = mul i64 %rax.12.reload, ptrtoint (i16* @global_var_4 to i64), !insn.addr !929
  %288 = add i64 %287, %278, !insn.addr !929
  %289 = inttoptr i64 %288 to i32*, !insn.addr !929
  %290 = load i32, i32* %289, align 4, !insn.addr !929
  %291 = xor i32 %286, %290, !insn.addr !929
  %292 = inttoptr i64 %rdx.11.reload to i32*, !insn.addr !930
  store i32 %291, i32* %292, align 4, !insn.addr !930
  %293 = add i64 %rax.12.reload, ptrtoint (i32* @global_var_1 to i64), !insn.addr !931
  %294 = add i64 %rcx.11.reload, ptrtoint (i16* @global_var_4 to i64), !insn.addr !932
  %295 = add i64 %rdx.11.reload, 4, !insn.addr !933
  %296 = icmp eq i64 %293, ptrtoint (i16* @global_var_4 to i64), !insn.addr !934
  %297 = icmp eq i1 %296, false, !insn.addr !935
  store i64 %293, i64* %rax.12.reg2mem, !insn.addr !935
  store i64 %294, i64* %rcx.11.reg2mem, !insn.addr !935
  store i64 %295, i64* %rdx.11.reg2mem, !insn.addr !935
  br i1 %297, label %dec_label_pc_2640, label %dec_label_pc_265c, !insn.addr !935

dec_label_pc_265c:                                ; preds = %dec_label_pc_2640
  %298 = add i64 %rsi.8.reload, ptrtoint (i16* @global_var_4 to i64), !insn.addr !936
  %299 = icmp eq i64 %rsi.8.reload, sub (i64 0, i64 add (i64 ptrtoint (i16* @global_var_4 to i64), i64 -256)), !insn.addr !937
  %300 = icmp eq i1 %299, false, !insn.addr !938
  store i64 %298, i64* %rsi.8.reg2mem, !insn.addr !938
  br i1 %300, label %dec_label_pc_267c, label %dec_label_pc_2669, !insn.addr !938

dec_label_pc_2669:                                ; preds = %dec_label_pc_265c
  %301 = and i64 %298, -65536, !insn.addr !939
  %302 = ptrtoint i32* %stack_var_-328 to i64, !insn.addr !940
  %303 = add i64 %arg4, 13032, !insn.addr !941
  store i64 %301, i64* %rsi.9.reg2mem, !insn.addr !942
  br label %dec_label_pc_26ba, !insn.addr !942

dec_label_pc_267c:                                ; preds = %dec_label_pc_265c, %dec_label_pc_2618
  %rsi.8.reload = load i64, i64* %rsi.8.reg2mem
  %304 = mul i64 %rsi.8.reload, ptrtoint (i16* @global_var_4 to i64), !insn.addr !943
  %305 = mul i64 %rsi.8.reload, 4, !insn.addr !923
  %306 = add i64 %279, %305, !insn.addr !923
  %307 = trunc i64 %rsi.8.reload to i32, !insn.addr !928
  store i64 0, i64* %rax.12.reg2mem, !insn.addr !944
  store i64 %304, i64* %rcx.11.reg2mem, !insn.addr !944
  store i64 %306, i64* %rdx.11.reg2mem, !insn.addr !944
  br label %dec_label_pc_2640, !insn.addr !944

dec_label_pc_2691:                                ; preds = %dec_label_pc_2691, %dec_label_pc_26ba
  %rdx.12.reload = load i64, i64* %rdx.12.reg2mem
  %rcx.12.reload = load i64, i64* %rcx.12.reg2mem
  %rax.13.reload = load i64, i64* %rax.13.reg2mem
  %308 = inttoptr i64 %rcx.12.reload to i32*, !insn.addr !945
  %309 = load i32, i32* %308, align 4, !insn.addr !945
  %310 = sub i32 %309, %327, !insn.addr !946
  %311 = mul i64 %rax.13.reload, ptrtoint (i16* @global_var_4 to i64), !insn.addr !947
  %312 = add i64 %311, %302, !insn.addr !947
  %313 = inttoptr i64 %312 to i32*, !insn.addr !947
  %314 = load i32, i32* %313, align 4, !insn.addr !947
  %315 = xor i32 %310, %314, !insn.addr !947
  %316 = inttoptr i64 %rdx.12.reload to i32*, !insn.addr !948
  store i32 %315, i32* %316, align 4, !insn.addr !948
  %317 = add i64 %rax.13.reload, ptrtoint (i32* @global_var_1 to i64), !insn.addr !949
  %318 = add i64 %rcx.12.reload, ptrtoint (i16* @global_var_4 to i64), !insn.addr !950
  %319 = add i64 %rdx.12.reload, 4, !insn.addr !951
  %320 = icmp eq i64 %317, ptrtoint (i16* @global_var_4 to i64), !insn.addr !952
  %321 = icmp eq i1 %320, false, !insn.addr !953
  store i64 %317, i64* %rax.13.reg2mem, !insn.addr !953
  store i64 %318, i64* %rcx.12.reg2mem, !insn.addr !953
  store i64 %319, i64* %rdx.12.reg2mem, !insn.addr !953
  br i1 %321, label %dec_label_pc_2691, label %dec_label_pc_26ad, !insn.addr !953

dec_label_pc_26ad:                                ; preds = %dec_label_pc_2691
  %322 = add i64 %rsi.9.reload, ptrtoint (i16* @global_var_4 to i64), !insn.addr !954
  %323 = icmp eq i64 %rsi.9.reload, sub (i64 0, i64 add (i64 ptrtoint (i16* @global_var_4 to i64), i64 -256)), !insn.addr !955
  store i64 %322, i64* %rsi.9.reg2mem, !insn.addr !956
  br i1 %323, label %dec_label_pc_26cf, label %dec_label_pc_26ba, !insn.addr !956

dec_label_pc_26ba:                                ; preds = %dec_label_pc_26ad, %dec_label_pc_2669
  %rsi.9.reload = load i64, i64* %rsi.9.reg2mem
  %324 = mul i64 %rsi.9.reload, ptrtoint (i16* @global_var_4 to i64), !insn.addr !957
  %325 = mul i64 %rsi.9.reload, 4, !insn.addr !941
  %326 = add i64 %303, %325, !insn.addr !941
  %327 = trunc i64 %rsi.9.reload to i32, !insn.addr !946
  store i64 0, i64* %rax.13.reg2mem, !insn.addr !958
  store i64 %324, i64* %rcx.12.reg2mem, !insn.addr !958
  store i64 %326, i64* %rdx.12.reg2mem, !insn.addr !958
  br label %dec_label_pc_2691, !insn.addr !958

dec_label_pc_26cf:                                ; preds = %dec_label_pc_26ad
  store i64 90835502, i64* %stack_var_-360, align 8, !insn.addr !959
  store i64 1361548656, i64* %stack_var_-392, align 8, !insn.addr !960
  store i64 1531583385, i64* %stack_var_-424, align 8, !insn.addr !961
  store i64 2104599090, i64* %stack_var_-456, align 8, !insn.addr !962
  store i64 405963859, i64* %stack_var_-488, align 8, !insn.addr !963
  store i32 -302512575, i32* %stack_var_-520, align 4, !insn.addr !964
  store i64 1818404130, i64* %stack_var_-552, align 8, !insn.addr !965
  store i64 414007060, i64* %stack_var_-584, align 8, !insn.addr !966
  store i32 -330883259, i32* %stack_var_-616, align 4, !insn.addr !967
  store i64 -1716162894, i64* %stack_var_-648, align 8, !insn.addr !968
  store i8 -92, i8* %stack_var_-88, align 1, !insn.addr !969
  %328 = ptrtoint i64* %stack_var_-360 to i64, !insn.addr !970
  %329 = add i64 %arg4, 15984, !insn.addr !971
  store i64 0, i64* %rsi.10.reg2mem, !insn.addr !972
  br label %dec_label_pc_29c5, !insn.addr !972

dec_label_pc_298a:                                ; preds = %dec_label_pc_298a, %dec_label_pc_29c5
  %rdx.13.reload = load i64, i64* %rdx.13.reg2mem
  %rcx.13.reload = load i64, i64* %rcx.13.reg2mem
  %rax.14.reload = load i64, i64* %rax.14.reg2mem
  %330 = inttoptr i64 %rcx.13.reload to i64*, !insn.addr !973
  %331 = load i64, i64* %330, align 8, !insn.addr !973
  %332 = sub i64 %331, %rsi.10.reload, !insn.addr !974
  %333 = mul i64 %rax.14.reload, ptrtoint (i8* @global_var_8 to i64), !insn.addr !975
  %334 = add i64 %333, %328, !insn.addr !975
  %335 = inttoptr i64 %334 to i64*, !insn.addr !975
  %336 = load i64, i64* %335, align 8, !insn.addr !975
  %337 = xor i64 %332, %336, !insn.addr !975
  %338 = inttoptr i64 %rdx.13.reload to i64*, !insn.addr !976
  store i64 %337, i64* %338, align 8, !insn.addr !976
  %339 = add i64 %rax.14.reload, ptrtoint (i32* @global_var_1 to i64), !insn.addr !977
  %340 = add i64 %rcx.13.reload, ptrtoint (i8* @global_var_8 to i64), !insn.addr !978
  %341 = add i64 %rdx.13.reload, 8, !insn.addr !979
  %342 = icmp eq i64 %339, ptrtoint (i16* @global_var_4 to i64), !insn.addr !980
  %343 = icmp eq i1 %342, false, !insn.addr !981
  store i64 %339, i64* %rax.14.reg2mem, !insn.addr !981
  store i64 %340, i64* %rcx.13.reg2mem, !insn.addr !981
  store i64 %341, i64* %rdx.13.reg2mem, !insn.addr !981
  br i1 %343, label %dec_label_pc_298a, label %dec_label_pc_29a9, !insn.addr !981

dec_label_pc_29a9:                                ; preds = %dec_label_pc_298a
  %344 = add i64 %rsi.10.reload, ptrtoint (i16* @global_var_4 to i64), !insn.addr !982
  %345 = icmp eq i64 %rsi.10.reload, sub (i64 0, i64 add (i64 ptrtoint (i16* @global_var_4 to i64), i64 -64)), !insn.addr !983
  %346 = icmp eq i1 %345, false, !insn.addr !984
  store i64 %344, i64* %rsi.10.reg2mem, !insn.addr !984
  br i1 %346, label %dec_label_pc_29c5, label %dec_label_pc_29b3, !insn.addr !984

dec_label_pc_29b3:                                ; preds = %dec_label_pc_29a9
  %347 = and i64 %344, -256, !insn.addr !985
  %348 = ptrtoint i64* %stack_var_-392 to i64, !insn.addr !986
  %349 = add i64 %arg4, 16496, !insn.addr !987
  store i64 %347, i64* %rsi.11.reg2mem, !insn.addr !988
  br label %dec_label_pc_2a15, !insn.addr !988

dec_label_pc_29c5:                                ; preds = %dec_label_pc_29a9, %dec_label_pc_26cf
  %rsi.10.reload = load i64, i64* %rsi.10.reg2mem
  %350 = mul i64 %rsi.10.reload, ptrtoint (i8* @global_var_8 to i64), !insn.addr !989
  %351 = mul i64 %rsi.10.reload, 8, !insn.addr !971
  %352 = add i64 %329, %351, !insn.addr !971
  store i64 0, i64* %rax.14.reg2mem, !insn.addr !990
  store i64 %350, i64* %rcx.13.reg2mem, !insn.addr !990
  store i64 %352, i64* %rdx.13.reg2mem, !insn.addr !990
  br label %dec_label_pc_298a, !insn.addr !990

dec_label_pc_29da:                                ; preds = %dec_label_pc_29da, %dec_label_pc_2a15
  %rdx.14.reload = load i64, i64* %rdx.14.reg2mem
  %rcx.14.reload = load i64, i64* %rcx.14.reg2mem
  %rax.15.reload = load i64, i64* %rax.15.reg2mem
  %353 = inttoptr i64 %rcx.14.reload to i64*, !insn.addr !991
  %354 = load i64, i64* %353, align 8, !insn.addr !991
  %355 = sub i64 %354, %rsi.11.reload, !insn.addr !992
  %356 = mul i64 %rax.15.reload, ptrtoint (i8* @global_var_8 to i64), !insn.addr !993
  %357 = add i64 %356, %348, !insn.addr !993
  %358 = inttoptr i64 %357 to i64*, !insn.addr !993
  %359 = load i64, i64* %358, align 8, !insn.addr !993
  %360 = xor i64 %355, %359, !insn.addr !993
  %361 = inttoptr i64 %rdx.14.reload to i64*, !insn.addr !994
  store i64 %360, i64* %361, align 8, !insn.addr !994
  %362 = add i64 %rax.15.reload, ptrtoint (i32* @global_var_1 to i64), !insn.addr !995
  %363 = add i64 %rcx.14.reload, ptrtoint (i8* @global_var_8 to i64), !insn.addr !996
  %364 = add i64 %rdx.14.reload, 8, !insn.addr !997
  %365 = icmp eq i64 %362, ptrtoint (i16* @global_var_4 to i64), !insn.addr !998
  %366 = icmp eq i1 %365, false, !insn.addr !999
  store i64 %362, i64* %rax.15.reg2mem, !insn.addr !999
  store i64 %363, i64* %rcx.14.reg2mem, !insn.addr !999
  store i64 %364, i64* %rdx.14.reg2mem, !insn.addr !999
  br i1 %366, label %dec_label_pc_29da, label %dec_label_pc_29f9, !insn.addr !999

dec_label_pc_29f9:                                ; preds = %dec_label_pc_29da
  %367 = add i64 %rsi.11.reload, ptrtoint (i16* @global_var_4 to i64), !insn.addr !1000
  %368 = icmp eq i64 %rsi.11.reload, sub (i64 0, i64 add (i64 ptrtoint (i16* @global_var_4 to i64), i64 -64)), !insn.addr !1001
  %369 = icmp eq i1 %368, false, !insn.addr !1002
  store i64 %367, i64* %rsi.11.reg2mem, !insn.addr !1002
  br i1 %369, label %dec_label_pc_2a15, label %dec_label_pc_2a03, !insn.addr !1002

dec_label_pc_2a03:                                ; preds = %dec_label_pc_29f9
  %370 = and i64 %367, -256, !insn.addr !1003
  %371 = ptrtoint i64* %stack_var_-424 to i64, !insn.addr !1004
  %372 = add i64 %arg4, 17008, !insn.addr !1005
  store i64 %370, i64* %rsi.12.reg2mem, !insn.addr !1006
  br label %dec_label_pc_2a65, !insn.addr !1006

dec_label_pc_2a15:                                ; preds = %dec_label_pc_29f9, %dec_label_pc_29b3
  %rsi.11.reload = load i64, i64* %rsi.11.reg2mem
  %373 = mul i64 %rsi.11.reload, ptrtoint (i8* @global_var_8 to i64), !insn.addr !1007
  %374 = mul i64 %rsi.11.reload, 8, !insn.addr !987
  %375 = add i64 %349, %374, !insn.addr !987
  store i64 0, i64* %rax.15.reg2mem, !insn.addr !1008
  store i64 %373, i64* %rcx.14.reg2mem, !insn.addr !1008
  store i64 %375, i64* %rdx.14.reg2mem, !insn.addr !1008
  br label %dec_label_pc_29da, !insn.addr !1008

dec_label_pc_2a2a:                                ; preds = %dec_label_pc_2a2a, %dec_label_pc_2a65
  %rdx.15.reload = load i64, i64* %rdx.15.reg2mem
  %rcx.15.reload = load i64, i64* %rcx.15.reg2mem
  %rax.16.reload = load i64, i64* %rax.16.reg2mem
  %376 = inttoptr i64 %rcx.15.reload to i64*, !insn.addr !1009
  %377 = load i64, i64* %376, align 8, !insn.addr !1009
  %378 = sub i64 %377, %rsi.12.reload, !insn.addr !1010
  %379 = mul i64 %rax.16.reload, ptrtoint (i8* @global_var_8 to i64), !insn.addr !1011
  %380 = add i64 %379, %371, !insn.addr !1011
  %381 = inttoptr i64 %380 to i64*, !insn.addr !1011
  %382 = load i64, i64* %381, align 8, !insn.addr !1011
  %383 = xor i64 %378, %382, !insn.addr !1011
  %384 = inttoptr i64 %rdx.15.reload to i64*, !insn.addr !1012
  store i64 %383, i64* %384, align 8, !insn.addr !1012
  %385 = add i64 %rax.16.reload, ptrtoint (i32* @global_var_1 to i64), !insn.addr !1013
  %386 = add i64 %rcx.15.reload, ptrtoint (i8* @global_var_8 to i64), !insn.addr !1014
  %387 = add i64 %rdx.15.reload, 8, !insn.addr !1015
  %388 = icmp eq i64 %385, ptrtoint (i16* @global_var_4 to i64), !insn.addr !1016
  %389 = icmp eq i1 %388, false, !insn.addr !1017
  store i64 %385, i64* %rax.16.reg2mem, !insn.addr !1017
  store i64 %386, i64* %rcx.15.reg2mem, !insn.addr !1017
  store i64 %387, i64* %rdx.15.reg2mem, !insn.addr !1017
  br i1 %389, label %dec_label_pc_2a2a, label %dec_label_pc_2a49, !insn.addr !1017

dec_label_pc_2a49:                                ; preds = %dec_label_pc_2a2a
  %390 = add i64 %rsi.12.reload, ptrtoint (i16* @global_var_4 to i64), !insn.addr !1018
  %391 = icmp eq i64 %rsi.12.reload, sub (i64 0, i64 add (i64 ptrtoint (i16* @global_var_4 to i64), i64 -64)), !insn.addr !1019
  %392 = icmp eq i1 %391, false, !insn.addr !1020
  store i64 %390, i64* %rsi.12.reg2mem, !insn.addr !1020
  br i1 %392, label %dec_label_pc_2a65, label %dec_label_pc_2a53, !insn.addr !1020

dec_label_pc_2a53:                                ; preds = %dec_label_pc_2a49
  %393 = and i64 %390, -256, !insn.addr !1021
  %394 = ptrtoint i64* %stack_var_-456 to i64, !insn.addr !1022
  %395 = add i64 %arg4, 17520, !insn.addr !1023
  store i64 %393, i64* %rsi.13.reg2mem, !insn.addr !1024
  br label %dec_label_pc_2ab5, !insn.addr !1024

dec_label_pc_2a65:                                ; preds = %dec_label_pc_2a49, %dec_label_pc_2a03
  %rsi.12.reload = load i64, i64* %rsi.12.reg2mem
  %396 = mul i64 %rsi.12.reload, ptrtoint (i8* @global_var_8 to i64), !insn.addr !1025
  %397 = mul i64 %rsi.12.reload, 8, !insn.addr !1005
  %398 = add i64 %372, %397, !insn.addr !1005
  store i64 0, i64* %rax.16.reg2mem, !insn.addr !1026
  store i64 %396, i64* %rcx.15.reg2mem, !insn.addr !1026
  store i64 %398, i64* %rdx.15.reg2mem, !insn.addr !1026
  br label %dec_label_pc_2a2a, !insn.addr !1026

dec_label_pc_2a7a:                                ; preds = %dec_label_pc_2a7a, %dec_label_pc_2ab5
  %rdx.16.reload = load i64, i64* %rdx.16.reg2mem
  %rcx.16.reload = load i64, i64* %rcx.16.reg2mem
  %rax.17.reload = load i64, i64* %rax.17.reg2mem
  %399 = inttoptr i64 %rcx.16.reload to i64*, !insn.addr !1027
  %400 = load i64, i64* %399, align 8, !insn.addr !1027
  %401 = sub i64 %400, %rsi.13.reload, !insn.addr !1028
  %402 = mul i64 %rax.17.reload, ptrtoint (i8* @global_var_8 to i64), !insn.addr !1029
  %403 = add i64 %402, %394, !insn.addr !1029
  %404 = inttoptr i64 %403 to i64*, !insn.addr !1029
  %405 = load i64, i64* %404, align 8, !insn.addr !1029
  %406 = xor i64 %401, %405, !insn.addr !1029
  %407 = inttoptr i64 %rdx.16.reload to i64*, !insn.addr !1030
  store i64 %406, i64* %407, align 8, !insn.addr !1030
  %408 = add i64 %rax.17.reload, ptrtoint (i32* @global_var_1 to i64), !insn.addr !1031
  %409 = add i64 %rcx.16.reload, ptrtoint (i8* @global_var_8 to i64), !insn.addr !1032
  %410 = add i64 %rdx.16.reload, 8, !insn.addr !1033
  %411 = icmp eq i64 %408, ptrtoint (i16* @global_var_4 to i64), !insn.addr !1034
  %412 = icmp eq i1 %411, false, !insn.addr !1035
  store i64 %408, i64* %rax.17.reg2mem, !insn.addr !1035
  store i64 %409, i64* %rcx.16.reg2mem, !insn.addr !1035
  store i64 %410, i64* %rdx.16.reg2mem, !insn.addr !1035
  br i1 %412, label %dec_label_pc_2a7a, label %dec_label_pc_2a99, !insn.addr !1035

dec_label_pc_2a99:                                ; preds = %dec_label_pc_2a7a
  %413 = add i64 %rsi.13.reload, ptrtoint (i16* @global_var_4 to i64), !insn.addr !1036
  %414 = icmp eq i64 %rsi.13.reload, sub (i64 0, i64 add (i64 ptrtoint (i16* @global_var_4 to i64), i64 -64)), !insn.addr !1037
  %415 = icmp eq i1 %414, false, !insn.addr !1038
  store i64 %413, i64* %rsi.13.reg2mem, !insn.addr !1038
  br i1 %415, label %dec_label_pc_2ab5, label %dec_label_pc_2aa3, !insn.addr !1038

dec_label_pc_2aa3:                                ; preds = %dec_label_pc_2a99
  %416 = and i64 %413, -256, !insn.addr !1039
  %417 = ptrtoint i64* %stack_var_-488 to i64, !insn.addr !1040
  %418 = add i64 %arg4, 18032, !insn.addr !1041
  store i64 %416, i64* %rsi.14.reg2mem, !insn.addr !1042
  br label %dec_label_pc_2b05, !insn.addr !1042

dec_label_pc_2ab5:                                ; preds = %dec_label_pc_2a99, %dec_label_pc_2a53
  %rsi.13.reload = load i64, i64* %rsi.13.reg2mem
  %419 = mul i64 %rsi.13.reload, ptrtoint (i8* @global_var_8 to i64), !insn.addr !1043
  %420 = mul i64 %rsi.13.reload, 8, !insn.addr !1023
  %421 = add i64 %395, %420, !insn.addr !1023
  store i64 0, i64* %rax.17.reg2mem, !insn.addr !1044
  store i64 %419, i64* %rcx.16.reg2mem, !insn.addr !1044
  store i64 %421, i64* %rdx.16.reg2mem, !insn.addr !1044
  br label %dec_label_pc_2a7a, !insn.addr !1044

dec_label_pc_2aca:                                ; preds = %dec_label_pc_2aca, %dec_label_pc_2b05
  %rdx.17.reload = load i64, i64* %rdx.17.reg2mem
  %rcx.17.reload = load i64, i64* %rcx.17.reg2mem
  %rax.18.reload = load i64, i64* %rax.18.reg2mem
  %422 = inttoptr i64 %rcx.17.reload to i64*, !insn.addr !1045
  %423 = load i64, i64* %422, align 8, !insn.addr !1045
  %424 = sub i64 %423, %rsi.14.reload, !insn.addr !1046
  %425 = mul i64 %rax.18.reload, ptrtoint (i8* @global_var_8 to i64), !insn.addr !1047
  %426 = add i64 %425, %417, !insn.addr !1047
  %427 = inttoptr i64 %426 to i64*, !insn.addr !1047
  %428 = load i64, i64* %427, align 8, !insn.addr !1047
  %429 = xor i64 %424, %428, !insn.addr !1047
  %430 = inttoptr i64 %rdx.17.reload to i64*, !insn.addr !1048
  store i64 %429, i64* %430, align 8, !insn.addr !1048
  %431 = add i64 %rax.18.reload, ptrtoint (i32* @global_var_1 to i64), !insn.addr !1049
  %432 = add i64 %rcx.17.reload, ptrtoint (i8* @global_var_8 to i64), !insn.addr !1050
  %433 = add i64 %rdx.17.reload, 8, !insn.addr !1051
  %434 = icmp eq i64 %431, ptrtoint (i16* @global_var_4 to i64), !insn.addr !1052
  %435 = icmp eq i1 %434, false, !insn.addr !1053
  store i64 %431, i64* %rax.18.reg2mem, !insn.addr !1053
  store i64 %432, i64* %rcx.17.reg2mem, !insn.addr !1053
  store i64 %433, i64* %rdx.17.reg2mem, !insn.addr !1053
  br i1 %435, label %dec_label_pc_2aca, label %dec_label_pc_2ae9, !insn.addr !1053

dec_label_pc_2ae9:                                ; preds = %dec_label_pc_2aca
  %436 = add i64 %rsi.14.reload, ptrtoint (i16* @global_var_4 to i64), !insn.addr !1054
  %437 = icmp eq i64 %rsi.14.reload, sub (i64 0, i64 add (i64 ptrtoint (i16* @global_var_4 to i64), i64 -64)), !insn.addr !1055
  %438 = icmp eq i1 %437, false, !insn.addr !1056
  store i64 %436, i64* %rsi.14.reg2mem, !insn.addr !1056
  br i1 %438, label %dec_label_pc_2b05, label %dec_label_pc_2af3, !insn.addr !1056

dec_label_pc_2af3:                                ; preds = %dec_label_pc_2ae9
  %439 = and i64 %436, -256, !insn.addr !1057
  %440 = ptrtoint i32* %stack_var_-520 to i64, !insn.addr !1058
  %441 = add i64 %arg4, 18544, !insn.addr !1059
  store i64 %439, i64* %rsi.15.reg2mem, !insn.addr !1060
  br label %dec_label_pc_2b55, !insn.addr !1060

dec_label_pc_2b05:                                ; preds = %dec_label_pc_2ae9, %dec_label_pc_2aa3
  %rsi.14.reload = load i64, i64* %rsi.14.reg2mem
  %442 = mul i64 %rsi.14.reload, ptrtoint (i8* @global_var_8 to i64), !insn.addr !1061
  %443 = mul i64 %rsi.14.reload, 8, !insn.addr !1041
  %444 = add i64 %418, %443, !insn.addr !1041
  store i64 0, i64* %rax.18.reg2mem, !insn.addr !1062
  store i64 %442, i64* %rcx.17.reg2mem, !insn.addr !1062
  store i64 %444, i64* %rdx.17.reg2mem, !insn.addr !1062
  br label %dec_label_pc_2aca, !insn.addr !1062

dec_label_pc_2b1a:                                ; preds = %dec_label_pc_2b1a, %dec_label_pc_2b55
  %rdx.18.reload = load i64, i64* %rdx.18.reg2mem
  %rcx.18.reload = load i64, i64* %rcx.18.reg2mem
  %rax.19.reload = load i64, i64* %rax.19.reg2mem
  %445 = inttoptr i64 %rcx.18.reload to i64*, !insn.addr !1063
  %446 = load i64, i64* %445, align 8, !insn.addr !1063
  %447 = sub i64 %446, %rsi.15.reload, !insn.addr !1064
  %448 = mul i64 %rax.19.reload, ptrtoint (i8* @global_var_8 to i64), !insn.addr !1065
  %449 = add i64 %448, %440, !insn.addr !1065
  %450 = inttoptr i64 %449 to i64*, !insn.addr !1065
  %451 = load i64, i64* %450, align 8, !insn.addr !1065
  %452 = xor i64 %447, %451, !insn.addr !1065
  %453 = inttoptr i64 %rdx.18.reload to i64*, !insn.addr !1066
  store i64 %452, i64* %453, align 8, !insn.addr !1066
  %454 = add i64 %rax.19.reload, ptrtoint (i32* @global_var_1 to i64), !insn.addr !1067
  %455 = add i64 %rcx.18.reload, ptrtoint (i8* @global_var_8 to i64), !insn.addr !1068
  %456 = add i64 %rdx.18.reload, 8, !insn.addr !1069
  %457 = icmp eq i64 %454, ptrtoint (i16* @global_var_4 to i64), !insn.addr !1070
  %458 = icmp eq i1 %457, false, !insn.addr !1071
  store i64 %454, i64* %rax.19.reg2mem, !insn.addr !1071
  store i64 %455, i64* %rcx.18.reg2mem, !insn.addr !1071
  store i64 %456, i64* %rdx.18.reg2mem, !insn.addr !1071
  br i1 %458, label %dec_label_pc_2b1a, label %dec_label_pc_2b39, !insn.addr !1071

dec_label_pc_2b39:                                ; preds = %dec_label_pc_2b1a
  %459 = add i64 %rsi.15.reload, ptrtoint (i16* @global_var_4 to i64), !insn.addr !1072
  %460 = icmp eq i64 %rsi.15.reload, sub (i64 0, i64 add (i64 ptrtoint (i16* @global_var_4 to i64), i64 -64)), !insn.addr !1073
  %461 = icmp eq i1 %460, false, !insn.addr !1074
  store i64 %459, i64* %rsi.15.reg2mem, !insn.addr !1074
  br i1 %461, label %dec_label_pc_2b55, label %dec_label_pc_2b43, !insn.addr !1074

dec_label_pc_2b43:                                ; preds = %dec_label_pc_2b39
  %462 = and i64 %459, -256, !insn.addr !1075
  %463 = ptrtoint i64* %stack_var_-552 to i64, !insn.addr !1076
  %464 = add i64 %arg4, 19056, !insn.addr !1077
  store i64 %462, i64* %rsi.16.reg2mem, !insn.addr !1078
  br label %dec_label_pc_2ba5, !insn.addr !1078

dec_label_pc_2b55:                                ; preds = %dec_label_pc_2b39, %dec_label_pc_2af3
  %rsi.15.reload = load i64, i64* %rsi.15.reg2mem
  %465 = mul i64 %rsi.15.reload, ptrtoint (i8* @global_var_8 to i64), !insn.addr !1079
  %466 = mul i64 %rsi.15.reload, 8, !insn.addr !1059
  %467 = add i64 %441, %466, !insn.addr !1059
  store i64 0, i64* %rax.19.reg2mem, !insn.addr !1080
  store i64 %465, i64* %rcx.18.reg2mem, !insn.addr !1080
  store i64 %467, i64* %rdx.18.reg2mem, !insn.addr !1080
  br label %dec_label_pc_2b1a, !insn.addr !1080

dec_label_pc_2b6a:                                ; preds = %dec_label_pc_2b6a, %dec_label_pc_2ba5
  %rdx.19.reload = load i64, i64* %rdx.19.reg2mem
  %rcx.19.reload = load i64, i64* %rcx.19.reg2mem
  %rax.20.reload = load i64, i64* %rax.20.reg2mem
  %468 = inttoptr i64 %rcx.19.reload to i64*, !insn.addr !1081
  %469 = load i64, i64* %468, align 8, !insn.addr !1081
  %470 = sub i64 %469, %rsi.16.reload, !insn.addr !1082
  %471 = mul i64 %rax.20.reload, ptrtoint (i8* @global_var_8 to i64), !insn.addr !1083
  %472 = add i64 %471, %463, !insn.addr !1083
  %473 = inttoptr i64 %472 to i64*, !insn.addr !1083
  %474 = load i64, i64* %473, align 8, !insn.addr !1083
  %475 = xor i64 %470, %474, !insn.addr !1083
  %476 = inttoptr i64 %rdx.19.reload to i64*, !insn.addr !1084
  store i64 %475, i64* %476, align 8, !insn.addr !1084
  %477 = add i64 %rax.20.reload, ptrtoint (i32* @global_var_1 to i64), !insn.addr !1085
  %478 = add i64 %rcx.19.reload, ptrtoint (i8* @global_var_8 to i64), !insn.addr !1086
  %479 = add i64 %rdx.19.reload, 8, !insn.addr !1087
  %480 = icmp eq i64 %477, ptrtoint (i16* @global_var_4 to i64), !insn.addr !1088
  %481 = icmp eq i1 %480, false, !insn.addr !1089
  store i64 %477, i64* %rax.20.reg2mem, !insn.addr !1089
  store i64 %478, i64* %rcx.19.reg2mem, !insn.addr !1089
  store i64 %479, i64* %rdx.19.reg2mem, !insn.addr !1089
  br i1 %481, label %dec_label_pc_2b6a, label %dec_label_pc_2b89, !insn.addr !1089

dec_label_pc_2b89:                                ; preds = %dec_label_pc_2b6a
  %482 = add i64 %rsi.16.reload, ptrtoint (i16* @global_var_4 to i64), !insn.addr !1090
  %483 = icmp eq i64 %rsi.16.reload, sub (i64 0, i64 add (i64 ptrtoint (i16* @global_var_4 to i64), i64 -64)), !insn.addr !1091
  %484 = icmp eq i1 %483, false, !insn.addr !1092
  store i64 %482, i64* %rsi.16.reg2mem, !insn.addr !1092
  br i1 %484, label %dec_label_pc_2ba5, label %dec_label_pc_2b93, !insn.addr !1092

dec_label_pc_2b93:                                ; preds = %dec_label_pc_2b89
  %485 = and i64 %482, -256, !insn.addr !1093
  %486 = ptrtoint i64* %stack_var_-584 to i64, !insn.addr !1094
  %487 = add i64 %arg4, 19568, !insn.addr !1095
  store i64 %485, i64* %rsi.17.reg2mem, !insn.addr !1096
  br label %dec_label_pc_2bf5, !insn.addr !1096

dec_label_pc_2ba5:                                ; preds = %dec_label_pc_2b89, %dec_label_pc_2b43
  %rsi.16.reload = load i64, i64* %rsi.16.reg2mem
  %488 = mul i64 %rsi.16.reload, ptrtoint (i8* @global_var_8 to i64), !insn.addr !1097
  %489 = mul i64 %rsi.16.reload, 8, !insn.addr !1077
  %490 = add i64 %464, %489, !insn.addr !1077
  store i64 0, i64* %rax.20.reg2mem, !insn.addr !1098
  store i64 %488, i64* %rcx.19.reg2mem, !insn.addr !1098
  store i64 %490, i64* %rdx.19.reg2mem, !insn.addr !1098
  br label %dec_label_pc_2b6a, !insn.addr !1098

dec_label_pc_2bba:                                ; preds = %dec_label_pc_2bba, %dec_label_pc_2bf5
  %rdx.20.reload = load i64, i64* %rdx.20.reg2mem
  %rcx.20.reload = load i64, i64* %rcx.20.reg2mem
  %rax.21.reload = load i64, i64* %rax.21.reg2mem
  %491 = inttoptr i64 %rcx.20.reload to i64*, !insn.addr !1099
  %492 = load i64, i64* %491, align 8, !insn.addr !1099
  %493 = sub i64 %492, %rsi.17.reload, !insn.addr !1100
  %494 = mul i64 %rax.21.reload, ptrtoint (i8* @global_var_8 to i64), !insn.addr !1101
  %495 = add i64 %494, %486, !insn.addr !1101
  %496 = inttoptr i64 %495 to i64*, !insn.addr !1101
  %497 = load i64, i64* %496, align 8, !insn.addr !1101
  %498 = xor i64 %493, %497, !insn.addr !1101
  %499 = inttoptr i64 %rdx.20.reload to i64*, !insn.addr !1102
  store i64 %498, i64* %499, align 8, !insn.addr !1102
  %500 = add i64 %rax.21.reload, ptrtoint (i32* @global_var_1 to i64), !insn.addr !1103
  %501 = add i64 %rcx.20.reload, ptrtoint (i8* @global_var_8 to i64), !insn.addr !1104
  %502 = add i64 %rdx.20.reload, 8, !insn.addr !1105
  %503 = icmp eq i64 %500, ptrtoint (i16* @global_var_4 to i64), !insn.addr !1106
  %504 = icmp eq i1 %503, false, !insn.addr !1107
  store i64 %500, i64* %rax.21.reg2mem, !insn.addr !1107
  store i64 %501, i64* %rcx.20.reg2mem, !insn.addr !1107
  store i64 %502, i64* %rdx.20.reg2mem, !insn.addr !1107
  br i1 %504, label %dec_label_pc_2bba, label %dec_label_pc_2bd9, !insn.addr !1107

dec_label_pc_2bd9:                                ; preds = %dec_label_pc_2bba
  %505 = add i64 %rsi.17.reload, ptrtoint (i16* @global_var_4 to i64), !insn.addr !1108
  %506 = icmp eq i64 %rsi.17.reload, sub (i64 0, i64 add (i64 ptrtoint (i16* @global_var_4 to i64), i64 -64)), !insn.addr !1109
  %507 = icmp eq i1 %506, false, !insn.addr !1110
  store i64 %505, i64* %rsi.17.reg2mem, !insn.addr !1110
  br i1 %507, label %dec_label_pc_2bf5, label %dec_label_pc_2be3, !insn.addr !1110

dec_label_pc_2be3:                                ; preds = %dec_label_pc_2bd9
  %508 = and i64 %505, -256, !insn.addr !1111
  %509 = ptrtoint i32* %stack_var_-616 to i64, !insn.addr !1112
  %510 = add i64 %arg4, 20080, !insn.addr !1113
  store i64 %508, i64* %rsi.18.reg2mem, !insn.addr !1114
  br label %dec_label_pc_2c45, !insn.addr !1114

dec_label_pc_2bf5:                                ; preds = %dec_label_pc_2bd9, %dec_label_pc_2b93
  %rsi.17.reload = load i64, i64* %rsi.17.reg2mem
  %511 = mul i64 %rsi.17.reload, ptrtoint (i8* @global_var_8 to i64), !insn.addr !1115
  %512 = mul i64 %rsi.17.reload, 8, !insn.addr !1095
  %513 = add i64 %487, %512, !insn.addr !1095
  store i64 0, i64* %rax.21.reg2mem, !insn.addr !1116
  store i64 %511, i64* %rcx.20.reg2mem, !insn.addr !1116
  store i64 %513, i64* %rdx.20.reg2mem, !insn.addr !1116
  br label %dec_label_pc_2bba, !insn.addr !1116

dec_label_pc_2c0a:                                ; preds = %dec_label_pc_2c0a, %dec_label_pc_2c45
  %rdx.21.reload = load i64, i64* %rdx.21.reg2mem
  %rcx.21.reload = load i64, i64* %rcx.21.reg2mem
  %rax.22.reload = load i64, i64* %rax.22.reg2mem
  %514 = inttoptr i64 %rcx.21.reload to i64*, !insn.addr !1117
  %515 = load i64, i64* %514, align 8, !insn.addr !1117
  %516 = sub i64 %515, %rsi.18.reload, !insn.addr !1118
  %517 = mul i64 %rax.22.reload, ptrtoint (i8* @global_var_8 to i64), !insn.addr !1119
  %518 = add i64 %517, %509, !insn.addr !1119
  %519 = inttoptr i64 %518 to i64*, !insn.addr !1119
  %520 = load i64, i64* %519, align 8, !insn.addr !1119
  %521 = xor i64 %516, %520, !insn.addr !1119
  %522 = inttoptr i64 %rdx.21.reload to i64*, !insn.addr !1120
  store i64 %521, i64* %522, align 8, !insn.addr !1120
  %523 = add i64 %rax.22.reload, ptrtoint (i32* @global_var_1 to i64), !insn.addr !1121
  %524 = add i64 %rcx.21.reload, ptrtoint (i8* @global_var_8 to i64), !insn.addr !1122
  %525 = add i64 %rdx.21.reload, 8, !insn.addr !1123
  %526 = icmp eq i64 %523, ptrtoint (i16* @global_var_4 to i64), !insn.addr !1124
  %527 = icmp eq i1 %526, false, !insn.addr !1125
  store i64 %523, i64* %rax.22.reg2mem, !insn.addr !1125
  store i64 %524, i64* %rcx.21.reg2mem, !insn.addr !1125
  store i64 %525, i64* %rdx.21.reg2mem, !insn.addr !1125
  br i1 %527, label %dec_label_pc_2c0a, label %dec_label_pc_2c29, !insn.addr !1125

dec_label_pc_2c29:                                ; preds = %dec_label_pc_2c0a
  %528 = add i64 %rsi.18.reload, ptrtoint (i16* @global_var_4 to i64), !insn.addr !1126
  %529 = icmp eq i64 %528, ptrtoint (i8* @global_var_10 to i64), !insn.addr !1127
  %530 = icmp eq i1 %529, false, !insn.addr !1128
  store i64 %528, i64* %rsi.18.reg2mem, !insn.addr !1128
  br i1 %530, label %dec_label_pc_2c45, label %dec_label_pc_2c33, !insn.addr !1128

dec_label_pc_2c33:                                ; preds = %dec_label_pc_2c29
  %531 = and i64 %528, -256, !insn.addr !1129
  %532 = ptrtoint i64* %stack_var_-648 to i64, !insn.addr !1130
  %533 = add i64 %arg4, 20208, !insn.addr !1131
  store i64 %531, i64* %rsi.19.reg2mem, !insn.addr !1132
  br label %dec_label_pc_2c95, !insn.addr !1132

dec_label_pc_2c45:                                ; preds = %dec_label_pc_2c29, %dec_label_pc_2be3
  %rsi.18.reload = load i64, i64* %rsi.18.reg2mem
  %534 = mul i64 %rsi.18.reload, ptrtoint (i8* @global_var_8 to i64), !insn.addr !1133
  %535 = mul i64 %rsi.18.reload, 8, !insn.addr !1113
  %536 = add i64 %510, %535, !insn.addr !1113
  store i64 0, i64* %rax.22.reg2mem, !insn.addr !1134
  store i64 %534, i64* %rcx.21.reg2mem, !insn.addr !1134
  store i64 %536, i64* %rdx.21.reg2mem, !insn.addr !1134
  br label %dec_label_pc_2c0a, !insn.addr !1134

dec_label_pc_2c5a:                                ; preds = %dec_label_pc_2c5a, %dec_label_pc_2c95
  %rdx.22.reload = load i64, i64* %rdx.22.reg2mem
  %rcx.22.reload = load i64, i64* %rcx.22.reg2mem
  %rax.23.reload = load i64, i64* %rax.23.reg2mem
  %537 = inttoptr i64 %rcx.22.reload to i64*, !insn.addr !1135
  %538 = load i64, i64* %537, align 8, !insn.addr !1135
  %539 = sub i64 %538, %rsi.19.reload, !insn.addr !1136
  %540 = mul i64 %rax.23.reload, ptrtoint (i8* @global_var_8 to i64), !insn.addr !1137
  %541 = add i64 %540, %532, !insn.addr !1137
  %542 = inttoptr i64 %541 to i64*, !insn.addr !1137
  %543 = load i64, i64* %542, align 8, !insn.addr !1137
  %544 = xor i64 %539, %543, !insn.addr !1137
  %545 = inttoptr i64 %rdx.22.reload to i64*, !insn.addr !1138
  store i64 %544, i64* %545, align 8, !insn.addr !1138
  %546 = add i64 %rax.23.reload, ptrtoint (i32* @global_var_1 to i64), !insn.addr !1139
  %547 = add i64 %rcx.22.reload, ptrtoint (i8* @global_var_8 to i64), !insn.addr !1140
  %548 = add i64 %rdx.22.reload, 8, !insn.addr !1141
  %549 = icmp eq i64 %546, ptrtoint (i16* @global_var_4 to i64), !insn.addr !1142
  %550 = icmp eq i1 %549, false, !insn.addr !1143
  store i64 %546, i64* %rax.23.reg2mem, !insn.addr !1143
  store i64 %547, i64* %rcx.22.reg2mem, !insn.addr !1143
  store i64 %548, i64* %rdx.22.reg2mem, !insn.addr !1143
  br i1 %550, label %dec_label_pc_2c5a, label %dec_label_pc_2c79, !insn.addr !1143

dec_label_pc_2c79:                                ; preds = %dec_label_pc_2c5a
  %551 = add i64 %rsi.19.reload, ptrtoint (i16* @global_var_4 to i64), !insn.addr !1144
  %552 = icmp eq i64 %551, ptrtoint (i8* @global_var_10 to i64), !insn.addr !1145
  %553 = icmp eq i1 %552, false, !insn.addr !1146
  store i64 %551, i64* %rsi.19.reg2mem, !insn.addr !1146
  br i1 %553, label %dec_label_pc_2c95, label %dec_label_pc_2c83, !insn.addr !1146

dec_label_pc_2c83:                                ; preds = %dec_label_pc_2c79
  %554 = ptrtoint i8* %stack_var_-88 to i64, !insn.addr !1147
  %555 = add i64 %arg4, 21928, !insn.addr !1148
  store i64 0, i64* %r8.3.reg2mem, !insn.addr !1149
  br label %dec_label_pc_2cd6, !insn.addr !1149

dec_label_pc_2c95:                                ; preds = %dec_label_pc_2c79, %dec_label_pc_2c33
  %rsi.19.reload = load i64, i64* %rsi.19.reg2mem
  %556 = mul i64 %rsi.19.reload, ptrtoint (i8* @global_var_8 to i64), !insn.addr !1150
  %557 = mul i64 %rsi.19.reload, 8, !insn.addr !1131
  %558 = add i64 %533, %557, !insn.addr !1131
  store i64 0, i64* %rax.23.reg2mem, !insn.addr !1151
  store i64 %556, i64* %rcx.22.reg2mem, !insn.addr !1151
  store i64 %558, i64* %rdx.22.reg2mem, !insn.addr !1151
  br label %dec_label_pc_2c5a, !insn.addr !1151

dec_label_pc_2caa:                                ; preds = %dec_label_pc_2caa, %dec_label_pc_2cd6
  %rdx.23.reload = load i64, i64* %rdx.23.reg2mem
  %rcx.23.reload = load i64, i64* %rcx.23.reg2mem
  %rax.24.reload = load i64, i64* %rax.24.reg2mem
  %559 = inttoptr i64 %rcx.23.reload to i8*, !insn.addr !1152
  %560 = load i8, i8* %559, align 1, !insn.addr !1152
  %561 = trunc i64 %rax.24.reload to i8, !insn.addr !1153
  %562 = sub i8 %560, %561, !insn.addr !1153
  %563 = mul i64 %rax.24.reload, ptrtoint (i32* @global_var_1 to i64), !insn.addr !1154
  %564 = add i64 %563, %554, !insn.addr !1154
  %565 = inttoptr i64 %564 to i8*, !insn.addr !1154
  %566 = load i8, i8* %565, align 1, !insn.addr !1154
  %567 = xor i8 %562, %566, !insn.addr !1154
  %568 = inttoptr i64 %rdx.23.reload to i8*, !insn.addr !1155
  store i8 %567, i8* %568, align 1, !insn.addr !1155
  %569 = add i64 %rax.24.reload, ptrtoint (i32* @global_var_1 to i64), !insn.addr !1156
  %570 = add i64 %rcx.23.reload, ptrtoint (i32* @global_var_1 to i64), !insn.addr !1157
  %571 = add i64 %rdx.23.reload, 1, !insn.addr !1158
  %572 = icmp eq i64 %569, ptrtoint (i8* @global_var_8 to i64), !insn.addr !1159
  %573 = icmp eq i1 %572, false, !insn.addr !1160
  store i64 %569, i64* %rax.24.reg2mem, !insn.addr !1160
  store i64 %570, i64* %rcx.23.reg2mem, !insn.addr !1160
  store i64 %571, i64* %rdx.23.reg2mem, !insn.addr !1160
  br i1 %573, label %dec_label_pc_2caa, label %dec_label_pc_2cc9, !insn.addr !1160

dec_label_pc_2cc9:                                ; preds = %dec_label_pc_2caa
  %574 = add i64 %r8.3.reload, ptrtoint (i8* @global_var_8 to i64), !insn.addr !1161
  %575 = icmp eq i64 %r8.3.reload, sub (i64 0, i64 add (i64 ptrtoint (i8* @global_var_8 to i64), i64 -192)), !insn.addr !1162
  store i64 %574, i64* %r8.3.reg2mem, !insn.addr !1163
  br i1 %575, label %dec_label_pc_2cea, label %dec_label_pc_2cd6, !insn.addr !1163

dec_label_pc_2cd6:                                ; preds = %dec_label_pc_2cc9, %dec_label_pc_2c83
  %r8.3.reload = load i64, i64* %r8.3.reg2mem
  %576 = add i64 %555, %r8.3.reload, !insn.addr !1148
  store i64 0, i64* %rax.24.reg2mem, !insn.addr !1164
  store i64 %r8.3.reload, i64* %rcx.23.reg2mem, !insn.addr !1164
  store i64 %576, i64* %rdx.23.reg2mem, !insn.addr !1164
  br label %dec_label_pc_2caa, !insn.addr !1164

dec_label_pc_2cea:                                ; preds = %dec_label_pc_2cc9
  store i8 65, i8* %stack_var_-104, align 1, !insn.addr !1165
  store i8 104, i8* %stack_var_-120, align 1, !insn.addr !1166
  store i8 85, i8* %stack_var_-136, align 1, !insn.addr !1167
  store i8 96, i8* %stack_var_-152, align 1, !insn.addr !1168
  %577 = ptrtoint i8* %stack_var_-104 to i64, !insn.addr !1169
  %578 = add i64 %arg4, 14888, !insn.addr !1170
  store i64 0, i64* %rdi.0.reg2mem, !insn.addr !1171
  br label %dec_label_pc_2ed3, !insn.addr !1171

dec_label_pc_2e9b:                                ; preds = %dec_label_pc_2e9b, %dec_label_pc_2ed3
  %rdx.24.reload = load i64, i64* %rdx.24.reg2mem
  %rcx.24.reload = load i64, i64* %rcx.24.reg2mem
  %rax.25.reload = load i64, i64* %rax.25.reg2mem
  %579 = inttoptr i64 %rcx.24.reload to i8*, !insn.addr !1172
  %580 = load i8, i8* %579, align 1, !insn.addr !1172
  %581 = sub i8 %580, %600, !insn.addr !1173
  %582 = mul i64 %rax.25.reload, ptrtoint (i32* @global_var_1 to i64), !insn.addr !1174
  %583 = add i64 %582, %577, !insn.addr !1174
  %584 = inttoptr i64 %583 to i8*, !insn.addr !1174
  %585 = load i8, i8* %584, align 1, !insn.addr !1174
  %586 = xor i8 %581, %585, !insn.addr !1174
  %587 = inttoptr i64 %rdx.24.reload to i8*, !insn.addr !1175
  store i8 %586, i8* %587, align 1, !insn.addr !1175
  %588 = add i64 %rax.25.reload, ptrtoint (i32* @global_var_1 to i64), !insn.addr !1176
  %589 = add i64 %rcx.24.reload, ptrtoint (i32* @global_var_1 to i64), !insn.addr !1177
  %590 = add i64 %rdx.24.reload, 1, !insn.addr !1178
  %591 = icmp eq i64 %588, ptrtoint (i8* @global_var_10 to i64), !insn.addr !1179
  %592 = icmp eq i1 %591, false, !insn.addr !1180
  store i64 %588, i64* %rax.25.reg2mem, !insn.addr !1180
  store i64 %589, i64* %rcx.24.reg2mem, !insn.addr !1180
  store i64 %590, i64* %rdx.24.reg2mem, !insn.addr !1180
  br i1 %592, label %dec_label_pc_2e9b, label %dec_label_pc_2eba, !insn.addr !1180

dec_label_pc_2eba:                                ; preds = %dec_label_pc_2e9b
  %593 = add i64 %rdi.0.reload, ptrtoint (i8* @global_var_10 to i64), !insn.addr !1181
  %594 = icmp eq i64 %593, ptrtoint (i32** @global_var_20 to i64), !insn.addr !1182
  %595 = icmp eq i1 %594, false, !insn.addr !1183
  store i64 %593, i64* %rdi.0.reg2mem, !insn.addr !1183
  br i1 %595, label %dec_label_pc_2ed3, label %dec_label_pc_2ec4, !insn.addr !1183

dec_label_pc_2ec4:                                ; preds = %dec_label_pc_2eba
  %596 = and i64 %593, -256, !insn.addr !1184
  %597 = ptrtoint i8* %stack_var_-120 to i64, !insn.addr !1185
  %598 = add i64 %arg4, 14920, !insn.addr !1186
  store i64 %596, i64* %rdi.1.reg2mem, !insn.addr !1187
  br label %dec_label_pc_2f23, !insn.addr !1187

dec_label_pc_2ed3:                                ; preds = %dec_label_pc_2eba, %dec_label_pc_2cea
  %rdi.0.reload = load i64, i64* %rdi.0.reg2mem
  %599 = add i64 %578, %rdi.0.reload, !insn.addr !1170
  %600 = trunc i64 %rdi.0.reload to i8, !insn.addr !1173
  store i64 0, i64* %rax.25.reg2mem, !insn.addr !1188
  store i64 %rdi.0.reload, i64* %rcx.24.reg2mem, !insn.addr !1188
  store i64 %599, i64* %rdx.24.reg2mem, !insn.addr !1188
  br label %dec_label_pc_2e9b, !insn.addr !1188

dec_label_pc_2ee7:                                ; preds = %dec_label_pc_2ee7, %dec_label_pc_2f23
  %rdx.25.reload = load i64, i64* %rdx.25.reg2mem
  %rcx.25.reload = load i64, i64* %rcx.25.reg2mem
  %rax.26.reload = load i64, i64* %rax.26.reg2mem
  %601 = inttoptr i64 %rcx.25.reload to i8*, !insn.addr !1189
  %602 = load i8, i8* %601, align 1, !insn.addr !1189
  %603 = sub i8 %602, %622, !insn.addr !1190
  %604 = mul i64 %rax.26.reload, ptrtoint (i32* @global_var_1 to i64), !insn.addr !1191
  %605 = add i64 %604, %597, !insn.addr !1191
  %606 = inttoptr i64 %605 to i8*, !insn.addr !1191
  %607 = load i8, i8* %606, align 1, !insn.addr !1191
  %608 = xor i8 %603, %607, !insn.addr !1191
  %609 = inttoptr i64 %rdx.25.reload to i8*, !insn.addr !1192
  store i8 %608, i8* %609, align 1, !insn.addr !1192
  %610 = add i64 %rax.26.reload, ptrtoint (i32* @global_var_1 to i64), !insn.addr !1193
  %611 = add i64 %rcx.25.reload, ptrtoint (i32* @global_var_1 to i64), !insn.addr !1194
  %612 = add i64 %rdx.25.reload, 1, !insn.addr !1195
  %613 = icmp eq i64 %610, ptrtoint (i8* @global_var_10 to i64), !insn.addr !1196
  %614 = icmp eq i1 %613, false, !insn.addr !1197
  store i64 %610, i64* %rax.26.reg2mem, !insn.addr !1197
  store i64 %611, i64* %rcx.25.reg2mem, !insn.addr !1197
  store i64 %612, i64* %rdx.25.reg2mem, !insn.addr !1197
  br i1 %614, label %dec_label_pc_2ee7, label %dec_label_pc_2f06, !insn.addr !1197

dec_label_pc_2f06:                                ; preds = %dec_label_pc_2ee7
  %615 = add i64 %rdi.1.reload, ptrtoint (i8* @global_var_10 to i64), !insn.addr !1198
  %616 = icmp eq i64 %rdi.1.reload, sub (i64 0, i64 add (i64 ptrtoint (i8* @global_var_10 to i64), i64 -256)), !insn.addr !1199
  %617 = icmp eq i1 %616, false, !insn.addr !1200
  store i64 %615, i64* %rdi.1.reg2mem, !insn.addr !1200
  br i1 %617, label %dec_label_pc_2f23, label %dec_label_pc_2f13, !insn.addr !1200

dec_label_pc_2f13:                                ; preds = %dec_label_pc_2f06
  %618 = and i64 %615, -65536, !insn.addr !1201
  %619 = ptrtoint i8* %stack_var_-136 to i64, !insn.addr !1202
  %620 = add i64 %arg4, 15176, !insn.addr !1203
  store i64 %618, i64* %rdi.2.reg2mem, !insn.addr !1204
  br label %dec_label_pc_2f76, !insn.addr !1204

dec_label_pc_2f23:                                ; preds = %dec_label_pc_2f06, %dec_label_pc_2ec4
  %rdi.1.reload = load i64, i64* %rdi.1.reg2mem
  %621 = add i64 %598, %rdi.1.reload, !insn.addr !1186
  %622 = trunc i64 %rdi.1.reload to i8, !insn.addr !1190
  store i64 0, i64* %rax.26.reg2mem, !insn.addr !1205
  store i64 %rdi.1.reload, i64* %rcx.25.reg2mem, !insn.addr !1205
  store i64 %621, i64* %rdx.25.reg2mem, !insn.addr !1205
  br label %dec_label_pc_2ee7, !insn.addr !1205

dec_label_pc_2f37:                                ; preds = %dec_label_pc_2f37, %dec_label_pc_2f76
  %rdx.26.reload = load i64, i64* %rdx.26.reg2mem
  %rcx.26.reload = load i64, i64* %rcx.26.reg2mem
  %rax.27.reload = load i64, i64* %rax.27.reg2mem
  %623 = inttoptr i64 %rcx.26.reload to i8*, !insn.addr !1206
  %624 = load i8, i8* %623, align 1, !insn.addr !1206
  %625 = sub i8 %624, %644, !insn.addr !1207
  %626 = mul i64 %rax.27.reload, ptrtoint (i32* @global_var_1 to i64), !insn.addr !1208
  %627 = add i64 %626, %619, !insn.addr !1208
  %628 = inttoptr i64 %627 to i8*, !insn.addr !1208
  %629 = load i8, i8* %628, align 1, !insn.addr !1208
  %630 = xor i8 %625, %629, !insn.addr !1208
  %631 = inttoptr i64 %rdx.26.reload to i8*, !insn.addr !1209
  store i8 %630, i8* %631, align 1, !insn.addr !1209
  %632 = add i64 %rax.27.reload, ptrtoint (i32* @global_var_1 to i64), !insn.addr !1210
  %633 = add i64 %rcx.26.reload, ptrtoint (i32* @global_var_1 to i64), !insn.addr !1211
  %634 = add i64 %rdx.26.reload, 1, !insn.addr !1212
  %635 = icmp eq i64 %632, ptrtoint (i8* @global_var_10 to i64), !insn.addr !1213
  %636 = icmp eq i1 %635, false, !insn.addr !1214
  store i64 %632, i64* %rax.27.reg2mem, !insn.addr !1214
  store i64 %633, i64* %rcx.26.reg2mem, !insn.addr !1214
  store i64 %634, i64* %rdx.26.reg2mem, !insn.addr !1214
  br i1 %636, label %dec_label_pc_2f37, label %dec_label_pc_2f56, !insn.addr !1214

dec_label_pc_2f56:                                ; preds = %dec_label_pc_2f37
  %637 = add i64 %rdi.2.reload, ptrtoint (i8* @global_var_10 to i64), !insn.addr !1215
  %638 = icmp eq i64 %rdi.2.reload, sub (i64 0, i64 add (i64 ptrtoint (i8* @global_var_10 to i64), i64 -256)), !insn.addr !1216
  %639 = icmp eq i1 %638, false, !insn.addr !1217
  store i64 %637, i64* %rdi.2.reg2mem, !insn.addr !1217
  br i1 %639, label %dec_label_pc_2f76, label %dec_label_pc_2f63, !insn.addr !1217

dec_label_pc_2f63:                                ; preds = %dec_label_pc_2f56
  %640 = and i64 %637, -65536, !insn.addr !1218
  %641 = ptrtoint i8* %stack_var_-152 to i64, !insn.addr !1219
  %642 = add i64 %arg4, ptrtoint ([3 x i8]* @global_var_3c48 to i64), !insn.addr !1220
  store i64 %640, i64* %rdi.3.reg2mem, !insn.addr !1221
  br label %dec_label_pc_2fc9, !insn.addr !1221

dec_label_pc_2f76:                                ; preds = %dec_label_pc_2f56, %dec_label_pc_2f13
  %rdi.2.reload = load i64, i64* %rdi.2.reg2mem
  %643 = add i64 %620, %rdi.2.reload, !insn.addr !1203
  %644 = trunc i64 %rdi.2.reload to i8, !insn.addr !1207
  store i64 0, i64* %rax.27.reg2mem, !insn.addr !1222
  store i64 %rdi.2.reload, i64* %rcx.26.reg2mem, !insn.addr !1222
  store i64 %643, i64* %rdx.26.reg2mem, !insn.addr !1222
  br label %dec_label_pc_2f37, !insn.addr !1222

dec_label_pc_2f8a:                                ; preds = %dec_label_pc_2f8a, %dec_label_pc_2fc9
  %rdx.27.reload = load i64, i64* %rdx.27.reg2mem
  %rcx.27.reload = load i64, i64* %rcx.27.reg2mem
  %rax.28.reload = load i64, i64* %rax.28.reg2mem
  %645 = inttoptr i64 %rcx.27.reload to i8*, !insn.addr !1223
  %646 = load i8, i8* %645, align 1, !insn.addr !1223
  %647 = sub i8 %646, %664, !insn.addr !1224
  %648 = mul i64 %rax.28.reload, ptrtoint (i32* @global_var_1 to i64), !insn.addr !1225
  %649 = add i64 %648, %641, !insn.addr !1225
  %650 = inttoptr i64 %649 to i8*, !insn.addr !1225
  %651 = load i8, i8* %650, align 1, !insn.addr !1225
  %652 = xor i8 %647, %651, !insn.addr !1225
  %653 = inttoptr i64 %rdx.27.reload to i8*, !insn.addr !1226
  store i8 %652, i8* %653, align 1, !insn.addr !1226
  %654 = add i64 %rax.28.reload, ptrtoint (i32* @global_var_1 to i64), !insn.addr !1227
  %655 = add i64 %rcx.27.reload, ptrtoint (i32* @global_var_1 to i64), !insn.addr !1228
  %656 = add i64 %rdx.27.reload, ptrtoint (i32* @global_var_1 to i64), !insn.addr !1229
  %657 = icmp eq i64 %654, ptrtoint (i8* @global_var_10 to i64), !insn.addr !1230
  %658 = icmp eq i1 %657, false, !insn.addr !1231
  store i64 %654, i64* %rax.28.reg2mem, !insn.addr !1231
  store i64 %655, i64* %rcx.27.reg2mem, !insn.addr !1231
  store i64 %656, i64* %rdx.27.reg2mem, !insn.addr !1231
  br i1 %658, label %dec_label_pc_2f8a, label %dec_label_pc_2fa9, !insn.addr !1231

dec_label_pc_2fa9:                                ; preds = %dec_label_pc_2f8a
  %659 = add i64 %rdi.3.reload, ptrtoint (i8* @global_var_10 to i64), !insn.addr !1232
  %660 = icmp eq i64 %rdi.3.reload, sub (i64 0, i64 add (i64 ptrtoint (i8* @global_var_10 to i64), i64 -256)), !insn.addr !1233
  %661 = icmp eq i1 %660, false, !insn.addr !1234
  store i64 %659, i64* %rdi.3.reg2mem, !insn.addr !1234
  br i1 %661, label %dec_label_pc_2fc9, label %dec_label_pc_3009, !insn.addr !1234

dec_label_pc_2fc9:                                ; preds = %dec_label_pc_2fa9, %dec_label_pc_2f63
  %rdi.3.reload = load i64, i64* %rdi.3.reg2mem
  %662 = mul i64 %rdi.3.reload, ptrtoint (i32* @global_var_1 to i64), !insn.addr !1220
  %663 = add i64 %642, %662, !insn.addr !1220
  %664 = trunc i64 %rdi.3.reload to i8, !insn.addr !1224
  store i64 0, i64* %rax.28.reg2mem, !insn.addr !1235
  store i64 %rdi.3.reload, i64* %rcx.27.reg2mem, !insn.addr !1235
  store i64 %663, i64* %rdx.27.reg2mem, !insn.addr !1235
  br label %dec_label_pc_2f8a, !insn.addr !1235

dec_label_pc_3009:                                ; preds = %dec_label_pc_2fa9
  ret i64 %654, !insn.addr !1236
}

define i64 @FUSBDTV_Add(i64 %deviceExtension_input) local_unnamed_addr {
dec_label_pc_3010:
  %0 = call i64 @__decompiler_undefined_function_0()
  ret i64 %0, !insn.addr !1237
}

define i64 @FUSBDTV_Add.153(i64* %arg1) local_unnamed_addr {
dec_label_pc_3040:
  %r15.0.reg2mem = alloca i64, !insn.addr !1238
  %rbx.1.reg2mem = alloca i64, !insn.addr !1238
  %rax.8.reg2mem = alloca i64, !insn.addr !1238
  %rax.7.reg2mem = alloca i64, !insn.addr !1238
  %r13.0.reg2mem = alloca i64, !insn.addr !1238
  %stack_var_-80.0.reg2mem = alloca i8, !insn.addr !1238
  %rax.4.reg2mem = alloca i64, !insn.addr !1238
  %rbx.07.reg2mem = alloca i64, !insn.addr !1238
  %rax.3.reg2mem = alloca i64, !insn.addr !1238
  %rax.2.reg2mem = alloca i64, !insn.addr !1238
  %rax.1.reg2mem = alloca i64, !insn.addr !1238
  %rax.0.reg2mem = alloca i64, !insn.addr !1238
  %0 = call i64 @__decompiler_undefined_function_0()
  %stack_var_-64 = alloca i64, align 8
  %1 = call i64 @mcount(), !insn.addr !1239
  store i32 ptrtoint (i64* @global_var_36f4d to i32), i32* bitcast (i64* @global_var_36f4c to i32*), align 8, !insn.addr !1240
  %2 = call i64 @FUSB_ExAllocatePool.203(i64 0, i64 ptrtoint (i64* @global_var_6690 to i64)), !insn.addr !1241
  store i64 %2, i64* %arg1, align 8, !insn.addr !1242
  %3 = call i64 @memset(i64 %2, i64 0, i64 ptrtoint (i64* @global_var_6690 to i64)), !insn.addr !1243
  %4 = call i64 @FUSBDTV_AddUSBDevice.155(i64 0, i64 0, i64 0, i64 %2, i64 %0), !insn.addr !1244
  %5 = add i64 %2, 1240, !insn.addr !1245
  %6 = inttoptr i64 %5 to i8*, !insn.addr !1245
  store i8 0, i8* %6, align 1, !insn.addr !1245
  %7 = add i64 %2, 21465, !insn.addr !1246
  %8 = inttoptr i64 %7 to i8*, !insn.addr !1246
  store i8 0, i8* %8, align 1, !insn.addr !1246
  %9 = add i64 %2, 21464, !insn.addr !1247
  %10 = inttoptr i64 %9 to i8*, !insn.addr !1247
  store i8 ptrtoint (i32* @global_var_1 to i8), i8* %10, align 1, !insn.addr !1247
  %11 = add i64 %2, ptrtoint (i8* @global_var_8 to i64), !insn.addr !1248
  store i64 %2, i64* %rax.0.reg2mem, !insn.addr !1249
  br label %dec_label_pc_30cd, !insn.addr !1249

dec_label_pc_30cd:                                ; preds = %dec_label_pc_30cd, %dec_label_pc_3040
  %rax.0.reload = load i64, i64* %rax.0.reg2mem
  %12 = add i64 %rax.0.reload, 21466, !insn.addr !1250
  %13 = inttoptr i64 %12 to i8*, !insn.addr !1250
  store i8 0, i8* %13, align 1, !insn.addr !1250
  %14 = add i64 %rax.0.reload, ptrtoint (i32* @global_var_1 to i64), !insn.addr !1251
  %15 = icmp eq i64 %14, %11, !insn.addr !1252
  %16 = icmp eq i1 %15, false, !insn.addr !1253
  store i64 %14, i64* %rax.0.reg2mem, !insn.addr !1253
  br i1 %16, label %dec_label_pc_30cd, label %dec_label_pc_30dd, !insn.addr !1253

dec_label_pc_30dd:                                ; preds = %dec_label_pc_30cd
  %17 = add i64 %2, 21593, !insn.addr !1254
  %18 = inttoptr i64 %17 to i8*, !insn.addr !1254
  store i8 0, i8* %18, align 1, !insn.addr !1254
  %19 = add i64 %2, 21592, !insn.addr !1255
  %20 = inttoptr i64 %19 to i8*, !insn.addr !1255
  store i8 ptrtoint (i32* @global_var_1 to i8), i8* %20, align 1, !insn.addr !1255
  store i64 %2, i64* %rax.1.reg2mem, !insn.addr !1256
  br label %dec_label_pc_30f2, !insn.addr !1256

dec_label_pc_30f2:                                ; preds = %dec_label_pc_30f2, %dec_label_pc_30dd
  %rax.1.reload = load i64, i64* %rax.1.reg2mem
  %21 = add i64 %rax.1.reload, 21594, !insn.addr !1257
  %22 = inttoptr i64 %21 to i8*, !insn.addr !1257
  store i8 0, i8* %22, align 1, !insn.addr !1257
  %23 = add i64 %rax.1.reload, ptrtoint (i32* @global_var_1 to i64), !insn.addr !1258
  %24 = icmp eq i64 %11, %23, !insn.addr !1259
  %25 = icmp eq i1 %24, false, !insn.addr !1260
  store i64 %23, i64* %rax.1.reg2mem, !insn.addr !1260
  br i1 %25, label %dec_label_pc_30f2, label %dec_label_pc_3102, !insn.addr !1260

dec_label_pc_3102:                                ; preds = %dec_label_pc_30f2
  %26 = add i64 %2, 21697, !insn.addr !1261
  %27 = inttoptr i64 %26 to i8*, !insn.addr !1261
  store i8 0, i8* %27, align 1, !insn.addr !1261
  %28 = add i64 %2, 21696, !insn.addr !1262
  %29 = inttoptr i64 %28 to i8*, !insn.addr !1262
  store i8 ptrtoint (i32* @global_var_1 to i8), i8* %29, align 1, !insn.addr !1262
  store i64 %2, i64* %rax.2.reg2mem, !insn.addr !1263
  br label %dec_label_pc_3117, !insn.addr !1263

dec_label_pc_3117:                                ; preds = %dec_label_pc_3117, %dec_label_pc_3102
  %rax.2.reload = load i64, i64* %rax.2.reg2mem
  %30 = add i64 %rax.2.reload, 21698, !insn.addr !1264
  %31 = inttoptr i64 %30 to i8*, !insn.addr !1264
  store i8 0, i8* %31, align 1, !insn.addr !1264
  %32 = add i64 %rax.2.reload, ptrtoint (i32* @global_var_1 to i64), !insn.addr !1265
  %33 = icmp eq i64 %11, %32, !insn.addr !1266
  %34 = icmp eq i1 %33, false, !insn.addr !1267
  store i64 %32, i64* %rax.2.reg2mem, !insn.addr !1267
  br i1 %34, label %dec_label_pc_3117, label %dec_label_pc_3127, !insn.addr !1267

dec_label_pc_3127:                                ; preds = %dec_label_pc_3117
  %35 = add i64 %2, 21922, !insn.addr !1268
  %36 = inttoptr i64 %35 to i8*, !insn.addr !1268
  store i8 0, i8* %36, align 1, !insn.addr !1268
  %37 = add i64 %2, 24672, !insn.addr !1269
  %38 = inttoptr i64 %37 to i8*, !insn.addr !1269
  store i8 0, i8* %38, align 1, !insn.addr !1269
  %39 = call i64 @Get_Tuner_Extra_Data_Size.594(i64* nonnull %stack_var_-64), !insn.addr !1270
  %40 = load i64, i64* %stack_var_-64, align 8, !insn.addr !1271
  %41 = icmp eq i64 %40, 0, !insn.addr !1271
  %42 = icmp eq i1 %41, false, !insn.addr !1272
  %43 = add nsw i64 %2, 560
  store i64 %2, i64* %rax.3.reg2mem, !insn.addr !1272
  br i1 %42, label %dec_label_pc_317a.preheader, label %dec_label_pc_315d, !insn.addr !1272

dec_label_pc_317a.preheader:                      ; preds = %dec_label_pc_3127
  %44 = call i64 @FUSB_ExAllocatePool.203(i64 0, i64 %40), !insn.addr !1273
  %45 = add i64 %2, 22944, !insn.addr !1274
  %46 = inttoptr i64 %45 to i64*, !insn.addr !1274
  store i64 %44, i64* %46, align 8, !insn.addr !1274
  %47 = load i64, i64* %stack_var_-64, align 8, !insn.addr !1275
  %48 = call i64 @memset(i64 %44, i64 0, i64 %47), !insn.addr !1276
  %49 = add i64 %2, 22936, !insn.addr !1277
  %50 = inttoptr i64 %49 to i64*, !insn.addr !1277
  store i64 %2, i64* %50, align 8, !insn.addr !1277
  store i64 %2, i64* %rbx.07.reg2mem
  br label %dec_label_pc_317a.dec_label_pc_317a_crit_edge

dec_label_pc_315d:                                ; preds = %dec_label_pc_3127, %dec_label_pc_315d
  %rax.3.reload = load i64, i64* %rax.3.reg2mem
  %51 = add i64 %rax.3.reload, 22944, !insn.addr !1278
  %52 = inttoptr i64 %51 to i64*, !insn.addr !1278
  store i64 0, i64* %52, align 8, !insn.addr !1278
  %53 = add i64 %rax.3.reload, 22936, !insn.addr !1279
  %54 = inttoptr i64 %53 to i64*, !insn.addr !1279
  store i64 %2, i64* %54, align 8, !insn.addr !1279
  %55 = add i64 %rax.3.reload, 80, !insn.addr !1280
  %56 = icmp eq i64 %rax.3.reload, %43, !insn.addr !1281
  %57 = icmp eq i1 %56, false, !insn.addr !1282
  store i64 %55, i64* %rax.3.reg2mem, !insn.addr !1282
  br i1 %57, label %dec_label_pc_315d, label %dec_label_pc_31b0, !insn.addr !1282

dec_label_pc_317a.dec_label_pc_317a_crit_edge:    ; preds = %dec_label_pc_317a.preheader, %dec_label_pc_317a.dec_label_pc_317a_crit_edge
  %rbx.07.reload = load i64, i64* %rbx.07.reg2mem
  %58 = add i64 %rbx.07.reload, 80, !insn.addr !1283
  %.pre = load i64, i64* %stack_var_-64, align 8
  %59 = call i64 @FUSB_ExAllocatePool.203(i64 0, i64 %.pre), !insn.addr !1273
  %60 = add i64 %rbx.07.reload, 23024, !insn.addr !1274
  %61 = inttoptr i64 %60 to i64*, !insn.addr !1274
  store i64 %59, i64* %61, align 8, !insn.addr !1274
  %62 = load i64, i64* %stack_var_-64, align 8, !insn.addr !1275
  %63 = call i64 @memset(i64 %59, i64 0, i64 %62), !insn.addr !1276
  %64 = add i64 %rbx.07.reload, 23016, !insn.addr !1277
  %65 = inttoptr i64 %64 to i64*, !insn.addr !1277
  store i64 %2, i64* %65, align 8, !insn.addr !1277
  %66 = icmp eq i64 %58, %43, !insn.addr !1284
  %67 = icmp eq i1 %66, false, !insn.addr !1285
  store i64 %58, i64* %rbx.07.reg2mem, !insn.addr !1285
  br i1 %67, label %dec_label_pc_317a.dec_label_pc_317a_crit_edge, label %dec_label_pc_31b0, !insn.addr !1285

dec_label_pc_31b0:                                ; preds = %dec_label_pc_315d, %dec_label_pc_317a.dec_label_pc_317a_crit_edge
  %68 = add i64 %2, 21552, !insn.addr !1286
  %69 = inttoptr i64 %68 to i8*, !insn.addr !1286
  store i8 0, i8* %69, align 1, !insn.addr !1286
  %70 = add i64 %2, ptrtoint (i8** @global_var_5431 to i64), !insn.addr !1287
  %71 = inttoptr i64 %70 to i8*, !insn.addr !1287
  store i8 ptrtoint (i32* @global_var_1 to i8), i8* %71, align 1, !insn.addr !1287
  store i64 %2, i64* %rax.4.reg2mem, !insn.addr !1288
  br label %dec_label_pc_31c5, !insn.addr !1288

dec_label_pc_31c5:                                ; preds = %dec_label_pc_31c5, %dec_label_pc_31b0
  %rax.4.reload = load i64, i64* %rax.4.reg2mem
  %72 = add i64 %rax.4.reload, 22120, !insn.addr !1289
  %73 = inttoptr i64 %72 to i8*, !insn.addr !1289
  store i8 0, i8* %73, align 1, !insn.addr !1289
  %74 = add i64 %rax.4.reload, ptrtoint (i32* @global_var_1 to i64), !insn.addr !1290
  %75 = icmp eq i64 %11, %74, !insn.addr !1291
  %76 = icmp eq i1 %75, false, !insn.addr !1292
  store i64 %74, i64* %rax.4.reg2mem, !insn.addr !1292
  br i1 %76, label %dec_label_pc_31c5, label %dec_label_pc_31d5, !insn.addr !1292

dec_label_pc_31d5:                                ; preds = %dec_label_pc_31c5
  %77 = add i64 %2, 22800, !insn.addr !1293
  %78 = inttoptr i64 %77 to i8*, !insn.addr !1293
  store i8 0, i8* %78, align 1, !insn.addr !1293
  %79 = add i64 %2, 22799, !insn.addr !1294
  %80 = inttoptr i64 %79 to i8*, !insn.addr !1294
  store i8 0, i8* %80, align 1, !insn.addr !1294
  %81 = load i64, i64* @global_var_36b00, align 8, !insn.addr !1295
  %82 = icmp eq i64 %81, 0, !insn.addr !1295
  %83 = icmp eq i1 %82, false, !insn.addr !1296
  br i1 %83, label %dec_label_pc_321d, label %dec_label_pc_3211, !insn.addr !1296

dec_label_pc_3211:                                ; preds = %dec_label_pc_31d5
  store i64 %2, i64* inttoptr (i64 mul (i64 ashr (i64 shl (i64 and (i64 ptrtoint (i32* @global_var_1 to i64), i64 -256), i64 32), i64 32), i64 ptrtoint (i8* @global_var_8 to i64)) to i64*), align 256, !insn.addr !1297
  %84 = trunc i64 %2 to i8, !insn.addr !1298
  store i8 %84, i8* %stack_var_-80.0.reg2mem, !insn.addr !1299
  store i64 0, i64* %r13.0.reg2mem, !insn.addr !1299
  br label %dec_label_pc_322b, !insn.addr !1299

dec_label_pc_321d:                                ; preds = %dec_label_pc_31d5, %dec_label_pc_321d
  br label %dec_label_pc_321d

dec_label_pc_322b:                                ; preds = %dec_label_pc_322b, %dec_label_pc_3211
  %r13.0.reload = load i64, i64* %r13.0.reg2mem
  %stack_var_-80.0.reload = load i8, i8* %stack_var_-80.0.reg2mem
  %85 = call i64 @FUSB_ExAllocatePool.203(i64 0, i64 600560), !insn.addr !1300
  %86 = call i64 @memset(i64 %85, i64 0, i64 600560), !insn.addr !1301
  %87 = add i64 %85, 7480, !insn.addr !1302
  %88 = inttoptr i64 %87 to i64*, !insn.addr !1302
  store i64 %2, i64* %88, align 8, !insn.addr !1302
  %89 = trunc i64 %r13.0.reload to i8, !insn.addr !1303
  %90 = add i64 %85, 7472, !insn.addr !1303
  %91 = inttoptr i64 %90 to i8*, !insn.addr !1303
  store i8 %89, i8* %91, align 1, !insn.addr !1303
  %92 = add i64 %85, 7488, !insn.addr !1304
  %93 = inttoptr i64 %92 to i32*, !insn.addr !1304
  store i32 0, i32* %93, align 4, !insn.addr !1304
  %94 = add i64 %85, 7492, !insn.addr !1305
  %95 = inttoptr i64 %94 to i32*, !insn.addr !1305
  store i32 ptrtoint (i32* @global_var_1 to i32), i32* %95, align 4, !insn.addr !1305
  %96 = add i64 %85, 588461, !insn.addr !1306
  %97 = inttoptr i64 %96 to i8*, !insn.addr !1306
  store i8 ptrtoint (i32* @global_var_1 to i8), i8* %97, align 1, !insn.addr !1306
  %98 = add i64 %85, 7272, !insn.addr !1307
  %99 = inttoptr i64 %98 to i64*, !insn.addr !1307
  store i64 0, i64* %99, align 8, !insn.addr !1307
  %100 = add i64 %85, 7264, !insn.addr !1308
  %101 = inttoptr i64 %100 to i64*, !insn.addr !1308
  store i64 0, i64* %101, align 8, !insn.addr !1308
  %102 = add i64 %85, 7256, !insn.addr !1309
  %103 = inttoptr i64 %102 to i64*, !insn.addr !1309
  store i64 0, i64* %103, align 8, !insn.addr !1309
  %104 = add i64 %85, 7248, !insn.addr !1310
  %105 = inttoptr i64 %104 to i64*, !insn.addr !1310
  store i64 0, i64* %105, align 8, !insn.addr !1310
  %106 = add i64 %85, ptrtoint (i64* @global_var_1c48 to i64), !insn.addr !1311
  %107 = inttoptr i64 %106 to i64*, !insn.addr !1311
  store i64 0, i64* %107, align 8, !insn.addr !1311
  %108 = sext i8 %stack_var_-80.0.reload to i64, !insn.addr !1312
  %109 = add i64 %108, ptrtoint (i64* @global_var_4e0 to i64), !insn.addr !1313
  %110 = inttoptr i64 %109 to i64*, !insn.addr !1313
  store i64 %85, i64* %110, align 8, !insn.addr !1313
  %111 = add nuw nsw i64 %r13.0.reload, zext (i32 ptrtoint (i32* @global_var_1 to i32) to i64), !insn.addr !1314
  %112 = and i64 %111, 4294967295, !insn.addr !1314
  %113 = add i8 %stack_var_-80.0.reload, ptrtoint (i8* @global_var_8 to i8), !insn.addr !1315
  %114 = trunc i64 %111 to i8, !insn.addr !1316
  %115 = icmp eq i8 %114, ptrtoint (i8* @global_var_8 to i8), !insn.addr !1316
  %116 = icmp eq i1 %115, false, !insn.addr !1317
  store i8 %113, i8* %stack_var_-80.0.reg2mem, !insn.addr !1317
  store i64 %112, i64* %r13.0.reg2mem, !insn.addr !1317
  br i1 %116, label %dec_label_pc_322b, label %dec_label_pc_32d0, !insn.addr !1317

dec_label_pc_32d0:                                ; preds = %dec_label_pc_322b
  %117 = add i64 %2, 22424, !insn.addr !1318
  %118 = inttoptr i64 %117 to i8*, !insn.addr !1318
  store i8 0, i8* %118, align 1, !insn.addr !1318
  store i64 %2, i64* %rax.7.reg2mem, !insn.addr !1319
  br label %dec_label_pc_32dc, !insn.addr !1319

dec_label_pc_32dc:                                ; preds = %dec_label_pc_32dc, %dec_label_pc_32d0
  %rax.7.reload = load i64, i64* %rax.7.reg2mem
  %119 = add i64 %rax.7.reload, 22872, !insn.addr !1320
  %120 = inttoptr i64 %119 to i8*, !insn.addr !1320
  store i8 0, i8* %120, align 1, !insn.addr !1320
  %121 = add i64 %rax.7.reload, ptrtoint (i32* @global_var_1 to i64), !insn.addr !1321
  %122 = icmp eq i64 %11, %121, !insn.addr !1322
  %123 = icmp eq i1 %122, false, !insn.addr !1323
  store i64 %121, i64* %rax.7.reg2mem, !insn.addr !1323
  br i1 %123, label %dec_label_pc_32dc, label %dec_label_pc_32ec, !insn.addr !1323

dec_label_pc_32ec:                                ; preds = %dec_label_pc_32dc
  %124 = add i64 %2, 256, !insn.addr !1324
  store i64 %2, i64* %rax.8.reg2mem, !insn.addr !1325
  br label %dec_label_pc_32f6, !insn.addr !1325

dec_label_pc_32f6:                                ; preds = %dec_label_pc_32f6, %dec_label_pc_32ec
  %rax.8.reload = load i64, i64* %rax.8.reg2mem
  %125 = add i64 %rax.8.reload, 22168, !insn.addr !1326
  %126 = inttoptr i64 %125 to i8*, !insn.addr !1326
  store i8 0, i8* %126, align 1, !insn.addr !1326
  %127 = add i64 %rax.8.reload, ptrtoint (i32* @global_var_1 to i64), !insn.addr !1327
  %128 = icmp eq i64 %127, %124, !insn.addr !1328
  %129 = icmp eq i1 %128, false, !insn.addr !1329
  store i64 %127, i64* %rax.8.reg2mem, !insn.addr !1329
  store i64 0, i64* %rbx.1.reg2mem, !insn.addr !1329
  store i64 %2, i64* %r15.0.reg2mem, !insn.addr !1329
  br i1 %129, label %dec_label_pc_32f6, label %dec_label_pc_330b, !insn.addr !1329

dec_label_pc_330b:                                ; preds = %dec_label_pc_32f6, %dec_label_pc_330b
  %r15.0.reload = load i64, i64* %r15.0.reg2mem
  %rbx.1.reload = load i64, i64* %rbx.1.reg2mem
  %130 = add i64 %r15.0.reload, 1160, !insn.addr !1330
  %131 = inttoptr i64 %130 to i64*, !insn.addr !1330
  store i64 0, i64* %131, align 8, !insn.addr !1330
  %132 = call i64 @AsicenAllocateStreamBuffer.366(i64 %2, i64 %rbx.1.reload, i64 128, i64 18800), !insn.addr !1331
  %133 = call i64 @FUSB_ExAllocatePool.203(i64 0, i64 58656), !insn.addr !1332
  %134 = add i64 %r15.0.reload, 24808, !insn.addr !1333
  %135 = inttoptr i64 %134 to i64*, !insn.addr !1333
  store i64 %133, i64* %135, align 8, !insn.addr !1333
  %136 = add i64 %r15.0.reload, 24872, !insn.addr !1334
  %137 = inttoptr i64 %136 to i64*, !insn.addr !1334
  store i64 0, i64* %137, align 8, !insn.addr !1334
  %138 = add nuw nsw i64 %rbx.1.reload, zext (i32 ptrtoint (i32* @global_var_1 to i32) to i64), !insn.addr !1335
  %139 = and i64 %138, 4294967295, !insn.addr !1335
  %140 = add i64 %r15.0.reload, ptrtoint (i8* @global_var_8 to i64), !insn.addr !1336
  %141 = trunc i64 %138 to i32, !insn.addr !1337
  %142 = icmp eq i32 %141, ptrtoint (i8* @global_var_8 to i32), !insn.addr !1337
  %143 = icmp eq i1 %142, false, !insn.addr !1338
  store i64 %139, i64* %rbx.1.reg2mem, !insn.addr !1338
  store i64 %140, i64* %r15.0.reg2mem, !insn.addr !1338
  br i1 %143, label %dec_label_pc_330b, label %dec_label_pc_336a, !insn.addr !1338

dec_label_pc_336a:                                ; preds = %dec_label_pc_330b
  %144 = call i64 @AsicenAllocateStreamBuffer.366(i64 %2, i64 ptrtoint (i8* @global_var_8 to i64), i64 128, i64 18800), !insn.addr !1339
  %145 = add i64 %2, 1224, !insn.addr !1340
  %146 = inttoptr i64 %145 to i64*, !insn.addr !1340
  %147 = load i64, i64* %146, align 8, !insn.addr !1340
  %148 = inttoptr i64 %147 to i64*, !insn.addr !1341
  store i64 %2, i64* %148, align 8, !insn.addr !1341
  %149 = load i64, i64* %146, align 8, !insn.addr !1342
  %150 = add i64 %149, 184, !insn.addr !1343
  %151 = inttoptr i64 %150 to i8*, !insn.addr !1343
  store i8 ptrtoint (i32* @global_var_1 to i8), i8* %151, align 1, !insn.addr !1343
  %152 = call i64 @AsicenAllocateStreamBuffer.366(i64 %2, i64 ptrtoint (i8** @global_var_9 to i64), i64 128, i64 18800), !insn.addr !1344
  %153 = add i64 %2, 1232, !insn.addr !1345
  %154 = inttoptr i64 %153 to i64*, !insn.addr !1345
  %155 = load i64, i64* %154, align 8, !insn.addr !1345
  %156 = inttoptr i64 %155 to i64*, !insn.addr !1346
  store i64 %2, i64* %156, align 8, !insn.addr !1346
  %157 = load i64, i64* %154, align 8, !insn.addr !1347
  %158 = add i64 %157, 184, !insn.addr !1348
  %159 = inttoptr i64 %158 to i8*, !insn.addr !1348
  store i8 ptrtoint (i32* @global_var_1 to i8), i8* %159, align 1, !insn.addr !1348
  %160 = add i64 %2, 24676, !insn.addr !1349
  %161 = inttoptr i64 %160 to i8*, !insn.addr !1349
  store i8 71, i8* %161, align 1, !insn.addr !1349
  %162 = add i64 %2, 24680, !insn.addr !1350
  %163 = inttoptr i64 %162 to i32*, !insn.addr !1350
  store i32 0, i32* %163, align 4, !insn.addr !1350
  %164 = add i64 %2, 24684, !insn.addr !1351
  %165 = inttoptr i64 %164 to i32*, !insn.addr !1351
  store i32 0, i32* %165, align 4, !insn.addr !1351
  %166 = add i64 %2, 24688, !insn.addr !1352
  %167 = inttoptr i64 %166 to i32*, !insn.addr !1352
  store i32 ptrtoint (i32* @global_var_1 to i32), i32* %167, align 4, !insn.addr !1352
  %168 = add i64 %2, 24692, !insn.addr !1353
  %169 = inttoptr i64 %168 to i8*, !insn.addr !1353
  store i8 71, i8* %169, align 1, !insn.addr !1353
  %170 = add i64 %2, 24696, !insn.addr !1354
  %171 = inttoptr i64 %170 to i32*, !insn.addr !1354
  store i32 0, i32* %171, align 4, !insn.addr !1354
  %172 = add i64 %2, 24700, !insn.addr !1355
  %173 = inttoptr i64 %172 to i32*, !insn.addr !1355
  store i32 0, i32* %173, align 4, !insn.addr !1355
  %174 = add i64 %2, 24704, !insn.addr !1356
  %175 = inttoptr i64 %174 to i32*, !insn.addr !1356
  store i32 ptrtoint (i32* @global_var_1 to i32), i32* %175, align 4, !insn.addr !1356
  %176 = add i64 %2, 24708, !insn.addr !1357
  %177 = inttoptr i64 %176 to i8*, !insn.addr !1357
  store i8 -57, i8* %177, align 1, !insn.addr !1357
  %178 = add i64 %2, 24712, !insn.addr !1358
  %179 = inttoptr i64 %178 to i32*, !insn.addr !1358
  store i32 0, i32* %179, align 4, !insn.addr !1358
  %180 = add i64 %2, 24716, !insn.addr !1359
  %181 = inttoptr i64 %180 to i32*, !insn.addr !1359
  store i32 0, i32* %181, align 4, !insn.addr !1359
  %182 = add i64 %2, 24720, !insn.addr !1360
  %183 = inttoptr i64 %182 to i32*, !insn.addr !1360
  store i32 ptrtoint (i32* @global_var_1 to i32), i32* %183, align 4, !insn.addr !1360
  %184 = add i64 %2, 24724, !insn.addr !1361
  %185 = inttoptr i64 %184 to i8*, !insn.addr !1361
  store i8 -57, i8* %185, align 1, !insn.addr !1361
  %186 = add i64 %2, 24728, !insn.addr !1362
  %187 = inttoptr i64 %186 to i32*, !insn.addr !1362
  store i32 0, i32* %187, align 4, !insn.addr !1362
  %188 = add i64 %2, 24732, !insn.addr !1363
  %189 = inttoptr i64 %188 to i32*, !insn.addr !1363
  store i32 0, i32* %189, align 4, !insn.addr !1363
  %190 = add i64 %2, 24736, !insn.addr !1364
  %191 = inttoptr i64 %190 to i32*, !insn.addr !1364
  store i32 ptrtoint (i32* @global_var_1 to i32), i32* %191, align 4, !insn.addr !1364
  %192 = add i64 %2, 24740, !insn.addr !1365
  %193 = inttoptr i64 %192 to i8*, !insn.addr !1365
  store i8 -121, i8* %193, align 1, !insn.addr !1365
  %194 = add i64 %2, 24744, !insn.addr !1366
  %195 = inttoptr i64 %194 to i32*, !insn.addr !1366
  store i32 0, i32* %195, align 4, !insn.addr !1366
  %196 = add i64 %2, 24748, !insn.addr !1367
  %197 = inttoptr i64 %196 to i32*, !insn.addr !1367
  store i32 0, i32* %197, align 4, !insn.addr !1367
  %198 = add i64 %2, 24752, !insn.addr !1368
  %199 = inttoptr i64 %198 to i32*, !insn.addr !1368
  store i32 ptrtoint (i32* @global_var_1 to i32), i32* %199, align 4, !insn.addr !1368
  %200 = add i64 %2, 24756, !insn.addr !1369
  %201 = inttoptr i64 %200 to i8*, !insn.addr !1369
  store i8 -121, i8* %201, align 1, !insn.addr !1369
  %202 = add i64 %2, 24760, !insn.addr !1370
  %203 = inttoptr i64 %202 to i32*, !insn.addr !1370
  store i32 0, i32* %203, align 4, !insn.addr !1370
  %204 = add i64 %2, 24764, !insn.addr !1371
  %205 = inttoptr i64 %204 to i32*, !insn.addr !1371
  store i32 0, i32* %205, align 4, !insn.addr !1371
  %206 = add i64 %2, 24768, !insn.addr !1372
  %207 = inttoptr i64 %206 to i32*, !insn.addr !1372
  store i32 ptrtoint (i32* @global_var_1 to i32), i32* %207, align 4, !insn.addr !1372
  %208 = add i64 %2, 24772, !insn.addr !1373
  %209 = inttoptr i64 %208 to i8*, !insn.addr !1373
  store i8 ptrtoint (i8** @global_var_7 to i8), i8* %209, align 1, !insn.addr !1373
  %210 = add i64 %2, 24776, !insn.addr !1374
  %211 = inttoptr i64 %210 to i32*, !insn.addr !1374
  store i32 0, i32* %211, align 4, !insn.addr !1374
  %212 = add i64 %2, 24780, !insn.addr !1375
  %213 = inttoptr i64 %212 to i32*, !insn.addr !1375
  store i32 0, i32* %213, align 4, !insn.addr !1375
  %214 = add i64 %2, 24784, !insn.addr !1376
  %215 = inttoptr i64 %214 to i32*, !insn.addr !1376
  store i32 ptrtoint (i32* @global_var_1 to i32), i32* %215, align 4, !insn.addr !1376
  %216 = add i64 %2, 24788, !insn.addr !1377
  %217 = inttoptr i64 %216 to i8*, !insn.addr !1377
  store i8 ptrtoint (i8** @global_var_7 to i8), i8* %217, align 1, !insn.addr !1377
  %218 = add i64 %2, 24792, !insn.addr !1378
  %219 = inttoptr i64 %218 to i32*, !insn.addr !1378
  store i32 0, i32* %219, align 4, !insn.addr !1378
  %220 = add i64 %2, 24796, !insn.addr !1379
  %221 = inttoptr i64 %220 to i32*, !insn.addr !1379
  store i32 0, i32* %221, align 4, !insn.addr !1379
  %222 = add i64 %2, 24800, !insn.addr !1380
  %223 = inttoptr i64 %222 to i32*, !insn.addr !1380
  store i32 ptrtoint (i32* @global_var_1 to i32), i32* %223, align 4, !insn.addr !1380
  %224 = call i64 @InitializeDeviceLNBPowerRegistry.299(i64 %2), !insn.addr !1381
  ret i64 %224, !insn.addr !1382
}

define void @Hardware_Stop(i64 %device) local_unnamed_addr {
dec_label_pc_3560:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = call i64 @__decompiler_undefined_function_0()
  %2 = call i64 @__decompiler_undefined_function_0()
  %3 = call i64 @__decompiler_undefined_function_0()
  %4 = trunc i64 %3 to i8
  %5 = mul i8 %4, 2, !insn.addr !1383
  %6 = inttoptr i64 %3 to i8*, !insn.addr !1383
  store i8 %5, i8* %6, align 1, !insn.addr !1383
  %7 = mul i64 %2, ptrtoint (i16* @global_var_4 to i64), !insn.addr !1384
  %8 = add i64 %2, -25, !insn.addr !1384
  %9 = add i64 %8, %7, !insn.addr !1384
  %10 = inttoptr i64 %9 to i8*, !insn.addr !1384
  %11 = load i8, i8* %10, align 1, !insn.addr !1384
  %12 = trunc i64 %2 to i8, !insn.addr !1384
  %13 = add i8 %11, %12, !insn.addr !1384
  store i8 %13, i8* %10, align 1, !insn.addr !1384
  %14 = inttoptr i64 %1 to i64*, !insn.addr !1385
  %15 = call i64 @StoreDeviceLNBPower.301(i64 %device, i64 %0, i64* %14), !insn.addr !1385
  ret void, !insn.addr !1385
}

define i8 @Hardware_SubmitTuner(i64 %device) local_unnamed_addr {
dec_label_pc_356b:
  ret i8 ptrtoint (i32* @global_var_1 to i8), !insn.addr !1386
}

define i8 @Hardware_SubmitDemod(i64 %device) local_unnamed_addr {
dec_label_pc_357b:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = trunc i64 %0 to i8, !insn.addr !1387
  ret i8 %1, !insn.addr !1387
}

define i64 @Hardware_GetSignalStrength(i64 %device) local_unnamed_addr {
dec_label_pc_358b:
  %0 = call i64 @__decompiler_undefined_function_0()
  ret i64 %0, !insn.addr !1388
}

define i64 @Hardware_Stop.229() local_unnamed_addr {
dec_label_pc_3590:
  %0 = call i64 @mcount(), !insn.addr !1389
  ret i64 %0, !insn.addr !1390
}

define i64 @Hardware_GetSignalQuality(i64 %device) local_unnamed_addr {
dec_label_pc_359b:
  %0 = call i64 @mcount(), !insn.addr !1391
  ret i64 ptrtoint (i32* @global_var_1 to i64), !insn.addr !1392
}

define i64 @Hardware_GetSignalLock(i64 %device) local_unnamed_addr {
dec_label_pc_35ab:
  %0 = call i64 @mcount(), !insn.addr !1393
  ret i64 ptrtoint (i32* @global_var_1 to i64), !insn.addr !1394
}

define i64 @TVTunerInit(i64 %device) local_unnamed_addr {
dec_label_pc_35bb:
  %0 = call i64 @mcount(), !insn.addr !1395
  ret i64 0, !insn.addr !1396
}

define void @PutTsPacketToOutputPin(i64 %Adapter) local_unnamed_addr {
dec_label_pc_35cb:
  %0 = call i64 @mcount(), !insn.addr !1397
  ret void, !insn.addr !1397
}

define i8 @SmiGetIRCode(i64 %device) local_unnamed_addr {
dec_label_pc_35d6:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = trunc i64 %0 to i8
  %2 = mul i8 %1, 2, !insn.addr !1398
  %3 = inttoptr i64 %0 to i8*, !insn.addr !1398
  store i8 %2, i8* %3, align 1, !insn.addr !1398
  ret i8 %1, !insn.addr !1399
}

define i64 @Hardware_GetSignalLock.482() local_unnamed_addr {
dec_label_pc_35db:
  %0 = call i64 @mcount(), !insn.addr !1400
  ret i64 %0, !insn.addr !1400
}

define i8 @SmiSetIRCode(i64 %device, i8 %IrProtocol) local_unnamed_addr {
dec_label_pc_35e6:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = trunc i64 %0 to i8
  %2 = mul i8 %1, 2, !insn.addr !1401
  %3 = inttoptr i64 %0 to i8*, !insn.addr !1401
  store i8 %2, i8* %3, align 1, !insn.addr !1401
  ret i8 %1, !insn.addr !1402
}

define i64 @TVTunerInit.498() local_unnamed_addr {
dec_label_pc_35eb:
  %0 = call i64 @mcount(), !insn.addr !1403
  ret i64 %0, !insn.addr !1403
}

define void @DelayNanoseconds(i32 %delay) local_unnamed_addr {
dec_label_pc_35f6:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = trunc i64 %0 to i8
  %2 = mul i8 %1, 2, !insn.addr !1404
  %3 = inttoptr i64 %0 to i8*, !insn.addr !1404
  store i8 %2, i8* %3, align 1, !insn.addr !1404
  ret void, !insn.addr !1405
}

define i64 @PutTsPacketToOutputPin.525() local_unnamed_addr {
dec_label_pc_35fb:
  %0 = call i64 @mcount(), !insn.addr !1406
  ret i64 %0, !insn.addr !1407
}

define i64 @SmiGetIRCode.280() local_unnamed_addr {
dec_label_pc_3606:
  %0 = call i64 @__decompiler_undefined_function_0()
  ret i64 %0, !insn.addr !1408
}

define i8 @SmiWriteRegister(i64 %device, i8 %SlavAddr, i8 %SlavMode, i32 %RegAddr, i8* %pData, i8 %DataCont) local_unnamed_addr {
dec_label_pc_3608:
  %0 = call i64 @mcount(), !insn.addr !1409
  ret i8 0, !insn.addr !1410
}

define i64 @SmiSetIRCode.606() local_unnamed_addr {
dec_label_pc_3616:
  %0 = call i64 @mcount(), !insn.addr !1411
  ret i64 ptrtoint (i32* @global_var_1 to i64), !insn.addr !1412
}

define i64 @DelayNanoseconds.440(i64* %arg1) local_unnamed_addr {
dec_label_pc_3626:
  %0 = ptrtoint i64* %arg1 to i64
  %1 = call i64 @mcount(), !insn.addr !1413
  %2 = and i64 %0, 4294967295, !insn.addr !1414
  %3 = call i64 @__udelay(i64 %2), !insn.addr !1415
  ret i64 %3, !insn.addr !1416
}

define i64 @SmiWriteRegister.143(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4, i8* %arg5, i64* %arg6) local_unnamed_addr {
dec_label_pc_3638:
  %rax.1.reg2mem = alloca i64, !insn.addr !1417
  %r8.0.reg2mem = alloca i64, !insn.addr !1417
  %rax.0.reg2mem = alloca i64, !insn.addr !1417
  %0 = ptrtoint i64* %arg6 to i64
  %stack_var_-72 = alloca i64, align 8
  %1 = call i64 @mcount(), !insn.addr !1418
  %2 = call i64 @__readgsqword(i64 40), !insn.addr !1419
  %3 = add i64 %arg1, 22792, !insn.addr !1420
  %4 = inttoptr i64 %3 to i8*, !insn.addr !1420
  store i8 ptrtoint (i32* @global_var_1 to i8), i8* %4, align 1, !insn.addr !1420
  %5 = ptrtoint i64* %stack_var_-72 to i64, !insn.addr !1421
  store i64 0, i64* %stack_var_-72, align 8, !insn.addr !1422
  %6 = trunc i64 %0 to i8, !insn.addr !1423
  %7 = icmp eq i8 %6, 0, !insn.addr !1424
  store i64 %5, i64* %rax.1.reg2mem, !insn.addr !1425
  br i1 %7, label %dec_label_pc_36da, label %dec_label_pc_36b5, !insn.addr !1425

dec_label_pc_36b5:                                ; preds = %dec_label_pc_3638
  %8 = ptrtoint i8* %arg5 to i64
  %9 = sub i64 %0, zext (i8 ptrtoint (i32* @global_var_1 to i8) to i64), !insn.addr !1426
  %10 = urem i64 %9, 256, !insn.addr !1427
  %11 = add i64 %8, ptrtoint (i32* @global_var_1 to i64), !insn.addr !1428
  %12 = add i64 %11, %10, !insn.addr !1428
  store i64 %5, i64* %rax.0.reg2mem, !insn.addr !1428
  store i64 %8, i64* %r8.0.reg2mem, !insn.addr !1428
  br label %dec_label_pc_36c6, !insn.addr !1428

dec_label_pc_36c6:                                ; preds = %dec_label_pc_36c6, %dec_label_pc_36b5
  %r8.0.reload = load i64, i64* %r8.0.reg2mem
  %rax.0.reload = load i64, i64* %rax.0.reg2mem
  %13 = inttoptr i64 %r8.0.reload to i8*, !insn.addr !1429
  %14 = load i8, i8* %13, align 1, !insn.addr !1429
  %15 = inttoptr i64 %rax.0.reload to i8*, !insn.addr !1430
  store i8 %14, i8* %15, align 4, !insn.addr !1430
  %16 = add i64 %r8.0.reload, 1, !insn.addr !1431
  %17 = add i64 %rax.0.reload, ptrtoint (i32* @global_var_1 to i64), !insn.addr !1432
  %18 = icmp eq i64 %16, %12, !insn.addr !1433
  %19 = icmp eq i1 %18, false, !insn.addr !1434
  store i64 %17, i64* %rax.0.reg2mem, !insn.addr !1434
  store i64 %16, i64* %r8.0.reg2mem, !insn.addr !1434
  store i64 %17, i64* %rax.1.reg2mem, !insn.addr !1434
  br i1 %19, label %dec_label_pc_36c6, label %dec_label_pc_36da, !insn.addr !1434

dec_label_pc_36da:                                ; preds = %dec_label_pc_36c6, %dec_label_pc_3638
  %20 = and i64 %0, 4294967295, !insn.addr !1435
  %21 = and i8 %6, ptrtoint (i8** @global_var_3 to i8), !insn.addr !1423
  %22 = icmp eq i8 %21, 0, !insn.addr !1423
  %23 = add i64 %0, 4
  %24 = and i64 %23, 4294967292
  %r12.0 = select i1 %22, i64 %20, i64 %24
  %25 = trunc i64 %arg3 to i8, !insn.addr !1436
  %26 = icmp eq i8 %25, 0, !insn.addr !1436
  br i1 %26, label %dec_label_pc_36e5, label %dec_label_pc_36de, !insn.addr !1437

dec_label_pc_36de:                                ; preds = %dec_label_pc_36da
  %27 = icmp ugt i8 %25, ptrtoint (i8* @global_var_5 to i8)
  br i1 %27, label %dec_label_pc_3725, label %dec_label_pc_36fd, !insn.addr !1438

dec_label_pc_36e5:                                ; preds = %dec_label_pc_36da
  %28 = urem i64 %r12.0, 256, !insn.addr !1439
  %29 = urem i64 %arg4, 65536, !insn.addr !1440
  %30 = call i64 @cfg_write.154(i64 %arg1, i64 %29, i64 %28, i64* nonnull %stack_var_-72), !insn.addr !1441
  ret i64 %30, !insn.addr !1442

dec_label_pc_36fd:                                ; preds = %dec_label_pc_36de
  %31 = urem i64 %arg4, 256, !insn.addr !1443
  %32 = urem i64 %arg3, 256, !insn.addr !1444
  %33 = urem i64 %arg2, 256, !insn.addr !1445
  %sext = urem i64 %0, 256
  %34 = urem i64 %r12.0, 256, !insn.addr !1446
  %35 = call i64 @i2c_write.200(i64 %arg1, i64 %33, i64 %32, i64 %31, i64* nonnull %stack_var_-72, i64 %34, i64 %sext, i32 0), !insn.addr !1447
  ret i64 %35, !insn.addr !1448

dec_label_pc_3725:                                ; preds = %dec_label_pc_36de
  %rax.1.reload = load i64, i64* %rax.1.reg2mem
  store i8 0, i8* %4, align 1, !insn.addr !1449
  ret i64 %rax.1.reload, !insn.addr !1449
}

define i8 @SmiReadRegister(i64 %device, i8 %SlavAddr, i8 %SlavMode, i32 %RegAddr, i8* %pData, i8 %DataCont) local_unnamed_addr {
dec_label_pc_372c:
  %rax.0.reg2mem = alloca i8, !insn.addr !1450
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = add i64 %0, -24, !insn.addr !1451
  %2 = inttoptr i64 %1 to i64*, !insn.addr !1451
  %3 = load i64, i64* %2, align 8, !insn.addr !1451
  %4 = call i64 @__readgsqword(i64 40), !insn.addr !1452
  %5 = icmp eq i64 %3, %4, !insn.addr !1452
  store i8 68, i8* %rax.0.reg2mem, !insn.addr !1453
  br i1 %5, label %dec_label_pc_3753, label %dec_label_pc_374e, !insn.addr !1453

dec_label_pc_374e:                                ; preds = %dec_label_pc_372c
  %6 = call i64 @__stack_chk_fail(), !insn.addr !1454
  %phitmp = trunc i64 %6 to i8
  store i8 %phitmp, i8* %rax.0.reg2mem, !insn.addr !1454
  br label %dec_label_pc_3753, !insn.addr !1454

dec_label_pc_3753:                                ; preds = %dec_label_pc_374e, %dec_label_pc_372c
  %rax.0.reload = load i8, i8* %rax.0.reg2mem
  ret i8 %rax.0.reload, !insn.addr !1455
}

define i64 @SmiReadRegister.403(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4, i8* %arg5, i64* %arg6, i8 %arg7) local_unnamed_addr {
dec_label_pc_375c:
  %storemerge.reg2mem = alloca i64, !insn.addr !1456
  %0 = ptrtoint i64* %arg6 to i64
  %stack_var_-88 = alloca i64, align 8
  %1 = call i64 @mcount(), !insn.addr !1457
  %2 = call i64 @__readgsqword(i64 40), !insn.addr !1458
  %3 = add i64 %arg1, 22792, !insn.addr !1459
  %4 = inttoptr i64 %3 to i8*, !insn.addr !1459
  store i8 ptrtoint (i32* @global_var_1 to i8), i8* %4, align 1, !insn.addr !1459
  store i64 0, i64* %stack_var_-88, align 8, !insn.addr !1460
  %5 = trunc i64 %0 to i8, !insn.addr !1461
  %6 = and i8 %5, ptrtoint (i8** @global_var_3 to i8), !insn.addr !1461
  %7 = icmp eq i8 %6, 0, !insn.addr !1461
  %8 = add i64 %0, 4
  %9 = and i64 %8, 4294967292
  %r9.0 = select i1 %7, i64 %0, i64 %9
  %10 = trunc i64 %arg3 to i8, !insn.addr !1462
  %11 = icmp eq i8 %10, 0, !insn.addr !1462
  br i1 %11, label %dec_label_pc_37e2, label %dec_label_pc_37db, !insn.addr !1463

dec_label_pc_37db:                                ; preds = %dec_label_pc_375c
  %12 = icmp ugt i8 %10, ptrtoint (i8* @global_var_5 to i8)
  br i1 %12, label %dec_label_pc_3826, label %dec_label_pc_37fa, !insn.addr !1464

dec_label_pc_37e2:                                ; preds = %dec_label_pc_375c
  %13 = urem i64 %r9.0, 256, !insn.addr !1465
  %14 = urem i64 %arg4, 65536, !insn.addr !1466
  %15 = call i64 @cfg_read.541(i64 %arg1, i64 %14, i64 %13, i64* nonnull %stack_var_-88), !insn.addr !1467
  store i64 %15, i64* %storemerge.reg2mem, !insn.addr !1468
  br label %dec_label_pc_381f, !insn.addr !1468

dec_label_pc_37fa:                                ; preds = %dec_label_pc_37db
  %16 = urem i64 %arg4, 256, !insn.addr !1469
  %17 = urem i64 %arg3, 256, !insn.addr !1470
  %18 = urem i64 %arg2, 256, !insn.addr !1471
  %sext = urem i64 %0, 256
  %19 = urem i64 %r9.0, 256, !insn.addr !1472
  %20 = call i64 @i2c_read.433(i64 %arg1, i64 %18, i64 %17, i64 %16, i64* nonnull %stack_var_-88, i64 %19, i64 %sext, i32 0), !insn.addr !1473
  store i64 %20, i64* %storemerge.reg2mem, !insn.addr !1473
  br label %dec_label_pc_381f, !insn.addr !1473

dec_label_pc_381f:                                ; preds = %dec_label_pc_37fa, %dec_label_pc_37e2
  %21 = icmp eq i8 %5, 0, !insn.addr !1474
  %22 = icmp eq i1 %21, false, !insn.addr !1475
  br i1 %22, label %dec_label_pc_3834, label %dec_label_pc_3824, !insn.addr !1475

dec_label_pc_3824:                                ; preds = %dec_label_pc_381f
  %storemerge.reload = load i64, i64* %storemerge.reg2mem
  ret i64 %storemerge.reload, !insn.addr !1476

dec_label_pc_3826:                                ; preds = %dec_label_pc_37db
  store i8 0, i8* %4, align 1, !insn.addr !1477
  ret i64 68, !insn.addr !1478

dec_label_pc_3834:                                ; preds = %dec_label_pc_381f
  %23 = ptrtoint i64* %stack_var_-88 to i64, !insn.addr !1479
  ret i64 %23, !insn.addr !1480
}

define i8 @SetTSMode(i64 %device, i8 %tuner_number) local_unnamed_addr {
dec_label_pc_3854:
  %rax.0.reg2mem = alloca i8, !insn.addr !1481
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = call i64 @__decompiler_undefined_function_0()
  %2 = add i64 %1, 22792, !insn.addr !1482
  %3 = inttoptr i64 %2 to i8*, !insn.addr !1482
  store i8 0, i8* %3, align 1, !insn.addr !1482
  %4 = add i64 %0, -40, !insn.addr !1483
  %5 = inttoptr i64 %4 to i64*, !insn.addr !1483
  %6 = load i64, i64* %5, align 8, !insn.addr !1483
  %7 = call i64 @__readgsqword(i64 40), !insn.addr !1484
  %8 = icmp eq i64 %6, %7, !insn.addr !1484
  store i8 0, i8* %rax.0.reg2mem, !insn.addr !1485
  br i1 %8, label %dec_label_pc_3879, label %dec_label_pc_3874, !insn.addr !1485

dec_label_pc_3874:                                ; preds = %dec_label_pc_3854
  %9 = call i64 @__stack_chk_fail(), !insn.addr !1486
  %phitmp = trunc i64 %9 to i8
  store i8 %phitmp, i8* %rax.0.reg2mem, !insn.addr !1486
  br label %dec_label_pc_3879, !insn.addr !1486

dec_label_pc_3879:                                ; preds = %dec_label_pc_3874, %dec_label_pc_3854
  %rax.0.reload = load i8, i8* %rax.0.reg2mem
  ret i8 %rax.0.reload, !insn.addr !1487
}

define i64 @SetTSMode.519(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_3884:
  %stack_var_-25 = alloca i32, align 4
  %0 = call i64 @mcount(), !insn.addr !1488
  store i32 0, i32* %stack_var_-25, align 4, !insn.addr !1489
  %1 = trunc i64 %arg2 to i8, !insn.addr !1490
  %2 = icmp eq i8 %1, 0, !insn.addr !1490
  br i1 %2, label %dec_label_pc_38b0, label %dec_label_pc_389e, !insn.addr !1491

dec_label_pc_389e:                                ; preds = %dec_label_pc_3884
  %3 = icmp ne i8 %1, ptrtoint (i32* @global_var_2 to i8), !insn.addr !1492
  %4 = icmp ne i8 %1, ptrtoint (i16* @global_var_4 to i8), !insn.addr !1493
  %or.cond.not = icmp eq i1 %4, %3
  %5 = icmp eq i8 %1, ptrtoint (i8* @global_var_6 to i8), !insn.addr !1494
  %6 = icmp eq i1 %5, false, !insn.addr !1495
  %or.cond3 = icmp eq i1 %or.cond.not, %6
  br i1 %or.cond3, label %dec_label_pc_390e, label %dec_label_pc_38b0, !insn.addr !1496

dec_label_pc_38b0:                                ; preds = %dec_label_pc_389e, %dec_label_pc_3884
  %7 = bitcast i32* %stack_var_-25 to i8*, !insn.addr !1497
  %8 = call i64 @SmiReadRegister.403(i64 %arg1, i64 0, i64 0, i64 2880, i8* nonnull %7, i64* bitcast (i32* @global_var_1 to i64*), i8 0), !insn.addr !1497
  %9 = load i32, i32* %stack_var_-25, align 4, !insn.addr !1498
  %10 = or i32 %9, -128, !insn.addr !1499
  store i32 %10, i32* %stack_var_-25, align 4, !insn.addr !1499
  %11 = call i64 @SmiWriteRegister.143(i64 %arg1, i64 0, i64 0, i64 2880, i8* nonnull %7, i64* bitcast (i32* @global_var_1 to i64*)), !insn.addr !1500
  ret i64 %11, !insn.addr !1501

dec_label_pc_390e:                                ; preds = %dec_label_pc_389e
  %12 = bitcast i32* %stack_var_-25 to i8*, !insn.addr !1502
  %13 = call i64 @SmiReadRegister.403(i64 %arg1, i64 0, i64 0, i64 2560, i8* nonnull %12, i64* bitcast (i32* @global_var_1 to i64*), i8 0), !insn.addr !1502
  %14 = load i32, i32* %stack_var_-25, align 4, !insn.addr !1503
  %15 = or i32 %14, -128, !insn.addr !1504
  %16 = zext i32 %15 to i64, !insn.addr !1504
  ret i64 %16, !insn.addr !1504
}

define i8 @SmiTunerPowerUp(i64 %device) local_unnamed_addr {
dec_label_pc_3956:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = call i64 @__decompiler_undefined_function_0()
  %2 = call i64 @__decompiler_undefined_function_0()
  %3 = trunc i64 %2 to i8, !insn.addr !1505
  %4 = add i64 %0, -17, !insn.addr !1505
  %5 = inttoptr i64 %4 to i8*, !insn.addr !1505
  store i8 %3, i8* %5, align 1, !insn.addr !1505
  %6 = call i64 @SmiWriteRegister.143(i64 %1, i64 0, i64 0, i64 2560, i8* %5, i64* bitcast (i32* @global_var_1 to i64*)), !insn.addr !1506
  ret i8 ptrtoint (i32* @global_var_1 to i8), !insn.addr !1507
}

define i64 @SmiTunerPowerUp.227(i64 %arg1) local_unnamed_addr {
dec_label_pc_3986:
  %0 = call i64 @mcount(), !insn.addr !1508
  %1 = add i64 %arg1, 22794, !insn.addr !1509
  %2 = inttoptr i64 %1 to i8*, !insn.addr !1509
  store i8 0, i8* %2, align 1, !insn.addr !1509
  %3 = add i64 %arg1, 22520, !insn.addr !1510
  %4 = inttoptr i64 %3 to i64*, !insn.addr !1510
  %5 = load i64, i64* %4, align 8, !insn.addr !1510
  %6 = add i64 %5, 2184, !insn.addr !1511
  %7 = inttoptr i64 %6 to i32*, !insn.addr !1512
  %8 = load i32, i32* %7, align 4, !insn.addr !1512
  %9 = and i32 %8, -2, !insn.addr !1513
  store i32 %9, i32* %7, align 4, !insn.addr !1514
  ret i64 %6, !insn.addr !1515
}

define i8 @Hardware_PowerUp(i64 %device) local_unnamed_addr {
dec_label_pc_39d3:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = call i64 @__decompiler_undefined_function_0()
  %2 = call i64 @__decompiler_undefined_function_0()
  %3 = call i64 @__decompiler_undefined_function_0()
  %4 = trunc i64 %3 to i32
  %5 = mul i32 %4, 2, !insn.addr !1516
  %6 = inttoptr i64 %3 to i32*, !insn.addr !1516
  store i32 %5, i32* %6, align 4, !insn.addr !1516
  %7 = trunc i64 %0 to i32, !insn.addr !1517
  %8 = or i32 %7, ptrtoint (i32* @global_var_1 to i32), !insn.addr !1517
  %9 = add i64 %2, 22520, !insn.addr !1518
  %10 = inttoptr i64 %9 to i64*, !insn.addr !1518
  %11 = load i64, i64* %10, align 8, !insn.addr !1518
  %12 = add i64 %11, 2184, !insn.addr !1519
  %13 = inttoptr i64 %12 to i32*, !insn.addr !1520
  store i32 %8, i32* %13, align 4, !insn.addr !1520
  %14 = call i64 @DelayMilliseconds.518(i64* bitcast (i32** @global_var_14 to i64*), i64 %1), !insn.addr !1521
  ret i8 ptrtoint (i32* @global_var_1 to i8), !insn.addr !1522
}

define i64 @Hardware_PowerUp.411(i64 %arg1) local_unnamed_addr {
dec_label_pc_3a03:
  %0 = call i64 @mcount(), !insn.addr !1523
  %1 = call i64 @SmiTunerPowerUp.227(i64 %arg1), !insn.addr !1524
  ret i64 0, !insn.addr !1525
}

define i8 @SmiTunerPowerDown(i64 %device) local_unnamed_addr {
dec_label_pc_3a31:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = call i64 @__decompiler_undefined_function_0()
  %2 = add i64 %1, -119, !insn.addr !1526
  %3 = inttoptr i64 %2 to i8*, !insn.addr !1526
  %4 = load i8, i8* %3, align 1, !insn.addr !1526
  %5 = trunc i64 %0 to i8, !insn.addr !1526
  %6 = sub i8 %4, %5, !insn.addr !1526
  store i8 %6, i8* %3, align 1, !insn.addr !1526
  %7 = trunc i64 %1 to i8, !insn.addr !1527
  ret i8 %7, !insn.addr !1527
}

define i64 @function_3a39(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4) local_unnamed_addr {
dec_label_pc_3a39:
  %0 = call i64 @__decompiler_undefined_function_0()
  %rax = alloca i64, align 8
  %1 = call i64 @__decompiler_undefined_function_0()
  %2 = add i64 %1, -125, !insn.addr !1528
  %3 = inttoptr i64 %2 to i32*, !insn.addr !1528
  %4 = load i32, i32* %3, align 4, !insn.addr !1528
  %5 = sub i32 %4, ptrtoint (i32* @global_var_1 to i32), !insn.addr !1528
  store i32 %5, i32* %3, align 4, !insn.addr !1528
  %6 = mul i64 %arg4, ptrtoint (i32* @global_var_1 to i64), !insn.addr !1529
  %7 = add i64 %arg2, -58, !insn.addr !1529
  %8 = add i64 %7, %6, !insn.addr !1529
  %9 = inttoptr i64 %8 to i32*, !insn.addr !1529
  %10 = load i32, i32* %9, align 4, !insn.addr !1529
  %11 = trunc i64 %arg2 to i32, !insn.addr !1529
  %12 = add i32 %10, %11, !insn.addr !1529
  store i32 %12, i32* %9, align 4, !insn.addr !1529
  %13 = bitcast i64* %rax to i8*
  %14 = load i8, i8* %13, align 8, !insn.addr !1530
  %15 = load i64, i64* %rax, align 8
  %16 = trunc i64 %15 to i8, !insn.addr !1530
  %17 = add i8 %14, %16, !insn.addr !1530
  %18 = inttoptr i64 %15 to i8*, !insn.addr !1530
  store i8 %17, i8* %18, align 1, !insn.addr !1530
  %19 = load i8, i8* %13, align 8, !insn.addr !1531
  %20 = lshr i64 %0, ptrtoint (i8* @global_var_8 to i64), !insn.addr !1531
  %21 = trunc i64 %20 to i8, !insn.addr !1531
  %22 = add i8 %19, %21, !insn.addr !1531
  %23 = load i64, i64* %rax, align 8, !insn.addr !1531
  %24 = inttoptr i64 %23 to i8*, !insn.addr !1531
  store i8 %22, i8* %24, align 1, !insn.addr !1531
  %25 = load i64, i64* %rax, align 8, !insn.addr !1532
  ret i64 %25, !insn.addr !1532
}

define i8 @Hardware_PowerDown(i64 %device) local_unnamed_addr {
dec_label_pc_3a52:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = trunc i64 %0 to i8
  %2 = mul i8 %1, 2, !insn.addr !1533
  %3 = inttoptr i64 %0 to i8*, !insn.addr !1533
  store i8 %2, i8* %3, align 1, !insn.addr !1533
  %4 = add i64 %0, ptrtoint (i32* @global_var_1 to i64), !insn.addr !1534
  %5 = inttoptr i64 %4 to i32*, !insn.addr !1534
  %6 = load i32, i32* %5, align 4, !insn.addr !1534
  %7 = trunc i64 %device to i32, !insn.addr !1534
  %8 = add i32 %6, %7, !insn.addr !1534
  store i32 %8, i32* %5, align 4, !insn.addr !1534
  ret i8 %1, !insn.addr !1535
}

define i64 @SmiTunerPowerDown.570(i64 %arg1) local_unnamed_addr {
dec_label_pc_3a61:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = call i64 @mcount(), !insn.addr !1536
  %2 = add i64 %arg1, 22794, !insn.addr !1537
  %3 = inttoptr i64 %2 to i8*, !insn.addr !1537
  store i8 0, i8* %3, align 1, !insn.addr !1537
  %4 = call i64 @DelayMilliseconds.518(i64* bitcast (i32** @global_var_14 to i64*), i64 %0), !insn.addr !1538
  ret i64 ptrtoint (i32* @global_var_1 to i64), !insn.addr !1539
}

define i64 @Hardware_PowerDown.497(i64 %arg1) local_unnamed_addr {
dec_label_pc_3a82:
  %0 = call i64 @mcount(), !insn.addr !1540
  ret i64 %0, !insn.addr !1541
}

define i8 @HwSoftReset(i64 %device, i64 %ulTime) local_unnamed_addr {
dec_label_pc_3a94:
  %.reg2mem = alloca i64, !insn.addr !1542
  %0 = call i64 @__decompiler_undefined_function_0()
  %rax = alloca i64, align 8
  %1 = call i64 @__decompiler_undefined_function_0()
  %2 = trunc i64 %1 to i32
  %3 = mul i32 %2, 2, !insn.addr !1542
  %4 = inttoptr i64 %1 to i32*, !insn.addr !1542
  store i32 %3, i32* %4, align 4, !insn.addr !1542
  %5 = bitcast i64* %rax to i8*
  %6 = load i8, i8* %5, align 8, !insn.addr !1543
  %7 = load i64, i64* %rax, align 8
  %8 = trunc i64 %7 to i8, !insn.addr !1543
  %9 = add i8 %6, %8, !insn.addr !1543
  %10 = inttoptr i64 %7 to i8*, !insn.addr !1543
  store i8 %9, i8* %10, align 1, !insn.addr !1543
  %11 = add i64 %device, 22482, !insn.addr !1544
  %12 = inttoptr i64 %11 to i8*, !insn.addr !1544
  %13 = load i8, i8* %12, align 1, !insn.addr !1544
  %14 = icmp eq i8 %13, 0, !insn.addr !1544
  br i1 %14, label %dec_label_pc_3a94.dec_label_pc_3abd_crit_edge, label %dec_label_pc_3aa1, !insn.addr !1545

dec_label_pc_3a94.dec_label_pc_3abd_crit_edge:    ; preds = %dec_label_pc_3a94
  %.pre = load i64, i64* %rax, align 8
  store i64 %.pre, i64* %.reg2mem
  br label %dec_label_pc_3abd

dec_label_pc_3aa1:                                ; preds = %dec_label_pc_3a94
  %15 = call i64 @SmiTunerPowerDown.570(i64 %device), !insn.addr !1546
  store i64 0, i64* %rax, align 8, !insn.addr !1547
  %16 = trunc i64 %15 to i8, !insn.addr !1548
  %17 = icmp eq i8 %16, 0, !insn.addr !1548
  store i64 0, i64* %.reg2mem, !insn.addr !1549
  br i1 %17, label %dec_label_pc_3abd, label %dec_label_pc_3ab1, !insn.addr !1549

dec_label_pc_3ab1:                                ; preds = %dec_label_pc_3aa1
  %18 = add i64 %0, 22482, !insn.addr !1550
  %19 = inttoptr i64 %18 to i8*, !insn.addr !1550
  store i8 0, i8* %19, align 1, !insn.addr !1550
  store i64 ptrtoint (i32* @global_var_1 to i64), i64* %rax, align 8, !insn.addr !1551
  store i64 ptrtoint (i32* @global_var_1 to i64), i64* %.reg2mem, !insn.addr !1551
  br label %dec_label_pc_3abd, !insn.addr !1551

dec_label_pc_3abd:                                ; preds = %dec_label_pc_3a94.dec_label_pc_3abd_crit_edge, %dec_label_pc_3ab1, %dec_label_pc_3aa1
  %.reload = load i64, i64* %.reg2mem, !insn.addr !1552
  %20 = trunc i64 %.reload to i8, !insn.addr !1552
  ret i8 %20, !insn.addr !1552
}

define i64 @HwSoftReset.257(i64 %arg1, i64* %arg2) local_unnamed_addr {
dec_label_pc_3ac4:
  %0 = call i64 @__decompiler_undefined_function_0()
  ret i64 %0, !insn.addr !1553
}

define i64 @Hardware_Init(i64 %device) local_unnamed_addr {
dec_label_pc_3aca:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = call i64 @mcount(), !insn.addr !1554
  %2 = add i64 %device, 22484, !insn.addr !1555
  %3 = inttoptr i64 %2 to i8*, !insn.addr !1555
  store i8 ptrtoint (i32* @global_var_1 to i8), i8* %3, align 1, !insn.addr !1555
  %4 = mul i64 %0, zext (i32 trunc (i64 add (i64 ptrtoint (i16* @global_var_4 to i64), i64 1) to i32) to i64), !insn.addr !1556
  %5 = and i64 %4, 4294967295, !insn.addr !1556
  %6 = mul i64 %0, mul (i64 zext (i32 trunc (i64 add (i64 ptrtoint (i16* @global_var_4 to i64), i64 1) to i32) to i64), i64 zext (i32 trunc (i64 add (i64 ptrtoint (i32* @global_var_1 to i64), i64 1) to i32) to i64)), !insn.addr !1557
  %7 = and i64 %6, 4294967295, !insn.addr !1557
  %8 = inttoptr i64 %7 to i64*, !insn.addr !1558
  %9 = call i64 @DelayMilliseconds.518(i64* %8, i64 %5), !insn.addr !1558
  store i8 0, i8* %3, align 1, !insn.addr !1559
  ret i64 ptrtoint (i32* @global_var_1 to i64), !insn.addr !1560
}

define i64 @Hardware_Init.607(i64 %arg1) local_unnamed_addr {
dec_label_pc_3afa:
  %stack_var_-40 = alloca i8, align 1
  %stack_var_-56 = alloca i8, align 1
  %0 = call i64 @mcount(), !insn.addr !1561
  store i8 0, i8* %stack_var_-40, align 1, !insn.addr !1562
  store i8 -56, i8* %stack_var_-56, align 1, !insn.addr !1563
  %1 = call i64 @SmiReadRegister.403(i64 %arg1, i64 0, i64 0, i64 2176, i8* nonnull %stack_var_-40, i64* bitcast (i16* @global_var_4 to i64*), i8 -56), !insn.addr !1564
  %2 = load i8, i8* %stack_var_-40, align 1, !insn.addr !1565
  %3 = and i8 %2, -64, !insn.addr !1565
  store i8 %3, i8* %stack_var_-40, align 1, !insn.addr !1565
  %4 = call i64 @SmiWriteRegister.143(i64 %arg1, i64 0, i64 0, i64 2176, i8* nonnull %stack_var_-40, i64* bitcast (i16* @global_var_4 to i64*)), !insn.addr !1566
  %5 = call i64 @SmiWriteRegister.143(i64 %arg1, i64 0, i64 0, i64 2308, i8* nonnull %stack_var_-56, i64* bitcast (i16* @global_var_4 to i64*)), !insn.addr !1567
  %6 = call i64 @DelayMilliseconds.518(i64* bitcast (i32* @global_var_2 to i64*), i64 0), !insn.addr !1568
  ret i64 %6, !insn.addr !1569
}

define void @Hardware_RemoveDevice(i64 %device) local_unnamed_addr {
dec_label_pc_3ba8:
  ret void, !insn.addr !1570
}

define void @Hardware_StopTSStream(i64 %device, i8 %tuner_number) local_unnamed_addr {
dec_label_pc_3bb8:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = call i64 @__decompiler_undefined_function_0()
  %2 = call i64 @__decompiler_undefined_function_0()
  %3 = call i64 @__decompiler_undefined_function_0()
  %4 = call i64 @__decompiler_undefined_function_0()
  %5 = call i64 @__decompiler_undefined_function_0()
  %6 = sext i8 %tuner_number to i64
  %7 = trunc i64 %5 to i8
  %8 = mul i8 %7, 2, !insn.addr !1571
  %9 = inttoptr i64 %5 to i8*, !insn.addr !1571
  store i8 %8, i8* %9, align 1, !insn.addr !1571
  %10 = inttoptr i64 %1 to i8*, !insn.addr !1572
  %11 = inttoptr i64 %0 to i64*, !insn.addr !1572
  %12 = call i64 @SmiWriteRegister.143(i64 %2, i64 %6, i64 %3, i64 %4, i8* %10, i64* %11), !insn.addr !1572
  %13 = call i64 @SmiTunerPowerDown.570(i64 %2), !insn.addr !1573
  ret void, !insn.addr !1574
}

define i64 @Hardware_RemoveDevice.586() local_unnamed_addr {
dec_label_pc_3bd8:
  %0 = call i64 @mcount(), !insn.addr !1575
  %1 = call i64 @SmiFreeDeviceResources.341(), !insn.addr !1576
  ret i64 %1, !insn.addr !1577
}

define i64 @Hardware_StopTSStream.617(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_3be8:
  %rdi.1.reg2mem = alloca i64, !insn.addr !1578
  %rdx.1.reg2mem = alloca i64, !insn.addr !1578
  %rdx.0.reg2mem = alloca i64, !insn.addr !1578
  %0 = call i64 @mcount(), !insn.addr !1579
  store i64 0, i64* %rdx.0.reg2mem, !insn.addr !1580
  br label %dec_label_pc_3c0b, !insn.addr !1580

dec_label_pc_3c0b:                                ; preds = %dec_label_pc_3c0b, %dec_label_pc_3be8
  %rdx.0.reload = load i64, i64* %rdx.0.reg2mem
  %1 = add nuw nsw i64 %rdx.0.reload, zext (i32 ptrtoint (i32* @global_var_1 to i32) to i64), !insn.addr !1581
  %2 = and i64 %1, 4294967295, !insn.addr !1581
  %3 = trunc i64 %1 to i32, !insn.addr !1582
  %4 = icmp eq i32 %3, ptrtoint (i8* @global_var_8 to i32), !insn.addr !1582
  %5 = icmp eq i1 %4, false, !insn.addr !1583
  store i64 %2, i64* %rdx.0.reg2mem, !insn.addr !1583
  br i1 %5, label %dec_label_pc_3c0b, label %dec_label_pc_3c39.preheader, !insn.addr !1583

dec_label_pc_3c39.preheader:                      ; preds = %dec_label_pc_3c0b
  %6 = trunc i64 %arg2 to i32
  %7 = and i32 %6, ptrtoint (i32* @global_var_1 to i32), !insn.addr !1584
  %8 = icmp eq i32 %7, 0, !insn.addr !1584
  %9 = icmp eq i1 %8, false, !insn.addr !1585
  store i64 0, i64* %rdx.1.reg2mem
  store i64 %arg1, i64* %rdi.1.reg2mem
  br label %dec_label_pc_3c39

dec_label_pc_3c39:                                ; preds = %dec_label_pc_3c39.preheader, %dec_label_pc_3c4d
  %rdi.1.reload = load i64, i64* %rdi.1.reg2mem
  %rdx.1.reload = load i64, i64* %rdx.1.reg2mem
  br i1 %9, label %dec_label_pc_3c46, label %dec_label_pc_3c3d, !insn.addr !1585

dec_label_pc_3c3d:                                ; preds = %dec_label_pc_3c39
  %10 = add i64 %rdi.1.reload, 24954, !insn.addr !1586
  %11 = inttoptr i64 %10 to i8*, !insn.addr !1586
  store i8 0, i8* %11, align 1, !insn.addr !1586
  br label %dec_label_pc_3c4d, !insn.addr !1587

dec_label_pc_3c46:                                ; preds = %dec_label_pc_3c39
  %12 = add i64 %rdi.1.reload, 24944, !insn.addr !1588
  %13 = inttoptr i64 %12 to i8*, !insn.addr !1588
  store i8 0, i8* %13, align 1, !insn.addr !1588
  br label %dec_label_pc_3c4d, !insn.addr !1588

dec_label_pc_3c4d:                                ; preds = %dec_label_pc_3c46, %dec_label_pc_3c3d
  %14 = add nuw nsw i64 %rdx.1.reload, zext (i32 ptrtoint (i32* @global_var_1 to i32) to i64), !insn.addr !1589
  %15 = and i64 %14, 4294967295, !insn.addr !1589
  %16 = add i64 %rdi.1.reload, ptrtoint (i32* @global_var_1 to i64), !insn.addr !1590
  %17 = trunc i64 %14 to i8, !insn.addr !1591
  %18 = icmp eq i8 %17, ptrtoint (i8* @global_var_a to i8), !insn.addr !1591
  %19 = icmp eq i1 %18, false, !insn.addr !1592
  store i64 %15, i64* %rdx.1.reg2mem, !insn.addr !1592
  store i64 %16, i64* %rdi.1.reg2mem, !insn.addr !1592
  br i1 %19, label %dec_label_pc_3c39, label %dec_label_pc_3c59, !insn.addr !1592

dec_label_pc_3c59:                                ; preds = %dec_label_pc_3c4d
  %20 = urem i64 %arg2, 64, !insn.addr !1593
  %21 = icmp eq i64 %20, 0, !insn.addr !1593
  %22 = shl i64 ptrtoint (i32* @global_var_1 to i64), %20
  %.op = and i64 %22, 170
  %23 = icmp eq i64 %.op, 0
  %24 = icmp eq i1 %23, false
  %25 = select i1 %21, i1 icmp ne (i64 and (i64 ptrtoint (i32* @global_var_1 to i64), i64 170), i64 0), i1 %24, !insn.addr !1594
  br i1 %25, label %dec_label_pc_3cac, label %dec_label_pc_3c6e, !insn.addr !1594

dec_label_pc_3c6e:                                ; preds = %dec_label_pc_3c59
  %26 = add i64 %arg1, 22779, !insn.addr !1595
  %27 = inttoptr i64 %26 to i8*, !insn.addr !1595
  store i8 ptrtoint (i32* @global_var_1 to i8), i8* %27, align 1, !insn.addr !1595
  %28 = call i64 @smi_cancel_dma_B.394(i64 %arg1), !insn.addr !1596
  %29 = add i64 %arg1, 22624, !insn.addr !1597
  %30 = call i64 @storageBufferFlush.347(i64 %29), !insn.addr !1598
  %31 = add i64 %arg1, 22778, !insn.addr !1599
  %32 = inttoptr i64 %31 to i8*, !insn.addr !1599
  store i8 0, i8* %32, align 1, !insn.addr !1599
  %33 = call i64 @HwSoftReset.257(i64 %arg1, i64* bitcast (i8* @global_var_a to i64*)), !insn.addr !1600
  ret i64 %33, !insn.addr !1601

dec_label_pc_3cac:                                ; preds = %dec_label_pc_3c59
  %34 = add i64 %arg1, 22777, !insn.addr !1602
  %35 = inttoptr i64 %34 to i8*, !insn.addr !1602
  store i8 ptrtoint (i32* @global_var_1 to i8), i8* %35, align 1, !insn.addr !1602
  %36 = call i64 @smi_cancel_dma_A.218(i64 %arg1), !insn.addr !1603
  ret i64 %36, !insn.addr !1604
}

define void @Hardware_StopTSStream_Force(i64 %device, i8 %tuner_number) local_unnamed_addr {
dec_label_pc_3cc2:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = call i64 @storageBufferFlush.347(i64 %device), !insn.addr !1605
  %2 = add i64 %0, 22776, !insn.addr !1606
  %3 = inttoptr i64 %2 to i8*, !insn.addr !1606
  store i8 0, i8* %3, align 1, !insn.addr !1606
  %4 = add i64 %0, 200, !insn.addr !1607
  %5 = inttoptr i64 %4 to i8*, !insn.addr !1607
  %6 = load i8, i8* %5, align 1, !insn.addr !1607
  %7 = icmp eq i8 %6, 0, !insn.addr !1607
  %8 = icmp eq i1 %7, false, !insn.addr !1608
  br i1 %8, label %dec_label_pc_3ce4, label %dec_label_pc_3cd7, !insn.addr !1608

dec_label_pc_3cd7:                                ; preds = %dec_label_pc_3cc2
  %9 = call i64 @HwSoftReset.257(i64 %0, i64* bitcast (i8* @global_var_a to i64*)), !insn.addr !1609
  br label %dec_label_pc_3ce4, !insn.addr !1609

dec_label_pc_3ce4:                                ; preds = %dec_label_pc_3cd7, %dec_label_pc_3cc2
  %10 = add i64 %0, 22448, !insn.addr !1610
  %11 = inttoptr i64 %10 to i8*, !insn.addr !1610
  store i8 0, i8* %11, align 1, !insn.addr !1610
  ret void, !insn.addr !1611
}

define i64 @Hardware_StopTSStream_Force.599(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_3cf2:
  %0 = call i64 @mcount(), !insn.addr !1612
  %1 = urem i64 %arg2, 64, !insn.addr !1613
  %2 = icmp eq i64 %1, 0, !insn.addr !1613
  %3 = shl i64 ptrtoint (i32* @global_var_1 to i64), %1
  %.op = and i64 %3, 170
  %4 = icmp eq i64 %.op, 0
  %5 = icmp eq i1 %4, false
  %6 = select i1 %2, i1 icmp ne (i64 and (i64 ptrtoint (i32* @global_var_1 to i64), i64 170), i64 0), i1 %5, !insn.addr !1614
  br i1 %6, label %dec_label_pc_3d52, label %dec_label_pc_3d17, !insn.addr !1614

dec_label_pc_3d17:                                ; preds = %dec_label_pc_3cf2
  %7 = add i64 %arg1, 22779, !insn.addr !1615
  %8 = inttoptr i64 %7 to i8*, !insn.addr !1615
  store i8 ptrtoint (i32* @global_var_1 to i8), i8* %8, align 1, !insn.addr !1615
  %9 = call i64 @smi_cancel_dma_B.394(i64 %arg1), !insn.addr !1616
  %10 = add i64 %arg1, 22624, !insn.addr !1617
  %11 = call i64 @storageBufferFlush.347(i64 %10), !insn.addr !1618
  %12 = add i64 %arg1, 22778, !insn.addr !1619
  %13 = inttoptr i64 %12 to i8*, !insn.addr !1619
  store i8 0, i8* %13, align 1, !insn.addr !1619
  %14 = call i64 @HwSoftReset.257(i64 %arg1, i64* bitcast (i8* @global_var_a to i64*)), !insn.addr !1620
  ret i64 %14, !insn.addr !1621

dec_label_pc_3d52:                                ; preds = %dec_label_pc_3cf2
  %15 = add i64 %arg1, 22777, !insn.addr !1622
  %16 = inttoptr i64 %15 to i8*, !insn.addr !1622
  store i8 ptrtoint (i32* @global_var_1 to i8), i8* %16, align 1, !insn.addr !1622
  %17 = call i64 @smi_cancel_dma_A.218(i64 %arg1), !insn.addr !1623
  ret i64 %17, !insn.addr !1624
}

define i64 @Hardware_StartTSStream(i64 %device, i8 %tuner_number) local_unnamed_addr {
dec_label_pc_3d65:
  %rax.0.reg2mem = alloca i64, !insn.addr !1625
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = call i64 @storageBufferFlush.347(i64 %device), !insn.addr !1625
  %2 = add i64 %0, 22776, !insn.addr !1626
  %3 = inttoptr i64 %2 to i8*, !insn.addr !1626
  store i8 0, i8* %3, align 1, !insn.addr !1626
  %4 = add i64 %0, 200, !insn.addr !1627
  %5 = inttoptr i64 %4 to i8*, !insn.addr !1627
  %6 = load i8, i8* %5, align 1, !insn.addr !1627
  %7 = icmp eq i8 %6, 0, !insn.addr !1627
  %8 = icmp eq i1 %7, false, !insn.addr !1628
  store i64 %1, i64* %rax.0.reg2mem, !insn.addr !1628
  br i1 %8, label %dec_label_pc_3d87, label %dec_label_pc_3d7a, !insn.addr !1628

dec_label_pc_3d7a:                                ; preds = %dec_label_pc_3d65
  %9 = call i64 @HwSoftReset.257(i64 %0, i64* bitcast (i8* @global_var_a to i64*)), !insn.addr !1629
  store i64 %9, i64* %rax.0.reg2mem, !insn.addr !1629
  br label %dec_label_pc_3d87, !insn.addr !1629

dec_label_pc_3d87:                                ; preds = %dec_label_pc_3d7a, %dec_label_pc_3d65
  %rax.0.reload = load i64, i64* %rax.0.reg2mem
  %10 = add i64 %0, 22448, !insn.addr !1630
  %11 = inttoptr i64 %10 to i8*, !insn.addr !1630
  store i8 0, i8* %11, align 1, !insn.addr !1630
  ret i64 %rax.0.reload, !insn.addr !1631
}

define i64 @Hardware_StartTSStream.564(i64 %arg1, i8 %arg2) local_unnamed_addr {
dec_label_pc_3d95:
  %rax.1.reg2mem = alloca i64, !insn.addr !1632
  %rdi.1.reg2mem = alloca i64, !insn.addr !1632
  %rdx.1.reg2mem = alloca i64, !insn.addr !1632
  %merge.reg2mem = alloca i64, !insn.addr !1632
  %rdi.0.reg2mem = alloca i64, !insn.addr !1632
  %rdx.0.reg2mem = alloca i64, !insn.addr !1632
  %0 = call i64 @mcount(), !insn.addr !1633
  %1 = sext i8 %arg2 to i64, !insn.addr !1634
  %2 = add i64 %arg1, 888, !insn.addr !1635
  store i64 0, i64* %rdx.0.reg2mem, !insn.addr !1636
  store i64 %2, i64* %rdi.0.reg2mem, !insn.addr !1636
  br label %dec_label_pc_3db8, !insn.addr !1636

dec_label_pc_3db8:                                ; preds = %dec_label_pc_3dd3, %dec_label_pc_3d95
  %rdi.0.reload = load i64, i64* %rdi.0.reg2mem
  %rdx.0.reload = load i64, i64* %rdx.0.reg2mem
  %3 = trunc i64 %rdx.0.reload to i8, !insn.addr !1637
  %4 = icmp eq i8 %3, %arg2, !insn.addr !1637
  br i1 %4, label %dec_label_pc_3dd3, label %dec_label_pc_3dbc, !insn.addr !1638

dec_label_pc_3dbc:                                ; preds = %dec_label_pc_3db8
  %5 = xor i8 %3, %arg2, !insn.addr !1639
  %6 = and i8 %5, ptrtoint (i32* @global_var_1 to i8), !insn.addr !1639
  %7 = icmp eq i8 %6, 0, !insn.addr !1639
  %8 = icmp eq i1 %7, false, !insn.addr !1640
  br i1 %8, label %dec_label_pc_3dd3, label %dec_label_pc_3dc4, !insn.addr !1640

dec_label_pc_3dc4:                                ; preds = %dec_label_pc_3dbc
  %9 = inttoptr i64 %rdi.0.reload to i8*, !insn.addr !1641
  %10 = load i8, i8* %9, align 1, !insn.addr !1641
  %11 = icmp eq i8 %10, 1, !insn.addr !1641
  %12 = icmp eq i1 %11, false, !insn.addr !1642
  store i64 ptrtoint (i32* @global_var_1 to i64), i64* %merge.reg2mem, !insn.addr !1642
  br i1 %12, label %dec_label_pc_3dd3, label %dec_label_pc_3dc9, !insn.addr !1642

dec_label_pc_3dc9:                                ; preds = %dec_label_pc_3dc4, %dec_label_pc_3e7a, %dec_label_pc_3e92
  %merge.reload = load i64, i64* %merge.reg2mem
  ret i64 %merge.reload, !insn.addr !1643

dec_label_pc_3dd3:                                ; preds = %dec_label_pc_3dc4, %dec_label_pc_3dbc, %dec_label_pc_3db8
  %13 = add nuw nsw i64 %rdx.0.reload, zext (i32 ptrtoint (i32* @global_var_1 to i32) to i64), !insn.addr !1644
  %14 = and i64 %13, 4294967295, !insn.addr !1644
  %15 = add i64 %rdi.0.reload, 1, !insn.addr !1645
  %16 = trunc i64 %13 to i32, !insn.addr !1646
  %17 = icmp eq i32 %16, ptrtoint (i8* @global_var_8 to i32), !insn.addr !1646
  %18 = icmp eq i1 %17, false, !insn.addr !1647
  store i64 %14, i64* %rdx.0.reg2mem, !insn.addr !1647
  store i64 %15, i64* %rdi.0.reg2mem, !insn.addr !1647
  br i1 %18, label %dec_label_pc_3db8, label %dec_label_pc_3ddf, !insn.addr !1647

dec_label_pc_3ddf:                                ; preds = %dec_label_pc_3dd3
  %19 = zext i8 %arg2 to i32
  %20 = and i32 %19, and (i32 ptrtoint (i32* @global_var_1 to i32), i32 255), !insn.addr !1648
  %21 = icmp eq i32 %20, 0, !insn.addr !1648
  %22 = icmp eq i1 %21, false, !insn.addr !1649
  store i64 0, i64* %rdx.1.reg2mem, !insn.addr !1650
  store i64 %arg1, i64* %rdi.1.reg2mem, !insn.addr !1650
  br label %dec_label_pc_3df1, !insn.addr !1650

dec_label_pc_3df1:                                ; preds = %dec_label_pc_3e08, %dec_label_pc_3ddf
  %rdi.1.reload = load i64, i64* %rdi.1.reg2mem
  %rdx.1.reload = load i64, i64* %rdx.1.reg2mem
  br i1 %22, label %dec_label_pc_3e01, label %dec_label_pc_3df8, !insn.addr !1649

dec_label_pc_3df8:                                ; preds = %dec_label_pc_3df1
  %23 = add i64 %rdi.1.reload, 24954, !insn.addr !1651
  %24 = inttoptr i64 %23 to i8*, !insn.addr !1651
  store i8 0, i8* %24, align 1, !insn.addr !1651
  br label %dec_label_pc_3e08, !insn.addr !1652

dec_label_pc_3e01:                                ; preds = %dec_label_pc_3df1
  %25 = add i64 %rdi.1.reload, 24944, !insn.addr !1653
  %26 = inttoptr i64 %25 to i8*, !insn.addr !1653
  store i8 0, i8* %26, align 1, !insn.addr !1653
  br label %dec_label_pc_3e08, !insn.addr !1653

dec_label_pc_3e08:                                ; preds = %dec_label_pc_3e01, %dec_label_pc_3df8
  %27 = add nuw nsw i64 %rdx.1.reload, zext (i32 ptrtoint (i32* @global_var_1 to i32) to i64), !insn.addr !1654
  %28 = and i64 %27, 4294967295, !insn.addr !1654
  %29 = add i64 %rdi.1.reload, ptrtoint (i32* @global_var_1 to i64), !insn.addr !1655
  %30 = trunc i64 %27 to i8, !insn.addr !1656
  %31 = icmp eq i8 %30, ptrtoint (i8* @global_var_a to i8), !insn.addr !1656
  %32 = icmp eq i1 %31, false, !insn.addr !1657
  store i64 %28, i64* %rdx.1.reg2mem, !insn.addr !1657
  store i64 %29, i64* %rdi.1.reg2mem, !insn.addr !1657
  br i1 %32, label %dec_label_pc_3df1, label %dec_label_pc_3e14, !insn.addr !1657

dec_label_pc_3e14:                                ; preds = %dec_label_pc_3e08
  %33 = urem i64 %1, 256, !insn.addr !1658
  %34 = urem i64 %1, 64, !insn.addr !1659
  %35 = icmp eq i64 %34, 0, !insn.addr !1659
  %36 = shl i64 ptrtoint (i32* @global_var_1 to i64), %34
  %.op = and i64 %36, 170
  %37 = icmp eq i64 %.op, 0
  %38 = icmp eq i1 %37, false
  %39 = select i1 %35, i1 icmp ne (i64 and (i64 ptrtoint (i32* @global_var_1 to i64), i64 170), i64 0), i1 %38, !insn.addr !1660
  %40 = call i64 @SetTSMode.519(i64 %arg1, i64 %33)
  br i1 %39, label %dec_label_pc_3e7a, label %dec_label_pc_3e29, !insn.addr !1660

dec_label_pc_3e29:                                ; preds = %dec_label_pc_3e14
  %41 = add i64 %arg1, 22779, !insn.addr !1661
  %42 = inttoptr i64 %41 to i8*, !insn.addr !1661
  store i8 0, i8* %42, align 1, !insn.addr !1661
  %43 = add i64 %arg1, 22778, !insn.addr !1662
  %44 = inttoptr i64 %43 to i8*, !insn.addr !1662
  %45 = load i8, i8* %44, align 1, !insn.addr !1662
  %46 = icmp eq i8 %45, 0, !insn.addr !1662
  %47 = icmp eq i1 %46, false, !insn.addr !1663
  store i64 %40, i64* %rax.1.reg2mem, !insn.addr !1663
  br i1 %47, label %dec_label_pc_3e5c, label %dec_label_pc_3e49, !insn.addr !1663

dec_label_pc_3e49:                                ; preds = %dec_label_pc_3e29
  store i8 ptrtoint (i32* @global_var_1 to i8), i8* %44, align 1, !insn.addr !1664
  %48 = call i64 @smi_cfg_dma_B.244(i64 %arg1), !insn.addr !1665
  store i64 %48, i64* %rax.1.reg2mem, !insn.addr !1666
  br label %dec_label_pc_3e5c, !insn.addr !1666

dec_label_pc_3e5c:                                ; preds = %dec_label_pc_3e49, %dec_label_pc_3e29
  %rax.1.reload = load i64, i64* %rax.1.reg2mem
  %49 = add i64 %arg1, 24937, !insn.addr !1667
  %50 = inttoptr i64 %49 to i8*, !insn.addr !1667
  store i8 ptrtoint (i32* @global_var_1 to i8), i8* %50, align 1, !insn.addr !1667
  %51 = add i64 %arg1, 24940, !insn.addr !1668
  %52 = inttoptr i64 %51 to i8*, !insn.addr !1668
  store i8 0, i8* %52, align 1, !insn.addr !1668
  %53 = add i64 %arg1, 24941, !insn.addr !1669
  %54 = inttoptr i64 %53 to i8*, !insn.addr !1669
  store i8 ptrtoint (i32* @global_var_1 to i8), i8* %54, align 1, !insn.addr !1669
  %55 = add i64 %arg1, 24943, !insn.addr !1670
  %56 = inttoptr i64 %55 to i8*, !insn.addr !1670
  store i8 0, i8* %56, align 1, !insn.addr !1670
  ret i64 %rax.1.reload, !insn.addr !1671

dec_label_pc_3e7a:                                ; preds = %dec_label_pc_3e14
  %57 = add i64 %arg1, 22777, !insn.addr !1672
  %58 = inttoptr i64 %57 to i8*, !insn.addr !1672
  store i8 0, i8* %58, align 1, !insn.addr !1672
  %59 = add i64 %arg1, 22776, !insn.addr !1673
  %60 = inttoptr i64 %59 to i8*, !insn.addr !1673
  %61 = load i8, i8* %60, align 1, !insn.addr !1673
  %62 = icmp eq i8 %61, 0, !insn.addr !1673
  %63 = icmp eq i1 %62, false, !insn.addr !1674
  store i64 %40, i64* %merge.reg2mem, !insn.addr !1674
  br i1 %63, label %dec_label_pc_3dc9, label %dec_label_pc_3e92, !insn.addr !1674

dec_label_pc_3e92:                                ; preds = %dec_label_pc_3e7a
  store i8 ptrtoint (i32* @global_var_1 to i8), i8* %60, align 1, !insn.addr !1675
  %64 = call i64 @smi_cfg_dma_A.319(i64 %arg1), !insn.addr !1676
  store i64 %64, i64* %merge.reg2mem, !insn.addr !1677
  br label %dec_label_pc_3dc9, !insn.addr !1677
}

define i64 @Hardware_StartTSStream_Force(i64 %device, i8 %tuner_number) local_unnamed_addr {
dec_label_pc_3eab:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = call i64 @__decompiler_undefined_function_0()
  %2 = trunc i64 %1 to i8
  %3 = mul i8 %2, 2, !insn.addr !1678
  %4 = inttoptr i64 %1 to i8*, !insn.addr !1678
  store i8 %3, i8* %4, align 1, !insn.addr !1678
  %5 = add i64 %0, 24939, !insn.addr !1679
  %6 = inttoptr i64 %5 to i8*, !insn.addr !1679
  store i8 ptrtoint (i32* @global_var_1 to i8), i8* %6, align 1, !insn.addr !1679
  %7 = add i64 %0, 24942, !insn.addr !1680
  %8 = inttoptr i64 %7 to i8*, !insn.addr !1680
  store i8 0, i8* %8, align 1, !insn.addr !1680
  %9 = add i64 %0, 22448, !insn.addr !1681
  %10 = inttoptr i64 %9 to i8*, !insn.addr !1681
  store i8 ptrtoint (i32* @global_var_1 to i8), i8* %10, align 1, !insn.addr !1681
  ret i64 ptrtoint (i32* @global_var_1 to i64), !insn.addr !1682
}

define i64 @Hardware_StartTSStream_Force.523(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_3edb:
  %0 = call i64 @mcount(), !insn.addr !1683
  %1 = urem i64 %arg2, 64, !insn.addr !1684
  %2 = icmp eq i64 %1, 0, !insn.addr !1684
  %3 = shl i64 ptrtoint (i32* @global_var_1 to i64), %1
  %.op = and i64 %3, 170
  %4 = icmp eq i64 %.op, 0
  %5 = icmp eq i1 %4, false
  %6 = select i1 %2, i1 icmp ne (i64 and (i64 ptrtoint (i32* @global_var_1 to i64), i64 170), i64 0), i1 %5, !insn.addr !1685
  %7 = urem i64 %arg2, 256
  %8 = call i64 @SetTSMode.519(i64 %arg1, i64 %7)
  br i1 %6, label %dec_label_pc_3f32, label %dec_label_pc_3f00, !insn.addr !1685

dec_label_pc_3f00:                                ; preds = %dec_label_pc_3edb
  %9 = add i64 %arg1, 22779, !insn.addr !1686
  %10 = inttoptr i64 %9 to i8*, !insn.addr !1686
  store i8 0, i8* %10, align 1, !insn.addr !1686
  %11 = add i64 %arg1, 22778, !insn.addr !1687
  %12 = inttoptr i64 %11 to i8*, !insn.addr !1687
  store i8 ptrtoint (i32* @global_var_1 to i8), i8* %12, align 1, !insn.addr !1687
  %13 = call i64 @smi_cfg_dma_B.244(i64 %arg1), !insn.addr !1688
  ret i64 %13, !insn.addr !1689

dec_label_pc_3f32:                                ; preds = %dec_label_pc_3edb
  %14 = add i64 %arg1, 22777, !insn.addr !1690
  %15 = inttoptr i64 %14 to i8*, !insn.addr !1690
  store i8 0, i8* %15, align 1, !insn.addr !1690
  ret i64 %8, !insn.addr !1691
}

define i64 @FUSBDTV_SendTVCmd(i64 %deviceExtension, i8* %pCxOut5bytes, i8* %pCxInData, i16 %CxInLen, i16 %TimeOUT) local_unnamed_addr {
dec_label_pc_3f50:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = call i64 @__decompiler_undefined_function_0()
  %2 = call i64 @__decompiler_undefined_function_0()
  %3 = sext i16 %CxInLen to i64
  %4 = trunc i64 %1 to i8
  %5 = trunc i64 %2 to i8, !insn.addr !1692
  %6 = add i8 %5, %4, !insn.addr !1692
  %7 = inttoptr i64 %3 to i8*, !insn.addr !1692
  store i8 %6, i8* %7, align 1, !insn.addr !1692
  %8 = call i64 @smi_cfg_dma_A.319(i64 %0), !insn.addr !1693
  ret i64 %8, !insn.addr !1694
}

define i64 @FUSBDTV_SendTVCmd_Ex(i64 %deviceExtension, i8* %pCxOut5bytes, i8* %pCxInData, i16 %CxInLen, i8 %CxDirect, i16 %TimeOUT) local_unnamed_addr {
dec_label_pc_3f60:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = and i64 %0, -256, !insn.addr !1695
  %2 = or i64 %1, 87, !insn.addr !1695
  %3 = inttoptr i64 %2 to i8*, !insn.addr !1696
  %4 = load i8, i8* %3, align 1, !insn.addr !1696
  %5 = add i8 %4, 87, !insn.addr !1696
  store i8 %5, i8* %3, align 1, !insn.addr !1696
  %6 = add nsw i64 %2, 1, !insn.addr !1697
  %7 = inttoptr i64 %6 to i32*, !insn.addr !1697
  %8 = load i32, i32* %7, align 8, !insn.addr !1697
  %9 = trunc i64 %deviceExtension to i32, !insn.addr !1697
  %10 = add i32 %8, %9, !insn.addr !1697
  store i32 %10, i32* %7, align 8, !insn.addr !1697
  ret i64 %2, !insn.addr !1698
}

define i64 @FUSBDTV_Cmd_Get_DevRandomKey(i64 %deviceExtension) local_unnamed_addr {
dec_label_pc_3f70:
  %0 = call i64 @__decompiler_undefined_function_0()
  ret i64 %0
}

define void @GenEncCmd(i8 %bIndex, i8* %pData, i8 %DataLen, i8* %u8DevRandomKey) local_unnamed_addr {
dec_label_pc_3f80:
  %0 = call i64 @mcount(), !insn.addr !1699
  ret void, !insn.addr !1700
}

define i64 @FUSBDTV_SendTVCmd_Ex.383() local_unnamed_addr {
dec_label_pc_3f90:
  %0 = call i64 @mcount(), !insn.addr !1701
  ret i64 0, !insn.addr !1702
}

define i64 @FUSBDTV_Cmd_Get_DevRandomKey.334(i64 %arg1) local_unnamed_addr {
dec_label_pc_3fa0:
  %0 = call i64 @mcount(), !insn.addr !1703
  ret i64 0, !insn.addr !1704
}

define i64 @GenEncCmd.360(i64 %arg1, i64 %arg2, i64 %arg3) local_unnamed_addr {
dec_label_pc_3fb0:
  %0 = call i64 @mcount(), !insn.addr !1705
  %1 = trunc i64 %arg1 to i8, !insn.addr !1706
  %2 = lshr i8 %1, ptrtoint (i16* @global_var_4 to i8), !insn.addr !1706
  %3 = zext i8 %2 to i64, !insn.addr !1706
  %4 = and i64 %arg1, 4294967040, !insn.addr !1706
  %5 = or i64 %4, %3, !insn.addr !1706
  ret i64 %5, !insn.addr !1707
}

define i64 @FUSBDTV_Cmd_Set_RandomKey(i64 %deviceExtension, i8 %I2C_Addr) local_unnamed_addr {
dec_label_pc_3fe0:
  %0 = call i64 @__decompiler_undefined_function_0()
  ret i64 %0, !insn.addr !1708
}

define i64 @FUSBDTV_Cmd_T_confirm(i64 %deviceExtension, i8 %ChannelNum) local_unnamed_addr {
dec_label_pc_3ff0:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = call i64 @__decompiler_undefined_function_0()
  %2 = call i64 @__decompiler_undefined_function_0()
  %3 = sext i8 %ChannelNum to i64
  %4 = trunc i64 %0 to i8, !insn.addr !1709
  %5 = inttoptr i64 %3 to i8*, !insn.addr !1709
  store i8 %4, i8* %5, align 1, !insn.addr !1709
  %6 = add i64 %2, zext (i32 ptrtoint (i32* @global_var_1 to i32) to i64), !insn.addr !1710
  %7 = trunc i64 %6 to i8, !insn.addr !1711
  %8 = icmp ult i8 %7, ptrtoint (i8* @global_var_10 to i8), !insn.addr !1711
  %9 = icmp eq i1 %8, false, !insn.addr !1712
  %.v = select i1 %9, i64 %1, i64 %6
  %10 = and i64 %.v, 4294967295, !insn.addr !1712
  ret i64 %10, !insn.addr !1713
}

define i64 @FUSBDTV_Cmd_TimerStartStop(i64 %deviceExtension, i8 %ChannelNum, i8 %bStart) local_unnamed_addr {
dec_label_pc_4000:
  %0 = call i64 @__decompiler_undefined_function_0()
  ret i64 %0, !insn.addr !1714
}

define i64 @FUSBDTV_Cmd_ReadIR(i64 %deviceExtension, i8* %pDataBuf) local_unnamed_addr {
dec_label_pc_4010:
  %0 = call i64 @mcount(), !insn.addr !1715
  ret i64 0, !insn.addr !1716
}

define i64 @FUSBDTV_Cmd_SetIRMode(i64 %deviceExtension, i8 %ModeSel) local_unnamed_addr {
dec_label_pc_4020:
  %0 = call i64 @mcount(), !insn.addr !1717
  ret i64 0, !insn.addr !1718
}

define i64 @FUSBDTV_Cmd_StartDSC(i64 %deviceExtension, i8 %DSC_Num) local_unnamed_addr {
dec_label_pc_4030:
  %0 = call i64 @mcount(), !insn.addr !1719
  ret i64 ptrtoint (i32* @global_var_1 to i64), !insn.addr !1720
}

define i64 @FUSBDTV_Cmd_StopDSC(i64 %deviceExtension, i8 %DSC_Num) local_unnamed_addr {
dec_label_pc_4040:
  %0 = call i64 @mcount(), !insn.addr !1721
  ret i64 0, !insn.addr !1722
}

define i64 @FUSBDTV_Cmd_Reset_Channel(i64 %deviceExtension, i8 %Channel_Num, i8 %bSerial) local_unnamed_addr {
dec_label_pc_4050:
  %0 = call i64 @mcount(), !insn.addr !1723
  ret i64 0, !insn.addr !1724
}

define i64 @FUSBDTV_Cmd_GetDev_Speed(i64 %deviceExtension, i8* %bHighSpeed) local_unnamed_addr {
dec_label_pc_4060:
  %0 = call i64 @mcount(), !insn.addr !1725
  ret i64 ptrtoint (i32* @global_var_1 to i64), !insn.addr !1726
}

define i64 @FUSBDTV_Cmd_I2CRead_NoWt(i64 %deviceExtension, i8 %Slave_Addr, i16 %u16ReadLen, i8* %pDataBuf) local_unnamed_addr {
dec_label_pc_4070:
  %0 = call i64 @mcount(), !insn.addr !1727
  ret i64 0, !insn.addr !1728
}

define i64 @FUSBDTV_Cmd_I2CRead(i64 %deviceExtension, i8 %Slave_Addr, i8 %RegOffset, i16 %u16ReadLen, i8* %pDataBuf, i8 %byI2CFlag) local_unnamed_addr {
dec_label_pc_4080:
  %0 = call i64 @mcount(), !insn.addr !1729
  ret i64 0, !insn.addr !1730
}

define i64 @FUSBDTV_Cmd_I2CWrite(i64 %deviceExtension, i8 %Slave_Addr, i8 %RegOffset, i16 %u16WriteLen, i8* %pDataBuf) local_unnamed_addr {
dec_label_pc_4090:
  %0 = call i64 @mcount(), !insn.addr !1731
  ret i64 0, !insn.addr !1732
}

define i64 @FUSBDTV_Cmd_I2CWrite_noStop(i64 %deviceExtension, i8 %Slave_Addr, i8 %RegOffset, i16 %u16WriteLen, i8* %pDataBuf) local_unnamed_addr {
dec_label_pc_40a0:
  %0 = call i64 @mcount(), !insn.addr !1733
  ret i64 0, !insn.addr !1734
}

define i64 @FUSBDTV_Cmd_I2CBufFill(i64 %deviceExtension, i8 %u8BufOffset, i16 %u16WriteLen, i8* %pDataBuf) local_unnamed_addr {
dec_label_pc_40b0:
  %0 = call i64 @mcount(), !insn.addr !1735
  ret i64 0, !insn.addr !1736
}

define i64 @FUSBDTV_Cmd_I2CBufSend(i64 %deviceExtension, i8 %Slave_Addr, i16 %u16WriteLen, i8 %NoSendStopByte) local_unnamed_addr {
dec_label_pc_40c0:
  %0 = call i64 @mcount(), !insn.addr !1737
  ret i64 0, !insn.addr !1738
}

define i64 @FUSBDTV_Cmd_SysCtrlWrite(i64 %deviceExtension, i8 %RegOffset, i16 %u16WriteLen, i8* %pDataBuf) local_unnamed_addr {
dec_label_pc_40d0:
  %0 = call i64 @mcount(), !insn.addr !1739
  ret i64 0, !insn.addr !1740
}

define i64 @FUSBDTV_Cmd_CFRead(i64 %deviceExtension, i8 %CF_Num, i8 %RegOffset, i16 %u16ReadLen, i8* %pDataBuf) local_unnamed_addr {
dec_label_pc_40e0:
  %0 = call i64 @mcount(), !insn.addr !1741
  ret i64 0, !insn.addr !1742
}

define i64 @FUSBDTV_Cmd_CFWrite(i64 %deviceExtension, i8 %CF_Num, i8 %RegOffset, i16 %u16WriteLen, i8* %pDataBuf) local_unnamed_addr {
dec_label_pc_40f0:
  %0 = call i64 @mcount(), !insn.addr !1743
  ret i64 0, !insn.addr !1744
}

define i64 @FUSBDTV_Cmd_EncRead(i64 %deviceExtension, i8 %CF_Num, i8 %RegOffset, i16 %u16ReadLen, i8* %pDataBuf) local_unnamed_addr {
dec_label_pc_4100:
  %0 = call i64 @mcount(), !insn.addr !1745
  ret i64 0, !insn.addr !1746
}

define i64 @FUSBDTV_Cmd_EncWrite(i64 %deviceExtension, i8 %CF_Num, i8 %RegOffset, i16 %u16WriteLen, i8* %pDataBuf) local_unnamed_addr {
dec_label_pc_4110:
  %0 = call i64 @mcount(), !insn.addr !1747
  ret i64 0, !insn.addr !1748
}

define i64 @FUSBDTV_Cmd_Simulation_Enable(i64 %deviceExtension, i8 %u8Enable) local_unnamed_addr {
dec_label_pc_4120:
  %0 = call i64 @mcount(), !insn.addr !1749
  ret i64 0, !insn.addr !1750
}

define i64 @FUSBDTV_Cmd_Rst_Enc(i64 %deviceExtension) local_unnamed_addr {
dec_label_pc_4130:
  %0 = call i64 @mcount(), !insn.addr !1751
  ret i64 0, !insn.addr !1752
}

define i64 @FUSBDTV_Cmd_WriteEncReg(i64 %deviceExtension, i8 %RegOffset, i8 %RegData) local_unnamed_addr {
dec_label_pc_4140:
  %0 = call i64 @mcount(), !insn.addr !1753
  ret i64 0, !insn.addr !1754
}

define i64 @FUSBDTV_ResetParentPort(i8* %DeviceObject) local_unnamed_addr {
dec_label_pc_4150:
  %0 = call i64 @mcount(), !insn.addr !1755
  ret i64 0, !insn.addr !1756
}

define i64 @FUSBDTV_ProcessTransfer(i64 %TransferObject) local_unnamed_addr {
dec_label_pc_4160:
  %0 = call i64 @mcount(), !insn.addr !1757
  ret i64 0, !insn.addr !1758
}

define i64 @FUSBDTV_InitializeStreamUrb_ISR(i64 %TransferObject) local_unnamed_addr {
dec_label_pc_4170:
  %0 = call i64 @mcount(), !insn.addr !1759
  ret i64 0, !insn.addr !1760
}

define i64 @FUSBDTV_DecrementIoCount(i64 %deviceExtension) local_unnamed_addr {
dec_label_pc_4180:
  %0 = call i64 @mcount(), !insn.addr !1761
  ret i64 0, !insn.addr !1762
}

define void @FUSBDTV_IncrementIoCount(i64 %deviceExtension) local_unnamed_addr {
dec_label_pc_4190:
  %0 = call i64 @mcount(), !insn.addr !1763
  ret void, !insn.addr !1763
}

define void @FUSB_RstBulkPipe(i64 %deviceExtension, i8 %TunerNum) local_unnamed_addr {
dec_label_pc_419b:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = trunc i64 %0 to i8
  %2 = mul i8 %1, 2, !insn.addr !1764
  %3 = inttoptr i64 %0 to i8*, !insn.addr !1764
  store i8 %2, i8* %3, align 1, !insn.addr !1764
  ret void, !insn.addr !1765
}

define i64 @FUSBDTV_InitializeStreamUrb_ISR.448() local_unnamed_addr {
dec_label_pc_41a0:
  %0 = call i64 @__decompiler_undefined_function_0()
  ret i64 %0, !insn.addr !1766
}

define i64 @FUSBDTV_BulkIrp_Complete(i8* %DeviceObject, i8* %Irp, i8* %Context) local_unnamed_addr {
dec_label_pc_41a6:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = trunc i64 %0 to i8, !insn.addr !1767
  store i8 %1, i8* %DeviceObject, align 1, !insn.addr !1767
  ret i64 ptrtoint (i32* @global_var_1 to i64), !insn.addr !1768
}

define i64 @FUSBDTV_DecrementIoCount.282() local_unnamed_addr {
dec_label_pc_41b0:
  %0 = call i64 @__decompiler_undefined_function_0()
  ret i64 %0, !insn.addr !1769
}

define i64 @FUSBDTV_InitializeStreamUrb(i64 %TransferObject) local_unnamed_addr {
dec_label_pc_41b6:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = trunc i64 %0 to i8, !insn.addr !1770
  %2 = inttoptr i64 %TransferObject to i8*, !insn.addr !1770
  store i8 %1, i8* %2, align 1, !insn.addr !1770
  ret i64 0, !insn.addr !1771
}

define i64 @FUSBDTV_IncrementIoCount.228() local_unnamed_addr {
dec_label_pc_41c0:
  %0 = call i64 @__decompiler_undefined_function_0()
  ret i64 %0, !insn.addr !1772
}

define i64 @FUSBDTV_Cmd_RePlugInDevice(i64 %DeviceObject, i8 %wait_time) local_unnamed_addr {
dec_label_pc_41c6:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = trunc i64 %0 to i8, !insn.addr !1773
  %2 = inttoptr i64 %DeviceObject to i8*, !insn.addr !1773
  store i8 %1, i8* %2, align 1, !insn.addr !1773
  %3 = mul i64 %0, 2, !insn.addr !1774
  %4 = and i64 %3, 4294967294, !insn.addr !1774
  ret i64 %4, !insn.addr !1775
}

define i64 @FUSB_RstBulkPipe.452(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_41cb:
  %0 = call i64 @mcount(), !insn.addr !1776
  ret i64 %0, !insn.addr !1777
}

define i32 @findRingbufNumToDispatchByRuleTable(i8 %dmaCH, i8* %p, i64 %table, i32 %tablesize) local_unnamed_addr {
dec_label_pc_41d6:
  %0 = call i64 @mcount(), !insn.addr !1778
  ret i32 0, !insn.addr !1779
}

define i64 @FUSBDTV_InitializeStreamUrb.529() local_unnamed_addr {
dec_label_pc_41e6:
  %0 = call i64 @mcount(), !insn.addr !1780
  ret i64 ptrtoint (i32* @global_var_1 to i64), !insn.addr !1781
}

define i64 @FUSBDTV_Cmd_RePlugInDevice.287() local_unnamed_addr {
dec_label_pc_41f6:
  %0 = call i64 @mcount(), !insn.addr !1782
  ret i64 0, !insn.addr !1783
}

define i64 @findRingbufNumToDispatchByRuleTable.358(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4) local_unnamed_addr {
dec_label_pc_4206:
  %0 = call i64 @mcount(), !insn.addr !1784
  %1 = trunc i64 %arg1 to i8, !insn.addr !1785
  %2 = icmp eq i8 %1, 0, !insn.addr !1785
  %3 = icmp eq i1 %2, false, !insn.addr !1786
  %4 = zext i1 %3 to i64, !insn.addr !1787
  ret i64 %4, !insn.addr !1788
}

define i64 @ASV5220_GetCardInDetect(i8* %pCardDetect, i64 %hDEV) local_unnamed_addr {
dec_label_pc_4238:
  %rax.0.reg2mem = alloca i64, !insn.addr !1789
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = ptrtoint i8* %pCardDetect to i64
  %2 = trunc i64 %0 to i8
  %3 = icmp eq i8 %2, 0, !insn.addr !1789
  %4 = inttoptr i64 %0 to i8*, !insn.addr !1789
  store i8 %2, i8* %4, align 1, !insn.addr !1789
  br i1 %3, label %dec_label_pc_424a, label %dec_label_pc_423c, !insn.addr !1790

dec_label_pc_423c:                                ; preds = %dec_label_pc_4238
  %5 = add i64 %hDEV, ptrtoint (i32* @global_var_1 to i64), !insn.addr !1791
  %6 = inttoptr i64 %5 to i8*, !insn.addr !1791
  %7 = load i8, i8* %6, align 1, !insn.addr !1791
  %8 = add i64 %1, ptrtoint (i16* @global_var_4 to i64), !insn.addr !1792
  %9 = inttoptr i64 %8 to i8*, !insn.addr !1792
  %10 = load i8, i8* %9, align 1, !insn.addr !1792
  %11 = xor i8 %10, %7, !insn.addr !1793
  %12 = icmp slt i8 %11, 0, !insn.addr !1793
  store i64 4294967295, i64* %rax.0.reg2mem, !insn.addr !1794
  br i1 %12, label %dec_label_pc_4265, label %dec_label_pc_424a, !insn.addr !1794

dec_label_pc_424a:                                ; preds = %dec_label_pc_423c, %dec_label_pc_4238
  %13 = inttoptr i64 %hDEV to i8*, !insn.addr !1795
  store i8 71, i8* %13, align 1, !insn.addr !1795
  %14 = add i64 %1, ptrtoint (i8* @global_var_8 to i64), !insn.addr !1796
  %15 = inttoptr i64 %14 to i32*, !insn.addr !1796
  %16 = load i32, i32* %15, align 4, !insn.addr !1796
  %17 = icmp eq i32 %16, 0, !insn.addr !1796
  br i1 %17, label %dec_label_pc_4265, label %dec_label_pc_4253, !insn.addr !1797

dec_label_pc_4253:                                ; preds = %dec_label_pc_424a
  %18 = add i64 %hDEV, ptrtoint (i32* @global_var_1 to i64), !insn.addr !1798
  %19 = inttoptr i64 %18 to i8*, !insn.addr !1798
  %20 = load i8, i8* %19, align 1, !insn.addr !1798
  %21 = urem i8 %20, -128
  store i8 %21, i8* %19, align 1, !insn.addr !1798
  br label %dec_label_pc_4265, !insn.addr !1799

dec_label_pc_4265:                                ; preds = %dec_label_pc_423c, %dec_label_pc_4253, %dec_label_pc_424a
  %rax.0.reload = load i64, i64* %rax.0.reg2mem
  ret i64 %rax.0.reload, !insn.addr !1800
}

define i64 @ASV5220_GetCardInDetect.511(i8* %arg1) local_unnamed_addr {
dec_label_pc_4268:
  %0 = call i64 @mcount(), !insn.addr !1801
  ret i64 %0, !insn.addr !1802
}

define i64 @ASV5220_WriteCommand(i8* %WrData, i32 %WrLen, i64 %hDEV) local_unnamed_addr {
dec_label_pc_427a:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = call i64 @__decompiler_undefined_function_0()
  %2 = add i64 %0, -24, !insn.addr !1803
  %3 = inttoptr i64 %2 to i8*, !insn.addr !1804
  %4 = call i8 @bTunerReset(i8 -112, i8 ptrtoint (i16* @global_var_4 to i8), i8* %3), !insn.addr !1804
  %5 = inttoptr i64 %2 to i64*, !insn.addr !1805
  %6 = load i64, i64* %5, align 8, !insn.addr !1805
  %7 = lshr i64 %6, ptrtoint (i32** @global_var_14 to i64), !insn.addr !1806
  %8 = trunc i64 %7 to i8
  %9 = xor i8 %8, -4
  %10 = and i8 %9, ptrtoint (i32* @global_var_1 to i8), !insn.addr !1807
  %11 = inttoptr i64 %1 to i8*, !insn.addr !1808
  store i8 %10, i8* %11, align 1, !insn.addr !1808
  %12 = zext i8 %4 to i64, !insn.addr !1809
  ret i64 %12, !insn.addr !1810
}

define i64 @ASV5220_WriteCommand.367(i64 %arg1, i64 %arg2, i64 %arg3) local_unnamed_addr {
dec_label_pc_42aa:
  %r13.1.reg2mem = alloca i64, !insn.addr !1811
  %stack_var_-87.1.reg2mem = alloca i8, !insn.addr !1811
  %r13.0.ph.reg2mem = alloca i64, !insn.addr !1811
  %stack_var_-87.0.ph.reg2mem = alloca i8, !insn.addr !1811
  %stack_var_-72 = alloca i8*, align 8
  %stack_var_-88 = alloca i8, align 1
  %0 = call i64 @mcount(), !insn.addr !1812
  %sext = mul i64 %arg2, 72057594037927936
  %1 = sdiv i64 %sext, 72057594037927936, !insn.addr !1813
  %2 = inttoptr i64 %1 to i8*, !insn.addr !1813
  store i8* %2, i8** %stack_var_-72, align 8, !insn.addr !1813
  %3 = bitcast i8** %stack_var_-72 to i8*, !insn.addr !1814
  %4 = call i8 @bReadPcieReg(i16 3212, i16 ptrtoint (i16* @global_var_4 to i16), i8* nonnull %3, i64 %arg3), !insn.addr !1814
  store i8* bitcast (i8** @global_var_3 to i8*), i8** %stack_var_-72, align 8, !insn.addr !1815
  %5 = call i8 @bReadPcieReg(i16 3208, i16 ptrtoint (i16* @global_var_4 to i16), i8* nonnull %3, i64 %arg3), !insn.addr !1816
  %6 = urem i64 %arg2, 65536, !insn.addr !1817
  store i8 0, i8* %stack_var_-88, align 1, !insn.addr !1818
  store i64 0, i64* %r13.0.ph.reg2mem, !insn.addr !1819
  br label %dec_label_pc_4330.outer, !insn.addr !1819

dec_label_pc_4330.outer:                          ; preds = %dec_label_pc_4451, %dec_label_pc_42aa
  %r13.0.ph.reload = load i64, i64* %r13.0.ph.reg2mem
  %stack_var_-87.0.ph.reload = load i8, i8* %stack_var_-87.0.ph.reg2mem
  %7 = icmp ugt i8 %stack_var_-87.0.ph.reload, ptrtoint (i32** @global_var_1c to i8)
  br label %dec_label_pc_4330

dec_label_pc_4330:                                ; preds = %dec_label_pc_4330.outer, %dec_label_pc_4330
  %8 = call i8 @bTunerReset(i8 -108, i8 ptrtoint (i16* @global_var_4 to i8), i8* nonnull %stack_var_-88), !insn.addr !1820
  br i1 %7, label %dec_label_pc_4330, label %dec_label_pc_434b, !insn.addr !1821

dec_label_pc_434b:                                ; preds = %dec_label_pc_4330
  %9 = sub i64 %6, %r13.0.ph.reload, !insn.addr !1822
  %10 = trunc i64 %9 to i32, !insn.addr !1823
  %11 = icmp eq i32 %10, ptrtoint (i32* @global_var_1 to i32), !insn.addr !1823
  %12 = icmp eq i1 %11, false, !insn.addr !1824
  br i1 %12, label %dec_label_pc_439d, label %dec_label_pc_4356, !insn.addr !1824

dec_label_pc_4356:                                ; preds = %dec_label_pc_434b
  store i8 ptrtoint (i32* @global_var_1 to i8), i8* %stack_var_-88, align 1, !insn.addr !1825
  %13 = call i8 @bReadPcieReg(i16 3224, i16 ptrtoint (i16* @global_var_4 to i16), i8* nonnull %stack_var_-88, i64 %arg3), !insn.addr !1826
  %sext3 = mul i64 %r13.0.ph.reload, 4294967296
  %14 = sdiv i64 %sext3, 4294967296, !insn.addr !1827
  %15 = mul i64 %14, ptrtoint (i32* @global_var_1 to i64), !insn.addr !1828
  %16 = add i64 %15, %arg1, !insn.addr !1828
  %17 = inttoptr i64 %16 to i8*, !insn.addr !1829
  %18 = call i8 @bReadPcieReg(i16 ptrtoint (i16* @global_var_c90 to i16), i16 ptrtoint (i16* @global_var_4 to i16), i8* %17, i64 %arg3), !insn.addr !1829
  %19 = add i64 %r13.0.ph.reload, zext (i32 ptrtoint (i32* @global_var_1 to i32) to i64), !insn.addr !1830
  %20 = and i64 %19, 4294967295, !insn.addr !1830
  store i8 0, i8* %stack_var_-87.1.reg2mem, !insn.addr !1831
  store i64 %20, i64* %r13.1.reg2mem, !insn.addr !1831
  br label %dec_label_pc_4451, !insn.addr !1831

dec_label_pc_439d:                                ; preds = %dec_label_pc_434b
  %21 = icmp eq i32 %10, ptrtoint (i32* @global_var_2 to i32), !insn.addr !1832
  %22 = icmp eq i1 %21, false, !insn.addr !1833
  br i1 %22, label %dec_label_pc_43e6, label %dec_label_pc_43a2, !insn.addr !1833

dec_label_pc_43a2:                                ; preds = %dec_label_pc_439d
  store i8 ptrtoint (i8** @global_var_3 to i8), i8* %stack_var_-88, align 1, !insn.addr !1834
  %23 = call i8 @bReadPcieReg(i16 3224, i16 ptrtoint (i16* @global_var_4 to i16), i8* nonnull %stack_var_-88, i64 %arg3), !insn.addr !1835
  %sext4 = mul i64 %r13.0.ph.reload, 4294967296
  %24 = sdiv i64 %sext4, 4294967296, !insn.addr !1836
  %25 = mul i64 %24, ptrtoint (i32* @global_var_1 to i64), !insn.addr !1837
  %26 = add i64 %25, %arg1, !insn.addr !1837
  %27 = inttoptr i64 %26 to i8*, !insn.addr !1838
  %28 = call i8 @bReadPcieReg(i16 ptrtoint (i16* @global_var_c90 to i16), i16 ptrtoint (i16* @global_var_4 to i16), i8* %27, i64 %arg3), !insn.addr !1838
  %29 = add i64 %r13.0.ph.reload, zext (i32 ptrtoint (i32* @global_var_2 to i32) to i64), !insn.addr !1839
  %30 = and i64 %29, 4294967295, !insn.addr !1839
  store i8 0, i8* %stack_var_-87.1.reg2mem, !insn.addr !1840
  store i64 %30, i64* %r13.1.reg2mem, !insn.addr !1840
  br label %dec_label_pc_4451, !insn.addr !1840

dec_label_pc_43e6:                                ; preds = %dec_label_pc_439d
  %31 = icmp eq i32 %10, ptrtoint (i8** @global_var_3 to i32), !insn.addr !1841
  %32 = icmp eq i1 %31, false, !insn.addr !1842
  br i1 %32, label %dec_label_pc_442f, label %dec_label_pc_43eb, !insn.addr !1842

dec_label_pc_43eb:                                ; preds = %dec_label_pc_43e6
  store i8 ptrtoint (i8** @global_var_7 to i8), i8* %stack_var_-88, align 1, !insn.addr !1843
  %33 = call i8 @bReadPcieReg(i16 3224, i16 ptrtoint (i16* @global_var_4 to i16), i8* nonnull %stack_var_-88, i64 %arg3), !insn.addr !1844
  %sext5 = mul i64 %r13.0.ph.reload, 4294967296
  %34 = sdiv i64 %sext5, 4294967296, !insn.addr !1845
  %35 = mul i64 %34, ptrtoint (i32* @global_var_1 to i64), !insn.addr !1846
  %36 = add i64 %35, %arg1, !insn.addr !1846
  %37 = inttoptr i64 %36 to i8*, !insn.addr !1847
  %38 = call i8 @bReadPcieReg(i16 ptrtoint (i16* @global_var_c90 to i16), i16 ptrtoint (i16* @global_var_4 to i16), i8* %37, i64 %arg3), !insn.addr !1847
  %39 = add i64 %r13.0.ph.reload, zext (i32 ptrtoint (i8** @global_var_3 to i32) to i64), !insn.addr !1848
  %40 = and i64 %39, 4294967295, !insn.addr !1848
  store i8 0, i8* %stack_var_-87.1.reg2mem, !insn.addr !1849
  store i64 %40, i64* %r13.1.reg2mem, !insn.addr !1849
  br label %dec_label_pc_4451, !insn.addr !1849

dec_label_pc_442f:                                ; preds = %dec_label_pc_43e6
  %41 = icmp sgt i32 %10, ptrtoint (i8** @global_var_3 to i32), !insn.addr !1850
  store i8 %stack_var_-87.0.ph.reload, i8* %stack_var_-87.1.reg2mem, !insn.addr !1850
  store i64 %r13.0.ph.reload, i64* %r13.1.reg2mem, !insn.addr !1850
  br i1 %41, label %dec_label_pc_4434, label %dec_label_pc_4451, !insn.addr !1850

dec_label_pc_4434:                                ; preds = %dec_label_pc_442f
  %sext6 = mul i64 %r13.0.ph.reload, 4294967296
  %42 = sdiv i64 %sext6, 4294967296, !insn.addr !1851
  %43 = mul i64 %42, ptrtoint (i32* @global_var_1 to i64), !insn.addr !1852
  %44 = add i64 %43, %arg1, !insn.addr !1852
  %45 = inttoptr i64 %44 to i8*, !insn.addr !1853
  %46 = call i8 @bReadPcieReg(i16 ptrtoint (i16* @global_var_c90 to i16), i16 ptrtoint (i16* @global_var_4 to i16), i8* %45, i64 %arg3), !insn.addr !1853
  %47 = add i64 %r13.0.ph.reload, zext (i32 ptrtoint (i16* @global_var_4 to i32) to i64), !insn.addr !1854
  %48 = and i64 %47, 4294967295, !insn.addr !1854
  store i8 %stack_var_-87.0.ph.reload, i8* %stack_var_-87.1.reg2mem, !insn.addr !1854
  store i64 %48, i64* %r13.1.reg2mem, !insn.addr !1854
  br label %dec_label_pc_4451, !insn.addr !1854

dec_label_pc_4451:                                ; preds = %dec_label_pc_442f, %dec_label_pc_4434, %dec_label_pc_43eb, %dec_label_pc_43a2, %dec_label_pc_4356
  %r13.1.reload = load i64, i64* %r13.1.reg2mem
  %stack_var_-87.1.reload = load i8, i8* %stack_var_-87.1.reg2mem
  %49 = icmp sgt i64 %6, %r13.1.reload, !insn.addr !1855
  store i8 %stack_var_-87.1.reload, i8* %stack_var_-87.0.ph.reg2mem, !insn.addr !1855
  store i64 %r13.1.reload, i64* %r13.0.ph.reg2mem, !insn.addr !1855
  br i1 %49, label %dec_label_pc_4330.outer, label %dec_label_pc_445e.preheader, !insn.addr !1855

dec_label_pc_445e.preheader:                      ; preds = %dec_label_pc_4451
  %50 = icmp eq i8 %stack_var_-87.1.reload, 0
  %51 = icmp eq i1 %50, false
  br label %dec_label_pc_445e

dec_label_pc_445e:                                ; preds = %dec_label_pc_445e.preheader, %dec_label_pc_445e
  %52 = call i8 @bTunerReset(i8 -108, i8 ptrtoint (i16* @global_var_4 to i8), i8* nonnull %stack_var_-88), !insn.addr !1856
  br i1 %51, label %dec_label_pc_445e, label %dec_label_pc_4479, !insn.addr !1857

dec_label_pc_4479:                                ; preds = %dec_label_pc_445e
  %53 = sext i8 %52 to i64, !insn.addr !1856
  ret i64 %53, !insn.addr !1858
}

define i64 @ASV5220_SetBaudrate(i64 %hDEV) local_unnamed_addr {
dec_label_pc_4499:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = call i64 @__asm_sti(), !insn.addr !1859
  %2 = add i64 %1, 2370306049, !insn.addr !1860
  %3 = and i64 %2, 4294967295, !insn.addr !1860
  %4 = add nsw i64 %3, -119, !insn.addr !1861
  %5 = inttoptr i64 %4 to i8*, !insn.addr !1861
  store i8 -1, i8* %5, align 1, !insn.addr !1861
  %6 = inttoptr i64 %0 to i8*, !insn.addr !1862
  %7 = call i8 @bTunerReset(i8 -120, i8 ptrtoint (i16* @global_var_4 to i8), i8* %6), !insn.addr !1862
  ret i64 ptrtoint (i32* @global_var_1 to i64), !insn.addr !1863
}

define i64 @ASV5220_SetBaudrate.207(i64 %arg1) local_unnamed_addr {
dec_label_pc_44c9:
  %stack_var_-40 = alloca i8*, align 8
  %0 = call i64 @mcount(), !insn.addr !1864
  store i8* bitcast (i8** @global_var_b to i8*), i8** %stack_var_-40, align 8, !insn.addr !1865
  %1 = bitcast i8** %stack_var_-40 to i8*, !insn.addr !1866
  %2 = call i8 @bReadPcieReg(i16 3204, i16 ptrtoint (i16* @global_var_4 to i16), i8* nonnull %1, i64 %arg1), !insn.addr !1866
  %3 = sext i8 %2 to i64, !insn.addr !1866
  ret i64 %3, !insn.addr !1866
}

define i64 @RegisterInitialize(i64 %hDEV) local_unnamed_addr {
dec_label_pc_4508:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = call i64 @__decompiler_undefined_function_0()
  %2 = call i64 @__decompiler_undefined_function_0()
  %3 = add i64 %1, -30, !insn.addr !1867
  %4 = inttoptr i64 %3 to i8*, !insn.addr !1867
  store i8 126, i8* %4, align 1, !insn.addr !1867
  %5 = add i64 %1, -29, !insn.addr !1868
  %6 = inttoptr i64 %5 to i8*, !insn.addr !1868
  store i8 0, i8* %6, align 1, !insn.addr !1868
  %7 = inttoptr i64 %0 to i8*, !insn.addr !1869
  %8 = call i8 @bReadPcieReg(i16 3200, i16 ptrtoint (i16* @global_var_4 to i16), i8* %7, i64 %2), !insn.addr !1869
  ret i64 ptrtoint (i32* @global_var_1 to i64), !insn.addr !1870
}

define i64 @RegisterInitialize.616(i64 %arg1) local_unnamed_addr {
dec_label_pc_4538:
  %stack_var_-32 = alloca i64, align 8
  %0 = call i64 @mcount(), !insn.addr !1871
  store i64 65536, i64* %stack_var_-32, align 8, !insn.addr !1872
  %1 = bitcast i64* %stack_var_-32 to i8*, !insn.addr !1873
  %2 = call i8 @bReadPcieReg(i16 2176, i16 ptrtoint (i16* @global_var_4 to i16), i8* nonnull %1, i64 %arg1), !insn.addr !1873
  store i64 128, i64* %stack_var_-32, align 8, !insn.addr !1874
  %3 = call i8 @bReadPcieReg(i16 2560, i16 ptrtoint (i16* @global_var_4 to i16), i8* nonnull %1, i64 %arg1), !insn.addr !1875
  store i64 128, i64* %stack_var_-32, align 8, !insn.addr !1876
  %4 = call i8 @bReadPcieReg(i16 2880, i16 ptrtoint (i16* @global_var_4 to i16), i8* nonnull %1, i64 %arg1), !insn.addr !1877
  store i64 0, i64* %stack_var_-32, align 8, !insn.addr !1878
  %5 = call i8 @bReadPcieReg(i16 2184, i16 ptrtoint (i16* @global_var_4 to i16), i8* nonnull %1, i64 %arg1), !insn.addr !1879
  store i64 207, i64* %stack_var_-32, align 8, !insn.addr !1880
  %6 = call i8 @bReadPcieReg(i16 2196, i16 ptrtoint (i16* @global_var_4 to i16), i8* nonnull %1, i64 %arg1), !insn.addr !1881
  store i64 32768, i64* %stack_var_-32, align 8, !insn.addr !1882
  %7 = call i8 @bReadPcieReg(i16 2188, i16 ptrtoint (i16* @global_var_4 to i16), i8* nonnull %1, i64 %arg1), !insn.addr !1883
  store i64 4100, i64* %stack_var_-32, align 8, !insn.addr !1884
  %8 = call i8 @bReadPcieReg(i16 2192, i16 ptrtoint (i16* @global_var_4 to i16), i8* nonnull %1, i64 %arg1), !insn.addr !1885
  store i64 144, i64* %stack_var_-32, align 8, !insn.addr !1886
  %9 = call i8 @bReadPcieReg(i16 2304, i16 ptrtoint (i16* @global_var_4 to i16), i8* nonnull %1, i64 %arg1), !insn.addr !1887
  %10 = sext i8 %9 to i64, !insn.addr !1887
  ret i64 %10, !insn.addr !1888
}

define i64 @ASV5220_ReadResponse(i8* %RdData, i32 %RdLen, i64 %TimeOut, i64 %hDEV) local_unnamed_addr {
dec_label_pc_4676:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = call i64 @__decompiler_undefined_function_0()
  %2 = inttoptr i64 %0 to i8*, !insn.addr !1889
  %3 = call i8 @bReadPcieReg(i16 2308, i16 ptrtoint (i16* @global_var_4 to i16), i8* %2, i64 %1), !insn.addr !1889
  %4 = icmp eq i8 %3, 0, !insn.addr !1890
  %5 = icmp eq i1 %4, false, !insn.addr !1891
  %6 = zext i1 %5 to i64, !insn.addr !1892
  ret i64 %6, !insn.addr !1893
}

define i64 @ASV5220_ReadResponse.486(i64 %arg1, i8* %arg2, i8* %arg3, i64 %arg4) local_unnamed_addr {
dec_label_pc_46a6:
  %r12.1.reg2mem = alloca i64, !insn.addr !1894
  %rbx.1.reg2mem = alloca i64, !insn.addr !1894
  %rax.0.reg2mem = alloca i64, !insn.addr !1894
  %r12.0.reg2mem = alloca i64, !insn.addr !1894
  %rbx.0.reg2mem = alloca i64, !insn.addr !1894
  %stack_var_-72 = alloca i32, align 4
  %0 = call i64 @mcount(), !insn.addr !1895
  store i32 0, i32* %stack_var_-72, align 4, !insn.addr !1896
  %1 = bitcast i32* %stack_var_-72 to i8*
  %2 = ptrtoint i8* %arg3 to i64
  store i64 0, i64* %rbx.0.reg2mem, !insn.addr !1897
  store i64 0, i64* %r12.0.reg2mem, !insn.addr !1897
  br label %dec_label_pc_4705, !insn.addr !1897

dec_label_pc_4705:                                ; preds = %dec_label_pc_4877, %dec_label_pc_46a6
  %r12.0.reload = load i64, i64* %r12.0.reg2mem
  %rbx.0.reload = load i64, i64* %rbx.0.reg2mem
  %3 = call i8 @bTunerReset(i8 -108, i8 ptrtoint (i16* @global_var_4 to i8), i8* nonnull %1), !insn.addr !1898
  %4 = trunc i64 %rbx.0.reload to i32
  %5 = icmp eq i32 %4, 0, !insn.addr !1899
  %6 = icmp eq i1 %5, false, !insn.addr !1900
  br i1 %6, label %dec_label_pc_4770, label %dec_label_pc_4724, !insn.addr !1900

dec_label_pc_4724:                                ; preds = %dec_label_pc_4705
  %7 = load i32, i32* %stack_var_-72, align 4, !insn.addr !1901
  %8 = trunc i32 %7 to i8, !insn.addr !1901
  %9 = icmp eq i8 %8, 0, !insn.addr !1901
  br i1 %9, label %dec_label_pc_4770, label %dec_label_pc_472a, !insn.addr !1902

dec_label_pc_472a:                                ; preds = %dec_label_pc_4724
  store i32 ptrtoint (i32* @global_var_1 to i32), i32* %stack_var_-72, align 4, !insn.addr !1903
  %10 = call i8 @bReadPcieReg(i16 3228, i16 ptrtoint (i16* @global_var_4 to i16), i8* nonnull %1, i64 %arg4), !insn.addr !1904
  %sext = mul i64 %rbx.0.reload, 4294967296
  %11 = sdiv i64 %sext, 4294967296, !insn.addr !1905
  %12 = add i64 %11, %arg1, !insn.addr !1906
  %13 = inttoptr i64 %12 to i8*, !insn.addr !1907
  %14 = call i8 @bTunerReset(i8 ptrtoint (i16* @global_var_c90 to i8), i8 ptrtoint (i16* @global_var_4 to i8), i8* %13), !insn.addr !1907
  %15 = sext i8 %14 to i64, !insn.addr !1907
  %16 = add i64 %rbx.0.reload, zext (i32 ptrtoint (i32* @global_var_1 to i32) to i64), !insn.addr !1908
  %17 = and i64 %16, 4294967295, !insn.addr !1908
  store i64 %15, i64* %rax.0.reg2mem, !insn.addr !1909
  store i64 %17, i64* %rbx.1.reg2mem, !insn.addr !1909
  store i64 %r12.0.reload, i64* %r12.1.reg2mem, !insn.addr !1909
  br label %dec_label_pc_4877, !insn.addr !1909

dec_label_pc_4770:                                ; preds = %dec_label_pc_4724, %dec_label_pc_4705
  %18 = sub i32 ptrtoint (i32* @global_var_1 to i32), %4, !insn.addr !1899
  %19 = icmp eq i32 %18, ptrtoint (i32* @global_var_2 to i32), !insn.addr !1910
  %20 = icmp eq i1 %19, false, !insn.addr !1911
  br i1 %20, label %dec_label_pc_47c1, label %dec_label_pc_4775, !insn.addr !1911

dec_label_pc_4775:                                ; preds = %dec_label_pc_4770
  %21 = load i32, i32* %stack_var_-72, align 4, !insn.addr !1912
  %22 = trunc i32 %21 to i8, !insn.addr !1912
  %23 = icmp ugt i8 %22, ptrtoint (i32* @global_var_1 to i8)
  br i1 %23, label %dec_label_pc_477b, label %dec_label_pc_47c1, !insn.addr !1913

dec_label_pc_477b:                                ; preds = %dec_label_pc_4775
  store i32 ptrtoint (i32* @global_var_2 to i32), i32* %stack_var_-72, align 4, !insn.addr !1914
  %24 = call i8 @bReadPcieReg(i16 3228, i16 ptrtoint (i16* @global_var_4 to i16), i8* nonnull %1, i64 %arg4), !insn.addr !1915
  %sext3 = mul i64 %rbx.0.reload, 4294967296
  %25 = sdiv i64 %sext3, 4294967296, !insn.addr !1916
  %26 = add i64 %25, %arg1, !insn.addr !1917
  %27 = inttoptr i64 %26 to i8*, !insn.addr !1918
  %28 = call i8 @bTunerReset(i8 ptrtoint (i16* @global_var_c90 to i8), i8 ptrtoint (i16* @global_var_4 to i8), i8* %27), !insn.addr !1918
  %29 = sext i8 %28 to i64, !insn.addr !1918
  %30 = add i64 %rbx.0.reload, zext (i32 ptrtoint (i32* @global_var_2 to i32) to i64), !insn.addr !1919
  %31 = and i64 %30, 4294967295, !insn.addr !1919
  store i64 %29, i64* %rax.0.reg2mem, !insn.addr !1920
  store i64 %31, i64* %rbx.1.reg2mem, !insn.addr !1920
  store i64 %r12.0.reload, i64* %r12.1.reg2mem, !insn.addr !1920
  br label %dec_label_pc_4877, !insn.addr !1920

dec_label_pc_47c1:                                ; preds = %dec_label_pc_4775, %dec_label_pc_4770
  %32 = icmp eq i32 %18, ptrtoint (i8** @global_var_3 to i32), !insn.addr !1921
  %33 = icmp eq i1 %32, false, !insn.addr !1922
  br i1 %33, label %dec_label_pc_480f, label %dec_label_pc_47c6, !insn.addr !1922

dec_label_pc_47c6:                                ; preds = %dec_label_pc_47c1
  %34 = load i32, i32* %stack_var_-72, align 4, !insn.addr !1923
  %35 = trunc i32 %34 to i8, !insn.addr !1923
  %36 = icmp ugt i8 %35, ptrtoint (i32* @global_var_2 to i8)
  br i1 %36, label %dec_label_pc_47cc, label %dec_label_pc_480f, !insn.addr !1924

dec_label_pc_47cc:                                ; preds = %dec_label_pc_47c6
  store i32 ptrtoint (i8** @global_var_3 to i32), i32* %stack_var_-72, align 4, !insn.addr !1925
  %37 = call i8 @bReadPcieReg(i16 3228, i16 ptrtoint (i16* @global_var_4 to i16), i8* nonnull %1, i64 %arg4), !insn.addr !1926
  %sext4 = mul i64 %rbx.0.reload, 4294967296
  %38 = sdiv i64 %sext4, 4294967296, !insn.addr !1927
  %39 = add i64 %38, %arg1, !insn.addr !1928
  %40 = inttoptr i64 %39 to i8*, !insn.addr !1929
  %41 = call i8 @bTunerReset(i8 ptrtoint (i16* @global_var_c90 to i8), i8 ptrtoint (i16* @global_var_4 to i8), i8* %40), !insn.addr !1929
  %42 = sext i8 %41 to i64, !insn.addr !1929
  %43 = add i64 %rbx.0.reload, zext (i32 ptrtoint (i8** @global_var_3 to i32) to i64), !insn.addr !1930
  %44 = and i64 %43, 4294967295, !insn.addr !1930
  store i64 %42, i64* %rax.0.reg2mem, !insn.addr !1931
  store i64 %44, i64* %rbx.1.reg2mem, !insn.addr !1931
  store i64 %r12.0.reload, i64* %r12.1.reg2mem, !insn.addr !1931
  br label %dec_label_pc_4877, !insn.addr !1931

dec_label_pc_480f:                                ; preds = %dec_label_pc_47c6, %dec_label_pc_47c1
  %45 = icmp sgt i32 %18, ptrtoint (i8** @global_var_3 to i32), !insn.addr !1932
  br i1 %45, label %dec_label_pc_4814, label %dec_label_pc_4838, !insn.addr !1932

dec_label_pc_4814:                                ; preds = %dec_label_pc_480f
  %46 = load i32, i32* %stack_var_-72, align 4, !insn.addr !1933
  %47 = trunc i32 %46 to i8, !insn.addr !1933
  %48 = icmp ugt i8 %47, ptrtoint (i8** @global_var_3 to i8)
  br i1 %48, label %dec_label_pc_481a, label %dec_label_pc_4838, !insn.addr !1934

dec_label_pc_481a:                                ; preds = %dec_label_pc_4814
  %sext5 = mul i64 %rbx.0.reload, 4294967296
  %49 = sdiv i64 %sext5, 4294967296, !insn.addr !1935
  %50 = add i64 %49, %arg1, !insn.addr !1936
  %51 = inttoptr i64 %50 to i8*, !insn.addr !1937
  %52 = call i8 @bTunerReset(i8 ptrtoint (i16* @global_var_c90 to i8), i8 ptrtoint (i16* @global_var_4 to i8), i8* %51), !insn.addr !1937
  %53 = sext i8 %52 to i64, !insn.addr !1937
  %54 = add i64 %rbx.0.reload, zext (i32 ptrtoint (i16* @global_var_4 to i32) to i64), !insn.addr !1938
  %55 = and i64 %54, 4294967295, !insn.addr !1938
  store i64 %53, i64* %rax.0.reg2mem, !insn.addr !1939
  store i64 %55, i64* %rbx.1.reg2mem, !insn.addr !1939
  store i64 %r12.0.reload, i64* %r12.1.reg2mem, !insn.addr !1939
  br label %dec_label_pc_4877, !insn.addr !1939

dec_label_pc_4838:                                ; preds = %dec_label_pc_4814, %dec_label_pc_480f
  %56 = add i64 %r12.0.reload, ptrtoint (i32* @global_var_1 to i64), !insn.addr !1940
  %57 = icmp eq i64 %56, %2, !insn.addr !1941
  %58 = icmp eq i1 %57, false, !insn.addr !1942
  br i1 %58, label %dec_label_pc_486f, label %dec_label_pc_4842, !insn.addr !1942

dec_label_pc_4842:                                ; preds = %dec_label_pc_4838
  store i32 ptrtoint (i16* @global_var_4 to i32), i32* %stack_var_-72, align 4, !insn.addr !1943
  %59 = call i8 @bReadPcieReg(i16 3228, i16 ptrtoint (i16* @global_var_4 to i16), i8* nonnull %1, i64 %arg4), !insn.addr !1944
  ret i64 0, !insn.addr !1945

dec_label_pc_486f:                                ; preds = %dec_label_pc_4838
  %60 = call i64 @DelayMilliseconds.518(i64* inttoptr (i32 ptrtoint (i32* @global_var_1 to i32) to i64*), i64 ptrtoint (i16* @global_var_4 to i64)), !insn.addr !1946
  store i64 %60, i64* %rax.0.reg2mem, !insn.addr !1946
  store i64 %rbx.0.reload, i64* %rbx.1.reg2mem, !insn.addr !1946
  store i64 %56, i64* %r12.1.reg2mem, !insn.addr !1946
  br label %dec_label_pc_4877, !insn.addr !1946

dec_label_pc_4877:                                ; preds = %dec_label_pc_486f, %dec_label_pc_481a, %dec_label_pc_47cc, %dec_label_pc_477b, %dec_label_pc_472a
  %r12.1.reload = load i64, i64* %r12.1.reg2mem
  %rbx.1.reload = load i64, i64* %rbx.1.reg2mem
  %61 = trunc i64 %rbx.1.reload to i32, !insn.addr !1947
  %62 = icmp slt i32 %61, 1
  store i64 %rbx.1.reload, i64* %rbx.0.reg2mem, !insn.addr !1948
  store i64 %r12.1.reload, i64* %r12.0.reg2mem, !insn.addr !1948
  br i1 %62, label %dec_label_pc_4705, label %dec_label_pc_487f, !insn.addr !1948

dec_label_pc_487f:                                ; preds = %dec_label_pc_4877
  %rax.0.reload = load i64, i64* %rax.0.reg2mem
  ret i64 %rax.0.reload, !insn.addr !1949
}

define i32 @FUSBDTV_Wait(i64 %dwMilliseconds) local_unnamed_addr {
dec_label_pc_4898:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = call i64 @__decompiler_undefined_function_0()
  %2 = call i64 @__decompiler_undefined_function_0()
  %3 = call i64 @__decompiler_undefined_function_0()
  %4 = call i64 @__decompiler_undefined_function_0()
  %5 = trunc i64 %4 to i8
  %6 = mul i8 %5, 2, !insn.addr !1950
  %7 = inttoptr i64 %4 to i8*, !insn.addr !1950
  store i8 %6, i8* %7, align 1, !insn.addr !1950
  %8 = trunc i64 %0 to i16, !insn.addr !1951
  %9 = inttoptr i64 %2 to i8*, !insn.addr !1951
  %10 = call i8 @bReadPcieReg(i16 3228, i16 %8, i8* %9, i64 %3), !insn.addr !1951
  %11 = add i64 %1, -80, !insn.addr !1952
  %12 = inttoptr i64 %11 to i32*, !insn.addr !1952
  %13 = load i32, i32* %12, align 4, !insn.addr !1952
  %14 = add i32 %13, ptrtoint (i32* @global_var_1 to i32), !insn.addr !1952
  store i32 %14, i32* %12, align 4, !insn.addr !1952
  ret i32 %14, !insn.addr !1953
}

define i64 @ASV5220_InitUart(i64 %hDEV) local_unnamed_addr {
dec_label_pc_48ad:
  ret i64 ptrtoint (i32* @global_var_1 to i64), !insn.addr !1954
}

define i64 @FUSBDTV_Wait.332(i64* %arg1) local_unnamed_addr {
dec_label_pc_48c8:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = call i64 @mcount(), !insn.addr !1955
  %2 = call i64 @DelayMilliseconds.518(i64* %arg1, i64 %0), !insn.addr !1956
  ret i64 ptrtoint (i32* @global_var_1 to i64), !insn.addr !1957
}

define i64 @ASV5220_InitUart.293(i64 %arg1) local_unnamed_addr {
dec_label_pc_48dd:
  %rbx.0.reg2mem = alloca i64, !insn.addr !1958
  %stack_var_-40 = alloca i32*, align 8
  %0 = call i64 @mcount(), !insn.addr !1959
  store i32* bitcast (i8** @global_var_17 to i32*), i32** %stack_var_-40, align 8, !insn.addr !1960
  %1 = bitcast i32** %stack_var_-40 to i8*, !insn.addr !1961
  %2 = call i8 @bReadPcieReg(i16 3204, i16 ptrtoint (i16* @global_var_4 to i16), i8* nonnull %1, i64 %arg1), !insn.addr !1961
  store i32* inttoptr (i64 34 to i32*), i32** %stack_var_-40, align 8, !insn.addr !1962
  %3 = call i8 @bReadPcieReg(i16 3200, i16 ptrtoint (i16* @global_var_4 to i16), i8* nonnull %1, i64 %arg1), !insn.addr !1963
  store i32* bitcast (i8** @global_var_3 to i32*), i32** %stack_var_-40, align 8, !insn.addr !1964
  %4 = call i8 @bReadPcieReg(i16 3208, i16 ptrtoint (i16* @global_var_4 to i16), i8* nonnull %1, i64 %arg1), !insn.addr !1965
  store i32* null, i32** %stack_var_-40, align 8, !insn.addr !1966
  %5 = call i8 @bReadPcieReg(i16 3212, i16 ptrtoint (i16* @global_var_4 to i16), i8* nonnull %1, i64 %arg1), !insn.addr !1967
  %6 = call i8 @bTunerReset(i8 -112, i8 ptrtoint (i16* @global_var_4 to i8), i8* nonnull %1), !insn.addr !1968
  %7 = load i32*, i32** %stack_var_-40, align 8, !insn.addr !1969
  %8 = ptrtoint i32* %7 to i64, !insn.addr !1969
  %9 = mul i64 %8, 72057594037927936, !insn.addr !1969
  %sext = sdiv i64 %9, 72057594037927936
  %10 = and i64 %sext, -33, !insn.addr !1969
  %11 = inttoptr i64 %10 to i32*, !insn.addr !1969
  store i32* %11, i32** %stack_var_-40, align 8, !insn.addr !1969
  %12 = call i8 @bReadPcieReg(i16 2192, i16 ptrtoint (i16* @global_var_4 to i16), i8* nonnull %1, i64 %arg1), !insn.addr !1970
  store i64 0, i64* %rbx.0.reg2mem, !insn.addr !1971
  br label %dec_label_pc_49bb, !insn.addr !1971

dec_label_pc_49bb:                                ; preds = %dec_label_pc_49bb, %dec_label_pc_48dd
  %rbx.0.reload = load i64, i64* %rbx.0.reg2mem
  %13 = call i64 @vUSB_Wait.362(i64 ptrtoint (i32* @global_var_1 to i64)), !insn.addr !1972
  %14 = add nuw nsw i64 %rbx.0.reload, zext (i32 ptrtoint (i32* @global_var_1 to i32) to i64), !insn.addr !1973
  %15 = and i64 %14, 4294967295, !insn.addr !1973
  %16 = trunc i64 %14 to i32, !insn.addr !1974
  %17 = icmp eq i32 %16, 50, !insn.addr !1974
  %18 = icmp eq i1 %17, false, !insn.addr !1975
  store i64 %15, i64* %rbx.0.reg2mem, !insn.addr !1975
  br i1 %18, label %dec_label_pc_49bb, label %dec_label_pc_49cd, !insn.addr !1975

dec_label_pc_49cd:                                ; preds = %dec_label_pc_49bb
  store i32* bitcast (i32** @global_var_20 to i32*), i32** %stack_var_-40, align 8, !insn.addr !1976
  %19 = call i8 @bReadPcieReg(i16 2192, i16 ptrtoint (i16* @global_var_4 to i16), i8* nonnull %1, i64 %arg1), !insn.addr !1977
  %20 = sext i8 %19 to i64, !insn.addr !1977
  ret i64 %20, !insn.addr !1977
}

define i64 @ASV5220_ResetUart(i64 %hDEV) local_unnamed_addr {
dec_label_pc_49ed:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = call i64 @__decompiler_undefined_function_0()
  %2 = call i64 @__decompiler_undefined_function_0()
  %3 = call i64 @__decompiler_undefined_function_0()
  %4 = call i64 @__decompiler_undefined_function_0()
  %5 = trunc i64 %4 to i32, !insn.addr !1978
  %6 = trunc i64 %1 to i32, !insn.addr !1978
  %7 = add i32 %5, %6, !insn.addr !1978
  %8 = icmp eq i32 %7, 0, !insn.addr !1978
  %9 = sub i64 %3, ptrtoint (i32* @global_var_1 to i64), !insn.addr !1979
  %10 = icmp ne i64 %9, 0, !insn.addr !1979
  %11 = icmp ne i1 %10, %8, !insn.addr !1979
  %12 = icmp eq i64 %9, ptrtoint (i32* @global_var_1 to i64), !insn.addr !1980
  %or.cond = or i1 %12, %11
  br i1 %or.cond, label %dec_label_pc_49f2, label %dec_label_pc_49fa, !insn.addr !1979

dec_label_pc_49f2:                                ; preds = %dec_label_pc_49ed
  %13 = zext i32 %7 to i64, !insn.addr !1978
  ret i64 %13, !insn.addr !1979

dec_label_pc_49fa:                                ; preds = %dec_label_pc_49ed
  %14 = inttoptr i64 %2 to i8*, !insn.addr !1981
  %15 = call i8 @bReadPcieReg(i16 3208, i16 ptrtoint (i16* @global_var_4 to i16), i8* %14, i64 %0), !insn.addr !1981
  ret i64 ptrtoint (i32* @global_var_1 to i64), !insn.addr !1982
}

define i64 @ASV5220_ResetUart.247(i64 %arg1) local_unnamed_addr {
dec_label_pc_4a1d:
  %stack_var_-40 = alloca i16, align 2
  %0 = call i64 @mcount(), !insn.addr !1983
  store i16 0, i16* %stack_var_-40, align 2, !insn.addr !1984
  %1 = bitcast i16* %stack_var_-40 to i8*, !insn.addr !1985
  %2 = call i8 @bTunerReset(i8 -124, i8 ptrtoint (i16* @global_var_4 to i8), i8* nonnull %1), !insn.addr !1985
  store i16 ptrtoint (i16* @global_var_4 to i16), i16* %stack_var_-40, align 2, !insn.addr !1986
  %3 = call i8 @bReadPcieReg(i16 2180, i16 ptrtoint (i16* @global_var_4 to i16), i8* nonnull %1, i64 %arg1), !insn.addr !1987
  %4 = sext i8 %3 to i64, !insn.addr !1987
  ret i64 %4, !insn.addr !1987
}

define i64 @FUSBDTV_Cmd_I2CWriteEnc(i64 %deviceExtension, i8 %Slave_Addr, i8 %RegOffset, i16 %u16WriteLen, i8* %pDataBuf) local_unnamed_addr {
dec_label_pc_4a69:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = call i64 @__decompiler_undefined_function_0()
  %2 = call i64 @__decompiler_undefined_function_0()
  %3 = call i64 @__decompiler_undefined_function_0()
  %4 = trunc i64 %3 to i8
  %5 = inttoptr i64 %3 to i8*, !insn.addr !1988
  %6 = load i8, i8* %5, align 1, !insn.addr !1988
  %7 = add i8 %6, %4, !insn.addr !1988
  store i8 %7, i8* %5, align 1, !insn.addr !1988
  %8 = call i64 @vUSB_Wait.362(i64 %deviceExtension), !insn.addr !1989
  %9 = add i64 %1, -32, !insn.addr !1990
  %10 = inttoptr i64 %9 to i8*, !insn.addr !1990
  store i8 0, i8* %10, align 1, !insn.addr !1990
  %11 = inttoptr i64 %2 to i8*, !insn.addr !1991
  %12 = call i8 @bReadPcieReg(i16 2180, i16 ptrtoint (i16* @global_var_4 to i16), i8* %11, i64 %0), !insn.addr !1991
  ret i64 ptrtoint (i32* @global_var_1 to i64), !insn.addr !1992
}

define i64 @mpu_i2c_write(i64 %DeviceObject, i8 %mpu_slave_address, i8 %target_slave_address, i8 %RegOffset, i8 %data_length, i8* %pDataBuf) local_unnamed_addr {
dec_label_pc_4a97:
  %0 = call i64 @__decompiler_undefined_function_0()
  ret i64 %0, !insn.addr !1993
}

define i64 @FUSBDTV_Cmd_I2CWriteEnc.184(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4, i64 %arg5) local_unnamed_addr {
dec_label_pc_4a99:
  %0 = call i64 @mcount(), !insn.addr !1994
  %1 = urem i64 %arg3, 256, !insn.addr !1995
  %2 = urem i64 %arg2, 256, !insn.addr !1996
  %3 = urem i64 %arg4, 256, !insn.addr !1997
  %4 = call i64 @TLIB_I2C_Write.278(i64 %arg1, i64 %2, i64 %1, i64 %arg5, i64 %3, i64 0), !insn.addr !1998
  %5 = trunc i64 %4 to i8, !insn.addr !1999
  %6 = icmp eq i8 %5, 0, !insn.addr !1999
  %7 = icmp eq i1 %6, false, !insn.addr !2000
  %8 = zext i1 %7 to i64, !insn.addr !2001
  ret i64 %8, !insn.addr !2002
}

define i64 @mpu_i2c_write.294(i64 %arg1, i8 %arg2, i8 %arg3, i8 %arg4, i32 %arg5, i64 %arg6) local_unnamed_addr {
dec_label_pc_4ac7:
  %stack_var_-56 = alloca i8, align 1
  %0 = call i64 @mcount(), !insn.addr !2003
  store i8 %arg3, i8* %stack_var_-56, align 1, !insn.addr !2004
  %1 = ptrtoint i8* %stack_var_-56 to i64, !insn.addr !2005
  %2 = zext i8 %arg2 to i64, !insn.addr !2006
  %3 = call i64 @TLIB_I2C_Write.278(i64 %arg1, i64 %2, i64 0, i64 %1, i64 ptrtoint (i8** @global_var_3 to i64), i64 ptrtoint (i32* @global_var_2 to i64)), !insn.addr !2007
  %4 = trunc i32 %arg5 to i8, !insn.addr !2008
  %5 = icmp slt i8 %4, 0, !insn.addr !2008
  %6 = urem i32 %arg5, 256
  %.op = zext i32 %6 to i64
  %7 = select i1 %5, i64 zext (i8 ptrtoint (i8* @global_var_8 to i8) to i64), i64 %.op, !insn.addr !2009
  %8 = call i64 @TLIB_I2C_Write.278(i64 %arg1, i64 %2, i64 0, i64 %arg6, i64 %7, i64 ptrtoint (i32* @global_var_2 to i64)), !insn.addr !2010
  ret i64 %8, !insn.addr !2011
}

define i64 @mpu_i2c_read(i64 %DeviceObject, i8 %mpu_slave_address, i8 %target_slave_address, i8 %RegOffset, i8 %data_length, i8* %pDataBuf) local_unnamed_addr {
dec_label_pc_4b70:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = call i64 @__decompiler_undefined_function_0()
  %2 = ptrtoint i8* %pDataBuf to i64
  %3 = mul i64 %1, ptrtoint (i32* @global_var_1 to i64), !insn.addr !2012
  %4 = add i64 %3, %2, !insn.addr !2012
  %5 = inttoptr i64 %4 to i8*, !insn.addr !2012
  %6 = load i8, i8* %5, align 1, !insn.addr !2012
  %7 = ashr i8 %6, ptrtoint (i32* @global_var_1 to i8), !insn.addr !2012
  store i8 %7, i8* %5, align 1, !insn.addr !2012
  %8 = add i64 %0, -48, !insn.addr !2013
  %9 = inttoptr i64 %8 to i8*, !insn.addr !2013
  %10 = load i8, i8* %9, align 1, !insn.addr !2013
  %11 = icmp eq i8 %10, ptrtoint (i32* @global_var_1 to i8), !insn.addr !2013
  %12 = zext i1 %11 to i64, !insn.addr !2014
  ret i64 %12, !insn.addr !2015
}

define i64 @mpu_i2c_read.539(i64 %arg1, i8 %arg2, i8 %arg3, i8 %arg4, i32 %arg5, i64 %arg6) local_unnamed_addr {
dec_label_pc_4ba0:
  %rbx.0.reg2mem = alloca i64, !insn.addr !2016
  %rax.0.reg2mem = alloca i64, !insn.addr !2016
  %r12.0.reg2mem = alloca i64, !insn.addr !2016
  %r9 = alloca i64, align 8
  %stack_var_-103 = alloca i8, align 1
  %stack_var_-104 = alloca i32, align 4
  %0 = call i64 @mcount(), !insn.addr !2017
  %1 = call i64 @__readgsqword(i64 40), !insn.addr !2018
  %2 = sext i8 %arg3 to i64, !insn.addr !2019
  %3 = or i64 %2, zext (i32 ptrtoint (i32* @global_var_1 to i32) to i64), !insn.addr !2019
  %4 = trunc i32 %arg5 to i8, !insn.addr !2020
  %5 = icmp slt i8 %4, 0, !insn.addr !2020
  %6 = icmp eq i1 %5, false, !insn.addr !2021
  %7 = zext i32 %arg5 to i64
  %8 = select i1 %6, i64 %7, i64 zext (i32 ptrtoint (i8* @global_var_8 to i32) to i64), !insn.addr !2021
  %9 = zext i8 %arg2 to i64, !insn.addr !2022
  %10 = trunc i64 %3 to i32, !insn.addr !2023
  %sext = mul i32 %10, 16777216
  %11 = sdiv i32 %sext, 16777216, !insn.addr !2023
  store i32 %11, i32* %stack_var_-104, align 4, !insn.addr !2023
  store i8 %arg4, i8* %stack_var_-103, align 1, !insn.addr !2024
  %12 = ptrtoint i8* %stack_var_-103 to i64, !insn.addr !2025
  %13 = urem i64 %3, 256, !insn.addr !2026
  %14 = call i64 @TLIB_I2C_Write.278(i64 %arg1, i64 %9, i64 %13, i64 %12, i64 ptrtoint (i32* @global_var_2 to i64), i64 0), !insn.addr !2027
  %15 = bitcast i64* %r9 to i8*
  %16 = inttoptr i64 %arg6 to i8*, !insn.addr !2028
  %17 = inttoptr i64 %arg6 to i64*, !insn.addr !2029
  store i64 0, i64* %r12.0.reg2mem, !insn.addr !2030
  br label %dec_label_pc_4c12, !insn.addr !2030

dec_label_pc_4c12:                                ; preds = %dec_label_pc_4c43, %dec_label_pc_4ba0
  %r12.0.reload = load i64, i64* %r12.0.reg2mem
  store i8 0, i8* %16, align 1, !insn.addr !2028
  %18 = call i64 @TLIB_I2C_Read.262(i64 %arg1, i64 %9, i64 0, i64* %17, i64* bitcast (i32* @global_var_1 to i64*), i64 ptrtoint (i32* @global_var_2 to i64)), !insn.addr !2029
  %19 = trunc i64 %18 to i8, !insn.addr !2031
  %20 = icmp ne i8 %19, 0, !insn.addr !2031
  %21 = load i8, i8* %15, align 8, !insn.addr !2032
  %22 = icmp eq i8 %21, ptrtoint (i32* @global_var_1 to i8), !insn.addr !2033
  %or.cond = icmp eq i1 %20, %22
  br i1 %or.cond, label %dec_label_pc_4c52, label %dec_label_pc_4c43, !insn.addr !2034

dec_label_pc_4c43:                                ; preds = %dec_label_pc_4c12
  %23 = add nuw nsw i64 %r12.0.reload, zext (i32 ptrtoint (i32* @global_var_1 to i32) to i64), !insn.addr !2035
  %24 = and i64 %23, 4294967295, !insn.addr !2035
  %25 = trunc i64 %23 to i8, !insn.addr !2036
  %26 = icmp eq i8 %25, 100, !insn.addr !2036
  %27 = icmp eq i1 %26, false, !insn.addr !2037
  store i64 %24, i64* %r12.0.reg2mem, !insn.addr !2037
  br i1 %27, label %dec_label_pc_4c12, label %dec_label_pc_4c52, !insn.addr !2037

dec_label_pc_4c52:                                ; preds = %dec_label_pc_4c12, %dec_label_pc_4c43
  %28 = add nuw nsw i64 %8, zext (i8 ptrtoint (i32* @global_var_1 to i8) to i64), !insn.addr !2038
  %29 = urem i64 %28, 256, !insn.addr !2039
  %30 = inttoptr i64 %29 to i64*, !insn.addr !2040
  %31 = bitcast i32* %stack_var_-104 to i64*, !insn.addr !2040
  %32 = call i64 @TLIB_I2C_Read.262(i64 %arg1, i64 %9, i64 0, i64* nonnull %31, i64* %30, i64 ptrtoint (i32* @global_var_2 to i64)), !insn.addr !2040
  %33 = ptrtoint i32* %stack_var_-104 to i64, !insn.addr !2041
  %34 = add nuw nsw i64 %8, 255, !insn.addr !2042
  %35 = urem i64 %34, 256, !insn.addr !2043
  %36 = mul i64 %35, ptrtoint (i32* @global_var_1 to i64), !insn.addr !2044
  %37 = add i64 %36, ptrtoint (i32* @global_var_2 to i64), !insn.addr !2044
  %38 = add i64 %37, %33, !insn.addr !2044
  store i64 %12, i64* %rax.0.reg2mem, !insn.addr !2044
  store i64 %arg6, i64* %rbx.0.reg2mem, !insn.addr !2044
  br label %dec_label_pc_4c91, !insn.addr !2044

dec_label_pc_4c91:                                ; preds = %dec_label_pc_4c91, %dec_label_pc_4c52
  %rbx.0.reload = load i64, i64* %rbx.0.reg2mem
  %rax.0.reload = load i64, i64* %rax.0.reg2mem
  %39 = inttoptr i64 %rax.0.reload to i8*, !insn.addr !2045
  %40 = load i8, i8* %39, align 1, !insn.addr !2045
  %41 = inttoptr i64 %rbx.0.reload to i8*, !insn.addr !2046
  store i8 %40, i8* %41, align 1, !insn.addr !2046
  %42 = add i64 %rax.0.reload, ptrtoint (i32* @global_var_1 to i64), !insn.addr !2047
  %43 = add i64 %rbx.0.reload, ptrtoint (i32* @global_var_1 to i64), !insn.addr !2048
  %44 = icmp eq i64 %42, %38, !insn.addr !2049
  %45 = icmp eq i1 %44, false, !insn.addr !2050
  store i64 %42, i64* %rax.0.reg2mem, !insn.addr !2050
  store i64 %43, i64* %rbx.0.reg2mem, !insn.addr !2050
  br i1 %45, label %dec_label_pc_4c91, label %dec_label_pc_4ca3, !insn.addr !2050

dec_label_pc_4ca3:                                ; preds = %dec_label_pc_4c91
  ret i64 %42, !insn.addr !2050
}

define i64 @FUSBDTV_Cmd_I2CReadEnc(i64 %deviceExtension, i8 %Slave_Addr, i8 %RegOffset, i16 %u16ReadLen, i8* %pDataBuf, i8 %byI2CFlag) local_unnamed_addr {
dec_label_pc_4ca4:
  %0 = call i64 @__decompiler_undefined_function_0()
  ret i64 %0
}

define i8 @writeStorageBuff(i8* %wtPtr, i64 %StreamObject, i64 %length) local_unnamed_addr {
dec_label_pc_4cd2:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = trunc i64 %0 to i8, !insn.addr !2051
  ret i8 %1, !insn.addr !2051
}

define i64 @FUSBDTV_Cmd_I2CReadEnc.183(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4, i64 %arg5) local_unnamed_addr {
dec_label_pc_4cd4:
  %0 = call i64 @mcount(), !insn.addr !2052
  %1 = urem i64 %arg3, 256, !insn.addr !2053
  %2 = urem i64 %arg2, 256, !insn.addr !2054
  %3 = urem i64 %arg4, 256, !insn.addr !2055
  %4 = inttoptr i64 %arg5 to i64*, !insn.addr !2056
  %5 = inttoptr i64 %3 to i64*, !insn.addr !2056
  %6 = call i64 @TLIB_I2C_Read.262(i64 %arg1, i64 %2, i64 %1, i64* %4, i64* %5, i64 0), !insn.addr !2056
  %7 = trunc i64 %6 to i8, !insn.addr !2057
  %8 = icmp eq i8 %7, 0, !insn.addr !2057
  %9 = icmp eq i1 %8, false, !insn.addr !2058
  %10 = zext i1 %9 to i64, !insn.addr !2059
  ret i64 %10, !insn.addr !2060
}

define i64 @writeStorageBuff.351(i64 %arg1, i64 %arg2, i64 %arg3) local_unnamed_addr {
dec_label_pc_4d02:
  %rax.1.reg2mem = alloca i64, !insn.addr !2061
  %.reg2mem9 = alloca i64, !insn.addr !2061
  %.pre-phi4.reg2mem = alloca i64*, !insn.addr !2061
  %.pre-phi8.reg2mem = alloca i64*, !insn.addr !2061
  %rax.0.reg2mem = alloca i64, !insn.addr !2061
  %.reg2mem = alloca i64, !insn.addr !2061
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = call i64 @mcount(), !insn.addr !2062
  %2 = icmp eq i64 %arg2, 0, !insn.addr !2063
  %3 = icmp eq i64 %arg1, 0, !insn.addr !2064
  %or.cond = or i1 %3, %2
  store i64 0, i64* %rax.1.reg2mem, !insn.addr !2065
  br i1 %or.cond, label %dec_label_pc_4ffd, label %dec_label_pc_4d33, !insn.addr !2065

dec_label_pc_4d33:                                ; preds = %dec_label_pc_4d02
  %4 = add i64 %arg2, 184, !insn.addr !2066
  %5 = inttoptr i64 %4 to i8*, !insn.addr !2066
  %6 = load i8, i8* %5, align 1, !insn.addr !2066
  %7 = icmp eq i8 %6, 0, !insn.addr !2066
  store i64 ptrtoint (i32* @global_var_1 to i64), i64* %rax.1.reg2mem, !insn.addr !2067
  br i1 %7, label %dec_label_pc_4ffd, label %dec_label_pc_4d45, !insn.addr !2067

dec_label_pc_4d45:                                ; preds = %dec_label_pc_4d33
  %8 = add i64 %arg2, 200, !insn.addr !2068
  %9 = inttoptr i64 %8 to i64*, !insn.addr !2068
  %10 = load i64, i64* %9, align 8, !insn.addr !2068
  %11 = add i64 %10, %arg3, !insn.addr !2068
  store i64 %11, i64* %9, align 8, !insn.addr !2068
  %12 = add i64 %arg2, 232, !insn.addr !2069
  %13 = inttoptr i64 %12 to i64*, !insn.addr !2069
  %14 = load i64, i64* %13, align 8, !insn.addr !2069
  %15 = add i64 %arg2, 312, !insn.addr !2070
  %16 = inttoptr i64 %15 to i64*, !insn.addr !2070
  %17 = load i64, i64* %16, align 8, !insn.addr !2070
  %18 = icmp ugt i64 %arg3, ptrtoint (i8* @global_var_10 to i64)
  br i1 %18, label %dec_label_pc_4d63, label %dec_label_pc_4d9d, !insn.addr !2071

dec_label_pc_4d63:                                ; preds = %dec_label_pc_4d45
  %19 = add i64 %arg2, 20399, !insn.addr !2072
  %20 = inttoptr i64 %19 to i8*, !insn.addr !2072
  %21 = load i8, i8* %20, align 1, !insn.addr !2072
  %22 = icmp eq i8 %21, 0, !insn.addr !2072
  %23 = icmp eq i1 %22, false, !insn.addr !2073
  br i1 %23, label %dec_label_pc_4d9d, label %dec_label_pc_4d6c, !insn.addr !2073

dec_label_pc_4d6c:                                ; preds = %dec_label_pc_4d63
  %24 = add i64 %arg2, 20400, !insn.addr !2074
  %25 = inttoptr i64 %24 to i8*, !insn.addr !2074
  %26 = load i8, i8* %25, align 1, !insn.addr !2074
  %27 = icmp eq i8 %26, 0, !insn.addr !2074
  %28 = icmp eq i1 %27, false, !insn.addr !2075
  br i1 %28, label %dec_label_pc_4d9d, label %dec_label_pc_4d75, !insn.addr !2075

dec_label_pc_4d75:                                ; preds = %dec_label_pc_4d6c
  %29 = add i64 %arg1, ptrtoint ([4 x i8]* @global_var_c to i64), !insn.addr !2076
  %30 = inttoptr i64 %29 to i8*, !insn.addr !2076
  %31 = load i8, i8* %30, align 1, !insn.addr !2076
  store i8 %31, i8* %20, align 1, !insn.addr !2077
  %32 = add i64 %arg1, ptrtoint ([3 x i8]* @global_var_d to i64), !insn.addr !2078
  %33 = inttoptr i64 %32 to i8*, !insn.addr !2078
  %34 = load i8, i8* %33, align 1, !insn.addr !2078
  store i8 %34, i8* %25, align 1, !insn.addr !2079
  %35 = add i64 %arg1, ptrtoint (i16** @global_var_e to i64), !insn.addr !2080
  %36 = inttoptr i64 %35 to i8*, !insn.addr !2080
  %37 = load i8, i8* %36, align 1, !insn.addr !2080
  %38 = add i64 %arg2, 20401, !insn.addr !2081
  %39 = inttoptr i64 %38 to i8*, !insn.addr !2081
  store i8 %37, i8* %39, align 1, !insn.addr !2081
  %40 = add i64 %arg1, ptrtoint (i8* @global_var_f to i64), !insn.addr !2082
  %41 = inttoptr i64 %40 to i8*, !insn.addr !2082
  %42 = load i8, i8* %41, align 1, !insn.addr !2082
  %43 = add i64 %arg2, 20402, !insn.addr !2083
  %44 = inttoptr i64 %43 to i8*, !insn.addr !2083
  store i8 %42, i8* %44, align 1, !insn.addr !2083
  br label %dec_label_pc_4d9d, !insn.addr !2083

dec_label_pc_4d9d:                                ; preds = %dec_label_pc_4d45, %dec_label_pc_4d75, %dec_label_pc_4d6c, %dec_label_pc_4d63
  %45 = add i64 %arg2, 272, !insn.addr !2084
  %46 = inttoptr i64 %45 to i32*, !insn.addr !2084
  %47 = load i32, i32* %46, align 4, !insn.addr !2084
  %48 = icmp eq i32 %47, 0, !insn.addr !2084
  %49 = icmp eq i1 %48, false, !insn.addr !2085
  br i1 %49, label %dec_label_pc_4dc3, label %dec_label_pc_4da6, !insn.addr !2085

dec_label_pc_4da6:                                ; preds = %dec_label_pc_4d9d
  %50 = add i64 %arg2, 336, !insn.addr !2086
  %51 = inttoptr i64 %50 to i64*, !insn.addr !2086
  %52 = load i64, i64* %51, align 8, !insn.addr !2086
  %53 = icmp eq i64 %52, 0, !insn.addr !2086
  %54 = icmp eq i1 %53, false, !insn.addr !2087
  br i1 %54, label %dec_label_pc_4e95.preheader, label %dec_label_pc_4da6.dec_label_pc_4f24_crit_edge, !insn.addr !2087

dec_label_pc_4da6.dec_label_pc_4f24_crit_edge:    ; preds = %dec_label_pc_4da6
  %.pre = add i64 %arg2, 288, !insn.addr !2088
  %.pre3 = inttoptr i64 %.pre to i64*, !insn.addr !2088
  %.pre5 = add i64 %arg2, 224, !insn.addr !2089
  %.pre7 = inttoptr i64 %.pre5 to i64*, !insn.addr !2089
  store i64* %.pre7, i64** %.pre-phi8.reg2mem
  store i64* %.pre3, i64** %.pre-phi4.reg2mem
  br label %dec_label_pc_4f24

dec_label_pc_4e95.preheader:                      ; preds = %dec_label_pc_4da6
  %55 = add i64 %arg2, 224
  %56 = inttoptr i64 %55 to i64*
  %57 = add i64 %arg2, 288
  %58 = inttoptr i64 %57 to i64*
  %59 = add i64 %arg2, 304, !insn.addr !2090
  %60 = inttoptr i64 %59 to i64*, !insn.addr !2090
  %61 = add i64 %arg2, 320, !insn.addr !2091
  %62 = inttoptr i64 %61 to i64*, !insn.addr !2091
  %63 = add i64 %arg2, 296, !insn.addr !2092
  %64 = inttoptr i64 %63 to i64*, !insn.addr !2092
  %65 = add i64 %arg2, 280
  %66 = inttoptr i64 %65 to i64*
  store i64 0, i64* %rax.0.reg2mem
  br label %dec_label_pc_4e95

dec_label_pc_4dc3:                                ; preds = %dec_label_pc_4d9d
  %67 = add i64 %arg2, 328, !insn.addr !2093
  %68 = inttoptr i64 %67 to i64*, !insn.addr !2093
  %69 = load i64, i64* %68, align 8, !insn.addr !2093
  %70 = add i64 %69, %arg3, !insn.addr !2094
  %71 = icmp ugt i64 %70, %17, !insn.addr !2095
  %72 = icmp eq i1 %71, false, !insn.addr !2096
  store i64 %70, i64* %rax.1.reg2mem, !insn.addr !2096
  br i1 %72, label %dec_label_pc_4ffd, label %dec_label_pc_4dd8, !insn.addr !2096

dec_label_pc_4dd8:                                ; preds = %dec_label_pc_4dc3
  %73 = sub i64 %70, %17, !insn.addr !2097
  %74 = sub i64 %arg3, %73, !insn.addr !2098
  %75 = add i64 %arg2, 304, !insn.addr !2099
  %76 = inttoptr i64 %75 to i64*, !insn.addr !2099
  %77 = load i64, i64* %76, align 8, !insn.addr !2099
  %78 = add i64 %77, %69, !insn.addr !2099
  %79 = call i64 @memcpy(i64 %78, i64 %arg1, i64 %74, i64 %0), !insn.addr !2100
  %80 = icmp eq i64 %73, 0, !insn.addr !2101
  %81 = icmp eq i1 %80, false, !insn.addr !2102
  br i1 %81, label %dec_label_pc_4e1a, label %dec_label_pc_4dfe, !insn.addr !2102

dec_label_pc_4dfe:                                ; preds = %dec_label_pc_4dd8
  %82 = load i64, i64* %68, align 8, !insn.addr !2103
  %83 = add i64 %82, %74, !insn.addr !2103
  %84 = icmp eq i64 %17, %83, !insn.addr !2104
  %85 = select i1 %84, i64 0, i64 %83, !insn.addr !2105
  store i64 %85, i64* %.reg2mem, !insn.addr !2106
  br label %dec_label_pc_4e39, !insn.addr !2106

dec_label_pc_4e1a:                                ; preds = %dec_label_pc_4dd8
  %86 = load i64, i64* %76, align 8, !insn.addr !2107
  %87 = add i64 %74, %arg1, !insn.addr !2108
  %88 = call i64 @memcpy(i64 %86, i64 %87, i64 %73, i64 %0), !insn.addr !2109
  store i64 %73, i64* %.reg2mem, !insn.addr !2110
  br label %dec_label_pc_4e39, !insn.addr !2110

dec_label_pc_4e39:                                ; preds = %dec_label_pc_4e1a, %dec_label_pc_4dfe
  %.reload = load i64, i64* %.reg2mem, !insn.addr !2111
  store i64 %.reload, i64* %68, align 8
  %89 = add i64 %arg2, 336, !insn.addr !2112
  %90 = inttoptr i64 %89 to i64*, !insn.addr !2112
  %91 = load i64, i64* %90, align 8, !insn.addr !2112
  %92 = icmp eq i64 %91, %17, !insn.addr !2113
  %93 = icmp eq i1 %92, false, !insn.addr !2114
  br i1 %93, label %dec_label_pc_4e5d, label %dec_label_pc_4e45, !insn.addr !2114

dec_label_pc_4e45:                                ; preds = %dec_label_pc_4e39
  %94 = add i64 %arg2, 320, !insn.addr !2115
  %95 = inttoptr i64 %94 to i64*, !insn.addr !2115
  store i64 %.reload, i64* %95, align 8, !insn.addr !2115
  store i64 ptrtoint (i32* @global_var_1 to i64), i64* %rax.1.reg2mem, !insn.addr !2116
  br label %dec_label_pc_4ffd, !insn.addr !2116

dec_label_pc_4e5d:                                ; preds = %dec_label_pc_4e39
  %96 = add i64 %91, %arg3, !insn.addr !2117
  %97 = icmp ult i64 %17, %96, !insn.addr !2118
  %98 = icmp eq i1 %97, false, !insn.addr !2119
  br i1 %98, label %dec_label_pc_4e84, label %dec_label_pc_4e65, !insn.addr !2119

dec_label_pc_4e65:                                ; preds = %dec_label_pc_4e5d
  %99 = add i64 %arg2, 320, !insn.addr !2120
  %100 = inttoptr i64 %99 to i64*, !insn.addr !2120
  store i64 %.reload, i64* %100, align 8, !insn.addr !2120
  store i64 %17, i64* %90, align 8, !insn.addr !2121
  store i64 ptrtoint (i32* @global_var_1 to i64), i64* %rax.1.reg2mem, !insn.addr !2122
  br label %dec_label_pc_4ffd, !insn.addr !2122

dec_label_pc_4e84:                                ; preds = %dec_label_pc_4e5d
  store i64 %96, i64* %90, align 8, !insn.addr !2123
  store i64 ptrtoint (i32* @global_var_1 to i64), i64* %rax.1.reg2mem, !insn.addr !2124
  br label %dec_label_pc_4ffd, !insn.addr !2124

dec_label_pc_4e95:                                ; preds = %dec_label_pc_4e95.preheader, %dec_label_pc_4f13
  %rax.0.reload = load i64, i64* %rax.0.reg2mem
  %101 = load i64, i64* %56, align 8, !insn.addr !2125
  %102 = load i64, i64* %58, align 8, !insn.addr !2126
  %103 = load i64, i64* %60, align 8, !insn.addr !2090
  %104 = load i64, i64* %62, align 8, !insn.addr !2091
  %105 = add i64 %104, %103, !insn.addr !2127
  %106 = inttoptr i64 %105 to i8*, !insn.addr !2127
  %107 = load i8, i8* %106, align 1, !insn.addr !2127
  %108 = add i64 %102, %101, !insn.addr !2128
  %109 = inttoptr i64 %108 to i8*, !insn.addr !2128
  store i8 %107, i8* %109, align 1, !insn.addr !2128
  %110 = load i64, i64* %62, align 8, !insn.addr !2129
  %111 = add i64 %110, 1, !insn.addr !2130
  %112 = icmp eq i64 %17, %111, !insn.addr !2131
  %113 = select i1 %112, i64 0, i64 %111, !insn.addr !2132
  store i64 %113, i64* %62, align 8, !insn.addr !2133
  %114 = load i64, i64* %58, align 8, !insn.addr !2134
  %115 = add i64 %114, 1, !insn.addr !2135
  %116 = icmp eq i64 %14, %115, !insn.addr !2136
  %117 = select i1 %116, i64 0, i64 %115, !insn.addr !2137
  store i64 %117, i64* %58, align 8, !insn.addr !2138
  %118 = load i64, i64* %64, align 8, !insn.addr !2092
  %119 = icmp ugt i64 %14, %118
  br i1 %119, label %dec_label_pc_4ef8, label %dec_label_pc_4f05, !insn.addr !2139

dec_label_pc_4ef8:                                ; preds = %dec_label_pc_4e95
  %120 = add i64 %118, 1, !insn.addr !2140
  store i64 %120, i64* %64, align 8, !insn.addr !2141
  br label %dec_label_pc_4f13, !insn.addr !2142

dec_label_pc_4f05:                                ; preds = %dec_label_pc_4e95
  store i64 %117, i64* %66, align 8, !insn.addr !2143
  br label %dec_label_pc_4f13, !insn.addr !2143

dec_label_pc_4f13:                                ; preds = %dec_label_pc_4f05, %dec_label_pc_4ef8
  %121 = add i64 %rax.0.reload, ptrtoint (i32* @global_var_1 to i64), !insn.addr !2144
  %122 = load i64, i64* %51, align 8, !insn.addr !2145
  %123 = icmp ugt i64 %122, %121
  store i64 %121, i64* %rax.0.reg2mem, !insn.addr !2146
  store i64* %56, i64** %.pre-phi8.reg2mem, !insn.addr !2146
  store i64* %58, i64** %.pre-phi4.reg2mem, !insn.addr !2146
  br i1 %123, label %dec_label_pc_4e95, label %dec_label_pc_4f24, !insn.addr !2146

dec_label_pc_4f24:                                ; preds = %dec_label_pc_4f13, %dec_label_pc_4da6.dec_label_pc_4f24_crit_edge
  %.pre-phi4.reload = load i64*, i64** %.pre-phi4.reg2mem
  %.pre-phi8.reload = load i64*, i64** %.pre-phi8.reg2mem
  store i64 0, i64* %51, align 8, !insn.addr !2147
  %124 = load i64, i64* %.pre-phi4.reload, align 8, !insn.addr !2088
  %125 = sub i64 %arg3, %14, !insn.addr !2148
  %126 = add i64 %124, %125, !insn.addr !2149
  %127 = sub i64 %arg3, %126, !insn.addr !2150
  %128 = load i64, i64* %.pre-phi8.reload, align 8, !insn.addr !2089
  %129 = add i64 %128, %124, !insn.addr !2089
  %130 = call i64 @memcpy(i64 %129, i64 %arg1, i64 %127, i64 0), !insn.addr !2151
  %131 = icmp eq i64 %126, 0, !insn.addr !2152
  %132 = icmp eq i1 %131, false, !insn.addr !2153
  br i1 %132, label %dec_label_pc_4f86, label %dec_label_pc_4f6a, !insn.addr !2153

dec_label_pc_4f6a:                                ; preds = %dec_label_pc_4f24
  %133 = load i64, i64* %.pre-phi4.reload, align 8, !insn.addr !2154
  %134 = add i64 %133, %127, !insn.addr !2154
  %135 = icmp eq i64 %14, %134, !insn.addr !2155
  %136 = select i1 %135, i64 0, i64 %134, !insn.addr !2156
  store i64 %136, i64* %.reg2mem9, !insn.addr !2157
  br label %dec_label_pc_4fa5, !insn.addr !2157

dec_label_pc_4f86:                                ; preds = %dec_label_pc_4f24
  %137 = load i64, i64* %.pre-phi8.reload, align 8, !insn.addr !2158
  %138 = add i64 %127, %arg1, !insn.addr !2159
  %139 = call i64 @memcpy(i64 %137, i64 %138, i64 %126, i64 0), !insn.addr !2160
  store i64 %126, i64* %.reg2mem9, !insn.addr !2161
  br label %dec_label_pc_4fa5, !insn.addr !2161

dec_label_pc_4fa5:                                ; preds = %dec_label_pc_4f86, %dec_label_pc_4f6a
  %.reload10 = load i64, i64* %.reg2mem9, !insn.addr !2162
  store i64 %.reload10, i64* %.pre-phi4.reload, align 8
  %140 = add i64 %arg2, 296, !insn.addr !2163
  %141 = inttoptr i64 %140 to i64*, !insn.addr !2163
  %142 = load i64, i64* %141, align 8, !insn.addr !2163
  %143 = icmp eq i64 %142, %14, !insn.addr !2164
  %144 = icmp eq i1 %143, false, !insn.addr !2165
  br i1 %144, label %dec_label_pc_4fc6, label %dec_label_pc_4fb1, !insn.addr !2165

dec_label_pc_4fb1:                                ; preds = %dec_label_pc_4fa5
  %145 = add i64 %arg2, 280, !insn.addr !2166
  %146 = inttoptr i64 %145 to i64*, !insn.addr !2166
  store i64 %.reload10, i64* %146, align 8, !insn.addr !2166
  store i64 ptrtoint (i32* @global_var_1 to i64), i64* %rax.1.reg2mem, !insn.addr !2167
  br label %dec_label_pc_4ffd, !insn.addr !2167

dec_label_pc_4fc6:                                ; preds = %dec_label_pc_4fa5
  %147 = add i64 %142, %arg3, !insn.addr !2168
  %148 = icmp ult i64 %14, %147, !insn.addr !2169
  %149 = icmp eq i1 %148, false, !insn.addr !2170
  br i1 %149, label %dec_label_pc_4fea, label %dec_label_pc_4fce, !insn.addr !2170

dec_label_pc_4fce:                                ; preds = %dec_label_pc_4fc6
  %150 = add i64 %arg2, 280, !insn.addr !2171
  %151 = inttoptr i64 %150 to i64*, !insn.addr !2171
  store i64 %.reload10, i64* %151, align 8, !insn.addr !2171
  store i64 %14, i64* %141, align 8, !insn.addr !2172
  store i64 ptrtoint (i32* @global_var_1 to i64), i64* %rax.1.reg2mem, !insn.addr !2173
  br label %dec_label_pc_4ffd, !insn.addr !2173

dec_label_pc_4fea:                                ; preds = %dec_label_pc_4fc6
  store i64 %147, i64* %141, align 8, !insn.addr !2174
  store i64 ptrtoint (i32* @global_var_1 to i64), i64* %rax.1.reg2mem, !insn.addr !2175
  br label %dec_label_pc_4ffd, !insn.addr !2175

dec_label_pc_4ffd:                                ; preds = %dec_label_pc_4dc3, %dec_label_pc_4d02, %dec_label_pc_4fea, %dec_label_pc_4fce, %dec_label_pc_4fb1, %dec_label_pc_4d33, %dec_label_pc_4e84, %dec_label_pc_4e65, %dec_label_pc_4e45
  %rax.1.reload = load i64, i64* %rax.1.reg2mem
  ret i64 %rax.1.reload, !insn.addr !2176
}

define i32 @iGetDMAStreamData(i64 %deviceExtension, i8 %DataStream_Num, i8* %pu8OutPutBuf, i64 %GetLen) local_unnamed_addr {
dec_label_pc_5010:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = call i64 @__decompiler_undefined_function_0()
  %2 = ptrtoint i8* %pu8OutPutBuf to i64
  %3 = trunc i64 %1 to i32
  %4 = mul i32 %3, 2, !insn.addr !2177
  %5 = inttoptr i64 %1 to i32*, !insn.addr !2177
  store i32 %4, i32* %5, align 4, !insn.addr !2177
  %6 = mul i64 %GetLen, ptrtoint (i16* @global_var_4 to i64), !insn.addr !2178
  %7 = add i64 %GetLen, -22, !insn.addr !2178
  %8 = add i64 %7, %6, !insn.addr !2178
  %9 = inttoptr i64 %8 to i8*, !insn.addr !2178
  %10 = load i8, i8* %9, align 1, !insn.addr !2178
  %11 = trunc i64 %GetLen to i8, !insn.addr !2178
  %12 = add i8 %10, %11, !insn.addr !2178
  store i8 %12, i8* %9, align 1, !insn.addr !2178
  %13 = call i64 @memcpy(i64 %deviceExtension, i64 %0, i64 %2, i64 %GetLen), !insn.addr !2179
  %14 = trunc i64 %13 to i32, !insn.addr !2180
  ret i32 %14, !insn.addr !2180
}

define i64 @iGetDMAStreamData.455(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4) local_unnamed_addr {
dec_label_pc_5040:
  %rax.0.reg2mem = alloca i64, !insn.addr !2181
  %rdi.0.reg2mem = alloca i64, !insn.addr !2181
  %rsi.0.reg2mem = alloca i64, !insn.addr !2181
  %rdx.0.reg2mem = alloca i64, !insn.addr !2181
  %storemerge1.reg2mem = alloca i64, !insn.addr !2181
  %0 = call i64 @mcount(), !insn.addr !2182
  %1 = trunc i64 %arg2 to i8, !insn.addr !2183
  %2 = icmp eq i8 %1, 0, !insn.addr !2183
  %3 = icmp eq i1 %2, false, !insn.addr !2184
  %storemerge.in.in.v = select i1 %3, i64 1224, i64 1232
  %storemerge.in.in = add i64 %storemerge.in.in.v, %arg1
  %storemerge.in = inttoptr i64 %storemerge.in.in to i64*
  %storemerge = load i64, i64* %storemerge.in, align 8
  %4 = add i64 %storemerge, 272, !insn.addr !2185
  %5 = inttoptr i64 %4 to i32*, !insn.addr !2185
  store i32 ptrtoint (i32* @global_var_2 to i32), i32* %5, align 4, !insn.addr !2185
  %6 = add i64 %storemerge, 280, !insn.addr !2186
  %7 = inttoptr i64 %6 to i64*, !insn.addr !2186
  %8 = load i64, i64* %7, align 8, !insn.addr !2186
  %9 = add i64 %storemerge, 232, !insn.addr !2187
  %10 = inttoptr i64 %9 to i64*, !insn.addr !2187
  %11 = load i64, i64* %10, align 8, !insn.addr !2187
  %12 = add i64 %8, %arg4, !insn.addr !2188
  %13 = icmp ugt i64 %12, %11
  br i1 %13, label %dec_label_pc_50cc, label %dec_label_pc_5112, !insn.addr !2189

dec_label_pc_50cc:                                ; preds = %dec_label_pc_5040
  %14 = sub i64 %11, %8, !insn.addr !2190
  %15 = add i64 %storemerge, 224, !insn.addr !2191
  %16 = inttoptr i64 %15 to i64*, !insn.addr !2191
  %17 = load i64, i64* %16, align 8, !insn.addr !2191
  %18 = add i64 %17, %8, !insn.addr !2191
  %19 = call i64 @memcpy(i64 %arg3, i64 %18, i64 %14, i64 %arg4), !insn.addr !2192
  %20 = add i64 %14, %arg3, !insn.addr !2193
  %21 = sub i64 %arg4, %14, !insn.addr !2194
  %22 = load i64, i64* %16, align 8, !insn.addr !2195
  %23 = call i64 @memcpy(i64 %20, i64 %22, i64 %21, i64 %arg4), !insn.addr !2196
  %24 = load i64, i64* %7, align 8, !insn.addr !2197
  %25 = add i64 %24, %arg4, !insn.addr !2197
  %26 = load i64, i64* %10, align 8, !insn.addr !2198
  %27 = sub i64 %25, %26, !insn.addr !2198
  store i64 %27, i64* %storemerge1.reg2mem, !insn.addr !2199
  store i64 %21, i64* %rdx.0.reg2mem, !insn.addr !2199
  store i64 %22, i64* %rsi.0.reg2mem, !insn.addr !2199
  store i64 %20, i64* %rdi.0.reg2mem, !insn.addr !2199
  br label %dec_label_pc_512b, !insn.addr !2199

dec_label_pc_5112:                                ; preds = %dec_label_pc_5040
  %28 = add i64 %storemerge, 224, !insn.addr !2200
  %29 = inttoptr i64 %28 to i64*, !insn.addr !2200
  %30 = load i64, i64* %29, align 8, !insn.addr !2200
  %31 = add i64 %30, %8, !insn.addr !2200
  %32 = call i64 @memcpy(i64 %arg3, i64 %31, i64 %arg4, i64 %arg4), !insn.addr !2201
  %33 = load i64, i64* %7, align 8, !insn.addr !2202
  %34 = add i64 %33, %arg4, !insn.addr !2202
  store i64 %34, i64* %storemerge1.reg2mem, !insn.addr !2202
  store i64 %arg4, i64* %rdx.0.reg2mem, !insn.addr !2202
  store i64 %31, i64* %rsi.0.reg2mem, !insn.addr !2202
  store i64 %arg3, i64* %rdi.0.reg2mem, !insn.addr !2202
  br label %dec_label_pc_512b, !insn.addr !2202

dec_label_pc_512b:                                ; preds = %dec_label_pc_5112, %dec_label_pc_50cc
  %rdi.0.reload = load i64, i64* %rdi.0.reg2mem
  %rsi.0.reload = load i64, i64* %rsi.0.reg2mem
  %rdx.0.reload = load i64, i64* %rdx.0.reg2mem
  %storemerge1.reload = load i64, i64* %storemerge1.reg2mem
  store i64 %storemerge1.reload, i64* %7, align 8
  %35 = load i64, i64* %10, align 8, !insn.addr !2203
  %36 = icmp eq i64 %storemerge1.reload, %35, !insn.addr !2204
  %37 = icmp eq i1 %36, false, !insn.addr !2205
  store i64 %35, i64* %rax.0.reg2mem, !insn.addr !2205
  br i1 %37, label %38, label %dec_label_pc_513b, !insn.addr !2205

; <label>:38:                                     ; preds = %dec_label_pc_512b
  %39 = trunc i64 %rsi.0.reload to i8, !insn.addr !2205
  %40 = inttoptr i64 %rdx.0.reload to i8*, !insn.addr !2205
  %41 = call i32 @iGetStreamData(i64 %rdi.0.reload, i8 %39, i8* %40, i64 %arg4), !insn.addr !2205
  %42 = sext i32 %41 to i64, !insn.addr !2205
  store i64 %42, i64* %rax.0.reg2mem, !insn.addr !2205
  br label %dec_label_pc_513b, !insn.addr !2205

dec_label_pc_513b:                                ; preds = %38, %dec_label_pc_512b
  %rax.0.reload = load i64, i64* %rax.0.reg2mem
  store i64 0, i64* %7, align 8, !insn.addr !2206
  ret i64 %rax.0.reload, !insn.addr !2206
}

define i32 @iGetStreamData(i64 %deviceExtension, i8 %DataStream_Num, i8* %pu8OutPutBuf, i64 %GetLen) local_unnamed_addr {
dec_label_pc_5146:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = call i64 @__decompiler_undefined_function_0()
  %2 = add i64 %1, 296, !insn.addr !2207
  %3 = inttoptr i64 %2 to i64*, !insn.addr !2207
  %4 = load i64, i64* %3, align 8, !insn.addr !2207
  %5 = sub i64 %4, %0, !insn.addr !2207
  store i64 %5, i64* %3, align 8, !insn.addr !2207
  %6 = add i64 %1, 272, !insn.addr !2208
  %7 = inttoptr i64 %6 to i32*, !insn.addr !2208
  store i32 0, i32* %7, align 4, !insn.addr !2208
  %8 = trunc i64 %0 to i32, !insn.addr !2209
  ret i32 %8, !insn.addr !2209
}

define i64 @iGetStreamData.515(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4) local_unnamed_addr {
dec_label_pc_5176:
  %rax.0.reg2mem = alloca i64, !insn.addr !2210
  %rdi.0.reg2mem = alloca i64, !insn.addr !2210
  %rsi.0.reg2mem = alloca i64, !insn.addr !2210
  %rdx.0.reg2mem = alloca i64, !insn.addr !2210
  %storemerge.reg2mem = alloca i64, !insn.addr !2210
  %0 = call i64 @mcount(), !insn.addr !2211
  %1 = mul i64 %arg2, 8, !insn.addr !2212
  %2 = and i64 %1, 2040, !insn.addr !2213
  %3 = add i64 %arg1, 1160, !insn.addr !2213
  %4 = add i64 %3, %2, !insn.addr !2213
  %5 = inttoptr i64 %4 to i64*, !insn.addr !2213
  %6 = load i64, i64* %5, align 8, !insn.addr !2213
  %7 = add i64 %6, 272, !insn.addr !2214
  %8 = inttoptr i64 %7 to i32*, !insn.addr !2214
  store i32 ptrtoint (i32* @global_var_2 to i32), i32* %8, align 4, !insn.addr !2214
  %9 = add i64 %6, 280, !insn.addr !2215
  %10 = inttoptr i64 %9 to i64*, !insn.addr !2215
  %11 = load i64, i64* %10, align 8, !insn.addr !2215
  %12 = add i64 %6, 232, !insn.addr !2216
  %13 = inttoptr i64 %12 to i64*, !insn.addr !2216
  %14 = load i64, i64* %13, align 8, !insn.addr !2216
  %15 = add i64 %11, %arg4, !insn.addr !2217
  %16 = icmp ugt i64 %15, %14
  br i1 %16, label %dec_label_pc_51f0, label %dec_label_pc_5236, !insn.addr !2218

dec_label_pc_51f0:                                ; preds = %dec_label_pc_5176
  %17 = sub i64 %14, %11, !insn.addr !2219
  %18 = add i64 %6, 224, !insn.addr !2220
  %19 = inttoptr i64 %18 to i64*, !insn.addr !2220
  %20 = load i64, i64* %19, align 8, !insn.addr !2220
  %21 = add i64 %20, %11, !insn.addr !2220
  %22 = call i64 @memcpy(i64 %arg3, i64 %21, i64 %17, i64 %arg4), !insn.addr !2221
  %23 = add i64 %17, %arg3, !insn.addr !2222
  %24 = sub i64 %arg4, %17, !insn.addr !2223
  %25 = load i64, i64* %19, align 8, !insn.addr !2224
  %26 = call i64 @memcpy(i64 %23, i64 %25, i64 %24, i64 %arg4), !insn.addr !2225
  %27 = load i64, i64* %10, align 8, !insn.addr !2226
  %28 = add i64 %27, %arg4, !insn.addr !2226
  %29 = load i64, i64* %13, align 8, !insn.addr !2227
  %30 = sub i64 %28, %29, !insn.addr !2227
  store i64 %30, i64* %storemerge.reg2mem, !insn.addr !2228
  store i64 %24, i64* %rdx.0.reg2mem, !insn.addr !2228
  store i64 %25, i64* %rsi.0.reg2mem, !insn.addr !2228
  store i64 %23, i64* %rdi.0.reg2mem, !insn.addr !2228
  br label %dec_label_pc_524f, !insn.addr !2228

dec_label_pc_5236:                                ; preds = %dec_label_pc_5176
  %31 = add i64 %6, 224, !insn.addr !2229
  %32 = inttoptr i64 %31 to i64*, !insn.addr !2229
  %33 = load i64, i64* %32, align 8, !insn.addr !2229
  %34 = add i64 %33, %11, !insn.addr !2229
  %35 = call i64 @memcpy(i64 %arg3, i64 %34, i64 %arg4, i64 %arg4), !insn.addr !2230
  %36 = load i64, i64* %10, align 8, !insn.addr !2231
  %37 = add i64 %36, %arg4, !insn.addr !2231
  store i64 %37, i64* %storemerge.reg2mem, !insn.addr !2231
  store i64 %arg4, i64* %rdx.0.reg2mem, !insn.addr !2231
  store i64 %34, i64* %rsi.0.reg2mem, !insn.addr !2231
  store i64 %arg3, i64* %rdi.0.reg2mem, !insn.addr !2231
  br label %dec_label_pc_524f, !insn.addr !2231

dec_label_pc_524f:                                ; preds = %dec_label_pc_5236, %dec_label_pc_51f0
  %rdi.0.reload = load i64, i64* %rdi.0.reg2mem
  %rsi.0.reload = load i64, i64* %rsi.0.reg2mem
  %rdx.0.reload = load i64, i64* %rdx.0.reg2mem
  %storemerge.reload = load i64, i64* %storemerge.reg2mem
  store i64 %storemerge.reload, i64* %10, align 8
  %38 = load i64, i64* %13, align 8, !insn.addr !2232
  %39 = icmp eq i64 %storemerge.reload, %38, !insn.addr !2233
  %40 = icmp eq i1 %39, false, !insn.addr !2234
  store i64 %38, i64* %rax.0.reg2mem, !insn.addr !2234
  br i1 %40, label %41, label %dec_label_pc_525f, !insn.addr !2234

; <label>:41:                                     ; preds = %dec_label_pc_524f
  %42 = trunc i64 %rdi.0.reload to i8, !insn.addr !2234
  %43 = inttoptr i64 %rsi.0.reload to i8*, !insn.addr !2234
  %44 = inttoptr i64 %rdx.0.reload to i8*, !insn.addr !2234
  %45 = call i8 @DispatchByRuleTable(i8 %42, i8* %43, i8* %44, i64 %arg4), !insn.addr !2234
  %46 = sext i8 %45 to i64, !insn.addr !2234
  store i64 %46, i64* %rax.0.reg2mem, !insn.addr !2234
  br label %dec_label_pc_525f, !insn.addr !2234

dec_label_pc_525f:                                ; preds = %41, %dec_label_pc_524f
  %rax.0.reload = load i64, i64* %rax.0.reg2mem
  store i64 0, i64* %10, align 8, !insn.addr !2235
  ret i64 %rax.0.reload, !insn.addr !2235
}

define i8 @DispatchByRuleTable(i8 %dmaCH, i8* %wtPtr, i8* %fp, i64 %length) local_unnamed_addr {
dec_label_pc_526a:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = call i64 @__decompiler_undefined_function_0()
  %2 = add i64 %1, 296, !insn.addr !2236
  %3 = inttoptr i64 %2 to i64*, !insn.addr !2236
  %4 = load i64, i64* %3, align 8, !insn.addr !2236
  %5 = sub i64 %4, %0, !insn.addr !2236
  store i64 %5, i64* %3, align 8, !insn.addr !2236
  %6 = add i64 %1, 272, !insn.addr !2237
  %7 = inttoptr i64 %6 to i32*, !insn.addr !2237
  store i32 0, i32* %7, align 4, !insn.addr !2237
  %8 = trunc i64 %0 to i8, !insn.addr !2238
  ret i8 %8, !insn.addr !2238
}

define i64 @DispatchByRuleTable.202(i32 %arg1, i64 %arg2, i64 %arg3, i64 %arg4) local_unnamed_addr {
dec_label_pc_529a:
  %0 = call i64 @mcount(), !insn.addr !2239
  ret i64 zext (i32 sub (i32 trunc (i64 or (i64 and (i64 ptrtoint (i16* @global_var_4 to i64), i64 -256), i64 188) to i32), i32 1) to i64), !insn.addr !2240
}

define i64 @function_533f(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4) local_unnamed_addr {
dec_label_pc_533f:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = add i64 %arg4, ptrtoint (i8* @global_var_f to i64), !insn.addr !2241
  %2 = inttoptr i64 %1 to i8*, !insn.addr !2241
  %3 = load i8, i8* %2, align 1, !insn.addr !2241
  %4 = trunc i64 %0 to i8, !insn.addr !2241
  %5 = or i8 %3, %4, !insn.addr !2241
  store i8 %5, i8* %2, align 1, !insn.addr !2241
  ret i64 %0, !insn.addr !2242
}

define i64 @function_53b3(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4) local_unnamed_addr {
dec_label_pc_53b3:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = mul i64 %arg4, ptrtoint (i32* @global_var_2 to i64), !insn.addr !2243
  %2 = add i64 %0, %1, !insn.addr !2243
  %3 = inttoptr i64 %2 to i32*, !insn.addr !2243
  store i32 -2096839037, i32* %3, align 4, !insn.addr !2243
  %4 = call i64 @unknown_ffffffffc1c1dcc3(), !insn.addr !2244
  %5 = call i64 @function_fffffffff3c9dcc7(), !insn.addr !2245
  ret i64 %5, !insn.addr !2245
}

define i64 @function_53e5() local_unnamed_addr {
dec_label_pc_53e5:
  %0 = call i64 @__decompiler_undefined_function_0()
  ret i64 %0, !insn.addr !2246
}

define i64 @function_53ff(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4) local_unnamed_addr {
dec_label_pc_53ff:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = add i64 %0, -127, !insn.addr !2247
  %2 = inttoptr i64 %1 to i8*, !insn.addr !2247
  %3 = load i8, i8* %2, align 1, !insn.addr !2247
  %4 = trunc i64 %arg4 to i8, !insn.addr !2247
  %5 = or i8 %3, %4, !insn.addr !2247
  store i8 %5, i8* %2, align 1, !insn.addr !2247
  ret i64 %0, !insn.addr !2248
}

define void @vCleanStreamBuffer(i64 %deviceExtension, i8 %DataStream_Num) local_unnamed_addr {
dec_label_pc_5434:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = sext i8 %DataStream_Num to i64
  %2 = call i64 @writeStorageBuff.351(i64 %deviceExtension, i64 %1, i64 %0), !insn.addr !2249
  ret void, !insn.addr !2250
}

define i64 @vCleanStreamBuffer.619(i64 %arg1, i8 %arg2) local_unnamed_addr {
dec_label_pc_5464:
  %0 = call i64 @mcount(), !insn.addr !2251
  %1 = zext i8 %arg2 to i64, !insn.addr !2252
  %2 = mul i64 %1, 8, !insn.addr !2253
  %3 = add i64 %arg1, 1160, !insn.addr !2253
  %4 = add i64 %3, %2, !insn.addr !2253
  %5 = inttoptr i64 %4 to i64*, !insn.addr !2253
  %6 = load i64, i64* %5, align 8, !insn.addr !2253
  %7 = add i64 %arg1, 248, !insn.addr !2254
  %8 = call i64 @down(i64 %7, i64 %1), !insn.addr !2255
  %9 = add i64 %6, 288, !insn.addr !2256
  %10 = inttoptr i64 %9 to i64*, !insn.addr !2256
  store i64 0, i64* %10, align 8, !insn.addr !2256
  ret i64 %8, !insn.addr !2256
}

define i64 @FUSBDTV_Cmd_MPU_I2CWrite(i64 %DeviceObject, i8 %mpu_slave_address, i8 %target_slave_address, i8 %RegOffset, i8 %data_length, i8* %pDataBuf, i8 %withRSA) local_unnamed_addr {
dec_label_pc_54b2:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = call i64 @__decompiler_undefined_function_0()
  %2 = call i64 @__decompiler_undefined_function_0()
  %rax = alloca i64, align 8
  %3 = call i64 @__decompiler_undefined_function_0()
  %4 = call i1 @__decompiler_undefined_function_2()
  %5 = sext i8 %RegOffset to i64
  %6 = trunc i64 %2 to i8
  %7 = trunc i64 %3 to i8, !insn.addr !2257
  %.neg1 = sext i1 %4 to i8
  %.neg2 = sub i8 %6, %7, !insn.addr !2257
  %8 = add i8 %.neg2, %.neg1, !insn.addr !2257
  %9 = inttoptr i64 %5 to i8*, !insn.addr !2257
  store i8 %8, i8* %9, align 1, !insn.addr !2257
  %10 = bitcast i64* %rax to i8*
  %11 = load i8, i8* %10, align 8, !insn.addr !2258
  %12 = load i64, i64* %rax, align 8
  %13 = trunc i64 %12 to i8, !insn.addr !2258
  %14 = add i8 %11, %13, !insn.addr !2258
  %15 = inttoptr i64 %12 to i8*, !insn.addr !2258
  store i8 %14, i8* %15, align 1, !insn.addr !2258
  %16 = load i8, i8* %10, align 8, !insn.addr !2259
  %17 = load i64, i64* %rax, align 8
  %18 = trunc i64 %17 to i8, !insn.addr !2259
  %19 = add i8 %16, %18, !insn.addr !2259
  %20 = inttoptr i64 %17 to i8*, !insn.addr !2259
  store i8 %19, i8* %20, align 1, !insn.addr !2259
  %21 = load i8, i8* %10, align 8, !insn.addr !2260
  %22 = load i64, i64* %rax, align 8
  %23 = trunc i64 %22 to i8, !insn.addr !2260
  %24 = add i8 %21, %23, !insn.addr !2260
  %25 = inttoptr i64 %22 to i8*, !insn.addr !2260
  store i8 %24, i8* %25, align 1, !insn.addr !2260
  %26 = add i64 %1, 296, !insn.addr !2261
  %27 = inttoptr i64 %26 to i64*, !insn.addr !2261
  store i64 0, i64* %27, align 8, !insn.addr !2261
  %28 = add i64 %1, 272, !insn.addr !2262
  %29 = inttoptr i64 %28 to i32*, !insn.addr !2262
  store i32 0, i32* %29, align 4, !insn.addr !2262
  %30 = call i64 @up(i64 %0), !insn.addr !2263
  ret i64 %30, !insn.addr !2264
}

define i64 @FUSBDTV_Cmd_MPU_I2CWrite.180(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4, i64 %arg5, i64 %arg6, i64 %arg7) local_unnamed_addr {
dec_label_pc_54e2:
  %storemerge.reg2mem = alloca i64, !insn.addr !2265
  %r12.0.reg2mem = alloca i64, !insn.addr !2265
  %0 = call i64 @mcount(), !insn.addr !2266
  %1 = add i64 %arg1, 344, !insn.addr !2267
  %2 = call i64 @down(i64 %1, i64 %arg2), !insn.addr !2268
  %3 = add i64 %arg1, 22144, !insn.addr !2269
  %4 = inttoptr i64 %3 to i64*, !insn.addr !2269
  %5 = load i64, i64* %4, align 8, !insn.addr !2269
  %6 = icmp eq i64 %5, 0, !insn.addr !2269
  %7 = icmp eq i1 %6, false, !insn.addr !2270
  br i1 %7, label %dec_label_pc_5568, label %dec_label_pc_5539, !insn.addr !2270

dec_label_pc_5539:                                ; preds = %dec_label_pc_5568, %dec_label_pc_54e2
  %sext8 = mul i64 %arg5, 72057594037927936
  %8 = sdiv i64 %sext8, 72057594037927936, !insn.addr !2271
  store i64 ptrtoint (i32* @global_var_1 to i64), i64* %4, align 8, !insn.addr !2272
  %9 = call i64 @up(i64 %1), !insn.addr !2273
  %10 = urem i64 %8, 256, !insn.addr !2274
  %11 = call i64 @FUSB_ExAllocatePool.203(i64 0, i64 %10), !insn.addr !2275
  %12 = trunc i64 %arg7 to i8, !insn.addr !2276
  %13 = icmp eq i8 %12, ptrtoint (i32* @global_var_1 to i8), !insn.addr !2276
  %14 = icmp eq i1 %13, false, !insn.addr !2277
  br i1 %14, label %dec_label_pc_5585, label %dec_label_pc_557c, !insn.addr !2277

dec_label_pc_5568:                                ; preds = %dec_label_pc_54e2, %dec_label_pc_5568
  %15 = call i64 @up(i64 %1), !insn.addr !2278
  %16 = call i64 @vUSB_Wait.362(i64 ptrtoint (i32* @global_var_1 to i64)), !insn.addr !2279
  %17 = call i64 @down(i64 %1, i64 %arg2), !insn.addr !2268
  %18 = load i64, i64* %4, align 8, !insn.addr !2269
  %19 = icmp eq i64 %18, 0, !insn.addr !2269
  %20 = icmp eq i1 %19, false, !insn.addr !2270
  br i1 %20, label %dec_label_pc_5568, label %dec_label_pc_5539, !insn.addr !2270

dec_label_pc_557c:                                ; preds = %dec_label_pc_5539
  %21 = inttoptr i64 %11 to i64*, !insn.addr !2280
  store i64 %arg6, i64* %21, align 8, !insn.addr !2280
  br label %dec_label_pc_5593, !insn.addr !2281

dec_label_pc_5585:                                ; preds = %dec_label_pc_5539
  %22 = call i64 @memcpy(i64 %11, i64 %arg6, i64 %10, i64 %arg4), !insn.addr !2282
  br label %dec_label_pc_5593, !insn.addr !2282

dec_label_pc_5593:                                ; preds = %dec_label_pc_5585, %dec_label_pc_557c
  %23 = trunc i64 %8 to i32
  %24 = urem i32 %23, 128, !insn.addr !2283
  %25 = or i32 %24, 128, !insn.addr !2284
  %26 = trunc i64 %arg2 to i8
  %27 = trunc i64 %arg3 to i8
  %28 = trunc i64 %arg4 to i8
  %29 = urem i32 %23, 256
  store i64 0, i64* %r12.0.reg2mem, !insn.addr !2284
  br label %dec_label_pc_55c2, !insn.addr !2284

dec_label_pc_55c2:                                ; preds = %dec_label_pc_560c, %dec_label_pc_5593
  %r12.0.reload = load i64, i64* %r12.0.reg2mem
  br i1 %14, label %dec_label_pc_55e5, label %dec_label_pc_55c8, !insn.addr !2285

dec_label_pc_55c8:                                ; preds = %dec_label_pc_55c2
  %30 = call i64 @mpu_i2c_write.294(i64 %arg1, i8 %26, i8 %27, i8 %28, i32 %25, i64 %11), !insn.addr !2286
  store i64 %30, i64* %storemerge.reg2mem, !insn.addr !2287
  br label %dec_label_pc_5600, !insn.addr !2287

dec_label_pc_55e5:                                ; preds = %dec_label_pc_55c2
  %31 = call i64 @mpu_i2c_write.294(i64 %arg1, i8 %26, i8 %27, i8 %28, i32 %29, i64 %11), !insn.addr !2288
  store i64 %31, i64* %storemerge.reg2mem, !insn.addr !2289
  br label %dec_label_pc_5600, !insn.addr !2289

dec_label_pc_5600:                                ; preds = %dec_label_pc_55e5, %dec_label_pc_55c8
  %storemerge.reload = load i64, i64* %storemerge.reg2mem
  %32 = urem i64 %storemerge.reload, 256, !insn.addr !2290
  %33 = call i64 @NT_SUCCESS.556(i64 %32), !insn.addr !2291
  %34 = trunc i64 %33 to i8, !insn.addr !2292
  %35 = icmp eq i8 %34, 0, !insn.addr !2292
  %36 = icmp eq i1 %35, false, !insn.addr !2293
  br i1 %36, label %dec_label_pc_5620, label %dec_label_pc_560c, !insn.addr !2293

dec_label_pc_560c:                                ; preds = %dec_label_pc_5600
  %37 = call i64 @FUSBDTV_Wait.332(i64* bitcast (i8* @global_var_a to i64*)), !insn.addr !2294
  %38 = add nuw nsw i64 %r12.0.reload, zext (i32 ptrtoint (i32* @global_var_1 to i32) to i64), !insn.addr !2295
  %39 = and i64 %38, 4294967295, !insn.addr !2295
  %40 = trunc i64 %38 to i32, !insn.addr !2296
  %41 = icmp eq i32 %40, ptrtoint (i8** @global_var_3 to i32), !insn.addr !2296
  %42 = icmp eq i1 %41, false, !insn.addr !2297
  store i64 %39, i64* %r12.0.reg2mem, !insn.addr !2297
  br i1 %42, label %dec_label_pc_55c2, label %dec_label_pc_5620, !insn.addr !2297

dec_label_pc_5620:                                ; preds = %dec_label_pc_560c, %dec_label_pc_5600
  %43 = call i64 @NT_SUCCESS.556(i64 %32), !insn.addr !2298
  ret i64 %43, !insn.addr !2299
}

define i64 @FUSBDTV_Cmd_MPU_I2CRead(i64 %DeviceObject, i8 %mpu_slave_address, i8 %target_slave_address, i8 %RegOffset, i8 %data_length, i8* %pDataBuf, i8 %withRSA) local_unnamed_addr {
dec_label_pc_5630:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = call i64 @__decompiler_undefined_function_0()
  %2 = call i64 @__decompiler_undefined_function_0()
  %3 = call i64 @__decompiler_undefined_function_0()
  %4 = sext i8 %RegOffset to i64
  %5 = sext i8 %mpu_slave_address to i64
  %6 = lshr i64 %4, ptrtoint (i8* @global_var_8 to i64), !insn.addr !2300
  %7 = add i64 %2, %6, !insn.addr !2300
  %8 = urem i64 %7, 256, !insn.addr !2300
  %9 = and i64 %2, 4294967040, !insn.addr !2300
  %10 = or i64 %8, %9, !insn.addr !2300
  %11 = add i64 %3, 1208008573, !insn.addr !2301
  %12 = inttoptr i64 %11 to i8*, !insn.addr !2301
  %13 = load i8, i8* %12, align 1, !insn.addr !2301
  %14 = trunc i64 %3 to i8, !insn.addr !2301
  %15 = or i8 %13, %14, !insn.addr !2301
  store i8 %15, i8* %12, align 1, !insn.addr !2301
  %16 = trunc i64 %0 to i32, !insn.addr !2302
  %17 = call i64 @FUSB_ExFreePool.600(i32 %16, i64 %5), !insn.addr !2302
  %18 = add i64 %1, 22144, !insn.addr !2303
  %19 = inttoptr i64 %18 to i64*, !insn.addr !2303
  store i64 0, i64* %19, align 8, !insn.addr !2303
  ret i64 %10, !insn.addr !2304
}

define i64 @FUSBDTV_Cmd_MPU_I2CRead.337(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4, i64 %arg5, i64 %arg6, i64 %arg7) local_unnamed_addr {
dec_label_pc_5660:
  %storemerge.reg2mem = alloca i64, !insn.addr !2305
  %r14.0.reg2mem = alloca i64, !insn.addr !2305
  %0 = call i64 @mcount(), !insn.addr !2306
  %1 = add i64 %arg1, 344, !insn.addr !2307
  %2 = call i64 @down(i64 %1, i64 %arg2), !insn.addr !2308
  %3 = add i64 %arg1, 22144, !insn.addr !2309
  %4 = inttoptr i64 %3 to i64*, !insn.addr !2309
  %5 = load i64, i64* %4, align 8, !insn.addr !2309
  %6 = icmp eq i64 %5, 0, !insn.addr !2309
  %7 = icmp eq i1 %6, false, !insn.addr !2310
  br i1 %7, label %dec_label_pc_5715, label %dec_label_pc_56ba, !insn.addr !2310

dec_label_pc_56ba:                                ; preds = %dec_label_pc_5715, %dec_label_pc_5660
  store i64 ptrtoint (i32* @global_var_1 to i64), i64* %4, align 8, !insn.addr !2311
  %8 = call i64 @up(i64 %1), !insn.addr !2312
  %9 = urem i64 %arg5, 256, !insn.addr !2313
  %10 = call i64 @FUSB_ExAllocatePool.203(i64 0, i64 %9), !insn.addr !2314
  %11 = trunc i64 %arg5 to i32, !insn.addr !2315
  %12 = urem i32 %11, 128, !insn.addr !2316
  %13 = or i32 %12, 128, !insn.addr !2317
  %14 = trunc i64 %arg7 to i8, !insn.addr !2318
  %15 = icmp eq i8 %14, ptrtoint (i32* @global_var_1 to i8), !insn.addr !2318
  %16 = icmp eq i1 %15, false, !insn.addr !2319
  %17 = trunc i64 %arg2 to i8
  %18 = trunc i64 %arg3 to i8
  %19 = trunc i64 %arg4 to i8
  %20 = trunc i64 %9 to i32
  store i64 0, i64* %r14.0.reg2mem, !insn.addr !2320
  br label %dec_label_pc_572c, !insn.addr !2320

dec_label_pc_5715:                                ; preds = %dec_label_pc_5660, %dec_label_pc_5715
  %21 = call i64 @up(i64 %1), !insn.addr !2321
  %22 = call i64 @vUSB_Wait.362(i64 ptrtoint (i32* @global_var_1 to i64)), !insn.addr !2322
  %23 = call i64 @down(i64 %1, i64 %arg2), !insn.addr !2308
  %24 = load i64, i64* %4, align 8, !insn.addr !2309
  %25 = icmp eq i64 %24, 0, !insn.addr !2309
  %26 = icmp eq i1 %25, false, !insn.addr !2310
  br i1 %26, label %dec_label_pc_5715, label %dec_label_pc_56ba, !insn.addr !2310

dec_label_pc_572c:                                ; preds = %dec_label_pc_5777, %dec_label_pc_56ba
  %r14.0.reload = load i64, i64* %r14.0.reg2mem
  br i1 %16, label %dec_label_pc_574f, label %dec_label_pc_5732, !insn.addr !2319

dec_label_pc_5732:                                ; preds = %dec_label_pc_572c
  %27 = call i64 @mpu_i2c_read.539(i64 %arg1, i8 %17, i8 %18, i8 %19, i32 %13, i64 %10), !insn.addr !2323
  store i64 %27, i64* %storemerge.reg2mem, !insn.addr !2324
  br label %dec_label_pc_576a, !insn.addr !2324

dec_label_pc_574f:                                ; preds = %dec_label_pc_572c
  %28 = call i64 @mpu_i2c_read.539(i64 %arg1, i8 %17, i8 %18, i8 %19, i32 %20, i64 %10), !insn.addr !2325
  store i64 %28, i64* %storemerge.reg2mem, !insn.addr !2326
  br label %dec_label_pc_576a, !insn.addr !2326

dec_label_pc_576a:                                ; preds = %dec_label_pc_574f, %dec_label_pc_5732
  %storemerge.reload = load i64, i64* %storemerge.reg2mem
  %29 = urem i64 %storemerge.reload, 256, !insn.addr !2327
  %30 = call i64 @NT_SUCCESS.556(i64 %29), !insn.addr !2328
  %31 = trunc i64 %30 to i8, !insn.addr !2329
  %32 = icmp eq i8 %31, 0, !insn.addr !2329
  %33 = icmp eq i1 %32, false, !insn.addr !2330
  br i1 %33, label %dec_label_pc_578b, label %dec_label_pc_5777, !insn.addr !2330

dec_label_pc_5777:                                ; preds = %dec_label_pc_576a
  %34 = call i64 @FUSBDTV_Wait.332(i64* bitcast (i8* @global_var_a to i64*)), !insn.addr !2331
  %35 = add nuw nsw i64 %r14.0.reload, zext (i32 ptrtoint (i32* @global_var_1 to i32) to i64), !insn.addr !2332
  %36 = and i64 %35, 4294967295, !insn.addr !2332
  %37 = trunc i64 %35 to i32, !insn.addr !2333
  %38 = icmp eq i32 %37, ptrtoint (i8** @global_var_3 to i32), !insn.addr !2333
  %39 = icmp eq i1 %38, false, !insn.addr !2334
  store i64 %36, i64* %r14.0.reg2mem, !insn.addr !2334
  br i1 %39, label %dec_label_pc_572c, label %dec_label_pc_578b, !insn.addr !2334

dec_label_pc_578b:                                ; preds = %dec_label_pc_5777, %dec_label_pc_576a
  %40 = call i64 @NT_SUCCESS.556(i64 %29), !insn.addr !2335
  %41 = trunc i64 %40 to i8, !insn.addr !2336
  %42 = icmp eq i8 %41, 0, !insn.addr !2336
  %brmerge = or i1 %16, %42
  br i1 %brmerge, label %dec_label_pc_579b, label %dec_label_pc_57a9, !insn.addr !2337

dec_label_pc_579b:                                ; preds = %dec_label_pc_578b
  ret i64 %40, !insn.addr !2338

dec_label_pc_57a9:                                ; preds = %dec_label_pc_578b
  %43 = inttoptr i64 %10 to i64*, !insn.addr !2339
  %44 = load i64, i64* %43, align 8, !insn.addr !2339
  %45 = inttoptr i64 %arg6 to i64*, !insn.addr !2340
  store i64 %44, i64* %45, align 8, !insn.addr !2340
  ret i64 %44, !insn.addr !2341
}

define i32 @FUSBDTV_BDAQueueProcessThreadInit(i64 %streamObject) local_unnamed_addr {
dec_label_pc_57c3:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = call i64 @__decompiler_undefined_function_0()
  %2 = call i64 @__decompiler_undefined_function_0()
  %3 = call i64 @__decompiler_undefined_function_0()
  %4 = add i64 %1, -96, !insn.addr !2342
  %5 = inttoptr i64 %4 to i64*, !insn.addr !2342
  %6 = load i64, i64* %5, align 8, !insn.addr !2342
  %7 = call i64 @memcpy(i64 %6, i64 %0, i64 %2, i64 %3), !insn.addr !2343
  %8 = trunc i64 %7 to i32, !insn.addr !2344
  ret i32 %8, !insn.addr !2344
}

define i64 @FUSBDTV_BDAQueueProcessThreadInit.611(i64 %arg1) local_unnamed_addr {
dec_label_pc_57f3:
  %0 = call i64 @mcount(), !insn.addr !2345
  ret i64 4294967295, !insn.addr !2346
}

define i32 @FUSBDTV_BDAQueueProcessThread(i8* %Context) local_unnamed_addr {
dec_label_pc_581c:
  %.reg2mem = alloca i64, !insn.addr !2347
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = call i64 @__decompiler_undefined_function_0()
  %2 = call i64 @__decompiler_undefined_function_0()
  %rax = alloca i64, align 8
  %3 = call i64 @__decompiler_undefined_function_0()
  %4 = ptrtoint i8* %Context to i64
  %5 = bitcast i64* %rax to i8*
  %6 = trunc i64 %3 to i8
  %7 = mul i8 %6, 2, !insn.addr !2347
  %8 = inttoptr i64 %3 to i8*, !insn.addr !2347
  store i8 %7, i8* %8, align 1, !insn.addr !2347
  %9 = load i8, i8* %5, align 8, !insn.addr !2348
  %10 = lshr i64 %1, ptrtoint (i8* @global_var_8 to i64), !insn.addr !2348
  %11 = trunc i64 %10 to i8, !insn.addr !2348
  %12 = add i8 %9, %11, !insn.addr !2348
  %13 = load i64, i64* %rax, align 8, !insn.addr !2348
  %14 = inttoptr i64 %13 to i8*, !insn.addr !2348
  store i8 %12, i8* %14, align 1, !insn.addr !2348
  %15 = call i64 @kthread_create(i64 %4, i64 %0, i64 %2), !insn.addr !2349
  store i64 %15, i64* %rax, align 8, !insn.addr !2349
  %16 = add i64 %1, 432, !insn.addr !2350
  %17 = inttoptr i64 %16 to i64*, !insn.addr !2350
  store i64 %15, i64* %17, align 8, !insn.addr !2350
  %18 = icmp ult i64 %15, -4095
  %19 = load i64, i64* %rax, align 8
  store i64 %19, i64* %.reg2mem, !insn.addr !2351
  br i1 %18, label %dec_label_pc_5838, label %dec_label_pc_5845, !insn.addr !2351

dec_label_pc_5838:                                ; preds = %dec_label_pc_581c
  %20 = call i64 @wake_up_process(i64 %19), !insn.addr !2352
  store i64 ptrtoint (i32* @global_var_1 to i64), i64* %rax, align 8, !insn.addr !2353
  store i64 ptrtoint (i32* @global_var_1 to i64), i64* %.reg2mem, !insn.addr !2353
  br label %dec_label_pc_5845, !insn.addr !2353

dec_label_pc_5845:                                ; preds = %dec_label_pc_581c, %dec_label_pc_5838
  %.reload = load i64, i64* %.reg2mem, !insn.addr !2354
  %21 = trunc i64 %.reload to i32, !insn.addr !2354
  ret i32 %21, !insn.addr !2354
}

define i64 @FUSBDTV_BDAQueueProcessThread.587(i64 %arg1) local_unnamed_addr {
dec_label_pc_584c:
  %rax.0.reg2mem = alloca i64, !insn.addr !2355
  %storemerge2.reg2mem = alloca i64, !insn.addr !2355
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = call i64 @mcount(), !insn.addr !2356
  %2 = call i64 @kthread_should_stop(), !insn.addr !2357
  %3 = trunc i64 %2 to i32, !insn.addr !2358
  %4 = icmp eq i32 %3, 0, !insn.addr !2358
  %5 = icmp eq i1 %4, false, !insn.addr !2359
  br i1 %5, label %6, label %dec_label_pc_5882, !insn.addr !2359

; <label>:6:                                      ; preds = %dec_label_pc_584c
  %7 = trunc i64 %0 to i8, !insn.addr !2359
  %8 = call i64 @FUSBDTV_StopBulkStream(i64 %arg1, i8 %7), !insn.addr !2359
  br label %dec_label_pc_5882, !insn.addr !2359

dec_label_pc_5882:                                ; preds = %6, %dec_label_pc_584c
  %9 = add i64 %arg1, 248, !insn.addr !2360
  %10 = call i64 @down(i64 %9, i64 %0), !insn.addr !2361
  %11 = call i64 @FUSB_ExAllocatePool.203(i64 0, i64 58656), !insn.addr !2362
  %12 = add i64 %arg1, 1232
  %13 = inttoptr i64 %12 to i64*
  %14 = add i64 %arg1, 1224
  %15 = inttoptr i64 %14 to i64*
  %16 = add i64 %arg1, 128, !insn.addr !2363
  %17 = inttoptr i64 %16 to i8*, !insn.addr !2363
  br label %dec_label_pc_589c, !insn.addr !2364

dec_label_pc_589c:                                ; preds = %dec_label_pc_589c.backedge, %dec_label_pc_5882
  %18 = load i8, i8* %17, align 1, !insn.addr !2363
  %19 = urem i8 %18, 2
  %20 = icmp eq i8 %19, 0, !insn.addr !2365
  %21 = icmp eq i1 %20, false, !insn.addr !2366
  br i1 %21, label %dec_label_pc_58d7, label %dec_label_pc_58aa, !insn.addr !2366

dec_label_pc_58aa:                                ; preds = %dec_label_pc_589c
  %22 = load i64, i64* %13, align 8, !insn.addr !2367
  %23 = add i64 %22, 296, !insn.addr !2368
  %24 = inttoptr i64 %23 to i64*, !insn.addr !2368
  %25 = load i64, i64* %24, align 8, !insn.addr !2368
  %26 = icmp ult i64 %25, 58656
  store i64 %22, i64* %rax.0.reg2mem, !insn.addr !2369
  br i1 %26, label %dec_label_pc_593d, label %dec_label_pc_58be, !insn.addr !2369

dec_label_pc_58be:                                ; preds = %dec_label_pc_58aa
  %27 = call i64 @iGetDMAStreamData.455(i64 %arg1, i64 0, i64 %11, i64 58656), !insn.addr !2370
  store i64 %27, i64* %storemerge2.reg2mem, !insn.addr !2371
  br label %dec_label_pc_58fd, !insn.addr !2371

dec_label_pc_58d7:                                ; preds = %dec_label_pc_589c
  %28 = load i64, i64* %15, align 8, !insn.addr !2372
  %29 = add i64 %28, 296, !insn.addr !2373
  %30 = inttoptr i64 %29 to i64*, !insn.addr !2373
  %31 = load i64, i64* %30, align 8, !insn.addr !2373
  %32 = icmp ult i64 %31, 58656
  store i64 %28, i64* %rax.0.reg2mem, !insn.addr !2374
  br i1 %32, label %dec_label_pc_593d, label %dec_label_pc_58eb, !insn.addr !2374

dec_label_pc_58eb:                                ; preds = %dec_label_pc_58d7
  %33 = zext i8 %19 to i64, !insn.addr !2365
  %34 = call i64 @iGetDMAStreamData.455(i64 %arg1, i64 %33, i64 %11, i64 58656), !insn.addr !2375
  store i64 %34, i64* %storemerge2.reg2mem, !insn.addr !2376
  br label %dec_label_pc_58fd, !insn.addr !2376

dec_label_pc_58fd:                                ; preds = %dec_label_pc_58eb, %dec_label_pc_58be
  %storemerge2.reload = load i64, i64* %storemerge2.reg2mem
  %35 = trunc i64 %storemerge2.reload to i32, !insn.addr !2377
  %36 = icmp eq i32 %35, 0, !insn.addr !2377
  store i64 %storemerge2.reload, i64* %rax.0.reg2mem, !insn.addr !2378
  br i1 %36, label %dec_label_pc_593d, label %dec_label_pc_5901, !insn.addr !2378

dec_label_pc_5901:                                ; preds = %dec_label_pc_58fd
  %sext1 = mul i64 %storemerge2.reload, 4294967296
  %37 = sdiv i64 %sext1, 4294967296, !insn.addr !2379
  %38 = mul nsw i64 %37, -1370734243, !insn.addr !2379
  %39 = lshr i64 %38, ptrtoint (i32** @global_var_20 to i64), !insn.addr !2379
  %40 = trunc i64 %39 to i32, !insn.addr !2379
  %41 = add i32 %40, %35, !insn.addr !2380
  %42 = ashr i32 %41, ptrtoint (i8** @global_var_7 to i32), !insn.addr !2381
  %43 = ashr i32 %35, ptrtoint (i8** @global_var_1f to i32), !insn.addr !2382
  %44 = sub i32 %42, %43, !insn.addr !2383
  %45 = mul i32 %44, -188
  %46 = sub i32 0, %35, !insn.addr !2384
  %47 = icmp eq i32 %45, %46, !insn.addr !2384
  %48 = icmp eq i1 %47, false, !insn.addr !2385
  br i1 %48, label %dec_label_pc_589c.backedge, label %dec_label_pc_591c, !insn.addr !2385

dec_label_pc_589c.backedge:                       ; preds = %dec_label_pc_5901, %dec_label_pc_591c
  br label %dec_label_pc_589c

dec_label_pc_591c:                                ; preds = %dec_label_pc_5901
  %49 = load i8, i8* %17, align 1, !insn.addr !2386
  %50 = urem i8 %49, 2
  %51 = zext i8 %50 to i32, !insn.addr !2387
  %52 = call i64 @DispatchByRuleTable.202(i32 %51, i64 %11, i64 %arg1, i64 58656), !insn.addr !2388
  br label %dec_label_pc_589c.backedge, !insn.addr !2389

dec_label_pc_593d:                                ; preds = %dec_label_pc_58fd, %dec_label_pc_58d7, %dec_label_pc_58aa
  %rax.0.reload = load i64, i64* %rax.0.reg2mem
  ret i64 %rax.0.reload, !insn.addr !2390
}

define void @FUSBDTV_BDAQueueProcessThreadClose(i64 %streamObject) local_unnamed_addr {
dec_label_pc_5940:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = call i64 @__decompiler_undefined_function_0()
  %2 = trunc i64 %streamObject to i32, !insn.addr !2391
  %3 = call i64 @FUSB_ExFreePool.600(i32 %2, i64 %1), !insn.addr !2391
  %4 = call i64 @up(i64 %0), !insn.addr !2392
  %5 = call i64 @TLIB_Delay.388(i64* bitcast (i32* @global_var_1 to i64*)), !insn.addr !2393
  ret void, !insn.addr !2394
}

define i64 @FUSBDTV_StopBulkStream(i64 %deviceExtension, i8 %DataStream_Num) local_unnamed_addr {
dec_label_pc_595c:
  ret i64 0, !insn.addr !2395
}

define i64 @FUSBDTV_BDAQueueProcessThreadClose.501(i64 %arg1) local_unnamed_addr {
dec_label_pc_5970:
  %rax.0.reg2mem = alloca i64, !insn.addr !2396
  %0 = call i64 @mcount(), !insn.addr !2397
  %1 = icmp eq i64 %arg1, 0, !insn.addr !2398
  store i64 %0, i64* %rax.0.reg2mem, !insn.addr !2399
  br i1 %1, label %dec_label_pc_598a, label %dec_label_pc_597e, !insn.addr !2399

dec_label_pc_597e:                                ; preds = %dec_label_pc_5970
  %2 = add i64 %arg1, 432, !insn.addr !2400
  %3 = inttoptr i64 %2 to i64*, !insn.addr !2400
  %4 = load i64, i64* %3, align 8, !insn.addr !2400
  %5 = call i64 @kthread_stop(i64 %4), !insn.addr !2401
  store i64 %5, i64* %rax.0.reg2mem, !insn.addr !2401
  br label %dec_label_pc_598a, !insn.addr !2401

dec_label_pc_598a:                                ; preds = %dec_label_pc_597e, %dec_label_pc_5970
  %rax.0.reload = load i64, i64* %rax.0.reg2mem
  ret i64 %rax.0.reload, !insn.addr !2402
}

define i64 @FUSBDTV_StopBulkStream.338(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_598c:
  %0 = call i64 @mcount(), !insn.addr !2403
  %1 = urem i64 %arg2, 256, !insn.addr !2404
  %2 = mul i64 %1, 8, !insn.addr !2405
  %3 = add i64 %arg1, 1160, !insn.addr !2405
  %4 = add i64 %3, %2, !insn.addr !2405
  %5 = inttoptr i64 %4 to i64*, !insn.addr !2405
  %6 = load i64, i64* %5, align 8, !insn.addr !2405
  %7 = inttoptr i64 %6 to i64*, !insn.addr !2406
  %8 = load i64, i64* %7, align 8, !insn.addr !2406
  %9 = call i64 @FUSBDTV_BDAQueueProcessThreadClose.501(i64 %6), !insn.addr !2407
  %10 = add i64 %6, 184, !insn.addr !2408
  %11 = inttoptr i64 %10 to i8*, !insn.addr !2408
  store i8 0, i8* %11, align 1, !insn.addr !2408
  %12 = call i64 @Hardware_StopTSStream.617(i64 %8, i64 %1), !insn.addr !2409
  ret i64 %12, !insn.addr !2409
}

define i64 @FUSBDTV_StartTransfer(i64 %deviceExtension, i64 %StreamObject, i64 %TransferObjBufSize, i64 %Index) local_unnamed_addr {
dec_label_pc_59ed:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = call i64 @__decompiler_undefined_function_0()
  %2 = call i64 @__decompiler_undefined_function_0()
  %sext = mul i64 %1, 4294967296
  %3 = sdiv i64 %sext, 4294967296, !insn.addr !2410
  %4 = add i64 %0, 1152, !insn.addr !2411
  %5 = add i64 %4, %3, !insn.addr !2411
  %6 = inttoptr i64 %5 to i8*, !insn.addr !2411
  store i8 0, i8* %6, align 1, !insn.addr !2411
  %7 = add i64 %0, 192, !insn.addr !2412
  %8 = inttoptr i64 %7 to i64*, !insn.addr !2412
  %9 = load i64, i64* %8, align 8, !insn.addr !2412
  %10 = add i64 %9, -1, !insn.addr !2412
  store i64 %10, i64* %8, align 8, !insn.addr !2412
  ret i64 %2, !insn.addr !2412
}

define i64 @FUSBDTV_StartBulkStream(i64 %deviceExtension, i8 %DataStream_Num, i64 %TransferObjBufSize, i64 %StreamBufSize, i8* %Contex) local_unnamed_addr {
dec_label_pc_5a04:
  %rax = alloca i64, align 8
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = trunc i64 %0 to i32
  %2 = mul i32 %1, 2, !insn.addr !2413
  %3 = inttoptr i64 %0 to i32*, !insn.addr !2413
  store i32 %2, i32* %3, align 4, !insn.addr !2413
  %4 = bitcast i64* %rax to i8*
  %5 = load i8, i8* %4, align 8, !insn.addr !2414
  %6 = load i64, i64* %rax, align 8
  %7 = trunc i64 %6 to i8, !insn.addr !2414
  %8 = add i8 %5, %7, !insn.addr !2414
  %9 = inttoptr i64 %6 to i8*, !insn.addr !2414
  store i8 %8, i8* %9, align 1, !insn.addr !2414
  %10 = load i64, i64* %rax, align 8, !insn.addr !2415
  ret i64 %10, !insn.addr !2415
}

define i64 @FUSBDTV_StartTransfer.232(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_5a1d:
  %0 = call i64 @mcount(), !insn.addr !2416
  %1 = add i64 %arg2, 128, !insn.addr !2417
  %2 = inttoptr i64 %1 to i8*, !insn.addr !2417
  %3 = load i8, i8* %2, align 1, !insn.addr !2417
  %4 = call i64 @Hardware_StartTSStream.564(i64 %arg1, i8 %3), !insn.addr !2418
  ret i64 %4, !insn.addr !2419
}

define i64 @FUSBDTV_StartBulkStream.453(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4, i64 %arg5) local_unnamed_addr {
dec_label_pc_5a34:
  %0 = call i64 @mcount(), !insn.addr !2420
  %1 = lshr i64 %arg4, ptrtoint (i32* @global_var_1 to i64), !insn.addr !2421
  %2 = add i64 %arg3, -1
  %3 = icmp ult i64 %2, %1
  %4 = icmp ne i64 %arg4, 0, !insn.addr !2422
  %or.cond4.not = icmp eq i1 %4, %3
  %5 = icmp ult i64 %arg3, 513
  %or.cond6 = icmp eq i1 %5, %or.cond4.not
  %6 = icmp ult i64 %arg4, 37601
  %or.cond8 = icmp eq i1 %6, %or.cond6
  %7 = mul i64 %arg2, 8, !insn.addr !2423
  %sext = and i64 %7, 2040
  %8 = add i64 %arg1, 1160, !insn.addr !2424
  %9 = add i64 %8, %sext, !insn.addr !2424
  %10 = inttoptr i64 %9 to i64*, !insn.addr !2424
  %11 = load i64, i64* %10, align 8, !insn.addr !2424
  %12 = add i64 %11, 224, !insn.addr !2425
  %13 = inttoptr i64 %12 to i64*, !insn.addr !2425
  %14 = load i64, i64* %13, align 8, !insn.addr !2425
  %15 = add i64 %11, 304, !insn.addr !2426
  %16 = inttoptr i64 %15 to i64*, !insn.addr !2426
  %17 = load i64, i64* %16, align 8, !insn.addr !2426
  %18 = inttoptr i64 %11 to i8*, !insn.addr !2427
  call void @__asm_rep_stosq_memset(i8* %18, i64 0, i64 55), !insn.addr !2427
  %19 = add i64 %arg1, 192, !insn.addr !2428
  %20 = inttoptr i64 %19 to i64*, !insn.addr !2428
  %21 = load i64, i64* %20, align 8, !insn.addr !2428
  %22 = add i64 %21, 1, !insn.addr !2428
  store i64 %22, i64* %20, align 8, !insn.addr !2428
  %23 = add i64 %11, 352, !insn.addr !2429
  %24 = inttoptr i64 %23 to i64*, !insn.addr !2429
  store i64 %arg5, i64* %24, align 8, !insn.addr !2429
  %25 = inttoptr i64 %11 to i64*, !insn.addr !2430
  store i64 %arg1, i64* %25, align 8, !insn.addr !2430
  %26 = add i64 %11, 184, !insn.addr !2431
  %27 = inttoptr i64 %26 to i8*, !insn.addr !2431
  store i8 ptrtoint (i32* @global_var_1 to i8), i8* %27, align 1, !insn.addr !2431
  %28 = add i64 %11, 216, !insn.addr !2432
  %29 = inttoptr i64 %28 to i64*, !insn.addr !2432
  store i64 0, i64* %29, align 8, !insn.addr !2432
  %arg4.op = mul i64 %arg4, 512
  %30 = select i1 %or.cond8, i64 %arg4.op, i64 19251200, !insn.addr !2433
  %31 = add i64 %11, 232, !insn.addr !2434
  %32 = inttoptr i64 %31 to i64*, !insn.addr !2434
  store i64 %30, i64* %32, align 8, !insn.addr !2434
  %33 = add i64 %11, 272, !insn.addr !2435
  %34 = inttoptr i64 %33 to i32*, !insn.addr !2435
  store i32 0, i32* %34, align 4, !insn.addr !2435
  %35 = add i64 %11, 344, !insn.addr !2436
  %36 = inttoptr i64 %35 to i8*, !insn.addr !2436
  store i8 0, i8* %36, align 1, !insn.addr !2436
  %37 = trunc i64 %arg2 to i8, !insn.addr !2437
  %38 = add i64 %11, 128, !insn.addr !2437
  %39 = inttoptr i64 %38 to i8*, !insn.addr !2437
  store i8 %37, i8* %39, align 1, !insn.addr !2437
  %40 = add i64 %11, 144, !insn.addr !2438
  %41 = inttoptr i64 %40 to i64*, !insn.addr !2438
  store i64 0, i64* %41, align 8, !insn.addr !2438
  store i64 %14, i64* %13, align 8, !insn.addr !2439
  %42 = add i64 %11, 296, !insn.addr !2440
  %43 = inttoptr i64 %42 to i64*, !insn.addr !2440
  store i64 0, i64* %43, align 8, !insn.addr !2440
  %44 = add i64 %11, 288, !insn.addr !2441
  %45 = inttoptr i64 %44 to i64*, !insn.addr !2441
  store i64 0, i64* %45, align 8, !insn.addr !2441
  %46 = add i64 %11, 280, !insn.addr !2442
  %47 = inttoptr i64 %46 to i64*, !insn.addr !2442
  store i64 0, i64* %47, align 8, !insn.addr !2442
  %arg3.op = mul i64 %arg3, 1024
  %48 = select i1 %or.cond8, i64 %arg3.op, i64 524288, !insn.addr !2443
  %49 = add i64 %11, 312, !insn.addr !2444
  %50 = inttoptr i64 %49 to i64*, !insn.addr !2444
  store i64 %48, i64* %50, align 8, !insn.addr !2444
  store i64 %17, i64* %16, align 8, !insn.addr !2445
  %51 = add i64 %11, 336, !insn.addr !2446
  %52 = inttoptr i64 %51 to i64*, !insn.addr !2446
  store i64 0, i64* %52, align 8, !insn.addr !2446
  %53 = add i64 %11, 328, !insn.addr !2447
  %54 = inttoptr i64 %53 to i64*, !insn.addr !2447
  store i64 0, i64* %54, align 8, !insn.addr !2447
  %55 = add i64 %11, 320, !insn.addr !2448
  %56 = inttoptr i64 %55 to i64*, !insn.addr !2448
  store i64 0, i64* %56, align 8, !insn.addr !2448
  %57 = add i64 %11, 152, !insn.addr !2449
  %58 = inttoptr i64 %57 to i32*, !insn.addr !2449
  store i32 0, i32* %58, align 4, !insn.addr !2449
  %59 = add i64 %11, 160, !insn.addr !2450
  %60 = call i64 @__init_waitqueue_head(i64 %59, i64 0, i64 %48, i64 0), !insn.addr !2451
  %61 = add i64 %11, 80, !insn.addr !2452
  %62 = inttoptr i64 %61 to i32*, !insn.addr !2452
  store i32 0, i32* %62, align 4, !insn.addr !2452
  %63 = add i64 %11, 88, !insn.addr !2453
  %64 = call i64 @__init_waitqueue_head(i64 %63, i64 0, i64 %48, i64 0), !insn.addr !2454
  %65 = call i64 @FUSBDTV_StartTransfer.232(i64 %arg1, i64 %11), !insn.addr !2455
  %66 = urem i64 %65, 256, !insn.addr !2456
  %67 = call i64 @NT_SUCCESS.556(i64 %66), !insn.addr !2457
  store i64 %11, i64* %10, align 8, !insn.addr !2458
  ret i64 %67, !insn.addr !2458
}

define i64 @FUSBDTV_Cmd_GetCusInfo(i64 %deviceExtension, i8* %pDataBuf) local_unnamed_addr {
dec_label_pc_5bfd:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = call i64 @__decompiler_undefined_function_0()
  %2 = call i64 @__decompiler_undefined_function_0()
  %3 = ptrtoint i8* %pDataBuf to i64
  %4 = add i64 %3, 1152, !insn.addr !2459
  %5 = add i64 %4, %1, !insn.addr !2459
  %6 = inttoptr i64 %5 to i8*, !insn.addr !2459
  store i8 ptrtoint (i32* @global_var_1 to i8), i8* %6, align 1, !insn.addr !2459
  %7 = call i64 @FUSBDTV_BDAQueueProcessThreadInit.611(i64 %2), !insn.addr !2460
  ret i64 %0, !insn.addr !2461
}

define i64 @FUSBDTV_Cmd_GetCusInfo.500(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_5c2d:
  %stack_var_-32 = alloca i64, align 8
  %0 = call i64 @mcount(), !insn.addr !2462
  store i64 0, i64* %stack_var_-32, align 8, !insn.addr !2463
  %1 = call i64 @bReadPcieCfgReg.477(i64 44, i64* bitcast (i8* @global_var_8 to i64*), i64* nonnull %stack_var_-32, i64 %arg1), !insn.addr !2464
  ret i64 0, !insn.addr !2465
}

define i64 @FUSBDTV_Cmd_SysCtrlRead(i64 %deviceExtension, i8 %RegOffset, i16 %u16ReadLen, i8* %pDataBuf) local_unnamed_addr {
dec_label_pc_5c69:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = call i64 @__decompiler_undefined_function_0()
  %2 = add i64 %0, -24, !insn.addr !2466
  %3 = inttoptr i64 %2 to i32*, !insn.addr !2466
  %4 = load i32, i32* %3, align 4, !insn.addr !2466
  %5 = zext i32 %4 to i64, !insn.addr !2466
  %6 = lshr i64 %5, ptrtoint (i8* @global_var_8 to i64), !insn.addr !2467
  %7 = trunc i64 %6 to i8, !insn.addr !2468
  %8 = add i64 %1, ptrtoint (i8** @global_var_3 to i64), !insn.addr !2468
  %9 = inttoptr i64 %8 to i8*, !insn.addr !2468
  store i8 %7, i8* %9, align 1, !insn.addr !2468
  %10 = trunc i32 %4 to i8, !insn.addr !2469
  %11 = add i64 %1, ptrtoint (i16* @global_var_4 to i64), !insn.addr !2469
  %12 = inttoptr i64 %11 to i8*, !insn.addr !2469
  store i8 %10, i8* %12, align 1, !insn.addr !2469
  %13 = lshr i64 %5, ptrtoint (i32** @global_var_18 to i64), !insn.addr !2470
  %14 = trunc i64 %13 to i8, !insn.addr !2471
  %15 = add i64 %1, ptrtoint (i8* @global_var_5 to i64), !insn.addr !2471
  %16 = inttoptr i64 %15 to i8*, !insn.addr !2471
  store i8 %14, i8* %16, align 1, !insn.addr !2471
  %17 = lshr i64 %5, ptrtoint (i8* @global_var_10 to i64), !insn.addr !2472
  %18 = trunc i64 %17 to i8, !insn.addr !2473
  %19 = add i64 %1, ptrtoint (i8* @global_var_6 to i64), !insn.addr !2473
  %20 = inttoptr i64 %19 to i8*, !insn.addr !2473
  store i8 %18, i8* %20, align 1, !insn.addr !2473
  %21 = inttoptr i64 %1 to i8*, !insn.addr !2474
  store i8 ptrtoint (i32* @global_var_1 to i8), i8* %21, align 1, !insn.addr !2474
  ret i64 ptrtoint (i32* @global_var_1 to i64), !insn.addr !2475
}

define i64 @FUSBDTV_Cmd_SysCtrlRead.198(i64 %arg1, i64* %arg2, i64* %arg3, i64* %arg4) local_unnamed_addr {
dec_label_pc_5c99:
  %0 = call i64 @__decompiler_undefined_function_0()
  ret i64 %0, !insn.addr !2476
}

define i64 @FPCIEDTV_Cmd_I2CWrite(i64 %deviceExtension, i8 %Slave_Addr, i8 %RegOffset, i16 %u16WriteLen, i8* %pDataBuf, i8 %slvMode) local_unnamed_addr {
dec_label_pc_5c9e:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = call i64 @mcount(), !insn.addr !2477
  %2 = add i64 %0, -8, !insn.addr !2478
  %3 = inttoptr i64 %2 to i64*, !insn.addr !2478
  store i64 0, i64* %3, align 8, !insn.addr !2478
  %4 = call i64 @bReadPcieCfgReg.477(i64 44, i64* bitcast (i8* @global_var_8 to i64*), i64* %3, i64 %deviceExtension), !insn.addr !2479
  %5 = trunc i64 %4 to i8, !insn.addr !2480
  %6 = icmp eq i8 %5, ptrtoint (i32* @global_var_1 to i8), !insn.addr !2480
  %7 = zext i1 %6 to i64, !insn.addr !2481
  ret i64 %7, !insn.addr !2482
}

define i64 @FPCIEDTV_Cmd_I2CWrite.305(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4, i64 %arg5, i64* %arg6) local_unnamed_addr {
dec_label_pc_5cce:
  %0 = ptrtoint i64* %arg6 to i64
  %stack_var_-104 = alloca i64, align 8
  %1 = call i64 @mcount(), !insn.addr !2483
  %2 = call i64 @__readgsqword(i64 40), !insn.addr !2484
  %3 = urem i64 %arg4, 65536, !insn.addr !2485
  %4 = ptrtoint i64* %stack_var_-104 to i64, !insn.addr !2486
  %5 = call i64 @memcpy(i64 %4, i64 %arg5, i64 %3, i64 %arg4), !insn.addr !2487
  %6 = urem i64 %arg2, 256, !insn.addr !2488
  %7 = urem i64 %arg4, 256, !insn.addr !2489
  %8 = urem i64 %arg3, 256, !insn.addr !2490
  %9 = urem i64 %0, 256, !insn.addr !2491
  %10 = call i64 @i2c_access.374(i64* bitcast (i32* @global_var_1 to i64*), i64 0, i64 %arg1, i64 %6, i64 %9, i64 %8, i64* nonnull %stack_var_-104, i64 0, i64 %7, i32 0), !insn.addr !2492
  %11 = urem i64 %10, 256, !insn.addr !2493
  %12 = call i64 @NT_SUCCESS.556(i64 %11), !insn.addr !2494
  ret i64 %12, !insn.addr !2495
}

define i64 @FPCIEDTV_Cmd_I2CRead(i64 %deviceExtension, i8 %Slave_Addr, i8 %RegOffset, i16 %u16ReadLen, i8* %pDataBuf, i8 %slvMode) local_unnamed_addr {
dec_label_pc_5d6a:
  %rax.0.reg2mem = alloca i64, !insn.addr !2496
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = call i1 @__decompiler_undefined_function_2()
  %2 = icmp eq i1 %1, false, !insn.addr !2496
  %3 = zext i1 %2 to i64, !insn.addr !2497
  %4 = add i64 %0, -56, !insn.addr !2498
  %5 = inttoptr i64 %4 to i64*, !insn.addr !2498
  %6 = load i64, i64* %5, align 8, !insn.addr !2498
  %7 = call i64 @__readgsqword(i64 40), !insn.addr !2499
  %8 = icmp eq i64 %6, %7, !insn.addr !2499
  store i64 %3, i64* %rax.0.reg2mem, !insn.addr !2500
  br i1 %8, label %dec_label_pc_5d84, label %dec_label_pc_5d7f, !insn.addr !2500

dec_label_pc_5d7f:                                ; preds = %dec_label_pc_5d6a
  %9 = call i64 @__stack_chk_fail(), !insn.addr !2501
  store i64 %9, i64* %rax.0.reg2mem, !insn.addr !2501
  br label %dec_label_pc_5d84, !insn.addr !2501

dec_label_pc_5d84:                                ; preds = %dec_label_pc_5d7f, %dec_label_pc_5d6a
  %rax.0.reload = load i64, i64* %rax.0.reg2mem
  ret i64 %rax.0.reload, !insn.addr !2502
}

define i64 @FPCIEDTV_Cmd_I2CRead.212(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4, i64 %arg5, i64* %arg6) local_unnamed_addr {
dec_label_pc_5d9a:
  %0 = ptrtoint i64* %arg6 to i64
  %stack_var_-72 = alloca i64, align 8
  %1 = call i64 @mcount(), !insn.addr !2503
  %2 = call i64 @__readgsqword(i64 40), !insn.addr !2504
  store i64 0, i64* %stack_var_-72, align 8, !insn.addr !2505
  %3 = urem i64 %0, 256, !insn.addr !2506
  %4 = urem i64 %arg2, 256, !insn.addr !2507
  %5 = urem i64 %arg4, 256, !insn.addr !2508
  %6 = add i64 %arg4, zext (i8 ptrtoint (i8** @global_var_3 to i8) to i64), !insn.addr !2509
  %7 = and i64 %6, zext (i8 trunc (i32 shl (i32 -1, i32 ptrtoint (i32* @global_var_2 to i32)) to i8) to i64), !insn.addr !2510
  %8 = urem i64 %arg3, 256, !insn.addr !2511
  %9 = call i64 @i2c_access.374(i64* bitcast (i32* @global_var_1 to i64*), i64 ptrtoint (i32* @global_var_1 to i64), i64 %arg1, i64 %4, i64 %3, i64 %8, i64* nonnull %stack_var_-72, i64 %7, i64 %5, i32 0), !insn.addr !2512
  %10 = urem i64 %9, 256, !insn.addr !2513
  %11 = call i64 @NT_SUCCESS.556(i64 %10), !insn.addr !2514
  ret i64 0, !insn.addr !2515
}

define i64 @FUSBDTV_Cmd_Get_GPIO(i64 %deviceExtension, i8* %GPIO_Value) local_unnamed_addr {
dec_label_pc_5e48:
  %rax.0.reg2mem = alloca i64, !insn.addr !2516
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = call i64 @__decompiler_undefined_function_0()
  %2 = call i64 @__decompiler_undefined_function_0()
  %3 = call i64 @__decompiler_undefined_function_0()
  %4 = trunc i64 %3 to i8, !insn.addr !2516
  %5 = mul i64 %2, ptrtoint (i32* @global_var_1 to i64), !insn.addr !2516
  %6 = add i64 %5, %1, !insn.addr !2516
  %7 = inttoptr i64 %6 to i8*, !insn.addr !2516
  store i8 %4, i8* %7, align 1, !insn.addr !2516
  %8 = add i64 %0, -24, !insn.addr !2517
  %9 = inttoptr i64 %8 to i64*, !insn.addr !2517
  %10 = load i64, i64* %9, align 8, !insn.addr !2517
  %11 = call i64 @__readgsqword(i64 40), !insn.addr !2518
  %12 = icmp eq i64 %10, %11, !insn.addr !2518
  store i64 ptrtoint (i32* @global_var_1 to i64), i64* %rax.0.reg2mem, !insn.addr !2519
  br i1 %12, label %dec_label_pc_5e6f, label %dec_label_pc_5e6a, !insn.addr !2519

dec_label_pc_5e6a:                                ; preds = %dec_label_pc_5e48
  %13 = call i64 @__stack_chk_fail(), !insn.addr !2520
  store i64 %13, i64* %rax.0.reg2mem, !insn.addr !2520
  br label %dec_label_pc_5e6f, !insn.addr !2520

dec_label_pc_5e6f:                                ; preds = %dec_label_pc_5e6a, %dec_label_pc_5e48
  %rax.0.reload = load i64, i64* %rax.0.reg2mem
  ret i64 %rax.0.reload, !insn.addr !2521
}

define i64 @FUSBDTV_Cmd_Get_GPIO.464(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_5e78:
  %stack_var_-56 = alloca i64, align 8
  %0 = call i64 @mcount(), !insn.addr !2522
  store i64 0, i64* %stack_var_-56, align 8, !insn.addr !2523
  %1 = call i64 @cfg_access.209(i64* bitcast (i32* @global_var_1 to i64*), i64 %arg1, i64 2192, i64* bitcast (i16* @global_var_4 to i64*), i64* nonnull %stack_var_-56), !insn.addr !2524
  %2 = urem i64 %1, 256, !insn.addr !2525
  %3 = call i64 @NT_SUCCESS.556(i64 %2), !insn.addr !2526
  %4 = call i64 @cfg_access.209(i64* bitcast (i32* @global_var_1 to i64*), i64 %arg1, i64 2196, i64* bitcast (i16* @global_var_4 to i64*), i64* nonnull %stack_var_-56), !insn.addr !2527
  %5 = urem i64 %4, 256, !insn.addr !2528
  %6 = call i64 @NT_SUCCESS.556(i64 %5), !insn.addr !2529
  ret i64 %6, !insn.addr !2529
}

define i64 @FUSBDTV_Cmd_Set_GPIO(i64 %deviceExtension, i8 %GPIO_Value, i8 %GPIO_Mask) local_unnamed_addr {
dec_label_pc_5efc:
  %r13.0.reg2mem = alloca i64, !insn.addr !2530
  %rdx.0.reg2mem = alloca i64, !insn.addr !2530
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = call i64 @__decompiler_undefined_function_0()
  %2 = call i64 @__decompiler_undefined_function_0()
  %3 = call i64 @__decompiler_undefined_function_0()
  %4 = trunc i64 %3 to i8, !insn.addr !2531
  %5 = icmp eq i8 %4, 0, !insn.addr !2531
  store i64 0, i64* %rdx.0.reg2mem, !insn.addr !2532
  br i1 %5, label %dec_label_pc_5f14, label %dec_label_pc_5f05, !insn.addr !2532

dec_label_pc_5f05:                                ; preds = %dec_label_pc_5efc
  %6 = add i64 %2, -46, !insn.addr !2533
  %7 = inttoptr i64 %6 to i8*, !insn.addr !2533
  %8 = load i8, i8* %7, align 1, !insn.addr !2533
  %9 = and i8 %8, -2
  %10 = zext i8 %9 to i64, !insn.addr !2534
  %.masked = and i64 %0, 4294967295
  %11 = or i64 %.masked, %10, !insn.addr !2535
  store i64 and (i64 ptrtoint (i32* @global_var_1 to i64), i64 zext (i32 ptrtoint (i32* @global_var_1 to i32) to i64)), i64* %rdx.0.reg2mem, !insn.addr !2536
  store i64 %11, i64* %r13.0.reg2mem, !insn.addr !2536
  br label %dec_label_pc_5f14, !insn.addr !2536

dec_label_pc_5f14:                                ; preds = %dec_label_pc_5f05, %dec_label_pc_5efc
  %r13.0.reload = load i64, i64* %r13.0.reg2mem
  %rdx.0.reload = load i64, i64* %rdx.0.reg2mem
  %12 = trunc i64 %r13.0.reload to i8, !insn.addr !2537
  %13 = inttoptr i64 %1 to i8*, !insn.addr !2537
  store i8 %12, i8* %13, align 1, !insn.addr !2537
  ret i64 %rdx.0.reload, !insn.addr !2538
}

define i64 @FUSBDTV_Cmd_Set_GPIO.468(i64 %arg1, i64* %arg2, i64 %arg3) local_unnamed_addr {
dec_label_pc_5f2c:
  %merge.reg2mem = alloca i64, !insn.addr !2539
  %stack_var_-56 = alloca i8, align 1
  %0 = call i64 @mcount(), !insn.addr !2540
  store i8 0, i8* %stack_var_-56, align 1, !insn.addr !2541
  %1 = bitcast i8* %stack_var_-56 to i64*, !insn.addr !2542
  %2 = call i64 @cfg_access.209(i64* bitcast (i32* @global_var_1 to i64*), i64 %arg1, i64 2192, i64* bitcast (i16* @global_var_4 to i64*), i64* nonnull %1), !insn.addr !2542
  %3 = urem i64 %2, 256, !insn.addr !2543
  %4 = call i64 @NT_SUCCESS.556(i64 %3), !insn.addr !2544
  %5 = trunc i64 %4 to i8, !insn.addr !2545
  %6 = icmp eq i8 %5, 0, !insn.addr !2545
  store i64 0, i64* %merge.reg2mem, !insn.addr !2546
  br i1 %6, label %dec_label_pc_6003, label %dec_label_pc_5f79, !insn.addr !2546

dec_label_pc_5f79:                                ; preds = %dec_label_pc_5f2c
  %7 = ptrtoint i64* %arg2 to i64
  %8 = trunc i64 %7 to i8, !insn.addr !2547
  %9 = and i8 %8, ptrtoint (i32* @global_var_1 to i8), !insn.addr !2548
  %10 = sub i8 0, %9, !insn.addr !2549
  %11 = trunc i64 %arg3 to i8
  %12 = and i8 %11, ptrtoint (i32* @global_var_1 to i8)
  %13 = sub i8 0, %12
  %14 = and i8 %13, ptrtoint (i16* @global_var_4 to i8), !insn.addr !2550
  %15 = and i8 %14, %10, !insn.addr !2550
  %16 = sub i8 0, %14
  %17 = sub i8 %16, 1
  %18 = load i8, i8* %stack_var_-56, align 1, !insn.addr !2551
  %19 = and i8 %18, %17, !insn.addr !2551
  %20 = or i8 %19, %15, !insn.addr !2552
  store i8 %20, i8* %stack_var_-56, align 1, !insn.addr !2553
  %21 = call i64 @cfg_access.209(i64* null, i64 %arg1, i64 2192, i64* bitcast (i16* @global_var_4 to i64*), i64* nonnull %1), !insn.addr !2554
  %22 = urem i64 %21, 256, !insn.addr !2555
  %23 = call i64 @NT_SUCCESS.556(i64 %22), !insn.addr !2556
  %24 = trunc i64 %23 to i8, !insn.addr !2557
  %25 = icmp eq i8 %24, 0, !insn.addr !2557
  %26 = icmp eq i1 %25, false, !insn.addr !2558
  %spec.select = select i1 %26, i64 %23, i64 0
  store i64 %spec.select, i64* %merge.reg2mem
  br label %dec_label_pc_6003

dec_label_pc_6003:                                ; preds = %dec_label_pc_5f79, %dec_label_pc_5f2c
  %merge.reload = load i64, i64* %merge.reg2mem
  ret i64 %merge.reload, !insn.addr !2559
}

define i64 @FUSBDTV_Cmd_Get_GPIO_Ex(i64 %deviceExtension, i8* %GPIO_Value) local_unnamed_addr {
dec_label_pc_601b:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = call i64 @__decompiler_undefined_function_0()
  %2 = call i64 @__decompiler_undefined_function_0()
  %3 = call i64 @__decompiler_undefined_function_0()
  %4 = trunc i64 %3 to i8
  %5 = mul i8 %4, 2, !insn.addr !2560
  %6 = inttoptr i64 %3 to i8*, !insn.addr !2560
  store i8 %5, i8* %6, align 1, !insn.addr !2560
  %7 = add i64 %2, ptrtoint (i16* @global_var_4 to i64), !insn.addr !2561
  %8 = inttoptr i64 %7 to i8*, !insn.addr !2561
  %9 = load i8, i8* %8, align 1, !insn.addr !2561
  %10 = lshr i64 %1, ptrtoint (i8* @global_var_8 to i64), !insn.addr !2561
  %11 = trunc i64 %10 to i8, !insn.addr !2561
  %12 = add i8 %9, %11, !insn.addr !2561
  store i8 %12, i8* %8, align 1, !insn.addr !2561
  %13 = inttoptr i64 %2 to i64*, !insn.addr !2562
  %14 = inttoptr i64 %0 to i64*, !insn.addr !2562
  %15 = call i64 @cfg_access.209(i64* bitcast (i32* @global_var_1 to i64*), i64 %1, i64 2196, i64* %13, i64* %14), !insn.addr !2562
  %16 = urem i64 %15, 256, !insn.addr !2563
  %17 = call i64 @NT_SUCCESS.556(i64 %16), !insn.addr !2564
  ret i64 %17, !insn.addr !2565
}

define i64 @FUSBDTV_Cmd_Get_GPIO_Ex.609(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_604b:
  %0 = call i64 @mcount(), !insn.addr !2566
  ret i64 %0, !insn.addr !2567
}

define i64 @FUSBDTV_Cmd_Set_GPIO_Ex(i64 %deviceExtension, i8 %GPIO_Value, i8 %GPIO_Mask) local_unnamed_addr {
dec_label_pc_607d:
  %rdx.0.reg2mem = alloca i64, !insn.addr !2568
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = call i64 @__decompiler_undefined_function_0()
  %2 = call i64 @__decompiler_undefined_function_0()
  %3 = call i64 @__decompiler_undefined_function_0()
  %4 = trunc i64 %0 to i8
  %5 = trunc i64 %3 to i8, !insn.addr !2568
  %6 = add i8 %5, %4, !insn.addr !2568
  %7 = inttoptr i64 %deviceExtension to i8*, !insn.addr !2568
  store i8 %6, i8* %7, align 1, !insn.addr !2568
  %8 = call i64 @NT_SUCCESS.556(i64 %deviceExtension), !insn.addr !2569
  %9 = trunc i64 %8 to i8, !insn.addr !2570
  %10 = icmp eq i8 %9, 0, !insn.addr !2570
  store i64 0, i64* %rdx.0.reg2mem, !insn.addr !2571
  br i1 %10, label %dec_label_pc_60a0, label %dec_label_pc_608f, !insn.addr !2571

dec_label_pc_608f:                                ; preds = %dec_label_pc_607d
  %11 = add i64 %1, -30, !insn.addr !2572
  %12 = inttoptr i64 %11 to i8*, !insn.addr !2572
  %13 = load i8, i8* %12, align 1, !insn.addr !2572
  %14 = and i8 %13, ptrtoint (i8* @global_var_f to i8), !insn.addr !2573
  %15 = inttoptr i64 %2 to i8*, !insn.addr !2574
  store i8 %14, i8* %15, align 1, !insn.addr !2574
  store i64 and (i64 ptrtoint (i32* @global_var_1 to i64), i64 zext (i32 ptrtoint (i32* @global_var_1 to i32) to i64)), i64* %rdx.0.reg2mem, !insn.addr !2575
  br label %dec_label_pc_60a0, !insn.addr !2575

dec_label_pc_60a0:                                ; preds = %dec_label_pc_608f, %dec_label_pc_607d
  %rdx.0.reload = load i64, i64* %rdx.0.reg2mem
  ret i64 %rdx.0.reload, !insn.addr !2576
}

define i64 @FUSBDTV_Cmd_Set_GPIO_Ex.552(i64 %arg1, i64 %arg2, i64* %arg3) local_unnamed_addr {
dec_label_pc_60ad:
  %0 = ptrtoint i64* %arg3 to i64
  %stack_var_-56 = alloca i8, align 1
  %1 = call i64 @mcount(), !insn.addr !2577
  %2 = trunc i64 %0 to i32, !insn.addr !2578
  store i8 0, i8* %stack_var_-56, align 1, !insn.addr !2579
  %3 = bitcast i8* %stack_var_-56 to i64*, !insn.addr !2580
  %4 = call i64 @cfg_access.209(i64* bitcast (i32* @global_var_1 to i64*), i64 %arg1, i64 2192, i64* bitcast (i16* @global_var_4 to i64*), i64* nonnull %3), !insn.addr !2580
  %5 = urem i64 %4, 256, !insn.addr !2581
  %6 = call i64 @NT_SUCCESS.556(i64 %5), !insn.addr !2582
  %7 = shl i32 %2, ptrtoint (i8** @global_var_3 to i32), !insn.addr !2583
  %8 = sub i32 0, %7
  %9 = sub i32 %8, 1
  %10 = trunc i32 %9 to i8, !insn.addr !2584
  %11 = load i8, i8* %stack_var_-56, align 1, !insn.addr !2584
  %12 = and i8 %11, %10, !insn.addr !2584
  %13 = zext i8 %12 to i64, !insn.addr !2584
  %14 = and i32 %9, -256
  %15 = zext i32 %14 to i64, !insn.addr !2584
  %16 = or i64 %13, %15, !insn.addr !2584
  ret i64 %16, !insn.addr !2585
}

define void @FUSB_ExFreePool(i8* %p) local_unnamed_addr {
dec_label_pc_6128:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = call i64 @__decompiler_undefined_function_0()
  %2 = call i64 @__decompiler_undefined_function_0()
  %3 = call i64 @__decompiler_undefined_function_0()
  %4 = call i64 @__decompiler_undefined_function_0()
  %5 = trunc i64 %4 to i8
  %6 = mul i8 %5, 2, !insn.addr !2586
  %7 = inttoptr i64 %4 to i8*, !insn.addr !2586
  store i8 %6, i8* %7, align 1, !insn.addr !2586
  %8 = inttoptr i64 %3 to i64*, !insn.addr !2587
  %9 = inttoptr i64 %0 to i64*, !insn.addr !2587
  %10 = call i64 @cfg_access.209(i64* null, i64 %1, i64 %2, i64* %8, i64* %9), !insn.addr !2587
  ret void, !insn.addr !2587
}

define i8* @FUSB_ExAllocatePool(i8 %PoolType, i64 %NumberOfBytes) local_unnamed_addr {
dec_label_pc_6138:
  %0 = sext i8 %PoolType to i64
  %1 = call i64 @NT_SUCCESS.556(i64 %0), !insn.addr !2588
  %2 = trunc i64 %1 to i8, !insn.addr !2589
  %3 = icmp eq i8 %2, 0, !insn.addr !2589
  %4 = icmp eq i1 %3, false, !insn.addr !2590
  %5 = zext i1 %4 to i64, !insn.addr !2591
  %6 = inttoptr i64 %5 to i8*, !insn.addr !2591
  ret i8* %6, !insn.addr !2591
}

define i8 @Adpater_TunerS_RegWrite(i8* %DevExt, i8 %DevCH, i8 %byReg, i8* %pBuffer, i8 %cnt) local_unnamed_addr {
dec_label_pc_6150:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = trunc i64 %0 to i8
  ret i8 %1
}

define i64 @function_6152() local_unnamed_addr {
dec_label_pc_6152:
  %0 = call i64 @__decompiler_undefined_function_0()
  ret i64 %0, !insn.addr !2592
}

define i64 @FUSB_ExFreePool.600(i32 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_6158:
  %0 = call i64 @__decompiler_undefined_function_0()
  ret i64 %0, !insn.addr !2593
}

define i8 @Adpater_TunerS_RegRead(i8* %DevExt, i8 %DevCH, i8 %byReg, i8* %pBuffer, i8 %cnt) local_unnamed_addr {
dec_label_pc_6160:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = ptrtoint i8* %pBuffer to i64
  %2 = lshr i64 %1, ptrtoint (i8* @global_var_8 to i64), !insn.addr !2594
  %3 = add i64 %0, %2, !insn.addr !2594
  %4 = trunc i64 %3 to i8, !insn.addr !2595
  ret i8 %4, !insn.addr !2595
}

define i64 @FUSB_ExAllocatePool.203(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_6168:
  %0 = call i64 @__decompiler_undefined_function_0()
  ret i64 %0, !insn.addr !2596
}

define i8 @Adpater_TunerT_RegWrite(i8* %hExt, i8 %DevCH, i8 %subAddress, i8* %pData, i8 %cnt) local_unnamed_addr {
dec_label_pc_6170:
  %rbx = alloca i64, align 8
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = ptrtoint i8* %pData to i64
  %2 = add i64 %0, -119, !insn.addr !2597
  %3 = inttoptr i64 %2 to i8*, !insn.addr !2597
  %4 = load i8, i8* %3, align 1, !insn.addr !2597
  %5 = trunc i64 %1 to i8, !insn.addr !2597
  %6 = add i8 %4, %5, !insn.addr !2597
  store i8 %6, i8* %3, align 1, !insn.addr !2597
  %7 = bitcast i64* %rbx to i32*
  %8 = load i32, i32* %7, align 8, !insn.addr !2598
  %9 = trunc i32 %8 to i8, !insn.addr !2599
  ret i8 %9, !insn.addr !2599
}

define i8 @Adpater_TunerT_RegRead(i8* %hExt, i8 %DevCH, i8 %subAddress, i8* %pData, i8 %cnt) local_unnamed_addr {
dec_label_pc_6180:
  %0 = call i64 @mcount(), !insn.addr !2600
  ret i8 0, !insn.addr !2601
}

define i8 @Ber_to_Signal_Quality(i32 %berdat, i32 %pecycle, i8 %DevCH, i32 %src_select) local_unnamed_addr {
dec_label_pc_6190:
  %0 = call i64 @mcount(), !insn.addr !2602
  ret i8 0, !insn.addr !2603
}

define i64 @Adpater_TunerT_RegWrite.601(i64 %arg1, i64 %arg2, i64 %arg3, i64* %arg4, i64* %arg5) local_unnamed_addr {
dec_label_pc_61a0:
  %0 = call i64 @mcount(), !insn.addr !2604
  ret i64 0, !insn.addr !2605
}

define i64 @Adpater_TunerT_RegRead.162() local_unnamed_addr {
dec_label_pc_61b0:
  %0 = call i64 @mcount(), !insn.addr !2606
  ret i64 0, !insn.addr !2607
}

define i64 @Ber_to_Signal_Quality.548(i32 %arg1, i64 %arg2, i64 %arg3, i64* %arg4) local_unnamed_addr {
dec_label_pc_61c0:
  %0 = call i64 @mcount(), !insn.addr !2608
  ret i64 ptrtoint (i8** @global_var_1e to i64)
}

define i8 @Adapter_SetTsOutput(i8* %DevExt, i8 %DevCH, i32 %ts_outputpin, i32 %sig_source) local_unnamed_addr {
dec_label_pc_6271:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = call i64 @__decompiler_undefined_function_0()
  %2 = trunc i32 %ts_outputpin to i16, !insn.addr !2609
  %3 = trunc i64 %1 to i32, !insn.addr !2609
  call void @__asm_out(i16 %2, i32 %3), !insn.addr !2609
  %4 = trunc i64 %1 to i8, !insn.addr !2610
  %5 = trunc i64 %0 to i8
  %6 = add i8 %4, %5, !insn.addr !2610
  ret i8 %6, !insn.addr !2611
}

define i8 @Adapter_StopTsOutput(i8* %DevExt, i8 %DevCH, i32 %ts_outputpin) local_unnamed_addr {
dec_label_pc_6281:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = trunc i64 %0 to i8
  %2 = mul i8 %1, 2, !insn.addr !2612
  %3 = inttoptr i64 %0 to i8*, !insn.addr !2612
  store i8 %2, i8* %3, align 1, !insn.addr !2612
  ret i8 %1, !insn.addr !2613
}

define i8 @SetTsOutput(i8* %DevExt, i8 %DevCH, i32 %sig_source, i32 %ts_outputpin, i8 %bStopOutput) local_unnamed_addr {
dec_label_pc_6291:
  %0 = icmp ult i32 %sig_source, 500000, !insn.addr !2614
  %1 = select i1 %0, i8 trunc (i64 and (i64 add (i64 zext (i32 ptrtoint (i8* @global_var_5 to i32) to i64), i64 zext (i32 ptrtoint (i8* @global_var_5 to i32) to i64)), i64 4294967295) to i8), i8 ptrtoint (i8* @global_var_5 to i8), !insn.addr !2615
  ret i8 %1, !insn.addr !2615
}

define i64 @Adapter_SetTsOutput.536() local_unnamed_addr {
dec_label_pc_62a1:
  %0 = call i64 @mcount(), !insn.addr !2616
  ret i64 0, !insn.addr !2617
}

define i64 @Adapter_StopTsOutput.318() local_unnamed_addr {
dec_label_pc_62b1:
  %0 = call i64 @mcount(), !insn.addr !2618
  ret i64 %0, !insn.addr !2618
}

define i8 @TC_RemappingTunerNumber(i8* %DevExt, i8* %DevCH) local_unnamed_addr {
dec_label_pc_62bb:
  %rax = alloca i64, align 8
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = bitcast i64* %rax to i8*
  %2 = trunc i64 %0 to i8
  %3 = mul i8 %2, 2, !insn.addr !2619
  %4 = inttoptr i64 %0 to i8*, !insn.addr !2619
  store i8 %3, i8* %4, align 1, !insn.addr !2619
  %5 = load i8, i8* %1, align 8, !insn.addr !2620
  %6 = load i64, i64* %rax, align 8
  %7 = trunc i64 %6 to i8, !insn.addr !2620
  %8 = add i8 %5, %7, !insn.addr !2620
  %9 = inttoptr i64 %6 to i8*, !insn.addr !2620
  store i8 %8, i8* %9, align 1, !insn.addr !2620
  %10 = load i64, i64* %rax, align 8, !insn.addr !2621
  %11 = trunc i64 %10 to i8, !insn.addr !2621
  ret i8 %11, !insn.addr !2621
}

define i64 @SetTsOutput.159(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4, i64 %arg5) local_unnamed_addr {
dec_label_pc_62c1:
  %storemerge.reg2mem = alloca i64, !insn.addr !2622
  %0 = call i64 @mcount(), !insn.addr !2623
  %1 = trunc i64 %arg5 to i8, !insn.addr !2624
  %2 = icmp eq i8 %1, 0, !insn.addr !2624
  br i1 %2, label %dec_label_pc_62de, label %dec_label_pc_62d3, !insn.addr !2625

dec_label_pc_62d3:                                ; preds = %dec_label_pc_62c1
  %3 = call i64 @Adapter_StopTsOutput.318(), !insn.addr !2626
  store i64 %3, i64* %storemerge.reg2mem, !insn.addr !2627
  br label %dec_label_pc_62e9, !insn.addr !2627

dec_label_pc_62de:                                ; preds = %dec_label_pc_62c1
  %4 = call i64 @Adapter_SetTsOutput.536(), !insn.addr !2628
  store i64 %4, i64* %storemerge.reg2mem, !insn.addr !2628
  br label %dec_label_pc_62e9, !insn.addr !2628

dec_label_pc_62e9:                                ; preds = %dec_label_pc_62de, %dec_label_pc_62d3
  %storemerge.reload = load i64, i64* %storemerge.reg2mem
  ret i64 %storemerge.reload, !insn.addr !2629
}

define i64 @TC_RemappingTunerNumber.201(i64 %arg1) local_unnamed_addr {
dec_label_pc_62eb:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = call i64 @mcount(), !insn.addr !2630
  %2 = urem i64 %0, 256, !insn.addr !2631
  ret i64 %2, !insn.addr !2632
}

define i8 @TC_Start(i8* %DevExt, i8 %DevCH, i8* %tuner_globe_data) local_unnamed_addr {
dec_label_pc_6338:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = trunc i64 %0 to i8
  ret i8 %1
}

define i64 @function_633a() local_unnamed_addr {
dec_label_pc_633a:
  %0 = call i64 @__decompiler_undefined_function_0()
  ret i64 %0, !insn.addr !2633
}

define i64 @function_633c(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_633c:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = inttoptr i64 %arg2 to i8*, !insn.addr !2634
  store i8 ptrtoint (i8* @global_var_5 to i8), i8* %1, align 1, !insn.addr !2634
  ret i64 %0, !insn.addr !2635
}

define i64 @function_6342(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_6342:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = inttoptr i64 %arg2 to i8*, !insn.addr !2636
  store i8 0, i8* %1, align 1, !insn.addr !2636
  ret i64 %0, !insn.addr !2637
}

define i8 @TC_PollingThread(i8* %DevExt, i8 %DevCH, i8* %tuner_globe_data) local_unnamed_addr {
dec_label_pc_6348:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = trunc i64 %0 to i8
  ret i8 %1
}

define i64 @function_634a() local_unnamed_addr {
dec_label_pc_634a:
  %0 = call i64 @__decompiler_undefined_function_0()
  ret i64 %0, !insn.addr !2638
}

define i64 @function_634c(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_634c:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = inttoptr i64 %arg2 to i8*, !insn.addr !2639
  store i8 ptrtoint (i8** @global_var_3 to i8), i8* %1, align 1, !insn.addr !2639
  ret i64 %0, !insn.addr !2640
}

define i64 @function_6352(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_6352:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = inttoptr i64 %arg2 to i8*, !insn.addr !2641
  store i8 ptrtoint (i8** @global_var_7 to i8), i8* %1, align 1, !insn.addr !2641
  ret i64 %0, !insn.addr !2642
}

define i8 @TC_PollingThreadOnlyCallOnce(i8* %DevExt, i8* %StartPolling, i8 %total_tuner_num, i8* %tuner_globe_data) local_unnamed_addr {
dec_label_pc_6358:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = trunc i64 %0 to i8
  ret i8 %1
}

define i64 @TC_PollingThreadDelayTime() local_unnamed_addr {
dec_label_pc_6368:
  %0 = call i64 @mcount(), !insn.addr !2643
  ret i64 ptrtoint (i32* @global_var_1 to i64), !insn.addr !2644
}

define i8 @TC_CurrentTSIDRead(i8* %DevExt, i8 %DevCH, i32* %tsid, i8* %tuner_globe_data) local_unnamed_addr {
dec_label_pc_6378:
  %0 = call i64 @mcount(), !insn.addr !2645
  ret i8 ptrtoint (i32* @global_var_1 to i8), !insn.addr !2646
}

define i64 @TC_DriverEntryFunCall(i8* %pDriverObject, i8* %pRegistryPath) local_unnamed_addr {
dec_label_pc_6388:
  %0 = call i64 @mcount(), !insn.addr !2647
  ret i64 ptrtoint (i32* @global_var_1 to i64), !insn.addr !2648
}

define void @TC_PowerTunerDemod(i8* %DevExt, i8 %DevCH, i8 %bPower_On, i8* %tuner_globe_data) local_unnamed_addr {
dec_label_pc_6398:
  %0 = call i64 @mcount(), !insn.addr !2649
  ret void, !insn.addr !2649
}

define i8 @TC_ResetTunerDemod(i8* %DevExt, i8 %DevCH, i8* %tuner_globe_data) local_unnamed_addr {
dec_label_pc_63a3:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = trunc i64 %0 to i32
  %2 = mul i32 %1, 2, !insn.addr !2650
  %3 = inttoptr i64 %0 to i32*, !insn.addr !2650
  store i32 %2, i32* %3, align 4, !insn.addr !2650
  %4 = trunc i64 %0 to i8, !insn.addr !2651
  ret i8 %4, !insn.addr !2651
}

define i64 @TC_CurrentTSIDRead.550(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4) local_unnamed_addr {
dec_label_pc_63a8:
  %0 = call i64 @mcount(), !insn.addr !2652
  ret i64 %0, !insn.addr !2652
}

define i8 @TC_SleepTunerDemod(i8* %DevExt, i8 %DevCH, i8* %tuner_globe_data) local_unnamed_addr {
dec_label_pc_63b3:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = trunc i64 %0 to i8
  %2 = mul i8 %1, 2, !insn.addr !2653
  %3 = inttoptr i64 %0 to i8*, !insn.addr !2653
  store i8 %2, i8* %3, align 1, !insn.addr !2653
  ret i8 %1, !insn.addr !2654
}

define i64 @TC_DriverEntryFunCall.277() local_unnamed_addr {
dec_label_pc_63b8:
  %0 = call i64 @mcount(), !insn.addr !2655
  ret i64 %0, !insn.addr !2655
}

define i8 @TC_WakeupTunerDemod(i8* %DevExt, i8 %DevCH, i8* %tuner_globe_data) local_unnamed_addr {
dec_label_pc_63c3:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = trunc i64 %0 to i8
  %2 = mul i8 %1, 2, !insn.addr !2656
  %3 = inttoptr i64 %0 to i8*, !insn.addr !2656
  store i8 %2, i8* %3, align 1, !insn.addr !2656
  ret i8 %1, !insn.addr !2657
}

define i64 @TC_PowerTunerDemod.604(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4) local_unnamed_addr {
dec_label_pc_63c8:
  %0 = call i64 @mcount(), !insn.addr !2658
  ret i64 %0, !insn.addr !2659
}

define i8 @ReadWrite_Customization_Data(i8* %DevExt, i8 %DevCH, i8 %bRead, i64 %offset, i8* %DataBuf, i64 %bytesofpData, i8* %tuner_globe_data) local_unnamed_addr {
dec_label_pc_63d3:
  %0 = call i64 @mcount(), !insn.addr !2660
  ret i8 0, !insn.addr !2661
}

define i8 @Erase_Customization_Data(i8* %DevExt, i8 %DevCH, i64 %offset, i64 %bytesofpData, i8* %tuner_globe_data) local_unnamed_addr {
dec_label_pc_63e3:
  %0 = call i64 @mcount(), !insn.addr !2662
  ret i8 0, !insn.addr !2663
}

define i8 @Get_Customization_Data_Size(i8* %DevExt, i8 %DevCH, i64* %customization_data_size, i8* %tuner_globe_data) local_unnamed_addr {
dec_label_pc_63f3:
  %0 = call i64 @mcount(), !insn.addr !2664
  ret i8 0, !insn.addr !2665
}

define i64 @ReadWrite_Customization_Data.324() local_unnamed_addr {
dec_label_pc_6403:
  %0 = call i64 @__decompiler_undefined_function_0()
  ret i64 %0, !insn.addr !2666
}

define i8 @Get_Tuner_Extra_Data_Size(i64* %tuner_Extra_Data_Size) local_unnamed_addr {
dec_label_pc_640a:
  ret i8 ptrtoint (i32* @global_var_1 to i8), !insn.addr !2667
}

define i64 @Erase_Customization_Data.269() local_unnamed_addr {
dec_label_pc_6413:
  %0 = call i64 @mcount(), !insn.addr !2668
  ret i64 ptrtoint (i32* @global_var_1 to i64), !insn.addr !2669
}

define i8 @GetISDBTEmergencyAlarmStatus(i8* %DevExt, i8 %DevCH, i64 %ptuner_globe_data) local_unnamed_addr {
dec_label_pc_6421:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = trunc i64 %0 to i8, !insn.addr !2670
  ret i8 %1, !insn.addr !2670
}

define i64 @Get_Customization_Data_Size.603() local_unnamed_addr {
dec_label_pc_6423:
  %0 = call i64 @mcount(), !insn.addr !2671
  ret i64 %0, !insn.addr !2671
}

define i8 @GetSatelliteEmergencyAlarmStatus(i8* %DevExt, i8 %DevCH, i64 %ptuner_globe_data) local_unnamed_addr {
dec_label_pc_6431:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = trunc i64 %0 to i8
  %2 = mul i8 %1, 2, !insn.addr !2672
  %3 = inttoptr i64 %0 to i8*, !insn.addr !2672
  store i8 %2, i8* %3, align 1, !insn.addr !2672
  ret i8 ptrtoint (i32* @global_var_1 to i8), !insn.addr !2673
}

define i64 @Get_Tuner_Extra_Data_Size.594(i64* %arg1) local_unnamed_addr {
dec_label_pc_643a:
  %0 = call i64 @__decompiler_undefined_function_0()
  ret i64 %0, !insn.addr !2674
}

define i64 @TC_GetBER(i8* %DevExt, i8 %DevCH, i64* %BER1, i64* %BER2, i8* %tuner_globe_data) local_unnamed_addr {
dec_label_pc_6441:
  %0 = bitcast i8* %DevExt to i64*, !insn.addr !2675
  store i64 ptrtoint (i8* @global_var_8 to i64), i64* %0, align 8, !insn.addr !2675
  ret i64 ptrtoint (i32* @global_var_1 to i64), !insn.addr !2676
}

define i64 @TC_GetAGC(i8* %DevExt, i8 %DevCH, i8* %tuner_globe_data) local_unnamed_addr {
dec_label_pc_6451:
  %0 = call i64 @mcount(), !insn.addr !2677
  ret i64 0, !insn.addr !2678
}

define i8 @TC_GetEmergencyAlarmStatus(i8* %DevExt, i8 %DevCH, i8* %tuner_globe_data) local_unnamed_addr {
dec_label_pc_6461:
  %0 = call i64 @mcount(), !insn.addr !2679
  ret i8 0, !insn.addr !2680
}

define i64 @TC_GetBER.396(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4, i64 %arg5) local_unnamed_addr {
dec_label_pc_6471:
  %0 = call i64 @mcount(), !insn.addr !2681
  ret i64 ptrtoint (i32* @global_var_1 to i64), !insn.addr !2682
}

define i64 @TC_GetAGC.168() local_unnamed_addr {
dec_label_pc_6481:
  %0 = call i64 @mcount(), !insn.addr !2683
  ret i64 ptrtoint (i32* @global_var_1 to i64), !insn.addr !2684
}

define i64 @TC_GetEmergencyAlarmStatus.509() local_unnamed_addr {
dec_label_pc_6491:
  %0 = call i64 @__decompiler_undefined_function_0()
  ret i64 %0, !insn.addr !2685
}

define i8 @Init_Tuner_S(i8* %DevExt, i8 %DevCH) local_unnamed_addr {
dec_label_pc_6499:
  %rax.0.reg2mem = alloca i64, !insn.addr !2686
  %rdi = alloca i64, align 8
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = call i64 @__decompiler_undefined_function_0()
  %2 = ptrtoint i8* %DevExt to i64
  store i64 %2, i64* %rdi, align 8
  %3 = add i64 %1, -128, !insn.addr !2686
  %4 = inttoptr i64 %3 to i8*, !insn.addr !2686
  %5 = load i8, i8* %4, align 1, !insn.addr !2686
  %6 = trunc i64 %1 to i8, !insn.addr !2686
  %7 = add i8 %5, %6, !insn.addr !2686
  %8 = icmp ult i8 %7, %5, !insn.addr !2686
  store i8 %7, i8* %4, align 1, !insn.addr !2686
  %9 = bitcast i64* %rdi to i8*
  %10 = load i8, i8* %9, align 8, !insn.addr !2687
  %11 = add i8 %10, ptrtoint (i32* @global_var_1 to i8), !insn.addr !2687
  %12 = icmp eq i8 %11, 0, !insn.addr !2687
  store i8 %11, i8* %DevExt, align 1, !insn.addr !2687
  %13 = or i1 %8, %12, !insn.addr !2688
  store i64 0, i64* %rax.0.reg2mem, !insn.addr !2688
  br i1 %13, label %dec_label_pc_64a0, label %dec_label_pc_64c7, !insn.addr !2688

dec_label_pc_64a0:                                ; preds = %dec_label_pc_6499
  %14 = add i64 %0, ptrtoint (i16* @global_var_4 to i64), !insn.addr !2689
  %15 = inttoptr i64 %14 to i32*, !insn.addr !2689
  %16 = load i32, i32* %15, align 4, !insn.addr !2689
  %17 = icmp eq i32 %16, 0, !insn.addr !2690
  %18 = icmp eq i1 %17, false, !insn.addr !2691
  br i1 %18, label %dec_label_pc_64b2, label %dec_label_pc_64a7, !insn.addr !2691

dec_label_pc_64a7:                                ; preds = %dec_label_pc_64a0
  %19 = load i64, i64* %rdi, align 8, !insn.addr !2692
  %20 = inttoptr i64 %19 to i8*, !insn.addr !2692
  %21 = inttoptr i64 %0 to i8*, !insn.addr !2692
  %22 = call i64 @TC_GetAGC(i8* %20, i8 %DevCH, i8* %21), !insn.addr !2692
  store i64 %22, i64* %rax.0.reg2mem, !insn.addr !2693
  br label %dec_label_pc_64c7, !insn.addr !2693

dec_label_pc_64b2:                                ; preds = %dec_label_pc_64a0
  %23 = icmp eq i32 %16, ptrtoint (i32* @global_var_1 to i32), !insn.addr !2694
  %24 = icmp eq i1 %23, false, !insn.addr !2695
  store i64 0, i64* %rax.0.reg2mem, !insn.addr !2695
  br i1 %24, label %dec_label_pc_64c7, label %dec_label_pc_64b7, !insn.addr !2695

dec_label_pc_64b7:                                ; preds = %dec_label_pc_64b2
  %25 = load i64, i64* %rdi, align 8, !insn.addr !2696
  %26 = inttoptr i64 %25 to i8*, !insn.addr !2696
  %27 = inttoptr i64 %0 to i8*, !insn.addr !2696
  %28 = call i8 @TC_GetEmergencyAlarmStatus(i8* %26, i8 %DevCH, i8* %27), !insn.addr !2696
  %29 = sext i8 %28 to i64, !insn.addr !2696
  store i64 %29, i64* %rax.0.reg2mem, !insn.addr !2697
  br label %dec_label_pc_64c7, !insn.addr !2697

dec_label_pc_64c7:                                ; preds = %dec_label_pc_64b2, %dec_label_pc_6499, %dec_label_pc_64b7, %dec_label_pc_64a7
  %rax.0.reload = load i64, i64* %rax.0.reg2mem
  %30 = trunc i64 %rax.0.reload to i8, !insn.addr !2698
  ret i8 %30, !insn.addr !2698
}

define i64 @Init_Tuner_S.165(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_64c9:
  %rbx.0.reg2mem = alloca i64, !insn.addr !2699
  %stack_var_-72 = alloca i8*, align 8
  %0 = call i64 @mcount(), !insn.addr !2700
  %1 = call i64 @__readgsqword(i64 40), !insn.addr !2701
  %2 = inttoptr i64 %arg1 to i8*, !insn.addr !2702
  %3 = trunc i64 %arg2 to i8, !insn.addr !2702
  %4 = bitcast i8** %stack_var_-72 to i8*, !insn.addr !2702
  %5 = call i8 @Adpater_TunerT_RegRead(i8* %2, i8 %3, i8 0, i8* nonnull %4, i8 ptrtoint (i32* @global_var_2 to i8)), !insn.addr !2702
  store i8* bitcast (i8** @global_var_9 to i8*), i8** %stack_var_-72, align 8, !insn.addr !2703
  %6 = call i64 @TLIB_Delay.388(i64* bitcast (i32* @global_var_1 to i64*)), !insn.addr !2704
  store i64 0, i64* %rbx.0.reg2mem, !insn.addr !2705
  br label %dec_label_pc_6537, !insn.addr !2705

dec_label_pc_6537:                                ; preds = %dec_label_pc_6537, %dec_label_pc_64c9
  %rbx.0.reload = load i64, i64* %rbx.0.reg2mem
  %7 = inttoptr i64 %rbx.0.reload to i8*, !insn.addr !2706
  %8 = call i8 @Adpater_TunerT_RegRead(i8* %2, i8 %3, i8 0, i8* %7, i8 ptrtoint (i32* @global_var_2 to i8)), !insn.addr !2706
  %9 = add i64 %rbx.0.reload, ptrtoint (i32* @global_var_2 to i64), !insn.addr !2707
  %10 = icmp eq i64 %9, 0, !insn.addr !2708
  %11 = icmp eq i1 %10, false, !insn.addr !2709
  store i64 %9, i64* %rbx.0.reg2mem, !insn.addr !2709
  br i1 %11, label %dec_label_pc_6537, label %dec_label_pc_655d, !insn.addr !2709

dec_label_pc_655d:                                ; preds = %dec_label_pc_6537
  %12 = call i64 @TLIB_Delay.388(i64* bitcast (i8* @global_var_5 to i64*)), !insn.addr !2710
  ret i64 %12, !insn.addr !2710
}

define i8 @Init_Tuner_T(i8* %handle, i8 %DevCH) local_unnamed_addr {
dec_label_pc_6569:
  %.reg2mem = alloca i64, !insn.addr !2711
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = call i64 @__decompiler_undefined_function_0()
  %2 = call i64 @__decompiler_undefined_function_0()
  %3 = trunc i64 %2 to i8
  %4 = mul i8 %3, 2, !insn.addr !2711
  %5 = inttoptr i64 %2 to i8*, !insn.addr !2711
  store i8 %4, i8* %5, align 1, !insn.addr !2711
  %6 = add i64 %2, 184, !insn.addr !2712
  %7 = and i64 %6, 4294967295, !insn.addr !2712
  %8 = add nsw i64 %7, -117, !insn.addr !2713
  %9 = inttoptr i64 %8 to i8*, !insn.addr !2713
  %10 = load i8, i8* %9, align 1, !insn.addr !2713
  %11 = trunc i64 %1 to i8, !insn.addr !2713
  %12 = add i8 %10, %11, !insn.addr !2713
  store i8 %12, i8* %9, align 1, !insn.addr !2713
  %13 = trunc i64 %0 to i32, !insn.addr !2714
  %14 = load i32, i32* inttoptr (i64 40 to i32*), align 8, !insn.addr !2714
  %15 = icmp eq i32 %14, %13, !insn.addr !2714
  store i64 %7, i64* %.reg2mem, !insn.addr !2715
  br i1 %15, label %dec_label_pc_6587, label %dec_label_pc_6582, !insn.addr !2715

dec_label_pc_6582:                                ; preds = %dec_label_pc_6569
  %16 = call i64 @__stack_chk_fail(), !insn.addr !2716
  store i64 %16, i64* %.reg2mem, !insn.addr !2716
  br label %dec_label_pc_6587, !insn.addr !2716

dec_label_pc_6587:                                ; preds = %dec_label_pc_6569, %dec_label_pc_6582
  %.reload = load i64, i64* %.reg2mem, !insn.addr !2717
  %17 = trunc i64 %.reload to i8, !insn.addr !2717
  ret i8 %17, !insn.addr !2717
}

define i64 @Init_Tuner_T.480(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_6599:
  %stack_var_-56 = alloca i64, align 8
  %0 = call i64 @mcount(), !insn.addr !2718
  %1 = urem i64 %arg2, 256, !insn.addr !2719
  %2 = call i64 @Adpater_TunerT_RegWrite.601(i64 %arg1, i64 %1, i64 0, i64* nonnull %stack_var_-56, i64* bitcast (i32* @global_var_1 to i64*)), !insn.addr !2720
  store i64 -1, i64* %stack_var_-56, align 8, !insn.addr !2721
  %3 = call i64 @TLIB_Delay.388(i64* bitcast (i32* @global_var_1 to i64*)), !insn.addr !2722
  ret i64 %3, !insn.addr !2723
}

define i8 @TC_Preset(i8* %DevExt, i8 %DevCH, i8* %tuner_globe_data) local_unnamed_addr {
dec_label_pc_65fa:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = call i64 @__decompiler_undefined_function_0()
  %2 = call i64 @__decompiler_undefined_function_0()
  %3 = call i64 @__decompiler_undefined_function_0()
  %4 = ptrtoint i8* %tuner_globe_data to i64
  %5 = and i64 %2, 4294967295, !insn.addr !2724
  %6 = inttoptr i64 %3 to i64*, !insn.addr !2725
  %7 = inttoptr i64 %1 to i64*, !insn.addr !2725
  %8 = call i64 @Adpater_TunerT_RegWrite.601(i64 %0, i64 %5, i64 %4, i64* %6, i64* %7), !insn.addr !2725
  %9 = trunc i64 %8 to i8, !insn.addr !2726
  %10 = icmp eq i8 %9, 0, !insn.addr !2726
  %. = select i1 %10, i8 0, i8 ptrtoint (i32* @global_var_1 to i8)
  ret i8 %., !insn.addr !2727
}

define i64 @TC_Preset.300(i64 %arg1) local_unnamed_addr {
dec_label_pc_662a:
  %0 = call i64 @mcount(), !insn.addr !2728
  %1 = call i64 @TLIB_Delay.388(i64* bitcast (i8* @global_var_a to i64*)), !insn.addr !2729
  %2 = call i64 @TLIB_SetGPIO.391(i64 %arg1, i64* bitcast (i32* @global_var_1 to i64*), i64* bitcast (i32* @global_var_1 to i64*)), !insn.addr !2730
  %3 = call i64 @TLIB_Delay.388(i64* bitcast (i8* @global_var_a to i64*)), !insn.addr !2731
  %4 = call i64 @TLIB_SetGPIO.391(i64 %arg1, i64* null, i64* bitcast (i32* @global_var_1 to i64*)), !insn.addr !2732
  ret i64 %4, !insn.addr !2732
}

define i8 @TC_GetLNBShortDetect(i8* %DevExt, i8 %DevCH, i8* %LNBShort, i8* %tuner_globe_data) local_unnamed_addr {
dec_label_pc_6675:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = call i64 @__decompiler_undefined_function_0()
  %2 = ptrtoint i8* %tuner_globe_data to i64
  %3 = trunc i64 %1 to i8
  %4 = mul i8 %3, 2, !insn.addr !2733
  %5 = inttoptr i64 %1 to i8*, !insn.addr !2733
  store i8 %4, i8* %5, align 1, !insn.addr !2733
  %6 = lshr i64 %2, ptrtoint (i8* @global_var_8 to i64), !insn.addr !2734
  %7 = add i64 %1, %6, !insn.addr !2734
  %8 = and i64 %1, -256, !insn.addr !2734
  %9 = and i64 %7, 101, !insn.addr !2735
  %10 = or i64 %9, %8, !insn.addr !2735
  %11 = inttoptr i64 %10 to i32*, !insn.addr !2736
  %12 = load i32, i32* %11, align 4, !insn.addr !2736
  %13 = trunc i64 %10 to i32, !insn.addr !2736
  %14 = add i32 %12, %13, !insn.addr !2736
  store i32 %14, i32* %11, align 4, !insn.addr !2736
  %15 = call i64 @TLIB_SetGPIO.391(i64 %0, i64* bitcast (i32* @global_var_1 to i64*), i64* bitcast (i32* @global_var_1 to i64*)), !insn.addr !2737
  %16 = call i64 @TLIB_Delay.388(i64* bitcast (i8* @global_var_a to i64*)), !insn.addr !2738
  ret i8 ptrtoint (i32* @global_var_1 to i8), !insn.addr !2739
}

define i64 @TC_GetLNBShortDetect.431(i64 %arg1, i64 %arg2, i64* %arg3) local_unnamed_addr {
dec_label_pc_66a5:
  %0 = call i64 @mcount(), !insn.addr !2740
  %1 = bitcast i64* %arg3 to i8*, !insn.addr !2741
  store i8 0, i8* %1, align 1, !insn.addr !2741
  ret i64 %0, !insn.addr !2742
}

define i8 @DemodRegRead(i8* %DevExt, i8 %DevCH, i8 %byReg, i8* %pBuffer, i8 %byCount, i32 %sig_source) local_unnamed_addr {
dec_label_pc_66d8:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = ptrtoint i8* %pBuffer to i64
  %2 = lshr i64 %1, ptrtoint (i8* @global_var_8 to i64), !insn.addr !2743
  %3 = add i64 %0, %2, !insn.addr !2743
  %4 = trunc i64 %3 to i8, !insn.addr !2743
  ret i8 %4, !insn.addr !2743
}

define i64 @function_66db() local_unnamed_addr {
dec_label_pc_66db:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = call i64 @__decompiler_undefined_function_0()
  %2 = call i64 @__decompiler_undefined_function_0()
  %3 = call i32 @__readgsdword(i64 %2), !insn.addr !2744
  %4 = trunc i64 %2 to i32, !insn.addr !2744
  %5 = add i32 %3, %4, !insn.addr !2744
  call void @__writegsdword(i64 %2, i32 %5), !insn.addr !2744
  %6 = add i64 %0, -17, !insn.addr !2745
  %7 = inttoptr i64 %6 to i8*, !insn.addr !2745
  %8 = load i8, i8* %7, align 1, !insn.addr !2745
  %9 = and i8 %8, ptrtoint (i32* @global_var_1 to i8), !insn.addr !2745
  %10 = icmp eq i8 %9, 0, !insn.addr !2745
  %11 = inttoptr i64 %1 to i8*
  br i1 %10, label %dec_label_pc_66f2, label %dec_label_pc_66e8, !insn.addr !2746

dec_label_pc_66e8:                                ; preds = %dec_label_pc_66db
  store i8 0, i8* %11, align 1, !insn.addr !2747
  ret i64 ptrtoint (i32* @global_var_1 to i64), !insn.addr !2748

dec_label_pc_66f2:                                ; preds = %dec_label_pc_66db
  store i8 ptrtoint (i32* @global_var_1 to i8), i8* %11, align 1, !insn.addr !2749
  ret i64 ptrtoint (i32* @global_var_1 to i64), !insn.addr !2750
}

define i64 @DemodRegRead.231(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4, i64* %arg5, i64* %arg6) local_unnamed_addr {
dec_label_pc_6708:
  %0 = call i64 @mcount(), !insn.addr !2751
  ret i64 %0, !insn.addr !2752
}

define i64 @GetSatelliteAGC(i8* %DevExt, i8 %DevCH, i64 %ptuner_globe_data) local_unnamed_addr {
dec_label_pc_672e:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = call i64 @__decompiler_undefined_function_0()
  %2 = call i64 @__decompiler_undefined_function_0()
  %3 = sext i8 %DevCH to i64
  %4 = ptrtoint i8* %DevExt to i64
  %5 = inttoptr i64 %2 to i64*, !insn.addr !2753
  %6 = inttoptr i64 %1 to i64*, !insn.addr !2753
  %7 = call i64 @TLIB_I2C_Read.262(i64 %4, i64 %3, i64 %ptuner_globe_data, i64* %5, i64* %6, i64 %0), !insn.addr !2753
  ret i64 %7, !insn.addr !2754
}

define i64 @GetSatelliteAGC.156() local_unnamed_addr {
dec_label_pc_675e:
  %0 = call i64 @mcount(), !insn.addr !2755
  ret i64 %0, !insn.addr !2755
}

define i64 @GetISDBTAGC(i8* %DevExt, i8 %DevCH, i64 %ptuner_globe_data) local_unnamed_addr {
dec_label_pc_676d:
  %rax.0.reg2mem = alloca i64, !insn.addr !2756
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = call i64 @__decompiler_undefined_function_0()
  %2 = call i64 @__decompiler_undefined_function_0()
  %3 = sext i8 %DevCH to i64
  %4 = ptrtoint i8* %DevExt to i64
  %5 = add i64 %0, ptrtoint (i8* @global_var_f to i64), !insn.addr !2756
  %6 = inttoptr i64 %5 to i64*, !insn.addr !2756
  %7 = load i64, i64* %6, align 8, !insn.addr !2756
  %8 = add i64 %7, ptrtoint (i32* @global_var_1 to i64), !insn.addr !2756
  store i64 %8, i64* %6, align 8, !insn.addr !2756
  %9 = call i64 @DemodRegRead.231(i64 %4, i64 %3, i64 186, i64 %2, i64* bitcast (i32* @global_var_1 to i64*), i64* bitcast (i32* @global_var_1 to i64*)), !insn.addr !2757
  %10 = trunc i64 %9 to i8, !insn.addr !2758
  %11 = icmp eq i8 %10, 0, !insn.addr !2758
  store i64 0, i64* %rax.0.reg2mem, !insn.addr !2759
  br i1 %11, label %dec_label_pc_679b, label %dec_label_pc_6794, !insn.addr !2759

dec_label_pc_6794:                                ; preds = %dec_label_pc_676d
  %12 = add i64 %1, -1, !insn.addr !2760
  %13 = inttoptr i64 %12 to i8*, !insn.addr !2760
  %14 = load i8, i8* %13, align 1, !insn.addr !2760
  %15 = urem i8 %14, -128
  %16 = zext i8 %15 to i64, !insn.addr !2761
  store i64 %16, i64* %rax.0.reg2mem, !insn.addr !2761
  br label %dec_label_pc_679b, !insn.addr !2761

dec_label_pc_679b:                                ; preds = %dec_label_pc_6794, %dec_label_pc_676d
  %rax.0.reload = load i64, i64* %rax.0.reg2mem
  ret i64 %rax.0.reload, !insn.addr !2762
}

define i64 @GetISDBTAGC.423() local_unnamed_addr {
dec_label_pc_679d:
  %0 = call i64 @__decompiler_undefined_function_0()
  ret i64 %0, !insn.addr !2763
}

define i64 @GetSatelliteBER(i8* %DevExt, i8 %DevCH, i64* %BER1, i64* %BER2, i64 %ptuner_globe_data) local_unnamed_addr {
dec_label_pc_67a9:
  %rax.0.reg2mem = alloca i64, !insn.addr !2764
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = call i64 @__decompiler_undefined_function_0()
  %2 = ptrtoint i64* %BER2 to i64
  %3 = sext i8 %DevCH to i64
  %4 = ptrtoint i8* %DevExt to i64
  %5 = add i64 %1, -115, !insn.addr !2764
  %6 = inttoptr i64 %5 to i8*, !insn.addr !2764
  %7 = load i8, i8* %6, align 1, !insn.addr !2764
  %8 = trunc i64 %2 to i8, !insn.addr !2764
  %9 = add i8 %7, %8, !insn.addr !2764
  store i8 %9, i8* %6, align 1, !insn.addr !2764
  %10 = add i64 %ptuner_globe_data, ptrtoint (i8* @global_var_f to i64), !insn.addr !2765
  %11 = inttoptr i64 %10 to i64*, !insn.addr !2765
  %12 = load i64, i64* %11, align 8, !insn.addr !2765
  %13 = add i64 %12, ptrtoint (i32* @global_var_1 to i64), !insn.addr !2765
  store i64 %13, i64* %11, align 8, !insn.addr !2765
  %14 = call i64 @DemodRegRead.231(i64 %4, i64 %3, i64 130, i64 %2, i64* bitcast (i32* @global_var_1 to i64*), i64* null), !insn.addr !2766
  %15 = trunc i64 %14 to i8, !insn.addr !2767
  %16 = icmp eq i8 %15, 0, !insn.addr !2767
  store i64 0, i64* %rax.0.reg2mem, !insn.addr !2768
  br i1 %16, label %dec_label_pc_67d7, label %dec_label_pc_67d3, !insn.addr !2768

dec_label_pc_67d3:                                ; preds = %dec_label_pc_67a9
  %17 = add i64 %0, -1, !insn.addr !2769
  %18 = inttoptr i64 %17 to i8*, !insn.addr !2769
  %19 = load i8, i8* %18, align 1, !insn.addr !2769
  %20 = zext i8 %19 to i64, !insn.addr !2769
  store i64 %20, i64* %rax.0.reg2mem, !insn.addr !2769
  br label %dec_label_pc_67d7, !insn.addr !2769

dec_label_pc_67d7:                                ; preds = %dec_label_pc_67d3, %dec_label_pc_67a9
  %rax.0.reload = load i64, i64* %rax.0.reg2mem
  ret i64 %rax.0.reload, !insn.addr !2770
}

define i64 @GetSatelliteBER.592(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4) local_unnamed_addr {
dec_label_pc_67d9:
  %0 = call i32 @__decompiler_undefined_function_3()
  %1 = call i32 @__decompiler_undefined_function_3()
  %stack_var_-56 = alloca i32, align 4
  %2 = call i64 @mcount(), !insn.addr !2771
  %3 = inttoptr i64 %arg3 to i64*, !insn.addr !2772
  store i64 100000000, i64* %3, align 8, !insn.addr !2772
  %4 = inttoptr i64 %arg4 to i64*, !insn.addr !2773
  store i64 100000000, i64* %4, align 8, !insn.addr !2773
  %5 = urem i64 %arg2, 256, !insn.addr !2774
  %6 = ptrtoint i32* %stack_var_-56 to i64, !insn.addr !2775
  %7 = call i64 @DemodRegRead.231(i64 %arg1, i64 %5, i64 240, i64 %6, i64* bitcast (i8** @global_var_3 to i64*), i64* bitcast (i32* @global_var_1 to i64*)), !insn.addr !2776
  %8 = load i32, i32* %stack_var_-56, align 4, !insn.addr !2777
  %9 = urem i32 %8, 256, !insn.addr !2778
  %10 = shl i32 %9, ptrtoint (i8* @global_var_10 to i32), !insn.addr !2778
  %11 = urem i32 %1, 256, !insn.addr !2779
  %12 = shl i32 %11, ptrtoint (i8* @global_var_8 to i32), !insn.addr !2779
  %13 = urem i32 %0, 256, !insn.addr !2780
  %14 = or i32 %12, %13, !insn.addr !2781
  %15 = or i32 %14, %10, !insn.addr !2780
  %16 = mul i32 %15, shl (i32 trunc (i64 add (i64 ptrtoint (i16* @global_var_4 to i64), i64 1) to i32), i32 ptrtoint (i16* @global_var_4 to i32)), !insn.addr !2782
  %17 = zext i32 %16 to i64, !insn.addr !2783
  store i64 %17, i64* %3, align 8, !insn.addr !2784
  %18 = call i64 @DemodRegRead.231(i64 %arg1, i64 %5, i64 ptrtoint ([3 x i8]* @global_var_eb to i64), i64 %6, i64* bitcast (i8** @global_var_3 to i64*), i64* bitcast (i32* @global_var_1 to i64*)), !insn.addr !2785
  %19 = load i32, i32* %stack_var_-56, align 4, !insn.addr !2786
  %20 = urem i32 %19, 256, !insn.addr !2787
  %21 = shl i32 %20, ptrtoint (i8* @global_var_10 to i32), !insn.addr !2787
  %22 = or i32 %21, %12, !insn.addr !2788
  %23 = zext i32 %22 to i64, !insn.addr !2788
  ret i64 %23, !insn.addr !2788
}

define i64 @GetISDBTBER(i8* %DevExt, i8 %DevCH, i64* %BER1, i64* %BER2, i64 %ptuner_globe_data) local_unnamed_addr {
dec_label_pc_6887:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = call i64 @__decompiler_undefined_function_0()
  %2 = call i64 @__decompiler_undefined_function_0()
  %3 = add i64 %1, -46, !insn.addr !2789
  %4 = inttoptr i64 %3 to i8*, !insn.addr !2789
  %5 = load i8, i8* %4, align 1, !insn.addr !2789
  %6 = zext i8 %5 to i64, !insn.addr !2790
  %7 = or i64 %2, %6, !insn.addr !2790
  %8 = mul i64 %7, zext (i32 shl (i32 trunc (i64 add (i64 ptrtoint (i16* @global_var_4 to i64), i64 1) to i32), i32 ptrtoint (i16* @global_var_4 to i32)) to i64), !insn.addr !2791
  %9 = and i64 %8, 4294967295, !insn.addr !2792
  %10 = inttoptr i64 %0 to i64*, !insn.addr !2793
  store i64 %9, i64* %10, align 8, !insn.addr !2793
  ret i64 ptrtoint (i32* @global_var_1 to i64), !insn.addr !2794
}

define i64 @GetISDBTBER.400(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4) local_unnamed_addr {
dec_label_pc_68b7:
  %0 = call i8 @__decompiler_undefined_function_1()
  %stack_var_-72 = alloca i32, align 4
  %1 = call i32 @__decompiler_undefined_function_3()
  %2 = call i32 @__decompiler_undefined_function_3()
  %stack_var_-88 = alloca i32, align 4
  %3 = call i64 @mcount(), !insn.addr !2795
  %4 = inttoptr i64 %arg3 to i64*, !insn.addr !2796
  store i64 100000000, i64* %4, align 8, !insn.addr !2796
  %5 = inttoptr i64 %arg4 to i64*, !insn.addr !2797
  store i64 100000000, i64* %5, align 8, !insn.addr !2797
  %6 = urem i64 %arg2, 256, !insn.addr !2798
  %7 = ptrtoint i32* %stack_var_-88 to i64, !insn.addr !2799
  %8 = call i64 @DemodRegRead.231(i64 %arg1, i64 %6, i64 157, i64 %7, i64* bitcast (i8** @global_var_3 to i64*), i64* null), !insn.addr !2800
  %9 = load i32, i32* %stack_var_-88, align 4, !insn.addr !2801
  %10 = ptrtoint i32* %stack_var_-72 to i64, !insn.addr !2802
  %11 = call i64 @DemodRegRead.231(i64 %arg1, i64 %6, i64 166, i64 %10, i64* bitcast (i32* @global_var_2 to i64*), i64* null), !insn.addr !2803
  %12 = load i32, i32* %stack_var_-72, align 4, !insn.addr !2804
  %13 = urem i32 %12, 256, !insn.addr !2805
  %14 = shl i32 %13, ptrtoint (i8* @global_var_8 to i32), !insn.addr !2805
  %15 = zext i8 %0 to i32, !insn.addr !2806
  %16 = or i32 %14, %15, !insn.addr !2806
  %17 = udiv i32 61274, %16
  %18 = urem i32 %9, 256, !insn.addr !2807
  %19 = shl i32 %18, ptrtoint (i8* @global_var_10 to i32), !insn.addr !2807
  %20 = urem i32 %2, 256, !insn.addr !2808
  %21 = shl i32 %20, ptrtoint (i8* @global_var_8 to i32), !insn.addr !2808
  %22 = urem i32 %1, 256, !insn.addr !2809
  %23 = or i32 %21, %22, !insn.addr !2810
  %24 = or i32 %23, %19, !insn.addr !2809
  %25 = mul i32 %24, %17, !insn.addr !2811
  %26 = zext i32 %25 to i64, !insn.addr !2811
  store i64 %26, i64* %4, align 8, !insn.addr !2812
  %27 = call i64 @DemodRegRead.231(i64 %arg1, i64 %6, i64 160, i64 %7, i64* bitcast (i8** @global_var_3 to i64*), i64* null), !insn.addr !2813
  %28 = call i64 @DemodRegRead.231(i64 %arg1, i64 %6, i64 166, i64 %10, i64* bitcast (i32* @global_var_2 to i64*), i64* null), !insn.addr !2814
  %29 = load i32, i32* %stack_var_-72, align 4, !insn.addr !2815
  %30 = urem i32 %29, 256, !insn.addr !2816
  %31 = shl i32 %30, ptrtoint (i8* @global_var_8 to i32), !insn.addr !2816
  %32 = or i32 %31, %15, !insn.addr !2817
  %33 = udiv i32 61274, %32
  %34 = zext i32 %33 to i64, !insn.addr !2818
  ret i64 %34, !insn.addr !2819
}

define i64 @GetSatelliteCNRegister(i8* %DevExt, i8 %DevCH, i64 %ptuner_globe_data) local_unnamed_addr {
dec_label_pc_6a0e:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = call i64 @__decompiler_undefined_function_0()
  %2 = call i64 @__decompiler_undefined_function_0()
  %3 = call i64 @__decompiler_undefined_function_0()
  %4 = add i64 %2, -81, !insn.addr !2820
  %5 = inttoptr i64 %4 to i8*, !insn.addr !2820
  %6 = load i8, i8* %5, align 1, !insn.addr !2820
  %7 = zext i8 %6 to i64, !insn.addr !2821
  %8 = or i64 %1, %7, !insn.addr !2821
  %sext = mul i64 %3, 4294967296
  %9 = sdiv i64 %sext, 4294967296, !insn.addr !2822
  %sext1 = mul i64 %8, 4294967296
  %10 = sdiv i64 %sext1, 4294967296, !insn.addr !2822
  %11 = mul nsw i64 %10, %9, !insn.addr !2822
  %12 = and i64 %11, 4294967295, !insn.addr !2822
  %13 = inttoptr i64 %0 to i64*, !insn.addr !2823
  store i64 %12, i64* %13, align 8, !insn.addr !2823
  ret i64 ptrtoint (i32* @global_var_1 to i64), !insn.addr !2824
}

define i64 @GetSatelliteCNRegister.357(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_6a3e:
  %0 = call i64 @mcount(), !insn.addr !2825
  ret i64 %0, !insn.addr !2826
}

define i64 @GetSatelliteCN(i8* %DevExt, i8 %DevCH, i64 %ptuner_globe_data) local_unnamed_addr {
dec_label_pc_6a55:
  %.reg2mem = alloca i64, !insn.addr !2827
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = call i64 @__decompiler_undefined_function_0()
  %2 = call i64 @__decompiler_undefined_function_0()
  %rax = alloca i64, align 8
  %3 = call i64 @__decompiler_undefined_function_0()
  %4 = sext i8 %DevCH to i64
  %5 = ptrtoint i8* %DevExt to i64
  %6 = trunc i64 %3 to i32
  %7 = mul i32 %6, 2, !insn.addr !2827
  %8 = inttoptr i64 %3 to i32*, !insn.addr !2827
  store i32 %7, i32* %8, align 4, !insn.addr !2827
  %9 = bitcast i64* %rax to i8*
  %10 = load i8, i8* %9, align 8, !insn.addr !2828
  %11 = load i64, i64* %rax, align 8
  %12 = trunc i64 %11 to i8, !insn.addr !2828
  %13 = add i8 %10, %12, !insn.addr !2828
  %14 = inttoptr i64 %11 to i8*, !insn.addr !2828
  store i8 %13, i8* %14, align 1, !insn.addr !2828
  %15 = inttoptr i64 %0 to i64*, !insn.addr !2829
  %16 = call i64 @DemodRegRead.231(i64 %5, i64 %4, i64 188, i64 %2, i64* bitcast (i32* @global_var_2 to i64*), i64* %15), !insn.addr !2829
  store i64 0, i64* %rax, align 8, !insn.addr !2830
  %17 = trunc i64 %16 to i8, !insn.addr !2831
  %18 = icmp eq i8 %17, 0, !insn.addr !2831
  store i64 0, i64* %.reg2mem, !insn.addr !2832
  br i1 %18, label %dec_label_pc_6a83, label %dec_label_pc_6a74, !insn.addr !2832

dec_label_pc_6a74:                                ; preds = %dec_label_pc_6a55
  %19 = add i64 %1, -16, !insn.addr !2833
  %20 = inttoptr i64 %19 to i8*, !insn.addr !2833
  %21 = load i8, i8* %20, align 1, !insn.addr !2833
  %22 = zext i8 %21 to i32, !insn.addr !2834
  %23 = shl i32 %22, ptrtoint (i8* @global_var_8 to i32), !insn.addr !2834
  %24 = add i64 %1, -15, !insn.addr !2835
  %25 = inttoptr i64 %24 to i8*, !insn.addr !2835
  %26 = load i8, i8* %25, align 1, !insn.addr !2835
  %27 = zext i8 %26 to i32, !insn.addr !2836
  %28 = or i32 %23, %27, !insn.addr !2836
  %29 = zext i32 %28 to i64, !insn.addr !2837
  store i64 %29, i64* %rax, align 8, !insn.addr !2837
  store i64 %29, i64* %.reg2mem, !insn.addr !2837
  br label %dec_label_pc_6a83, !insn.addr !2837

dec_label_pc_6a83:                                ; preds = %dec_label_pc_6a74, %dec_label_pc_6a55
  %.reload = load i64, i64* %.reg2mem, !insn.addr !2838
  ret i64 %.reload, !insn.addr !2838
}

define i64 @GetSatelliteCN.584(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_6a85:
  %0 = call i8 @__decompiler_undefined_function_1()
  %stack_var_-24 = alloca i32, align 4
  %1 = call i64 @mcount(), !insn.addr !2839
  %2 = ptrtoint i32* %stack_var_-24 to i64, !insn.addr !2840
  %3 = urem i64 %arg2, 256, !insn.addr !2841
  %4 = call i64 @DemodRegRead.231(i64 %arg1, i64 %3, i64 188, i64 %2, i64* bitcast (i32* @global_var_2 to i64*), i64* bitcast (i32* @global_var_1 to i64*)), !insn.addr !2842
  %5 = load i32, i32* %stack_var_-24, align 4, !insn.addr !2843
  %6 = urem i32 %5, 256, !insn.addr !2844
  %7 = shl i32 %6, ptrtoint (i8* @global_var_8 to i32), !insn.addr !2844
  %8 = zext i8 %0 to i32, !insn.addr !2845
  %9 = or i32 %7, %8, !insn.addr !2845
  %10 = icmp ult i32 %9, 35826
  br i1 %10, label %dec_label_pc_6aec.lr.ph, label %dec_label_pc_6aea, !insn.addr !2846

dec_label_pc_6aec.lr.ph:                          ; preds = %dec_label_pc_6a85
  call void @llvm.trap()
  unreachable

dec_label_pc_6aea:                                ; preds = %dec_label_pc_6a85
  ret i64 0, !insn.addr !2847
}

define i64 @GetISDBTCNRegister(i8* %DevExt, i8 %DevCH, i64 %ptuner_globe_data) local_unnamed_addr {
dec_label_pc_6b48:
  %0 = call i64 @__decompiler_undefined_function_0()
  %rax = alloca i64, align 8
  %1 = call i64 @__decompiler_undefined_function_0()
  %2 = sext i8 %DevCH to i64
  %3 = bitcast i64* %rax to i8*
  %4 = trunc i64 %1 to i8
  %5 = mul i8 %4, 2, !insn.addr !2848
  %6 = inttoptr i64 %1 to i8*, !insn.addr !2848
  store i8 %5, i8* %6, align 1, !insn.addr !2848
  %7 = load i64, i64* %rax, align 8, !insn.addr !2849
  %8 = add i64 %7, -9, !insn.addr !2849
  %9 = inttoptr i64 %8 to i8*, !insn.addr !2849
  %10 = load i8, i8* %9, align 1, !insn.addr !2849
  %11 = trunc i64 %0 to i8, !insn.addr !2849
  %12 = add i8 %10, %11, !insn.addr !2849
  store i8 %12, i8* %9, align 1, !insn.addr !2849
  %13 = load i8, i8* %3, align 8, !insn.addr !2850
  %14 = load i64, i64* %rax, align 8
  %15 = trunc i64 %14 to i8, !insn.addr !2850
  %16 = add i8 %13, %15, !insn.addr !2850
  %17 = inttoptr i64 %14 to i8*, !insn.addr !2850
  store i8 %16, i8* %17, align 1, !insn.addr !2850
  %18 = load i8, i8* %3, align 8, !insn.addr !2851
  %19 = load i64, i64* %rax, align 8
  %20 = trunc i64 %19 to i8, !insn.addr !2851
  %21 = add i8 %18, %20, !insn.addr !2851
  %22 = inttoptr i64 %19 to i8*, !insn.addr !2851
  store i8 %21, i8* %22, align 1, !insn.addr !2851
  %23 = and i64 %2, 4294967295, !insn.addr !2852
  ret i64 %23, !insn.addr !2853
}

define i64 @GetISDBTCNRegister.435(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_6b78:
  %0 = call i64 @mcount(), !insn.addr !2854
  ret i64 %0, !insn.addr !2855
}

define i64 @GetISDBTCN(i8* %DevExt, i8 %DevCH, i64 %ptuner_globe_data) local_unnamed_addr {
dec_label_pc_6b98:
  %rax.0.reg2mem = alloca i64, !insn.addr !2856
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = call i64 @__decompiler_undefined_function_0()
  %2 = call i64 @__decompiler_undefined_function_0()
  %3 = call i64 @__decompiler_undefined_function_0()
  %4 = call i64 @__decompiler_undefined_function_0()
  %5 = sext i8 %DevCH to i64
  %6 = ptrtoint i8* %DevExt to i64
  %7 = add i64 %ptuner_globe_data, 139, !insn.addr !2856
  %8 = inttoptr i64 %7 to i8*, !insn.addr !2856
  %9 = load i8, i8* %8, align 1, !insn.addr !2856
  %10 = udiv i64 %3, 256, !insn.addr !2856
  %11 = trunc i64 %10 to i8, !insn.addr !2856
  %12 = add i8 %9, %11, !insn.addr !2856
  store i8 %12, i8* %8, align 1, !insn.addr !2856
  %13 = inttoptr i64 %1 to i64*, !insn.addr !2857
  %14 = inttoptr i64 %0 to i64*, !insn.addr !2857
  %15 = call i64 @DemodRegRead.231(i64 %6, i64 %5, i64 %ptuner_globe_data, i64 %4, i64* %13, i64* %14), !insn.addr !2857
  %16 = trunc i64 %15 to i8, !insn.addr !2858
  %17 = icmp eq i8 %16, 0, !insn.addr !2858
  store i64 0, i64* %rax.0.reg2mem, !insn.addr !2859
  br i1 %17, label %dec_label_pc_6bc6, label %dec_label_pc_6bae, !insn.addr !2859

dec_label_pc_6bae:                                ; preds = %dec_label_pc_6b98
  %18 = add i64 %2, -16, !insn.addr !2860
  %19 = inttoptr i64 %18 to i8*, !insn.addr !2860
  %20 = load i8, i8* %19, align 1, !insn.addr !2860
  %21 = zext i8 %20 to i32, !insn.addr !2861
  %22 = shl i32 %21, ptrtoint (i8* @global_var_10 to i32), !insn.addr !2861
  %23 = add i64 %2, -15, !insn.addr !2862
  %24 = inttoptr i64 %23 to i8*, !insn.addr !2862
  %25 = load i8, i8* %24, align 1, !insn.addr !2862
  %26 = zext i8 %25 to i32, !insn.addr !2863
  %27 = shl i32 %26, ptrtoint (i8* @global_var_8 to i32), !insn.addr !2863
  %28 = or i32 %27, %22, !insn.addr !2864
  %29 = add i64 %2, -14, !insn.addr !2865
  %30 = inttoptr i64 %29 to i8*, !insn.addr !2865
  %31 = load i8, i8* %30, align 1, !insn.addr !2865
  %32 = zext i8 %31 to i32, !insn.addr !2866
  %33 = or i32 %28, %32, !insn.addr !2866
  %34 = zext i32 %33 to i64, !insn.addr !2867
  store i64 %34, i64* %rax.0.reg2mem, !insn.addr !2867
  br label %dec_label_pc_6bc6, !insn.addr !2867

dec_label_pc_6bc6:                                ; preds = %dec_label_pc_6bae, %dec_label_pc_6b98
  %rax.0.reload = load i64, i64* %rax.0.reg2mem
  ret i64 %rax.0.reload, !insn.addr !2868
}

define i64 @GetISDBTCN.416(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_6bc8:
  %0 = call i32 @__decompiler_undefined_function_3()
  %1 = call i32 @__decompiler_undefined_function_3()
  %stack_var_-24 = alloca i32, align 4
  %2 = call i64 @mcount(), !insn.addr !2869
  %3 = ptrtoint i32* %stack_var_-24 to i64, !insn.addr !2870
  %4 = urem i64 %arg2, 256, !insn.addr !2871
  %5 = call i64 @DemodRegRead.231(i64 %arg1, i64 %4, i64 139, i64 %3, i64* bitcast (i8** @global_var_3 to i64*), i64* null), !insn.addr !2872
  %6 = load i32, i32* %stack_var_-24, align 4, !insn.addr !2873
  %7 = urem i32 %6, 256, !insn.addr !2874
  %8 = shl i32 %7, ptrtoint (i8* @global_var_10 to i32), !insn.addr !2874
  %9 = urem i32 %1, 256, !insn.addr !2875
  %10 = shl i32 %9, ptrtoint (i8* @global_var_8 to i32), !insn.addr !2875
  %11 = urem i32 %0, 256, !insn.addr !2876
  %12 = or i32 %10, %11, !insn.addr !2877
  %13 = or i32 %12, %8, !insn.addr !2876
  %14 = icmp ult i32 %13, 9778433
  br i1 %14, label %dec_label_pc_6c32.lr.ph, label %dec_label_pc_6c30, !insn.addr !2878

dec_label_pc_6c32.lr.ph:                          ; preds = %dec_label_pc_6bc8
  call void @llvm.trap()
  unreachable

dec_label_pc_6c30:                                ; preds = %dec_label_pc_6bc8
  ret i64 0, !insn.addr !2879
}

define i8 @Adapter_ReadSNR_S(i8* %DevExt, i8 %DevCH) local_unnamed_addr {
dec_label_pc_6c87:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = call i64 @__decompiler_undefined_function_0()
  %2 = trunc i64 %0 to i16, !insn.addr !2880
  %3 = trunc i64 %1 to i32, !insn.addr !2880
  call void @__asm_out(i16 %2, i32 %3), !insn.addr !2880
  %4 = trunc i64 %1 to i8, !insn.addr !2881
  ret i8 %4, !insn.addr !2881
}

define i64 @Adapter_ReadSNR_S.312(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_6cb7:
  %stack_var_-40 = alloca i64, align 8
  %0 = call i64 @mcount(), !insn.addr !2882
  %1 = ptrtoint i64* %stack_var_-40 to i64, !insn.addr !2883
  %2 = urem i64 %arg2, 256, !insn.addr !2884
  %3 = call i64 @DemodRegRead.231(i64 %arg1, i64 %2, i64 240, i64 %1, i64* bitcast (i8** @global_var_3 to i64*), i64* bitcast (i32* @global_var_1 to i64*)), !insn.addr !2885
  ret i64 0, !insn.addr !2886
}

define i8 @Adapter_ReadSNR_T(i8* %DevExt, i8 %DevCH) local_unnamed_addr {
dec_label_pc_6cee:
  %rax.0.reg2mem = alloca i64, !insn.addr !2887
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = call i64 @__decompiler_undefined_function_0()
  %2 = call i1 @__decompiler_undefined_function_2()
  br i1 %2, label %dec_label_pc_6d17, label %dec_label_pc_6cf0, !insn.addr !2887

dec_label_pc_6cf0:                                ; preds = %dec_label_pc_6cee
  %3 = add i64 %0, -32, !insn.addr !2888
  %4 = inttoptr i64 %3 to i8*, !insn.addr !2888
  %5 = load i8, i8* %4, align 1, !insn.addr !2888
  %6 = zext i8 %5 to i32, !insn.addr !2889
  %7 = shl i32 %6, ptrtoint (i8* @global_var_10 to i32), !insn.addr !2889
  %8 = add i64 %0, -31, !insn.addr !2890
  %9 = inttoptr i64 %8 to i8*, !insn.addr !2890
  %10 = load i8, i8* %9, align 1, !insn.addr !2890
  %11 = zext i8 %10 to i32, !insn.addr !2891
  %12 = shl i32 %11, ptrtoint (i8* @global_var_8 to i32), !insn.addr !2891
  %13 = or i32 %12, %7, !insn.addr !2892
  %14 = add i64 %0, -30, !insn.addr !2893
  %15 = inttoptr i64 %14 to i8*, !insn.addr !2893
  %16 = load i8, i8* %15, align 1, !insn.addr !2893
  %17 = zext i8 %16 to i32, !insn.addr !2894
  %18 = or i32 %13, %17, !insn.addr !2894
  %19 = and i64 %1, 4294967295, !insn.addr !2895
  %20 = call i64 @Ber_to_Signal_Quality.548(i32 %18, i64 0, i64 %19, i64* bitcast (i32* @global_var_1 to i64*)), !insn.addr !2896
  store i64 %20, i64* %rax.0.reg2mem, !insn.addr !2896
  br label %dec_label_pc_6d17, !insn.addr !2896

dec_label_pc_6d17:                                ; preds = %dec_label_pc_6cf0, %dec_label_pc_6cee
  %rax.0.reload = load i64, i64* %rax.0.reg2mem
  %21 = trunc i64 %rax.0.reload to i8, !insn.addr !2897
  ret i8 %21, !insn.addr !2897
}

define i64 @Adapter_ReadSNR_T.540(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_6d1e:
  %0 = call i8 @__decompiler_undefined_function_1()
  %stack_var_-72 = alloca i64, align 8
  %stack_var_-88 = alloca i64, align 8
  %1 = call i64 @mcount(), !insn.addr !2898
  %2 = urem i64 %arg2, 256, !insn.addr !2899
  %3 = ptrtoint i64* %stack_var_-88 to i64, !insn.addr !2900
  %4 = call i64 @DemodRegRead.231(i64 %arg1, i64 %2, i64 157, i64 %3, i64* bitcast (i8** @global_var_3 to i64*), i64* null), !insn.addr !2901
  %5 = ptrtoint i64* %stack_var_-72 to i64, !insn.addr !2902
  %6 = call i64 @DemodRegRead.231(i64 %arg1, i64 %2, i64 166, i64 %5, i64* bitcast (i32* @global_var_2 to i64*), i64* null), !insn.addr !2903
  %7 = zext i8 %0 to i64, !insn.addr !2904
  ret i64 %7, !insn.addr !2905
}

define i64 @Adapter_GetSignaLevel_S(i8* %DevExt, i8 %DevCH) local_unnamed_addr {
dec_label_pc_6db7:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = call i64 @__decompiler_undefined_function_0()
  %2 = sext i8 %DevCH to i64
  %3 = ptrtoint i8* %DevExt to i64
  %4 = trunc i64 %0 to i32, !insn.addr !2906
  %5 = trunc i64 %3 to i32, !insn.addr !2907
  %6 = urem i32 %4, 256, !insn.addr !2907
  %7 = or i32 %6, %5, !insn.addr !2907
  %8 = and i64 %1, 4294967295, !insn.addr !2908
  %9 = call i64 @Ber_to_Signal_Quality.548(i32 %7, i64 %2, i64 %8, i64* null), !insn.addr !2909
  ret i64 %9, !insn.addr !2910
}

define i64 @Adapter_GetSignaLevel_S.187(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_6de7:
  %stack_var_-40 = alloca i64, align 8
  %0 = call i64 @mcount(), !insn.addr !2911
  %1 = ptrtoint i64* %stack_var_-40 to i64, !insn.addr !2912
  %2 = urem i64 %arg2, 256, !insn.addr !2913
  %3 = call i64 @DemodRegRead.231(i64 %arg1, i64 %2, i64 ptrtoint ([3 x i8]* @global_var_eb to i64), i64 %1, i64* bitcast (i8** @global_var_3 to i64*), i64* bitcast (i32* @global_var_1 to i64*)), !insn.addr !2914
  ret i64 0, !insn.addr !2915
}

define i64 @Adapter_GetSignaLevel_T(i8* %DevExt, i8 %DevCH) local_unnamed_addr {
dec_label_pc_6e21:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = call i64 @__decompiler_undefined_function_0()
  %2 = call i64 @__decompiler_undefined_function_0()
  %3 = ptrtoint i8* %DevExt to i64
  %4 = trunc i64 %2 to i32, !insn.addr !2916
  call void @__asm_out.621(i64 16, i32 %4), !insn.addr !2916
  %5 = add i64 %0, -31, !insn.addr !2917
  %6 = inttoptr i64 %5 to i8*, !insn.addr !2917
  %7 = load i8, i8* %6, align 1, !insn.addr !2917
  %8 = zext i8 %7 to i32, !insn.addr !2918
  %9 = shl i32 %8, ptrtoint (i8* @global_var_8 to i32), !insn.addr !2918
  %10 = trunc i64 %3 to i32, !insn.addr !2919
  %11 = or i32 %9, %10, !insn.addr !2919
  %12 = add i64 %0, -30, !insn.addr !2920
  %13 = inttoptr i64 %12 to i8*, !insn.addr !2920
  %14 = load i8, i8* %13, align 1, !insn.addr !2920
  %15 = zext i8 %14 to i32, !insn.addr !2921
  %16 = or i32 %11, %15, !insn.addr !2921
  %17 = and i64 %1, 4294967295, !insn.addr !2922
  %18 = call i64 @Ber_to_Signal_Quality.548(i32 %16, i64 0, i64 %17, i64* bitcast (i32* @global_var_1 to i64*)), !insn.addr !2923
  %19 = urem i64 %18, 256, !insn.addr !2924
  ret i64 %19, !insn.addr !2925
}

define i64 @Adapter_GetSignaLevel_T.478(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_6e51:
  %0 = call i8 @__decompiler_undefined_function_1()
  %stack_var_-72 = alloca i64, align 8
  %stack_var_-88 = alloca i64, align 8
  %1 = call i64 @mcount(), !insn.addr !2926
  %2 = urem i64 %arg2, 256, !insn.addr !2927
  %3 = ptrtoint i64* %stack_var_-88 to i64, !insn.addr !2928
  %4 = call i64 @DemodRegRead.231(i64 %arg1, i64 %2, i64 160, i64 %3, i64* bitcast (i8** @global_var_3 to i64*), i64* null), !insn.addr !2929
  %5 = ptrtoint i64* %stack_var_-72 to i64, !insn.addr !2930
  %6 = call i64 @DemodRegRead.231(i64 %arg1, i64 %2, i64 166, i64 %5, i64* bitcast (i32* @global_var_2 to i64*), i64* null), !insn.addr !2931
  %7 = zext i8 %0 to i64, !insn.addr !2932
  ret i64 %7, !insn.addr !2933
}

define i8 @Adapter_TSIDRead(i8* %DevExt, i8 %DevCH, i32* %tsidList, i8 %bufferlength) local_unnamed_addr {
dec_label_pc_6eed:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = sext i8 %bufferlength to i64
  %2 = sext i8 %DevCH to i64
  %3 = ptrtoint i8* %DevExt to i64
  %4 = mul i64 %1, ptrtoint (i32* @global_var_1 to i64), !insn.addr !2934
  %5 = add nsw i64 %1, -1, !insn.addr !2934
  %6 = add i64 %5, %4, !insn.addr !2934
  %7 = inttoptr i64 %6 to i32*, !insn.addr !2934
  %8 = load i32, i32* %7, align 4, !insn.addr !2934
  %9 = add i32 %8, ptrtoint (i32* @global_var_1 to i32), !insn.addr !2934
  store i32 %9, i32* %7, align 4, !insn.addr !2934
  %10 = and i64 %0, 4294967295, !insn.addr !2935
  %11 = trunc i64 %3 to i32, !insn.addr !2936
  %12 = call i64 @Ber_to_Signal_Quality.548(i32 %11, i64 %2, i64 %10, i64* null), !insn.addr !2936
  %13 = trunc i64 %12 to i8, !insn.addr !2937
  ret i8 %13, !insn.addr !2937
}

define i64 @Adapter_TSIDRead.230(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4) local_unnamed_addr {
dec_label_pc_6f1d:
  %stack_var_-56 = alloca i64, align 8
  %0 = call i64 @mcount(), !insn.addr !2938
  %1 = call i64 @__readgsqword(i64 40), !insn.addr !2939
  %2 = ptrtoint i64* %stack_var_-56 to i64, !insn.addr !2940
  %3 = urem i64 %arg2, 256, !insn.addr !2941
  %4 = call i64 @DemodRegRead.231(i64 %arg1, i64 %3, i64 206, i64 %2, i64* bitcast (i8* @global_var_10 to i64*), i64* bitcast (i32* @global_var_1 to i64*)), !insn.addr !2942
  %5 = bitcast i64* %stack_var_-56 to i8*, !insn.addr !2943
  %6 = load i8, i8* %5, align 8, !insn.addr !2943
  %7 = zext i8 %6 to i32, !insn.addr !2944
  %8 = shl i32 %7, ptrtoint (i8* @global_var_8 to i32), !insn.addr !2944
  %9 = add i64 %2, ptrtoint (i32* @global_var_1 to i64), !insn.addr !2945
  %10 = inttoptr i64 %9 to i8*, !insn.addr !2945
  %11 = load i8, i8* %10, align 4, !insn.addr !2945
  %12 = zext i8 %11 to i32, !insn.addr !2946
  %13 = or i32 %8, %12, !insn.addr !2946
  %14 = inttoptr i64 %arg3 to i32*, !insn.addr !2947
  store i32 %13, i32* %14, align 4, !insn.addr !2947
  ret i64 ptrtoint (i32* @global_var_2 to i64), !insn.addr !2948
}

define i8 @TC_SetFrequency(i8* %DevExt, i8 %DevCH, i64 %dwFreqkHz, i8 %ucBW, i8* %tuner_globe_data) local_unnamed_addr {
dec_label_pc_6fa4:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = trunc i64 %0 to i8
  ret i8 %1
}

define i64 @function_6fa5() local_unnamed_addr {
dec_label_pc_6fa5:
  %0 = call i64 @__decompiler_undefined_function_0()
  ret i64 %0, !insn.addr !2949
}

define i64 @TC_SetFrequency.492(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4, i64 %arg5) local_unnamed_addr {
dec_label_pc_6fd4:
  %rdx.0.reg2mem = alloca i64, !insn.addr !2950
  %0 = call i64 @mcount(), !insn.addr !2951
  %1 = icmp ult i64 %arg3, 1000000
  br i1 %1, label %dec_label_pc_6ff7, label %dec_label_pc_7061, !insn.addr !2952

dec_label_pc_6ff7:                                ; preds = %dec_label_pc_6fd4
  %2 = add i64 %arg3, -165143, !insn.addr !2953
  %3 = icmp ult i64 %2, 2001
  store i64 167143, i64* %rdx.0.reg2mem, !insn.addr !2954
  br i1 %3, label %dec_label_pc_7039, label %dec_label_pc_700d, !insn.addr !2954

dec_label_pc_700d:                                ; preds = %dec_label_pc_6ff7
  %4 = add i64 %arg3, -195143, !insn.addr !2955
  %5 = icmp ult i64 %4, 2001
  store i64 ptrtoint (i64* @global_var_2fa47 to i64), i64* %rdx.0.reg2mem, !insn.addr !2956
  br i1 %5, label %dec_label_pc_7039, label %dec_label_pc_7023, !insn.addr !2956

dec_label_pc_7023:                                ; preds = %dec_label_pc_700d
  %6 = add i64 %arg3, -471143, !insn.addr !2957
  %7 = icmp ult i64 %6, 2001
  %8 = select i1 %7, i64 473143, i64 %arg3, !insn.addr !2958
  store i64 %8, i64* %rdx.0.reg2mem, !insn.addr !2958
  br label %dec_label_pc_7039, !insn.addr !2958

dec_label_pc_7039:                                ; preds = %dec_label_pc_700d, %dec_label_pc_6ff7, %dec_label_pc_7023
  %rdx.0.reload = load i64, i64* %rdx.0.reg2mem
  %9 = udiv i64 %rdx.0.reload, 8, !insn.addr !2959
  %10 = mul i64 %9, 2361183241434822607, !insn.addr !2960
  %11 = add i64 %arg5, ptrtoint (i16* @global_var_4 to i64), !insn.addr !2961
  %12 = inttoptr i64 %11 to i32*, !insn.addr !2961
  store i32 0, i32* %12, align 4, !insn.addr !2961
  ret i64 %10, !insn.addr !2962

dec_label_pc_7061:                                ; preds = %dec_label_pc_6fd4
  ret i64 %0, !insn.addr !2963
}

define i8 @TLIB_SetGPIO_ASIE5606B5(i8* %DevExt, i8 %Data, i8 %MaskData) local_unnamed_addr {
dec_label_pc_7073:
  %.reg2mem = alloca i8, !insn.addr !2964
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = call i64 @__decompiler_undefined_function_0()
  %2 = call i64 @__decompiler_undefined_function_0()
  %rax = alloca i64, align 8
  %3 = call i64 @__decompiler_undefined_function_0()
  %4 = ptrtoint i8* %DevExt to i64
  %5 = trunc i64 %3 to i32
  %6 = mul i32 %5, 2, !insn.addr !2964
  %7 = inttoptr i64 %3 to i32*, !insn.addr !2964
  store i32 %6, i32* %7, align 4, !insn.addr !2964
  %8 = bitcast i64* %rax to i8*
  %9 = load i8, i8* %8, align 8, !insn.addr !2965
  %10 = load i64, i64* %rax, align 8
  %11 = trunc i64 %10 to i8, !insn.addr !2965
  %12 = add i8 %9, %11, !insn.addr !2965
  %13 = inttoptr i64 %10 to i8*, !insn.addr !2965
  store i8 %12, i8* %13, align 1, !insn.addr !2965
  %14 = call i64 @TC_RemappingTunerNumber.201(i64 %4), !insn.addr !2966
  store i64 0, i64* %rax, align 8, !insn.addr !2967
  %15 = trunc i64 %14 to i8, !insn.addr !2968
  %16 = icmp eq i8 %15, 0, !insn.addr !2968
  store i8 0, i8* %.reg2mem, !insn.addr !2969
  br i1 %16, label %dec_label_pc_709a, label %dec_label_pc_708b, !insn.addr !2969

dec_label_pc_708b:                                ; preds = %dec_label_pc_7073
  %17 = add i64 %1, -20, !insn.addr !2970
  %18 = inttoptr i64 %17 to i8*, !insn.addr !2970
  %19 = load i8, i8* %18, align 1, !insn.addr !2970
  %20 = call i64 @Japan4x4Tuner_TunerSetFrequency.252(i8 %19, i64 %0, i64 %2), !insn.addr !2971
  store i64 %20, i64* %rax, align 8, !insn.addr !2971
  %phitmp = trunc i64 %20 to i8
  store i8 %phitmp, i8* %.reg2mem, !insn.addr !2971
  br label %dec_label_pc_709a, !insn.addr !2971

dec_label_pc_709a:                                ; preds = %dec_label_pc_708b, %dec_label_pc_7073
  %.reload = load i8, i8* %.reg2mem, !insn.addr !2972
  ret i8 %.reload, !insn.addr !2972
}

define i64 @TLIB_SetGPIO_ASIE5606B5.181(i64 %arg1, i64* %arg2, i64* %arg3) local_unnamed_addr {
dec_label_pc_70a3:
  %0 = ptrtoint i64* %arg3 to i64
  %1 = ptrtoint i64* %arg2 to i64
  %stack_var_-41 = alloca i8, align 1
  %2 = call i64 @mcount(), !insn.addr !2973
  %3 = bitcast i8* %stack_var_-41 to i64*, !insn.addr !2974
  %4 = call i64 @TLIB_I2C_Read.262(i64 %arg1, i64 74, i64 ptrtoint (i8** @global_var_b to i64), i64* nonnull %3, i64* bitcast (i32* @global_var_1 to i64*), i64 0), !insn.addr !2974
  %5 = and i64 %0, 4294967295
  %6 = xor i64 %5, 4294967295, !insn.addr !2975
  %7 = trunc i64 %6 to i8, !insn.addr !2976
  %8 = load i8, i8* %stack_var_-41, align 1, !insn.addr !2976
  %9 = and i8 %8, %7, !insn.addr !2976
  %10 = zext i8 %9 to i64, !insn.addr !2976
  %11 = and i64 %6, 4294967040, !insn.addr !2976
  %.masked = and i64 %5, %1
  %12 = or i64 %11, %.masked, !insn.addr !2976
  %13 = or i64 %12, %10, !insn.addr !2977
  ret i64 %13, !insn.addr !2978
}

define i8 @TC_SetLNB(i8* %DevExt, i8 %DevCH, i8 %LNBPower, i8* %tuner_globe_data) local_unnamed_addr {
dec_label_pc_7105:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = call i64 @__decompiler_undefined_function_0()
  %2 = call i64 @TLIB_I2C_Write.278(i64 %1, i64 74, i64 ptrtoint (i8** @global_var_b to i64), i64 0, i64 ptrtoint (i32* @global_var_1 to i64), i64 %0), !insn.addr !2979
  %3 = trunc i64 %2 to i8, !insn.addr !2980
  %4 = icmp eq i8 %3, 0, !insn.addr !2980
  %5 = icmp eq i1 %4, false, !insn.addr !2981
  %6 = zext i1 %5 to i8, !insn.addr !2981
  ret i8 %6, !insn.addr !2982
}

define i64 @TC_SetLNB.173(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_7135:
  %0 = call i64 @mcount(), !insn.addr !2983
  ret i64 0, !insn.addr !2984
}

define i8 @TC_MOS_POWER(i8* %DevExt, i8 %DevCH, i8 %bPower_On, i8* %tuner_globe_data) local_unnamed_addr {
dec_label_pc_714a:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = ptrtoint i8* %DevExt to i64
  %2 = add i64 %0, ptrtoint (i32** @global_var_16 to i64), !insn.addr !2985
  %3 = inttoptr i64 %2 to i32*, !insn.addr !2985
  %4 = load i32, i32* %3, align 4, !insn.addr !2985
  %5 = sext i8 %DevCH to i32, !insn.addr !2985
  %6 = add i32 %4, %5, !insn.addr !2985
  store i32 %6, i32* %3, align 4, !insn.addr !2985
  %7 = call i64 @TLIB_SetGPIO_ASIE5606B5.181(i64 %1, i64* bitcast (i32** @global_var_20 to i64*), i64* bitcast (i32** @global_var_20 to i64*)), !insn.addr !2986
  ret i8 ptrtoint (i32* @global_var_1 to i8), !insn.addr !2987
}

define i64 @TC_MOS_POWER.323(i64 %arg1, i64 %arg2, i64* %arg3) local_unnamed_addr {
dec_label_pc_717a:
  %0 = ptrtoint i64* %arg3 to i64
  %1 = call i64 @mcount(), !insn.addr !2988
  %2 = trunc i64 %0 to i8, !insn.addr !2989
  %3 = icmp eq i8 %2, 0, !insn.addr !2989
  br i1 %3, label %dec_label_pc_72c6, label %dec_label_pc_7193, !insn.addr !2990

dec_label_pc_7193:                                ; preds = %dec_label_pc_717a
  %4 = call i64 @TLIB_SetGPIO.391(i64 %arg1, i64* bitcast (i32* @global_var_1 to i64*), i64* bitcast (i32* @global_var_1 to i64*)), !insn.addr !2991
  %5 = call i64 @TLIB_Delay.388(i64* bitcast (i8* @global_var_a to i64*)), !insn.addr !2992
  %6 = call i64 @TLIB_SetGPIO.391(i64 %arg1, i64* null, i64* bitcast (i32* @global_var_1 to i64*)), !insn.addr !2993
  %7 = call i64 @TLIB_Delay.388(i64* bitcast (i8* @global_var_a to i64*)), !insn.addr !2994
  %8 = call i64 @TLIB_SetGPIO.391(i64 %arg1, i64* bitcast (i32* @global_var_1 to i64*), i64* bitcast (i32* @global_var_1 to i64*)), !insn.addr !2995
  %9 = call i64 @TLIB_Delay.388(i64* bitcast (i32** @global_var_14 to i64*)), !insn.addr !2996
  %10 = call i64 @TLIB_SetGPIOEx.513(i64 %arg1, i64* bitcast (i32* @global_var_1 to i64*), i64* bitcast (i32* @global_var_1 to i64*)), !insn.addr !2997
  %11 = call i64 @TLIB_Delay.388(i64* bitcast (i8* @global_var_a to i64*)), !insn.addr !2998
  %12 = call i64 @TLIB_SetGPIOEx.513(i64 %arg1, i64* null, i64* bitcast (i32* @global_var_1 to i64*)), !insn.addr !2999
  %13 = call i64 @TLIB_Delay.388(i64* bitcast (i32** @global_var_14 to i64*)), !insn.addr !3000
  %14 = call i64 @TLIB_SetGPIO_ASIE5606B5.181(i64 %arg1, i64* bitcast (i32* @global_var_2 to i64*), i64* bitcast (i32* @global_var_2 to i64*)), !insn.addr !3001
  %15 = call i64 @TLIB_Delay.388(i64* bitcast (i32** @global_var_14 to i64*)), !insn.addr !3002
  %16 = call i64 @TLIB_SetGPIO_ASIE5606B5.181(i64 %arg1, i64* null, i64* bitcast (i32* @global_var_2 to i64*)), !insn.addr !3003
  %17 = call i64 @TLIB_Delay.388(i64* bitcast (i32** @global_var_14 to i64*)), !insn.addr !3004
  %18 = call i64 @TLIB_SetGPIO_ASIE5606B5.181(i64 %arg1, i64* bitcast (i32* @global_var_2 to i64*), i64* bitcast (i32* @global_var_2 to i64*)), !insn.addr !3005
  %19 = call i64 @TLIB_Delay.388(i64* bitcast (i32** @global_var_14 to i64*)), !insn.addr !3006
  %20 = call i64 @TLIB_SetGPIO_ASIE5606B5.181(i64 %arg1, i64* bitcast (i16* @global_var_4 to i64*), i64* bitcast (i16* @global_var_4 to i64*)), !insn.addr !3007
  %21 = call i64 @TLIB_Delay.388(i64* bitcast (i32** @global_var_14 to i64*)), !insn.addr !3008
  %22 = call i64 @TLIB_SetGPIO_ASIE5606B5.181(i64 %arg1, i64* null, i64* bitcast (i16* @global_var_4 to i64*)), !insn.addr !3009
  %23 = call i64 @TLIB_Delay.388(i64* bitcast (i32** @global_var_14 to i64*)), !insn.addr !3010
  %24 = call i64 @TLIB_SetGPIO_ASIE5606B5.181(i64 %arg1, i64* bitcast (i16* @global_var_4 to i64*), i64* bitcast (i16* @global_var_4 to i64*)), !insn.addr !3011
  %25 = call i64 @TLIB_Delay.388(i64* bitcast (i32** @global_var_14 to i64*)), !insn.addr !3012
  ret i64 %25, !insn.addr !3013

dec_label_pc_72c6:                                ; preds = %dec_label_pc_717a
  %26 = call i64 @TLIB_Delay.388(i64* bitcast (i8* @global_var_a to i64*)), !insn.addr !3014
  %27 = call i64 @TLIB_SetGPIO.391(i64 %arg1, i64* null, i64* bitcast (i32* @global_var_1 to i64*)), !insn.addr !3015
  %28 = call i64 @TLIB_Delay.388(i64* bitcast (i8* @global_var_a to i64*)), !insn.addr !3016
  ret i64 %28, !insn.addr !3017
}

define i8 @DemodRegWrite(i8* %DevExt, i8 %DevCH, i8 %byReg, i8* %pBuffer, i8 %byCount, i32 %sig_source) local_unnamed_addr {
dec_label_pc_72f6:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = sext i8 %byReg to i64
  %2 = sext i8 %DevCH to i64
  %3 = inttoptr i64 %2 to i64*, !insn.addr !3018
  %4 = inttoptr i64 %1 to i64*, !insn.addr !3018
  %5 = call i64 @TLIB_SetGPIO.391(i64 %0, i64* %3, i64* %4), !insn.addr !3018
  %6 = call i64 @TLIB_Delay.388(i64* bitcast (i8* @global_var_a to i64*)), !insn.addr !3019
  %7 = call i64 @TLIB_SetGPIOEx.513(i64 %0, i64* bitcast (i32* @global_var_1 to i64*), i64* bitcast (i32* @global_var_1 to i64*)), !insn.addr !3020
  ret i8 ptrtoint (i32* @global_var_1 to i8), !insn.addr !3021
}

define i64 @DemodRegWrite.428(i64 %arg1, i64 %arg2, i64 %arg3, i64* %arg4, i64* %arg5, i64 %arg6) local_unnamed_addr {
dec_label_pc_7326:
  %0 = call i64 @mcount(), !insn.addr !3022
  ret i64 %0, !insn.addr !3023
}

define i8 @ReAcqDemod(i8* %DevExt, i8 %DevCH, i32 %src) local_unnamed_addr {
dec_label_pc_734c:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = call i64 @__decompiler_undefined_function_0()
  %2 = call i64 @__decompiler_undefined_function_0()
  %3 = sext i32 %src to i64
  %4 = sext i8 %DevCH to i64
  %5 = ptrtoint i8* %DevExt to i64
  %6 = call i64 @TLIB_I2C_Write.278(i64 %5, i64 %4, i64 %3, i64 %2, i64 %1, i64 %0), !insn.addr !3024
  %7 = trunc i64 %6 to i8, !insn.addr !3025
  ret i8 %7, !insn.addr !3025
}

define i64 @ReAcqDemod.148(i64 %arg1, i64 %arg2, i64 %arg3) local_unnamed_addr {
dec_label_pc_737c:
  %stack_var_-24 = alloca i64, align 8
  %0 = call i64 @mcount(), !insn.addr !3026
  %1 = trunc i64 %arg3 to i32, !insn.addr !3027
  %2 = icmp eq i32 %1, 0, !insn.addr !3027
  %3 = icmp eq i1 %2, false, !insn.addr !3028
  br i1 %3, label %4, label %dec_label_pc_738d, !insn.addr !3028

; <label>:4:                                      ; preds = %dec_label_pc_737c
  %5 = inttoptr i64 %arg1 to i8*, !insn.addr !3028
  %6 = trunc i64 %arg2 to i8, !insn.addr !3028
  %7 = inttoptr i64 %arg3 to i8*, !insn.addr !3028
  %8 = call i8 @InitDemod(i8* %5, i8 %6, i8* %7), !insn.addr !3028
  br label %dec_label_pc_738d, !insn.addr !3028

dec_label_pc_738d:                                ; preds = %4, %dec_label_pc_737c
  store i64 64, i64* %stack_var_-24, align 8, !insn.addr !3029
  %9 = urem i64 %arg2, 256, !insn.addr !3030
  %10 = and i64 %arg3, -256, !insn.addr !3031
  %11 = or i64 %10, ptrtoint (i32* @global_var_1 to i64), !insn.addr !3031
  %12 = call i64 @DemodRegWrite.428(i64 %arg1, i64 %9, i64 %11, i64* nonnull %stack_var_-24, i64* bitcast (i32* @global_var_1 to i64*), i64 0), !insn.addr !3032
  %13 = trunc i64 %12 to i8, !insn.addr !3033
  %14 = icmp eq i8 %13, 0, !insn.addr !3033
  %15 = icmp eq i1 %14, false, !insn.addr !3034
  %16 = zext i1 %15 to i64, !insn.addr !3034
  %17 = and i64 %12, -256, !insn.addr !3034
  %18 = or i64 %17, %16, !insn.addr !3034
  ret i64 %18, !insn.addr !3035
}

define i8 @InitDemod(i8* %DevExt, i8 %DevCH, i8* %tuner_globe_data) local_unnamed_addr {
dec_label_pc_73b3:
  %rax.0.reg2mem = alloca i8, !insn.addr !3036
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = ptrtoint i8* %tuner_globe_data to i64
  %2 = trunc i64 %1 to i32, !insn.addr !3037
  %3 = icmp eq i32 %2, ptrtoint (i32* @global_var_1 to i32), !insn.addr !3037
  %4 = icmp eq i1 %3, false, !insn.addr !3038
  store i8 ptrtoint (i32* @global_var_1 to i8), i8* %rax.0.reg2mem, !insn.addr !3038
  br i1 %4, label %dec_label_pc_73e1, label %dec_label_pc_73bd, !insn.addr !3038

dec_label_pc_73bd:                                ; preds = %dec_label_pc_73b3
  %5 = ptrtoint i8* %DevExt to i64
  %6 = zext i8 %DevCH to i64
  %7 = add i64 %0, -16, !insn.addr !3039
  %8 = inttoptr i64 %7 to i8*, !insn.addr !3039
  store i8 ptrtoint (i32* @global_var_1 to i8), i8* %8, align 1, !insn.addr !3039
  %9 = and i64 %1, -256, !insn.addr !3040
  %10 = or i64 %9, ptrtoint (i8** @global_var_3 to i64), !insn.addr !3040
  %11 = inttoptr i64 %7 to i64*, !insn.addr !3041
  %12 = call i64 @DemodRegWrite.428(i64 %5, i64 %6, i64 %10, i64* %11, i64* bitcast (i32* @global_var_1 to i64*), i64 ptrtoint (i32* @global_var_1 to i64)), !insn.addr !3041
  %13 = trunc i64 %12 to i8, !insn.addr !3042
  %14 = icmp eq i8 %13, 0, !insn.addr !3042
  %15 = icmp eq i1 %14, false, !insn.addr !3043
  %16 = zext i1 %15 to i8, !insn.addr !3043
  store i8 %16, i8* %rax.0.reg2mem, !insn.addr !3043
  br label %dec_label_pc_73e1, !insn.addr !3043

dec_label_pc_73e1:                                ; preds = %dec_label_pc_73bd, %dec_label_pc_73b3
  %rax.0.reload = load i8, i8* %rax.0.reg2mem
  ret i8 %rax.0.reload, !insn.addr !3044
}

define i64 @InitDemod.589(i64 %arg1, i64 %arg2, i64 %arg3) local_unnamed_addr {
dec_label_pc_73e3:
  %rbx.0.reg2mem = alloca i64, !insn.addr !3045
  %stack_var_-57 = alloca i64, align 8
  %0 = call i64 @mcount(), !insn.addr !3046
  %1 = add i64 %arg3, ptrtoint (i16* @global_var_4 to i64), !insn.addr !3047
  %2 = inttoptr i64 %1 to i32*, !insn.addr !3047
  %3 = load i32, i32* %2, align 4, !insn.addr !3047
  %4 = icmp eq i32 %3, ptrtoint (i32* @global_var_1 to i32), !insn.addr !3047
  %5 = icmp eq i1 %4, false, !insn.addr !3048
  br i1 %5, label %dec_label_pc_746f, label %dec_label_pc_741a, !insn.addr !3048

dec_label_pc_741a:                                ; preds = %dec_label_pc_73e3
  %6 = urem i64 %arg2, 256, !insn.addr !3049
  store i64 0, i64* %rbx.0.reg2mem, !insn.addr !3049
  br label %dec_label_pc_7430, !insn.addr !3049

dec_label_pc_7430:                                ; preds = %dec_label_pc_7430, %dec_label_pc_741a
  %rbx.0.reload = load i64, i64* %rbx.0.reg2mem
  %7 = inttoptr i64 %rbx.0.reload to i8*
  %8 = load i8, i8* %7, align 4
  %9 = sext i8 %8 to i64, !insn.addr !3050
  store i64 %9, i64* %stack_var_-57, align 8, !insn.addr !3050
  %10 = zext i8 %8 to i64, !insn.addr !3051
  %11 = call i64 @DemodRegWrite.428(i64 %arg1, i64 %6, i64 %10, i64* nonnull %stack_var_-57, i64* bitcast (i32* @global_var_1 to i64*), i64 ptrtoint (i32* @global_var_1 to i64)), !insn.addr !3052
  %12 = add i64 %rbx.0.reload, ptrtoint (i32* @global_var_1 to i64), !insn.addr !3053
  %13 = icmp eq i64 %12, 0, !insn.addr !3054
  %14 = icmp eq i1 %13, false, !insn.addr !3055
  store i64 %12, i64* %rbx.0.reg2mem, !insn.addr !3055
  br i1 %14, label %dec_label_pc_7430, label %dec_label_pc_746d, !insn.addr !3055

dec_label_pc_746d:                                ; preds = %dec_label_pc_7430
  ret i64 %11, !insn.addr !3056

dec_label_pc_746f:                                ; preds = %dec_label_pc_73e3
  call void @llvm.trap()
  unreachable
}

define i8 @Adapter_TSIDWrite(i8* %DevExt, i8 %DevCH, i32 %tsid) local_unnamed_addr {
dec_label_pc_74b2:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = trunc i64 %0 to i8
  ret i8 %1
}

define i64 @Adapter_TSIDWrite.308(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_74e2:
  %0 = call i64 @mcount(), !insn.addr !3057
  ret i64 0, !insn.addr !3058
}

define i8 @TunerRegRead(i8* %DevExt, i8 %DevCH, i8 %byReg, i8* %pBuffer, i8 %byCount, i32 %src) local_unnamed_addr {
dec_label_pc_74fa:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = ptrtoint i8* %DevExt to i64
  %2 = sext i8 %byReg to i32, !insn.addr !3059
  %3 = lshr i32 %2, ptrtoint (i8* @global_var_8 to i32), !insn.addr !3060
  %4 = trunc i32 %3 to i8, !insn.addr !3061
  %5 = add i64 %0, -16, !insn.addr !3061
  %6 = inttoptr i64 %5 to i8*, !insn.addr !3061
  store i8 %4, i8* %6, align 1, !insn.addr !3061
  %7 = add i64 %0, -15, !insn.addr !3062
  %8 = inttoptr i64 %7 to i8*, !insn.addr !3062
  store i8 %byReg, i8* %8, align 1, !insn.addr !3062
  %9 = zext i8 %DevCH to i64, !insn.addr !3063
  %10 = inttoptr i64 %5 to i64*, !insn.addr !3064
  %11 = call i64 @DemodRegWrite.428(i64 %1, i64 %9, i64 143, i64* %10, i64* bitcast (i32* @global_var_2 to i64*), i64 ptrtoint (i32* @global_var_1 to i64)), !insn.addr !3064
  %12 = trunc i64 %11 to i8, !insn.addr !3065
  %13 = icmp eq i8 %12, 0, !insn.addr !3065
  %14 = icmp eq i1 %13, false, !insn.addr !3066
  %15 = zext i1 %14 to i8, !insn.addr !3066
  ret i8 %15, !insn.addr !3067
}

define i64 @TunerRegRead.419(i64 %arg1, i64 %arg2, i64* %arg3, i64* %arg4, i64* %arg5, i64 %arg6) local_unnamed_addr {
dec_label_pc_752a:
  %0 = ptrtoint i64* %arg5 to i64
  %stack_var_-72 = alloca i64, align 8
  %1 = call i64 @mcount(), !insn.addr !3068
  %2 = call i64 @__readgsqword(i64 40), !insn.addr !3069
  %3 = trunc i64 %arg6 to i32, !insn.addr !3070
  %4 = icmp eq i32 %3, 0, !insn.addr !3070
  %5 = icmp eq i1 %4, false, !insn.addr !3071
  br i1 %5, label %dec_label_pc_75ec, label %dec_label_pc_756e, !insn.addr !3071

dec_label_pc_756e:                                ; preds = %dec_label_pc_752a
  store i64 -58, i64* %stack_var_-72, align 8, !insn.addr !3072
  %6 = ptrtoint i64* %stack_var_-72 to i64, !insn.addr !3073
  %7 = urem i64 %arg2, 256, !insn.addr !3074
  %8 = call i64 @TLIB_I2C_Write.278(i64 %arg1, i64 %7, i64 254, i64 %6, i64 ptrtoint (i32* @global_var_2 to i64), i64 %arg6), !insn.addr !3075
  store i64 -57, i64* %stack_var_-72, align 8, !insn.addr !3076
  %9 = call i64 @TLIB_I2C_Write.278(i64 %arg1, i64 %7, i64 254, i64 %6, i64 ptrtoint (i32* @global_var_1 to i64), i64 ptrtoint (i16* @global_var_4 to i64)), !insn.addr !3077
  %10 = urem i64 %0, 256, !insn.addr !3078
  %11 = inttoptr i64 %10 to i64*, !insn.addr !3079
  %12 = call i64 @TLIB_I2C_Read.262(i64 %arg1, i64 %7, i64 0, i64* %arg4, i64* %11, i64 ptrtoint (i32* @global_var_2 to i64)), !insn.addr !3079
  %13 = trunc i64 %12 to i8, !insn.addr !3080
  %14 = icmp eq i8 %13, 0, !insn.addr !3080
  %15 = icmp eq i1 %14, false, !insn.addr !3081
  %16 = zext i1 %15 to i64, !insn.addr !3081
  %17 = and i64 %12, -256, !insn.addr !3081
  %18 = or i64 %17, %16, !insn.addr !3081
  ret i64 %18, !insn.addr !3082

dec_label_pc_75ec:                                ; preds = %dec_label_pc_752a
  store i64 -63, i64* %stack_var_-72, align 8, !insn.addr !3083
  %19 = ptrtoint i64* %stack_var_-72 to i64, !insn.addr !3084
  %20 = and i64 %arg6, -256, !insn.addr !3085
  %21 = or i64 %20, ptrtoint (i16* @global_var_4 to i64), !insn.addr !3085
  %22 = urem i64 %arg2, 256, !insn.addr !3086
  %23 = call i64 @TLIB_I2C_Write.278(i64 %arg1, i64 %22, i64 254, i64 %19, i64 ptrtoint (i32* @global_var_1 to i64), i64 %21), !insn.addr !3087
  %24 = urem i64 %0, 256, !insn.addr !3088
  %25 = inttoptr i64 %24 to i64*, !insn.addr !3089
  %26 = call i64 @TLIB_I2C_Read.262(i64 %arg1, i64 %22, i64 0, i64* %arg4, i64* %25, i64 ptrtoint (i32* @global_var_2 to i64)), !insn.addr !3089
  ret i64 %26, !insn.addr !3090
}

define i8 @TunerRegWrite(i8* %DevExt, i8 %DevCH, i8* %pBuffer, i8 %byCount, i32 %src) local_unnamed_addr {
dec_label_pc_763f:
  %rax.0.reg2mem = alloca i64, !insn.addr !3091
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = call i1 @__decompiler_undefined_function_2()
  %2 = icmp eq i1 %1, false, !insn.addr !3091
  %3 = zext i1 %2 to i64, !insn.addr !3091
  %4 = add i64 %0, -40, !insn.addr !3092
  %5 = inttoptr i64 %4 to i64*, !insn.addr !3092
  %6 = load i64, i64* %5, align 8, !insn.addr !3092
  %7 = call i64 @__readgsqword(i64 40), !insn.addr !3093
  %8 = icmp eq i64 %6, %7, !insn.addr !3093
  store i64 %3, i64* %rax.0.reg2mem, !insn.addr !3094
  br i1 %8, label %dec_label_pc_765d, label %dec_label_pc_7658, !insn.addr !3094

dec_label_pc_7658:                                ; preds = %dec_label_pc_763f
  %9 = call i64 @__stack_chk_fail(), !insn.addr !3095
  store i64 %9, i64* %rax.0.reg2mem, !insn.addr !3095
  br label %dec_label_pc_765d, !insn.addr !3095

dec_label_pc_765d:                                ; preds = %dec_label_pc_7658, %dec_label_pc_763f
  %rax.0.reload = load i64, i64* %rax.0.reg2mem
  %10 = trunc i64 %rax.0.reload to i8, !insn.addr !3096
  ret i8 %10, !insn.addr !3096
}

define i64 @TunerRegWrite.487(i64 %arg1, i64 %arg2, i64* %arg3, i64* %arg4, i64 %arg5) local_unnamed_addr {
dec_label_pc_766f:
  %rax.2.reg2mem = alloca i64, !insn.addr !3097
  %rdx.1.reg2mem = alloca i64, !insn.addr !3097
  %rax.1.reg2mem = alloca i64, !insn.addr !3097
  %.reg2mem = alloca i8, !insn.addr !3097
  %rdx.0.reg2mem = alloca i64, !insn.addr !3097
  %rax.0.reg2mem = alloca i64, !insn.addr !3097
  %rsi = alloca i64, align 8
  %0 = ptrtoint i64* %arg4 to i64
  %1 = ptrtoint i64* %arg3 to i64
  store i64 %arg2, i64* %rsi, align 8
  %stack_var_-38 = alloca i64, align 8
  %stack_var_-39 = alloca i8, align 1
  %stack_var_-40 = alloca i64, align 8
  %2 = call i64 @mcount(), !insn.addr !3098
  %3 = call i64 @__readgsqword(i64 40), !insn.addr !3099
  %4 = trunc i64 %arg5 to i32, !insn.addr !3100
  %5 = icmp eq i32 %4, 0, !insn.addr !3100
  %6 = icmp eq i1 %5, false, !insn.addr !3101
  store i64 -2, i64* %stack_var_-40, align 8
  br i1 %6, label %dec_label_pc_76fd, label %dec_label_pc_769a, !insn.addr !3101

dec_label_pc_769a:                                ; preds = %dec_label_pc_766f
  %7 = trunc i64 %arg2 to i8
  store i8 -58, i8* %stack_var_-39, align 1, !insn.addr !3102
  %8 = trunc i64 %0 to i8, !insn.addr !3103
  %9 = icmp eq i8 %8, 0, !insn.addr !3103
  store i8 %7, i8* %.reg2mem, !insn.addr !3104
  br i1 %9, label %dec_label_pc_76d4, label %dec_label_pc_76af, !insn.addr !3104

dec_label_pc_76af:                                ; preds = %dec_label_pc_769a
  %10 = ptrtoint i64* %stack_var_-38 to i64, !insn.addr !3105
  %11 = add i64 %0, 255, !insn.addr !3106
  %12 = urem i64 %11, 256, !insn.addr !3107
  %13 = add i64 %1, ptrtoint (i32* @global_var_1 to i64), !insn.addr !3108
  %14 = add i64 %13, %12, !insn.addr !3108
  store i64 %10, i64* %rax.0.reg2mem, !insn.addr !3108
  store i64 %1, i64* %rdx.0.reg2mem, !insn.addr !3108
  br label %dec_label_pc_76c0, !insn.addr !3108

dec_label_pc_76c0:                                ; preds = %dec_label_pc_76c0, %dec_label_pc_76af
  %rdx.0.reload = load i64, i64* %rdx.0.reg2mem
  %rax.0.reload = load i64, i64* %rax.0.reg2mem
  %15 = inttoptr i64 %rdx.0.reload to i8*, !insn.addr !3109
  %16 = load i8, i8* %15, align 1, !insn.addr !3109
  %17 = inttoptr i64 %rax.0.reload to i8*, !insn.addr !3110
  store i8 %16, i8* %17, align 4, !insn.addr !3110
  %18 = add i64 %rdx.0.reload, 1, !insn.addr !3111
  %19 = add i64 %rax.0.reload, ptrtoint (i32* @global_var_1 to i64), !insn.addr !3112
  %20 = icmp eq i64 %18, %14, !insn.addr !3113
  %21 = icmp eq i1 %20, false, !insn.addr !3114
  store i64 %19, i64* %rax.0.reg2mem, !insn.addr !3114
  store i64 %18, i64* %rdx.0.reg2mem, !insn.addr !3114
  br i1 %21, label %dec_label_pc_76c0, label %dec_label_pc_76d4.loopexit, !insn.addr !3114

dec_label_pc_76d4.loopexit:                       ; preds = %dec_label_pc_76c0
  %.phi.trans.insert = bitcast i64* %rsi to i8*
  %.pre = load i8, i8* %.phi.trans.insert, align 8
  store i8 %.pre, i8* %.reg2mem
  br label %dec_label_pc_76d4

dec_label_pc_76d4:                                ; preds = %dec_label_pc_769a, %dec_label_pc_76d4.loopexit
  %.reload = load i8, i8* %.reg2mem, !insn.addr !3115
  %22 = add i64 %0, zext (i8 ptrtoint (i32* @global_var_2 to i8) to i64), !insn.addr !3116
  %23 = ptrtoint i64* %stack_var_-40 to i64, !insn.addr !3117
  %24 = zext i8 %.reload to i64, !insn.addr !3115
  %25 = urem i64 %22, 256, !insn.addr !3118
  %26 = call i64 @TLIB_I2C_Write.278(i64 %arg1, i64 %24, i64 0, i64 %23, i64 %25, i64 ptrtoint (i32* @global_var_2 to i64)), !insn.addr !3119
  ret i64 %26, !insn.addr !3120

dec_label_pc_76fd:                                ; preds = %dec_label_pc_766f
  %27 = trunc i64 %0 to i8, !insn.addr !3121
  %28 = icmp eq i8 %27, 0, !insn.addr !3121
  store i64 0, i64* %rax.2.reg2mem, !insn.addr !3122
  br i1 %28, label %dec_label_pc_7735, label %dec_label_pc_7710, !insn.addr !3122

dec_label_pc_7710:                                ; preds = %dec_label_pc_76fd
  %29 = ptrtoint i8* %stack_var_-39 to i64, !insn.addr !3123
  %30 = add i64 %0, 255, !insn.addr !3124
  %31 = urem i64 %30, 256, !insn.addr !3125
  %32 = add i64 %1, ptrtoint (i32* @global_var_1 to i64), !insn.addr !3126
  %33 = add i64 %32, %31, !insn.addr !3126
  store i64 %29, i64* %rax.1.reg2mem, !insn.addr !3126
  store i64 %1, i64* %rdx.1.reg2mem, !insn.addr !3126
  br label %dec_label_pc_7721, !insn.addr !3126

dec_label_pc_7721:                                ; preds = %dec_label_pc_7721, %dec_label_pc_7710
  %rdx.1.reload = load i64, i64* %rdx.1.reg2mem
  %rax.1.reload = load i64, i64* %rax.1.reg2mem
  %34 = inttoptr i64 %rdx.1.reload to i8*, !insn.addr !3127
  %35 = load i8, i8* %34, align 1, !insn.addr !3127
  %36 = inttoptr i64 %rax.1.reload to i8*, !insn.addr !3128
  store i8 %35, i8* %36, align 1, !insn.addr !3128
  %37 = add i64 %rdx.1.reload, 1, !insn.addr !3129
  %38 = add i64 %rax.1.reload, ptrtoint (i32* @global_var_1 to i64), !insn.addr !3130
  %39 = icmp eq i64 %37, %33, !insn.addr !3131
  %40 = icmp eq i1 %39, false, !insn.addr !3132
  store i64 %38, i64* %rax.1.reg2mem, !insn.addr !3132
  store i64 %37, i64* %rdx.1.reg2mem, !insn.addr !3132
  store i64 %38, i64* %rax.2.reg2mem, !insn.addr !3132
  br i1 %40, label %dec_label_pc_7721, label %dec_label_pc_7735, !insn.addr !3132

dec_label_pc_7735:                                ; preds = %dec_label_pc_7721, %dec_label_pc_76fd
  %rax.2.reload = load i64, i64* %rax.2.reg2mem
  ret i64 %rax.2.reload, !insn.addr !3133
}

define i8 @InitRFDevice(i8* %DevExt, i8 %DevCH, i8* %tuner_globe_data) local_unnamed_addr {
dec_label_pc_7749:
  %rax.0.reg2mem = alloca i64, !insn.addr !3134
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = call i64 @__decompiler_undefined_function_0()
  %2 = call i64 @__decompiler_undefined_function_0()
  %3 = sext i8 %DevCH to i64
  %4 = ptrtoint i8* %DevExt to i64
  %5 = urem i64 %1, 256, !insn.addr !3135
  %6 = call i64 @TLIB_I2C_Write.278(i64 %4, i64 %3, i64 0, i64 ptrtoint (i32* @global_var_2 to i64), i64 %5, i64 %0), !insn.addr !3136
  %7 = add i64 %2, -8, !insn.addr !3137
  %8 = inttoptr i64 %7 to i64*, !insn.addr !3137
  %9 = load i64, i64* %8, align 8, !insn.addr !3137
  %10 = call i64 @__readgsqword(i64 40), !insn.addr !3138
  %11 = icmp eq i64 %9, %10, !insn.addr !3138
  store i64 %6, i64* %rax.0.reg2mem, !insn.addr !3139
  br i1 %11, label %dec_label_pc_7777, label %dec_label_pc_7772, !insn.addr !3139

dec_label_pc_7772:                                ; preds = %dec_label_pc_7749
  %12 = call i64 @__stack_chk_fail(), !insn.addr !3140
  store i64 %12, i64* %rax.0.reg2mem, !insn.addr !3140
  br label %dec_label_pc_7777, !insn.addr !3140

dec_label_pc_7777:                                ; preds = %dec_label_pc_7772, %dec_label_pc_7749
  %rax.0.reload = load i64, i64* %rax.0.reg2mem
  %13 = trunc i64 %rax.0.reload to i8, !insn.addr !3141
  ret i8 %13, !insn.addr !3141
}

define i64 @InitRFDevice.581(i64 %arg1, i64 %arg2, i64 %arg3) local_unnamed_addr {
dec_label_pc_7779:
  %.pre-phi.reg2mem = alloca i64*, !insn.addr !3142
  %rbx.0.reg2mem = alloca i64, !insn.addr !3142
  %stack_var_-72 = alloca i8, align 1
  %stack_var_-78 = alloca i64, align 8
  %stack_var_-120 = alloca i32, align 4
  %0 = call i64 @mcount(), !insn.addr !3143
  %1 = urem i64 %arg2, 256
  store i32 sext (i8 ptrtoint (i32* @global_var_1 to i8) to i32), i32* %stack_var_-120, align 4, !insn.addr !3144
  %2 = add i64 %arg3, ptrtoint (i16* @global_var_4 to i64), !insn.addr !3145
  %3 = inttoptr i64 %2 to i32*, !insn.addr !3145
  %4 = load i32, i32* %3, align 4, !insn.addr !3145
  %5 = icmp eq i32 %4, 0, !insn.addr !3145
  %6 = icmp eq i1 %5, false, !insn.addr !3146
  br i1 %6, label %dec_label_pc_7779.dec_label_pc_7887_crit_edge, label %dec_label_pc_7844, !insn.addr !3146

dec_label_pc_7779.dec_label_pc_7887_crit_edge:    ; preds = %dec_label_pc_7779
  %.pre = bitcast i8* %stack_var_-72 to i64*, !insn.addr !3147
  store i64* %.pre, i64** %.pre-phi.reg2mem
  br label %dec_label_pc_7887

dec_label_pc_7844:                                ; preds = %dec_label_pc_7779
  %7 = ptrtoint i32* %stack_var_-120 to i64, !insn.addr !3148
  %8 = ptrtoint i64* %stack_var_-78 to i64, !insn.addr !3149
  %9 = bitcast i8* %stack_var_-72 to i64*
  store i64 %7, i64* %rbx.0.reg2mem, !insn.addr !3150
  br label %dec_label_pc_7854, !insn.addr !3150

dec_label_pc_7854:                                ; preds = %dec_label_pc_7854, %dec_label_pc_7844
  %rbx.0.reload = load i64, i64* %rbx.0.reg2mem
  %10 = inttoptr i64 %rbx.0.reload to i8*, !insn.addr !3151
  %11 = load i8, i8* %10, align 4, !insn.addr !3151
  store i8 %11, i8* %stack_var_-72, align 1, !insn.addr !3152
  %12 = call i64 @TunerRegWrite.487(i64 %arg1, i64 %1, i64* nonnull %9, i64* bitcast (i32* @global_var_2 to i64*), i64 0), !insn.addr !3153
  %13 = add i64 %rbx.0.reload, ptrtoint (i32* @global_var_2 to i64), !insn.addr !3154
  %14 = icmp eq i64 %13, %8, !insn.addr !3155
  %15 = icmp eq i1 %14, false, !insn.addr !3156
  store i64 %13, i64* %rbx.0.reg2mem, !insn.addr !3156
  store i64* %9, i64** %.pre-phi.reg2mem, !insn.addr !3156
  br i1 %15, label %dec_label_pc_7854, label %dec_label_pc_7887, !insn.addr !3156

dec_label_pc_7887:                                ; preds = %dec_label_pc_7854, %dec_label_pc_7779.dec_label_pc_7887_crit_edge
  %.pre-phi.reload = load i64*, i64** %.pre-phi.reg2mem
  store i8 ptrtoint (i8* @global_var_10 to i8), i8* %stack_var_-72, align 1, !insn.addr !3157
  %16 = call i64 @TunerRegWrite.487(i64 %arg1, i64 %1, i64* nonnull %.pre-phi.reload, i64* bitcast (i32* @global_var_2 to i64*), i64 0), !insn.addr !3147
  store i8 ptrtoint (i8* @global_var_10 to i8), i8* %stack_var_-72, align 1, !insn.addr !3158
  %17 = call i64 @TunerRegWrite.487(i64 %arg1, i64 %1, i64* nonnull %.pre-phi.reload, i64* bitcast (i32* @global_var_2 to i64*), i64 0), !insn.addr !3159
  ret i64 %17, !insn.addr !3160
}

define i8 @FC0012_RSSI_Calibration(i8* %DevExt, i8 %DevCH) local_unnamed_addr {
dec_label_pc_78e1:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = call i64 @__decompiler_undefined_function_0()
  %2 = call i64 @__decompiler_undefined_function_0()
  %3 = and i64 %1, 4294967295, !insn.addr !3161
  %4 = inttoptr i64 %2 to i64*, !insn.addr !3162
  %5 = call i64 @TunerRegWrite.487(i64 %0, i64 %3, i64* %4, i64* bitcast (i32* @global_var_2 to i64*), i64 0), !insn.addr !3162
  %6 = trunc i64 %5 to i8, !insn.addr !3163
  %7 = icmp eq i8 %6, 0, !insn.addr !3163
  %8 = icmp eq i1 %7, false, !insn.addr !3164
  %9 = zext i1 %8 to i8, !insn.addr !3164
  ret i8 %9, !insn.addr !3165
}

define i64 @FC0012_RSSI_Calibration.461(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_7911:
  %stack_var_-39 = alloca i8, align 1
  %stack_var_-40 = alloca i8, align 1
  %0 = call i64 @mcount(), !insn.addr !3166
  %1 = urem i64 %arg2, 256, !insn.addr !3167
  %2 = bitcast i8* %stack_var_-39 to i64*, !insn.addr !3168
  %3 = call i64 @TunerRegRead.419(i64 %arg1, i64 %1, i64* bitcast (i8** @global_var_9 to i64*), i64* nonnull %2, i64* bitcast (i32* @global_var_1 to i64*), i64 0), !insn.addr !3168
  store i8 ptrtoint (i8** @global_var_9 to i8), i8* %stack_var_-40, align 1, !insn.addr !3169
  %4 = load i8, i8* %stack_var_-39, align 1, !insn.addr !3170
  %5 = or i8 %4, ptrtoint (i8* @global_var_10 to i8), !insn.addr !3170
  store i8 %5, i8* %stack_var_-39, align 1, !insn.addr !3170
  %6 = bitcast i8* %stack_var_-40 to i64*, !insn.addr !3171
  %7 = call i64 @TunerRegWrite.487(i64 %arg1, i64 %1, i64* nonnull %6, i64* bitcast (i32* @global_var_2 to i64*), i64 0), !insn.addr !3171
  %8 = call i64 @TunerRegRead.419(i64 %arg1, i64 %1, i64* bitcast (i8* @global_var_6 to i64*), i64* nonnull %2, i64* bitcast (i32* @global_var_1 to i64*), i64 0), !insn.addr !3172
  store i8 ptrtoint (i8* @global_var_6 to i8), i8* %stack_var_-40, align 1, !insn.addr !3173
  %9 = load i8, i8* %stack_var_-39, align 1, !insn.addr !3174
  %10 = or i8 %9, ptrtoint (i32* @global_var_1 to i8), !insn.addr !3174
  store i8 %10, i8* %stack_var_-39, align 1, !insn.addr !3174
  %11 = call i64 @TunerRegWrite.487(i64 %arg1, i64 %1, i64* nonnull %6, i64* bitcast (i32* @global_var_2 to i64*), i64 0), !insn.addr !3175
  %12 = call i64 @TLIB_Delay.388(i64* bitcast (i32* @global_var_1 to i64*)), !insn.addr !3176
  %13 = call i64 @TunerRegRead.419(i64 %arg1, i64 %1, i64* bitcast (i8** @global_var_9 to i64*), i64* nonnull %2, i64* bitcast (i32* @global_var_1 to i64*), i64 0), !insn.addr !3177
  store i8 ptrtoint (i8** @global_var_9 to i8), i8* %stack_var_-40, align 1, !insn.addr !3178
  %14 = load i8, i8* %stack_var_-39, align 1, !insn.addr !3179
  %15 = and i8 %14, -17, !insn.addr !3179
  store i8 %15, i8* %stack_var_-39, align 1, !insn.addr !3179
  %16 = call i64 @TunerRegWrite.487(i64 %arg1, i64 %1, i64* nonnull %6, i64* bitcast (i32* @global_var_2 to i64*), i64 0), !insn.addr !3180
  ret i64 %16, !insn.addr !3181
}

define i8 @Adpater_SetFreqISDBT(i8* %DevExt, i8 %DevCH, i64 %Frequency, i8 %ucRs) local_unnamed_addr {
dec_label_pc_7a40:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = call i64 @__decompiler_undefined_function_0()
  %2 = call i64 @__decompiler_undefined_function_0()
  %3 = add i64 %1, -32, !insn.addr !3182
  %4 = and i64 %2, 4294967295, !insn.addr !3183
  %5 = inttoptr i64 %3 to i64*, !insn.addr !3184
  %6 = call i64 @TunerRegWrite.487(i64 %0, i64 %4, i64* %5, i64* bitcast (i32* @global_var_2 to i64*), i64 0), !insn.addr !3184
  %7 = trunc i64 %6 to i8, !insn.addr !3185
  %8 = icmp eq i8 %7, 0, !insn.addr !3185
  %9 = icmp eq i1 %8, false, !insn.addr !3186
  %10 = zext i1 %9 to i8, !insn.addr !3186
  ret i8 %10, !insn.addr !3187
}

define i64 @Adpater_SetFreqISDBT.502(i64 %arg1, i64 %arg2, i64 %arg3) local_unnamed_addr {
dec_label_pc_7a70:
  %r12.0.reg2mem = alloca i64, !insn.addr !3188
  %rbx.0.reg2mem = alloca i64, !insn.addr !3188
  %rcx.0.reg2mem = alloca i64, !insn.addr !3188
  %stack_var_-82.0.reg2mem = alloca i8, !insn.addr !3188
  %stack_var_-103 = alloca i8, align 1
  %stack_var_-104 = alloca i32, align 4
  %stack_var_-87 = alloca i8, align 1
  %0 = call i64 @mcount(), !insn.addr !3189
  %1 = call i64 @__readgsqword(i64 40), !insn.addr !3190
  %2 = urem i64 %arg2, 256, !insn.addr !3191
  %3 = call i64 @FC0012_RSSI_Calibration.461(i64 %arg1, i64 %2), !insn.addr !3192
  %4 = mul i64 %arg3, shl (i64 add (i64 ptrtoint (i32* @global_var_2 to i64), i64 1), i64 ptrtoint (i8* @global_var_5 to i64)), !insn.addr !3193
  %5 = icmp ult i64 %4, 3560000
  store i8 0, i8* %stack_var_-82.0.reg2mem, !insn.addr !3194
  store i64 96, i64* %rcx.0.reg2mem, !insn.addr !3194
  br i1 %5, label %dec_label_pc_7bd3, label %dec_label_pc_7ac9, !insn.addr !3194

dec_label_pc_7ac9:                                ; preds = %dec_label_pc_7a70
  %6 = shl i64 %arg3, ptrtoint (i8* @global_var_6 to i64), !insn.addr !3195
  %7 = icmp ult i64 %6, 3560000
  store i8 ptrtoint (i32* @global_var_2 to i8), i8* %stack_var_-82.0.reg2mem, !insn.addr !3196
  store i64 64, i64* %rcx.0.reg2mem, !insn.addr !3196
  br i1 %7, label %dec_label_pc_7bd3, label %dec_label_pc_7aea, !insn.addr !3196

dec_label_pc_7aea:                                ; preds = %dec_label_pc_7ac9
  %8 = mul i64 %arg3, shl (i64 add (i64 ptrtoint (i32* @global_var_2 to i64), i64 1), i64 ptrtoint (i16* @global_var_4 to i64)), !insn.addr !3197
  %9 = icmp ult i64 %8, 3560000
  store i8 0, i8* %stack_var_-82.0.reg2mem, !insn.addr !3198
  store i64 48, i64* %rcx.0.reg2mem, !insn.addr !3198
  br i1 %9, label %dec_label_pc_7bd3, label %dec_label_pc_7b0c, !insn.addr !3198

dec_label_pc_7b0c:                                ; preds = %dec_label_pc_7aea
  %10 = shl i64 %arg3, ptrtoint (i8* @global_var_5 to i64), !insn.addr !3199
  %11 = icmp ult i64 %10, 3560000
  store i8 ptrtoint (i32* @global_var_2 to i8), i8* %stack_var_-82.0.reg2mem, !insn.addr !3200
  store i64 ptrtoint (i32** @global_var_20 to i64), i64* %rcx.0.reg2mem, !insn.addr !3200
  br i1 %11, label %dec_label_pc_7bd3, label %dec_label_pc_7b2d, !insn.addr !3200

dec_label_pc_7b2d:                                ; preds = %dec_label_pc_7b0c
  %12 = mul i64 %arg3, shl (i64 add (i64 ptrtoint (i32* @global_var_2 to i64), i64 1), i64 ptrtoint (i8** @global_var_3 to i64)), !insn.addr !3201
  %13 = icmp ult i64 %12, 3560000
  store i8 0, i8* %stack_var_-82.0.reg2mem, !insn.addr !3202
  store i64 ptrtoint (i32** @global_var_18 to i64), i64* %rcx.0.reg2mem, !insn.addr !3202
  br i1 %13, label %dec_label_pc_7bd3, label %dec_label_pc_7b4f, !insn.addr !3202

dec_label_pc_7b4f:                                ; preds = %dec_label_pc_7b2d
  %14 = shl i64 %arg3, ptrtoint (i16* @global_var_4 to i64), !insn.addr !3203
  %15 = icmp ult i64 %14, 3560000
  store i8 ptrtoint (i32* @global_var_2 to i8), i8* %stack_var_-82.0.reg2mem, !insn.addr !3204
  store i64 ptrtoint (i8* @global_var_10 to i64), i64* %rcx.0.reg2mem, !insn.addr !3204
  br i1 %15, label %dec_label_pc_7bd3, label %dec_label_pc_7b6d, !insn.addr !3204

dec_label_pc_7b6d:                                ; preds = %dec_label_pc_7b4f
  %16 = mul i64 %arg3, shl (i64 add (i64 ptrtoint (i32* @global_var_2 to i64), i64 1), i64 ptrtoint (i32* @global_var_2 to i64)), !insn.addr !3205
  %17 = icmp ult i64 %16, 3560000
  store i8 0, i8* %stack_var_-82.0.reg2mem, !insn.addr !3206
  store i64 ptrtoint ([4 x i8]* @global_var_c to i64), i64* %rcx.0.reg2mem, !insn.addr !3206
  br i1 %17, label %dec_label_pc_7bd3, label %dec_label_pc_7b8c, !insn.addr !3206

dec_label_pc_7b8c:                                ; preds = %dec_label_pc_7b6d
  %18 = mul i64 %arg3, ptrtoint (i8* @global_var_8 to i64), !insn.addr !3207
  %19 = icmp ult i64 %18, 3560000
  store i8 ptrtoint (i32* @global_var_2 to i8), i8* %stack_var_-82.0.reg2mem, !insn.addr !3208
  store i64 ptrtoint (i8* @global_var_8 to i64), i64* %rcx.0.reg2mem, !insn.addr !3208
  br i1 %19, label %dec_label_pc_7bd3, label %dec_label_pc_7bab, !insn.addr !3208

dec_label_pc_7bab:                                ; preds = %dec_label_pc_7b8c
  %20 = mul i64 %arg3, ptrtoint (i8* @global_var_6 to i64), !insn.addr !3209
  %21 = icmp ult i64 %20, 3560000
  %. = select i1 %21, i8 0, i8 ptrtoint (i32* @global_var_2 to i8)
  %.7 = select i1 %21, i64 ptrtoint (i8* @global_var_6 to i64), i64 ptrtoint (i16* @global_var_4 to i64)
  store i8 %., i8* %stack_var_-82.0.reg2mem, !insn.addr !3210
  store i64 %.7, i64* %rcx.0.reg2mem, !insn.addr !3210
  br label %dec_label_pc_7bd3, !insn.addr !3210

dec_label_pc_7bd3:                                ; preds = %dec_label_pc_7bab, %dec_label_pc_7b8c, %dec_label_pc_7b6d, %dec_label_pc_7b4f, %dec_label_pc_7b2d, %dec_label_pc_7b0c, %dec_label_pc_7aea, %dec_label_pc_7ac9, %dec_label_pc_7a70
  %rcx.0.reload = load i64, i64* %rcx.0.reg2mem
  %stack_var_-82.0.reload = load i8, i8* %stack_var_-82.0.reg2mem
  %22 = urem i64 %rcx.0.reload, 256, !insn.addr !3211
  %sext = mul i64 %arg3, 4294967296
  %23 = sdiv i64 %sext, 4294967296, !insn.addr !3211
  %24 = mul nsw i64 %22, %23, !insn.addr !3211
  %25 = and i64 %24, 4294967295, !insn.addr !3211
  %26 = trunc i64 %24 to i32, !insn.addr !3212
  %27 = mul nuw i64 %25, 3909374677, !insn.addr !3213
  %28 = lshr i64 %27, ptrtoint (i32** @global_var_20 to i64), !insn.addr !3213
  %29 = trunc i64 %28 to i32, !insn.addr !3213
  %30 = lshr i32 %29, ptrtoint (i16** @global_var_e to i32), !insn.addr !3214
  %31 = urem i32 %30, 65536, !insn.addr !3215
  %32 = mul nsw i32 %31, -18000, !insn.addr !3215
  %33 = add i32 %32, %26, !insn.addr !3216
  %34 = add i32 %30, ptrtoint (i32* @global_var_1 to i32), !insn.addr !3217
  %35 = icmp ult i32 %33, 9000
  %36 = select i1 %35, i32 %30, i32 %34, !insn.addr !3218
  %37 = trunc i32 %36 to i16, !insn.addr !3219
  %38 = lshr i16 %37, ptrtoint (i8** @global_var_3 to i16), !insn.addr !3219
  %39 = trunc i16 %38 to i8, !insn.addr !3219
  %40 = mul i8 %39, ptrtoint (i8* @global_var_8 to i8), !insn.addr !3220
  %41 = trunc i32 %36 to i8, !insn.addr !3221
  %42 = sub i8 %41, %40, !insn.addr !3221
  %43 = icmp ugt i8 %42, ptrtoint (i32* @global_var_1 to i8)
  %44 = add i8 %42, ptrtoint (i8* @global_var_8 to i8)
  %storemerge = select i1 %43, i8 %42, i8 %44
  store i8 %storemerge, i8* %stack_var_-87, align 1
  %45 = ptrtoint i8* %stack_var_-87 to i64, !insn.addr !3222
  %46 = bitcast i32* %stack_var_-104 to i64*
  store i64 %45, i64* %rbx.0.reg2mem, !insn.addr !3223
  store i64 ptrtoint (i32* @global_var_1 to i64), i64* %r12.0.reg2mem, !insn.addr !3223
  br label %dec_label_pc_7c87, !insn.addr !3223

dec_label_pc_7c87:                                ; preds = %dec_label_pc_7c87, %dec_label_pc_7bd3
  %r12.0.reload = load i64, i64* %r12.0.reg2mem
  %rbx.0.reload = load i64, i64* %rbx.0.reg2mem
  %47 = trunc i64 %r12.0.reload to i32, !insn.addr !3224
  %sext4 = mul i32 %47, 16777216
  %48 = sdiv i32 %sext4, 16777216, !insn.addr !3224
  store i32 %48, i32* %stack_var_-104, align 4, !insn.addr !3224
  %49 = inttoptr i64 %rbx.0.reload to i8*, !insn.addr !3225
  %50 = load i8, i8* %49, align 1, !insn.addr !3225
  store i8 %50, i8* %stack_var_-103, align 1, !insn.addr !3226
  %51 = call i64 @TunerRegWrite.487(i64 %arg1, i64 %2, i64* nonnull %46, i64* bitcast (i32* @global_var_2 to i64*), i64 0), !insn.addr !3227
  %52 = add i64 %r12.0.reload, zext (i32 ptrtoint (i32* @global_var_1 to i32) to i64), !insn.addr !3228
  %53 = and i64 %52, 4294967295, !insn.addr !3228
  %54 = add i64 %rbx.0.reload, ptrtoint (i32* @global_var_1 to i64), !insn.addr !3229
  %55 = trunc i64 %52 to i32, !insn.addr !3230
  %56 = icmp eq i32 %55, ptrtoint (i8** @global_var_7 to i32), !insn.addr !3230
  %57 = icmp eq i1 %56, false, !insn.addr !3231
  store i64 %54, i64* %rbx.0.reg2mem, !insn.addr !3231
  store i64 %53, i64* %r12.0.reg2mem, !insn.addr !3231
  br i1 %57, label %dec_label_pc_7c87, label %dec_label_pc_7cc1, !insn.addr !3231

dec_label_pc_7cc1:                                ; preds = %dec_label_pc_7c87
  %58 = or i8 %stack_var_-82.0.reload, ptrtoint (i8* @global_var_8 to i8)
  %59 = icmp ult i32 %26, 3060000
  %stack_var_-82.1 = select i1 %59, i8 %stack_var_-82.0.reload, i8 %58
  store i32 sext (i8 ptrtoint (i16** @global_var_e to i8) to i32), i32* %stack_var_-104, align 4, !insn.addr !3232
  %60 = call i64 @TunerRegWrite.487(i64 %arg1, i64 %2, i64* nonnull %46, i64* bitcast (i32* @global_var_2 to i64*), i64 0), !insn.addr !3233
  %61 = call i64 @TunerRegWrite.487(i64 %arg1, i64 %2, i64* nonnull %46, i64* bitcast (i32* @global_var_2 to i64*), i64 0), !insn.addr !3234
  %62 = call i64 @TLIB_Delay.388(i64* bitcast (i32* @global_var_1 to i64*)), !insn.addr !3235
  store i8 0, i8* %stack_var_-103, align 1, !insn.addr !3236
  %63 = call i64 @TunerRegWrite.487(i64 %arg1, i64 %2, i64* nonnull %46, i64* bitcast (i32* @global_var_2 to i64*), i64 0), !insn.addr !3237
  %64 = bitcast i8* %stack_var_-103 to i64*, !insn.addr !3238
  %65 = call i64 @TunerRegRead.419(i64 %arg1, i64 %2, i64* bitcast (i16** @global_var_e to i64*), i64* nonnull %64, i64* bitcast (i32* @global_var_1 to i64*), i64 0), !insn.addr !3238
  %66 = load i8, i8* %stack_var_-103, align 1, !insn.addr !3239
  %67 = urem i8 %66, 64
  %68 = or i1 %59, icmp eq (i8 ptrtoint (i32* @global_var_1 to i8), i8 0), !insn.addr !3240
  br i1 %68, label %dec_label_pc_7e11, label %dec_label_pc_7d7a, !insn.addr !3241

dec_label_pc_7d7a:                                ; preds = %dec_label_pc_7cc1
  %69 = icmp ult i8 %67, 61
  br i1 %69, label %dec_label_pc_7ea3, label %dec_label_pc_7d82, !insn.addr !3242

dec_label_pc_7d82:                                ; preds = %dec_label_pc_7d7a
  store i32 sext (i8 ptrtoint (i8* @global_var_6 to i8) to i32), i32* %stack_var_-104, align 4, !insn.addr !3243
  %70 = and i8 %stack_var_-82.1, 119, !insn.addr !3244
  %71 = or i8 %70, -128, !insn.addr !3245
  store i8 %71, i8* %stack_var_-103, align 1, !insn.addr !3245
  %72 = call i64 @TunerRegWrite.487(i64 %arg1, i64 %2, i64* nonnull %46, i64* bitcast (i32* @global_var_2 to i64*), i64 0), !insn.addr !3246
  store i32 sext (i8 ptrtoint (i16** @global_var_e to i8) to i32), i32* %stack_var_-104, align 4, !insn.addr !3247
  store i8 -128, i8* %stack_var_-103, align 1, !insn.addr !3248
  %73 = call i64 @TunerRegWrite.487(i64 %arg1, i64 %2, i64* nonnull %46, i64* bitcast (i32* @global_var_2 to i64*), i64 0), !insn.addr !3249
  store i8 0, i8* %stack_var_-103, align 1, !insn.addr !3250
  %74 = call i64 @TunerRegWrite.487(i64 %arg1, i64 %2, i64* nonnull %46, i64* bitcast (i32* @global_var_2 to i64*), i64 0), !insn.addr !3251
  %75 = call i64 @TLIB_Delay.388(i64* bitcast (i32* @global_var_1 to i64*)), !insn.addr !3252
  br label %dec_label_pc_7ea3, !insn.addr !3253

dec_label_pc_7e11:                                ; preds = %dec_label_pc_7cc1
  %76 = icmp ult i8 %67, ptrtoint (i32* @global_var_1 to i8), !insn.addr !3254
  %77 = icmp eq i8 %67, 1, !insn.addr !3254
  %78 = or i1 %76, %77, !insn.addr !3255
  br i1 %78, label %dec_label_pc_7e19, label %dec_label_pc_7ea3, !insn.addr !3255

dec_label_pc_7e19:                                ; preds = %dec_label_pc_7e11
  store i32 sext (i8 ptrtoint (i8* @global_var_6 to i8) to i32), i32* %stack_var_-104, align 4, !insn.addr !3256
  %79 = or i8 %stack_var_-82.1, or (i8 ptrtoint (i8* @global_var_8 to i8), i8 -128), !insn.addr !3257
  store i8 %79, i8* %stack_var_-103, align 1, !insn.addr !3257
  %80 = call i64 @TunerRegWrite.487(i64 %arg1, i64 %2, i64* nonnull %46, i64* bitcast (i32* @global_var_2 to i64*), i64 0), !insn.addr !3258
  store i32 sext (i8 ptrtoint (i16** @global_var_e to i8) to i32), i32* %stack_var_-104, align 4, !insn.addr !3259
  store i8 -128, i8* %stack_var_-103, align 1, !insn.addr !3260
  %81 = call i64 @TunerRegWrite.487(i64 %arg1, i64 %2, i64* nonnull %46, i64* bitcast (i32* @global_var_2 to i64*), i64 0), !insn.addr !3261
  store i8 0, i8* %stack_var_-103, align 1, !insn.addr !3262
  %82 = call i64 @TunerRegWrite.487(i64 %arg1, i64 %2, i64* nonnull %46, i64* bitcast (i32* @global_var_2 to i64*), i64 0), !insn.addr !3263
  %83 = call i64 @TLIB_Delay.388(i64* bitcast (i32* @global_var_1 to i64*)), !insn.addr !3264
  br label %dec_label_pc_7ea3, !insn.addr !3264

dec_label_pc_7ea3:                                ; preds = %dec_label_pc_7e11, %dec_label_pc_7e19, %dec_label_pc_7d82, %dec_label_pc_7d7a
  %84 = ptrtoint i32* %stack_var_-104 to i64, !insn.addr !3265
  %85 = call i64 @DemodRegRead.231(i64 %arg1, i64 %2, i64 ptrtoint (i8** @global_var_1e to i64), i64 %84, i64* bitcast (i32* @global_var_1 to i64*), i64* null), !insn.addr !3266
  %86 = icmp ult i64 %arg3, 261000
  br i1 %86, label %dec_label_pc_7ed0, label %dec_label_pc_7f04, !insn.addr !3267

dec_label_pc_7ed0:                                ; preds = %dec_label_pc_7ea3
  %87 = load i32, i32* %stack_var_-104, align 4
  %88 = and i32 %87, 207
  %89 = or i32 %88, sext (i8 ptrtoint (i32** @global_var_20 to i8) to i32), !insn.addr !3268
  %sext5 = mul i32 %89, 16777216
  %90 = sdiv i32 %sext5, 16777216, !insn.addr !3268
  store i32 %90, i32* %stack_var_-104, align 4, !insn.addr !3268
  %91 = call i64 @DemodRegWrite.428(i64 %arg1, i64 %2, i64 ptrtoint (i8** @global_var_1e to i64), i64* nonnull %46, i64* bitcast (i32* @global_var_1 to i64*), i64 0), !insn.addr !3269
  %92 = trunc i64 %91 to i8, !insn.addr !3270
  %93 = icmp eq i8 %92, 0, !insn.addr !3270
  %94 = icmp eq i1 %93, false, !insn.addr !3271
  %95 = zext i1 %94 to i64, !insn.addr !3271
  %96 = and i64 %91, -256, !insn.addr !3271
  %97 = or i64 %96, %95, !insn.addr !3271
  ret i64 %97, !insn.addr !3272

dec_label_pc_7f04:                                ; preds = %dec_label_pc_7ea3
  ret i64 %85, !insn.addr !3273
}

define i8 @Adpater_SetFreqISDBS(i8* %hTuner, i8 %DevCH, i64 %freq, i8 %ucRs) local_unnamed_addr {
dec_label_pc_7f27:
  %rax.0.reg2mem = alloca i64, !insn.addr !3274
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = mul i64 %0, ptrtoint (i8* @global_var_8 to i64), !insn.addr !3274
  %2 = add i64 %0, -339700465, !insn.addr !3274
  %3 = add i64 %2, %1, !insn.addr !3274
  %4 = inttoptr i64 %3 to i32*, !insn.addr !3274
  %5 = load i32, i32* %4, align 4, !insn.addr !3274
  %6 = add i32 %5, ptrtoint (i32* @global_var_1 to i32), !insn.addr !3274
  store i32 %6, i32* %4, align 4, !insn.addr !3274
  %7 = add i64 %0, 184, !insn.addr !3275
  %8 = and i64 %7, 4294967295, !insn.addr !3275
  %9 = add nsw i64 %8, -117, !insn.addr !3276
  %10 = inttoptr i64 %9 to i8*, !insn.addr !3276
  %11 = load i8, i8* %10, align 1, !insn.addr !3276
  %12 = add i8 %11, %ucRs, !insn.addr !3276
  %13 = icmp ult i8 %12, %11, !insn.addr !3276
  store i8 %12, i8* %10, align 1, !insn.addr !3276
  %14 = zext i1 %13 to i64, !insn.addr !3277
  %15 = add i64 %0, 221, !insn.addr !3277
  %16 = add i64 %15, %14, !insn.addr !3277
  %17 = urem i64 %16, 256, !insn.addr !3277
  %18 = and i64 %7, 4294967040, !insn.addr !3277
  %19 = or i64 %17, %18, !insn.addr !3277
  %20 = inttoptr i64 %19 to i8*, !insn.addr !3278
  %21 = load i8, i8* %20, align 1, !insn.addr !3278
  %22 = icmp eq i8 %21, 0, !insn.addr !3279
  store i64 %19, i64* %rax.0.reg2mem, !insn.addr !3280
  br i1 %22, label %dec_label_pc_7f48, label %dec_label_pc_7f43, !insn.addr !3280

dec_label_pc_7f43:                                ; preds = %dec_label_pc_7f27
  %23 = call i64 @__stack_chk_fail(), !insn.addr !3281
  store i64 %23, i64* %rax.0.reg2mem, !insn.addr !3281
  br label %dec_label_pc_7f48, !insn.addr !3281

dec_label_pc_7f48:                                ; preds = %dec_label_pc_7f43, %dec_label_pc_7f27
  %rax.0.reload = load i64, i64* %rax.0.reg2mem
  %24 = trunc i64 %rax.0.reload to i8, !insn.addr !3282
  ret i8 %24, !insn.addr !3282
}

define i64 @Adpater_SetFreqISDBS.311(i64 %arg1, i64 %arg2, i64 %arg3) local_unnamed_addr {
dec_label_pc_7f57:
  %rdx.1.reg2mem = alloca i64, !insn.addr !3283
  %rax.2.reg2mem = alloca i64, !insn.addr !3283
  %rdx.0.reg2mem = alloca i64, !insn.addr !3283
  %rax.1.reg2mem = alloca i64, !insn.addr !3283
  %rbx.1.reg2mem = alloca i64, !insn.addr !3283
  %rbx.0.reg2mem = alloca i64, !insn.addr !3283
  %rax.0.reg2mem = alloca i64, !insn.addr !3283
  %stack_var_-67 = alloca i64, align 8
  %stack_var_-71 = alloca i64, align 8
  %stack_var_-72 = alloca i64, align 8
  %0 = call i64 @mcount(), !insn.addr !3284
  %1 = call i64 @__readgsqword(i64 40), !insn.addr !3285
  %2 = load i32, i32* @global_var_355a0, align 4, !insn.addr !3286
  %3 = zext i32 %2 to i64, !insn.addr !3286
  %4 = icmp eq i64 %3, %arg3, !insn.addr !3287
  store i64 0, i64* %rax.0.reg2mem, !insn.addr !3288
  store i64 ptrtoint (i32* @global_var_1 to i64), i64* %rbx.0.reg2mem, !insn.addr !3288
  store i64 0, i64* %rbx.1.reg2mem, !insn.addr !3288
  br i1 %4, label %dec_label_pc_7faf, label %dec_label_pc_7f92, !insn.addr !3288

dec_label_pc_7f92:                                ; preds = %dec_label_pc_7f57, %dec_label_pc_7f99
  %rbx.0.reload = load i64, i64* %rbx.0.reg2mem
  %rax.0.reload = load i64, i64* %rax.0.reg2mem
  %5 = inttoptr i64 %rax.0.reload to i32*, !insn.addr !3289
  %6 = load i32, i32* %5, align 4, !insn.addr !3289
  %7 = zext i32 %6 to i64, !insn.addr !3289
  %8 = icmp eq i64 %7, %arg3, !insn.addr !3290
  store i64 %rbx.0.reload, i64* %rbx.1.reg2mem, !insn.addr !3291
  br i1 %8, label %dec_label_pc_7faf, label %dec_label_pc_7f99, !insn.addr !3291

dec_label_pc_7f99:                                ; preds = %dec_label_pc_7f92
  %9 = add i64 %rbx.0.reload, zext (i32 ptrtoint (i32* @global_var_1 to i32) to i64), !insn.addr !3292
  %10 = and i64 %9, 4294967295, !insn.addr !3292
  %11 = add i64 %rax.0.reload, ptrtoint ([4 x i8]* @global_var_c to i64), !insn.addr !3293
  %12 = trunc i64 %9 to i32, !insn.addr !3294
  %13 = icmp eq i32 %12, ptrtoint (i32** @global_var_18 to i32), !insn.addr !3294
  %14 = icmp eq i1 %13, false, !insn.addr !3295
  store i64 %11, i64* %rax.0.reg2mem, !insn.addr !3295
  store i64 %10, i64* %rbx.0.reg2mem, !insn.addr !3295
  br i1 %14, label %dec_label_pc_7f92, label %dec_label_pc_7fa5, !insn.addr !3295

dec_label_pc_7fa5:                                ; preds = %dec_label_pc_7f99
  ret i64 %11, !insn.addr !3296

dec_label_pc_7faf:                                ; preds = %dec_label_pc_7f92, %dec_label_pc_7f57
  %rbx.1.reload = load i64, i64* %rbx.1.reg2mem
  %15 = icmp ne i64 %arg3, 11727480, !insn.addr !3297
  %16 = icmp eq i64 %arg3, 12731000, !insn.addr !3298
  %17 = icmp eq i1 %16, false, !insn.addr !3299
  %or.cond = icmp eq i1 %15, %17
  br i1 %or.cond, label %dec_label_pc_801d, label %dec_label_pc_7fc1, !insn.addr !3300

dec_label_pc_7fc1:                                ; preds = %dec_label_pc_7faf
  %18 = trunc i64 %arg2 to i8, !insn.addr !3301
  %19 = icmp eq i8 %18, 0, !insn.addr !3301
  %20 = icmp eq i1 %19, false, !insn.addr !3302
  br i1 %20, label %dec_label_pc_801d, label %dec_label_pc_7fc6, !insn.addr !3302

dec_label_pc_7fc6:                                ; preds = %dec_label_pc_7fc1
  store i64 -64, i64* %stack_var_-72, align 8, !insn.addr !3303
  %sext = mul i64 %rbx.1.reload, 4294967296
  %21 = sdiv i64 %sext, 4294967296, !insn.addr !3304
  %22 = mul i64 %21, mul (i64 add (i64 ptrtoint (i32* @global_var_2 to i64), i64 1), i64 ptrtoint (i16* @global_var_4 to i64)), !insn.addr !3305
  %23 = ptrtoint i64* %stack_var_-71 to i64, !insn.addr !3306
  %24 = ptrtoint i64* %stack_var_-67 to i64, !insn.addr !3307
  store i64 %23, i64* %rax.1.reg2mem, !insn.addr !3307
  store i64 %22, i64* %rdx.0.reg2mem, !insn.addr !3307
  br label %dec_label_pc_7fe5, !insn.addr !3307

dec_label_pc_7fe5:                                ; preds = %dec_label_pc_7fe5, %dec_label_pc_7fc6
  %rdx.0.reload = load i64, i64* %rdx.0.reg2mem
  %rax.1.reload = load i64, i64* %rax.1.reg2mem
  %25 = inttoptr i64 %rdx.0.reload to i8*, !insn.addr !3308
  %26 = load i8, i8* %25, align 1, !insn.addr !3308
  %27 = inttoptr i64 %rax.1.reload to i8*, !insn.addr !3309
  store i8 %26, i8* %27, align 4, !insn.addr !3309
  %28 = add i64 %rdx.0.reload, ptrtoint (i32* @global_var_1 to i64), !insn.addr !3310
  %29 = add i64 %rax.1.reload, ptrtoint (i32* @global_var_1 to i64), !insn.addr !3311
  %30 = icmp eq i64 %29, %24, !insn.addr !3312
  %31 = icmp eq i1 %30, false, !insn.addr !3313
  store i64 %29, i64* %rax.1.reg2mem, !insn.addr !3313
  store i64 %28, i64* %rdx.0.reg2mem, !insn.addr !3313
  br i1 %31, label %dec_label_pc_7fe5, label %dec_label_pc_7ff7, !insn.addr !3313

dec_label_pc_7ff7:                                ; preds = %dec_label_pc_7fe5
  %32 = call i64 @TunerRegWrite.487(i64 %arg1, i64 0, i64* nonnull %stack_var_-72, i64* bitcast (i8* @global_var_5 to i64*), i64 ptrtoint (i32* @global_var_1 to i64)), !insn.addr !3314
  %33 = trunc i64 %32 to i8, !insn.addr !3315
  %34 = icmp eq i8 %33, 0, !insn.addr !3315
  %35 = icmp eq i1 %34, false, !insn.addr !3316
  %36 = zext i1 %35 to i64, !insn.addr !3316
  %37 = and i64 %32, -256, !insn.addr !3316
  %38 = or i64 %37, %36, !insn.addr !3316
  ret i64 %38, !insn.addr !3317

dec_label_pc_801d:                                ; preds = %dec_label_pc_7faf, %dec_label_pc_7fc1
  store i64 -64, i64* %stack_var_-72, align 8, !insn.addr !3318
  %sext1 = mul i64 %rbx.1.reload, 4294967296
  %39 = sdiv i64 %sext1, 4294967296, !insn.addr !3319
  %40 = mul i64 %39, mul (i64 add (i64 ptrtoint (i32* @global_var_2 to i64), i64 1), i64 ptrtoint (i16* @global_var_4 to i64)), !insn.addr !3320
  %41 = ptrtoint i64* %stack_var_-71 to i64, !insn.addr !3321
  %42 = ptrtoint i64* %stack_var_-67 to i64, !insn.addr !3322
  store i64 %41, i64* %rax.2.reg2mem, !insn.addr !3322
  store i64 %40, i64* %rdx.1.reg2mem, !insn.addr !3322
  br label %dec_label_pc_803c, !insn.addr !3322

dec_label_pc_803c:                                ; preds = %dec_label_pc_803c, %dec_label_pc_801d
  %rdx.1.reload = load i64, i64* %rdx.1.reg2mem
  %rax.2.reload = load i64, i64* %rax.2.reg2mem
  %43 = inttoptr i64 %rdx.1.reload to i8*, !insn.addr !3323
  %44 = load i8, i8* %43, align 1, !insn.addr !3323
  %45 = inttoptr i64 %rax.2.reload to i8*, !insn.addr !3324
  store i8 %44, i8* %45, align 4, !insn.addr !3324
  %46 = add i64 %rdx.1.reload, ptrtoint (i32* @global_var_1 to i64), !insn.addr !3325
  %47 = add i64 %rax.2.reload, ptrtoint (i32* @global_var_1 to i64), !insn.addr !3326
  %48 = icmp eq i64 %47, %42, !insn.addr !3327
  %49 = icmp eq i1 %48, false, !insn.addr !3328
  store i64 %47, i64* %rax.2.reg2mem, !insn.addr !3328
  store i64 %46, i64* %rdx.1.reg2mem, !insn.addr !3328
  br i1 %49, label %dec_label_pc_803c, label %dec_label_pc_804e, !insn.addr !3328

dec_label_pc_804e:                                ; preds = %dec_label_pc_803c
  %50 = urem i64 %arg2, 256, !insn.addr !3329
  %51 = call i64 @TunerRegWrite.487(i64 %arg1, i64 %50, i64* nonnull %stack_var_-72, i64* bitcast (i8* @global_var_5 to i64*), i64 ptrtoint (i32* @global_var_1 to i64)), !insn.addr !3330
  %52 = mul i64 %39, ptrtoint (i32* @global_var_2 to i64), !insn.addr !3331
  %53 = add i64 %39, ptrtoint (i32* @global_var_1 to i64), !insn.addr !3331
  %54 = add i64 %53, %52, !insn.addr !3331
  %55 = mul i64 %54, ptrtoint (i16* @global_var_4 to i64), !insn.addr !3332
  %56 = inttoptr i64 %55 to i8*, !insn.addr !3332
  %57 = load i8, i8* %56, align 2, !insn.addr !3332
  %58 = sext i8 %57 to i64, !insn.addr !3333
  store i64 %58, i64* %stack_var_-71, align 8, !insn.addr !3333
  %59 = call i64 @TunerRegWrite.487(i64 %arg1, i64 %50, i64* nonnull %stack_var_-72, i64* bitcast (i32* @global_var_2 to i64*), i64 ptrtoint (i32* @global_var_1 to i64)), !insn.addr !3334
  %60 = call i64 @TLIB_Delay.388(i64* bitcast (i8* @global_var_a to i64*)), !insn.addr !3335
  %61 = mul i64 %39, mul (i64 add (i64 add (i64 ptrtoint (i32* @global_var_1 to i64), i64 1), i64 ptrtoint (i32* @global_var_1 to i64)), i64 ptrtoint (i16* @global_var_4 to i64)), !insn.addr !3336
  %62 = inttoptr i64 %61 to i8*, !insn.addr !3336
  %63 = load i8, i8* %62, align 2, !insn.addr !3336
  %64 = sext i8 %63 to i64, !insn.addr !3337
  store i64 %64, i64* %stack_var_-71, align 8, !insn.addr !3337
  %65 = call i64 @TunerRegWrite.487(i64 %arg1, i64 %50, i64* nonnull %stack_var_-72, i64* bitcast (i8** @global_var_3 to i64*), i64 ptrtoint (i32* @global_var_1 to i64)), !insn.addr !3338
  %66 = inttoptr i64 %40 to i8*, !insn.addr !3339
  %67 = load i8, i8* %66, align 2, !insn.addr !3339
  %68 = zext i8 %67 to i64, !insn.addr !3339
  ret i64 %68, !insn.addr !3340
}

define i8 @Adpater_SetFreqISDBS_1(i8* %hTuner, i8 %DevCH, i64 %freq, i8 %ucRs) local_unnamed_addr {
dec_label_pc_811d:
  %rax.0.reg2mem = alloca i64, !insn.addr !3341
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = call i64 @__decompiler_undefined_function_0()
  %2 = sext i8 %ucRs to i64
  %3 = sext i8 %DevCH to i64
  %4 = ptrtoint i8* %hTuner to i64
  %5 = inttoptr i64 %freq to i64*, !insn.addr !3341
  %6 = inttoptr i64 %2 to i64*, !insn.addr !3341
  %7 = call i64 @TunerRegWrite.487(i64 %4, i64 %3, i64* %5, i64* %6, i64 %0), !insn.addr !3341
  %8 = trunc i64 %7 to i8, !insn.addr !3342
  %9 = icmp eq i8 %8, 0, !insn.addr !3342
  %10 = icmp eq i1 %9, false, !insn.addr !3343
  %11 = zext i1 %10 to i64, !insn.addr !3343
  %12 = add i64 %1, -40, !insn.addr !3344
  %13 = inttoptr i64 %12 to i64*, !insn.addr !3344
  %14 = load i64, i64* %13, align 8, !insn.addr !3344
  %15 = call i64 @__readgsqword(i64 40), !insn.addr !3345
  %16 = icmp eq i64 %14, %15, !insn.addr !3345
  store i64 %11, i64* %rax.0.reg2mem, !insn.addr !3346
  br i1 %16, label %dec_label_pc_8142, label %dec_label_pc_813d, !insn.addr !3346

dec_label_pc_813d:                                ; preds = %dec_label_pc_811d
  %17 = call i64 @__stack_chk_fail(), !insn.addr !3347
  store i64 %17, i64* %rax.0.reg2mem, !insn.addr !3347
  br label %dec_label_pc_8142, !insn.addr !3347

dec_label_pc_8142:                                ; preds = %dec_label_pc_813d, %dec_label_pc_811d
  %rax.0.reload = load i64, i64* %rax.0.reg2mem
  %18 = trunc i64 %rax.0.reload to i8, !insn.addr !3348
  ret i8 %18, !insn.addr !3348
}

define i64 @Adpater_SetFreqISDBS_1.420(i64 %arg1, i64 %arg2, i64 %arg3) local_unnamed_addr {
dec_label_pc_814d:
  %rdx.0.reg2mem = alloca i64, !insn.addr !3349
  %rax.1.reg2mem = alloca i64, !insn.addr !3349
  %rbx.1.reg2mem = alloca i64, !insn.addr !3349
  %rbx.0.reg2mem = alloca i64, !insn.addr !3349
  %rax.0.reg2mem = alloca i64, !insn.addr !3349
  %stack_var_-67 = alloca i64, align 8
  %stack_var_-71 = alloca i64, align 8
  %stack_var_-72 = alloca i64, align 8
  %0 = call i64 @mcount(), !insn.addr !3350
  %1 = call i64 @__readgsqword(i64 40), !insn.addr !3351
  %2 = load i32, i32* @global_var_356c0, align 4, !insn.addr !3352
  %3 = zext i32 %2 to i64, !insn.addr !3352
  %4 = icmp eq i64 %3, %arg3, !insn.addr !3353
  store i64 0, i64* %rax.0.reg2mem, !insn.addr !3354
  store i64 ptrtoint (i32* @global_var_1 to i64), i64* %rbx.0.reg2mem, !insn.addr !3354
  store i64 0, i64* %rbx.1.reg2mem, !insn.addr !3354
  br i1 %4, label %dec_label_pc_81a5, label %dec_label_pc_8188, !insn.addr !3354

dec_label_pc_8188:                                ; preds = %dec_label_pc_814d, %dec_label_pc_818f
  %rbx.0.reload = load i64, i64* %rbx.0.reg2mem
  %rax.0.reload = load i64, i64* %rax.0.reg2mem
  %5 = inttoptr i64 %rax.0.reload to i32*, !insn.addr !3355
  %6 = load i32, i32* %5, align 4, !insn.addr !3355
  %7 = zext i32 %6 to i64, !insn.addr !3355
  %8 = icmp eq i64 %7, %arg3, !insn.addr !3356
  store i64 %rbx.0.reload, i64* %rbx.1.reg2mem, !insn.addr !3357
  br i1 %8, label %dec_label_pc_81a5, label %dec_label_pc_818f, !insn.addr !3357

dec_label_pc_818f:                                ; preds = %dec_label_pc_8188
  %9 = add i64 %rbx.0.reload, zext (i32 ptrtoint (i32* @global_var_1 to i32) to i64), !insn.addr !3358
  %10 = and i64 %9, 4294967295, !insn.addr !3358
  %11 = add i64 %rax.0.reload, ptrtoint ([4 x i8]* @global_var_c to i64), !insn.addr !3359
  %12 = trunc i64 %9 to i32, !insn.addr !3360
  %13 = icmp eq i32 %12, ptrtoint (i32** @global_var_18 to i32), !insn.addr !3360
  %14 = icmp eq i1 %13, false, !insn.addr !3361
  store i64 %11, i64* %rax.0.reg2mem, !insn.addr !3361
  store i64 %10, i64* %rbx.0.reg2mem, !insn.addr !3361
  br i1 %14, label %dec_label_pc_8188, label %dec_label_pc_819b, !insn.addr !3361

dec_label_pc_819b:                                ; preds = %dec_label_pc_818f
  ret i64 %11, !insn.addr !3362

dec_label_pc_81a5:                                ; preds = %dec_label_pc_8188, %dec_label_pc_814d
  %rbx.1.reload = load i64, i64* %rbx.1.reg2mem
  store i64 -64, i64* %stack_var_-72, align 8, !insn.addr !3363
  %sext = mul i64 %rbx.1.reload, 4294967296
  %15 = sdiv i64 %sext, 4294967296, !insn.addr !3364
  %16 = mul i64 %15, mul (i64 add (i64 ptrtoint (i32* @global_var_2 to i64), i64 1), i64 ptrtoint (i16* @global_var_4 to i64)), !insn.addr !3365
  %17 = ptrtoint i64* %stack_var_-71 to i64, !insn.addr !3366
  %18 = ptrtoint i64* %stack_var_-67 to i64, !insn.addr !3367
  store i64 %17, i64* %rax.1.reg2mem, !insn.addr !3367
  store i64 %16, i64* %rdx.0.reg2mem, !insn.addr !3367
  br label %dec_label_pc_81c4, !insn.addr !3367

dec_label_pc_81c4:                                ; preds = %dec_label_pc_81c4, %dec_label_pc_81a5
  %rdx.0.reload = load i64, i64* %rdx.0.reg2mem
  %rax.1.reload = load i64, i64* %rax.1.reg2mem
  %19 = inttoptr i64 %rdx.0.reload to i8*, !insn.addr !3368
  %20 = load i8, i8* %19, align 1, !insn.addr !3368
  %21 = inttoptr i64 %rax.1.reload to i8*, !insn.addr !3369
  store i8 %20, i8* %21, align 4, !insn.addr !3369
  %22 = add i64 %rdx.0.reload, ptrtoint (i32* @global_var_1 to i64), !insn.addr !3370
  %23 = add i64 %rax.1.reload, ptrtoint (i32* @global_var_1 to i64), !insn.addr !3371
  %24 = icmp eq i64 %23, %18, !insn.addr !3372
  %25 = icmp eq i1 %24, false, !insn.addr !3373
  store i64 %23, i64* %rax.1.reg2mem, !insn.addr !3373
  store i64 %22, i64* %rdx.0.reg2mem, !insn.addr !3373
  br i1 %25, label %dec_label_pc_81c4, label %dec_label_pc_81d6, !insn.addr !3373

dec_label_pc_81d6:                                ; preds = %dec_label_pc_81c4
  %26 = urem i64 %arg2, 256, !insn.addr !3374
  %27 = call i64 @TunerRegWrite.487(i64 %arg1, i64 %26, i64* nonnull %stack_var_-72, i64* bitcast (i8* @global_var_5 to i64*), i64 ptrtoint (i32* @global_var_1 to i64)), !insn.addr !3375
  %28 = mul i64 %15, ptrtoint (i32* @global_var_2 to i64), !insn.addr !3376
  %29 = add i64 %15, ptrtoint (i32* @global_var_1 to i64), !insn.addr !3376
  %30 = add i64 %29, %28, !insn.addr !3376
  %31 = mul i64 %30, ptrtoint (i16* @global_var_4 to i64), !insn.addr !3377
  %32 = inttoptr i64 %31 to i8*, !insn.addr !3377
  %33 = load i8, i8* %32, align 2, !insn.addr !3377
  %34 = sext i8 %33 to i64, !insn.addr !3378
  store i64 %34, i64* %stack_var_-71, align 8, !insn.addr !3378
  %35 = call i64 @TunerRegWrite.487(i64 %arg1, i64 %26, i64* nonnull %stack_var_-72, i64* bitcast (i32* @global_var_2 to i64*), i64 ptrtoint (i32* @global_var_1 to i64)), !insn.addr !3379
  %36 = call i64 @TLIB_Delay.388(i64* inttoptr (i64 100 to i64*)), !insn.addr !3380
  %37 = mul i64 %15, mul (i64 add (i64 add (i64 ptrtoint (i32* @global_var_1 to i64), i64 1), i64 ptrtoint (i32* @global_var_1 to i64)), i64 ptrtoint (i16* @global_var_4 to i64)), !insn.addr !3381
  %38 = inttoptr i64 %37 to i8*, !insn.addr !3381
  %39 = load i8, i8* %38, align 2, !insn.addr !3381
  %40 = sext i8 %39 to i64, !insn.addr !3382
  store i64 %40, i64* %stack_var_-71, align 8, !insn.addr !3382
  %41 = call i64 @TunerRegWrite.487(i64 %arg1, i64 %26, i64* nonnull %stack_var_-72, i64* bitcast (i8** @global_var_3 to i64*), i64 ptrtoint (i32* @global_var_1 to i64)), !insn.addr !3383
  %42 = inttoptr i64 %16 to i8*, !insn.addr !3384
  %43 = load i8, i8* %42, align 2, !insn.addr !3384
  %44 = zext i8 %43 to i64, !insn.addr !3384
  ret i64 %44, !insn.addr !3385
}

define i8 @TC_Initialise(i8* %DevExt, i8 %DevCH, i8* %FLAG, i8* %tuner_globe_data) local_unnamed_addr {
dec_label_pc_82a5:
  %rax.0.reg2mem = alloca i64, !insn.addr !3386
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = call i64 @__decompiler_undefined_function_0()
  %2 = sext i8 %DevCH to i64
  %3 = ptrtoint i8* %DevExt to i64
  %4 = bitcast i8* %FLAG to i64*, !insn.addr !3386
  %5 = bitcast i8* %tuner_globe_data to i64*, !insn.addr !3386
  %6 = call i64 @TunerRegWrite.487(i64 %3, i64 %2, i64* %4, i64* %5, i64 %0), !insn.addr !3386
  %7 = trunc i64 %6 to i8, !insn.addr !3387
  %8 = icmp eq i8 %7, 0, !insn.addr !3387
  %9 = icmp eq i1 %8, false, !insn.addr !3388
  %10 = zext i1 %9 to i64, !insn.addr !3388
  %11 = add i64 %1, -40, !insn.addr !3389
  %12 = inttoptr i64 %11 to i64*, !insn.addr !3389
  %13 = load i64, i64* %12, align 8, !insn.addr !3389
  %14 = call i64 @__readgsqword(i64 40), !insn.addr !3390
  %15 = icmp eq i64 %13, %14, !insn.addr !3390
  store i64 %10, i64* %rax.0.reg2mem, !insn.addr !3391
  br i1 %15, label %dec_label_pc_82ca, label %dec_label_pc_82c5, !insn.addr !3391

dec_label_pc_82c5:                                ; preds = %dec_label_pc_82a5
  %16 = call i64 @__stack_chk_fail(), !insn.addr !3392
  store i64 %16, i64* %rax.0.reg2mem, !insn.addr !3392
  br label %dec_label_pc_82ca, !insn.addr !3392

dec_label_pc_82ca:                                ; preds = %dec_label_pc_82c5, %dec_label_pc_82a5
  %rax.0.reload = load i64, i64* %rax.0.reg2mem
  %17 = trunc i64 %rax.0.reload to i8, !insn.addr !3393
  ret i8 %17, !insn.addr !3393
}

define i64 @TC_Initialise.376(i64 %arg1, i64 %arg2, i8* %arg3, i64 %arg4) local_unnamed_addr {
dec_label_pc_82d5:
  %0 = call i64 @mcount(), !insn.addr !3394
  ret i64 zext (i32 shl (i32 trunc (i64 and (i64 ptrtoint (i32* @global_var_1 to i64), i64 -256) to i32), i32 ptrtoint (i16* @global_var_4 to i32)) to i64), !insn.addr !3395
}

define i8 @TC_IsLocked(i8* %DevExt, i8 %DevCH, i8* %tuner_globe_data) local_unnamed_addr {
dec_label_pc_8337:
  %storemerge.reg2mem = alloca i8, !insn.addr !3396
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = call i64 @__decompiler_undefined_function_0()
  %2 = call i64 @__decompiler_undefined_function_0()
  %3 = trunc i64 %2 to i32
  %4 = mul i32 %3, 2, !insn.addr !3396
  %5 = inttoptr i64 %2 to i32*, !insn.addr !3396
  store i32 %4, i32* %5, align 4, !insn.addr !3396
  %6 = trunc i64 %2 to i8, !insn.addr !3397
  %7 = icmp eq i8 %6, 0, !insn.addr !3397
  store i8 0, i8* %storemerge.reg2mem, !insn.addr !3398
  br i1 %7, label %dec_label_pc_835e, label %dec_label_pc_833d, !insn.addr !3398

dec_label_pc_833d:                                ; preds = %dec_label_pc_8337
  %8 = call i64 @TC_RemappingTunerNumber.201(i64 %1), !insn.addr !3399
  %9 = trunc i64 %8 to i8, !insn.addr !3400
  %10 = icmp eq i8 %9, 0, !insn.addr !3400
  store i8 0, i8* %storemerge.reg2mem, !insn.addr !3401
  br i1 %10, label %dec_label_pc_835e, label %dec_label_pc_834d, !insn.addr !3401

dec_label_pc_834d:                                ; preds = %dec_label_pc_833d
  %11 = inttoptr i64 %0 to i8*, !insn.addr !3402
  store i8 -23, i8* %11, align 1, !insn.addr !3402
  store i8 ptrtoint (i32* @global_var_1 to i8), i8* %storemerge.reg2mem, !insn.addr !3403
  br label %dec_label_pc_835e, !insn.addr !3403

dec_label_pc_835e:                                ; preds = %dec_label_pc_8337, %dec_label_pc_833d, %dec_label_pc_834d
  %storemerge.reload = load i8, i8* %storemerge.reg2mem
  ret i8 %storemerge.reload, !insn.addr !3404
}

define i64 @TC_IsLocked.534(i64 %arg1, i64 %arg2, i64 %arg3) local_unnamed_addr {
dec_label_pc_8367:
  %0 = call i64 @mcount(), !insn.addr !3405
  ret i64 %0, !insn.addr !3406
}

define i64 @TC_GetCNRegister(i8* %DevExt, i8 %DevCH, i8* %tuner_globe_data) local_unnamed_addr {
dec_label_pc_837b:
  %rax.0.reg2mem = alloca i64, !insn.addr !3407
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = call i64 @__decompiler_undefined_function_0()
  %2 = ptrtoint i8* %DevExt to i64
  %3 = call i64 @TC_RemappingTunerNumber.201(i64 %2), !insn.addr !3408
  %4 = trunc i64 %3 to i8, !insn.addr !3409
  %5 = icmp eq i8 %4, 0, !insn.addr !3409
  store i64 0, i64* %rax.0.reg2mem, !insn.addr !3410
  br i1 %5, label %dec_label_pc_83a4, label %dec_label_pc_8390, !insn.addr !3410

dec_label_pc_8390:                                ; preds = %dec_label_pc_837b
  %6 = add i64 %0, -17, !insn.addr !3411
  %7 = add i64 %0, -36, !insn.addr !3412
  %8 = inttoptr i64 %7 to i8*, !insn.addr !3412
  %9 = load i8, i8* %8, align 1, !insn.addr !3412
  %10 = call i64 @Japan4x4Tuner_TunerCheckLockStatus.342(i8 %9, i64 %6, i64 %1), !insn.addr !3413
  %11 = inttoptr i64 %6 to i8*, !insn.addr !3414
  %12 = load i8, i8* %11, align 1, !insn.addr !3414
  %13 = zext i8 %12 to i64, !insn.addr !3414
  store i64 %13, i64* %rax.0.reg2mem, !insn.addr !3414
  br label %dec_label_pc_83a4, !insn.addr !3414

dec_label_pc_83a4:                                ; preds = %dec_label_pc_8390, %dec_label_pc_837b
  %rax.0.reload = load i64, i64* %rax.0.reg2mem
  ret i64 %rax.0.reload, !insn.addr !3415
}

define i64 @TC_GetCNRegister.527(i64 %arg1, i64 %arg2, i64 %arg3) local_unnamed_addr {
dec_label_pc_83ab:
  %0 = call i64 @mcount(), !insn.addr !3416
  %1 = urem i64 %arg2, 256, !insn.addr !3417
  %2 = call i64 @TC_IsLocked.534(i64 %arg1, i64 %1, i64 %arg3), !insn.addr !3418
  ret i64 %2, !insn.addr !3419
}

define i64 @TC_GetCN(i8* %DevExt, i8 %DevCH, i8* %tuner_globe_data) local_unnamed_addr {
dec_label_pc_83f6:
  %0 = call i64 @__decompiler_undefined_function_0()
  ret i64 %0
}

define i64 @function_83f7() local_unnamed_addr {
dec_label_pc_83f7:
  %0 = call i64 @__decompiler_undefined_function_0()
  ret i64 %0, !insn.addr !3420
}

define i64 @TC_GetCN.149(i64 %arg1, i64 %arg2, i64 %arg3) local_unnamed_addr {
dec_label_pc_8426:
  %0 = call i64 @mcount(), !insn.addr !3421
  %1 = urem i64 %arg2, 256, !insn.addr !3422
  %2 = call i64 @TC_IsLocked.534(i64 %arg1, i64 %1, i64 %arg3), !insn.addr !3423
  ret i64 %2, !insn.addr !3424
}

define i32 @Fiti_LAN_Gain(i8* %DevExt, i8* %StartPolling, i8 %total_tuner_num, i8* %tuner_globe_data) local_unnamed_addr {
dec_label_pc_845d:
  %storemerge.reg2mem = alloca i32, !insn.addr !3425
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = call i64 @__decompiler_undefined_function_0()
  %2 = call i64 @__decompiler_undefined_function_0()
  %3 = and i64 %2, 4294967295, !insn.addr !3425
  %4 = call i64 @TC_RemappingTunerNumber.201(i64 %3), !insn.addr !3426
  %5 = trunc i64 %4 to i8, !insn.addr !3427
  %6 = icmp eq i8 %5, 0, !insn.addr !3427
  store i32 0, i32* %storemerge.reg2mem, !insn.addr !3428
  br i1 %6, label %dec_label_pc_8483, label %dec_label_pc_8468, !insn.addr !3428

dec_label_pc_8468:                                ; preds = %dec_label_pc_845d
  %7 = add i64 %1, -24, !insn.addr !3429
  %8 = add i64 %1, -36, !insn.addr !3430
  %9 = inttoptr i64 %8 to i8*, !insn.addr !3430
  %10 = load i8, i8* %9, align 1, !insn.addr !3430
  %11 = call i64 @Japan4x4Tuner_TunerGetCN.418(i8 %10, i64 %7, i64 %0), !insn.addr !3431
  %12 = inttoptr i64 %7 to i64*, !insn.addr !3432
  %13 = load i64, i64* %12, align 8, !insn.addr !3432
  %phitmp = trunc i64 %13 to i32
  store i32 %phitmp, i32* %storemerge.reg2mem, !insn.addr !3433
  br label %dec_label_pc_8483, !insn.addr !3433

dec_label_pc_8483:                                ; preds = %dec_label_pc_845d, %dec_label_pc_8468
  %storemerge.reload = load i32, i32* %storemerge.reg2mem
  ret i32 %storemerge.reload, !insn.addr !3434
}

define i64 @Fiti_LAN_Gain.569(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4) local_unnamed_addr {
dec_label_pc_848d:
  %r15.0.reg2mem = alloca i64, !insn.addr !3435
  %r13.1.reg2mem = alloca i64, !insn.addr !3435
  %stack_var_-216.0.reg2mem = alloca i8, !insn.addr !3435
  %stack_var_-208.0.reg2mem = alloca i32, !insn.addr !3435
  %stack_var_-224.0.reg2mem = alloca i64, !insn.addr !3435
  %stack_var_-200.0.reg2mem = alloca i32, !insn.addr !3435
  %merge.reg2mem = alloca i64, !insn.addr !3435
  %rax.1.reg2mem = alloca i64, !insn.addr !3435
  %r14.0.reg2mem = alloca i64, !insn.addr !3435
  %r13.0.reg2mem = alloca i64, !insn.addr !3435
  %r12.0.reg2mem = alloca i64, !insn.addr !3435
  %rbx.0.reg2mem = alloca i64, !insn.addr !3435
  %rax.0.reg2mem = alloca i64, !insn.addr !3435
  %0 = call i8 @__decompiler_undefined_function_1()
  %stack_var_-58 = alloca i8*, align 8
  %stack_var_-84 = alloca i64, align 8
  %stack_var_-124 = alloca i64, align 8
  %stack_var_-70 = alloca i64, align 8
  %stack_var_-57 = alloca i32, align 4
  %stack_var_-100 = alloca i64, align 8
  %stack_var_-86 = alloca i8, align 1
  %stack_var_-8 = alloca i64, align 8
  %1 = call i64 @mcount(), !insn.addr !3436
  %2 = add i64 %arg4, 168, !insn.addr !3437
  %3 = inttoptr i64 %2 to i64*, !insn.addr !3437
  %4 = load i64, i64* %3, align 8, !insn.addr !3437
  %5 = icmp eq i64 %4, 0, !insn.addr !3437
  %6 = icmp eq i1 %5, false, !insn.addr !3438
  br i1 %6, label %dec_label_pc_870e, label %dec_label_pc_861f, !insn.addr !3438

dec_label_pc_861f:                                ; preds = %dec_label_pc_848d
  %7 = add i64 %arg4, 176, !insn.addr !3439
  %8 = inttoptr i64 %7 to i64*, !insn.addr !3439
  %9 = load i64, i64* %8, align 8, !insn.addr !3439
  %10 = icmp eq i64 %9, 0, !insn.addr !3439
  %11 = icmp eq i1 %10, false, !insn.addr !3440
  br i1 %11, label %dec_label_pc_8638, label %dec_label_pc_8627, !insn.addr !3440

dec_label_pc_8627:                                ; preds = %dec_label_pc_861f
  %12 = call i64 @TLIB_SetGPIO_ASIE5606B5.181(i64 %arg1, i64* null, i64* bitcast (i32* @global_var_1 to i64*)), !insn.addr !3441
  br label %dec_label_pc_864e, !insn.addr !3442

dec_label_pc_8638:                                ; preds = %dec_label_pc_861f
  %13 = call i64 @TLIB_SetGPIO_ASIE5606B5.181(i64 %arg1, i64* bitcast (i32* @global_var_1 to i64*), i64* bitcast (i32* @global_var_1 to i64*)), !insn.addr !3443
  br label %dec_label_pc_864e, !insn.addr !3443

dec_label_pc_864e:                                ; preds = %dec_label_pc_8638, %dec_label_pc_8627
  %14 = ptrtoint i64* %stack_var_-8 to i64, !insn.addr !3444
  %15 = ptrtoint i8* %stack_var_-86 to i64, !insn.addr !3445
  %16 = ptrtoint i64* %stack_var_-100 to i64, !insn.addr !3446
  %17 = sub i64 zext (i32 ptrtoint (i32* @global_var_2 to i32) to i64), %arg2, !insn.addr !3447
  %18 = add i64 %14, -175
  %19 = add i64 %14, -176
  %20 = add nsw i64 %arg4, 80
  store i64 %arg2, i64* %rax.0.reg2mem, !insn.addr !3448
  store i64 %arg4, i64* %rbx.0.reg2mem, !insn.addr !3448
  store i64 %arg2, i64* %r12.0.reg2mem, !insn.addr !3448
  store i64 %16, i64* %r13.0.reg2mem, !insn.addr !3448
  store i64 %15, i64* %r14.0.reg2mem, !insn.addr !3448
  br label %dec_label_pc_8670, !insn.addr !3448

dec_label_pc_8670:                                ; preds = %dec_label_pc_86f0, %dec_label_pc_864e
  %r14.0.reload = load i64, i64* %r14.0.reg2mem
  %r13.0.reload = load i64, i64* %r13.0.reg2mem
  %r12.0.reload = load i64, i64* %r12.0.reg2mem
  %rbx.0.reload = load i64, i64* %rbx.0.reg2mem
  %rax.0.reload = load i64, i64* %rax.0.reg2mem
  %21 = add i64 %rbx.0.reload, 184, !insn.addr !3449
  %22 = inttoptr i64 %21 to i64*, !insn.addr !3449
  %23 = load i64, i64* %22, align 8, !insn.addr !3449
  %24 = icmp ult i64 %23, 24
  br i1 %24, label %dec_label_pc_8685, label %dec_label_pc_867a, !insn.addr !3450

dec_label_pc_867a:                                ; preds = %dec_label_pc_8670
  store i64 ptrtoint (i8** @global_var_17 to i64), i64* %22, align 8, !insn.addr !3451
  br label %dec_label_pc_8685, !insn.addr !3451

dec_label_pc_8685:                                ; preds = %dec_label_pc_867a, %dec_label_pc_8670
  %25 = add i64 %r12.0.reload, ptrtoint (i32* @global_var_2 to i64), !insn.addr !3452
  %26 = inttoptr i64 %25 to i8*, !insn.addr !3452
  %27 = load i8, i8* %26, align 1, !insn.addr !3452
  %28 = icmp eq i8 %27, 0, !insn.addr !3452
  store i64 %rax.0.reload, i64* %rax.1.reg2mem, !insn.addr !3453
  br i1 %28, label %dec_label_pc_86f0, label %dec_label_pc_868d, !insn.addr !3453

dec_label_pc_868d:                                ; preds = %dec_label_pc_8685
  %29 = inttoptr i64 %r13.0.reload to i8*, !insn.addr !3454
  store i8 ptrtoint (i32** @global_var_13 to i8), i8* %29, align 4, !insn.addr !3454
  %30 = load i64, i64* %22, align 8, !insn.addr !3455
  %31 = mul i64 %30, 2, !insn.addr !3456
  %32 = add i64 %31, %18, !insn.addr !3456
  %33 = inttoptr i64 %32 to i8*, !insn.addr !3456
  %34 = load i8, i8* %33, align 1, !insn.addr !3456
  %35 = add i64 %31, %19, !insn.addr !3457
  %36 = inttoptr i64 %35 to i8*, !insn.addr !3457
  %37 = load i8, i8* %36, align 2, !insn.addr !3457
  %38 = or i8 %37, %34, !insn.addr !3457
  %39 = add i64 %r13.0.reload, ptrtoint (i32* @global_var_1 to i64), !insn.addr !3458
  %40 = inttoptr i64 %39 to i8*, !insn.addr !3458
  store i8 %38, i8* %40, align 4, !insn.addr !3458
  %41 = add i64 %17, %r12.0.reload, !insn.addr !3459
  %42 = and i64 %41, 4294967295, !insn.addr !3459
  %43 = inttoptr i64 %r13.0.reload to i64*, !insn.addr !3460
  %44 = call i64 @TunerRegWrite.487(i64 %arg1, i64 %42, i64* %43, i64* bitcast (i32* @global_var_2 to i64*), i64 0), !insn.addr !3460
  %45 = load i64, i64* %22, align 8, !insn.addr !3461
  %46 = mul i64 %45, 2, !insn.addr !3462
  %47 = add i64 %46, %18, !insn.addr !3462
  %48 = inttoptr i64 %47 to i8*, !insn.addr !3462
  %49 = load i8, i8* %48, align 1, !insn.addr !3462
  %50 = add i64 %46, %19, !insn.addr !3463
  %51 = inttoptr i64 %50 to i8*, !insn.addr !3463
  %52 = load i8, i8* %51, align 2, !insn.addr !3463
  %53 = or i8 %52, %49, !insn.addr !3463
  %54 = inttoptr i64 %r14.0.reload to i8*, !insn.addr !3464
  store i8 %53, i8* %54, align 1, !insn.addr !3464
  store i64 %45, i64* %rax.1.reg2mem, !insn.addr !3464
  br label %dec_label_pc_86f0, !insn.addr !3464

dec_label_pc_86f0:                                ; preds = %dec_label_pc_868d, %dec_label_pc_8685
  %rax.1.reload = load i64, i64* %rax.1.reg2mem
  %55 = add i64 %rbx.0.reload, 80, !insn.addr !3465
  %56 = add i64 %r12.0.reload, ptrtoint (i32* @global_var_1 to i64), !insn.addr !3466
  %57 = add i64 %r14.0.reload, ptrtoint (i32* @global_var_1 to i64), !insn.addr !3467
  %58 = add i64 %r13.0.reload, ptrtoint (i32* @global_var_2 to i64), !insn.addr !3468
  %59 = icmp eq i64 %rbx.0.reload, %20, !insn.addr !3469
  %60 = icmp eq i1 %59, false, !insn.addr !3470
  store i64 %rax.1.reload, i64* %rax.0.reg2mem, !insn.addr !3470
  store i64 %55, i64* %rbx.0.reg2mem, !insn.addr !3470
  store i64 %56, i64* %r12.0.reg2mem, !insn.addr !3470
  store i64 %58, i64* %r13.0.reg2mem, !insn.addr !3470
  store i64 %57, i64* %r14.0.reg2mem, !insn.addr !3470
  store i64 %rax.1.reload, i64* %merge.reg2mem, !insn.addr !3470
  br i1 %60, label %dec_label_pc_8670, label %dec_label_pc_8709, !insn.addr !3470

dec_label_pc_8709:                                ; preds = %dec_label_pc_86f0, %dec_label_pc_92c9
  %merge.reload = load i64, i64* %merge.reg2mem
  ret i64 %merge.reload, !insn.addr !3471

dec_label_pc_870e:                                ; preds = %dec_label_pc_848d
  %61 = bitcast i32* %stack_var_-57 to i64*, !insn.addr !3472
  %62 = call i64 @TLIB_I2C_Read.262(i64 %arg1, i64 74, i64 ptrtoint (i8** @global_var_b to i64), i64* nonnull %61, i64* bitcast (i32* @global_var_1 to i64*), i64 0), !insn.addr !3472
  %63 = load i32, i32* %stack_var_-57, align 4, !insn.addr !3473
  %64 = and i32 %63, sext (i8 ptrtoint (i32* @global_var_1 to i8) to i32), !insn.addr !3473
  %sext = mul i32 %64, 16777216
  %65 = sdiv i32 %sext, 16777216, !insn.addr !3473
  store i32 %65, i32* %stack_var_-57, align 4, !insn.addr !3473
  %66 = ptrtoint i8* %stack_var_-86 to i64, !insn.addr !3474
  %67 = ptrtoint i64* %stack_var_-70 to i64, !insn.addr !3475
  %68 = trunc i64 %67 to i32, !insn.addr !3475
  %69 = ptrtoint i64* %stack_var_-124 to i64, !insn.addr !3476
  %70 = trunc i64 %69 to i8, !insn.addr !3476
  %71 = ptrtoint i64* %stack_var_-100 to i64, !insn.addr !3477
  %72 = ptrtoint i64* %stack_var_-84 to i64, !insn.addr !3478
  %73 = trunc i64 %arg2 to i32, !insn.addr !3479
  %74 = sub i32 ptrtoint (i32* @global_var_2 to i32), %73, !insn.addr !3480
  %75 = bitcast i8** %stack_var_-58 to i64*
  store i32 %73, i32* %stack_var_-200.0.reg2mem, !insn.addr !3481
  store i64 %arg4, i64* %stack_var_-224.0.reg2mem, !insn.addr !3481
  store i32 %68, i32* %stack_var_-208.0.reg2mem, !insn.addr !3481
  store i8 %70, i8* %stack_var_-216.0.reg2mem, !insn.addr !3481
  store i64 %71, i64* %r13.1.reg2mem, !insn.addr !3481
  store i64 %66, i64* %r15.0.reg2mem, !insn.addr !3481
  br label %dec_label_pc_878b, !insn.addr !3481

dec_label_pc_878b:                                ; preds = %dec_label_pc_912d, %dec_label_pc_870e
  %r15.0.reload = load i64, i64* %r15.0.reg2mem
  %r13.1.reload = load i64, i64* %r13.1.reg2mem
  %stack_var_-216.0.reload = load i8, i8* %stack_var_-216.0.reg2mem
  %stack_var_-208.0.reload = load i32, i32* %stack_var_-208.0.reg2mem
  %stack_var_-224.0.reload = load i64, i64* %stack_var_-224.0.reg2mem
  %stack_var_-200.0.reload = load i32, i32* %stack_var_-200.0.reg2mem
  %76 = sext i32 %stack_var_-200.0.reload to i64, !insn.addr !3482
  %77 = add i64 %76, ptrtoint (i32* @global_var_2 to i64), !insn.addr !3483
  %78 = inttoptr i64 %77 to i8*, !insn.addr !3483
  %79 = load i8, i8* %78, align 1, !insn.addr !3483
  %80 = icmp eq i8 %79, 0, !insn.addr !3483
  %81 = icmp eq i1 %80, false, !insn.addr !3484
  br i1 %81, label %dec_label_pc_87a1, label %dec_label_pc_8798, !insn.addr !3484

dec_label_pc_8798:                                ; preds = %dec_label_pc_878b
  %82 = inttoptr i64 %r15.0.reload to i8*, !insn.addr !3485
  store i8 ptrtoint (i8* @global_var_10 to i8), i8* %82, align 1, !insn.addr !3485
  br label %dec_label_pc_912d, !insn.addr !3486

dec_label_pc_87a1:                                ; preds = %dec_label_pc_878b
  %83 = add i32 %74, %stack_var_-200.0.reload, !insn.addr !3487
  %84 = zext i32 %83 to i64, !insn.addr !3487
  %85 = inttoptr i64 %r13.1.reload to i8*, !insn.addr !3488
  store i8 ptrtoint (i32** @global_var_12 to i8), i8* %85, align 4, !insn.addr !3488
  %86 = add i64 %r13.1.reload, ptrtoint (i32* @global_var_1 to i64), !insn.addr !3489
  %87 = inttoptr i64 %86 to i8*, !insn.addr !3489
  store i8 0, i8* %87, align 4, !insn.addr !3489
  %88 = inttoptr i64 %r13.1.reload to i64*, !insn.addr !3490
  %89 = call i64 @TunerRegWrite.487(i64 %arg1, i64 %84, i64* %88, i64* bitcast (i32* @global_var_2 to i64*), i64 0), !insn.addr !3490
  %90 = sext i32 %stack_var_-208.0.reload to i64, !insn.addr !3491
  %91 = inttoptr i64 %90 to i64*, !insn.addr !3492
  %92 = call i64 @TunerRegRead.419(i64 %arg1, i64 %84, i64* bitcast (i32** @global_var_12 to i64*), i64* %91, i64* bitcast (i32* @global_var_1 to i64*), i64 0), !insn.addr !3492
  %93 = inttoptr i64 %r15.0.reload to i64*, !insn.addr !3493
  %94 = call i64 @TunerRegRead.419(i64 %arg1, i64 %84, i64* bitcast (i32** @global_var_13 to i64*), i64* %93, i64* bitcast (i32* @global_var_1 to i64*), i64 0), !insn.addr !3493
  %95 = inttoptr i64 %r15.0.reload to i8*, !insn.addr !3494
  %96 = load i8, i8* %95, align 1, !insn.addr !3494
  %97 = and i8 %96, ptrtoint (i8** @global_var_1f to i8), !insn.addr !3494
  store i8 %97, i8* %95, align 1, !insn.addr !3494
  %98 = inttoptr i64 %86 to i64*, !insn.addr !3495
  %99 = call i64 @TunerRegRead.419(i64 %arg1, i64 %84, i64* bitcast ([3 x i8]* @global_var_d to i64*), i64* %98, i64* bitcast (i32* @global_var_1 to i64*), i64 0), !insn.addr !3495
  %100 = load i8, i8* %87, align 4, !insn.addr !3496
  %101 = and i8 %100, ptrtoint (i8* @global_var_10 to i8), !insn.addr !3496
  %102 = icmp eq i8 %101, 0, !insn.addr !3496
  %103 = icmp eq i1 %102, false, !insn.addr !3497
  br i1 %103, label %dec_label_pc_88ac, label %dec_label_pc_887a, !insn.addr !3497

dec_label_pc_887a:                                ; preds = %dec_label_pc_87a1
  store i8 ptrtoint (i8* @global_var_10 to i8), i8* %85, align 4, !insn.addr !3498
  store i8 0, i8* %87, align 4, !insn.addr !3499
  %sext14 = mul i64 %r13.1.reload, 4294967296
  %104 = sdiv i64 %sext14, 4294967296, !insn.addr !3500
  %105 = inttoptr i64 %104 to i64*, !insn.addr !3501
  %106 = call i64 @TunerRegWrite.487(i64 %arg1, i64 %84, i64* %105, i64* bitcast (i32* @global_var_2 to i64*), i64 0), !insn.addr !3501
  br label %dec_label_pc_88ac, !insn.addr !3502

dec_label_pc_88ac:                                ; preds = %dec_label_pc_887a, %dec_label_pc_87a1
  %107 = sext i8 %stack_var_-216.0.reload to i64, !insn.addr !3503
  %108 = inttoptr i64 %107 to i64*, !insn.addr !3504
  %109 = call i64 @TunerRegRead.419(i64 %arg1, i64 %84, i64* bitcast (i8* @global_var_10 to i64*), i64* %108, i64* bitcast (i32* @global_var_1 to i64*), i64 0), !insn.addr !3504
  %110 = inttoptr i64 %90 to i8*, !insn.addr !3505
  %111 = load i8, i8* %110, align 4, !insn.addr !3505
  %112 = lshr i8 %111, ptrtoint (i8* @global_var_5 to i8), !insn.addr !3506
  %113 = zext i8 %112 to i64, !insn.addr !3507
  %114 = and i8 %111, ptrtoint (i8** @global_var_1f to i8), !insn.addr !3508
  %115 = mul i8 %114, 2, !insn.addr !3509
  %116 = inttoptr i64 %113 to i8*, !insn.addr !3510
  %117 = load i8, i8* %116, align 1, !insn.addr !3510
  %118 = add i8 %115, %117, !insn.addr !3510
  %119 = zext i8 %118 to i64, !insn.addr !3510
  %120 = load i8, i8* %95, align 1, !insn.addr !3511
  %121 = icmp eq i8 %120, ptrtoint (i8* @global_var_a to i8), !insn.addr !3512
  br i1 %121, label %dec_label_pc_8c67, label %dec_label_pc_8905, !insn.addr !3513

dec_label_pc_8905:                                ; preds = %dec_label_pc_88ac
  %122 = icmp ugt i8 %120, ptrtoint (i8* @global_var_a to i8)
  br i1 %122, label %dec_label_pc_8916, label %dec_label_pc_8909, !insn.addr !3514

dec_label_pc_8909:                                ; preds = %dec_label_pc_8905
  %123 = icmp eq i8 %120, ptrtoint (i32* @global_var_2 to i8), !insn.addr !3515
  %124 = icmp eq i1 %123, false, !insn.addr !3516
  br i1 %124, label %dec_label_pc_9097, label %dec_label_pc_8ed8, !insn.addr !3516

dec_label_pc_8916:                                ; preds = %dec_label_pc_8905
  %125 = icmp eq i8 %120, ptrtoint (i8* @global_var_10 to i8), !insn.addr !3517
  br i1 %125, label %dec_label_pc_892b, label %dec_label_pc_891a, !insn.addr !3518

dec_label_pc_891a:                                ; preds = %dec_label_pc_8916
  %126 = icmp eq i8 %120, ptrtoint (i32** @global_var_14 to i8), !insn.addr !3519
  %127 = icmp eq i1 %126, false, !insn.addr !3520
  br i1 %127, label %dec_label_pc_9097, label %dec_label_pc_89f4, !insn.addr !3520

dec_label_pc_892b:                                ; preds = %dec_label_pc_8916
  %128 = add i64 %stack_var_-224.0.reload, 184, !insn.addr !3521
  %129 = inttoptr i64 %128 to i64*, !insn.addr !3521
  store i64 ptrtoint (i8** @global_var_17 to i64), i64* %129, align 8, !insn.addr !3521
  %130 = load i32, i32* %stack_var_-57, align 4, !insn.addr !3522
  %131 = trunc i32 %130 to i8, !insn.addr !3522
  %132 = icmp eq i8 %131, 0, !insn.addr !3522
  %133 = load i32, i32* @global_var_35828, align 4, !insn.addr !3523
  %134 = icmp eq i1 %132, false, !insn.addr !3524
  %135 = load i32, i32* @global_var_35840, align 4, !insn.addr !3524
  %136 = select i1 %134, i32 %135, i32 %133, !insn.addr !3524
  %137 = zext i32 %136 to i64, !insn.addr !3524
  %138 = icmp ult i64 %119, %137, !insn.addr !3525
  br i1 %138, label %dec_label_pc_8959, label %dec_label_pc_912d, !insn.addr !3525

dec_label_pc_8959:                                ; preds = %dec_label_pc_892b
  %sext35 = mul i64 %86, 4294967296
  %139 = sdiv i64 %sext35, 4294967296, !insn.addr !3526
  %140 = inttoptr i64 %139 to i64*, !insn.addr !3527
  %141 = call i64 @TunerRegRead.419(i64 %arg1, i64 %84, i64* bitcast ([3 x i8]* @global_var_d to i64*), i64* %140, i64* bitcast (i32* @global_var_1 to i64*), i64 0), !insn.addr !3527
  store i8 ptrtoint ([3 x i8]* @global_var_d to i8), i8* %85, align 4, !insn.addr !3528
  %142 = load i8, i8* %87, align 4, !insn.addr !3529
  %143 = and i8 %142, -17, !insn.addr !3529
  store i8 %143, i8* %87, align 4, !insn.addr !3529
  %sext36 = mul i64 %r13.1.reload, 4294967296
  %144 = sdiv i64 %sext36, 4294967296, !insn.addr !3530
  %145 = inttoptr i64 %144 to i64*, !insn.addr !3531
  %146 = call i64 @TunerRegWrite.487(i64 %arg1, i64 %84, i64* %145, i64* bitcast (i32* @global_var_2 to i64*), i64 0), !insn.addr !3531
  store i8 ptrtoint (i32** @global_var_13 to i8), i8* %85, align 4, !insn.addr !3532
  store i8 ptrtoint (i32** @global_var_14 to i8), i8* %87, align 4, !insn.addr !3533
  %147 = call i64 @TunerRegWrite.487(i64 %arg1, i64 %84, i64* %145, i64* bitcast (i32* @global_var_2 to i64*), i64 0), !insn.addr !3534
  store i8 ptrtoint (i32** @global_var_14 to i8), i8* %95, align 1, !insn.addr !3535
  br label %dec_label_pc_912d, !insn.addr !3536

dec_label_pc_89f4:                                ; preds = %dec_label_pc_891a
  %148 = add i64 %stack_var_-224.0.reload, 184, !insn.addr !3537
  %149 = inttoptr i64 %148 to i64*, !insn.addr !3537
  store i64 ptrtoint (i32** @global_var_13 to i64), i64* %149, align 8, !insn.addr !3537
  %150 = load i32, i32* %stack_var_-57, align 4, !insn.addr !3538
  %151 = trunc i32 %150 to i8, !insn.addr !3538
  %152 = icmp eq i8 %151, 0, !insn.addr !3538
  %153 = icmp eq i1 %152, false, !insn.addr !3539
  %global_var_35844.val = load i32, i32* @global_var_35844, align 4
  %global_var_3582c.val = load i32, i32* @global_var_3582c, align 4
  %storemerge12.in = select i1 %153, i32 %global_var_35844.val, i32 %global_var_3582c.val
  %storemerge12 = zext i32 %storemerge12.in to i64
  %154 = icmp ult i64 %storemerge12, %119, !insn.addr !3540
  br i1 %154, label %dec_label_pc_8a31, label %dec_label_pc_8acc, !insn.addr !3540

dec_label_pc_8a31:                                ; preds = %dec_label_pc_89f4
  %sext32 = mul i64 %86, 4294967296
  %155 = sdiv i64 %sext32, 4294967296, !insn.addr !3541
  %156 = inttoptr i64 %155 to i64*, !insn.addr !3542
  %157 = call i64 @TunerRegRead.419(i64 %arg1, i64 %84, i64* bitcast ([3 x i8]* @global_var_d to i64*), i64* %156, i64* bitcast (i32* @global_var_1 to i64*), i64 0), !insn.addr !3542
  store i8 ptrtoint ([3 x i8]* @global_var_d to i8), i8* %85, align 4, !insn.addr !3543
  %158 = load i8, i8* %87, align 4, !insn.addr !3544
  %159 = and i8 %158, -17, !insn.addr !3544
  store i8 %159, i8* %87, align 4, !insn.addr !3544
  %sext33 = mul i64 %r13.1.reload, 4294967296
  %160 = sdiv i64 %sext33, 4294967296, !insn.addr !3545
  %161 = inttoptr i64 %160 to i64*, !insn.addr !3546
  %162 = call i64 @TunerRegWrite.487(i64 %arg1, i64 %84, i64* %161, i64* bitcast (i32* @global_var_2 to i64*), i64 0), !insn.addr !3546
  store i8 ptrtoint (i32** @global_var_13 to i8), i8* %85, align 4, !insn.addr !3547
  store i8 ptrtoint (i8* @global_var_10 to i8), i8* %87, align 4, !insn.addr !3548
  %163 = call i64 @TunerRegWrite.487(i64 %arg1, i64 %84, i64* %161, i64* bitcast (i32* @global_var_2 to i64*), i64 0), !insn.addr !3549
  store i8 ptrtoint (i8* @global_var_10 to i8), i8* %95, align 1, !insn.addr !3550
  br label %dec_label_pc_912d, !insn.addr !3551

dec_label_pc_8acc:                                ; preds = %dec_label_pc_89f4
  %global_var_35848.val = load i32, i32* @global_var_35848, align 4
  %global_var_35830.val = load i32, i32* @global_var_35830, align 4
  %storemerge.in = select i1 %153, i32 %global_var_35848.val, i32 %global_var_35830.val
  %storemerge = zext i32 %storemerge.in to i64
  %164 = icmp ugt i64 %storemerge, %119, !insn.addr !3552
  br i1 %164, label %dec_label_pc_8ad6, label %dec_label_pc_912d, !insn.addr !3552

dec_label_pc_8ad6:                                ; preds = %dec_label_pc_8acc
  %sext25 = mul i64 %86, 4294967296
  %165 = sdiv i64 %sext25, 4294967296, !insn.addr !3553
  %166 = inttoptr i64 %165 to i64*, !insn.addr !3554
  %167 = call i64 @TunerRegRead.419(i64 %arg1, i64 %84, i64* bitcast ([3 x i8]* @global_var_d to i64*), i64* %166, i64* bitcast (i32* @global_var_1 to i64*), i64 0), !insn.addr !3554
  store i8 ptrtoint ([3 x i8]* @global_var_d to i8), i8* %85, align 4, !insn.addr !3555
  %168 = load i8, i8* %87, align 4, !insn.addr !3556
  %169 = and i8 %168, -17, !insn.addr !3556
  store i8 %169, i8* %87, align 4, !insn.addr !3556
  %sext26 = mul i64 %r13.1.reload, 4294967296
  %170 = sdiv i64 %sext26, 4294967296, !insn.addr !3557
  %171 = inttoptr i64 %170 to i64*, !insn.addr !3558
  %172 = call i64 @TunerRegWrite.487(i64 %arg1, i64 %84, i64* %171, i64* bitcast (i32* @global_var_2 to i64*), i64 0), !insn.addr !3558
  store i8 ptrtoint (i8* @global_var_10 to i8), i8* %85, align 4, !insn.addr !3559
  store i8 0, i8* %87, align 4, !insn.addr !3560
  %173 = call i64 @TunerRegWrite.487(i64 %arg1, i64 %84, i64* %171, i64* bitcast (i32* @global_var_2 to i64*), i64 0), !insn.addr !3561
  %174 = call i64 @TunerRegRead.419(i64 %arg1, i64 %84, i64* bitcast (i8* @global_var_10 to i64*), i64* nonnull %75, i64* bitcast (i32* @global_var_1 to i64*), i64 0), !insn.addr !3562
  %175 = load i8*, i8** %stack_var_-58, align 8, !insn.addr !3563
  %176 = ptrtoint i8* %175 to i64, !insn.addr !3563
  %177 = sub i64 %176, sext (i8 ptrtoint (i8** @global_var_3 to i8) to i64), !insn.addr !3563
  %sext9 = mul i64 %177, 72057594037927936
  %178 = sdiv i64 %sext9, 72057594037927936, !insn.addr !3563
  %179 = inttoptr i64 %178 to i8*, !insn.addr !3563
  store i8* %179, i8** %stack_var_-58, align 8, !insn.addr !3563
  %180 = call i64 @TunerRegRead.419(i64 %arg1, i64 %84, i64* bitcast ([3 x i8]* @global_var_d to i64*), i64* %166, i64* bitcast (i32* @global_var_1 to i64*), i64 0), !insn.addr !3564
  store i8 ptrtoint ([3 x i8]* @global_var_d to i8), i8* %85, align 4, !insn.addr !3565
  %181 = load i8, i8* %87, align 4, !insn.addr !3566
  %182 = or i8 %181, ptrtoint (i8* @global_var_10 to i8), !insn.addr !3566
  store i8 %182, i8* %87, align 4, !insn.addr !3566
  %183 = call i64 @TunerRegWrite.487(i64 %arg1, i64 %84, i64* %171, i64* bitcast (i32* @global_var_2 to i64*), i64 0), !insn.addr !3567
  store i8 ptrtoint (i8* @global_var_10 to i8), i8* %85, align 4, !insn.addr !3568
  %184 = load i8*, i8** %stack_var_-58, align 8, !insn.addr !3569
  %185 = ptrtoint i8* %184 to i64, !insn.addr !3569
  %186 = trunc i64 %185 to i8, !insn.addr !3569
  store i8 %186, i8* %87, align 4, !insn.addr !3570
  %187 = call i64 @TunerRegWrite.487(i64 %arg1, i64 %84, i64* %171, i64* bitcast (i32* @global_var_2 to i64*), i64 0), !insn.addr !3571
  store i8 ptrtoint (i32** @global_var_13 to i8), i8* %85, align 4, !insn.addr !3572
  store i8 ptrtoint (i8* @global_var_a to i8), i8* %87, align 4, !insn.addr !3573
  %188 = call i64 @TunerRegWrite.487(i64 %arg1, i64 %84, i64* %171, i64* bitcast (i32* @global_var_2 to i64*), i64 0), !insn.addr !3574
  store i8 ptrtoint (i8* @global_var_a to i8), i8* %95, align 1, !insn.addr !3575
  br label %dec_label_pc_912d, !insn.addr !3576

dec_label_pc_8c67:                                ; preds = %dec_label_pc_88ac
  %189 = add i64 %stack_var_-224.0.reload, 184, !insn.addr !3577
  %190 = inttoptr i64 %189 to i64*, !insn.addr !3577
  store i64 ptrtoint ([3 x i8]* @global_var_d to i64), i64* %190, align 8, !insn.addr !3577
  %191 = load i32, i32* %stack_var_-57, align 4, !insn.addr !3578
  %192 = trunc i32 %191 to i8, !insn.addr !3578
  %193 = icmp eq i8 %192, 0, !insn.addr !3578
  %194 = icmp eq i1 %193, false, !insn.addr !3579
  %global_var_3584c.val = load i32, i32* @global_var_3584c, align 4
  %global_var_35834.val = load i32, i32* @global_var_35834, align 4
  %storemerge13.in = select i1 %194, i32 %global_var_3584c.val, i32 %global_var_35834.val
  %storemerge13 = zext i32 %storemerge13.in to i64
  %195 = icmp ult i64 %storemerge13, %119, !insn.addr !3580
  br i1 %195, label %dec_label_pc_8ca4, label %dec_label_pc_8d3f, !insn.addr !3580

dec_label_pc_8ca4:                                ; preds = %dec_label_pc_8c67
  %sext45 = mul i64 %86, 4294967296
  %196 = sdiv i64 %sext45, 4294967296, !insn.addr !3581
  %197 = inttoptr i64 %196 to i64*, !insn.addr !3582
  %198 = call i64 @TunerRegRead.419(i64 %arg1, i64 %84, i64* bitcast ([3 x i8]* @global_var_d to i64*), i64* %197, i64* bitcast (i32* @global_var_1 to i64*), i64 0), !insn.addr !3582
  store i8 ptrtoint ([3 x i8]* @global_var_d to i8), i8* %85, align 4, !insn.addr !3583
  %199 = load i8, i8* %87, align 4, !insn.addr !3584
  %200 = and i8 %199, -17, !insn.addr !3584
  store i8 %200, i8* %87, align 4, !insn.addr !3584
  %sext46 = mul i64 %r13.1.reload, 4294967296
  %201 = sdiv i64 %sext46, 4294967296, !insn.addr !3585
  %202 = inttoptr i64 %201 to i64*, !insn.addr !3586
  %203 = call i64 @TunerRegWrite.487(i64 %arg1, i64 %84, i64* %202, i64* bitcast (i32* @global_var_2 to i64*), i64 0), !insn.addr !3586
  store i8 ptrtoint (i32** @global_var_13 to i8), i8* %85, align 4, !insn.addr !3587
  store i8 ptrtoint (i32** @global_var_14 to i8), i8* %87, align 4, !insn.addr !3588
  %204 = call i64 @TunerRegWrite.487(i64 %arg1, i64 %84, i64* %202, i64* bitcast (i32* @global_var_2 to i64*), i64 0), !insn.addr !3589
  store i8 ptrtoint (i32** @global_var_14 to i8), i8* %95, align 1, !insn.addr !3590
  br label %dec_label_pc_912d, !insn.addr !3591

dec_label_pc_8d3f:                                ; preds = %dec_label_pc_8c67
  %global_var_35850.val = load i32, i32* @global_var_35850, align 4
  %global_var_35838.val = load i32, i32* @global_var_35838, align 4
  %storemerge11.in = select i1 %194, i32 %global_var_35850.val, i32 %global_var_35838.val
  %storemerge11 = zext i32 %storemerge11.in to i64
  %205 = icmp ugt i64 %storemerge11, %119, !insn.addr !3592
  br i1 %205, label %dec_label_pc_8d47, label %dec_label_pc_912d, !insn.addr !3592

dec_label_pc_8d47:                                ; preds = %dec_label_pc_8d3f
  %sext38 = mul i64 %86, 4294967296
  %206 = sdiv i64 %sext38, 4294967296, !insn.addr !3593
  %207 = inttoptr i64 %206 to i64*, !insn.addr !3594
  %208 = call i64 @TunerRegRead.419(i64 %arg1, i64 %84, i64* bitcast ([3 x i8]* @global_var_d to i64*), i64* %207, i64* bitcast (i32* @global_var_1 to i64*), i64 0), !insn.addr !3594
  store i8 ptrtoint ([3 x i8]* @global_var_d to i8), i8* %85, align 4, !insn.addr !3595
  %209 = load i8, i8* %87, align 4, !insn.addr !3596
  %210 = and i8 %209, -17, !insn.addr !3596
  store i8 %210, i8* %87, align 4, !insn.addr !3596
  %sext39 = mul i64 %r13.1.reload, 4294967296
  %211 = sdiv i64 %sext39, 4294967296, !insn.addr !3597
  %212 = inttoptr i64 %211 to i64*, !insn.addr !3598
  %213 = call i64 @TunerRegWrite.487(i64 %arg1, i64 %84, i64* %212, i64* bitcast (i32* @global_var_2 to i64*), i64 0), !insn.addr !3598
  store i8 ptrtoint (i8* @global_var_10 to i8), i8* %85, align 4, !insn.addr !3599
  store i8 0, i8* %87, align 4, !insn.addr !3600
  %214 = call i64 @TunerRegWrite.487(i64 %arg1, i64 %84, i64* %212, i64* bitcast (i32* @global_var_2 to i64*), i64 0), !insn.addr !3601
  %215 = call i64 @TunerRegRead.419(i64 %arg1, i64 %84, i64* bitcast (i8* @global_var_10 to i64*), i64* nonnull %75, i64* bitcast (i32* @global_var_1 to i64*), i64 0), !insn.addr !3602
  %216 = load i8*, i8** %stack_var_-58, align 8, !insn.addr !3603
  %217 = ptrtoint i8* %216 to i64, !insn.addr !3603
  %218 = sub i64 %217, sext (i8 ptrtoint (i8** @global_var_3 to i8) to i64), !insn.addr !3603
  %sext10 = mul i64 %218, 72057594037927936
  %219 = sdiv i64 %sext10, 72057594037927936, !insn.addr !3603
  %220 = inttoptr i64 %219 to i8*, !insn.addr !3603
  store i8* %220, i8** %stack_var_-58, align 8, !insn.addr !3603
  %221 = call i64 @TunerRegRead.419(i64 %arg1, i64 %84, i64* bitcast ([3 x i8]* @global_var_d to i64*), i64* %207, i64* bitcast (i32* @global_var_1 to i64*), i64 0), !insn.addr !3604
  store i8 ptrtoint ([3 x i8]* @global_var_d to i8), i8* %85, align 4, !insn.addr !3605
  %222 = load i8, i8* %87, align 4, !insn.addr !3606
  %223 = or i8 %222, ptrtoint (i8* @global_var_10 to i8), !insn.addr !3606
  store i8 %223, i8* %87, align 4, !insn.addr !3606
  %224 = call i64 @TunerRegWrite.487(i64 %arg1, i64 %84, i64* %212, i64* bitcast (i32* @global_var_2 to i64*), i64 0), !insn.addr !3607
  store i8 ptrtoint (i8* @global_var_10 to i8), i8* %85, align 4, !insn.addr !3608
  %225 = load i8*, i8** %stack_var_-58, align 8, !insn.addr !3609
  %226 = ptrtoint i8* %225 to i64, !insn.addr !3609
  %227 = trunc i64 %226 to i8, !insn.addr !3609
  store i8 %227, i8* %87, align 4, !insn.addr !3610
  %228 = call i64 @TunerRegWrite.487(i64 %arg1, i64 %84, i64* %212, i64* bitcast (i32* @global_var_2 to i64*), i64 0), !insn.addr !3611
  store i8 ptrtoint (i32** @global_var_13 to i8), i8* %85, align 4, !insn.addr !3612
  store i8 ptrtoint (i32* @global_var_2 to i8), i8* %87, align 4, !insn.addr !3613
  %229 = call i64 @TunerRegWrite.487(i64 %arg1, i64 %84, i64* %212, i64* bitcast (i32* @global_var_2 to i64*), i64 0), !insn.addr !3614
  store i8 ptrtoint (i32* @global_var_2 to i8), i8* %95, align 1, !insn.addr !3615
  br label %dec_label_pc_912d, !insn.addr !3616

dec_label_pc_8ed8:                                ; preds = %dec_label_pc_8909
  %230 = add i64 %stack_var_-224.0.reload, 184, !insn.addr !3617
  %231 = inttoptr i64 %230 to i64*, !insn.addr !3617
  store i64 0, i64* %231, align 8, !insn.addr !3617
  %232 = load i32, i32* %stack_var_-57, align 4, !insn.addr !3618
  %233 = trunc i32 %232 to i8, !insn.addr !3618
  %234 = icmp eq i8 %233, 0, !insn.addr !3618
  %235 = load i32, i32* @global_var_3583c, align 4, !insn.addr !3619
  %236 = icmp eq i1 %234, false, !insn.addr !3620
  %237 = load i32, i32* @global_var_35854, align 4, !insn.addr !3620
  %238 = select i1 %236, i32 %237, i32 %235, !insn.addr !3620
  %239 = zext i32 %238 to i64, !insn.addr !3620
  %240 = icmp ugt i64 %119, %239, !insn.addr !3621
  br i1 %240, label %dec_label_pc_8f06, label %dec_label_pc_912d, !insn.addr !3621

dec_label_pc_8f06:                                ; preds = %dec_label_pc_8ed8
  %sext15 = mul i64 %86, 4294967296
  %241 = sdiv i64 %sext15, 4294967296, !insn.addr !3622
  %242 = inttoptr i64 %241 to i64*, !insn.addr !3623
  %243 = call i64 @TunerRegRead.419(i64 %arg1, i64 %84, i64* bitcast ([3 x i8]* @global_var_d to i64*), i64* %242, i64* bitcast (i32* @global_var_1 to i64*), i64 0), !insn.addr !3623
  store i8 ptrtoint ([3 x i8]* @global_var_d to i8), i8* %85, align 4, !insn.addr !3624
  %244 = load i8, i8* %87, align 4, !insn.addr !3625
  %245 = and i8 %244, -17, !insn.addr !3625
  store i8 %245, i8* %87, align 4, !insn.addr !3625
  %sext16 = mul i64 %r13.1.reload, 4294967296
  %246 = sdiv i64 %sext16, 4294967296, !insn.addr !3626
  %247 = inttoptr i64 %246 to i64*, !insn.addr !3627
  %248 = call i64 @TunerRegWrite.487(i64 %arg1, i64 %84, i64* %247, i64* bitcast (i32* @global_var_2 to i64*), i64 0), !insn.addr !3627
  store i8 ptrtoint (i8* @global_var_10 to i8), i8* %85, align 4, !insn.addr !3628
  store i8 0, i8* %87, align 4, !insn.addr !3629
  %249 = call i64 @TunerRegWrite.487(i64 %arg1, i64 %84, i64* %247, i64* bitcast (i32* @global_var_2 to i64*), i64 0), !insn.addr !3630
  %250 = call i64 @TunerRegRead.419(i64 %arg1, i64 %84, i64* bitcast (i8* @global_var_10 to i64*), i64* nonnull %75, i64* bitcast (i32* @global_var_1 to i64*), i64 0), !insn.addr !3631
  %251 = load i8*, i8** %stack_var_-58, align 8, !insn.addr !3632
  %252 = ptrtoint i8* %251 to i64, !insn.addr !3632
  %253 = sub i64 %252, sext (i8 ptrtoint (i8** @global_var_3 to i8) to i64), !insn.addr !3632
  %sext8 = mul i64 %253, 72057594037927936
  %254 = sdiv i64 %sext8, 72057594037927936, !insn.addr !3632
  %255 = inttoptr i64 %254 to i8*, !insn.addr !3632
  store i8* %255, i8** %stack_var_-58, align 8, !insn.addr !3632
  %256 = call i64 @TunerRegRead.419(i64 %arg1, i64 %84, i64* bitcast ([3 x i8]* @global_var_d to i64*), i64* %242, i64* bitcast (i32* @global_var_1 to i64*), i64 0), !insn.addr !3633
  store i8 ptrtoint ([3 x i8]* @global_var_d to i8), i8* %85, align 4, !insn.addr !3634
  %257 = load i8, i8* %87, align 4, !insn.addr !3635
  %258 = or i8 %257, ptrtoint (i8* @global_var_10 to i8), !insn.addr !3635
  store i8 %258, i8* %87, align 4, !insn.addr !3635
  %259 = call i64 @TunerRegWrite.487(i64 %arg1, i64 %84, i64* %247, i64* bitcast (i32* @global_var_2 to i64*), i64 0), !insn.addr !3636
  store i8 ptrtoint (i8* @global_var_10 to i8), i8* %85, align 4, !insn.addr !3637
  %260 = load i8*, i8** %stack_var_-58, align 8, !insn.addr !3638
  %261 = ptrtoint i8* %260 to i64, !insn.addr !3638
  %262 = trunc i64 %261 to i8, !insn.addr !3638
  store i8 %262, i8* %87, align 4, !insn.addr !3639
  %263 = call i64 @TunerRegWrite.487(i64 %arg1, i64 %84, i64* %247, i64* bitcast (i32* @global_var_2 to i64*), i64 0), !insn.addr !3640
  store i8 ptrtoint (i32** @global_var_13 to i8), i8* %85, align 4, !insn.addr !3641
  store i8 ptrtoint (i8* @global_var_a to i8), i8* %87, align 4, !insn.addr !3642
  %264 = call i64 @TunerRegWrite.487(i64 %arg1, i64 %84, i64* %247, i64* bitcast (i32* @global_var_2 to i64*), i64 0), !insn.addr !3643
  store i8 ptrtoint (i8* @global_var_a to i8), i8* %95, align 1, !insn.addr !3644
  br label %dec_label_pc_912d, !insn.addr !3645

dec_label_pc_9097:                                ; preds = %dec_label_pc_891a, %dec_label_pc_8909
  %sext22 = mul i64 %86, 4294967296
  %265 = sdiv i64 %sext22, 4294967296, !insn.addr !3646
  %266 = inttoptr i64 %265 to i64*, !insn.addr !3647
  %267 = call i64 @TunerRegRead.419(i64 %arg1, i64 %84, i64* bitcast ([3 x i8]* @global_var_d to i64*), i64* %266, i64* bitcast (i32* @global_var_1 to i64*), i64 0), !insn.addr !3647
  store i8 ptrtoint ([3 x i8]* @global_var_d to i8), i8* %85, align 4, !insn.addr !3648
  %268 = load i8, i8* %87, align 4, !insn.addr !3649
  %269 = and i8 %268, -17, !insn.addr !3649
  store i8 %269, i8* %87, align 4, !insn.addr !3649
  %sext23 = mul i64 %r13.1.reload, 4294967296
  %270 = sdiv i64 %sext23, 4294967296, !insn.addr !3650
  %271 = inttoptr i64 %270 to i64*, !insn.addr !3651
  %272 = call i64 @TunerRegWrite.487(i64 %arg1, i64 %84, i64* %271, i64* bitcast (i32* @global_var_2 to i64*), i64 0), !insn.addr !3651
  store i8 ptrtoint (i32** @global_var_13 to i8), i8* %85, align 4, !insn.addr !3652
  store i8 ptrtoint (i8* @global_var_10 to i8), i8* %87, align 4, !insn.addr !3653
  %273 = call i64 @TunerRegWrite.487(i64 %arg1, i64 %84, i64* %271, i64* bitcast (i32* @global_var_2 to i64*), i64 0), !insn.addr !3654
  store i8 ptrtoint (i8* @global_var_10 to i8), i8* %95, align 1, !insn.addr !3655
  br label %dec_label_pc_912d, !insn.addr !3655

dec_label_pc_912d:                                ; preds = %dec_label_pc_8d3f, %dec_label_pc_892b, %dec_label_pc_8acc, %dec_label_pc_8ed8, %dec_label_pc_9097, %dec_label_pc_8f06, %dec_label_pc_8d47, %dec_label_pc_8ca4, %dec_label_pc_8ad6, %dec_label_pc_8a31, %dec_label_pc_8959, %dec_label_pc_8798
  %274 = add i32 %stack_var_-200.0.reload, ptrtoint (i32* @global_var_1 to i32), !insn.addr !3656
  %275 = add i64 %r15.0.reload, ptrtoint (i32* @global_var_1 to i64), !insn.addr !3657
  %276 = add i64 %stack_var_-224.0.reload, 80, !insn.addr !3658
  %277 = add i32 %stack_var_-208.0.reload, ptrtoint (i32* @global_var_1 to i32), !insn.addr !3659
  %278 = add i8 %stack_var_-216.0.reload, ptrtoint (i8* @global_var_6 to i8), !insn.addr !3660
  %279 = add i64 %r13.1.reload, ptrtoint (i32* @global_var_2 to i64), !insn.addr !3661
  %280 = icmp eq i64 %275, %72, !insn.addr !3662
  %281 = icmp eq i1 %280, false, !insn.addr !3663
  store i32 %274, i32* %stack_var_-200.0.reg2mem, !insn.addr !3663
  store i64 %276, i64* %stack_var_-224.0.reg2mem, !insn.addr !3663
  store i32 %277, i32* %stack_var_-208.0.reg2mem, !insn.addr !3663
  store i8 %278, i8* %stack_var_-216.0.reg2mem, !insn.addr !3663
  store i64 %279, i64* %r13.1.reg2mem, !insn.addr !3663
  store i64 %275, i64* %r15.0.reg2mem, !insn.addr !3663
  br i1 %281, label %dec_label_pc_878b, label %dec_label_pc_9162, !insn.addr !3663

dec_label_pc_9162:                                ; preds = %dec_label_pc_912d
  %282 = add i64 %arg2, ptrtoint (i32* @global_var_2 to i64), !insn.addr !3664
  %283 = inttoptr i64 %282 to i8*, !insn.addr !3664
  %284 = load i8, i8* %283, align 1, !insn.addr !3664
  %285 = icmp eq i8 %284, ptrtoint (i32* @global_var_1 to i8), !insn.addr !3665
  %286 = icmp eq i1 %285, false, !insn.addr !3666
  br i1 %286, label %dec_label_pc_921d, label %dec_label_pc_9179, !insn.addr !3666

dec_label_pc_9179:                                ; preds = %dec_label_pc_9162
  %287 = add i64 %arg2, ptrtoint (i8** @global_var_3 to i64), !insn.addr !3667
  %288 = inttoptr i64 %287 to i8*, !insn.addr !3667
  %289 = load i8, i8* %288, align 1, !insn.addr !3667
  %290 = icmp eq i8 %289, 0, !insn.addr !3667
  %291 = icmp eq i1 %290, false, !insn.addr !3668
  %292 = load i8, i8* %stack_var_-86, align 1
  %293 = icmp eq i8 %292, ptrtoint (i8* @global_var_10 to i8)
  br i1 %291, label %dec_label_pc_92c9, label %dec_label_pc_9184, !insn.addr !3668

dec_label_pc_9184:                                ; preds = %dec_label_pc_9179
  %294 = icmp eq i1 %293, false
  br i1 %294, label %dec_label_pc_91f4, label %dec_label_pc_918a, !insn.addr !3669

dec_label_pc_918a:                                ; preds = %dec_label_pc_9184
  %295 = call i64 @TC_IsLocked.534(i64 %arg1, i64 ptrtoint (i32* @global_var_2 to i64), i64 %arg4), !insn.addr !3670
  %296 = trunc i64 %295 to i8, !insn.addr !3671
  %297 = icmp eq i8 %296, ptrtoint (i32* @global_var_1 to i8), !insn.addr !3671
  %298 = icmp eq i1 %297, false, !insn.addr !3672
  br i1 %298, label %dec_label_pc_91cb, label %dec_label_pc_91a2, !insn.addr !3672

dec_label_pc_91a2:                                ; preds = %dec_label_pc_918a
  %299 = call i64 @TLIB_SetGPIO_ASIE5606B5.181(i64 %arg1, i64* bitcast (i32* @global_var_1 to i64*), i64* bitcast (i32* @global_var_1 to i64*)), !insn.addr !3673
  %300 = add i64 %arg4, 176, !insn.addr !3674
  %301 = inttoptr i64 %300 to i64*, !insn.addr !3674
  store i64 ptrtoint (i32* @global_var_1 to i64), i64* %301, align 8, !insn.addr !3674
  ret i64 ptrtoint (i32* @global_var_1 to i64), !insn.addr !3675

dec_label_pc_91cb:                                ; preds = %dec_label_pc_918a
  %302 = call i64 @TLIB_SetGPIO_ASIE5606B5.181(i64 %arg1, i64* null, i64* bitcast (i32* @global_var_1 to i64*)), !insn.addr !3676
  %303 = add i64 %arg4, 176, !insn.addr !3677
  %304 = inttoptr i64 %303 to i64*, !insn.addr !3677
  store i64 0, i64* %304, align 8, !insn.addr !3677
  ret i64 ptrtoint (i32* @global_var_1 to i64), !insn.addr !3678

dec_label_pc_91f4:                                ; preds = %dec_label_pc_9184
  %305 = call i64 @TLIB_SetGPIO_ASIE5606B5.181(i64 %arg1, i64* null, i64* bitcast (i32* @global_var_1 to i64*)), !insn.addr !3679
  %306 = add i64 %arg4, 176, !insn.addr !3680
  %307 = inttoptr i64 %306 to i64*, !insn.addr !3680
  store i64 0, i64* %307, align 8, !insn.addr !3680
  ret i64 ptrtoint (i32* @global_var_1 to i64), !insn.addr !3681

dec_label_pc_921d:                                ; preds = %dec_label_pc_9162
  %308 = icmp eq i8 %0, ptrtoint (i8* @global_var_10 to i8), !insn.addr !3682
  %309 = icmp eq i1 %308, false, !insn.addr !3683
  br i1 %309, label %dec_label_pc_92a0, label %dec_label_pc_9236, !insn.addr !3683

dec_label_pc_9236:                                ; preds = %dec_label_pc_921d
  %310 = call i64 @TC_IsLocked.534(i64 %arg1, i64 ptrtoint (i8** @global_var_3 to i64), i64 %arg4), !insn.addr !3684
  %311 = trunc i64 %310 to i8, !insn.addr !3685
  %312 = icmp eq i8 %311, ptrtoint (i32* @global_var_1 to i8), !insn.addr !3685
  %313 = icmp eq i1 %312, false, !insn.addr !3686
  br i1 %313, label %dec_label_pc_9277, label %dec_label_pc_924e, !insn.addr !3686

dec_label_pc_924e:                                ; preds = %dec_label_pc_9236
  %314 = call i64 @TLIB_SetGPIO_ASIE5606B5.181(i64 %arg1, i64* bitcast (i32* @global_var_1 to i64*), i64* bitcast (i32* @global_var_1 to i64*)), !insn.addr !3687
  %315 = add i64 %arg4, 176, !insn.addr !3688
  %316 = inttoptr i64 %315 to i64*, !insn.addr !3688
  store i64 ptrtoint (i32* @global_var_1 to i64), i64* %316, align 8, !insn.addr !3688
  ret i64 ptrtoint (i32* @global_var_1 to i64), !insn.addr !3689

dec_label_pc_9277:                                ; preds = %dec_label_pc_9236
  %317 = call i64 @TLIB_SetGPIO_ASIE5606B5.181(i64 %arg1, i64* null, i64* bitcast (i32* @global_var_1 to i64*)), !insn.addr !3690
  %318 = add i64 %arg4, 176, !insn.addr !3691
  %319 = inttoptr i64 %318 to i64*, !insn.addr !3691
  store i64 0, i64* %319, align 8, !insn.addr !3691
  ret i64 ptrtoint (i32* @global_var_1 to i64), !insn.addr !3692

dec_label_pc_92a0:                                ; preds = %dec_label_pc_921d
  %320 = call i64 @TLIB_SetGPIO_ASIE5606B5.181(i64 %arg1, i64* null, i64* bitcast (i32* @global_var_1 to i64*)), !insn.addr !3693
  %321 = add i64 %arg4, 176, !insn.addr !3694
  %322 = inttoptr i64 %321 to i64*, !insn.addr !3694
  store i64 0, i64* %322, align 8, !insn.addr !3694
  ret i64 ptrtoint (i32* @global_var_1 to i64), !insn.addr !3695

dec_label_pc_92c9:                                ; preds = %dec_label_pc_9179
  %323 = zext i8 %284 to i64, !insn.addr !3664
  %324 = icmp eq i8 %0, ptrtoint (i8* @global_var_10 to i8), !insn.addr !3696
  %325 = icmp eq i1 %324, %293
  store i64 %323, i64* %merge.reg2mem, !insn.addr !3697
  br i1 %325, label %dec_label_pc_92e8, label %dec_label_pc_8709, !insn.addr !3697

dec_label_pc_92e8:                                ; preds = %dec_label_pc_92c9
  %326 = call i64 @TC_IsLocked.534(i64 %arg1, i64 ptrtoint (i32* @global_var_2 to i64), i64 %arg4), !insn.addr !3698
  %327 = call i64 @TC_IsLocked.534(i64 %arg1, i64 ptrtoint (i8** @global_var_3 to i64), i64 %arg4), !insn.addr !3699
  %328 = trunc i64 %326 to i8, !insn.addr !3700
  %329 = icmp eq i8 %328, ptrtoint (i32* @global_var_1 to i8), !insn.addr !3700
  br i1 %329, label %dec_label_pc_931d, label %dec_label_pc_9319, !insn.addr !3701

dec_label_pc_9319:                                ; preds = %dec_label_pc_92e8
  %330 = trunc i64 %327 to i8, !insn.addr !3702
  %331 = icmp eq i8 %330, ptrtoint (i32* @global_var_1 to i8), !insn.addr !3702
  %332 = icmp eq i1 %331, false, !insn.addr !3703
  br i1 %332, label %dec_label_pc_9343, label %dec_label_pc_931d, !insn.addr !3703

dec_label_pc_931d:                                ; preds = %dec_label_pc_9319, %dec_label_pc_92e8
  %333 = call i64 @TLIB_SetGPIO_ASIE5606B5.181(i64 %arg1, i64* bitcast (i32* @global_var_1 to i64*), i64* bitcast (i32* @global_var_1 to i64*)), !insn.addr !3704
  %334 = add i64 %arg4, 176, !insn.addr !3705
  %335 = inttoptr i64 %334 to i64*, !insn.addr !3705
  store i64 ptrtoint (i32* @global_var_1 to i64), i64* %335, align 8, !insn.addr !3705
  ret i64 ptrtoint (i32* @global_var_1 to i64), !insn.addr !3706

dec_label_pc_9343:                                ; preds = %dec_label_pc_9319
  %336 = call i64 @TLIB_SetGPIO_ASIE5606B5.181(i64 %arg1, i64* null, i64* bitcast (i32* @global_var_1 to i64*)), !insn.addr !3707
  %337 = add i64 %arg4, 176, !insn.addr !3708
  %338 = inttoptr i64 %337 to i64*, !insn.addr !3708
  store i64 0, i64* %338, align 8, !insn.addr !3708
  ret i64 ptrtoint (i32* @global_var_1 to i64), !insn.addr !3709
}

define i64 @TC_GetSignaLevel(i8* %DevExt, i8 %DevCH, i8* %tuner_globe_data) local_unnamed_addr {
dec_label_pc_937d:
  %0 = call i64 @__decompiler_undefined_function_0()
  ret i64 %0
}

define i64 @TC_GetSignaLevel.245(i64 %arg1, i64 %arg2, i64 %arg3) local_unnamed_addr {
dec_label_pc_93ad:
  %0 = call i64 @mcount(), !insn.addr !3710
  %1 = urem i64 %arg2, 256, !insn.addr !3711
  %2 = call i64 @TC_IsLocked.534(i64 %arg1, i64 %1, i64 %arg3), !insn.addr !3712
  ret i64 %2, !insn.addr !3713
}

define i8 @TC_ReadSNR(i8* %DevExt, i8 %DevCH, i8* %tuner_globe_data) local_unnamed_addr {
dec_label_pc_93de:
  %storemerge.reg2mem = alloca i8, !insn.addr !3714
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = call i64 @__decompiler_undefined_function_0()
  %2 = call i64 @__decompiler_undefined_function_0()
  %3 = and i64 %2, 4294967295, !insn.addr !3714
  %4 = call i64 @TC_RemappingTunerNumber.201(i64 %3), !insn.addr !3715
  %5 = trunc i64 %4 to i8, !insn.addr !3716
  %6 = icmp eq i8 %5, 0, !insn.addr !3716
  store i8 0, i8* %storemerge.reg2mem, !insn.addr !3717
  br i1 %6, label %dec_label_pc_9404, label %dec_label_pc_93e9, !insn.addr !3717

dec_label_pc_93e9:                                ; preds = %dec_label_pc_93de
  %7 = add i64 %1, -17, !insn.addr !3718
  %8 = add i64 %1, -36, !insn.addr !3719
  %9 = inttoptr i64 %8 to i8*, !insn.addr !3719
  %10 = load i8, i8* %9, align 1, !insn.addr !3719
  %11 = call i64 @Japan4x4Tuner_TunerGetQuality.259(i8 %10, i64 %7, i64 %0), !insn.addr !3720
  %12 = inttoptr i64 %7 to i8*, !insn.addr !3721
  %13 = load i8, i8* %12, align 1, !insn.addr !3721
  store i8 %13, i8* %storemerge.reg2mem, !insn.addr !3722
  br label %dec_label_pc_9404, !insn.addr !3722

dec_label_pc_9404:                                ; preds = %dec_label_pc_93de, %dec_label_pc_93e9
  %storemerge.reload = load i8, i8* %storemerge.reg2mem
  ret i8 %storemerge.reload, !insn.addr !3723
}

define i64 @TC_ReadSNR.608(i64 %arg1, i64 %arg2, i64 %arg3) local_unnamed_addr {
dec_label_pc_940e:
  %0 = call i64 @mcount(), !insn.addr !3724
  %1 = urem i64 %arg2, 256, !insn.addr !3725
  %2 = call i64 @TC_IsLocked.534(i64 %arg1, i64 %1, i64 %arg3), !insn.addr !3726
  ret i64 %2, !insn.addr !3727
}

define i8 @TC_TSIDWrite(i8* %DevExt, i8 %DevCH, i32 %tsid, i8 %bPreset, i8* %tuner_globe_data) local_unnamed_addr {
dec_label_pc_943f:
  %storemerge.reg2mem = alloca i8, !insn.addr !3728
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = call i64 @__decompiler_undefined_function_0()
  %2 = call i64 @__decompiler_undefined_function_0()
  %3 = and i64 %2, 4294967295, !insn.addr !3728
  %4 = call i64 @TC_RemappingTunerNumber.201(i64 %3), !insn.addr !3729
  %5 = trunc i64 %4 to i8, !insn.addr !3730
  %6 = icmp eq i8 %5, 0, !insn.addr !3730
  store i8 0, i8* %storemerge.reg2mem, !insn.addr !3731
  br i1 %6, label %dec_label_pc_9465, label %dec_label_pc_944a, !insn.addr !3731

dec_label_pc_944a:                                ; preds = %dec_label_pc_943f
  %7 = add i64 %1, -17, !insn.addr !3732
  %8 = add i64 %1, -36, !insn.addr !3733
  %9 = inttoptr i64 %8 to i8*, !insn.addr !3733
  %10 = load i8, i8* %9, align 1, !insn.addr !3733
  %11 = call i64 @Japan4x4Tuner_TunerGetStrength.309(i8 %10, i64 %7, i64 %0), !insn.addr !3734
  %12 = inttoptr i64 %7 to i8*, !insn.addr !3735
  %13 = load i8, i8* %12, align 1, !insn.addr !3735
  store i8 %13, i8* %storemerge.reg2mem, !insn.addr !3736
  br label %dec_label_pc_9465, !insn.addr !3736

dec_label_pc_9465:                                ; preds = %dec_label_pc_943f, %dec_label_pc_944a
  %storemerge.reload = load i8, i8* %storemerge.reg2mem
  ret i8 %storemerge.reload, !insn.addr !3737
}

define i64 @TC_TSIDWrite.186(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4, i64 %arg5) local_unnamed_addr {
dec_label_pc_946f:
  %0 = call i64 @mcount(), !insn.addr !3738
  ret i64 %0, !insn.addr !3739
}

define i8 @TC_TSIDRead(i8* %DevExt, i8 %DevCH, i32* %tsidList, i8 %listLength, i8* %tuner_globe_data) local_unnamed_addr {
dec_label_pc_948a:
  %rax.0.reg2mem = alloca i8, !insn.addr !3740
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = call i64 @__decompiler_undefined_function_0()
  %2 = call i64 @__decompiler_undefined_function_0()
  %3 = ptrtoint i32* %tsidList to i64
  %4 = ptrtoint i8* %DevExt to i64
  %5 = lshr i64 %3, ptrtoint (i8* @global_var_8 to i64), !insn.addr !3740
  %6 = trunc i64 %5 to i8, !insn.addr !3740
  %7 = add i64 %1, -20, !insn.addr !3740
  %8 = inttoptr i64 %7 to i8*, !insn.addr !3740
  store i8 %6, i8* %8, align 1, !insn.addr !3740
  %9 = call i64 @TC_RemappingTunerNumber.201(i64 %4), !insn.addr !3741
  %10 = trunc i64 %9 to i8, !insn.addr !3742
  %11 = icmp eq i8 %10, 0, !insn.addr !3742
  store i8 0, i8* %rax.0.reg2mem, !insn.addr !3743
  br i1 %11, label %dec_label_pc_94b0, label %dec_label_pc_94a1, !insn.addr !3743

dec_label_pc_94a1:                                ; preds = %dec_label_pc_948a
  %12 = urem i64 %2, 65536, !insn.addr !3744
  %13 = load i8, i8* %8, align 1, !insn.addr !3745
  %14 = call i64 @Japan4x4Tuner_TunerSetTSID.454(i8 %13, i64 %12, i64 %0), !insn.addr !3746
  %phitmp = trunc i64 %14 to i8
  store i8 %phitmp, i8* %rax.0.reg2mem, !insn.addr !3746
  br label %dec_label_pc_94b0, !insn.addr !3746

dec_label_pc_94b0:                                ; preds = %dec_label_pc_94a1, %dec_label_pc_948a
  %rax.0.reload = load i8, i8* %rax.0.reg2mem
  ret i8 %rax.0.reload, !insn.addr !3747
}

define i64 @TC_TSIDRead.559(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4, i64 %arg5) local_unnamed_addr {
dec_label_pc_94ba:
  %stack_var_-56 = alloca i64, align 8
  %0 = call i64 @mcount(), !insn.addr !3748
  %1 = call i64 @TC_RemappingTunerNumber.201(i64 %arg1), !insn.addr !3749
  %2 = trunc i64 %arg2 to i8, !insn.addr !3750
  %3 = call i64 @Japan4x4Tuner_TunerGetTSID.265(i8 %2, i64* nonnull %stack_var_-56, i64 %arg5), !insn.addr !3751
  ret i64 %3, !insn.addr !3752
}

define i64 @cfg_read(i64 %pFdoData, i16 %regAddr, i64 %length, i8* %readData) local_unnamed_addr {
dec_label_pc_9510:
  %0 = call i64 @__decompiler_undefined_function_0()
  %rax = alloca i64, align 8
  %1 = trunc i64 %0 to i8
  %2 = mul i8 %1, 2, !insn.addr !3753
  %3 = inttoptr i64 %0 to i8*, !insn.addr !3753
  store i8 %2, i8* %3, align 1, !insn.addr !3753
  %4 = bitcast i64* %rax to i8*
  %5 = load i8, i8* %4, align 8, !insn.addr !3754
  %6 = load i64, i64* %rax, align 8
  %7 = trunc i64 %6 to i8, !insn.addr !3754
  %8 = add i8 %5, %7, !insn.addr !3754
  %9 = inttoptr i64 %6 to i8*, !insn.addr !3754
  store i8 %8, i8* %9, align 1, !insn.addr !3754
  %10 = load i64, i64* %rax, align 8, !insn.addr !3755
  ret i64 %10, !insn.addr !3755
}

define i64 @cfg_read.541(i64 %arg1, i64 %arg2, i64 %arg3, i64* %arg4) local_unnamed_addr {
dec_label_pc_9540:
  %0 = ptrtoint i64* %arg4 to i64
  %1 = call i64 @mcount(), !insn.addr !3756
  %2 = urem i64 %arg2, 65536, !insn.addr !3757
  %3 = add i64 %arg1, 22520, !insn.addr !3758
  %4 = inttoptr i64 %3 to i64*, !insn.addr !3758
  %5 = load i64, i64* %4, align 8, !insn.addr !3758
  %6 = add i64 %5, %2, !insn.addr !3758
  %7 = inttoptr i64 %6 to i32*, !insn.addr !3759
  %8 = load i32, i32* %7, align 4, !insn.addr !3759
  %9 = trunc i32 %8 to i8, !insn.addr !3760
  %10 = bitcast i64* %arg4 to i8*, !insn.addr !3760
  store i8 %9, i8* %10, align 1, !insn.addr !3760
  %11 = udiv i32 %8, 256
  %12 = trunc i32 %11 to i8, !insn.addr !3761
  %13 = add i64 %0, ptrtoint (i32* @global_var_1 to i64), !insn.addr !3761
  %14 = inttoptr i64 %13 to i8*, !insn.addr !3761
  store i8 %12, i8* %14, align 1, !insn.addr !3761
  ret i64 0, !insn.addr !3762
}

define i64 @cfg_write(i64 %pFdoData, i16 %regAddr, i64 %length, i8* %writeData) local_unnamed_addr {
dec_label_pc_958a:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = call i64 @__decompiler_undefined_function_0()
  %2 = call i64 @__decompiler_undefined_function_0()
  %3 = ptrtoint i8* %writeData to i64
  %4 = trunc i64 %0 to i8, !insn.addr !3763
  %5 = add i64 %2, %3
  %6 = add i64 %5, ptrtoint (i32* @global_var_2 to i64), !insn.addr !3763
  %7 = inttoptr i64 %6 to i8*, !insn.addr !3763
  store i8 %4, i8* %7, align 1, !insn.addr !3763
  %8 = lshr i64 %1, ptrtoint (i32** @global_var_18 to i64), !insn.addr !3764
  %9 = trunc i64 %8 to i8, !insn.addr !3765
  %10 = add i64 %5, ptrtoint (i8** @global_var_3 to i64), !insn.addr !3765
  %11 = inttoptr i64 %10 to i8*, !insn.addr !3765
  store i8 %9, i8* %11, align 1, !insn.addr !3765
  ret i64 ptrtoint (i32* @global_var_1 to i64), !insn.addr !3766
}

define i64 @cfg_write.154(i64 %arg1, i64 %arg2, i64 %arg3, i64* %arg4) local_unnamed_addr {
dec_label_pc_95ba:
  %0 = call i64 @mcount(), !insn.addr !3767
  ret i64 0, !insn.addr !3768
}

define void @i2c_soft_reset_2(i64 %pFdoData) local_unnamed_addr {
dec_label_pc_9609:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = call i64 @__decompiler_undefined_function_0()
  %2 = call i64 @__decompiler_undefined_function_0()
  %3 = mul i64 %1, ptrtoint (i32* @global_var_1 to i64), !insn.addr !3769
  %4 = add i64 %3, %0, !insn.addr !3769
  %5 = trunc i64 %4 to i32, !insn.addr !3769
  %6 = and i64 %2, 4294967295, !insn.addr !3770
  %7 = add i64 %pFdoData, 22520, !insn.addr !3771
  %8 = inttoptr i64 %7 to i64*, !insn.addr !3771
  %9 = load i64, i64* %8, align 8, !insn.addr !3771
  %10 = add i64 %9, %6, !insn.addr !3771
  %11 = inttoptr i64 %10 to i32*, !insn.addr !3772
  store i32 %5, i32* %11, align 4, !insn.addr !3772
  ret void, !insn.addr !3773
}

define i64 @i2c_soft_reset_2.348(i64 %arg1) local_unnamed_addr {
dec_label_pc_9639:
  %0 = call i64 @mcount(), !insn.addr !3774
  %1 = add i64 %arg1, 22520, !insn.addr !3775
  %2 = inttoptr i64 %1 to i64*, !insn.addr !3775
  %3 = load i64, i64* %2, align 8, !insn.addr !3775
  %4 = add i64 %arg1, 25168, !insn.addr !3776
  %5 = inttoptr i64 %4 to i64*, !insn.addr !3776
  %6 = load i64, i64* %5, align 8, !insn.addr !3776
  %7 = add i64 %6, %3, !insn.addr !3776
  %8 = inttoptr i64 %7 to i32*, !insn.addr !3777
  %9 = load i32, i32* %8, align 4, !insn.addr !3777
  %10 = or i32 %9, 32, !insn.addr !3778
  %11 = zext i32 %10 to i64, !insn.addr !3778
  ret i64 %11, !insn.addr !3778
}

define void @i2c_soft_reset(i64 %pFdoData) local_unnamed_addr {
dec_label_pc_9663:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = call i64 @__decompiler_undefined_function_0()
  %2 = add i64 %1, ptrtoint (i8** @global_var_3 to i64), !insn.addr !3779
  %3 = inttoptr i64 %2 to i8*, !insn.addr !3779
  %4 = load i8, i8* %3, align 1, !insn.addr !3779
  %5 = trunc i64 %0 to i8, !insn.addr !3779
  %6 = add i8 %4, %5, !insn.addr !3779
  store i8 %6, i8* %3, align 1, !insn.addr !3779
  ret void, !insn.addr !3780
}

define i64 @function_9669(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4) local_unnamed_addr {
dec_label_pc_9669:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = call i64 @__decompiler_undefined_function_0()
  %2 = trunc i64 %1 to i8
  %3 = mul i8 %2, 2, !insn.addr !3781
  %4 = inttoptr i64 %1 to i8*, !insn.addr !3781
  store i8 %3, i8* %4, align 1, !insn.addr !3781
  %5 = trunc i64 %1 to i32, !insn.addr !3782
  %6 = inttoptr i64 %arg3 to i32*, !insn.addr !3782
  store i32 %5, i32* %6, align 4, !insn.addr !3782
  %7 = call i64 @DelayMilliseconds_i2c.249(i64* bitcast (i8* @global_var_a to i64*)), !insn.addr !3783
  %8 = add i64 %0, 22520, !insn.addr !3784
  %9 = inttoptr i64 %8 to i64*, !insn.addr !3784
  %10 = load i64, i64* %9, align 8, !insn.addr !3784
  %11 = add i64 %0, 25168, !insn.addr !3785
  %12 = inttoptr i64 %11 to i64*, !insn.addr !3785
  %13 = load i64, i64* %12, align 8, !insn.addr !3785
  %14 = add i64 %13, %10, !insn.addr !3785
  %15 = inttoptr i64 %14 to i32*, !insn.addr !3786
  store i32 12800, i32* %15, align 4, !insn.addr !3786
  ret i64 12800, !insn.addr !3787
}

define i64 @i2c_soft_reset.602(i64 %arg1) local_unnamed_addr {
dec_label_pc_9693:
  %0 = call i64 @mcount(), !insn.addr !3788
  %1 = add i64 %arg1, 22794, !insn.addr !3789
  %2 = inttoptr i64 %1 to i8*, !insn.addr !3789
  store i8 ptrtoint (i32* @global_var_1 to i8), i8* %2, align 1, !insn.addr !3789
  %3 = add i64 %arg1, 22520, !insn.addr !3790
  %4 = inttoptr i64 %3 to i64*, !insn.addr !3790
  %5 = load i64, i64* %4, align 8, !insn.addr !3790
  %6 = add i64 %arg1, 25112, !insn.addr !3791
  %7 = inttoptr i64 %6 to i64*, !insn.addr !3791
  %8 = load i64, i64* %7, align 8, !insn.addr !3791
  %9 = add i64 %8, %5, !insn.addr !3791
  %10 = inttoptr i64 %9 to i32*, !insn.addr !3792
  %11 = load i32, i32* %10, align 4, !insn.addr !3792
  %12 = or i32 %11, 32, !insn.addr !3793
  %13 = zext i32 %12 to i64, !insn.addr !3793
  ret i64 %13, !insn.addr !3793
}

define i64 @i2c_write_2(i64 %pFdoData, i8 %slvAddr, i8 %slvMode, i8 %regAddr, i8* %writeData, i64 %length, i8 %byteCnt, i8 %retryCnt) local_unnamed_addr {
dec_label_pc_96c4:
  %rdi = alloca i64, align 8
  %0 = call i64 @__decompiler_undefined_function_0()
  %rdx = alloca i64, align 8
  %1 = call i64 @__decompiler_undefined_function_0()
  %2 = sext i8 %regAddr to i64
  %3 = sext i8 %slvMode to i64
  %4 = add i64 %1, ptrtoint (i8** @global_var_3 to i64), !insn.addr !3794
  %5 = inttoptr i64 %4 to i8*, !insn.addr !3794
  %6 = load i8, i8* %5, align 1, !insn.addr !3794
  %7 = add i8 %6, %regAddr, !insn.addr !3794
  %8 = icmp ult i8 %7, %6, !insn.addr !3794
  store i8 %7, i8* %5, align 1, !insn.addr !3794
  %9 = and i64 %pFdoData, 4294967295, !insn.addr !3795
  %10 = and i64 %1, 4294967295, !insn.addr !3795
  %11 = bitcast i64* %rdx to i8*
  %12 = load i8, i8* %11, align 8, !insn.addr !3796
  %13 = lshr i64 %9, ptrtoint (i8* @global_var_8 to i64), !insn.addr !3796
  %14 = trunc i64 %13 to i8, !insn.addr !3796
  %.neg2 = sext i1 %8 to i8
  %.neg3 = sub i8 %12, %14, !insn.addr !3796
  %15 = add i8 %.neg3, %.neg2, !insn.addr !3796
  %16 = inttoptr i64 %3 to i8*, !insn.addr !3796
  store i8 %15, i8* %16, align 1, !insn.addr !3796
  %17 = add nsw i64 %2, 704258, !insn.addr !3797
  %18 = inttoptr i64 %17 to i8*, !insn.addr !3797
  %19 = load i8, i8* %18, align 1, !insn.addr !3797
  %20 = add i8 %19, %regAddr, !insn.addr !3797
  store i8 %20, i8* %18, align 1, !insn.addr !3797
  %21 = bitcast i64* %rdi to i8*
  %22 = load i8, i8* %21, align 8, !insn.addr !3798
  %23 = trunc i64 %pFdoData to i8, !insn.addr !3798
  %24 = add i8 %22, %23, !insn.addr !3798
  %25 = inttoptr i64 %9 to i8*, !insn.addr !3798
  store i8 %24, i8* %25, align 1, !insn.addr !3798
  %26 = inttoptr i64 %10 to i64*, !insn.addr !3799
  %27 = call i64 @DelayMilliseconds_i2c.249(i64* %26), !insn.addr !3799
  %28 = add i64 %0, 22520, !insn.addr !3800
  %29 = inttoptr i64 %28 to i64*, !insn.addr !3800
  %30 = load i64, i64* %29, align 8, !insn.addr !3800
  %31 = add i64 %0, 25112, !insn.addr !3801
  %32 = inttoptr i64 %31 to i64*, !insn.addr !3801
  %33 = load i64, i64* %32, align 8, !insn.addr !3801
  %34 = add i64 %33, %30, !insn.addr !3801
  %35 = inttoptr i64 %34 to i32*, !insn.addr !3802
  store i32 12800, i32* %35, align 4, !insn.addr !3802
  ret i64 12800, !insn.addr !3803
}

define i64 @i2c_write_2.595(i64 %arg1, i64 %arg2, i64* %arg3, i64 %arg4, i8* %arg5, i64* %arg6, i64* %arg7, i64 %arg8) local_unnamed_addr {
dec_label_pc_96f4:
  %r13.1.reg2mem = alloca i64, !insn.addr !3804
  %r13.0.reg2mem = alloca i64, !insn.addr !3804
  %r15.0.reg2mem = alloca i64, !insn.addr !3804
  %rsi.2.reg2mem = alloca i64, !insn.addr !3804
  %rsi.1.reg2mem = alloca i64, !insn.addr !3804
  %rsi.0.reg2mem = alloca i64, !insn.addr !3804
  %rax.0.reg2mem = alloca i64, !insn.addr !3804
  %r14.0.reg2mem = alloca i64, !insn.addr !3804
  %rdi.0.reg2mem = alloca i32, !insn.addr !3804
  %.reg2mem = alloca i64, !insn.addr !3804
  %r8 = alloca i64, align 8
  %0 = call i64 @mcount(), !insn.addr !3805
  %1 = add i64 %arg1, 22520, !insn.addr !3806
  %2 = inttoptr i64 %1 to i64*, !insn.addr !3806
  %3 = load i64, i64* %2, align 8, !insn.addr !3806
  %4 = add i64 %arg1, 25184, !insn.addr !3807
  %5 = inttoptr i64 %4 to i64*, !insn.addr !3807
  %6 = load i64, i64* %5, align 8, !insn.addr !3807
  %7 = add i64 %6, %3, !insn.addr !3807
  %8 = inttoptr i64 %7 to i32*, !insn.addr !3808
  %9 = load i32, i32* %8, align 4, !insn.addr !3808
  %10 = trunc i32 %9 to i8
  %11 = and i8 %10, ptrtoint (i8** @global_var_1f to i8), !insn.addr !3809
  %12 = icmp eq i8 %11, ptrtoint (i8* @global_var_10 to i8), !insn.addr !3809
  %13 = and i32 %9, 7936
  %14 = icmp eq i32 %13, 0, !insn.addr !3810
  %or.cond = icmp eq i1 %14, %12
  store i64 %3, i64* %.reg2mem, !insn.addr !3811
  br i1 %or.cond, label %dec_label_pc_97aa, label %dec_label_pc_9753, !insn.addr !3811

dec_label_pc_9753:                                ; preds = %dec_label_pc_96f4
  %15 = add i64 %arg1, 25112, !insn.addr !3812
  %16 = inttoptr i64 %15 to i64*, !insn.addr !3812
  %17 = load i64, i64* %16, align 8, !insn.addr !3812
  %18 = add i64 %17, %3, !insn.addr !3812
  %19 = inttoptr i64 %18 to i32*, !insn.addr !3813
  %20 = load i32, i32* %19, align 4, !insn.addr !3813
  %21 = or i32 %20, ptrtoint (i32** @global_var_20 to i32), !insn.addr !3814
  store i32 %21, i32* %19, align 4, !insn.addr !3815
  %22 = call i64 @DelayNanoseconds.440(i64* bitcast (i32* @global_var_1 to i64*)), !insn.addr !3816
  %23 = and i32 %21, -33, !insn.addr !3817
  %24 = load i64, i64* %2, align 8, !insn.addr !3818
  %25 = load i64, i64* %16, align 8, !insn.addr !3819
  %26 = add i64 %25, %24, !insn.addr !3819
  %27 = inttoptr i64 %26 to i32*, !insn.addr !3820
  store i32 %23, i32* %27, align 4, !insn.addr !3820
  %28 = call i64 @DelayNanoseconds.440(i64* bitcast (i32* @global_var_1 to i64*)), !insn.addr !3821
  %.pre = load i64, i64* %2, align 8
  store i64 %.pre, i64* %.reg2mem, !insn.addr !3821
  br label %dec_label_pc_97aa, !insn.addr !3821

dec_label_pc_97aa:                                ; preds = %dec_label_pc_96f4, %dec_label_pc_9753
  %29 = ptrtoint i64* %arg3 to i64
  %30 = and i64 %arg4, 4294967295, !insn.addr !3822
  %.reload = load i64, i64* %.reg2mem, !insn.addr !3823
  %31 = add i64 %arg1, 25152, !insn.addr !3824
  %32 = inttoptr i64 %31 to i64*, !insn.addr !3824
  %33 = load i64, i64* %32, align 8, !insn.addr !3824
  %34 = add i64 %33, %.reload, !insn.addr !3824
  %35 = inttoptr i64 %34 to i32*, !insn.addr !3825
  store i32 0, i32* %35, align 4, !insn.addr !3825
  %36 = trunc i64 %29 to i8, !insn.addr !3826
  %37 = icmp ugt i8 %36, ptrtoint (i8** @global_var_3 to i8)
  store i32 196, i32* %rdi.0.reg2mem, !insn.addr !3827
  store i64 %30, i64* %r14.0.reg2mem, !insn.addr !3827
  br i1 %37, label %dec_label_pc_97fa, label %dec_label_pc_97c5, !insn.addr !3827

dec_label_pc_97c5:                                ; preds = %dec_label_pc_97aa
  %38 = icmp ult i8 %36, ptrtoint (i32* @global_var_2 to i8), !insn.addr !3828
  %39 = icmp eq i1 %38, false, !insn.addr !3829
  %spec.select = select i1 %39, i32 192, i32 128
  %spec.select4 = select i1 %39, i64 %30, i64 0
  store i32 %spec.select, i32* %rdi.0.reg2mem
  store i64 %spec.select4, i64* %r14.0.reg2mem
  br label %dec_label_pc_97fa

dec_label_pc_97fa:                                ; preds = %dec_label_pc_97c5, %dec_label_pc_97aa
  %40 = ptrtoint i64* %arg7 to i64
  %41 = ptrtoint i8* %arg5 to i64
  %r14.0.reload = load i64, i64* %r14.0.reg2mem
  %rdi.0.reload = load i32, i32* %rdi.0.reg2mem
  %42 = trunc i64 %r14.0.reload to i32, !insn.addr !3830
  %43 = trunc i64 %arg2 to i32
  %44 = urem i32 %43, 256, !insn.addr !3831
  %45 = shl i32 %44, ptrtoint (i8* @global_var_8 to i32), !insn.addr !3832
  %46 = urem i32 %42, 256, !insn.addr !3833
  %47 = add i32 %46, %45, !insn.addr !3833
  %48 = load i64, i64* %2, align 8, !insn.addr !3834
  %49 = add i64 %arg1, 25160, !insn.addr !3835
  %50 = inttoptr i64 %49 to i64*, !insn.addr !3835
  %51 = load i64, i64* %50, align 8, !insn.addr !3835
  %52 = add i64 %51, %48, !insn.addr !3835
  %53 = inttoptr i64 %52 to i32*, !insn.addr !3836
  store i32 %47, i32* %53, align 4, !insn.addr !3836
  %54 = add i64 %41, ptrtoint (i8** @global_var_3 to i64), !insn.addr !3837
  %55 = inttoptr i64 %54 to i8*, !insn.addr !3837
  %56 = load i8, i8* %55, align 1, !insn.addr !3837
  %57 = zext i8 %56 to i64, !insn.addr !3837
  %58 = shl i64 %57, ptrtoint (i8* @global_var_8 to i64), !insn.addr !3838
  %59 = add i64 %41, ptrtoint (i32* @global_var_2 to i64), !insn.addr !3839
  %60 = inttoptr i64 %59 to i8*, !insn.addr !3839
  %61 = load i8, i8* %60, align 1, !insn.addr !3839
  %62 = zext i8 %61 to i64, !insn.addr !3839
  %63 = add i64 %58, %62, !insn.addr !3840
  %64 = shl i64 %63, ptrtoint (i8* @global_var_8 to i64), !insn.addr !3841
  %65 = add i64 %41, ptrtoint (i32* @global_var_1 to i64), !insn.addr !3842
  %66 = inttoptr i64 %65 to i8*, !insn.addr !3842
  %67 = load i8, i8* %66, align 1, !insn.addr !3842
  %68 = zext i8 %67 to i64, !insn.addr !3842
  %69 = add i64 %64, %68, !insn.addr !3843
  %70 = shl i64 %69, ptrtoint (i8* @global_var_8 to i64), !insn.addr !3844
  %71 = bitcast i64* %r8 to i8*
  %72 = load i8, i8* %71, align 8, !insn.addr !3845
  %73 = zext i8 %72 to i64, !insn.addr !3845
  %74 = mul i64 %73, ptrtoint (i32* @global_var_1 to i64), !insn.addr !3846
  %75 = add i64 %70, %74, !insn.addr !3846
  %76 = trunc i64 %75 to i32, !insn.addr !3846
  %77 = load i64, i64* %2, align 8, !insn.addr !3847
  %78 = add i64 %arg1, 25200, !insn.addr !3848
  %79 = inttoptr i64 %78 to i64*, !insn.addr !3848
  %80 = load i64, i64* %79, align 8, !insn.addr !3848
  %81 = add i64 %80, %77, !insn.addr !3848
  %82 = inttoptr i64 %81 to i32*, !insn.addr !3849
  store i32 %76, i32* %82, align 4, !insn.addr !3849
  %83 = trunc i64 %40 to i32
  %84 = urem i32 %83, 256, !insn.addr !3850
  %85 = icmp ugt i32 %84, ptrtoint (i16* @global_var_4 to i32)
  store i64 %41, i64* %rax.0.reg2mem, !insn.addr !3851
  store i64 ptrtoint (i16* @global_var_4 to i64), i64* %rsi.0.reg2mem, !insn.addr !3851
  store i64 ptrtoint (i16* @global_var_4 to i64), i64* %rsi.1.reg2mem, !insn.addr !3851
  br i1 %85, label %dec_label_pc_9867, label %dec_label_pc_98ad, !insn.addr !3851

dec_label_pc_9867:                                ; preds = %dec_label_pc_97fa, %dec_label_pc_9867
  %rsi.0.reload = load i64, i64* %rsi.0.reg2mem
  %rax.0.reload = load i64, i64* %rax.0.reg2mem
  %86 = add i64 %rax.0.reload, ptrtoint (i8** @global_var_7 to i64), !insn.addr !3852
  %87 = inttoptr i64 %86 to i8*, !insn.addr !3852
  %88 = load i8, i8* %87, align 1, !insn.addr !3852
  %89 = zext i8 %88 to i64, !insn.addr !3852
  %90 = shl i64 %89, ptrtoint (i8* @global_var_8 to i64), !insn.addr !3853
  %91 = add i64 %rax.0.reload, ptrtoint (i8* @global_var_6 to i64), !insn.addr !3854
  %92 = inttoptr i64 %91 to i8*, !insn.addr !3854
  %93 = load i8, i8* %92, align 1, !insn.addr !3854
  %94 = zext i8 %93 to i64, !insn.addr !3854
  %95 = add i64 %90, %94, !insn.addr !3855
  %96 = shl i64 %95, ptrtoint (i8* @global_var_8 to i64), !insn.addr !3856
  %97 = add i64 %rax.0.reload, ptrtoint (i8* @global_var_5 to i64), !insn.addr !3857
  %98 = inttoptr i64 %97 to i8*, !insn.addr !3857
  %99 = load i8, i8* %98, align 1, !insn.addr !3857
  %100 = zext i8 %99 to i64, !insn.addr !3857
  %101 = add i64 %96, %100, !insn.addr !3858
  %102 = shl i64 %101, ptrtoint (i8* @global_var_8 to i64), !insn.addr !3859
  %103 = add i64 %rax.0.reload, ptrtoint (i16* @global_var_4 to i64), !insn.addr !3860
  %104 = inttoptr i64 %103 to i8*, !insn.addr !3860
  %105 = load i8, i8* %104, align 1, !insn.addr !3860
  %106 = zext i8 %105 to i64, !insn.addr !3860
  %107 = mul i64 %106, ptrtoint (i32* @global_var_1 to i64), !insn.addr !3861
  %108 = add i64 %102, %107, !insn.addr !3861
  %109 = trunc i64 %108 to i32, !insn.addr !3861
  %110 = load i64, i64* %2, align 8, !insn.addr !3862
  %111 = load i64, i64* %79, align 8, !insn.addr !3863
  %112 = add i64 %111, %110, !insn.addr !3863
  %113 = inttoptr i64 %112 to i32*, !insn.addr !3864
  store i32 %109, i32* %113, align 4, !insn.addr !3864
  %114 = add i64 %rsi.0.reload, zext (i32 ptrtoint (i16* @global_var_4 to i32) to i64), !insn.addr !3865
  %115 = and i64 %114, 4294967295, !insn.addr !3865
  %116 = trunc i64 %114 to i32, !insn.addr !3866
  %117 = icmp ugt i32 %84, %116, !insn.addr !3866
  %118 = icmp eq i32 %116, ptrtoint (i8* @global_var_10 to i32), !insn.addr !3867
  %119 = icmp eq i1 %118, false, !insn.addr !3868
  %or.cond8 = icmp eq i1 %117, %119
  store i64 %103, i64* %rax.0.reg2mem, !insn.addr !3869
  store i64 %115, i64* %rsi.0.reg2mem, !insn.addr !3869
  store i64 %115, i64* %rsi.1.reg2mem, !insn.addr !3869
  br i1 %or.cond8, label %dec_label_pc_9867, label %dec_label_pc_98ad, !insn.addr !3869

dec_label_pc_98ad:                                ; preds = %dec_label_pc_9867, %dec_label_pc_97fa
  %rsi.1.reload = load i64, i64* %rsi.1.reg2mem
  %120 = shl i32 %84, ptrtoint (i8* @global_var_8 to i32), !insn.addr !3870
  %121 = add i32 %rdi.0.reload, %120, !insn.addr !3871
  %122 = load i64, i64* %2, align 8, !insn.addr !3872
  %123 = load i64, i64* %32, align 8, !insn.addr !3873
  %124 = add i64 %123, %122, !insn.addr !3873
  %125 = trunc i32 %121 to i16, !insn.addr !3874
  %126 = inttoptr i64 %124 to i16*, !insn.addr !3874
  store i16 %125, i16* %126, align 2, !insn.addr !3874
  store i64 %rsi.1.reload, i64* %rsi.2.reg2mem, !insn.addr !3875
  store i64 0, i64* %r15.0.reg2mem, !insn.addr !3875
  br label %dec_label_pc_98cf, !insn.addr !3875

dec_label_pc_98cf:                                ; preds = %dec_label_pc_99eb, %dec_label_pc_98ad
  %r15.0.reload = load i64, i64* %r15.0.reg2mem
  %rsi.2.reload = load i64, i64* %rsi.2.reg2mem
  %127 = trunc i64 %rsi.2.reload to i32, !insn.addr !3876
  %128 = icmp ugt i32 %84, %127, !insn.addr !3876
  %129 = icmp eq i1 %128, false, !insn.addr !3877
  br i1 %129, label %dec_label_pc_999d, label %dec_label_pc_98d8, !insn.addr !3877

dec_label_pc_98d8:                                ; preds = %dec_label_pc_98cf
  %130 = load i64, i64* %2, align 8, !insn.addr !3878
  %131 = load i64, i64* %5, align 8, !insn.addr !3879
  %132 = add i64 %131, %130, !insn.addr !3879
  %133 = inttoptr i64 %132 to i32*, !insn.addr !3880
  %134 = load i32, i32* %133, align 4, !insn.addr !3880
  %135 = and i32 %134, zext (i8 ptrtoint (i8** @global_var_1f to i8) to i32)
  %136 = icmp eq i32 %135, 0, !insn.addr !3881
  br i1 %136, label %dec_label_pc_999d, label %dec_label_pc_9901, !insn.addr !3882

dec_label_pc_9901:                                ; preds = %dec_label_pc_98d8
  %137 = and i64 %rsi.2.reload, 4294967295, !insn.addr !3883
  %138 = mul i64 %137, ptrtoint (i32* @global_var_1 to i64), !insn.addr !3884
  %139 = add i64 %138, %54, !insn.addr !3884
  %140 = inttoptr i64 %139 to i8*, !insn.addr !3884
  %141 = load i8, i8* %140, align 1, !insn.addr !3884
  %142 = zext i8 %141 to i64, !insn.addr !3884
  %143 = shl i64 %142, ptrtoint (i8* @global_var_8 to i64), !insn.addr !3885
  %144 = add i64 %138, %59, !insn.addr !3886
  %145 = inttoptr i64 %144 to i8*, !insn.addr !3886
  %146 = load i8, i8* %145, align 1, !insn.addr !3886
  %147 = zext i8 %146 to i64, !insn.addr !3886
  %148 = add i64 %143, %147, !insn.addr !3887
  %149 = shl i64 %148, ptrtoint (i8* @global_var_8 to i64), !insn.addr !3888
  %150 = add i64 %138, %65, !insn.addr !3889
  %151 = inttoptr i64 %150 to i8*, !insn.addr !3889
  %152 = load i8, i8* %151, align 1, !insn.addr !3889
  %153 = zext i8 %152 to i64, !insn.addr !3889
  %154 = add i64 %149, %153, !insn.addr !3890
  %155 = shl i64 %154, ptrtoint (i8* @global_var_8 to i64), !insn.addr !3891
  %156 = add i64 %138, %41, !insn.addr !3892
  %157 = inttoptr i64 %156 to i8*, !insn.addr !3892
  %158 = load i8, i8* %157, align 1, !insn.addr !3892
  %159 = zext i8 %158 to i64, !insn.addr !3892
  %160 = mul i64 %159, ptrtoint (i32* @global_var_1 to i64), !insn.addr !3893
  %161 = add i64 %155, %160, !insn.addr !3893
  %162 = trunc i64 %161 to i32, !insn.addr !3893
  %163 = load i64, i64* %79, align 8, !insn.addr !3894
  %164 = add i64 %163, %130, !insn.addr !3894
  %165 = inttoptr i64 %164 to i32*, !insn.addr !3895
  store i32 %162, i32* %165, align 4, !insn.addr !3895
  %166 = add i64 %rsi.2.reload, zext (i32 ptrtoint (i16* @global_var_4 to i32) to i64), !insn.addr !3896
  %167 = and i64 %166, 4294967295, !insn.addr !3896
  %168 = trunc i64 %166 to i32, !insn.addr !3897
  %169 = icmp ugt i32 %84, %168, !insn.addr !3897
  store i64 %167, i64* %r13.0.reg2mem, !insn.addr !3898
  store i64 %167, i64* %r13.1.reg2mem, !insn.addr !3898
  br i1 %169, label %dec_label_pc_9992, label %dec_label_pc_99a0, !insn.addr !3898

dec_label_pc_994a:                                ; preds = %dec_label_pc_9992
  %170 = mul i64 %r13.0.reload, ptrtoint (i32* @global_var_1 to i64), !insn.addr !3899
  %171 = add i64 %170, %54, !insn.addr !3899
  %172 = inttoptr i64 %171 to i8*, !insn.addr !3899
  %173 = load i8, i8* %172, align 1, !insn.addr !3899
  %174 = zext i8 %173 to i64, !insn.addr !3899
  %175 = shl i64 %174, ptrtoint (i8* @global_var_8 to i64), !insn.addr !3900
  %176 = add i64 %170, %59, !insn.addr !3901
  %177 = inttoptr i64 %176 to i8*, !insn.addr !3901
  %178 = load i8, i8* %177, align 1, !insn.addr !3901
  %179 = zext i8 %178 to i64, !insn.addr !3901
  %180 = add i64 %175, %179, !insn.addr !3902
  %181 = shl i64 %180, ptrtoint (i8* @global_var_8 to i64), !insn.addr !3903
  %182 = add i64 %170, %65, !insn.addr !3904
  %183 = inttoptr i64 %182 to i8*, !insn.addr !3904
  %184 = load i8, i8* %183, align 1, !insn.addr !3904
  %185 = zext i8 %184 to i64, !insn.addr !3904
  %186 = add i64 %181, %185, !insn.addr !3905
  %187 = shl i64 %186, ptrtoint (i8* @global_var_8 to i64), !insn.addr !3906
  %188 = add i64 %170, %41, !insn.addr !3907
  %189 = inttoptr i64 %188 to i8*, !insn.addr !3907
  %190 = load i8, i8* %189, align 1, !insn.addr !3907
  %191 = zext i8 %190 to i64, !insn.addr !3907
  %192 = mul i64 %191, ptrtoint (i32* @global_var_1 to i64), !insn.addr !3908
  %193 = add i64 %187, %192, !insn.addr !3908
  %194 = trunc i64 %193 to i32, !insn.addr !3908
  %195 = load i64, i64* %2, align 8, !insn.addr !3909
  %196 = load i64, i64* %79, align 8, !insn.addr !3910
  %197 = add i64 %196, %195, !insn.addr !3910
  %198 = inttoptr i64 %197 to i32*, !insn.addr !3911
  store i32 %194, i32* %198, align 4, !insn.addr !3911
  %199 = add nuw nsw i64 %r13.0.reload, zext (i32 ptrtoint (i16* @global_var_4 to i32) to i64), !insn.addr !3912
  %200 = and i64 %199, 4294967295, !insn.addr !3912
  %201 = trunc i64 %199 to i32, !insn.addr !3913
  %202 = icmp ugt i32 %84, %201, !insn.addr !3913
  %203 = icmp eq i1 %202, false, !insn.addr !3914
  store i64 %200, i64* %r13.0.reg2mem, !insn.addr !3914
  store i64 %200, i64* %r13.1.reg2mem, !insn.addr !3914
  br i1 %203, label %dec_label_pc_99a0, label %dec_label_pc_9992, !insn.addr !3914

dec_label_pc_9992:                                ; preds = %dec_label_pc_9901, %dec_label_pc_994a
  %r13.0.reload = load i64, i64* %r13.0.reg2mem
  %204 = trunc i64 %r13.0.reload to i32, !insn.addr !3915
  %205 = sub i32 %204, %127, !insn.addr !3916
  %206 = icmp ult i32 %205, %135, !insn.addr !3917
  store i64 %r13.0.reload, i64* %r13.1.reg2mem, !insn.addr !3918
  br i1 %206, label %dec_label_pc_994a, label %dec_label_pc_99a0, !insn.addr !3918

dec_label_pc_999d:                                ; preds = %dec_label_pc_98d8, %dec_label_pc_98cf
  %207 = and i64 %rsi.2.reload, 4294967295, !insn.addr !3919
  store i64 %207, i64* %r13.1.reg2mem, !insn.addr !3919
  br label %dec_label_pc_99a0, !insn.addr !3919

dec_label_pc_99a0:                                ; preds = %dec_label_pc_9992, %dec_label_pc_994a, %dec_label_pc_9901, %dec_label_pc_999d
  %208 = add nuw nsw i64 %r15.0.reload, zext (i32 ptrtoint (i32* @global_var_1 to i32) to i64), !insn.addr !3920
  %209 = call i64 @DelayMilliseconds_i2c.249(i64* bitcast (i32* @global_var_1 to i64*)), !insn.addr !3921
  %210 = load i64, i64* %2, align 8, !insn.addr !3922
  %211 = load i64, i64* %32, align 8, !insn.addr !3923
  %212 = add i64 %211, %210, !insn.addr !3923
  %213 = inttoptr i64 %212 to i32*, !insn.addr !3924
  %214 = load i32, i32* %213, align 4, !insn.addr !3924
  %215 = and i32 %214, 4194304, !insn.addr !3925
  %216 = icmp ne i32 %215, 0, !insn.addr !3925
  %217 = trunc i64 %208 to i32, !insn.addr !3926
  %218 = icmp eq i32 %217, ptrtoint ([3 x i8]* @global_var_3e8 to i32), !insn.addr !3926
  %or.cond6 = or i1 %218, %216
  br i1 %or.cond6, label %dec_label_pc_99f9, label %dec_label_pc_99eb, !insn.addr !3927

dec_label_pc_99eb:                                ; preds = %dec_label_pc_99a0
  %r13.1.reload = load i64, i64* %r13.1.reg2mem
  %219 = and i64 %208, 4294967295, !insn.addr !3920
  %220 = and i64 %r13.1.reload, 4294967295, !insn.addr !3928
  store i64 %220, i64* %rsi.2.reg2mem, !insn.addr !3929
  store i64 %219, i64* %r15.0.reg2mem, !insn.addr !3929
  br label %dec_label_pc_98cf, !insn.addr !3929

dec_label_pc_99f9:                                ; preds = %dec_label_pc_99a0
  %221 = add i64 %arg1, 25112, !insn.addr !3930
  %222 = inttoptr i64 %221 to i64*, !insn.addr !3930
  %223 = load i64, i64* %222, align 8, !insn.addr !3930
  %224 = add i64 %223, %210, !insn.addr !3930
  %225 = inttoptr i64 %224 to i32*, !insn.addr !3931
  %226 = load i32, i32* %225, align 4, !insn.addr !3931
  %227 = or i32 %226, ptrtoint (i32** @global_var_20 to i32), !insn.addr !3932
  store i32 %227, i32* %225, align 4, !insn.addr !3933
  %228 = call i64 @DelayNanoseconds.440(i64* bitcast (i32* @global_var_1 to i64*)), !insn.addr !3934
  ret i64 %228, !insn.addr !3935
}

define i64 @i2c_2_read_mode1(i64 %pFdoData, i8 %slvAddr, i8 %slvMode, i8 %regAddr, i8* %readData, i64 %length, i8 %byteCnt, i8 %retryCnt) local_unnamed_addr {
dec_label_pc_9a35:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = call i64 @__decompiler_undefined_function_0()
  %2 = call i64 @__decompiler_undefined_function_0()
  %3 = call i64 @__decompiler_undefined_function_0()
  %4 = trunc i64 %3 to i8
  %5 = mul i8 %4, 2, !insn.addr !3936
  %6 = inttoptr i64 %3 to i8*, !insn.addr !3936
  store i8 %5, i8* %6, align 1, !insn.addr !3936
  %7 = add i64 %2, 25112, !insn.addr !3937
  %8 = inttoptr i64 %7 to i64*, !insn.addr !3937
  %9 = load i64, i64* %8, align 8, !insn.addr !3937
  %10 = add i64 %9, %3, !insn.addr !3937
  %11 = trunc i64 %0 to i32, !insn.addr !3938
  %12 = inttoptr i64 %10 to i32*, !insn.addr !3938
  store i32 %11, i32* %12, align 4, !insn.addr !3938
  %13 = call i64 @DelayNanoseconds.440(i64* bitcast (i32* @global_var_1 to i64*)), !insn.addr !3939
  ret i64 %1, !insn.addr !3940
}

define i64 @i2c_2_read_mode1.495(i64 %arg1, i64 %arg2, i64* %arg3, i64 %arg4, i64 %arg5, i64 %arg6, i64 %arg7, i64 %arg8) local_unnamed_addr {
dec_label_pc_9a65:
  %stack_var_-72 = alloca i64, align 8
  %0 = call i64 @mcount(), !insn.addr !3941
  %sext = mul i64 %arg4, 72057594037927936
  %1 = sdiv i64 %sext, 72057594037927936, !insn.addr !3942
  store i64 %1, i64* %stack_var_-72, align 8, !insn.addr !3942
  %2 = urem i64 %arg8, 256, !insn.addr !3943
  %3 = urem i64 %arg4, 256, !insn.addr !3944
  %4 = urem i64 %arg2, 256, !insn.addr !3945
  %5 = bitcast i64* %stack_var_-72 to i8*, !insn.addr !3946
  %6 = call i64 @i2c_write_2.595(i64 %arg1, i64 %4, i64* bitcast (i32* @global_var_1 to i64*), i64 %3, i8* nonnull %5, i64* bitcast (i16* @global_var_4 to i64*), i64* inttoptr (i64 sext (i32 ptrtoint (i32* @global_var_1 to i32) to i64) to i64*), i64 %2), !insn.addr !3946
  ret i64 0, !insn.addr !3947
}

define i64 @i2c_read_2(i64 %pFdoData, i8 %slvAddr, i8 %slvMode, i8 %regAddr, i8* %readData, i64 %length, i8 %byteCnt, i8 %retryCnt) local_unnamed_addr {
dec_label_pc_9ae4:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = call i64 @__decompiler_undefined_function_0()
  %2 = call i64 @__decompiler_undefined_function_0()
  %3 = call i64 @__decompiler_undefined_function_0()
  %4 = add i64 %3, -72, !insn.addr !3948
  %5 = inttoptr i64 %4 to i64*, !insn.addr !3948
  %6 = load i64, i64* %5, align 8, !insn.addr !3948
  %7 = and i64 %2, 4294967295, !insn.addr !3949
  %8 = and i64 %1, 4294967295, !insn.addr !3950
  %9 = call i64 @i2c_read_2.359(i64 %0, i64 %8, i64* bitcast (i32* @global_var_1 to i64*), i64 %7, i64 %6, i64 %length, i64 ptrtoint (i32* @0 to i64), i64 ptrtoint (i32* @0 to i64)), !insn.addr !3951
  ret i64 %9, !insn.addr !3952
}

define i64 @i2c_read_2.359(i64 %arg1, i64 %arg2, i64* %arg3, i64 %arg4, i64 %arg5, i64 %arg6, i64 %arg7, i64 %arg8) local_unnamed_addr {
dec_label_pc_9b14:
  %0 = call i64 @mcount(), !insn.addr !3953
  %1 = add i64 %arg1, 22520, !insn.addr !3954
  %2 = inttoptr i64 %1 to i64*, !insn.addr !3954
  %3 = load i64, i64* %2, align 8, !insn.addr !3954
  %4 = add i64 %arg1, 25152, !insn.addr !3955
  %5 = inttoptr i64 %4 to i64*, !insn.addr !3955
  %6 = load i64, i64* %5, align 8, !insn.addr !3955
  %7 = add i64 %6, %3, !insn.addr !3955
  %8 = inttoptr i64 %7 to i32*, !insn.addr !3956
  store i32 0, i32* %8, align 4, !insn.addr !3956
  ret i64 0, !insn.addr !3957
}

define i64 @function_9bbe() local_unnamed_addr {
dec_label_pc_9bbe:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = call i64 @__decompiler_undefined_function_0()
  %2 = call i64 @__decompiler_undefined_function_0()
  %3 = call i64 @function_9c01(i64 %0, i64 %1, i64 4294967264, i64 %2), !insn.addr !3958
  ret i64 %3, !insn.addr !3958
}

define i64 @function_9bc5() local_unnamed_addr {
dec_label_pc_9bc5:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = call i64 @__decompiler_undefined_function_0()
  %2 = call i64 @__decompiler_undefined_function_0()
  %3 = call i64 @function_9c01(i64 %0, i64 %1, i64 4294967268, i64 %2), !insn.addr !3959
  ret i64 %3, !insn.addr !3959
}

define i64 @function_9bcc(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4) local_unnamed_addr {
dec_label_pc_9bcc:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = call i64 @__decompiler_undefined_function_0()
  %2 = call i64 @__decompiler_undefined_function_0()
  %3 = call i64 @__decompiler_undefined_function_0()
  %4 = urem i64 %arg4, 256, !insn.addr !3960
  %5 = urem i64 %arg2, 256, !insn.addr !3961
  %6 = urem i64 %arg1, 256, !insn.addr !3962
  %7 = add i64 %2, -64, !insn.addr !3963
  %8 = inttoptr i64 %7 to i8*, !insn.addr !3963
  %9 = load i8, i8* %8, align 1, !insn.addr !3963
  %10 = zext i8 %9 to i64, !insn.addr !3964
  %11 = call i64 @i2c_2_read_mode1.495(i64 %3, i64 %5, i64* bitcast (i8* @global_var_10 to i64*), i64 %4, i64 %0, i64 %1, i64 %10, i64 %6), !insn.addr !3964
  ret i64 %11, !insn.addr !3965
}

define i64 @function_9c01(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4) local_unnamed_addr {
dec_label_pc_9c01:
  %rax.1.reg2mem = alloca i64, !insn.addr !3966
  %merge.reg2mem = alloca i64, !insn.addr !3966
  %.reg2mem2 = alloca i64, !insn.addr !3966
  %rax.0.reg2mem = alloca i64, !insn.addr !3966
  %.reg2mem = alloca i64, !insn.addr !3966
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = call i64 @__decompiler_undefined_function_0()
  %2 = call i64 @__decompiler_undefined_function_0()
  %3 = urem i64 %arg4, 256, !insn.addr !3966
  %4 = trunc i64 %arg2 to i32, !insn.addr !3967
  %5 = urem i32 %4, 256, !insn.addr !3968
  %6 = shl i32 %5, ptrtoint (i8* @global_var_8 to i32), !insn.addr !3968
  %7 = zext i32 %6 to i64, !insn.addr !3968
  %8 = mul i64 %7, ptrtoint (i32* @global_var_1 to i64), !insn.addr !3969
  %9 = add i64 %8, %3, !insn.addr !3969
  %10 = trunc i64 %9 to i32, !insn.addr !3969
  %11 = add i64 %2, 22520, !insn.addr !3970
  %12 = inttoptr i64 %11 to i64*, !insn.addr !3970
  %13 = load i64, i64* %12, align 8, !insn.addr !3970
  %14 = add i64 %2, 25160, !insn.addr !3971
  %15 = inttoptr i64 %14 to i64*, !insn.addr !3971
  %16 = load i64, i64* %15, align 8, !insn.addr !3971
  %17 = add i64 %16, %13, !insn.addr !3971
  %18 = inttoptr i64 %17 to i32*, !insn.addr !3972
  store i32 %10, i32* %18, align 4, !insn.addr !3972
  %19 = urem i64 %arg3, 256, !insn.addr !3973
  %20 = add i64 %1, -64, !insn.addr !3974
  %21 = inttoptr i64 %20 to i8*, !insn.addr !3974
  %22 = load i8, i8* %21, align 1, !insn.addr !3974
  %23 = zext i8 %22 to i32, !insn.addr !3975
  %24 = shl i32 %23, ptrtoint (i8* @global_var_8 to i32), !insn.addr !3975
  %25 = zext i32 %24 to i64, !insn.addr !3975
  %26 = mul i64 %25, ptrtoint (i32* @global_var_1 to i64), !insn.addr !3976
  %27 = add i64 %26, %19, !insn.addr !3976
  %28 = load i64, i64* %12, align 8, !insn.addr !3977
  %29 = add i64 %2, 25152, !insn.addr !3978
  %30 = inttoptr i64 %29 to i64*, !insn.addr !3978
  %31 = load i64, i64* %30, align 8, !insn.addr !3978
  %32 = add i64 %31, %28, !insn.addr !3978
  %33 = trunc i64 %27 to i16, !insn.addr !3979
  %34 = inttoptr i64 %32 to i16*, !insn.addr !3979
  store i16 %33, i16* %34, align 2, !insn.addr !3979
  %35 = load i8, i8* %21, align 1, !insn.addr !3980
  %36 = call i64 @DelayMilliseconds_i2c.249(i64* bitcast (i32* @global_var_2 to i64*)), !insn.addr !3981
  %37 = load i64, i64* %12, align 8, !insn.addr !3982
  %38 = add i64 %2, 25184, !insn.addr !3983
  %39 = inttoptr i64 %38 to i64*, !insn.addr !3983
  %40 = load i64, i64* %39, align 8, !insn.addr !3983
  %41 = add i64 %40, %37, !insn.addr !3983
  %42 = inttoptr i64 %41 to i32*, !insn.addr !3984
  %43 = load i32, i32* %42, align 4, !insn.addr !3984
  %44 = and i32 %43, 768
  %45 = icmp eq i32 %44, 0, !insn.addr !3985
  %46 = icmp eq i1 %45, false, !insn.addr !3986
  store i64 %41, i64* %rax.1.reg2mem, !insn.addr !3986
  br i1 %46, label %dec_label_pc_9d07, label %dec_label_pc_9c7b, !insn.addr !3986

dec_label_pc_9c7b:                                ; preds = %dec_label_pc_9c01
  %47 = udiv i32 %43, 256, !insn.addr !3987
  %48 = urem i32 %47, 32
  %49 = load i8, i8* %21, align 1, !insn.addr !3988
  %50 = trunc i32 %48 to i8, !insn.addr !3988
  %51 = icmp ugt i8 %49, %50
  store i64 %41, i64* %rax.1.reg2mem, !insn.addr !3989
  br i1 %51, label %dec_label_pc_9d07, label %dec_label_pc_9c85, !insn.addr !3989

dec_label_pc_9c85:                                ; preds = %dec_label_pc_9c7b
  %52 = icmp eq i32 %48, 0, !insn.addr !3990
  store i64 %37, i64* %.reg2mem2, !insn.addr !3991
  br i1 %52, label %dec_label_pc_9cdd, label %dec_label_pc_9c90.preheader, !insn.addr !3991

dec_label_pc_9c90.preheader:                      ; preds = %dec_label_pc_9c85
  %53 = add i64 %2, 25200, !insn.addr !3992
  %54 = inttoptr i64 %53 to i64*, !insn.addr !3992
  %55 = zext i8 %35 to i32, !insn.addr !3993
  store i64 %37, i64* %.reg2mem
  store i64 0, i64* %rax.0.reg2mem
  br label %dec_label_pc_9c90

dec_label_pc_9c90:                                ; preds = %dec_label_pc_9cd1.dec_label_pc_9c90_crit_edge, %dec_label_pc_9c90.preheader
  %rax.0.reload = load i64, i64* %rax.0.reg2mem
  %.reload = load i64, i64* %.reg2mem, !insn.addr !3994
  %56 = load i64, i64* %54, align 8, !insn.addr !3992
  %57 = add i64 %56, %.reload, !insn.addr !3992
  %58 = inttoptr i64 %57 to i32*, !insn.addr !3995
  %59 = load i32, i32* %58, align 4, !insn.addr !3995
  %60 = trunc i32 %59 to i8, !insn.addr !3996
  %61 = mul i64 %rax.0.reload, ptrtoint (i32* @global_var_1 to i64), !insn.addr !3996
  %62 = add i64 %61, %0, !insn.addr !3996
  %63 = inttoptr i64 %62 to i8*, !insn.addr !3996
  store i8 %60, i8* %63, align 1, !insn.addr !3996
  %64 = udiv i32 %59, 256, !insn.addr !3997
  %65 = trunc i32 %64 to i8, !insn.addr !3998
  %66 = add i64 %rax.0.reload, %0
  %67 = add i64 %66, ptrtoint (i32* @global_var_1 to i64), !insn.addr !3998
  %68 = inttoptr i64 %67 to i8*, !insn.addr !3998
  store i8 %65, i8* %68, align 1, !insn.addr !3998
  %69 = udiv i32 %59, 65536, !insn.addr !3999
  %70 = trunc i32 %69 to i8, !insn.addr !4000
  %71 = add i64 %66, ptrtoint (i32* @global_var_2 to i64), !insn.addr !4000
  %72 = inttoptr i64 %71 to i8*, !insn.addr !4000
  store i8 %70, i8* %72, align 1, !insn.addr !4000
  %73 = udiv i32 %59, 16777216
  %74 = trunc i32 %73 to i8, !insn.addr !4001
  %75 = add i64 %66, ptrtoint (i8** @global_var_3 to i64), !insn.addr !4001
  %76 = inttoptr i64 %75 to i8*, !insn.addr !4001
  store i8 %74, i8* %76, align 1, !insn.addr !4001
  %77 = add nuw nsw i64 %rax.0.reload, zext (i32 ptrtoint (i16* @global_var_4 to i32) to i64), !insn.addr !4002
  %78 = trunc i64 %77 to i32, !insn.addr !3993
  %79 = icmp ult i32 %78, %55, !insn.addr !3993
  %80 = icmp ugt i32 %48, %78, !insn.addr !4003
  %or.cond = icmp eq i1 %79, %80
  br i1 %or.cond, label %dec_label_pc_9cd1.dec_label_pc_9c90_crit_edge, label %dec_label_pc_9cdd.loopexit, !insn.addr !4004

dec_label_pc_9cd1.dec_label_pc_9c90_crit_edge:    ; preds = %dec_label_pc_9c90
  %81 = and i64 %77, 4294967295, !insn.addr !4002
  %.pre = load i64, i64* %12, align 8
  store i64 %.pre, i64* %.reg2mem
  store i64 %81, i64* %rax.0.reg2mem
  br label %dec_label_pc_9c90

dec_label_pc_9cdd.loopexit:                       ; preds = %dec_label_pc_9c90
  %.pre1 = load i64, i64* %12, align 8
  store i64 %.pre1, i64* %.reg2mem2
  br label %dec_label_pc_9cdd

dec_label_pc_9cdd:                                ; preds = %dec_label_pc_9cdd.loopexit, %dec_label_pc_9c85
  %.reload3 = load i64, i64* %.reg2mem2, !insn.addr !4005
  %82 = load i64, i64* %30, align 8, !insn.addr !4006
  %83 = add i64 %82, %.reload3, !insn.addr !4006
  %84 = inttoptr i64 %83 to i32*, !insn.addr !4007
  %85 = load i32, i32* %84, align 4, !insn.addr !4007
  %86 = udiv i32 %85, 65536, !insn.addr !4008
  %87 = trunc i32 %86 to i8, !insn.addr !4009
  %88 = icmp slt i8 %87, 0, !insn.addr !4009
  %89 = icmp eq i1 %88, false, !insn.addr !4010
  store i64 ptrtoint (i32* @global_var_1 to i64), i64* %merge.reg2mem, !insn.addr !4010
  store i64 %83, i64* %rax.1.reg2mem, !insn.addr !4010
  br i1 %89, label %dec_label_pc_9d07, label %dec_label_pc_9cfb, !insn.addr !4010

dec_label_pc_9cfb:                                ; preds = %dec_label_pc_9d07, %dec_label_pc_9cdd
  %merge.reload = load i64, i64* %merge.reg2mem
  ret i64 %merge.reload, !insn.addr !4011

dec_label_pc_9d07:                                ; preds = %dec_label_pc_9c7b, %dec_label_pc_9cdd, %dec_label_pc_9c01
  %rax.1.reload = load i64, i64* %rax.1.reg2mem
  store i64 %rax.1.reload, i64* %merge.reg2mem
  br label %dec_label_pc_9cfb
}

define i64 @i2c_write(i64 %pFdoData, i8 %slvAddr, i8 %slvMode, i8 %regAddr, i8* %writeData, i64 %length, i8 %byteCnt, i8 %retryCnt) local_unnamed_addr {
dec_label_pc_9d16:
  %0 = call i64 @__decompiler_undefined_function_0()
  ret i64 %0
}

define i64 @i2c_write.200(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4, i64* %arg5, i64 %arg6, i64 %arg7, i32 %arg8) local_unnamed_addr {
dec_label_pc_9d46:
  %.reg2mem = alloca i64, !insn.addr !4012
  %0 = call i64 @mcount(), !insn.addr !4013
  %1 = trunc i64 %arg6 to i8, !insn.addr !4014
  %2 = and i8 %1, ptrtoint (i8** @global_var_3 to i8), !insn.addr !4014
  %3 = icmp eq i8 %2, 0, !insn.addr !4014
  br i1 %3, label %dec_label_pc_9d8d, label %dec_label_pc_9d78, !insn.addr !4015

dec_label_pc_9d78:                                ; preds = %dec_label_pc_9d46
  %4 = call i64 @DelayMilliseconds_i2c.249(i64* bitcast (i32* @global_var_1 to i64*)), !insn.addr !4016
  ret i64 %4, !insn.addr !4017

dec_label_pc_9d8d:                                ; preds = %dec_label_pc_9d46
  %5 = icmp eq i64* %arg5, null, !insn.addr !4018
  %6 = icmp eq i1 %5, false, !insn.addr !4019
  br i1 %6, label %dec_label_pc_9da7, label %dec_label_pc_9d92, !insn.addr !4019

dec_label_pc_9d92:                                ; preds = %dec_label_pc_9d8d
  %7 = call i64 @DelayMilliseconds_i2c.249(i64* bitcast (i32* @global_var_1 to i64*)), !insn.addr !4020
  ret i64 %7, !insn.addr !4021

dec_label_pc_9da7:                                ; preds = %dec_label_pc_9d8d
  %8 = add i64 %arg1, 22520, !insn.addr !4022
  %9 = inttoptr i64 %8 to i64*, !insn.addr !4022
  %10 = load i64, i64* %9, align 8, !insn.addr !4022
  %11 = add i64 %arg1, 25128, !insn.addr !4023
  %12 = inttoptr i64 %11 to i64*, !insn.addr !4023
  %13 = load i64, i64* %12, align 8, !insn.addr !4023
  %14 = add i64 %13, %10, !insn.addr !4023
  %15 = inttoptr i64 %14 to i32*, !insn.addr !4024
  %16 = load i32, i32* %15, align 4, !insn.addr !4024
  %17 = trunc i32 %16 to i8
  %18 = and i8 %17, ptrtoint (i8** @global_var_1f to i8), !insn.addr !4025
  %19 = icmp eq i8 %18, ptrtoint (i8* @global_var_10 to i8), !insn.addr !4025
  %20 = and i32 %16, 7936
  %21 = icmp eq i32 %20, 0, !insn.addr !4026
  %or.cond = icmp eq i1 %21, %19
  store i64 %10, i64* %.reg2mem, !insn.addr !4027
  br i1 %or.cond, label %dec_label_pc_9e4f, label %dec_label_pc_9dcc, !insn.addr !4027

dec_label_pc_9dcc:                                ; preds = %dec_label_pc_9da7
  %22 = add i64 %arg1, 25112, !insn.addr !4028
  %23 = inttoptr i64 %22 to i64*, !insn.addr !4028
  %24 = load i64, i64* %23, align 8, !insn.addr !4028
  %25 = add i64 %24, %10, !insn.addr !4028
  %26 = inttoptr i64 %25 to i32*, !insn.addr !4029
  %27 = load i32, i32* %26, align 4, !insn.addr !4029
  %28 = or i32 %27, ptrtoint (i32** @global_var_20 to i32), !insn.addr !4030
  store i32 %28, i32* %26, align 4, !insn.addr !4031
  %29 = call i64 @DelayNanoseconds.440(i64* bitcast (i32* @global_var_1 to i64*)), !insn.addr !4032
  %30 = and i32 %28, -33, !insn.addr !4033
  %31 = load i64, i64* %9, align 8, !insn.addr !4034
  %32 = load i64, i64* %23, align 8, !insn.addr !4035
  %33 = add i64 %32, %31, !insn.addr !4035
  %34 = inttoptr i64 %33 to i32*, !insn.addr !4036
  store i32 %30, i32* %34, align 4, !insn.addr !4036
  %35 = call i64 @DelayNanoseconds.440(i64* bitcast (i32* @global_var_1 to i64*)), !insn.addr !4037
  %36 = load i64, i64* %9, align 8, !insn.addr !4038
  %37 = load i64, i64* %12, align 8, !insn.addr !4039
  %38 = add i64 %37, %36, !insn.addr !4039
  %39 = inttoptr i64 %38 to i32*, !insn.addr !4040
  %40 = load i32, i32* %39, align 4, !insn.addr !4040
  %41 = trunc i32 %40 to i8
  %42 = and i8 %41, ptrtoint (i8** @global_var_1f to i8), !insn.addr !4041
  %43 = icmp eq i8 %42, 16, !insn.addr !4041
  store i64 %36, i64* %.reg2mem, !insn.addr !4042
  br i1 %43, label %dec_label_pc_9e4f, label %dec_label_pc_9e3a, !insn.addr !4042

dec_label_pc_9e3a:                                ; preds = %dec_label_pc_9dcc
  %44 = call i64 @DelayMilliseconds_i2c.249(i64* bitcast (i32* @global_var_1 to i64*)), !insn.addr !4043
  ret i64 %44, !insn.addr !4044

dec_label_pc_9e4f:                                ; preds = %dec_label_pc_9da7, %dec_label_pc_9dcc
  %.reload = load i64, i64* %.reg2mem, !insn.addr !4045
  %45 = add i64 %arg1, 25096, !insn.addr !4046
  %46 = inttoptr i64 %45 to i64*, !insn.addr !4046
  %47 = load i64, i64* %46, align 8, !insn.addr !4046
  %48 = add i64 %47, %.reload, !insn.addr !4046
  %49 = inttoptr i64 %48 to i32*, !insn.addr !4047
  store i32 0, i32* %49, align 4, !insn.addr !4047
  %50 = trunc i64 %arg3 to i8, !insn.addr !4048
  %51 = icmp ugt i8 %50, ptrtoint (i8* @global_var_5 to i8)
  br i1 %51, label %dec_label_pc_9e8e, label %dec_label_pc_9e6a, !insn.addr !4049

dec_label_pc_9e6a:                                ; preds = %dec_label_pc_9e4f
  ret i64 0, !insn.addr !4050

dec_label_pc_9e8e:                                ; preds = %dec_label_pc_9e4f
  %52 = call i64 @DelayMilliseconds_i2c.249(i64* bitcast (i32* @global_var_1 to i64*)), !insn.addr !4051
  ret i64 %52, !insn.addr !4052
}

define i64 @i2c_1_read_mode1(i64 %pFdoData, i8 %slvAddr, i8 %slvMode, i8 %regAddr, i8* %readData, i64 %length, i8 %byteCnt, i8 %retryCnt) local_unnamed_addr {
dec_label_pc_a0d4:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = call i64 @__decompiler_undefined_function_0()
  %2 = call i64 @__decompiler_undefined_function_0()
  %3 = add i64 %2, 22520, !insn.addr !4053
  %4 = inttoptr i64 %3 to i64*, !insn.addr !4053
  %5 = load i64, i64* %4, align 8, !insn.addr !4053
  %6 = add i64 %2, 25112, !insn.addr !4054
  %7 = inttoptr i64 %6 to i64*, !insn.addr !4054
  %8 = load i64, i64* %7, align 8, !insn.addr !4054
  %9 = add i64 %8, %5, !insn.addr !4054
  %10 = trunc i64 %0 to i32, !insn.addr !4055
  %11 = inttoptr i64 %9 to i32*, !insn.addr !4055
  store i32 %10, i32* %11, align 4, !insn.addr !4055
  %12 = call i64 @DelayNanoseconds.440(i64* bitcast (i32* @global_var_1 to i64*)), !insn.addr !4056
  ret i64 %1, !insn.addr !4057
}

define i64 @i2c_1_read_mode1.266(i64 %arg1, i64 %arg2, i64* %arg3, i64 %arg4, i64 %arg5, i64 %arg6, i64 %arg7, i64 %arg8) local_unnamed_addr {
dec_label_pc_a104:
  %0 = trunc i64 %arg8 to i32
  %stack_var_-72 = alloca i64, align 8
  %1 = call i64 @mcount(), !insn.addr !4058
  %sext = mul i64 %arg4, 72057594037927936
  %2 = sdiv i64 %sext, 72057594037927936, !insn.addr !4059
  store i64 %2, i64* %stack_var_-72, align 8, !insn.addr !4059
  %3 = urem i32 %0, 256, !insn.addr !4060
  %4 = urem i64 %arg4, 256, !insn.addr !4061
  %5 = urem i64 %arg2, 256, !insn.addr !4062
  %6 = call i64 @i2c_write.200(i64 %arg1, i64 %5, i64 ptrtoint (i32* @global_var_1 to i64), i64 %4, i64* nonnull %stack_var_-72, i64 ptrtoint (i16* @global_var_4 to i64), i64 sext (i32 ptrtoint (i32* @global_var_1 to i32) to i64), i32 %3), !insn.addr !4063
  ret i64 0, !insn.addr !4064
}

define i64 @i2c_read(i64 %pFdoData, i8 %slvAddr, i8 %slvMode, i8 %regAddr, i8* %readData, i64 %length, i8 %byteCnt, i8 %retryCnt) local_unnamed_addr {
dec_label_pc_a183:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = call i64 @__decompiler_undefined_function_0()
  %2 = call i64 @__decompiler_undefined_function_0()
  %3 = call i64 @__decompiler_undefined_function_0()
  %4 = add i64 %3, -72, !insn.addr !4065
  %5 = inttoptr i64 %4 to i64*, !insn.addr !4065
  %6 = load i64, i64* %5, align 8, !insn.addr !4065
  %7 = and i64 %2, 4294967295, !insn.addr !4066
  %8 = and i64 %1, 4294967295, !insn.addr !4067
  %9 = inttoptr i64 %6 to i64*, !insn.addr !4068
  %10 = call i64 @i2c_read.433(i64 %0, i64 %8, i64 ptrtoint (i32* @global_var_1 to i64), i64 %7, i64* %9, i64 %length, i64 ptrtoint (i32* @0 to i64), i32 ptrtoint (i32* @0 to i32)), !insn.addr !4068
  ret i64 %10, !insn.addr !4069
}

define i64 @i2c_read.433(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4, i64* %arg5, i64 %arg6, i64 %arg7, i32 %arg8) local_unnamed_addr {
dec_label_pc_a1b3:
  %0 = call i64 @mcount(), !insn.addr !4070
  %1 = trunc i64 %arg6 to i8, !insn.addr !4071
  %2 = and i8 %1, ptrtoint (i8** @global_var_3 to i8), !insn.addr !4071
  %3 = icmp eq i8 %2, 0, !insn.addr !4071
  br i1 %3, label %dec_label_pc_a20c, label %dec_label_pc_a1f7, !insn.addr !4072

dec_label_pc_a1f7:                                ; preds = %dec_label_pc_a1b3
  %4 = call i64 @DelayMilliseconds_i2c.249(i64* bitcast (i32* @global_var_1 to i64*)), !insn.addr !4073
  ret i64 %4, !insn.addr !4074

dec_label_pc_a20c:                                ; preds = %dec_label_pc_a1b3
  %5 = icmp eq i64* %arg5, null, !insn.addr !4075
  %6 = icmp eq i1 %5, false, !insn.addr !4076
  br i1 %6, label %dec_label_pc_a226, label %dec_label_pc_a211, !insn.addr !4076

dec_label_pc_a211:                                ; preds = %dec_label_pc_a20c
  %7 = call i64 @DelayMilliseconds_i2c.249(i64* bitcast (i32* @global_var_1 to i64*)), !insn.addr !4077
  ret i64 %7, !insn.addr !4078

dec_label_pc_a226:                                ; preds = %dec_label_pc_a20c
  %8 = add i64 %arg1, 22520, !insn.addr !4079
  %9 = inttoptr i64 %8 to i64*, !insn.addr !4079
  %10 = load i64, i64* %9, align 8, !insn.addr !4079
  %11 = add i64 %arg1, 25128, !insn.addr !4080
  %12 = inttoptr i64 %11 to i64*, !insn.addr !4080
  %13 = load i64, i64* %12, align 8, !insn.addr !4080
  %14 = add i64 %13, %10, !insn.addr !4080
  %15 = inttoptr i64 %14 to i32*, !insn.addr !4081
  %16 = load i32, i32* %15, align 4, !insn.addr !4081
  %17 = trunc i32 %16 to i8
  %18 = and i8 %17, ptrtoint (i8** @global_var_1f to i8), !insn.addr !4082
  %19 = icmp eq i8 %18, ptrtoint (i8* @global_var_10 to i8), !insn.addr !4082
  %20 = and i32 %16, 7936
  %21 = icmp eq i32 %20, 0, !insn.addr !4083
  %or.cond = icmp eq i1 %21, %19
  br i1 %or.cond, label %dec_label_pc_a261, label %dec_label_pc_a24c, !insn.addr !4084

dec_label_pc_a24c:                                ; preds = %dec_label_pc_a226
  %22 = call i64 @DelayMilliseconds_i2c.249(i64* bitcast (i32* @global_var_1 to i64*)), !insn.addr !4085
  ret i64 %22, !insn.addr !4086

dec_label_pc_a261:                                ; preds = %dec_label_pc_a226
  %23 = add i64 %arg1, 25096, !insn.addr !4087
  %24 = inttoptr i64 %23 to i64*, !insn.addr !4087
  %25 = load i64, i64* %24, align 8, !insn.addr !4087
  %26 = add i64 %25, %10, !insn.addr !4087
  %27 = inttoptr i64 %26 to i32*, !insn.addr !4088
  store i32 0, i32* %27, align 4, !insn.addr !4088
  %28 = trunc i64 %arg3 to i8, !insn.addr !4089
  %29 = icmp ugt i8 %28, ptrtoint (i8* @global_var_10 to i8)
  br i1 %29, label %dec_label_pc_a2c3, label %dec_label_pc_a27c, !insn.addr !4090

dec_label_pc_a27c:                                ; preds = %dec_label_pc_a261
  ret i64 0, !insn.addr !4091

dec_label_pc_a2c3:                                ; preds = %dec_label_pc_a261
  %30 = call i64 @DelayMilliseconds_i2c.249(i64* bitcast (i32* @global_var_1 to i64*)), !insn.addr !4092
  ret i64 %30, !insn.addr !4093
}

define i64 @i2c_access(i16 %channel, i8 %bIsRead, i64 %pFdoData, i8 %slvAddr, i8 %slvMode, i8 %regAddr, i8* %Data, i64 %length, i8 %byteCnt, i8 %retryCnt) local_unnamed_addr {
dec_label_pc_a45c:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = call i64 @__decompiler_undefined_function_0()
  %2 = add i64 %1, 22520, !insn.addr !4094
  %3 = inttoptr i64 %2 to i64*, !insn.addr !4094
  %4 = load i64, i64* %3, align 8, !insn.addr !4094
  %5 = add i64 %1, 25128, !insn.addr !4095
  %6 = inttoptr i64 %5 to i64*, !insn.addr !4095
  %7 = load i64, i64* %6, align 8, !insn.addr !4095
  %8 = add i64 %7, %4, !insn.addr !4095
  %9 = inttoptr i64 %8 to i32*, !insn.addr !4096
  %10 = load i32, i32* %9, align 4, !insn.addr !4096
  %11 = and i32 %10, 7936
  %12 = icmp eq i32 %11, 0, !insn.addr !4097
  %spec.select = select i1 %12, i64 %0, i64 0
  ret i64 %spec.select, !insn.addr !4098
}

define i64 @i2c_access.374(i64* %arg1, i64 %arg2, i64 %arg3, i64 %arg4, i64 %arg5, i64 %arg6, i64* %arg7, i64 %arg8, i64 %arg9, i32 %arg10) local_unnamed_addr {
dec_label_pc_a48c:
  %0 = ptrtoint i64* %arg1 to i64
  %1 = call i64 @mcount(), !insn.addr !4099
  %2 = urem i64 %arg9, 256, !insn.addr !4100
  %3 = urem i32 %arg10, 256
  %4 = trunc i64 %0 to i16, !insn.addr !4101
  %5 = icmp eq i16 %4, ptrtoint (i32* @global_var_1 to i16), !insn.addr !4101
  %6 = icmp eq i1 %5, false, !insn.addr !4102
  %7 = trunc i64 %arg2 to i8
  %8 = icmp eq i8 %7, ptrtoint (i32* @global_var_1 to i8)
  %9 = icmp eq i1 %8, false
  br i1 %6, label %dec_label_pc_a53c, label %dec_label_pc_a4d9, !insn.addr !4102

dec_label_pc_a4d9:                                ; preds = %dec_label_pc_a48c
  %10 = urem i64 %arg6, 256
  %11 = urem i64 %arg5, 256
  %12 = urem i64 %arg4, 256
  br i1 %9, label %dec_label_pc_a50f, label %dec_label_pc_a4df, !insn.addr !4103

dec_label_pc_a4df:                                ; preds = %dec_label_pc_a4d9
  %13 = call i64 @i2c_read.433(i64 %arg3, i64 %12, i64 %11, i64 %10, i64* %arg7, i64 %arg8, i64 %2, i32 %3), !insn.addr !4104
  ret i64 %13, !insn.addr !4105

dec_label_pc_a50f:                                ; preds = %dec_label_pc_a4d9
  %14 = call i64 @i2c_write.200(i64 %arg3, i64 %12, i64 %11, i64 %10, i64* %arg7, i64 %arg8, i64 %2, i32 %3), !insn.addr !4106
  ret i64 %14, !insn.addr !4107

dec_label_pc_a53c:                                ; preds = %dec_label_pc_a48c
  br i1 %9, label %dec_label_pc_a575, label %dec_label_pc_a548, !insn.addr !4108

dec_label_pc_a548:                                ; preds = %dec_label_pc_a53c
  %15 = ptrtoint i64* %arg7 to i64
  %16 = urem i64 %arg6, 256, !insn.addr !4109
  %17 = urem i64 %arg5, 256, !insn.addr !4110
  %18 = urem i64 %arg4, 256, !insn.addr !4111
  %19 = zext i32 %3 to i64, !insn.addr !4112
  %20 = inttoptr i64 %17 to i64*, !insn.addr !4113
  %21 = call i64 @i2c_read_2.359(i64 %arg3, i64 %18, i64* %20, i64 %16, i64 %15, i64 %arg8, i64 %2, i64 %19), !insn.addr !4113
  ret i64 %21, !insn.addr !4114

dec_label_pc_a575:                                ; preds = %dec_label_pc_a53c
  ret i64 0, !insn.addr !4115
}

define i64 @cfg_access(i8 %bIsRead, i64 %pFdoData, i16 %regAddr, i64 %length, i8* %Data) local_unnamed_addr {
dec_label_pc_a582:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = call i64 @__decompiler_undefined_function_0()
  %2 = call i64 @__decompiler_undefined_function_0()
  %3 = call i64 @__decompiler_undefined_function_0()
  %4 = call i64 @__decompiler_undefined_function_0()
  %5 = sext i16 %regAddr to i64
  %6 = lshr i64 %5, ptrtoint (i8* @global_var_8 to i64), !insn.addr !4116
  %7 = urem i64 %6, 256, !insn.addr !4116
  %8 = urem i64 %1, 256, !insn.addr !4117
  %9 = inttoptr i64 %5 to i64*, !insn.addr !4118
  %10 = inttoptr i64 %2 to i8*, !insn.addr !4118
  %11 = inttoptr i64 %4 to i64*, !insn.addr !4118
  %12 = inttoptr i64 %8 to i64*, !insn.addr !4118
  %sext = mul i64 %0, 4294967296
  %13 = sdiv i64 %sext, 4294967296, !insn.addr !4118
  %14 = call i64 @i2c_write_2.595(i64 %3, i64 %7, i64* %9, i64 %length, i8* %10, i64* %11, i64* %12, i64 %13), !insn.addr !4118
  ret i64 %14, !insn.addr !4119
}

define i64 @cfg_access.209(i64* %arg1, i64 %arg2, i64 %arg3, i64* %arg4, i64* %arg5) local_unnamed_addr {
dec_label_pc_a5b2:
  %storemerge.reg2mem = alloca i64, !insn.addr !4120
  %0 = call i64 @mcount(), !insn.addr !4121
  %1 = add i64 %arg2, 22808, !insn.addr !4122
  %2 = call i64 @down(i64 %1, i64 %arg2), !insn.addr !4123
  %3 = add i64 %arg2, 22800, !insn.addr !4124
  %4 = inttoptr i64 %3 to i8*, !insn.addr !4124
  %5 = load i8, i8* %4, align 1, !insn.addr !4124
  %6 = icmp eq i8 %5, 0, !insn.addr !4124
  %7 = icmp eq i1 %6, false, !insn.addr !4125
  br i1 %7, label %dec_label_pc_a607, label %dec_label_pc_a5f0, !insn.addr !4125

dec_label_pc_a5f0:                                ; preds = %dec_label_pc_a607, %dec_label_pc_a5b2
  %8 = ptrtoint i64* %arg4 to i64
  %9 = ptrtoint i64* %arg1 to i64
  store i8 ptrtoint (i32* @global_var_1 to i8), i8* %4, align 1, !insn.addr !4126
  %10 = call i64 @up(i64 %1), !insn.addr !4127
  %11 = trunc i64 %9 to i8, !insn.addr !4128
  %12 = icmp eq i8 %11, ptrtoint (i32* @global_var_1 to i8), !insn.addr !4128
  %13 = icmp eq i1 %12, false, !insn.addr !4129
  %14 = urem i64 %arg3, 65536
  br i1 %13, label %dec_label_pc_a633, label %dec_label_pc_a61b, !insn.addr !4129

dec_label_pc_a607:                                ; preds = %dec_label_pc_a5b2, %dec_label_pc_a607
  %15 = call i64 @up(i64 %1), !insn.addr !4130
  %16 = call i64 @DelayMilliseconds_i2c.249(i64* bitcast (i32* @global_var_1 to i64*)), !insn.addr !4131
  %17 = call i64 @down(i64 %1, i64 %arg2), !insn.addr !4123
  %18 = load i8, i8* %4, align 1, !insn.addr !4124
  %19 = icmp eq i8 %18, 0, !insn.addr !4124
  %20 = icmp eq i1 %19, false, !insn.addr !4125
  br i1 %20, label %dec_label_pc_a607, label %dec_label_pc_a5f0, !insn.addr !4125

dec_label_pc_a61b:                                ; preds = %dec_label_pc_a5f0
  %21 = call i64 @cfg_read.541(i64 %arg2, i64 %14, i64 %8, i64* %arg5), !insn.addr !4132
  store i64 %21, i64* %storemerge.reg2mem, !insn.addr !4133
  br label %dec_label_pc_a649, !insn.addr !4133

dec_label_pc_a633:                                ; preds = %dec_label_pc_a5f0
  %22 = call i64 @cfg_write.154(i64 %arg2, i64 %14, i64 %8, i64* %arg5), !insn.addr !4134
  store i64 %22, i64* %storemerge.reg2mem, !insn.addr !4135
  br label %dec_label_pc_a649, !insn.addr !4135

dec_label_pc_a649:                                ; preds = %dec_label_pc_a633, %dec_label_pc_a61b
  %storemerge.reload = load i64, i64* %storemerge.reg2mem
  ret i64 %storemerge.reload, !insn.addr !4136
}

define void @Convert_Function1_Driver(i8* %datain, i8* %dataout) local_unnamed_addr {
dec_label_pc_a650:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = ptrtoint i8* %dataout to i64
  %2 = call i64 @down(i64 %0, i64 %1), !insn.addr !4137
  ret void, !insn.addr !4137
}

define void @Convert_Function2_Driver(i8* %datain, i8* %dataout) local_unnamed_addr {
dec_label_pc_a65b:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = call i8 @__decompiler_undefined_function_1()
  %2 = sext i8 %1 to i64, !insn.addr !4138
  %3 = trunc i64 %0 to i8
  %4 = mul i8 %3, 2, !insn.addr !4139
  %5 = inttoptr i64 %0 to i8*, !insn.addr !4139
  store i8 %4, i8* %5, align 1, !insn.addr !4139
  %6 = mul i64 %2, ptrtoint (i16* @global_var_4 to i64), !insn.addr !4140
  %7 = add nsw i64 %2, -25, !insn.addr !4140
  %8 = add i64 %7, %6, !insn.addr !4140
  %9 = inttoptr i64 %8 to i8*, !insn.addr !4140
  %10 = load i8, i8* %9, align 1, !insn.addr !4140
  %11 = add i8 %10, %1, !insn.addr !4140
  store i8 %11, i8* %9, align 1, !insn.addr !4140
  ret void, !insn.addr !4140
}

define void @Convert_Function3_Driver(i8* %datain, i8* %dataout) local_unnamed_addr {
dec_label_pc_a666:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = mul i64 %0, ptrtoint (i16* @global_var_4 to i64), !insn.addr !4141
  %2 = add i64 %0, -24, !insn.addr !4141
  %3 = add i64 %2, %1, !insn.addr !4141
  %4 = inttoptr i64 %3 to i8*, !insn.addr !4141
  %5 = load i8, i8* %4, align 1, !insn.addr !4141
  %6 = trunc i64 %0 to i8, !insn.addr !4141
  %7 = add i8 %5, %6, !insn.addr !4141
  store i8 %7, i8* %4, align 1, !insn.addr !4141
  ret void, !insn.addr !4142
}

define void @Convert_Function4_Driver(i8* %datain, i8* %dataout) local_unnamed_addr {
dec_label_pc_a671:
  ret void, !insn.addr !4143
}

define i32 @GenerateCertificateKey(i8* %indata, i8* %outdata) local_unnamed_addr {
dec_label_pc_a67c:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = trunc i64 %0 to i32, !insn.addr !4144
  ret i32 %1, !insn.addr !4144
}

define i64 @Convert_Function1_Driver.320() local_unnamed_addr {
dec_label_pc_a680:
  %0 = call i64 @mcount(), !insn.addr !4145
  ret i64 %0, !insn.addr !4146
}

define i64 @Convert_Function2_Driver.239() local_unnamed_addr {
dec_label_pc_a68b:
  %0 = call i64 @__decompiler_undefined_function_0()
  ret i64 %0, !insn.addr !4147
}

define i32 @DTV_SetPidFilterBoundary(i64 %pTuner, i32 %Start, i32 %End) local_unnamed_addr {
dec_label_pc_a68c:
  %0 = call i64 @mcount(), !insn.addr !4148
  %1 = trunc i64 %0 to i32, !insn.addr !4149
  ret i32 %1, !insn.addr !4149
}

define i64 @Convert_Function3_Driver.578() local_unnamed_addr {
dec_label_pc_a696:
  %0 = call i64 @mcount(), !insn.addr !4150
  ret i64 %0, !insn.addr !4151
}

define i64 @Convert_Function4_Driver.488() local_unnamed_addr {
dec_label_pc_a6a1:
  %0 = call i64 @mcount(), !insn.addr !4152
  ret i64 %0, !insn.addr !4153
}

define i64 @GenerateCertificateKey.185() local_unnamed_addr {
dec_label_pc_a6ac:
  %0 = call i64 @mcount(), !insn.addr !4154
  ret i64 ptrtoint (i32* @global_var_1 to i64), !insn.addr !4155
}

define i64 @DTV_SetPidFilterBoundary.194(i64 %arg1, i64 %arg2, i64 %arg3) local_unnamed_addr {
dec_label_pc_a6bc:
  %0 = call i64 @mcount(), !insn.addr !4156
  ret i64 %0, !insn.addr !4156
}

define i8 @StoreDeviceInformation(i64 %pDevExt, i8* %keyName, i8* %lpMessage) local_unnamed_addr {
dec_label_pc_a6c8:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = trunc i64 %0 to i8
  ret i8 %1
}

define i8 @InitializeDeviceInformation(i64 %pDevExt) local_unnamed_addr {
dec_label_pc_a6d8:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = add i64 %0, 192, !insn.addr !4157
  %2 = urem i64 %1, 256, !insn.addr !4157
  %3 = and i64 %0, -256, !insn.addr !4157
  %4 = or i64 %2, %3, !insn.addr !4157
  %5 = shl i64 %4, ptrtoint (i16* @global_var_4 to i64), !insn.addr !4158
  %6 = add i64 %pDevExt, 7480, !insn.addr !4159
  %7 = inttoptr i64 %6 to i64*, !insn.addr !4159
  %8 = load i64, i64* %7, align 8, !insn.addr !4159
  %9 = add i64 %5, %8, !insn.addr !4159
  %10 = trunc i64 %9 to i8, !insn.addr !4159
  ret i8 %10, !insn.addr !4159
}

define i8 @StoreLNAStatus(i64 %pDevExt, i8* %keyName, i64* %lpMessage) local_unnamed_addr {
dec_label_pc_a6e8:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = ptrtoint i64* %lpMessage to i64
  %2 = ptrtoint i8* %keyName to i64
  %3 = trunc i64 %0 to i8
  %4 = mul i8 %3, 2, !insn.addr !4160
  %5 = inttoptr i64 %0 to i8*, !insn.addr !4160
  store i8 %4, i8* %5, align 1, !insn.addr !4160
  %6 = trunc i64 %2 to i32, !insn.addr !4161
  %7 = add i64 %0, ptrtoint (i8* @global_var_8 to i64), !insn.addr !4161
  %8 = inttoptr i64 %7 to i32*, !insn.addr !4161
  store i32 %6, i32* %8, align 4, !insn.addr !4161
  %9 = trunc i64 %1 to i32, !insn.addr !4162
  %10 = add i64 %0, ptrtoint (i16* @global_var_4 to i64), !insn.addr !4162
  %11 = inttoptr i64 %10 to i32*, !insn.addr !4162
  store i32 %9, i32* %11, align 4, !insn.addr !4162
  ret i8 ptrtoint (i32* @global_var_1 to i8), !insn.addr !4163
}

define i8 @InitializeLNAStatus(i64 %pDevExt) local_unnamed_addr {
dec_label_pc_a6f8:
  %0 = call i64 @mcount(), !insn.addr !4164
  ret i8 ptrtoint (i32* @global_var_1 to i8), !insn.addr !4165
}

define i8 @InitializeLNASetting(i64 %pDevExt) local_unnamed_addr {
dec_label_pc_a708:
  %0 = call i64 @mcount(), !insn.addr !4166
  ret i8 ptrtoint (i32* @global_var_1 to i8), !insn.addr !4167
}

define i32 @DTV_GetUSB_MODE(i64 %pTnim) local_unnamed_addr {
dec_label_pc_a718:
  %0 = call i64 @mcount(), !insn.addr !4168
  ret i32 ptrtoint (i32* @global_var_1 to i32), !insn.addr !4169
}

define i64 @InitializeLNAStatus.335() local_unnamed_addr {
dec_label_pc_a728:
  %0 = call i64 @mcount(), !insn.addr !4170
  ret i64 ptrtoint (i32* @global_var_1 to i64), !insn.addr !4171
}

define i32 @DTV_CheckSync(i8* %Buffer, i32 %ChkFrameNum) local_unnamed_addr {
dec_label_pc_a737:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = trunc i64 %0 to i32, !insn.addr !4172
  ret i32 %1, !insn.addr !4172
}

define i64 @InitializeLNASetting.585() local_unnamed_addr {
dec_label_pc_a738:
  %0 = call i64 @mcount(), !insn.addr !4173
  ret i64 ptrtoint (i32* @global_var_1 to i64), !insn.addr !4174
}

define i64 @DTV_GetUSB_MODE.579(i64 %arg1) local_unnamed_addr {
dec_label_pc_a748:
  %rax.0.reg2mem = alloca i64, !insn.addr !4175
  %0 = call i64 @mcount(), !insn.addr !4176
  %1 = add i64 %arg1, 7488, !insn.addr !4177
  %2 = inttoptr i64 %1 to i32*, !insn.addr !4177
  %3 = load i32, i32* %2, align 4, !insn.addr !4177
  %4 = icmp eq i32 %3, 0, !insn.addr !4177
  store i64 4294967286, i64* %rax.0.reg2mem, !insn.addr !4178
  br i1 %4, label %dec_label_pc_a765, label %dec_label_pc_a75f, !insn.addr !4178

dec_label_pc_a75f:                                ; preds = %dec_label_pc_a748
  %5 = add i64 %arg1, 7492, !insn.addr !4179
  %6 = inttoptr i64 %5 to i32*, !insn.addr !4179
  %7 = load i32, i32* %6, align 4, !insn.addr !4179
  %8 = zext i32 %7 to i64, !insn.addr !4179
  store i64 %8, i64* %rax.0.reg2mem, !insn.addr !4179
  br label %dec_label_pc_a765, !insn.addr !4179

dec_label_pc_a765:                                ; preds = %dec_label_pc_a75f, %dec_label_pc_a748
  %rax.0.reload = load i64, i64* %rax.0.reg2mem
  ret i64 %rax.0.reload, !insn.addr !4180
}

define i64 @DTV_CheckSync.253(i64 %arg1, i64* %arg2) local_unnamed_addr {
dec_label_pc_a767:
  %0 = call i64 @mcount(), !insn.addr !4181
  ret i64 %0, !insn.addr !4182
}

define i32 @DTV_CleanEncFlag(i8* %Buffer, i32 %FrameNum) local_unnamed_addr {
dec_label_pc_a77b:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = trunc i64 %0 to i8
  %2 = mul i8 %1, 2, !insn.addr !4183
  %3 = inttoptr i64 %0 to i8*, !insn.addr !4183
  store i8 %2, i8* %3, align 1, !insn.addr !4183
  %4 = add i64 %0, 292833087, !insn.addr !4184
  %5 = inttoptr i64 %4 to i8*, !insn.addr !4184
  %6 = load i8, i8* %5, align 1, !insn.addr !4184
  %7 = add i8 %6, %1, !insn.addr !4184
  store i8 %7, i8* %5, align 1, !insn.addr !4184
  ret i32 0, !insn.addr !4185
}

define i64 @DTV_CleanEncFlag.479(i64 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_a7ab:
  %0 = call i64 @__decompiler_undefined_function_0()
  ret i64 %0, !insn.addr !4186
}

define i8 @ChangeEndian(i8 %Input) local_unnamed_addr {
dec_label_pc_a7ad:
  %rax.0.reg2mem = alloca i64, !insn.addr !4187
  %rdx.0.reg2mem = alloca i64, !insn.addr !4187
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = sext i8 %Input to i64
  %2 = call i64 @mcount(), !insn.addr !4188
  %3 = trunc i64 %0 to i32, !insn.addr !4189
  %4 = icmp slt i32 %3, 1
  store i64 0, i64* %rdx.0.reg2mem, !insn.addr !4190
  store i64 0, i64* %rax.0.reg2mem, !insn.addr !4190
  br i1 %4, label %dec_label_pc_a7d6, label %dec_label_pc_a7c2, !insn.addr !4190

dec_label_pc_a7c2:                                ; preds = %dec_label_pc_a7ad, %dec_label_pc_a7c2
  %rax.0.reload = load i64, i64* %rax.0.reg2mem
  %rdx.0.reload = load i64, i64* %rdx.0.reg2mem
  %sext = mul i64 %rdx.0.reload, 4294967296
  %5 = sdiv i64 %sext, 4294967296, !insn.addr !4191
  %6 = add nsw i64 %5, %1, !insn.addr !4192
  %7 = inttoptr i64 %6 to i8*, !insn.addr !4192
  %8 = load i8, i8* %7, align 1, !insn.addr !4192
  %9 = urem i8 %8, -128
  store i8 %9, i8* %7, align 1, !insn.addr !4192
  %10 = add nuw nsw i64 %rax.0.reload, zext (i32 ptrtoint (i32* @global_var_1 to i32) to i64), !insn.addr !4193
  %11 = and i64 %10, 4294967295, !insn.addr !4193
  %12 = add nuw nsw i64 %rdx.0.reload, 188, !insn.addr !4194
  %13 = and i64 %12, 4294967295, !insn.addr !4194
  %14 = trunc i64 %10 to i32, !insn.addr !4195
  %15 = icmp eq i32 %14, %3, !insn.addr !4195
  %16 = icmp eq i1 %15, false, !insn.addr !4196
  store i64 %13, i64* %rdx.0.reg2mem, !insn.addr !4196
  store i64 %11, i64* %rax.0.reg2mem, !insn.addr !4196
  br i1 %16, label %dec_label_pc_a7c2, label %dec_label_pc_a7d6, !insn.addr !4196

dec_label_pc_a7d6:                                ; preds = %dec_label_pc_a7c2, %dec_label_pc_a7ad
  ret i8 ptrtoint (i32* @global_var_1 to i8), !insn.addr !4197
}

define i64 @ChangeEndian.223(i64 %arg1) local_unnamed_addr {
dec_label_pc_a7dd:
  %0 = call i64 @mcount(), !insn.addr !4198
  %1 = trunc i64 %arg1 to i32
  %2 = urem i32 %1, 256, !insn.addr !4199
  %3 = shl i32 %2, ptrtoint (i8** @global_var_7 to i32), !insn.addr !4200
  %4 = or i32 %3, %1, !insn.addr !4201
  %5 = udiv i32 %1, 32, !insn.addr !4202
  %6 = and i32 %5, 2
  %7 = or i32 %4, %6, !insn.addr !4203
  %8 = zext i32 %7 to i64, !insn.addr !4203
  ret i64 %8, !insn.addr !4203
}

define i8 @StoreDeviceLNBPower(i64 %pDevExt, i8* %keyName, i64* %lpMessage) local_unnamed_addr {
dec_label_pc_a7ff:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = ptrtoint i64* %lpMessage to i64
  %2 = trunc i64 %1 to i32, !insn.addr !4204
  %3 = and i32 %2, ptrtoint (i32** @global_var_20 to i32), !insn.addr !4205
  %4 = ashr i32 %3, ptrtoint (i8** @global_var_3 to i32), !insn.addr !4206
  %5 = trunc i64 %0 to i32, !insn.addr !4207
  %6 = or i32 %4, %5, !insn.addr !4207
  %7 = trunc i32 %6 to i8, !insn.addr !4208
  ret i8 %7, !insn.addr !4208
}

define i8 @InitializeDeviceLNBPowerRegistry(i64 %pDevExt) local_unnamed_addr {
dec_label_pc_a80f:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = call i64 @__decompiler_undefined_function_0()
  %2 = call i64 @__decompiler_undefined_function_0()
  %3 = or i64 %2, %1
  %4 = trunc i64 %3 to i8, !insn.addr !4209
  %5 = trunc i64 %0 to i8
  %6 = and i8 %5, ptrtoint (i8* @global_var_8 to i8), !insn.addr !4210
  %7 = mul i8 %6, 2, !insn.addr !4210
  %8 = or i8 %7, %4, !insn.addr !4211
  ret i8 %8, !insn.addr !4212
}

define void @DTV_PollingWDThread(i8* %Context) local_unnamed_addr {
dec_label_pc_a81f:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = call i64 @__decompiler_undefined_function_0()
  %2 = trunc i64 %1 to i8, !insn.addr !4213
  %3 = icmp eq i8 %2, 63, !insn.addr !4213
  %4 = sub i64 %0, ptrtoint (i32* @global_var_1 to i64), !insn.addr !4214
  %5 = icmp ne i64 %4, 0, !insn.addr !4214
  %6 = icmp ne i1 %5, %3, !insn.addr !4214
  %7 = icmp eq i64 %4, ptrtoint (i32* @global_var_1 to i64), !insn.addr !4215
  %or.cond = or i1 %7, %6
  br i1 %or.cond, label %dec_label_pc_a823, label %8, !insn.addr !4214

dec_label_pc_a823:                                ; preds = %dec_label_pc_a81f, %8
  ret void, !insn.addr !4216

; <label>:8:                                      ; preds = %dec_label_pc_a81f
  %9 = ptrtoint i8* %Context to i64
  %10 = call i8 @DTV_5606B2_KeyTransfer1(i64 %9), !insn.addr !4215
  br label %dec_label_pc_a823, !insn.addr !4215
}

define i8 @DTV_5606B2_KeyTransfer1(i64 %pTuner) local_unnamed_addr {
dec_label_pc_a82a:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = trunc i64 %0 to i8, !insn.addr !4217
  %2 = add i8 %1, 9, !insn.addr !4217
  ret i8 %2, !insn.addr !4217
}

define i64 @StoreDeviceLNBPower.301(i64 %arg1, i64 %arg2, i64* %arg3) local_unnamed_addr {
dec_label_pc_a82f:
  %0 = call i64 @mcount(), !insn.addr !4218
  ret i64 0, !insn.addr !4219
}

define i64 @InitializeDeviceLNBPowerRegistry.299(i64 %arg1) local_unnamed_addr {
dec_label_pc_a83f:
  %0 = call i64 @mcount(), !insn.addr !4220
  ret i64 ptrtoint (i32* @global_var_1 to i64), !insn.addr !4221
}

define i64 @DTV_PollingWDThread.447() local_unnamed_addr {
dec_label_pc_a84f:
  %0 = call i64 @mcount(), !insn.addr !4222
  ret i64 %0, !insn.addr !4223
}

define i64 @DTV_5606B2_KeyTransfer1.193(i64 %arg1) local_unnamed_addr {
dec_label_pc_a85a:
  %r8.2.reg2mem = alloca i64, !insn.addr !4224
  %rdx.3.reg2mem = alloca i64, !insn.addr !4224
  %rax.2.reg2mem = alloca i64, !insn.addr !4224
  %r10.0.reg2mem = alloca i64, !insn.addr !4224
  %rsi.1.reg2mem = alloca i64, !insn.addr !4224
  %rdx.2.reg2mem = alloca i64, !insn.addr !4224
  %rcx.2.reg2mem = alloca i64, !insn.addr !4224
  %rax.1.reg2mem = alloca i64, !insn.addr !4224
  %r8.1.reg2mem = alloca i64, !insn.addr !4224
  %rsi.0.reg2mem = alloca i64, !insn.addr !4224
  %rdx.1.reg2mem = alloca i64, !insn.addr !4224
  %rcx.1.reg2mem = alloca i64, !insn.addr !4224
  %rax.0.reg2mem = alloca i64, !insn.addr !4224
  %rcx.0.reg2mem = alloca i64, !insn.addr !4224
  %r8.0.reg2mem = alloca i64, !insn.addr !4224
  %rdx.0.reg2mem = alloca i64, !insn.addr !4224
  %stack_var_-88 = alloca i8, align 1
  %stack_var_-42 = alloca i64, align 8
  %stack_var_-72 = alloca i64, align 8
  %stack_var_-104 = alloca i8, align 1
  %stack_var_-56 = alloca i64, align 8
  %stack_var_-49 = alloca i64, align 8
  %stack_var_-8 = alloca i64, align 8
  %0 = ptrtoint i64* %stack_var_-8 to i64, !insn.addr !4225
  %1 = call i64 @mcount(), !insn.addr !4226
  %2 = call i64 @__readgsqword(i64 40), !insn.addr !4227
  %3 = add i64 %0, -224, !insn.addr !4228
  store i64 0, i64* %rdx.0.reg2mem, !insn.addr !4229
  store i64 %arg1, i64* %r8.0.reg2mem, !insn.addr !4229
  br label %dec_label_pc_a88b, !insn.addr !4229

dec_label_pc_a88b:                                ; preds = %dec_label_pc_a8b1, %dec_label_pc_a85a
  %r8.0.reload = load i64, i64* %r8.0.reg2mem
  %rdx.0.reload = load i64, i64* %rdx.0.reg2mem
  %4 = add i64 %r8.0.reload, ptrtoint (i8** @global_var_30da4 to i64), !insn.addr !4230
  %5 = inttoptr i64 %4 to i8*, !insn.addr !4230
  %6 = load i8, i8* %5, align 1, !insn.addr !4230
  %7 = zext i8 %6 to i32
  store i64 0, i64* %rcx.0.reg2mem, !insn.addr !4230
  br label %dec_label_pc_a896, !insn.addr !4230

dec_label_pc_a896:                                ; preds = %dec_label_pc_a896, %dec_label_pc_a88b
  %rcx.0.reload = load i64, i64* %rcx.0.reg2mem
  %8 = mul i64 %rcx.0.reload, ptrtoint (i32* @global_var_1 to i64), !insn.addr !4231
  %9 = add i64 %8, %rdx.0.reload, !insn.addr !4231
  %10 = add nuw nsw i64 %rcx.0.reload, zext (i32 ptrtoint (i32* @global_var_1 to i32) to i64), !insn.addr !4232
  %11 = and i64 %10, 4294967295, !insn.addr !4232
  %sext = mul i64 %9, 4294967296
  %12 = sdiv i64 %sext, 4294967296, !insn.addr !4233
  %13 = trunc i64 %10 to i32, !insn.addr !4234
  %14 = and i32 %13, and (i32 ptrtoint (i8** @global_var_1f to i32), i32 255), !insn.addr !4234
  %15 = icmp eq i32 %14, 0, !insn.addr !4234
  %16 = lshr i32 %7, %14
  %17 = trunc i32 %16 to i8
  %storemerge = select i1 %15, i8 %6, i8 %17
  %18 = and i8 %storemerge, ptrtoint (i32* @global_var_1 to i8), !insn.addr !4235
  %19 = mul i64 %12, ptrtoint (i32* @global_var_1 to i64), !insn.addr !4228
  %20 = add i64 %19, %3, !insn.addr !4228
  %21 = inttoptr i64 %20 to i8*, !insn.addr !4228
  store i8 %18, i8* %21, align 4, !insn.addr !4228
  %22 = icmp eq i32 %13, ptrtoint (i8** @global_var_7 to i32), !insn.addr !4236
  %23 = icmp eq i1 %22, false, !insn.addr !4237
  store i64 %11, i64* %rcx.0.reg2mem, !insn.addr !4237
  br i1 %23, label %dec_label_pc_a896, label %dec_label_pc_a8b1, !insn.addr !4237

dec_label_pc_a8b1:                                ; preds = %dec_label_pc_a896
  %24 = add i64 %r8.0.reload, ptrtoint (i32* @global_var_1 to i64), !insn.addr !4238
  %25 = add nuw nsw i64 %rdx.0.reload, zext (i32 ptrtoint (i8** @global_var_7 to i32) to i64), !insn.addr !4239
  %26 = and i64 %25, 4294967295, !insn.addr !4239
  %27 = trunc i64 %25 to i32, !insn.addr !4240
  %28 = icmp eq i32 %27, 112, !insn.addr !4240
  %29 = icmp eq i1 %28, false, !insn.addr !4241
  store i64 %26, i64* %rdx.0.reg2mem, !insn.addr !4241
  store i64 %24, i64* %r8.0.reg2mem, !insn.addr !4241
  br i1 %29, label %dec_label_pc_a88b, label %dec_label_pc_a8bd, !insn.addr !4241

dec_label_pc_a8bd:                                ; preds = %dec_label_pc_a8b1
  %30 = ptrtoint i64* %stack_var_-49 to i64, !insn.addr !4242
  store i64 0, i64* %rsi.0.reg2mem, !insn.addr !4243
  store i64 %30, i64* %r8.1.reg2mem, !insn.addr !4243
  br label %dec_label_pc_a8fd, !insn.addr !4243

dec_label_pc_a8d4:                                ; preds = %45, %dec_label_pc_a8fd
  %rcx.1.reload = load i64, i64* %rcx.1.reg2mem
  %rax.0.reload = load i64, i64* %rax.0.reg2mem
  %31 = add i64 %rcx.1.reload, %59, !insn.addr !4244
  %sext3 = mul i64 %31, 4294967296
  %32 = sdiv i64 %sext3, 4294967296, !insn.addr !4245
  %33 = mul i64 %32, ptrtoint (i32* @global_var_1 to i64), !insn.addr !4246
  %34 = add i64 %33, %3, !insn.addr !4246
  %35 = inttoptr i64 %34 to i8*, !insn.addr !4246
  %36 = load i8, i8* %35, align 4, !insn.addr !4246
  %37 = zext i8 %36 to i64, !insn.addr !4246
  %38 = trunc i64 %rcx.1.reload to i32, !insn.addr !4247
  %39 = and i32 %38, and (i32 ptrtoint (i8** @global_var_1f to i32), i32 255), !insn.addr !4247
  %40 = icmp eq i32 %39, 0, !insn.addr !4247
  store i64 %37, i64* %rdx.1.reg2mem, !insn.addr !4247
  br i1 %40, label %45, label %41, !insn.addr !4247

; <label>:41:                                     ; preds = %dec_label_pc_a8d4
  %42 = zext i8 %36 to i32, !insn.addr !4247
  %43 = shl i32 %42, %39, !insn.addr !4247
  %44 = zext i32 %43 to i64, !insn.addr !4247
  store i64 %44, i64* %rdx.1.reg2mem, !insn.addr !4247
  br label %45, !insn.addr !4247

; <label>:45:                                     ; preds = %dec_label_pc_a8d4, %41
  %rdx.1.reload = load i64, i64* %rdx.1.reg2mem
  %46 = or i64 %rdx.1.reload, %rax.0.reload
  %47 = add nuw nsw i64 %rcx.1.reload, zext (i32 ptrtoint (i32* @global_var_1 to i32) to i64), !insn.addr !4248
  %48 = and i64 %47, 4294967295, !insn.addr !4248
  %49 = trunc i64 %47 to i32, !insn.addr !4249
  %50 = icmp eq i32 %49, ptrtoint (i8* @global_var_8 to i32), !insn.addr !4249
  %51 = icmp eq i1 %50, false, !insn.addr !4250
  store i64 %46, i64* %rax.0.reg2mem, !insn.addr !4250
  store i64 %48, i64* %rcx.1.reg2mem, !insn.addr !4250
  br i1 %51, label %dec_label_pc_a8d4, label %dec_label_pc_a8ee, !insn.addr !4250

dec_label_pc_a8ee:                                ; preds = %45
  %52 = trunc i64 %46 to i8, !insn.addr !4251
  %53 = inttoptr i64 %r8.1.reload to i8*, !insn.addr !4251
  store i8 %52, i8* %53, align 4, !insn.addr !4251
  %54 = add i64 %r8.1.reload, ptrtoint (i32* @global_var_1 to i64), !insn.addr !4252
  %55 = add nuw nsw i64 %rsi.0.reload, zext (i32 ptrtoint (i8* @global_var_8 to i32) to i64), !insn.addr !4253
  %56 = and i64 %55, 4294967295, !insn.addr !4253
  %57 = trunc i64 %55 to i32, !insn.addr !4254
  %58 = icmp eq i32 %57, 56, !insn.addr !4254
  store i64 %56, i64* %rsi.0.reg2mem, !insn.addr !4255
  store i64 %54, i64* %r8.1.reg2mem, !insn.addr !4255
  br i1 %58, label %dec_label_pc_a905, label %dec_label_pc_a8fd, !insn.addr !4255

dec_label_pc_a8fd:                                ; preds = %dec_label_pc_a8ee, %dec_label_pc_a8bd
  %r8.1.reload = load i64, i64* %r8.1.reg2mem
  %rsi.0.reload = load i64, i64* %rsi.0.reg2mem
  %59 = mul i64 %rsi.0.reload, ptrtoint (i32* @global_var_1 to i64), !insn.addr !4244
  store i64 0, i64* %rax.0.reg2mem, !insn.addr !4256
  store i64 0, i64* %rcx.1.reg2mem, !insn.addr !4256
  br label %dec_label_pc_a8d4, !insn.addr !4256

dec_label_pc_a905:                                ; preds = %dec_label_pc_a8ee
  %60 = ptrtoint i64* %stack_var_-56 to i64, !insn.addr !4257
  store i64 56, i64* %rsi.1.reg2mem, !insn.addr !4258
  store i64 %60, i64* %r10.0.reg2mem, !insn.addr !4258
  br label %dec_label_pc_a947, !insn.addr !4258

dec_label_pc_a91e:                                ; preds = %76, %dec_label_pc_a947
  %rcx.2.reload = load i64, i64* %rcx.2.reg2mem
  %rax.1.reload = load i64, i64* %rax.1.reg2mem
  %61 = mul i64 %rcx.2.reload, ptrtoint (i32* @global_var_1 to i64), !insn.addr !4259
  %62 = add i64 %61, %rsi.1.reload, !insn.addr !4259
  %sext4 = mul i64 %62, 4294967296
  %63 = sdiv i64 %sext4, 4294967296, !insn.addr !4260
  %64 = mul i64 %63, ptrtoint (i32* @global_var_1 to i64), !insn.addr !4261
  %65 = add i64 %64, %3, !insn.addr !4261
  %66 = inttoptr i64 %65 to i8*, !insn.addr !4261
  %67 = load i8, i8* %66, align 4, !insn.addr !4261
  %68 = zext i8 %67 to i64, !insn.addr !4261
  %69 = trunc i64 %rcx.2.reload to i32, !insn.addr !4262
  %70 = and i32 %69, and (i32 ptrtoint (i8** @global_var_1f to i32), i32 255), !insn.addr !4262
  %71 = icmp eq i32 %70, 0, !insn.addr !4262
  store i64 %68, i64* %rdx.2.reg2mem, !insn.addr !4262
  br i1 %71, label %76, label %72, !insn.addr !4262

; <label>:72:                                     ; preds = %dec_label_pc_a91e
  %73 = zext i8 %67 to i32, !insn.addr !4262
  %74 = shl i32 %73, %70, !insn.addr !4262
  %75 = zext i32 %74 to i64, !insn.addr !4262
  store i64 %75, i64* %rdx.2.reg2mem, !insn.addr !4262
  br label %76, !insn.addr !4262

; <label>:76:                                     ; preds = %dec_label_pc_a91e, %72
  %rdx.2.reload = load i64, i64* %rdx.2.reg2mem
  %77 = or i64 %rdx.2.reload, %rax.1.reload
  %78 = add nuw nsw i64 %rcx.2.reload, zext (i32 ptrtoint (i32* @global_var_1 to i32) to i64), !insn.addr !4263
  %79 = and i64 %78, 4294967295, !insn.addr !4263
  %80 = trunc i64 %78 to i32, !insn.addr !4264
  %81 = icmp eq i32 %80, ptrtoint (i8* @global_var_8 to i32), !insn.addr !4264
  %82 = icmp eq i1 %81, false, !insn.addr !4265
  store i64 %77, i64* %rax.1.reg2mem, !insn.addr !4265
  store i64 %79, i64* %rcx.2.reg2mem, !insn.addr !4265
  br i1 %82, label %dec_label_pc_a91e, label %dec_label_pc_a938, !insn.addr !4265

dec_label_pc_a938:                                ; preds = %76
  %83 = trunc i64 %77 to i8, !insn.addr !4266
  %84 = inttoptr i64 %r10.0.reload to i8*, !insn.addr !4266
  store i8 %83, i8* %84, align 4, !insn.addr !4266
  %85 = add i64 %r10.0.reload, ptrtoint (i32* @global_var_1 to i64), !insn.addr !4267
  %86 = add nuw nsw i64 %rsi.1.reload, 8, !insn.addr !4268
  %87 = and i64 %86, 4294967295, !insn.addr !4268
  %88 = trunc i64 %86 to i32, !insn.addr !4269
  %89 = icmp eq i32 %88, 112, !insn.addr !4269
  store i64 %87, i64* %rsi.1.reg2mem, !insn.addr !4270
  store i64 %85, i64* %r10.0.reg2mem, !insn.addr !4270
  br i1 %89, label %dec_label_pc_a94e, label %dec_label_pc_a947, !insn.addr !4270

dec_label_pc_a947:                                ; preds = %dec_label_pc_a938, %dec_label_pc_a905
  %r10.0.reload = load i64, i64* %r10.0.reg2mem
  %rsi.1.reload = load i64, i64* %rsi.1.reg2mem
  store i64 0, i64* %rax.1.reg2mem, !insn.addr !4271
  store i64 0, i64* %rcx.2.reg2mem, !insn.addr !4271
  br label %dec_label_pc_a91e, !insn.addr !4271

dec_label_pc_a94e:                                ; preds = %dec_label_pc_a938
  store i8 96, i8* %stack_var_-104, align 1, !insn.addr !4272
  %90 = ptrtoint i8* %stack_var_-104 to i64, !insn.addr !4273
  %91 = ptrtoint i64* %stack_var_-72 to i64, !insn.addr !4274
  %92 = ptrtoint i64* %stack_var_-42 to i64, !insn.addr !4275
  store i64 %91, i64* %rax.2.reg2mem, !insn.addr !4275
  store i64 %90, i64* %rdx.3.reg2mem, !insn.addr !4275
  store i64 %60, i64* %r8.2.reg2mem, !insn.addr !4275
  br label %dec_label_pc_aa6e, !insn.addr !4275

dec_label_pc_aa6e:                                ; preds = %dec_label_pc_aa6e, %dec_label_pc_a94e
  %r8.2.reload = load i64, i64* %r8.2.reg2mem
  %rdx.3.reload = load i64, i64* %rdx.3.reg2mem
  %rax.2.reload = load i64, i64* %rax.2.reg2mem
  %93 = inttoptr i64 %rdx.3.reload to i8*, !insn.addr !4276
  %94 = load i8, i8* %93, align 1, !insn.addr !4276
  %95 = inttoptr i64 %r8.2.reload to i8*, !insn.addr !4277
  %96 = load i8, i8* %95, align 4, !insn.addr !4277
  %97 = xor i8 %96, %94, !insn.addr !4277
  %98 = inttoptr i64 %rax.2.reload to i8*, !insn.addr !4278
  store i8 %97, i8* %98, align 4, !insn.addr !4278
  %99 = add i64 %r8.2.reload, ptrtoint (i32* @global_var_1 to i64), !insn.addr !4279
  %100 = add i64 %rdx.3.reload, ptrtoint (i32* @global_var_1 to i64), !insn.addr !4280
  %101 = add i64 %rax.2.reload, ptrtoint (i32* @global_var_1 to i64), !insn.addr !4281
  %102 = icmp eq i64 %99, %92, !insn.addr !4282
  %103 = icmp eq i1 %102, false, !insn.addr !4283
  store i64 %101, i64* %rax.2.reg2mem, !insn.addr !4283
  store i64 %100, i64* %rdx.3.reg2mem, !insn.addr !4283
  store i64 %99, i64* %r8.2.reg2mem, !insn.addr !4283
  br i1 %103, label %dec_label_pc_aa6e, label %dec_label_pc_aa87, !insn.addr !4283

dec_label_pc_aa87:                                ; preds = %dec_label_pc_aa6e
  %104 = ptrtoint i8* %stack_var_-88 to i64, !insn.addr !4284
  ret i64 %104, !insn.addr !4285
}

define void @DTV_Software_process_5606B2(i64 %pTuner, i8* %Input188B, i8* %Output188B) local_unnamed_addr {
dec_label_pc_ab87:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = add i64 %0, -24, !insn.addr !4286
  %2 = inttoptr i64 %1 to i64*, !insn.addr !4286
  %3 = load i64, i64* %2, align 8, !insn.addr !4286
  %4 = call i64 @__readgsqword(i64 40), !insn.addr !4287
  %5 = icmp eq i64 %3, %4, !insn.addr !4287
  br i1 %5, label %dec_label_pc_abad, label %dec_label_pc_aba8, !insn.addr !4288

dec_label_pc_aba8:                                ; preds = %dec_label_pc_ab87
  %6 = call i64 @__stack_chk_fail(), !insn.addr !4289
  br label %dec_label_pc_abad, !insn.addr !4289

dec_label_pc_abad:                                ; preds = %dec_label_pc_aba8, %dec_label_pc_ab87
  ret void, !insn.addr !4290
}

define i64 @DTV_Software_process_5606B2.177(i64 %arg1, i64 %arg2, i64 %arg3) local_unnamed_addr {
dec_label_pc_abb7:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = call i64 @mcount(), !insn.addr !4291
  %2 = trunc i64 %0 to i8
  %3 = inttoptr i64 %arg3 to i8*, !insn.addr !4292
  store i8 %2, i8* %3, align 1, !insn.addr !4292
  %4 = add i64 %arg2, ptrtoint (i32* @global_var_1 to i64), !insn.addr !4293
  %5 = inttoptr i64 %4 to i8*, !insn.addr !4293
  %6 = load i8, i8* %5, align 1, !insn.addr !4293
  %7 = add i64 %arg3, ptrtoint (i32* @global_var_1 to i64), !insn.addr !4294
  %8 = inttoptr i64 %7 to i8*, !insn.addr !4294
  store i8 %6, i8* %8, align 1, !insn.addr !4294
  %9 = add i64 %arg2, ptrtoint (i32* @global_var_2 to i64), !insn.addr !4295
  %10 = inttoptr i64 %9 to i8*, !insn.addr !4295
  %11 = load i8, i8* %10, align 1, !insn.addr !4295
  %12 = add i64 %arg3, ptrtoint (i32* @global_var_2 to i64), !insn.addr !4296
  %13 = inttoptr i64 %12 to i8*, !insn.addr !4296
  store i8 %11, i8* %13, align 1, !insn.addr !4296
  %14 = add i64 %arg2, ptrtoint (i8** @global_var_3 to i64), !insn.addr !4297
  %15 = inttoptr i64 %14 to i8*, !insn.addr !4297
  %16 = load i8, i8* %15, align 1, !insn.addr !4297
  %17 = add i64 %arg3, ptrtoint (i8** @global_var_3 to i64), !insn.addr !4298
  %18 = inttoptr i64 %17 to i8*, !insn.addr !4298
  store i8 %16, i8* %18, align 1, !insn.addr !4298
  ret i64 %arg1, !insn.addr !4299
}

define i64 @function_ac03() local_unnamed_addr {
dec_label_pc_ac03:
  %0 = call i64 @function_ffffffffc801ed24(), !insn.addr !4300
  ret i64 %0, !insn.addr !4300
}

define i32 @Gen_Identify_Key_01(i8* %OutputKey, i8* %InputKey, i8* %RandomKey) local_unnamed_addr {
dec_label_pc_ac0b:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = call i64 @__decompiler_undefined_function_0()
  %2 = call i64 @__decompiler_undefined_function_0()
  %3 = ptrtoint i8* %RandomKey to i64
  %4 = ptrtoint i8* %OutputKey to i64
  %5 = mul i64 %1, ptrtoint (i32* @global_var_1 to i64), !insn.addr !4301
  %6 = add i64 %4, ptrtoint (i8** @global_var_30dd4 to i64), !insn.addr !4301
  %7 = add i64 %6, %5, !insn.addr !4301
  %8 = inttoptr i64 %7 to i8*, !insn.addr !4301
  %9 = load i8, i8* %8, align 1, !insn.addr !4301
  %10 = add i8 %9, 89, !insn.addr !4302
  %11 = trunc i64 %0 to i8, !insn.addr !4303
  %12 = xor i8 %10, %11, !insn.addr !4304
  %13 = add i64 %3, ptrtoint (i16* @global_var_4 to i64), !insn.addr !4305
  %14 = inttoptr i64 %13 to i8*, !insn.addr !4305
  store i8 %12, i8* %14, align 1, !insn.addr !4305
  %15 = trunc i64 %2 to i32
  %16 = add i32 %15, ptrtoint (i32* @global_var_1 to i32), !insn.addr !4306
  ret i32 %16, !insn.addr !4306
}

define i64 @Gen_Identify_Key_01.303(i64 %arg1, i64 %arg2, i64 %arg3) local_unnamed_addr {
dec_label_pc_ac3b:
  %0 = call i64 @mcount(), !insn.addr !4307
  %1 = add i64 %arg3, ptrtoint (i8** @global_var_b to i64), !insn.addr !4308
  %2 = inttoptr i64 %1 to i8*, !insn.addr !4308
  %3 = load i8, i8* %2, align 1, !insn.addr !4308
  %4 = add i64 %arg2, ptrtoint (i8** @global_var_b to i64), !insn.addr !4309
  %5 = inttoptr i64 %4 to i8*, !insn.addr !4309
  %6 = load i8, i8* %5, align 1, !insn.addr !4309
  %7 = xor i8 %6, %3, !insn.addr !4309
  %8 = zext i8 %7 to i32, !insn.addr !4310
  %9 = shl i32 %8, ptrtoint (i32** @global_var_18 to i32), !insn.addr !4310
  %10 = add i64 %arg3, ptrtoint ([4 x i8]* @global_var_c to i64), !insn.addr !4311
  %11 = inttoptr i64 %10 to i8*, !insn.addr !4311
  %12 = load i8, i8* %11, align 1, !insn.addr !4311
  %13 = add i64 %arg2, ptrtoint ([4 x i8]* @global_var_c to i64), !insn.addr !4312
  %14 = inttoptr i64 %13 to i8*, !insn.addr !4312
  %15 = load i8, i8* %14, align 1, !insn.addr !4312
  %16 = xor i8 %15, %12, !insn.addr !4312
  %17 = zext i8 %16 to i32, !insn.addr !4313
  %18 = shl i32 %17, ptrtoint (i8* @global_var_10 to i32), !insn.addr !4313
  %19 = xor i32 %18, %9, !insn.addr !4314
  %20 = add i64 %arg3, ptrtoint (i16** @global_var_e to i64), !insn.addr !4315
  %21 = inttoptr i64 %20 to i8*, !insn.addr !4315
  %22 = load i8, i8* %21, align 1, !insn.addr !4315
  %23 = add i64 %arg2, ptrtoint (i16** @global_var_e to i64), !insn.addr !4316
  %24 = inttoptr i64 %23 to i8*, !insn.addr !4316
  %25 = load i8, i8* %24, align 1, !insn.addr !4316
  %26 = xor i8 %25, %22, !insn.addr !4316
  %27 = zext i8 %26 to i32, !insn.addr !4317
  %28 = xor i32 %19, %27, !insn.addr !4317
  %29 = add i64 %arg3, ptrtoint ([3 x i8]* @global_var_d to i64), !insn.addr !4318
  %30 = inttoptr i64 %29 to i8*, !insn.addr !4318
  %31 = load i8, i8* %30, align 1, !insn.addr !4318
  %32 = add i64 %arg2, ptrtoint ([3 x i8]* @global_var_d to i64), !insn.addr !4319
  %33 = inttoptr i64 %32 to i8*, !insn.addr !4319
  %34 = load i8, i8* %33, align 1, !insn.addr !4319
  %35 = xor i8 %34, %31, !insn.addr !4319
  %36 = zext i8 %35 to i32, !insn.addr !4320
  %37 = shl i32 %36, ptrtoint (i8* @global_var_8 to i32), !insn.addr !4320
  %38 = xor i32 %28, %37, !insn.addr !4321
  %39 = zext i32 %38 to i64, !insn.addr !4321
  ret i64 %39, !insn.addr !4322
}

define void @Gen_Identify_Key(i8* %OutputKey, i8* %InputKey, i8* %RandomKey) local_unnamed_addr {
dec_label_pc_ad6f:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = call i64 @__decompiler_undefined_function_0()
  %2 = call i64 @__decompiler_undefined_function_0()
  %3 = call i64 @__decompiler_undefined_function_0()
  %4 = ptrtoint i8* %InputKey to i64
  %5 = ptrtoint i8* %OutputKey to i64
  %6 = xor i64 %0, %4
  %7 = xor i64 %1, %6
  %8 = xor i64 %2, %7
  %9 = trunc i64 %3 to i32
  %10 = xor i32 %9, 178, !insn.addr !4323
  %11 = trunc i64 %8 to i32, !insn.addr !4323
  %12 = xor i32 %10, %11, !insn.addr !4323
  %13 = trunc i64 %6 to i32, !insn.addr !4324
  %14 = bitcast i8* %OutputKey to i32*, !insn.addr !4324
  store i32 %13, i32* %14, align 4, !insn.addr !4324
  %15 = trunc i64 %7 to i32, !insn.addr !4325
  %16 = add i64 %5, ptrtoint (i16* @global_var_4 to i64), !insn.addr !4325
  %17 = inttoptr i64 %16 to i32*, !insn.addr !4325
  store i32 %15, i32* %17, align 4, !insn.addr !4325
  %18 = add i64 %5, ptrtoint (i8* @global_var_8 to i64), !insn.addr !4326
  %19 = inttoptr i64 %18 to i32*, !insn.addr !4326
  store i32 %11, i32* %19, align 4, !insn.addr !4326
  %20 = add i64 %5, ptrtoint ([4 x i8]* @global_var_c to i64), !insn.addr !4327
  %21 = inttoptr i64 %20 to i32*, !insn.addr !4327
  store i32 %12, i32* %21, align 4, !insn.addr !4327
  ret void, !insn.addr !4328
}

define i64 @Gen_Identify_Key.610(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_ad9f:
  %rsi.0.reg2mem = alloca i64, !insn.addr !4329
  %rdx.0.reg2mem = alloca i64, !insn.addr !4329
  %rax.0.reg2mem = alloca i64, !insn.addr !4329
  %stack_var_-40 = alloca i32, align 4
  %0 = call i64 @mcount(), !insn.addr !4330
  %1 = call i64 @__readgsqword(i64 40), !insn.addr !4331
  %2 = ptrtoint i32* %stack_var_-40 to i64, !insn.addr !4332
  %3 = add i64 %arg2, ptrtoint (i8* @global_var_10 to i64), !insn.addr !4333
  store i64 %2, i64* %rax.0.reg2mem, !insn.addr !4333
  store i64 %arg2, i64* %rsi.0.reg2mem, !insn.addr !4333
  br label %dec_label_pc_adc3, !insn.addr !4333

dec_label_pc_adc3:                                ; preds = %dec_label_pc_adc3, %dec_label_pc_ad9f
  %rsi.0.reload = load i64, i64* %rsi.0.reg2mem
  %rdx.0.reload = load i64, i64* %rdx.0.reg2mem
  %rax.0.reload = load i64, i64* %rax.0.reg2mem
  %4 = inttoptr i64 %rdx.0.reload to i8*, !insn.addr !4334
  %5 = load i8, i8* %4, align 1, !insn.addr !4334
  %6 = inttoptr i64 %rsi.0.reload to i8*, !insn.addr !4335
  %7 = load i8, i8* %6, align 1, !insn.addr !4335
  %8 = xor i8 %7, %5, !insn.addr !4335
  %9 = inttoptr i64 %rax.0.reload to i8*, !insn.addr !4336
  store i8 %8, i8* %9, align 4, !insn.addr !4336
  %10 = add i64 %rsi.0.reload, 1, !insn.addr !4337
  %11 = add i64 %rdx.0.reload, 1, !insn.addr !4338
  %12 = add i64 %rax.0.reload, ptrtoint (i32* @global_var_1 to i64), !insn.addr !4339
  %13 = icmp eq i64 %10, %3, !insn.addr !4340
  %14 = icmp eq i1 %13, false, !insn.addr !4341
  store i64 %12, i64* %rax.0.reg2mem, !insn.addr !4341
  store i64 %11, i64* %rdx.0.reg2mem, !insn.addr !4341
  store i64 %10, i64* %rsi.0.reg2mem, !insn.addr !4341
  br i1 %14, label %dec_label_pc_adc3, label %dec_label_pc_addb, !insn.addr !4341

dec_label_pc_addb:                                ; preds = %dec_label_pc_adc3
  call void @llvm.trap()
  unreachable
}

define i8 @DTV_GetIRData(i64 %pTuner, i8* %pu8OutPutBuf, i8* %valid_cnt) local_unnamed_addr {
dec_label_pc_af07:
  %rax.0.reg2mem = alloca i64, !insn.addr !4342
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = ptrtoint i8* %valid_cnt to i64
  %2 = and i64 %1, 4294967295, !insn.addr !4342
  store i64 %2, i64* %rax.0.reg2mem, !insn.addr !4342
  br label %dec_label_pc_af09, !insn.addr !4342

dec_label_pc_af09:                                ; preds = %dec_label_pc_af09, %dec_label_pc_af07
  %rax.0.reload = load i64, i64* %rax.0.reg2mem
  %3 = inttoptr i64 %rax.0.reload to i32*, !insn.addr !4343
  %4 = load i32, i32* %3, align 4, !insn.addr !4343
  %5 = add i64 %rax.0.reload, -16, !insn.addr !4344
  %6 = inttoptr i64 %5 to i32*, !insn.addr !4344
  store i32 %4, i32* %6, align 4, !insn.addr !4344
  %7 = add i64 %rax.0.reload, ptrtoint (i16* @global_var_4 to i64), !insn.addr !4345
  %8 = icmp eq i64 %7, %0, !insn.addr !4346
  %9 = icmp eq i1 %8, false, !insn.addr !4347
  store i64 %7, i64* %rax.0.reg2mem, !insn.addr !4347
  br i1 %9, label %dec_label_pc_af09, label %dec_label_pc_af17, !insn.addr !4347

dec_label_pc_af17:                                ; preds = %dec_label_pc_af09
  %10 = trunc i64 %7 to i8, !insn.addr !4348
  ret i8 %10, !insn.addr !4348
}

define i64 @DTV_GetIRData.344(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_af37:
  %0 = call i64 @mcount(), !insn.addr !4349
  ret i64 %0, !insn.addr !4350
}

define i64 @function_af70() local_unnamed_addr {
dec_label_pc_af70:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = add i64 %0, -119, !insn.addr !4351
  %2 = inttoptr i64 %1 to i32*, !insn.addr !4351
  %3 = load i32, i32* %2, align 4, !insn.addr !4351
  %4 = sub i32 %3, ptrtoint (i32* @global_var_1 to i32), !insn.addr !4351
  store i32 %4, i32* %2, align 4, !insn.addr !4351
  ret i64 %0, !insn.addr !4352
}

define i8 @DTV_GetDecryptionInformation(i64 %pTuner, i8* %keyarray, i32* %hw_version) local_unnamed_addr {
dec_label_pc_af8a:
  %rax.0.reg2mem = alloca i64, !insn.addr !4353
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = call i64 @__decompiler_undefined_function_0()
  %2 = call i64 @__decompiler_undefined_function_0()
  %3 = call i64 @__decompiler_undefined_function_0()
  %4 = trunc i64 %2 to i8, !insn.addr !4353
  %5 = and i8 %4, ptrtoint (i8** @global_var_1f to i8), !insn.addr !4353
  %6 = icmp eq i8 %5, 0, !insn.addr !4353
  br i1 %6, label %14, label %7, !insn.addr !4353

; <label>:7:                                      ; preds = %dec_label_pc_af8a
  %8 = add i64 %3, -115, !insn.addr !4353
  %9 = inttoptr i64 %8 to i8*, !insn.addr !4353
  %10 = load i8, i8* %9, align 1, !insn.addr !4353
  %11 = sub i8 ptrtoint (i8* @global_var_8 to i8), %5, !insn.addr !4353
  %12 = shl i8 %10, %11, !insn.addr !4353
  %13 = or i8 %12, %10, !insn.addr !4353
  store i8 %13, i8* %9, align 1, !insn.addr !4353
  br label %14, !insn.addr !4353

; <label>:14:                                     ; preds = %dec_label_pc_af8a, %7
  %15 = ptrtoint i32* %hw_version to i64
  %16 = ptrtoint i8* %keyarray to i64
  %17 = call i64 @memcpy(i64 %0, i64 %16, i64 %15, i64 %2), !insn.addr !4354
  %18 = add i64 %1, -24, !insn.addr !4355
  %19 = inttoptr i64 %18 to i64*, !insn.addr !4355
  %20 = load i64, i64* %19, align 8, !insn.addr !4355
  %21 = call i64 @__readgsqword(i64 40), !insn.addr !4356
  %22 = icmp eq i64 %20, %21, !insn.addr !4356
  store i64 ptrtoint (i32* @global_var_1 to i64), i64* %rax.0.reg2mem, !insn.addr !4357
  br i1 %22, label %dec_label_pc_afb0, label %dec_label_pc_afab, !insn.addr !4357

dec_label_pc_afab:                                ; preds = %14
  %23 = call i64 @__stack_chk_fail(), !insn.addr !4358
  store i64 %23, i64* %rax.0.reg2mem, !insn.addr !4358
  br label %dec_label_pc_afb0, !insn.addr !4358

dec_label_pc_afb0:                                ; preds = %dec_label_pc_afab, %14
  %rax.0.reload = load i64, i64* %rax.0.reg2mem
  %24 = trunc i64 %rax.0.reload to i8, !insn.addr !4359
  ret i8 %24, !insn.addr !4359
}

define i64 @DTV_GetDecryptionInformation.307() local_unnamed_addr {
dec_label_pc_afba:
  %0 = call i64 @__decompiler_undefined_function_0()
  ret i64 %0, !insn.addr !4360
}

define i32 @BCAS_CMDSet(i8* %PDev, i8* %buffer, i32 %size, i8 %bInitCmd, i8* %bcas) local_unnamed_addr {
dec_label_pc_afc2:
  %.reg2mem = alloca i64, !insn.addr !4361
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = call i64 @__decompiler_undefined_function_0()
  %2 = trunc i64 %1 to i8
  %3 = lshr i64 %0, ptrtoint (i8* @global_var_8 to i64), !insn.addr !4361
  %4 = trunc i64 %3 to i8, !insn.addr !4361
  %5 = add i8 %2, %4, !insn.addr !4361
  %6 = inttoptr i64 %1 to i8*, !insn.addr !4361
  store i8 %5, i8* %6, align 1, !insn.addr !4361
  %7 = icmp eq i8* %PDev, null, !insn.addr !4362
  br i1 %7, label %dec_label_pc_aff0, label %dec_label_pc_afcd, !insn.addr !4363

dec_label_pc_afcd:                                ; preds = %dec_label_pc_afc2
  %8 = ptrtoint i8* %PDev to i64
  %9 = ptrtoint i8* %buffer to i64
  %10 = sext i32 %size to i64
  %11 = add i64 %8, ptrtoint (i8** @global_var_30da4 to i64), !insn.addr !4364
  %12 = inttoptr i64 %11 to i64*, !insn.addr !4365
  %13 = load i64, i64* %12, align 8, !insn.addr !4365
  %14 = bitcast i8* %buffer to i64*, !insn.addr !4366
  store i64 %13, i64* %14, align 8, !insn.addr !4366
  %15 = add i64 %8, add (i64 ptrtoint (i8** @global_var_30da4 to i64), i64 ptrtoint (i8* @global_var_8 to i64)), !insn.addr !4367
  %16 = inttoptr i64 %15 to i64*, !insn.addr !4367
  %17 = load i64, i64* %16, align 8, !insn.addr !4367
  %18 = add i64 %9, ptrtoint (i8* @global_var_8 to i64), !insn.addr !4368
  %19 = inttoptr i64 %18 to i64*, !insn.addr !4368
  store i64 %17, i64* %19, align 8, !insn.addr !4368
  %20 = add i64 %8, 586869, !insn.addr !4369
  %21 = inttoptr i64 %20 to i8*, !insn.addr !4369
  %22 = load i8, i8* %21, align 1, !insn.addr !4369
  %23 = zext i8 %22 to i32, !insn.addr !4370
  %24 = inttoptr i64 %10 to i32*, !insn.addr !4370
  store i32 %23, i32* %24, align 4, !insn.addr !4370
  store i64 ptrtoint (i32* @global_var_1 to i64), i64* %.reg2mem, !insn.addr !4371
  br label %dec_label_pc_aff0, !insn.addr !4371

dec_label_pc_aff0:                                ; preds = %dec_label_pc_afc2, %dec_label_pc_afcd
  %.reload = load i64, i64* %.reg2mem, !insn.addr !4372
  %25 = trunc i64 %.reload to i32, !insn.addr !4372
  ret i32 %25, !insn.addr !4372
}

define i64 @BCAS_CMDSet.407(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4, i64 %arg5) local_unnamed_addr {
dec_label_pc_aff2:
  %0 = call i64 @mcount(), !insn.addr !4373
  %1 = trunc i64 %arg3 to i32, !insn.addr !4374
  %2 = urem i32 %1, 256, !insn.addr !4375
  %3 = add i64 %arg1, 400, !insn.addr !4375
  %4 = inttoptr i64 %3 to i32*, !insn.addr !4375
  store i32 %2, i32* %4, align 4, !insn.addr !4375
  %5 = add i64 %arg1, 80, !insn.addr !4376
  %6 = and i64 %arg3, 4294967295, !insn.addr !4377
  %7 = call i64 @memcpy(i64 %5, i64 %arg2, i64 %6, i64 %arg4), !insn.addr !4378
  ret i64 %7, !insn.addr !4378
}

define void @Get_Unique_ID(i64 %pTuner, i8* %ID) local_unnamed_addr {
dec_label_pc_b037:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = call i64 @__decompiler_undefined_function_0()
  %2 = call i64 @__decompiler_undefined_function_0()
  %3 = call i64 @__decompiler_undefined_function_0()
  %4 = mul i64 %2, ptrtoint (i16* @global_var_4 to i64), !insn.addr !4379
  %5 = add i64 %2, -93, !insn.addr !4379
  %6 = add i64 %5, %4, !insn.addr !4379
  %7 = inttoptr i64 %6 to i8*, !insn.addr !4379
  %8 = load i8, i8* %7, align 1, !insn.addr !4379
  %9 = trunc i64 %2 to i8, !insn.addr !4379
  %10 = add i8 %8, %9, !insn.addr !4379
  store i8 %10, i8* %7, align 1, !insn.addr !4379
  %11 = mul i64 %3, add (i64 ptrtoint (i32* @global_var_1 to i64), i64 1), !insn.addr !4380
  %12 = inttoptr i64 %11 to i8*, !insn.addr !4380
  %13 = load i8, i8* %12, align 1, !insn.addr !4380
  %14 = trunc i64 %3 to i8, !insn.addr !4380
  %15 = and i8 %13, %14, !insn.addr !4380
  store i8 %15, i8* %12, align 1, !insn.addr !4380
  %16 = lshr i64 %1, ptrtoint (i8* @global_var_8 to i64), !insn.addr !4381
  %17 = add i64 %3, %16, !insn.addr !4381
  %18 = urem i64 %17, 256, !insn.addr !4381
  %19 = shl i64 %18, ptrtoint (i8* @global_var_8 to i64), !insn.addr !4381
  %20 = and i64 %1, -65281, !insn.addr !4381
  %21 = or i64 %19, %20, !insn.addr !4381
  %22 = inttoptr i64 %3 to i8*, !insn.addr !4382
  %23 = load i8, i8* %22, align 1, !insn.addr !4382
  %24 = add i8 %23, %14, !insn.addr !4382
  store i8 %24, i8* %22, align 1, !insn.addr !4382
  %25 = lshr i64 %21, ptrtoint (i8* @global_var_8 to i64), !insn.addr !4383
  %26 = add i64 %25, %3, !insn.addr !4383
  %27 = urem i64 %26, 256, !insn.addr !4383
  %28 = and i64 %3, -256, !insn.addr !4383
  %29 = or i64 %27, %28, !insn.addr !4383
  %30 = inttoptr i64 %29 to i8*, !insn.addr !4384
  %31 = load i8, i8* %30, align 1, !insn.addr !4384
  %32 = trunc i64 %26 to i8, !insn.addr !4384
  %33 = add i8 %31, %32, !insn.addr !4384
  store i8 %33, i8* %30, align 1, !insn.addr !4384
  %34 = add i64 %29, ptrtoint (i8* @global_var_5 to i64), !insn.addr !4385
  %35 = inttoptr i64 %34 to i8*, !insn.addr !4385
  %36 = load i8, i8* %35, align 1, !insn.addr !4385
  %37 = lshr i64 %0, ptrtoint (i8* @global_var_8 to i64), !insn.addr !4385
  %38 = trunc i64 %37 to i8, !insn.addr !4385
  %39 = add i8 %36, %38, !insn.addr !4385
  store i8 %39, i8* %35, align 1, !insn.addr !4385
  ret void, !insn.addr !4386
}

define i64 @Get_Unique_ID.399(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_b067:
  %0 = call i64 @mcount(), !insn.addr !4387
  %1 = call i64 @__readgsqword(i64 40), !insn.addr !4388
  %2 = add i64 %arg1, 7480, !insn.addr !4389
  %3 = inttoptr i64 %2 to i64*, !insn.addr !4389
  %4 = load i64, i64* %3, align 8, !insn.addr !4389
  %5 = add i64 %4, 20385, !insn.addr !4390
  %6 = inttoptr i64 %5 to i64*, !insn.addr !4390
  %7 = load i64, i64* %6, align 8, !insn.addr !4390
  ret i64 %7, !insn.addr !4390
}

define i8 @DTV_GetEmergencyAlarmStatus(i64 %pTnim, i8 %u8TunerNum, i8* %emergencyAlarmStatus) local_unnamed_addr {
dec_label_pc_b106:
  %rax.0.reg2mem = alloca i8, !insn.addr !4391
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = ptrtoint i8* %emergencyAlarmStatus to i64
  %2 = sext i8 %u8TunerNum to i64
  %3 = trunc i64 %1 to i16, !insn.addr !4392
  %4 = call i8 @__asm_in(i16 %3), !insn.addr !4392
  call void @__asm_out.622(i16 %3, i8 %4), !insn.addr !4393
  %5 = add i64 %0, -17, !insn.addr !4394
  %6 = inttoptr i64 %5 to i8*, !insn.addr !4394
  store i8 ptrtoint (i32** @global_var_14 to i8), i8* %6, align 1, !insn.addr !4394
  %7 = call i64 @Gen_Identify_Key.610(i64 %pTnim, i64 %2), !insn.addr !4395
  %8 = add i64 %0, -8, !insn.addr !4396
  %9 = inttoptr i64 %8 to i64*, !insn.addr !4396
  %10 = load i64, i64* %9, align 8, !insn.addr !4396
  %11 = call i64 @__readgsqword(i64 40), !insn.addr !4397
  %12 = icmp eq i64 %10, %11, !insn.addr !4397
  store i8 0, i8* %rax.0.reg2mem, !insn.addr !4398
  br i1 %12, label %dec_label_pc_b134, label %dec_label_pc_b12f, !insn.addr !4398

dec_label_pc_b12f:                                ; preds = %dec_label_pc_b106
  %13 = call i64 @__stack_chk_fail(), !insn.addr !4399
  %phitmp = trunc i64 %13 to i8
  store i8 %phitmp, i8* %rax.0.reg2mem, !insn.addr !4399
  br label %dec_label_pc_b134, !insn.addr !4399

dec_label_pc_b134:                                ; preds = %dec_label_pc_b12f, %dec_label_pc_b106
  %rax.0.reload = load i8, i8* %rax.0.reg2mem
  ret i8 %rax.0.reload, !insn.addr !4400
}

define i64 @DTV_GetEmergencyAlarmStatus.234(i64 %arg1, i64 %arg2, i64 %arg3) local_unnamed_addr {
dec_label_pc_b136:
  %0 = call i64 @mcount(), !insn.addr !4401
  %1 = icmp eq i64 %arg1, 0, !insn.addr !4402
  %2 = icmp eq i1 %1, false, !insn.addr !4403
  br i1 %2, label %dec_label_pc_b15b, label %dec_label_pc_b14c, !insn.addr !4403

dec_label_pc_b14c:                                ; preds = %dec_label_pc_b136
  %3 = inttoptr i64 %arg3 to i8*, !insn.addr !4404
  store i8 0, i8* %3, align 1, !insn.addr !4404
  ret i64 0, !insn.addr !4405

dec_label_pc_b15b:                                ; preds = %dec_label_pc_b136
  ret i64 ptrtoint (i32* @global_var_1 to i64), !insn.addr !4406
}

define i8 @DTV_GetAGCValue(i64 %pTnim, i8 %u8TunerNum, i64* %agcvalue) local_unnamed_addr {
dec_label_pc_b167:
  %rax.0.reg2mem = alloca i64, !insn.addr !4407
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = icmp eq i64* %agcvalue, null, !insn.addr !4407
  br i1 %1, label %dec_label_pc_b190, label %dec_label_pc_b16c, !insn.addr !4408

dec_label_pc_b16c:                                ; preds = %dec_label_pc_b167
  %2 = call i64 @TC_GetEmergencyAlarmStatus.509(), !insn.addr !4409
  %3 = trunc i64 %2 to i8, !insn.addr !4410
  %4 = inttoptr i64 %0 to i8*, !insn.addr !4410
  store i8 %3, i8* %4, align 1, !insn.addr !4410
  store i64 ptrtoint (i32* @global_var_1 to i64), i64* %rax.0.reg2mem, !insn.addr !4411
  br label %dec_label_pc_b190, !insn.addr !4411

dec_label_pc_b190:                                ; preds = %dec_label_pc_b16c, %dec_label_pc_b167
  %rax.0.reload = load i64, i64* %rax.0.reg2mem
  %5 = trunc i64 %rax.0.reload to i8, !insn.addr !4412
  ret i8 %5, !insn.addr !4412
}

define i64 @DTV_GetAGCValue.214(i64 %arg1, i64 %arg2, i64 %arg3) local_unnamed_addr {
dec_label_pc_b197:
  %0 = call i64 @mcount(), !insn.addr !4413
  %1 = icmp eq i64 %arg1, 0, !insn.addr !4414
  %2 = icmp eq i1 %1, false, !insn.addr !4415
  br i1 %2, label %dec_label_pc_b1c0, label %dec_label_pc_b1ad, !insn.addr !4415

dec_label_pc_b1ad:                                ; preds = %dec_label_pc_b197
  %3 = inttoptr i64 %arg3 to i64*, !insn.addr !4416
  store i64 0, i64* %3, align 8, !insn.addr !4416
  ret i64 0, !insn.addr !4417

dec_label_pc_b1c0:                                ; preds = %dec_label_pc_b197
  ret i64 ptrtoint (i32* @global_var_1 to i64), !insn.addr !4418
}

define i8 @DTV_GetBERValue(i64 %pTnim, i8 %u8TunerNum, i64* %BER1, i64* %BER2) local_unnamed_addr {
dec_label_pc_b1cd:
  %rax.0.reg2mem = alloca i64, !insn.addr !4419
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = ptrtoint i64* %BER1 to i64
  %2 = trunc i64 %1 to i32, !insn.addr !4419
  %3 = icmp eq i32 %2, 0, !insn.addr !4419
  br i1 %3, label %dec_label_pc_b1f6, label %dec_label_pc_b1d1, !insn.addr !4420

dec_label_pc_b1d1:                                ; preds = %dec_label_pc_b1cd
  %4 = call i64 @TC_GetAGC.168(), !insn.addr !4421
  %5 = inttoptr i64 %0 to i64*, !insn.addr !4422
  store i64 %4, i64* %5, align 8, !insn.addr !4422
  store i64 ptrtoint (i32* @global_var_1 to i64), i64* %rax.0.reg2mem, !insn.addr !4423
  br label %dec_label_pc_b1f6, !insn.addr !4423

dec_label_pc_b1f6:                                ; preds = %dec_label_pc_b1d1, %dec_label_pc_b1cd
  %rax.0.reload = load i64, i64* %rax.0.reg2mem
  %6 = trunc i64 %rax.0.reload to i8, !insn.addr !4424
  ret i8 %6, !insn.addr !4424
}

define i64 @DTV_GetBERValue.561(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4) local_unnamed_addr {
dec_label_pc_b1fd:
  %0 = call i64 @mcount(), !insn.addr !4425
  %1 = icmp eq i64 %arg1, 0, !insn.addr !4426
  %2 = icmp eq i1 %1, false, !insn.addr !4427
  br i1 %2, label %dec_label_pc_b22a, label %dec_label_pc_b20b, !insn.addr !4427

dec_label_pc_b20b:                                ; preds = %dec_label_pc_b1fd
  %3 = icmp eq i64 %arg3, 0, !insn.addr !4428
  br i1 %3, label %dec_label_pc_b217, label %dec_label_pc_b210, !insn.addr !4429

dec_label_pc_b210:                                ; preds = %dec_label_pc_b20b
  %4 = inttoptr i64 %arg3 to i64*, !insn.addr !4430
  store i64 0, i64* %4, align 8, !insn.addr !4430
  br label %dec_label_pc_b217, !insn.addr !4430

dec_label_pc_b217:                                ; preds = %dec_label_pc_b210, %dec_label_pc_b20b
  %5 = inttoptr i64 %arg4 to i64*, !insn.addr !4431
  store i64 0, i64* %5, align 8, !insn.addr !4431
  ret i64 0, !insn.addr !4432

dec_label_pc_b22a:                                ; preds = %dec_label_pc_b1fd
  ret i64 %0, !insn.addr !4433
}

define i8 @DTV_GetCNRegisterValue(i64 %pTnim, i8 %u8TunerNum, i64* %cnvalue) local_unnamed_addr {
dec_label_pc_b236:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = icmp eq i64 %0, 0, !insn.addr !4434
  %2 = icmp eq i1 %1, false, !insn.addr !4435
  br i1 %2, label %dec_label_pc_b242, label %dec_label_pc_b264, !insn.addr !4435

dec_label_pc_b242:                                ; preds = %dec_label_pc_b236
  %3 = zext i8 %u8TunerNum to i64
  %4 = ptrtoint i64* %cnvalue to i64
  %5 = mul i64 %3, shl (i64 add (i64 ptrtoint (i16* @global_var_4 to i64), i64 1), i64 ptrtoint (i16* @global_var_4 to i64)), !insn.addr !4436
  %6 = add i64 %pTnim, 22880, !insn.addr !4437
  %7 = add i64 %6, %5, !insn.addr !4437
  %8 = call i64 @TC_GetBER.396(i64 %pTnim, i64 %3, i64 %4, i64 %0, i64 %7), !insn.addr !4438
  br label %dec_label_pc_b264, !insn.addr !4439

dec_label_pc_b264:                                ; preds = %dec_label_pc_b236, %dec_label_pc_b242
  ret i8 ptrtoint (i32* @global_var_1 to i8), !insn.addr !4440
}

define i64 @DTV_GetCNRegisterValue.490(i64 %arg1, i8 %arg2, i64* %arg3) local_unnamed_addr {
dec_label_pc_b266:
  %0 = call i64 @mcount(), !insn.addr !4441
  %1 = icmp eq i64 %arg1, 0, !insn.addr !4442
  %2 = icmp eq i1 %1, false, !insn.addr !4443
  br i1 %2, label %dec_label_pc_b28f, label %dec_label_pc_b27c, !insn.addr !4443

dec_label_pc_b27c:                                ; preds = %dec_label_pc_b266
  store i64 0, i64* %arg3, align 8, !insn.addr !4444
  ret i64 0, !insn.addr !4445

dec_label_pc_b28f:                                ; preds = %dec_label_pc_b266
  ret i64 ptrtoint (i32* @global_var_1 to i64), !insn.addr !4446
}

define i8 @DTV_GetCNValue(i64 %pTnim, i8 %u8TunerNum, i64* %cnvalue) local_unnamed_addr {
dec_label_pc_b29c:
  %rax.0.reg2mem = alloca i64, !insn.addr !4447
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = ptrtoint i64* %cnvalue to i64
  %2 = trunc i64 %1 to i32, !insn.addr !4447
  %3 = icmp eq i32 %2, 0, !insn.addr !4447
  br i1 %3, label %dec_label_pc_b2c5, label %dec_label_pc_b2a0, !insn.addr !4448

dec_label_pc_b2a0:                                ; preds = %dec_label_pc_b29c
  %4 = zext i8 %u8TunerNum to i64
  %5 = mul i64 %4, shl (i64 add (i64 ptrtoint (i16* @global_var_4 to i64), i64 1), i64 ptrtoint (i16* @global_var_4 to i64)), !insn.addr !4449
  %6 = add i64 %pTnim, 22880, !insn.addr !4450
  %7 = add i64 %6, %5, !insn.addr !4450
  %8 = call i64 @TC_GetCNRegister.527(i64 %pTnim, i64 %4, i64 %7), !insn.addr !4451
  %9 = inttoptr i64 %0 to i64*, !insn.addr !4452
  store i64 %8, i64* %9, align 8, !insn.addr !4452
  store i64 ptrtoint (i32* @global_var_1 to i64), i64* %rax.0.reg2mem, !insn.addr !4453
  br label %dec_label_pc_b2c5, !insn.addr !4453

dec_label_pc_b2c5:                                ; preds = %dec_label_pc_b2a0, %dec_label_pc_b29c
  %rax.0.reload = load i64, i64* %rax.0.reg2mem
  %10 = trunc i64 %rax.0.reload to i8, !insn.addr !4454
  ret i8 %10, !insn.addr !4454
}

define i64 @DTV_GetCNValue.373(i64 %arg1, i64 %arg2, i64 %arg3) local_unnamed_addr {
dec_label_pc_b2cc:
  %0 = call i64 @mcount(), !insn.addr !4455
  %1 = icmp eq i64 %arg1, 0, !insn.addr !4456
  %2 = icmp eq i1 %1, false, !insn.addr !4457
  br i1 %2, label %dec_label_pc_b2f5, label %dec_label_pc_b2e2, !insn.addr !4457

dec_label_pc_b2e2:                                ; preds = %dec_label_pc_b2cc
  %3 = inttoptr i64 %arg3 to i64*, !insn.addr !4458
  store i64 0, i64* %3, align 8, !insn.addr !4458
  ret i64 0, !insn.addr !4459

dec_label_pc_b2f5:                                ; preds = %dec_label_pc_b2cc
  ret i64 ptrtoint (i32* @global_var_1 to i64), !insn.addr !4460
}

define i8 @TLIB_I2C_Write_Middle(i8* %tuner_globe_data, i8 %I2C_Addr, i8 %byReg, i8* %pBuffer, i8 %byCount, i8 %I2C_Mode) local_unnamed_addr {
dec_label_pc_b302:
  %0 = ptrtoint i8* %tuner_globe_data to i64
  %1 = zext i8 %I2C_Addr to i64, !insn.addr !4461
  %2 = mul i64 %1, shl (i64 add (i64 ptrtoint (i16* @global_var_4 to i64), i64 1), i64 ptrtoint (i16* @global_var_4 to i64)), !insn.addr !4462
  %3 = add i64 %0, 22880, !insn.addr !4463
  %4 = add i64 %3, %2, !insn.addr !4463
  %5 = call i64 @TC_GetCN.149(i64 %0, i64 %1, i64 %4), !insn.addr !4464
  %6 = trunc i64 %5 to i8, !insn.addr !4464
  ret i8 %6, !insn.addr !4464
}

define i8 @TLIB_I2C_Read_Middle(i8* %tuner_globe_data, i8 %I2C_Addr, i8 %byReg, i8* %pBuffer, i8 %byCount, i8 %I2C_Mode) local_unnamed_addr {
dec_label_pc_b325:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = trunc i64 %0 to i8, !insn.addr !4465
  ret i8 %1, !insn.addr !4465
}

define i64 @TLIB_I2C_Write_Middle.204(i64 %arg1, i64 %arg2, i64 %arg3) local_unnamed_addr {
dec_label_pc_b332:
  %0 = call i64 @mcount(), !insn.addr !4466
  ret i64 %0, !insn.addr !4467
}

define i32 @DTV_GetBCASCommand(i64 %pTuner, i64 %bcas_command, i64 %GetLen) local_unnamed_addr {
dec_label_pc_b348:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = call i64 @__decompiler_undefined_function_0()
  %2 = call i64 @__decompiler_undefined_function_0()
  %3 = and i64 %GetLen, -65281, !insn.addr !4468
  %4 = or i64 %3, 51456, !insn.addr !4468
  %5 = urem i64 %1, 256, !insn.addr !4469
  %6 = call i64 @TLIB_I2C_Write.278(i64 %pTuner, i64 %bcas_command, i64 %4, i64 %2, i64 %5, i64 %0), !insn.addr !4470
  %7 = trunc i64 %6 to i32, !insn.addr !4471
  ret i32 %7, !insn.addr !4471
}

define i64 @TLIB_I2C_Read_Middle.272(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4, i64 %arg5, i64 %arg6) local_unnamed_addr {
dec_label_pc_b355:
  %0 = call i64 @mcount(), !insn.addr !4472
  %1 = urem i64 %arg3, 256, !insn.addr !4473
  %2 = urem i64 %arg2, 256, !insn.addr !4474
  %3 = add i64 %arg1, 56, !insn.addr !4475
  %4 = inttoptr i64 %3 to i64*, !insn.addr !4475
  %5 = load i64, i64* %4, align 8, !insn.addr !4475
  %6 = urem i64 %arg6, 256, !insn.addr !4476
  %7 = urem i64 %arg5, 256, !insn.addr !4477
  %8 = inttoptr i64 %arg4 to i64*, !insn.addr !4478
  %9 = inttoptr i64 %7 to i64*, !insn.addr !4478
  %10 = call i64 @TLIB_I2C_Read.262(i64 %5, i64 %2, i64 %1, i64* %8, i64* %9, i64 %6), !insn.addr !4478
  ret i64 %10, !insn.addr !4479
}

define i64 @DTV_GetBCASCommand.463(i64 %arg1, i64 %arg2, i64 %arg3) local_unnamed_addr {
dec_label_pc_b378:
  %rax.0.reg2mem = alloca i64, !insn.addr !4480
  %storemerge.reg2mem = alloca i64, !insn.addr !4480
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = call i64 @mcount(), !insn.addr !4481
  %2 = add i64 %arg1, 7480, !insn.addr !4482
  %3 = inttoptr i64 %2 to i64*, !insn.addr !4482
  %4 = load i64, i64* %3, align 8, !insn.addr !4482
  %5 = add i64 %4, 440, !insn.addr !4483
  %6 = call i64 @down(i64 %5, i64 %arg2), !insn.addr !4484
  %7 = add i64 %arg1, 599768, !insn.addr !4485
  %8 = inttoptr i64 %7 to i8*, !insn.addr !4485
  %9 = load i8, i8* %8, align 1, !insn.addr !4485
  %10 = icmp eq i8 %9, 1, !insn.addr !4485
  %11 = icmp eq i1 %10, false, !insn.addr !4486
  br i1 %11, label %dec_label_pc_b3fc, label %dec_label_pc_b3ea, !insn.addr !4486

dec_label_pc_b3ea:                                ; preds = %dec_label_pc_b378
  %12 = call i64 @up(i64 %5), !insn.addr !4487
  ret i64 4294967295, !insn.addr !4488

dec_label_pc_b3fc:                                ; preds = %dec_label_pc_b378
  %13 = add i64 %arg1, 599760, !insn.addr !4489
  %14 = inttoptr i64 %13 to i64*, !insn.addr !4489
  %15 = load i64, i64* %14, align 8, !insn.addr !4489
  %16 = icmp ult i64 %15, %arg3
  %17 = select i1 %16, i64 %15, i64 %arg3, !insn.addr !4490
  store i8 ptrtoint (i32* @global_var_1 to i8), i8* %8, align 1, !insn.addr !4491
  %18 = add i64 %arg1, 599744, !insn.addr !4492
  %19 = inttoptr i64 %18 to i64*, !insn.addr !4492
  %20 = load i64, i64* %19, align 8, !insn.addr !4492
  %21 = add i64 %17, %20, !insn.addr !4493
  %22 = icmp ult i64 %21, 17
  br i1 %22, label %dec_label_pc_b4b6, label %dec_label_pc_b426, !insn.addr !4494

dec_label_pc_b426:                                ; preds = %dec_label_pc_b3fc
  %23 = sub i64 ptrtoint (i8* @global_var_10 to i64), %20, !insn.addr !4495
  %24 = sub i64 %17, %23, !insn.addr !4496
  %25 = mul i64 %23, shl (i64 add (i64 add (i64 ptrtoint (i8* @global_var_8 to i64), i64 1), i64 mul (i64 add (i64 ptrtoint (i8* @global_var_8 to i64), i64 1), i64 ptrtoint (i8* @global_var_8 to i64))), i64 ptrtoint (i8** @global_var_3 to i64)), !insn.addr !4497
  %26 = add i64 %arg1, 589376, !insn.addr !4498
  %27 = mul i64 %20, 648, !insn.addr !4499
  %28 = add i64 %27, %26, !insn.addr !4499
  %29 = call i64 @memcpy(i64 %arg2, i64 %28, i64 %25, i64 %26), !insn.addr !4500
  %30 = load i64, i64* %19, align 8, !insn.addr !4501
  %31 = add i64 %23, -16, !insn.addr !4502
  %32 = add i64 %31, %30, !insn.addr !4502
  store i64 %32, i64* %19, align 8, !insn.addr !4503
  %33 = mul i64 %23, mul (i64 shl (i64 add (i64 add (i64 ptrtoint (i8* @global_var_8 to i64), i64 1), i64 mul (i64 add (i64 ptrtoint (i8* @global_var_8 to i64), i64 1), i64 ptrtoint (i8* @global_var_8 to i64))), i64 ptrtoint (i8** @global_var_3 to i64)), i64 ptrtoint (i32* @global_var_1 to i64)), !insn.addr !4504
  %34 = add i64 %33, %arg2, !insn.addr !4504
  %35 = mul i64 %24, shl (i64 add (i64 add (i64 ptrtoint (i8* @global_var_8 to i64), i64 1), i64 mul (i64 add (i64 ptrtoint (i8* @global_var_8 to i64), i64 1), i64 ptrtoint (i8* @global_var_8 to i64))), i64 ptrtoint (i8** @global_var_3 to i64)), !insn.addr !4505
  %36 = mul i64 %32, 648, !insn.addr !4506
  %37 = add i64 %36, %26, !insn.addr !4506
  %38 = call i64 @memcpy(i64 %34, i64 %37, i64 %35, i64 %26), !insn.addr !4507
  %39 = load i64, i64* %19, align 8, !insn.addr !4508
  %40 = add i64 %39, %24, !insn.addr !4508
  store i64 %40, i64* %storemerge.reg2mem, !insn.addr !4509
  store i64 %24, i64* %rax.0.reg2mem, !insn.addr !4509
  br label %dec_label_pc_b4f8, !insn.addr !4509

dec_label_pc_b4b6:                                ; preds = %dec_label_pc_b3fc
  %41 = mul i64 %17, shl (i64 add (i64 add (i64 ptrtoint (i8* @global_var_8 to i64), i64 1), i64 mul (i64 add (i64 ptrtoint (i8* @global_var_8 to i64), i64 1), i64 ptrtoint (i8* @global_var_8 to i64))), i64 3), !insn.addr !4510
  %42 = mul i64 %20, 648, !insn.addr !4511
  %43 = add i64 %arg1, 589376, !insn.addr !4511
  %44 = add i64 %43, %42, !insn.addr !4511
  %45 = call i64 @memcpy(i64 %arg2, i64 %44, i64 %41, i64 %0), !insn.addr !4512
  %46 = load i64, i64* %19, align 8, !insn.addr !4513
  %47 = add i64 %46, %17, !insn.addr !4513
  %48 = icmp eq i64 %47, 16, !insn.addr !4514
  %49 = select i1 %48, i64 0, i64 %47, !insn.addr !4515
  store i64 %49, i64* %storemerge.reg2mem, !insn.addr !4516
  store i64 %49, i64* %rax.0.reg2mem, !insn.addr !4516
  br label %dec_label_pc_b4f8, !insn.addr !4516

dec_label_pc_b4f8:                                ; preds = %dec_label_pc_b4b6, %dec_label_pc_b426
  %rax.0.reload = load i64, i64* %rax.0.reg2mem
  %storemerge.reload = load i64, i64* %storemerge.reg2mem
  store i64 %storemerge.reload, i64* %19, align 8
  ret i64 %rax.0.reload, !insn.addr !4516
}

define i8 @DTV_SaveBCASCommand(i64 %pTuner, i64 %bcas_command) local_unnamed_addr {
dec_label_pc_b4fe:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = call i64 @__decompiler_undefined_function_0()
  %2 = call i64 @__decompiler_undefined_function_0()
  %3 = call i64 @__decompiler_undefined_function_0()
  %4 = lshr i64 %1, ptrtoint (i8* @global_var_8 to i64), !insn.addr !4517
  %5 = trunc i64 %4 to i8, !insn.addr !4517
  %6 = trunc i64 %3 to i8, !insn.addr !4517
  %7 = sub i8 0, %5
  %8 = sub i8 %7, 1
  %9 = icmp ult i8 %8, %6, !insn.addr !4517
  %10 = select i1 %9, i64 39, i64 38, !insn.addr !4518
  %11 = sub i64 %3, %10, !insn.addr !4518
  %12 = and i64 %11, 4294967295, !insn.addr !4518
  %13 = inttoptr i64 %12 to i32*, !insn.addr !4519
  %14 = load i32, i32* %13, align 4, !insn.addr !4519
  %15 = trunc i64 %11 to i32, !insn.addr !4519
  %16 = or i32 %14, %15, !insn.addr !4519
  store i32 %16, i32* %13, align 4, !insn.addr !4519
  %17 = mul i64 %2, ptrtoint (i16* @global_var_4 to i64), !insn.addr !4520
  %18 = add i64 %2, -1, !insn.addr !4520
  %19 = add i64 %18, %17, !insn.addr !4520
  %20 = inttoptr i64 %19 to i8*, !insn.addr !4520
  %21 = load i8, i8* %20, align 1, !insn.addr !4520
  %22 = trunc i64 %2 to i8, !insn.addr !4520
  %23 = add i8 %21, %22, !insn.addr !4520
  store i8 %23, i8* %20, align 1, !insn.addr !4520
  %24 = call i64 @up(i64 %pTuner), !insn.addr !4521
  %25 = trunc i64 %0 to i8, !insn.addr !4522
  ret i8 %25, !insn.addr !4522
}

define i64 @DTV_SaveBCASCommand.370(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_b52e:
  %rdi.2.reg2mem = alloca i64, !insn.addr !4523
  %rax.3.reg2mem = alloca i64, !insn.addr !4523
  %.reg2mem2 = alloca i64, !insn.addr !4523
  %rdi.1.reg2mem = alloca i64, !insn.addr !4523
  %rax.2.reg2mem = alloca i64, !insn.addr !4523
  %rsi.1.reg2mem = alloca i64, !insn.addr !4523
  %rdi.0.reg2mem = alloca i64, !insn.addr !4523
  %rax.1.reg2mem = alloca i64, !insn.addr !4523
  %rsi.0.reg2mem = alloca i64, !insn.addr !4523
  %rax.0.reg2mem = alloca i64, !insn.addr !4523
  %.reg2mem = alloca i64, !insn.addr !4523
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = call i64 @mcount(), !insn.addr !4524
  %2 = icmp eq i64 %arg1, 0, !insn.addr !4525
  store i64 0, i64* %rax.0.reg2mem, !insn.addr !4526
  br i1 %2, label %dec_label_pc_b68c, label %dec_label_pc_b563, !insn.addr !4526

dec_label_pc_b563:                                ; preds = %dec_label_pc_b52e
  %3 = add i64 %arg1, 7480, !insn.addr !4527
  %4 = inttoptr i64 %3 to i64*, !insn.addr !4527
  %5 = load i64, i64* %4, align 8, !insn.addr !4527
  %6 = add i64 %5, 440, !insn.addr !4528
  %7 = call i64 @down(i64 %6, i64 %arg2), !insn.addr !4529
  %8 = add i64 %arg1, 599768, !insn.addr !4530
  %9 = inttoptr i64 %8 to i8*, !insn.addr !4530
  %10 = load i8, i8* %9, align 1, !insn.addr !4530
  %11 = icmp eq i8 %10, 1, !insn.addr !4530
  %12 = icmp eq i1 %11, false, !insn.addr !4531
  br i1 %12, label %dec_label_pc_b594, label %dec_label_pc_b582, !insn.addr !4531

dec_label_pc_b582:                                ; preds = %dec_label_pc_b563
  %13 = call i64 @up(i64 %6), !insn.addr !4532
  store i64 0, i64* %rax.0.reg2mem, !insn.addr !4533
  br label %dec_label_pc_b68c, !insn.addr !4533

dec_label_pc_b594:                                ; preds = %dec_label_pc_b563
  store i8 ptrtoint (i32* @global_var_1 to i8), i8* %9, align 1, !insn.addr !4534
  %14 = add i64 %arg1, 599752, !insn.addr !4535
  %15 = inttoptr i64 %14 to i64*, !insn.addr !4535
  %16 = load i64, i64* %15, align 8, !insn.addr !4535
  %17 = add i64 %16, 1, !insn.addr !4536
  %18 = icmp ult i64 %17, 17
  br i1 %18, label %dec_label_pc_b6a2, label %dec_label_pc_b5b0, !insn.addr !4537

dec_label_pc_b5b0:                                ; preds = %dec_label_pc_b594
  %19 = add i64 %16, 4294967281, !insn.addr !4538
  %20 = sub i64 sub (i64 sext (i32 ptrtoint (i32* @global_var_1 to i32) to i64), i64 4294967281), %16, !insn.addr !4539
  %sext = mul i64 %20, 4294967296
  %21 = sdiv i64 %sext, 4294967296, !insn.addr !4540
  %22 = add i64 %arg1, 589376, !insn.addr !4541
  %23 = mul i64 %16, 648, !insn.addr !4542
  %24 = add i64 %23, %22, !insn.addr !4542
  %25 = mul i64 %21, shl (i64 add (i64 add (i64 ptrtoint (i8* @global_var_8 to i64), i64 1), i64 mul (i64 add (i64 ptrtoint (i8* @global_var_8 to i64), i64 1), i64 ptrtoint (i8* @global_var_8 to i64))), i64 ptrtoint (i8** @global_var_3 to i64)), !insn.addr !4543
  %26 = call i64 @memcpy(i64 %24, i64 %arg2, i64 %25, i64 %0), !insn.addr !4544
  %27 = trunc i64 %19 to i32, !insn.addr !4545
  %28 = icmp eq i32 %27, 0, !insn.addr !4545
  %29 = icmp eq i1 %28, false, !insn.addr !4546
  br i1 %29, label %dec_label_pc_b60d, label %dec_label_pc_b5f0, !insn.addr !4546

dec_label_pc_b5f0:                                ; preds = %dec_label_pc_b5b0
  %30 = load i64, i64* %15, align 8, !insn.addr !4547
  %31 = add i64 %30, %21, !insn.addr !4547
  %32 = icmp eq i64 %31, 16, !insn.addr !4548
  %33 = select i1 %32, i64 0, i64 %31, !insn.addr !4549
  store i64 %33, i64* %.reg2mem, !insn.addr !4550
  br label %dec_label_pc_b62f, !insn.addr !4550

dec_label_pc_b60d:                                ; preds = %dec_label_pc_b5b0
  %sext1 = mul i64 %19, 4294967296
  %34 = sdiv i64 %sext1, 4294967296, !insn.addr !4551
  %35 = mul i64 %34, shl (i64 add (i64 add (i64 ptrtoint (i8* @global_var_8 to i64), i64 1), i64 mul (i64 add (i64 ptrtoint (i8* @global_var_8 to i64), i64 1), i64 ptrtoint (i8* @global_var_8 to i64))), i64 ptrtoint (i8** @global_var_3 to i64)), !insn.addr !4552
  %36 = call i64 @memcpy(i64 %22, i64 %arg2, i64 %35, i64 %0), !insn.addr !4553
  store i64 %34, i64* %.reg2mem, !insn.addr !4554
  br label %dec_label_pc_b62f, !insn.addr !4554

dec_label_pc_b62f:                                ; preds = %dec_label_pc_b60d, %dec_label_pc_b5f0
  %.reload = load i64, i64* %.reg2mem, !insn.addr !4555
  store i64 %.reload, i64* %15, align 8
  %37 = add i64 %arg1, 599760, !insn.addr !4556
  %38 = inttoptr i64 %37 to i64*, !insn.addr !4556
  %39 = load i64, i64* %38, align 8, !insn.addr !4556
  %40 = icmp eq i64 %39, 16, !insn.addr !4557
  %41 = icmp eq i1 %40, false, !insn.addr !4558
  br i1 %41, label %dec_label_pc_b64c, label %dec_label_pc_b63c, !insn.addr !4558

dec_label_pc_b63c:                                ; preds = %dec_label_pc_b62f
  %42 = add i64 %arg1, 599744, !insn.addr !4559
  %43 = inttoptr i64 %42 to i64*, !insn.addr !4559
  store i64 %.reload, i64* %43, align 8, !insn.addr !4559
  br label %dec_label_pc_b678, !insn.addr !4560

dec_label_pc_b64c:                                ; preds = %dec_label_pc_b62f
  %44 = add i64 %39, 1, !insn.addr !4561
  %45 = icmp ult i64 %44, 17
  br i1 %45, label %dec_label_pc_b671, label %dec_label_pc_b656, !insn.addr !4562

dec_label_pc_b656:                                ; preds = %dec_label_pc_b64c
  %46 = add i64 %arg1, 599744, !insn.addr !4563
  %47 = inttoptr i64 %46 to i64*, !insn.addr !4563
  store i64 %.reload, i64* %47, align 8, !insn.addr !4563
  store i64 ptrtoint (i8* @global_var_10 to i64), i64* %38, align 8, !insn.addr !4564
  br label %dec_label_pc_b678, !insn.addr !4565

dec_label_pc_b671:                                ; preds = %dec_label_pc_b64c
  store i64 %44, i64* %38, align 8, !insn.addr !4566
  br label %dec_label_pc_b678, !insn.addr !4566

dec_label_pc_b678:                                ; preds = %dec_label_pc_b671, %dec_label_pc_b656, %dec_label_pc_b63c
  store i8 0, i8* %9, align 1, !insn.addr !4567
  %48 = call i64 @up(i64 %6), !insn.addr !4568
  store i64 ptrtoint (i32* @global_var_1 to i64), i64* %rax.0.reg2mem, !insn.addr !4569
  br label %dec_label_pc_b68c, !insn.addr !4569

dec_label_pc_b68c:                                ; preds = %dec_label_pc_b582, %dec_label_pc_b52e, %dec_label_pc_b678
  %rax.0.reload = load i64, i64* %rax.0.reg2mem
  ret i64 %rax.0.reload, !insn.addr !4570

dec_label_pc_b6a2:                                ; preds = %dec_label_pc_b594
  %49 = mul i64 %16, 648, !insn.addr !4571
  %50 = add i64 %arg1, 589376, !insn.addr !4571
  %51 = add i64 %50, %49, !insn.addr !4571
  %52 = urem i64 %51, 2
  %53 = icmp eq i64 %52, 0, !insn.addr !4572
  store i64 %arg2, i64* %rsi.0.reg2mem, !insn.addr !4573
  store i64 648, i64* %rax.1.reg2mem, !insn.addr !4573
  store i64 %51, i64* %rdi.0.reg2mem, !insn.addr !4573
  br i1 %53, label %dec_label_pc_b6d1, label %dec_label_pc_b6c0, !insn.addr !4573

dec_label_pc_b6c0:                                ; preds = %dec_label_pc_b6a2
  %54 = trunc i64 %arg2 to i8
  %55 = inttoptr i64 %51 to i8*, !insn.addr !4574
  store i8 %54, i8* %55, align 1, !insn.addr !4574
  %56 = add i64 %51, 1, !insn.addr !4575
  %57 = add i64 %arg2, ptrtoint (i32* @global_var_1 to i64), !insn.addr !4576
  store i64 %57, i64* %rsi.0.reg2mem, !insn.addr !4577
  store i64 647, i64* %rax.1.reg2mem, !insn.addr !4577
  store i64 %56, i64* %rdi.0.reg2mem, !insn.addr !4577
  br label %dec_label_pc_b6d1, !insn.addr !4577

dec_label_pc_b6d1:                                ; preds = %dec_label_pc_b6c0, %dec_label_pc_b6a2
  %rdi.0.reload = load i64, i64* %rdi.0.reg2mem
  %rax.1.reload = load i64, i64* %rax.1.reg2mem
  %rsi.0.reload = load i64, i64* %rsi.0.reg2mem
  %58 = and i64 %rdi.0.reload, 2
  %59 = icmp eq i64 %58, 0, !insn.addr !4578
  store i64 %rsi.0.reload, i64* %rsi.1.reg2mem, !insn.addr !4579
  store i64 %rax.1.reload, i64* %rax.2.reg2mem, !insn.addr !4579
  store i64 %rdi.0.reload, i64* %rdi.1.reg2mem, !insn.addr !4579
  br i1 %59, label %dec_label_pc_b6e8, label %dec_label_pc_b6d7, !insn.addr !4579

dec_label_pc_b6d7:                                ; preds = %dec_label_pc_b6d1
  %60 = inttoptr i64 %rsi.0.reload to i16*, !insn.addr !4580
  %61 = load i16, i16* %60, align 2, !insn.addr !4580
  %62 = inttoptr i64 %rdi.0.reload to i16*, !insn.addr !4581
  store i16 %61, i16* %62, align 2, !insn.addr !4581
  %63 = add i64 %rdi.0.reload, 2, !insn.addr !4582
  %64 = add i64 %rsi.0.reload, ptrtoint (i32* @global_var_2 to i64), !insn.addr !4583
  %65 = add nuw nsw i64 %rax.1.reload, 1022, !insn.addr !4584
  %66 = and i64 %65, 767, !insn.addr !4584
  store i64 %64, i64* %rsi.1.reg2mem, !insn.addr !4584
  store i64 %66, i64* %rax.2.reg2mem, !insn.addr !4584
  store i64 %63, i64* %rdi.1.reg2mem, !insn.addr !4584
  br label %dec_label_pc_b6e8, !insn.addr !4584

dec_label_pc_b6e8:                                ; preds = %dec_label_pc_b6d7, %dec_label_pc_b6d1
  %rdi.1.reload = load i64, i64* %rdi.1.reg2mem
  %rax.2.reload = load i64, i64* %rax.2.reg2mem
  %rsi.1.reload = load i64, i64* %rsi.1.reg2mem
  %67 = and i64 %rdi.1.reload, 4
  %68 = icmp eq i64 %67, 0, !insn.addr !4585
  store i64 %rsi.1.reload, i64* %.reg2mem2, !insn.addr !4586
  store i64 %rax.2.reload, i64* %rax.3.reg2mem, !insn.addr !4586
  store i64 %rdi.1.reload, i64* %rdi.2.reg2mem, !insn.addr !4586
  br i1 %68, label %dec_label_pc_b6fd, label %dec_label_pc_b6ee, !insn.addr !4586

dec_label_pc_b6ee:                                ; preds = %dec_label_pc_b6e8
  %69 = inttoptr i64 %rsi.1.reload to i32*, !insn.addr !4587
  %70 = load i32, i32* %69, align 4, !insn.addr !4587
  %71 = inttoptr i64 %rdi.1.reload to i32*, !insn.addr !4588
  store i32 %70, i32* %71, align 4, !insn.addr !4588
  %72 = add i64 %rdi.1.reload, 4, !insn.addr !4589
  %73 = add i64 %rsi.1.reload, ptrtoint (i16* @global_var_4 to i64), !insn.addr !4590
  %74 = add nsw i64 %rax.2.reload, 4294967292, !insn.addr !4591
  %75 = and i64 %74, 4294967295, !insn.addr !4591
  store i64 %73, i64* %.reg2mem2, !insn.addr !4591
  store i64 %75, i64* %rax.3.reg2mem, !insn.addr !4591
  store i64 %72, i64* %rdi.2.reg2mem, !insn.addr !4591
  br label %dec_label_pc_b6fd, !insn.addr !4591

dec_label_pc_b6fd:                                ; preds = %dec_label_pc_b6ee, %dec_label_pc_b6e8
  %rdi.2.reload = load i64, i64* %rdi.2.reg2mem
  %rax.3.reload = load i64, i64* %rax.3.reg2mem
  %.reload3 = load i64, i64* %.reg2mem2, !insn.addr !4592
  %76 = trunc i64 %rax.3.reload to i32, !insn.addr !4593
  %77 = lshr i32 %76, ptrtoint (i8** @global_var_3 to i32), !insn.addr !4594
  %78 = zext i32 %77 to i64, !insn.addr !4595
  %79 = inttoptr i64 %.reload3 to i8*, !insn.addr !4592
  %80 = inttoptr i64 %rdi.2.reload to i8*, !insn.addr !4592
  call void @__asm_rep_movsq_memcpy(i8* %80, i8* %79, i64 %78), !insn.addr !4592
  ret i64 %rax.3.reload, !insn.addr !4596
}

define i32 @DTV_GetTSReSync(i64 %pTuner, i8* %pu8OutPutBuf, i64 %GetLen) local_unnamed_addr {
dec_label_pc_b70e:
  %rax.0.reg2mem = alloca i64, !insn.addr !4597
  %rdx.1.reg2mem = alloca i64, !insn.addr !4597
  %rdx.0.reg2mem = alloca i64, !insn.addr !4597
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = call i1 @__decompiler_undefined_function_2()
  %2 = ptrtoint i8* %pu8OutPutBuf to i64
  store i64 %GetLen, i64* %rdx.0.reg2mem, !insn.addr !4597
  br i1 %1, label %dec_label_pc_b718, label %dec_label_pc_b710, !insn.addr !4597

dec_label_pc_b710:                                ; preds = %dec_label_pc_b70e
  %3 = trunc i64 %2 to i32
  %4 = inttoptr i64 %pTuner to i32*, !insn.addr !4598
  store i32 %3, i32* %4, align 4, !insn.addr !4598
  %5 = add i64 %GetLen, ptrtoint (i16* @global_var_4 to i64), !insn.addr !4599
  store i64 %5, i64* %rdx.0.reg2mem, !insn.addr !4599
  br label %dec_label_pc_b718, !insn.addr !4599

dec_label_pc_b718:                                ; preds = %dec_label_pc_b710, %dec_label_pc_b70e
  %rdx.0.reload = load i64, i64* %rdx.0.reg2mem
  %6 = trunc i64 %0 to i8, !insn.addr !4600
  %7 = and i8 %6, ptrtoint (i32* @global_var_2 to i8), !insn.addr !4600
  %8 = icmp eq i8 %7, 0, !insn.addr !4600
  store i64 %rdx.0.reload, i64* %rdx.1.reg2mem, !insn.addr !4601
  br i1 %8, label %dec_label_pc_b728, label %dec_label_pc_b71c, !insn.addr !4601

dec_label_pc_b71c:                                ; preds = %dec_label_pc_b718
  %9 = mul i64 %rdx.0.reload, ptrtoint (i32* @global_var_1 to i64), !insn.addr !4602
  %10 = add i64 %9, %2, !insn.addr !4602
  %11 = inttoptr i64 %10 to i16*, !insn.addr !4602
  %12 = load i16, i16* %11, align 2, !insn.addr !4602
  %13 = add i64 %9, %pTuner, !insn.addr !4603
  %14 = inttoptr i64 %13 to i16*, !insn.addr !4603
  store i16 %12, i16* %14, align 2, !insn.addr !4603
  %15 = add i64 %rdx.0.reload, ptrtoint (i32* @global_var_2 to i64), !insn.addr !4604
  store i64 %15, i64* %rdx.1.reg2mem, !insn.addr !4604
  br label %dec_label_pc_b728, !insn.addr !4604

dec_label_pc_b728:                                ; preds = %dec_label_pc_b71c, %dec_label_pc_b718
  %16 = and i8 %6, ptrtoint (i32* @global_var_1 to i8), !insn.addr !4605
  %17 = icmp eq i8 %16, 0, !insn.addr !4605
  br i1 %17, label %dec_label_pc_b733, label %dec_label_pc_b72c, !insn.addr !4606

dec_label_pc_b72c:                                ; preds = %dec_label_pc_b728
  %rdx.1.reload = load i64, i64* %rdx.1.reg2mem
  %18 = mul i64 %rdx.1.reload, ptrtoint (i32* @global_var_1 to i64), !insn.addr !4607
  %19 = add i64 %18, %2, !insn.addr !4607
  %20 = inttoptr i64 %19 to i8*, !insn.addr !4607
  %21 = load i8, i8* %20, align 1, !insn.addr !4607
  %22 = zext i8 %21 to i64, !insn.addr !4607
  %23 = add i64 %18, %pTuner, !insn.addr !4608
  %24 = inttoptr i64 %23 to i8*, !insn.addr !4608
  store i8 %21, i8* %24, align 1, !insn.addr !4608
  store i64 %22, i64* %rax.0.reg2mem, !insn.addr !4608
  br label %dec_label_pc_b733, !insn.addr !4608

dec_label_pc_b733:                                ; preds = %dec_label_pc_b72c, %dec_label_pc_b728
  %rax.0.reload = load i64, i64* %rax.0.reg2mem
  %25 = trunc i64 %rax.0.reload to i32, !insn.addr !4609
  ret i32 %25, !insn.addr !4609
}

define i64 @DTV_GetTSReSync.456(i64 %arg1, i64 %arg2, i64 %arg3) local_unnamed_addr {
dec_label_pc_b73e:
  %rax.0.reg2mem = alloca i64, !insn.addr !4610
  %storemerge.reg2mem = alloca i64, !insn.addr !4610
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = call i64 @mcount(), !insn.addr !4611
  %2 = add i64 %arg1, 7480, !insn.addr !4612
  %3 = inttoptr i64 %2 to i64*, !insn.addr !4612
  %4 = load i64, i64* %3, align 8, !insn.addr !4612
  %5 = add i64 %4, 416, !insn.addr !4613
  %6 = call i64 @down(i64 %5, i64 %arg2), !insn.addr !4614
  %7 = add i64 %arg1, 589368, !insn.addr !4615
  %8 = inttoptr i64 %7 to i8*, !insn.addr !4615
  %9 = load i8, i8* %8, align 1, !insn.addr !4615
  %10 = icmp eq i8 %9, 1, !insn.addr !4615
  %11 = icmp eq i1 %10, false, !insn.addr !4616
  br i1 %11, label %dec_label_pc_b7c2, label %dec_label_pc_b7b0, !insn.addr !4616

dec_label_pc_b7b0:                                ; preds = %dec_label_pc_b73e
  %12 = call i64 @up(i64 %5), !insn.addr !4617
  ret i64 4294967295, !insn.addr !4618

dec_label_pc_b7c2:                                ; preds = %dec_label_pc_b73e
  %13 = add i64 %arg1, 589360, !insn.addr !4619
  %14 = inttoptr i64 %13 to i64*, !insn.addr !4619
  %15 = load i64, i64* %14, align 8, !insn.addr !4619
  %16 = icmp ult i64 %15, %arg3
  %17 = select i1 %16, i64 %15, i64 %arg3, !insn.addr !4620
  store i8 ptrtoint (i32* @global_var_1 to i8), i8* %8, align 1, !insn.addr !4621
  %18 = add i64 %arg1, 589344, !insn.addr !4622
  %19 = inttoptr i64 %18 to i64*, !insn.addr !4622
  %20 = load i64, i64* %19, align 8, !insn.addr !4622
  %21 = add i64 %17, %20, !insn.addr !4623
  %22 = icmp ult i64 %21, 65
  br i1 %22, label %dec_label_pc_b846, label %dec_label_pc_b7e8, !insn.addr !4624

dec_label_pc_b7e8:                                ; preds = %dec_label_pc_b7c2
  %23 = sub i64 64, %20, !insn.addr !4625
  %24 = sub i64 %17, %23, !insn.addr !4626
  %25 = add i64 %arg1, 589280, !insn.addr !4627
  %26 = add i64 %20, %25, !insn.addr !4628
  %27 = call i64 @memcpy(i64 %arg2, i64 %26, i64 %23, i64 %0), !insn.addr !4629
  %28 = load i64, i64* %19, align 8, !insn.addr !4630
  %29 = add i64 %23, -64, !insn.addr !4631
  %30 = add i64 %29, %28, !insn.addr !4631
  store i64 %30, i64* %19, align 8, !insn.addr !4632
  %31 = add i64 %23, %arg2, !insn.addr !4633
  %32 = add i64 %30, %25, !insn.addr !4634
  %33 = call i64 @memcpy(i64 %31, i64 %32, i64 %24, i64 %0), !insn.addr !4635
  %34 = load i64, i64* %19, align 8, !insn.addr !4636
  %35 = add i64 %34, %24, !insn.addr !4636
  store i64 %35, i64* %storemerge.reg2mem, !insn.addr !4637
  store i64 %24, i64* %rax.0.reg2mem, !insn.addr !4637
  br label %dec_label_pc_b877, !insn.addr !4637

dec_label_pc_b846:                                ; preds = %dec_label_pc_b7c2
  %36 = add i64 %arg1, 589280, !insn.addr !4638
  %37 = add i64 %36, %20, !insn.addr !4638
  %38 = call i64 @memcpy(i64 %arg2, i64 %37, i64 %17, i64 %0), !insn.addr !4639
  %39 = load i64, i64* %19, align 8, !insn.addr !4640
  %40 = add i64 %39, %17, !insn.addr !4640
  %41 = icmp eq i64 %40, 64, !insn.addr !4641
  %42 = select i1 %41, i64 0, i64 %40, !insn.addr !4642
  store i64 %42, i64* %storemerge.reg2mem, !insn.addr !4643
  store i64 %42, i64* %rax.0.reg2mem, !insn.addr !4643
  br label %dec_label_pc_b877, !insn.addr !4643

dec_label_pc_b877:                                ; preds = %dec_label_pc_b846, %dec_label_pc_b7e8
  %rax.0.reload = load i64, i64* %rax.0.reg2mem
  %storemerge.reload = load i64, i64* %storemerge.reg2mem
  store i64 %storemerge.reload, i64* %19, align 8
  ret i64 %rax.0.reload, !insn.addr !4643
}

define i8 @DTV_SaveTSReSync(i64 %pTuner, i8* %pReceiveDataBuf) local_unnamed_addr {
dec_label_pc_b87d:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = call i64 @__decompiler_undefined_function_0()
  %2 = call i64 @__decompiler_undefined_function_0()
  %3 = trunc i64 %2 to i8
  %4 = inttoptr i64 %2 to i8*, !insn.addr !4644
  store i8 %3, i8* %4, align 1, !insn.addr !4644
  %5 = mul i64 %1, ptrtoint (i16* @global_var_4 to i64), !insn.addr !4645
  %6 = add i64 %1, -9, !insn.addr !4645
  %7 = add i64 %6, %5, !insn.addr !4645
  %8 = inttoptr i64 %7 to i8*, !insn.addr !4645
  %9 = load i8, i8* %8, align 1, !insn.addr !4645
  %10 = trunc i64 %1 to i8, !insn.addr !4645
  %11 = add i8 %9, %10, !insn.addr !4645
  store i8 %11, i8* %8, align 1, !insn.addr !4645
  %12 = call i64 @up(i64 %pTuner), !insn.addr !4646
  %13 = trunc i64 %0 to i8, !insn.addr !4647
  ret i8 %13, !insn.addr !4647
}

define i64 @DTV_SaveTSReSync.439(i64 %arg1, i8* %arg2) local_unnamed_addr {
dec_label_pc_b8ad:
  %.reg2mem = alloca i64, !insn.addr !4648
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = ptrtoint i8* %arg2 to i64
  %2 = call i64 @mcount(), !insn.addr !4649
  %3 = add i64 %arg1, 7480, !insn.addr !4650
  %4 = inttoptr i64 %3 to i64*, !insn.addr !4650
  %5 = load i64, i64* %4, align 8, !insn.addr !4650
  %6 = add i64 %5, 416, !insn.addr !4651
  %7 = call i64 @down(i64 %6, i64 %1), !insn.addr !4652
  %8 = add i64 %arg1, 589368, !insn.addr !4653
  %9 = inttoptr i64 %8 to i8*, !insn.addr !4653
  %10 = load i8, i8* %9, align 1, !insn.addr !4653
  %11 = icmp eq i8 %10, 1, !insn.addr !4653
  %12 = icmp eq i1 %11, false, !insn.addr !4654
  br i1 %12, label %dec_label_pc_b913, label %dec_label_pc_b901, !insn.addr !4654

dec_label_pc_b901:                                ; preds = %dec_label_pc_b8ad
  %13 = call i64 @up(i64 %6), !insn.addr !4655
  ret i64 0, !insn.addr !4656

dec_label_pc_b913:                                ; preds = %dec_label_pc_b8ad
  store i8 ptrtoint (i32* @global_var_1 to i8), i8* %9, align 1, !insn.addr !4657
  %14 = add i64 %arg1, 589352, !insn.addr !4658
  %15 = inttoptr i64 %14 to i64*, !insn.addr !4658
  %16 = load i64, i64* %15, align 8, !insn.addr !4658
  %17 = add i64 %16, 4294967233, !insn.addr !4659
  %18 = sub i64 sub (i64 sext (i32 ptrtoint (i32* @global_var_1 to i32) to i64), i64 4294967233), %16, !insn.addr !4660
  %sext = mul i64 %18, 4294967296
  %19 = sdiv i64 %sext, 4294967296, !insn.addr !4661
  %20 = add i64 %arg1, 589280, !insn.addr !4662
  %21 = add i64 %16, %20, !insn.addr !4663
  %22 = call i64 @memcpy(i64 %21, i64 %1, i64 %19, i64 %0), !insn.addr !4664
  %23 = trunc i64 %17 to i32, !insn.addr !4665
  %24 = icmp eq i32 %23, 0, !insn.addr !4665
  %25 = icmp eq i1 %24, false, !insn.addr !4666
  br i1 %25, label %dec_label_pc_b97a, label %dec_label_pc_b95d, !insn.addr !4666

dec_label_pc_b95d:                                ; preds = %dec_label_pc_b913
  %26 = load i64, i64* %15, align 8, !insn.addr !4667
  %27 = add i64 %26, %19, !insn.addr !4667
  %28 = icmp eq i64 %27, 64, !insn.addr !4668
  %29 = select i1 %28, i64 0, i64 %27, !insn.addr !4669
  store i64 %29, i64* %.reg2mem, !insn.addr !4670
  br label %dec_label_pc_b994, !insn.addr !4670

dec_label_pc_b97a:                                ; preds = %dec_label_pc_b913
  %sext1 = mul i64 %17, 4294967296
  %30 = sdiv i64 %sext1, 4294967296, !insn.addr !4671
  %31 = add i64 %19, %1, !insn.addr !4672
  %32 = call i64 @memcpy(i64 %20, i64 %31, i64 %30, i64 %0), !insn.addr !4673
  store i64 %30, i64* %.reg2mem, !insn.addr !4674
  br label %dec_label_pc_b994, !insn.addr !4674

dec_label_pc_b994:                                ; preds = %dec_label_pc_b97a, %dec_label_pc_b95d
  %.reload = load i64, i64* %.reg2mem, !insn.addr !4675
  store i64 %.reload, i64* %15, align 8
  %33 = add i64 %arg1, 589360, !insn.addr !4676
  %34 = inttoptr i64 %33 to i64*, !insn.addr !4676
  %35 = load i64, i64* %34, align 8, !insn.addr !4676
  %36 = icmp eq i64 %35, 64, !insn.addr !4677
  %37 = icmp eq i1 %36, false, !insn.addr !4678
  br i1 %37, label %dec_label_pc_b9b1, label %dec_label_pc_b9a1, !insn.addr !4678

dec_label_pc_b9a1:                                ; preds = %dec_label_pc_b994
  %38 = add i64 %arg1, 589344, !insn.addr !4679
  %39 = inttoptr i64 %38 to i64*, !insn.addr !4679
  store i64 %.reload, i64* %39, align 8, !insn.addr !4679
  br label %dec_label_pc_b9dd, !insn.addr !4680

dec_label_pc_b9b1:                                ; preds = %dec_label_pc_b994
  %40 = add i64 %35, 1, !insn.addr !4681
  %41 = icmp ult i64 %40, 65
  br i1 %41, label %dec_label_pc_b9d6, label %dec_label_pc_b9bb, !insn.addr !4682

dec_label_pc_b9bb:                                ; preds = %dec_label_pc_b9b1
  %42 = add i64 %arg1, 589344, !insn.addr !4683
  %43 = inttoptr i64 %42 to i64*, !insn.addr !4683
  store i64 %.reload, i64* %43, align 8, !insn.addr !4683
  store i64 64, i64* %34, align 8, !insn.addr !4684
  br label %dec_label_pc_b9dd, !insn.addr !4685

dec_label_pc_b9d6:                                ; preds = %dec_label_pc_b9b1
  store i64 %40, i64* %34, align 8, !insn.addr !4686
  br label %dec_label_pc_b9dd, !insn.addr !4686

dec_label_pc_b9dd:                                ; preds = %dec_label_pc_b9d6, %dec_label_pc_b9bb, %dec_label_pc_b9a1
  store i8 0, i8* %9, align 1, !insn.addr !4687
  %44 = call i64 @up(i64 %6), !insn.addr !4688
  ret i64 %44, !insn.addr !4688
}

define i32 @DTV_GetBcasReturnCode(i64 %pTuner, i8* %pu8OutPutBuf, i64 %GetLen) local_unnamed_addr {
dec_label_pc_b9ee:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = call i64 @__decompiler_undefined_function_0()
  %2 = trunc i64 %1 to i8
  %3 = mul i8 %2, 2, !insn.addr !4689
  %4 = inttoptr i64 %1 to i8*, !insn.addr !4689
  store i8 %3, i8* %4, align 1, !insn.addr !4689
  %5 = add i64 %1, -117, !insn.addr !4690
  %6 = inttoptr i64 %5 to i8*, !insn.addr !4690
  %7 = load i8, i8* %6, align 1, !insn.addr !4690
  %8 = trunc i64 %0 to i8, !insn.addr !4690
  %9 = add i8 %7, %8, !insn.addr !4690
  store i8 %9, i8* %6, align 1, !insn.addr !4690
  %10 = trunc i64 %1 to i32, !insn.addr !4691
  ret i32 %10, !insn.addr !4691
}

define i64 @DTV_GetBcasReturnCode.597(i64 %arg1, i64 %arg2, i64 %arg3) local_unnamed_addr {
dec_label_pc_ba1e:
  %0 = call i64 @mcount(), !insn.addr !4692
  ret i64 %0, !insn.addr !4693
}

define i8 @DTV_SaveBcasReturnCode(i64 %pTuner, i8* %pReceiveDataBuf) local_unnamed_addr {
dec_label_pc_bb5d:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = call i64 @__decompiler_undefined_function_0()
  %2 = call i64 @__decompiler_undefined_function_0()
  %3 = call i64 @__decompiler_undefined_function_0()
  %4 = lshr i64 %1, ptrtoint (i8* @global_var_8 to i64), !insn.addr !4694
  %5 = trunc i64 %4 to i8, !insn.addr !4694
  %6 = trunc i64 %3 to i8, !insn.addr !4694
  %7 = sub i8 0, %5
  %8 = sub i8 %7, 1
  %9 = icmp ult i8 %8, %6, !insn.addr !4694
  %10 = select i1 %9, i64 4294967294, i64 4294967293, !insn.addr !4695
  %11 = sub i64 %3, %10, !insn.addr !4695
  %12 = and i64 %11, 4294967295, !insn.addr !4695
  %13 = inttoptr i64 %12 to i8*, !insn.addr !4696
  %14 = load i8, i8* %13, align 1, !insn.addr !4696
  %15 = trunc i64 %11 to i8, !insn.addr !4696
  %16 = or i8 %14, %15, !insn.addr !4696
  store i8 %16, i8* %13, align 1, !insn.addr !4696
  %17 = mul i64 %2, ptrtoint (i16* @global_var_4 to i64), !insn.addr !4697
  %18 = add i64 %2, -9, !insn.addr !4697
  %19 = add i64 %18, %17, !insn.addr !4697
  %20 = inttoptr i64 %19 to i8*, !insn.addr !4697
  %21 = load i8, i8* %20, align 1, !insn.addr !4697
  %22 = trunc i64 %2 to i8, !insn.addr !4697
  %23 = add i8 %21, %22, !insn.addr !4697
  store i8 %23, i8* %20, align 1, !insn.addr !4697
  %24 = call i64 @up(i64 %pTuner), !insn.addr !4698
  %25 = trunc i64 %0 to i8, !insn.addr !4699
  ret i8 %25, !insn.addr !4699
}

define i64 @DTV_SaveBcasReturnCode.593(i64 %arg1, i8* %arg2) local_unnamed_addr {
dec_label_pc_bb8d:
  %.reg2mem = alloca i64, !insn.addr !4700
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = ptrtoint i8* %arg2 to i64
  %2 = call i64 @mcount(), !insn.addr !4701
  %3 = add i64 %arg1, 7480, !insn.addr !4702
  %4 = inttoptr i64 %3 to i64*, !insn.addr !4702
  %5 = load i64, i64* %4, align 8, !insn.addr !4702
  %6 = add i64 %5, 392, !insn.addr !4703
  %7 = call i64 @down(i64 %6, i64 %1), !insn.addr !4704
  %8 = add i64 %arg1, 589272, !insn.addr !4705
  %9 = inttoptr i64 %8 to i8*, !insn.addr !4705
  %10 = load i8, i8* %9, align 1, !insn.addr !4705
  %11 = icmp eq i8 %10, 1, !insn.addr !4705
  %12 = icmp eq i1 %11, false, !insn.addr !4706
  br i1 %12, label %dec_label_pc_bbf3, label %dec_label_pc_bbe1, !insn.addr !4706

dec_label_pc_bbe1:                                ; preds = %dec_label_pc_bb8d
  %13 = call i64 @up(i64 %6), !insn.addr !4707
  ret i64 0, !insn.addr !4708

dec_label_pc_bbf3:                                ; preds = %dec_label_pc_bb8d
  store i8 ptrtoint (i32* @global_var_1 to i8), i8* %9, align 1, !insn.addr !4709
  %14 = add i64 %arg1, 589256, !insn.addr !4710
  %15 = inttoptr i64 %14 to i64*, !insn.addr !4710
  %16 = load i64, i64* %15, align 8, !insn.addr !4710
  %17 = add i64 %16, 4294967236, !insn.addr !4711
  %18 = sub i64 sub (i64 sext (i32 ptrtoint (i16* @global_var_4 to i32) to i64), i64 4294967236), %16, !insn.addr !4712
  %sext = mul i64 %18, 4294967296
  %19 = sdiv i64 %sext, 4294967296, !insn.addr !4713
  %20 = add i64 %arg1, 589184, !insn.addr !4714
  %21 = add i64 %16, %20, !insn.addr !4715
  %22 = call i64 @memcpy(i64 %21, i64 %1, i64 %19, i64 %0), !insn.addr !4716
  %23 = trunc i64 %17 to i32, !insn.addr !4717
  %24 = icmp eq i32 %23, 0, !insn.addr !4717
  %25 = icmp eq i1 %24, false, !insn.addr !4718
  br i1 %25, label %dec_label_pc_bc5a, label %dec_label_pc_bc3d, !insn.addr !4718

dec_label_pc_bc3d:                                ; preds = %dec_label_pc_bbf3
  %26 = load i64, i64* %15, align 8, !insn.addr !4719
  %27 = add i64 %26, %19, !insn.addr !4719
  %28 = icmp eq i64 %27, 64, !insn.addr !4720
  %29 = select i1 %28, i64 0, i64 %27, !insn.addr !4721
  store i64 %29, i64* %.reg2mem, !insn.addr !4722
  br label %dec_label_pc_bc74, !insn.addr !4722

dec_label_pc_bc5a:                                ; preds = %dec_label_pc_bbf3
  %sext1 = mul i64 %17, 4294967296
  %30 = sdiv i64 %sext1, 4294967296, !insn.addr !4723
  %31 = add i64 %19, %1, !insn.addr !4724
  %32 = call i64 @memcpy(i64 %20, i64 %31, i64 %30, i64 %0), !insn.addr !4725
  store i64 %30, i64* %.reg2mem, !insn.addr !4726
  br label %dec_label_pc_bc74, !insn.addr !4726

dec_label_pc_bc74:                                ; preds = %dec_label_pc_bc5a, %dec_label_pc_bc3d
  %.reload = load i64, i64* %.reg2mem, !insn.addr !4727
  store i64 %.reload, i64* %15, align 8
  %33 = add i64 %arg1, 589264, !insn.addr !4728
  %34 = inttoptr i64 %33 to i64*, !insn.addr !4728
  %35 = load i64, i64* %34, align 8, !insn.addr !4728
  %36 = icmp eq i64 %35, 64, !insn.addr !4729
  %37 = icmp eq i1 %36, false, !insn.addr !4730
  br i1 %37, label %dec_label_pc_bc91, label %dec_label_pc_bc81, !insn.addr !4730

dec_label_pc_bc81:                                ; preds = %dec_label_pc_bc74
  %38 = add i64 %arg1, 589248, !insn.addr !4731
  %39 = inttoptr i64 %38 to i64*, !insn.addr !4731
  store i64 %.reload, i64* %39, align 8, !insn.addr !4731
  br label %dec_label_pc_bcbd, !insn.addr !4732

dec_label_pc_bc91:                                ; preds = %dec_label_pc_bc74
  %40 = add i64 %35, 4, !insn.addr !4733
  %41 = icmp ult i64 %40, 65
  br i1 %41, label %dec_label_pc_bcb6, label %dec_label_pc_bc9b, !insn.addr !4734

dec_label_pc_bc9b:                                ; preds = %dec_label_pc_bc91
  %42 = add i64 %arg1, 589248, !insn.addr !4735
  %43 = inttoptr i64 %42 to i64*, !insn.addr !4735
  store i64 %.reload, i64* %43, align 8, !insn.addr !4735
  store i64 64, i64* %34, align 8, !insn.addr !4736
  br label %dec_label_pc_bcbd, !insn.addr !4737

dec_label_pc_bcb6:                                ; preds = %dec_label_pc_bc91
  store i64 %40, i64* %34, align 8, !insn.addr !4738
  br label %dec_label_pc_bcbd, !insn.addr !4738

dec_label_pc_bcbd:                                ; preds = %dec_label_pc_bcb6, %dec_label_pc_bc9b, %dec_label_pc_bc81
  store i8 0, i8* %9, align 1, !insn.addr !4739
  %44 = call i64 @up(i64 %6), !insn.addr !4740
  ret i64 %44, !insn.addr !4740
}

define i8 @DTV_GetProgramNumber_ByPID(i64 %pTuner, i32 %Pid, i32* %program_number) local_unnamed_addr {
dec_label_pc_bccd:
  %rax = alloca i64, align 8
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = trunc i64 %0 to i32
  %2 = mul i32 %1, 2, !insn.addr !4741
  %3 = inttoptr i64 %0 to i32*, !insn.addr !4741
  store i32 %2, i32* %3, align 4, !insn.addr !4741
  %4 = bitcast i64* %rax to i8*
  %5 = load i8, i8* %4, align 8, !insn.addr !4742
  %6 = load i64, i64* %rax, align 8
  %7 = trunc i64 %6 to i8, !insn.addr !4742
  %8 = add i8 %5, %7, !insn.addr !4742
  %9 = inttoptr i64 %6 to i8*, !insn.addr !4742
  store i8 %8, i8* %9, align 1, !insn.addr !4742
  %10 = load i64, i64* %rax, align 8, !insn.addr !4743
  %11 = trunc i64 %10 to i8, !insn.addr !4743
  ret i8 %11, !insn.addr !4743
}

define i64 @DTV_GetProgramNumber_ByPID.147(i64 %arg1, i64 %arg2, i64 %arg3) local_unnamed_addr {
dec_label_pc_bcfd:
  %0 = call i64 @mcount(), !insn.addr !4744
  %1 = inttoptr i64 %arg3 to i32*, !insn.addr !4745
  store i32 0, i32* %1, align 4, !insn.addr !4745
  ret i64 4294967286, !insn.addr !4746
}

define i8 @DTV_GetResetMulti2LibFlag(i64 %pTuner, i8* %isNeedResetMulti2Lib) local_unnamed_addr {
dec_label_pc_bd26:
  %storemerge.reg2mem = alloca i8, !insn.addr !4747
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = call i64 @__decompiler_undefined_function_0()
  %2 = ptrtoint i8* %isNeedResetMulti2Lib to i64
  %3 = add i64 %1, 1207961850, !insn.addr !4747
  %4 = inttoptr i64 %3 to i32*, !insn.addr !4747
  %5 = load i32, i32* %4, align 4, !insn.addr !4747
  %6 = trunc i64 %2 to i32, !insn.addr !4747
  store i32 %6, i32* %4, align 4, !insn.addr !4747
  %7 = trunc i64 %1 to i32, !insn.addr !4748
  %8 = icmp eq i32 %7, 0, !insn.addr !4748
  br i1 %8, label %dec_label_pc_bd4f, label %dec_label_pc_bd30, !insn.addr !4749

dec_label_pc_bd30:                                ; preds = %dec_label_pc_bd26
  %9 = add i64 %pTuner, 588476, !insn.addr !4750
  %10 = inttoptr i64 %9 to i8*, !insn.addr !4750
  %11 = load i8, i8* %10, align 1, !insn.addr !4750
  %12 = icmp eq i8 %11, 0, !insn.addr !4750
  br i1 %12, label %dec_label_pc_bd4f, label %dec_label_pc_bd39, !insn.addr !4751

dec_label_pc_bd39:                                ; preds = %dec_label_pc_bd30
  %13 = urem i32 %5, 65536
  %14 = zext i32 %13 to i64, !insn.addr !4752
  %15 = call i64 @TS_GetProgramNumber_ByPID.279(i64 %1, i64 %14, i64 %0), !insn.addr !4753
  %16 = trunc i64 %15 to i8, !insn.addr !4754
  %17 = icmp eq i8 %16, 0, !insn.addr !4754
  store i8 -2, i8* %storemerge.reg2mem, !insn.addr !4755
  br i1 %17, label %dec_label_pc_bd54, label %dec_label_pc_bd4f, !insn.addr !4755

dec_label_pc_bd4f:                                ; preds = %dec_label_pc_bd39, %dec_label_pc_bd30, %dec_label_pc_bd26
  store i8 ptrtoint (i32* @global_var_1 to i8), i8* %storemerge.reg2mem, !insn.addr !4756
  br label %dec_label_pc_bd54, !insn.addr !4756

dec_label_pc_bd54:                                ; preds = %dec_label_pc_bd4f, %dec_label_pc_bd39
  %storemerge.reload = load i8, i8* %storemerge.reg2mem
  ret i8 %storemerge.reload, !insn.addr !4757
}

define i64 @DTV_GetResetMulti2LibFlag.233(i64 %arg1) local_unnamed_addr {
dec_label_pc_bd56:
  %0 = call i64 @mcount(), !insn.addr !4758
  ret i64 %0, !insn.addr !4759
}

define i8 @DTV_GetContentAvailabilityDescriptor(i64 %pTuner, i32 %Pid, i8* %Buffer, i32* %real_length) local_unnamed_addr {
dec_label_pc_bd69:
  %.reg2mem = alloca i8, !insn.addr !4760
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = trunc i64 %0 to i8
  %2 = inttoptr i64 %0 to i8*, !insn.addr !4760
  store i8 %1, i8* %2, align 1, !insn.addr !4760
  %3 = icmp eq i64 %0, 0, !insn.addr !4761
  store i8 0, i8* %.reg2mem, !insn.addr !4762
  br i1 %3, label %dec_label_pc_bd97, label %dec_label_pc_bd70, !insn.addr !4762

dec_label_pc_bd70:                                ; preds = %dec_label_pc_bd69
  %4 = add i64 %pTuner, 588476, !insn.addr !4763
  %5 = inttoptr i64 %4 to i8*, !insn.addr !4763
  %6 = load i8, i8* %5, align 1, !insn.addr !4763
  %7 = icmp eq i8 %6, 0, !insn.addr !4763
  br i1 %7, label %dec_label_pc_bd88, label %dec_label_pc_bd79, !insn.addr !4764

dec_label_pc_bd79:                                ; preds = %dec_label_pc_bd70
  %8 = call i64 @TS_GetResetMulti2LibFlag.575(i64 %0), !insn.addr !4765
  store i8 ptrtoint (i32* @global_var_1 to i8), i8* %.reg2mem, !insn.addr !4766
  br label %dec_label_pc_bd97, !insn.addr !4766

dec_label_pc_bd88:                                ; preds = %dec_label_pc_bd70
  %9 = sext i32 %Pid to i64
  %10 = inttoptr i64 %9 to i8*, !insn.addr !4767
  store i8 0, i8* %10, align 1, !insn.addr !4767
  store i8 ptrtoint (i32* @global_var_1 to i8), i8* %.reg2mem, !insn.addr !4768
  br label %dec_label_pc_bd97, !insn.addr !4768

dec_label_pc_bd97:                                ; preds = %dec_label_pc_bd69, %dec_label_pc_bd88, %dec_label_pc_bd79
  %.reload = load i8, i8* %.reg2mem, !insn.addr !4769
  ret i8 %.reload, !insn.addr !4769
}

define i64 @DTV_GetContentAvailabilityDescriptor.281(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4) local_unnamed_addr {
dec_label_pc_bd99:
  %0 = call i64 @mcount(), !insn.addr !4770
  %1 = inttoptr i64 %arg4 to i32*, !insn.addr !4771
  store i32 0, i32* %1, align 4, !insn.addr !4771
  %2 = add i64 %arg1, 588464, !insn.addr !4772
  %3 = inttoptr i64 %2 to i64*, !insn.addr !4772
  %4 = load i64, i64* %3, align 8, !insn.addr !4772
  ret i64 %4, !insn.addr !4773
}

define i8 @DTV_GetDigitalCopyControlDescriptor(i64 %pTuner, i32 %Pid, i8* %Buffer, i32* %real_length) local_unnamed_addr {
dec_label_pc_bdd5:
  %storemerge.reg2mem = alloca i8, !insn.addr !4774
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = call i64 @__decompiler_undefined_function_0()
  %2 = call i64 @__decompiler_undefined_function_0()
  %3 = ptrtoint i8* %Buffer to i64
  %4 = add i64 %0, 15, !insn.addr !4775
  %5 = add i64 %4, %1, !insn.addr !4775
  %6 = inttoptr i64 %5 to i8*, !insn.addr !4775
  %7 = load i8, i8* %6, align 1, !insn.addr !4775
  %8 = udiv i64 %3, 256, !insn.addr !4775
  %9 = trunc i64 %8 to i8, !insn.addr !4775
  %10 = add i8 %7, %9, !insn.addr !4775
  store i8 %10, i8* %6, align 1, !insn.addr !4775
  %11 = call i64 @TS_GetContentAvailabilityDescriptor.549(i64 %2), !insn.addr !4776
  %12 = trunc i64 %11 to i8, !insn.addr !4777
  %13 = icmp eq i8 %12, 0, !insn.addr !4777
  %14 = icmp eq i1 %13, false, !insn.addr !4778
  store i8 ptrtoint (i32* @global_var_1 to i8), i8* %storemerge.reg2mem, !insn.addr !4778
  br i1 %14, label %dec_label_pc_bdfe, label %dec_label_pc_bdec, !insn.addr !4778

dec_label_pc_bdec:                                ; preds = %dec_label_pc_bdd5
  %15 = and i64 %1, -65281, !insn.addr !4779
  %16 = or i64 %15, 62976, !insn.addr !4779
  %17 = inttoptr i64 %16 to i32*, !insn.addr !4780
  store i32 0, i32* %17, align 4, !insn.addr !4780
  store i8 -2, i8* %storemerge.reg2mem, !insn.addr !4781
  br label %dec_label_pc_bdfe, !insn.addr !4781

dec_label_pc_bdfe:                                ; preds = %dec_label_pc_bdd5, %dec_label_pc_bdec
  %storemerge.reload = load i8, i8* %storemerge.reg2mem
  ret i8 %storemerge.reload, !insn.addr !4782
}

define i64 @DTV_GetDigitalCopyControlDescriptor.270(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4) local_unnamed_addr {
dec_label_pc_be05:
  %0 = call i64 @mcount(), !insn.addr !4783
  %1 = inttoptr i64 %arg4 to i32*, !insn.addr !4784
  store i32 0, i32* %1, align 4, !insn.addr !4784
  %2 = add i64 %arg1, 588464, !insn.addr !4785
  %3 = inttoptr i64 %2 to i64*, !insn.addr !4785
  %4 = load i64, i64* %3, align 8, !insn.addr !4785
  ret i64 %4, !insn.addr !4786
}

define i8 @DTV_SetBCASCardExist(i64 %pTuner, i8 %isExist) local_unnamed_addr {
dec_label_pc_be41:
  %storemerge.reg2mem = alloca i8, !insn.addr !4787
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = call i64 @__decompiler_undefined_function_0()
  %2 = call i64 @__decompiler_undefined_function_0()
  %3 = call i64 @__decompiler_undefined_function_0()
  %4 = add i64 %0, 15, !insn.addr !4788
  %5 = add i64 %4, %1, !insn.addr !4788
  %6 = inttoptr i64 %5 to i8*, !insn.addr !4788
  %7 = load i8, i8* %6, align 1, !insn.addr !4788
  %8 = udiv i64 %2, 256, !insn.addr !4788
  %9 = trunc i64 %8 to i8, !insn.addr !4788
  %10 = add i8 %7, %9, !insn.addr !4788
  store i8 %10, i8* %6, align 1, !insn.addr !4788
  %11 = call i64 @TS_GetDigitalCopyControlDescriptor.424(i64 %3), !insn.addr !4789
  %12 = trunc i64 %11 to i8, !insn.addr !4790
  %13 = icmp eq i8 %12, 0, !insn.addr !4790
  %14 = icmp eq i1 %13, false, !insn.addr !4791
  store i8 ptrtoint (i32* @global_var_1 to i8), i8* %storemerge.reg2mem, !insn.addr !4791
  br i1 %14, label %dec_label_pc_be6a, label %dec_label_pc_be58, !insn.addr !4791

dec_label_pc_be58:                                ; preds = %dec_label_pc_be41
  %15 = and i64 %1, -65281, !insn.addr !4792
  %16 = or i64 %15, 62976, !insn.addr !4792
  %17 = inttoptr i64 %16 to i32*, !insn.addr !4793
  store i32 0, i32* %17, align 4, !insn.addr !4793
  store i8 -2, i8* %storemerge.reg2mem, !insn.addr !4794
  br label %dec_label_pc_be6a, !insn.addr !4794

dec_label_pc_be6a:                                ; preds = %dec_label_pc_be41, %dec_label_pc_be58
  %storemerge.reload = load i8, i8* %storemerge.reg2mem
  ret i8 %storemerge.reload, !insn.addr !4795
}

define i64 @DTV_SetBCASCardExist.288(i64 %arg1) local_unnamed_addr {
dec_label_pc_be71:
  %0 = call i64 @mcount(), !insn.addr !4796
  ret i64 %0, !insn.addr !4797
}

define i8 @DTV_GetIsStreamScramble(i64 %pTuner, i8* %isStreamScramble) local_unnamed_addr {
dec_label_pc_be83:
  %.reg2mem = alloca i8, !insn.addr !4798
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = call i64 @__decompiler_undefined_function_0()
  %2 = trunc i64 %1 to i8
  %3 = inttoptr i64 %1 to i8*, !insn.addr !4799
  store i8 %2, i8* %3, align 1, !insn.addr !4799
  %4 = icmp eq i64 %0, 0, !insn.addr !4800
  store i8 0, i8* %.reg2mem, !insn.addr !4801
  br i1 %4, label %dec_label_pc_beb1, label %dec_label_pc_be8b, !insn.addr !4801

dec_label_pc_be8b:                                ; preds = %dec_label_pc_be83
  %5 = add i64 %pTuner, 588476, !insn.addr !4802
  %6 = inttoptr i64 %5 to i8*, !insn.addr !4802
  %7 = load i8, i8* %6, align 1, !insn.addr !4802
  %8 = icmp eq i8 %7, 0, !insn.addr !4802
  store i8 ptrtoint (i32* @global_var_1 to i8), i8* %.reg2mem, !insn.addr !4803
  br i1 %8, label %dec_label_pc_beb1, label %dec_label_pc_be99, !insn.addr !4803

dec_label_pc_be99:                                ; preds = %dec_label_pc_be8b
  %9 = ptrtoint i8* %isStreamScramble to i64
  %10 = urem i64 %9, 256, !insn.addr !4804
  %11 = call i64 @TS_SetBCASCardExist.306(i64 %0, i64 %10), !insn.addr !4805
  store i8 ptrtoint (i32* @global_var_1 to i8), i8* %.reg2mem, !insn.addr !4806
  br label %dec_label_pc_beb1, !insn.addr !4806

dec_label_pc_beb1:                                ; preds = %dec_label_pc_be83, %dec_label_pc_be99, %dec_label_pc_be8b
  %.reload = load i8, i8* %.reg2mem, !insn.addr !4807
  ret i8 %.reload, !insn.addr !4807
}

define i64 @DTV_GetIsStreamScramble.474(i64 %arg1) local_unnamed_addr {
dec_label_pc_beb3:
  %0 = call i64 @mcount(), !insn.addr !4808
  ret i64 %0, !insn.addr !4809
}

define i8 @DTV_SetIsStreamScramble(i64 %pTuner, i8 %isStreamScramble) local_unnamed_addr {
dec_label_pc_bec6:
  %.reg2mem = alloca i8, !insn.addr !4810
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = trunc i64 %0 to i8
  %2 = inttoptr i64 %0 to i8*, !insn.addr !4810
  store i8 %1, i8* %2, align 1, !insn.addr !4810
  %3 = icmp eq i64 %0, 0, !insn.addr !4811
  store i8 0, i8* %.reg2mem, !insn.addr !4812
  br i1 %3, label %dec_label_pc_bef4, label %dec_label_pc_becd, !insn.addr !4812

dec_label_pc_becd:                                ; preds = %dec_label_pc_bec6
  %4 = add i64 %pTuner, 588476, !insn.addr !4813
  %5 = inttoptr i64 %4 to i8*, !insn.addr !4813
  %6 = load i8, i8* %5, align 1, !insn.addr !4813
  %7 = icmp eq i8 %6, 0, !insn.addr !4813
  br i1 %7, label %dec_label_pc_bee5, label %dec_label_pc_bed6, !insn.addr !4814

dec_label_pc_bed6:                                ; preds = %dec_label_pc_becd
  %8 = call i64 @TS_GetIsStreamScramble.145(i64 %0), !insn.addr !4815
  store i8 ptrtoint (i32* @global_var_1 to i8), i8* %.reg2mem, !insn.addr !4816
  br label %dec_label_pc_bef4, !insn.addr !4816

dec_label_pc_bee5:                                ; preds = %dec_label_pc_becd
  %9 = sext i8 %isStreamScramble to i64
  %10 = inttoptr i64 %9 to i8*, !insn.addr !4817
  store i8 ptrtoint (i32* @global_var_1 to i8), i8* %10, align 1, !insn.addr !4817
  store i8 ptrtoint (i32* @global_var_1 to i8), i8* %.reg2mem, !insn.addr !4818
  br label %dec_label_pc_bef4, !insn.addr !4818

dec_label_pc_bef4:                                ; preds = %dec_label_pc_bec6, %dec_label_pc_bee5, %dec_label_pc_bed6
  %.reload = load i8, i8* %.reg2mem, !insn.addr !4819
  ret i8 %.reload, !insn.addr !4819
}

define i64 @DTV_SetIsStreamScramble.432(i64 %arg1) local_unnamed_addr {
dec_label_pc_bef6:
  %0 = call i64 @mcount(), !insn.addr !4820
  ret i64 %0, !insn.addr !4821
}

define void @TLIB_Delay_Middle(i64 %dwMilliseconds) local_unnamed_addr {
dec_label_pc_bf08:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = trunc i64 %0 to i8
  %2 = inttoptr i64 %0 to i8*, !insn.addr !4822
  store i8 %1, i8* %2, align 1, !insn.addr !4822
  ret void, !insn.addr !4823
}

define i8 @DTV_SetTunerTSID(i64 %pTuner, i32 %tsid, i8 %preset) local_unnamed_addr {
dec_label_pc_bf18:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = call i64 @__decompiler_undefined_function_0()
  %2 = sext i8 %preset to i64
  %3 = trunc i64 %1 to i8
  %4 = inttoptr i64 %1 to i8*, !insn.addr !4824
  store i8 %3, i8* %4, align 1, !insn.addr !4824
  %5 = add i64 %0, 64, !insn.addr !4825
  %6 = add i64 %5, %1, !insn.addr !4825
  %7 = inttoptr i64 %6 to i8*, !insn.addr !4825
  %8 = load i8, i8* %7, align 1, !insn.addr !4825
  %9 = ashr i8 %preset, 7, !insn.addr !4825
  %10 = add i8 %8, %9, !insn.addr !4825
  store i8 %10, i8* %7, align 1, !insn.addr !4825
  %11 = lshr i64 %2, ptrtoint (i8* @global_var_8 to i64), !insn.addr !4826
  %12 = urem i64 %11, 256, !insn.addr !4826
  %13 = call i64 @TS_SetIsStreamScramble.576(i64 %2, i64 %12), !insn.addr !4827
  ret i8 ptrtoint (i32* @global_var_1 to i8), !insn.addr !4828
}

define i64 @TLIB_Delay_Middle.291() local_unnamed_addr {
dec_label_pc_bf38:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = call i64 @mcount(), !insn.addr !4829
  %2 = inttoptr i64 %0 to i64*, !insn.addr !4830
  %3 = call i64 @TLIB_Delay.388(i64* %2), !insn.addr !4830
  ret i64 %3, !insn.addr !4831
}

define i64 @DTV_SetTunerTSID.496(i64 %arg1, i32 %arg2, i64 %arg3) local_unnamed_addr {
dec_label_pc_bf48:
  %0 = call i64 @mcount(), !insn.addr !4832
  %1 = zext i32 %arg2 to i64, !insn.addr !4833
  %2 = add i64 %arg1, 7480, !insn.addr !4834
  %3 = inttoptr i64 %2 to i64*, !insn.addr !4834
  %4 = load i64, i64* %3, align 8, !insn.addr !4834
  %5 = add i64 %arg1, 7472, !insn.addr !4835
  %6 = inttoptr i64 %5 to i8*, !insn.addr !4835
  %7 = load i8, i8* %6, align 1, !insn.addr !4835
  %8 = zext i8 %7 to i64, !insn.addr !4835
  %9 = trunc i64 %arg3 to i8, !insn.addr !4836
  %10 = icmp eq i8 %9, 0, !insn.addr !4836
  br i1 %10, label %dec_label_pc_bfbe, label %dec_label_pc_bf95, !insn.addr !4837

dec_label_pc_bf95:                                ; preds = %dec_label_pc_bf48
  %11 = mul nuw nsw i64 %8, 80, !insn.addr !4838
  %12 = urem i64 %arg3, 256, !insn.addr !4839
  %13 = add i64 %4, 22880, !insn.addr !4840
  %14 = add i64 %13, %11, !insn.addr !4840
  %15 = call i64 @TC_TSIDWrite.186(i64 %4, i64 %8, i64 %1, i64 %12, i64 %14), !insn.addr !4841
  ret i64 %15, !insn.addr !4842

dec_label_pc_bfbe:                                ; preds = %dec_label_pc_bf48
  %16 = add i64 %arg1, ptrtoint (i8** @global_var_30d60 to i64), !insn.addr !4843
  %17 = inttoptr i64 %16 to i8*, !insn.addr !4843
  %18 = load i8, i8* %17, align 1, !insn.addr !4843
  %19 = icmp eq i8 %18, ptrtoint (i32* @global_var_1 to i8), !insn.addr !4843
  %20 = icmp eq i1 %19, false, !insn.addr !4844
  br i1 %20, label %dec_label_pc_bfe8, label %dec_label_pc_bfd4, !insn.addr !4844

dec_label_pc_bfd4:                                ; preds = %dec_label_pc_bfbe
  %21 = call i64 @TLIB_Delay.388(i64* inttoptr (i64 400 to i64*)), !insn.addr !4845
  ret i64 ptrtoint (i32* @global_var_1 to i64), !insn.addr !4846

dec_label_pc_bfe8:                                ; preds = %dec_label_pc_bfbe
  %22 = mul i64 %8, 8, !insn.addr !4847
  %23 = add i64 %4, 1160, !insn.addr !4847
  %24 = add i64 %23, %22, !insn.addr !4847
  %25 = inttoptr i64 %24 to i64*, !insn.addr !4847
  %26 = load i64, i64* %25, align 8, !insn.addr !4847
  %27 = call i64 @vUSB_Wait.362(i64 50), !insn.addr !4848
  %28 = mul nuw nsw i64 %8, 80, !insn.addr !4849
  %29 = add i64 %4, 22880, !insn.addr !4850
  %30 = add i64 %29, %28, !insn.addr !4850
  %31 = call i64 @TC_TSIDWrite.186(i64 %4, i64 %8, i64 %1, i64 0, i64 %30), !insn.addr !4851
  %32 = call i64 @vUSB_Wait.362(i64 500), !insn.addr !4852
  %33 = call i64 @USB_FilterReset.459(i64 %4, i64 %8), !insn.addr !4853
  %34 = trunc i64 %33 to i32, !insn.addr !4854
  %35 = icmp eq i32 %34, ptrtoint (i32* @global_var_1 to i32), !insn.addr !4854
  %36 = call i64 @DTV_SetPidFilterBoundary.194(i64 %arg1, i64 8191, i64 8191)
  br i1 %35, label %dec_label_pc_c065, label %dec_label_pc_c049, !insn.addr !4855

dec_label_pc_c049:                                ; preds = %dec_label_pc_bfe8
  ret i64 0, !insn.addr !4856

dec_label_pc_c065:                                ; preds = %dec_label_pc_bfe8
  %37 = add i64 %4, 1152, !insn.addr !4857
  %38 = add i64 %37, %8, !insn.addr !4857
  %39 = inttoptr i64 %38 to i8*, !insn.addr !4857
  %40 = load i8, i8* %39, align 1, !insn.addr !4857
  %41 = icmp eq i8 %40, 1, !insn.addr !4857
  %42 = icmp eq i1 %41, false, !insn.addr !4858
  %43 = icmp eq i64 %26, 0, !insn.addr !4859
  %or.cond = or i1 %43, %42
  br i1 %or.cond, label %dec_label_pc_c0af, label %dec_label_pc_c08c, !insn.addr !4858

dec_label_pc_c08c:                                ; preds = %dec_label_pc_c065
  %44 = call i64 @FUSBDTV_StopBulkStream.338(i64 %4, i64 %8), !insn.addr !4860
  %45 = call i64 @FUSBDTV_StartBulkStream.453(i64 %4, i64 %8, i64 128, i64 18800, i64 %arg1), !insn.addr !4861
  br label %dec_label_pc_c0af, !insn.addr !4861

dec_label_pc_c0af:                                ; preds = %dec_label_pc_c08c, %dec_label_pc_c065
  %46 = add i64 %arg1, 588464, !insn.addr !4862
  %47 = inttoptr i64 %46 to i64*, !insn.addr !4862
  %48 = load i64, i64* %47, align 8, !insn.addr !4862
  %49 = call i64 @TS_EnableProcProgramID.349(i64 %48, i64 0), !insn.addr !4863
  %50 = add i64 %arg1, 588477, !insn.addr !4864
  %51 = inttoptr i64 %50 to i8*, !insn.addr !4864
  store i8 ptrtoint (i32* @global_var_1 to i8), i8* %51, align 1, !insn.addr !4864
  ret i64 %49, !insn.addr !4865
}

define i8 @DTV_GetTunerCurrentTSID(i64 %pTuner, i32* %tsid) local_unnamed_addr {
dec_label_pc_c0d0:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = trunc i64 %0 to i8, !insn.addr !4866
  ret i8 %1, !insn.addr !4866
}

define i64 @DTV_GetTunerCurrentTSID.219(i64 %arg1) local_unnamed_addr {
dec_label_pc_c100:
  %0 = call i64 @mcount(), !insn.addr !4867
  ret i64 4294967286, !insn.addr !4868
}

define i8 @DTV_GetProgramIDList(i64 %pTuner, i32* %program_id_list, i8 %list_length) local_unnamed_addr {
dec_label_pc_c12e:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = call i64 @__decompiler_undefined_function_0()
  %2 = ptrtoint i32* %program_id_list to i64
  %3 = mul i64 %1, 80
  %4 = add i64 %3, 39781342032, !insn.addr !4869
  %5 = and i64 %4, 68719476720, !insn.addr !4870
  %6 = add i64 %0, 22880, !insn.addr !4871
  %7 = add i64 %6, %5, !insn.addr !4871
  %8 = zext i8 %list_length to i64, !insn.addr !4872
  %9 = call i64 @TC_CurrentTSIDRead.550(i64 %0, i64 %8, i64 %2, i64 %7), !insn.addr !4873
  %10 = trunc i64 %9 to i8, !insn.addr !4874
  %11 = icmp ult i8 %10, ptrtoint (i32* @global_var_1 to i8), !insn.addr !4874
  %12 = select i1 %11, i8 add (i8 ptrtoint (i32* @global_var_1 to i8), i8 -3), i8 ptrtoint (i32* @global_var_1 to i8), !insn.addr !4875
  ret i8 %12, !insn.addr !4876
}

define i64 @DTV_GetProgramIDList.512(i64 %arg1, i64 %arg2, i64 %arg3) local_unnamed_addr {
dec_label_pc_c15e:
  %0 = call i64 @mcount(), !insn.addr !4877
  ret i64 %0, !insn.addr !4878
}

define i8 @DTV_SetProgramID(i64 %pTuner, i32 %program_id) local_unnamed_addr {
dec_label_pc_c1b7:
  ret i8 ptrtoint (i32* @global_var_1 to i8), !insn.addr !4879
}

define i64 @DTV_SetProgramID.514(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_c1e7:
  %0 = call i64 @mcount(), !insn.addr !4880
  ret i64 %0, !insn.addr !4881
}

define i8 @DTV_GetTunerTSIDList(i64 %pTuner, i32* %tsidList, i8 %listLength) local_unnamed_addr {
dec_label_pc_c224:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = call i64 @__decompiler_undefined_function_0()
  %2 = call i64 @__decompiler_undefined_function_0()
  %3 = add i64 %2, -117, !insn.addr !4882
  %4 = inttoptr i64 %3 to i8*, !insn.addr !4882
  %5 = load i8, i8* %4, align 1, !insn.addr !4882
  %6 = trunc i64 %1 to i8, !insn.addr !4882
  %7 = add i8 %5, %6, !insn.addr !4882
  store i8 %7, i8* %4, align 1, !insn.addr !4882
  %8 = call i64 @TS_EnableProcProgramID.349(i64 %pTuner, i64 ptrtoint (i32* @global_var_1 to i64)), !insn.addr !4883
  %9 = trunc i64 %0 to i32, !insn.addr !4884
  store i32 %9, i32* inttoptr (i64 1188960 to i32*), align 32, !insn.addr !4884
  ret i8 ptrtoint (i32* @global_var_1 to i8), !insn.addr !4885
}

define i64 @DTV_GetTunerTSIDList.382(i64 %arg1) local_unnamed_addr {
dec_label_pc_c254:
  %0 = call i64 @mcount(), !insn.addr !4886
  %1 = add i64 %arg1, 7472, !insn.addr !4887
  %2 = inttoptr i64 %1 to i8*, !insn.addr !4887
  %3 = load i8, i8* %2, align 1, !insn.addr !4887
  %4 = zext i8 %3 to i64, !insn.addr !4888
  ret i64 %4, !insn.addr !4888
}

define void @DTV_GetProgramIDList_Ex(i64 %pTuner, i64 %program_id_list, i8* %program_number_count) local_unnamed_addr {
dec_label_pc_c288:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = call i64 @__decompiler_undefined_function_0()
  %2 = call i64 @__decompiler_undefined_function_0()
  %3 = ptrtoint i8* %program_number_count to i64
  %4 = mul i64 %2, shl (i64 add (i64 ptrtoint (i16* @global_var_4 to i64), i64 1), i64 ptrtoint (i16* @global_var_4 to i64)), !insn.addr !4889
  %5 = urem i64 %3, 256, !insn.addr !4890
  %6 = add i64 %0, 22880, !insn.addr !4891
  %7 = add i64 %6, %4, !insn.addr !4891
  %8 = urem i64 %1, 256, !insn.addr !4892
  %9 = call i64 @TC_TSIDRead.559(i64 %0, i64 %8, i64 %program_id_list, i64 %5, i64 %7), !insn.addr !4893
  ret void, !insn.addr !4894
}

define i64 @DTV_GetProgramIDList_Ex.483(i64 %arg1, i64 %arg2, i64 %arg3) local_unnamed_addr {
dec_label_pc_c2b8:
  %0 = call i64 @mcount(), !insn.addr !4895
  ret i64 %0, !insn.addr !4896
}

define i8 @BCAS_CMDSet_Ext(i8* %PDev, i8* %PTuner, i8* %buffer, i32 %size) local_unnamed_addr {
dec_label_pc_c2c9:
  %.pre-phi.reg2mem = alloca i8, !insn.addr !4897
  %rax.0.reg2mem = alloca i64, !insn.addr !4897
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = icmp eq i8* %PDev, null, !insn.addr !4897
  br i1 %1, label %dec_label_pc_c2ef, label %dec_label_pc_c2ce, !insn.addr !4898

dec_label_pc_c2ce:                                ; preds = %dec_label_pc_c2c9
  %2 = ptrtoint i8* %PDev to i64
  %3 = add i64 %2, 588464, !insn.addr !4899
  %4 = inttoptr i64 %3 to i64*, !insn.addr !4899
  %5 = load i64, i64* %4, align 8, !insn.addr !4899
  %6 = icmp eq i64 %5, 0, !insn.addr !4900
  store i64 0, i64* %rax.0.reg2mem, !insn.addr !4901
  br i1 %6, label %dec_label_pc_c2ef, label %dec_label_pc_c2da, !insn.addr !4901

dec_label_pc_c2da:                                ; preds = %dec_label_pc_c2ce
  %7 = add i64 %2, 588476, !insn.addr !4902
  %8 = inttoptr i64 %7 to i8*, !insn.addr !4902
  %9 = load i8, i8* %8, align 1, !insn.addr !4902
  %10 = icmp eq i8 %9, 0, !insn.addr !4902
  store i64 %5, i64* %rax.0.reg2mem, !insn.addr !4903
  br i1 %10, label %dec_label_pc_c2ef, label %dec_label_pc_c2e3, !insn.addr !4903

dec_label_pc_c2e3:                                ; preds = %dec_label_pc_c2da
  %11 = call i64 @TS_GetTsProgramID_Ex.220(i64 %5), !insn.addr !4904
  %12 = trunc i64 %11 to i8
  %13 = inttoptr i64 %0 to i8*, !insn.addr !4905
  store i8 %12, i8* %13, align 1, !insn.addr !4905
  store i8 %12, i8* %.pre-phi.reg2mem, !insn.addr !4906
  br label %dec_label_pc_c2f2, !insn.addr !4906

dec_label_pc_c2ef:                                ; preds = %dec_label_pc_c2da, %dec_label_pc_c2ce, %dec_label_pc_c2c9
  %rax.0.reload = load i64, i64* %rax.0.reg2mem
  %14 = inttoptr i64 %0 to i8*, !insn.addr !4907
  store i8 0, i8* %14, align 1, !insn.addr !4907
  %.pre = trunc i64 %rax.0.reload to i8, !insn.addr !4908
  store i8 %.pre, i8* %.pre-phi.reg2mem, !insn.addr !4907
  br label %dec_label_pc_c2f2, !insn.addr !4907

dec_label_pc_c2f2:                                ; preds = %dec_label_pc_c2ef, %dec_label_pc_c2e3
  %.pre-phi.reload = load i8, i8* %.pre-phi.reg2mem
  ret i8 %.pre-phi.reload, !insn.addr !4908
}

define i64 @BCAS_CMDSet_Ext.189(i64 %arg1, i64 %arg2, i64* %arg3, i8 %arg4) local_unnamed_addr {
dec_label_pc_c2f9:
  %rcx.1.reg2mem = alloca i64, !insn.addr !4909
  %.pre-phi.reg2mem = alloca i64, !insn.addr !4909
  %rax.1.reg2mem = alloca i64, !insn.addr !4909
  %rdx.0.reg2mem = alloca i64, !insn.addr !4909
  %rcx.0.reg2mem = alloca i64, !insn.addr !4909
  %rax.0.reg2mem = alloca i64, !insn.addr !4909
  %stack_var_-391 = alloca i64, align 8
  %stack_var_-392 = alloca i8, align 1
  %0 = call i64 @mcount(), !insn.addr !4910
  %1 = call i64 @__readgsqword(i64 40), !insn.addr !4911
  %2 = add i64 %arg1, ptrtoint (i8** @global_var_1338 to i64), !insn.addr !4912
  %3 = inttoptr i64 %2 to i8*, !insn.addr !4912
  %4 = load i8, i8* %3, align 1, !insn.addr !4912
  %5 = icmp eq i8 %4, ptrtoint (i32* @global_var_1 to i8), !insn.addr !4913
  %6 = icmp eq i1 %5, false, !insn.addr !4914
  store i64 0, i64* %rax.1.reg2mem, !insn.addr !4914
  br i1 %6, label %dec_label_pc_c3da, label %dec_label_pc_c348, !insn.addr !4914

dec_label_pc_c348:                                ; preds = %dec_label_pc_c2f9
  %7 = add i64 %arg1, 5253, !insn.addr !4915
  %8 = inttoptr i64 %7 to i8*, !insn.addr !4915
  %9 = load i8, i8* %8, align 1, !insn.addr !4915
  %10 = icmp eq i8 %9, 0, !insn.addr !4915
  %11 = select i1 %10, i32 60, i32 255, !insn.addr !4916
  %12 = sext i8 %arg4 to i32, !insn.addr !4917
  %13 = icmp ult i32 %11, %12, !insn.addr !4917
  %14 = icmp eq i8 %4, 0, !insn.addr !4918
  %or.cond = or i1 %14, %13
  store i64 ptrtoint (i32* @global_var_1 to i64), i64* %rax.1.reg2mem, !insn.addr !4919
  br i1 %or.cond, label %dec_label_pc_c3da, label %dec_label_pc_c360, !insn.addr !4919

dec_label_pc_c360:                                ; preds = %dec_label_pc_c348
  %15 = sext i8 %arg4 to i64
  %16 = ptrtoint i64* %arg3 to i64
  %17 = and i64 %15, 4294967295, !insn.addr !4920
  call void @__asm_rep_stosq_memset(i8* nonnull %stack_var_-392, i64 0, i64 40), !insn.addr !4921
  %18 = ptrtoint i8* %stack_var_-392 to i64, !insn.addr !4922
  %19 = call i64 @memcpy(i64 %18, i64 %16, i64 %17, i64 0), !insn.addr !4923
  %20 = add i64 %arg1, ptrtoint ([3 x i8]* @global_var_2d4 to i64), !insn.addr !4924
  %21 = inttoptr i64 %20 to i32*, !insn.addr !4924
  %22 = load i32, i32* %21, align 4, !insn.addr !4924
  %23 = icmp eq i32 %22, %12, !insn.addr !4924
  %24 = icmp eq i1 %23, false, !insn.addr !4925
  br i1 %24, label %dec_label_pc_c360.dec_label_pc_c3eb_crit_edge, label %dec_label_pc_c391, !insn.addr !4925

dec_label_pc_c360.dec_label_pc_c3eb_crit_edge:    ; preds = %dec_label_pc_c360
  %.pre = add i64 %arg1, 404, !insn.addr !4926
  store i64 %.pre, i64* %.pre-phi.reg2mem
  store i64 0, i64* %rcx.1.reg2mem
  br label %dec_label_pc_c3eb

dec_label_pc_c391:                                ; preds = %dec_label_pc_c360
  %25 = icmp eq i8 %arg4, 0, !insn.addr !4927
  store i64 ptrtoint (i32* @global_var_1 to i64), i64* %rax.1.reg2mem, !insn.addr !4928
  br i1 %25, label %dec_label_pc_c3da, label %dec_label_pc_c396, !insn.addr !4928

dec_label_pc_c396:                                ; preds = %dec_label_pc_c391
  %26 = add i64 %arg1, 404
  %27 = inttoptr i64 %26 to i8*, !insn.addr !4929
  %28 = load i8, i8* %27, align 1, !insn.addr !4929
  %29 = load i8, i8* %stack_var_-392, align 1, !insn.addr !4930
  %30 = icmp eq i8 %28, %29, !insn.addr !4930
  %31 = icmp eq i1 %30, false, !insn.addr !4931
  store i64 %26, i64* %.pre-phi.reg2mem, !insn.addr !4931
  store i64 0, i64* %rcx.1.reg2mem, !insn.addr !4931
  br i1 %31, label %dec_label_pc_c3eb, label %dec_label_pc_c3a5, !insn.addr !4931

dec_label_pc_c3a5:                                ; preds = %dec_label_pc_c396
  %32 = ptrtoint i64* %stack_var_-391 to i64, !insn.addr !4932
  store i64 0, i64* %rax.0.reg2mem, !insn.addr !4933
  store i64 %arg1, i64* %rcx.0.reg2mem, !insn.addr !4933
  store i64 %32, i64* %rdx.0.reg2mem, !insn.addr !4933
  br label %dec_label_pc_c3cd, !insn.addr !4933

dec_label_pc_c3b6:                                ; preds = %dec_label_pc_c3cd
  %rdx.0.reload = load i64, i64* %rdx.0.reg2mem
  %rcx.0.reload = load i64, i64* %rcx.0.reg2mem
  %33 = and i64 %43, 4294967295, !insn.addr !4934
  %34 = add i64 %rcx.0.reload, 405, !insn.addr !4935
  %35 = inttoptr i64 %34 to i8*, !insn.addr !4935
  %36 = load i8, i8* %35, align 1, !insn.addr !4935
  %37 = inttoptr i64 %rdx.0.reload to i8*, !insn.addr !4936
  %38 = load i8, i8* %37, align 4, !insn.addr !4936
  %39 = add i64 %rcx.0.reload, ptrtoint (i32* @global_var_1 to i64), !insn.addr !4937
  %40 = add i64 %rdx.0.reload, ptrtoint (i32* @global_var_1 to i64), !insn.addr !4938
  %41 = icmp eq i8 %36, %38, !insn.addr !4939
  %42 = icmp eq i1 %41, false, !insn.addr !4940
  store i64 %33, i64* %rax.0.reg2mem, !insn.addr !4940
  store i64 %39, i64* %rcx.0.reg2mem, !insn.addr !4940
  store i64 %40, i64* %rdx.0.reg2mem, !insn.addr !4940
  store i64 %26, i64* %.pre-phi.reg2mem, !insn.addr !4940
  store i64 %39, i64* %rcx.1.reg2mem, !insn.addr !4940
  br i1 %42, label %dec_label_pc_c3eb, label %dec_label_pc_c3cd, !insn.addr !4940

dec_label_pc_c3cd:                                ; preds = %dec_label_pc_c3b6, %dec_label_pc_c3a5
  %rax.0.reload = load i64, i64* %rax.0.reg2mem
  %43 = add nuw nsw i64 %rax.0.reload, zext (i32 ptrtoint (i32* @global_var_1 to i32) to i64), !insn.addr !4934
  %44 = trunc i64 %43 to i32, !insn.addr !4941
  %45 = icmp ugt i32 %12, %44
  store i64 ptrtoint (i32* @global_var_1 to i64), i64* %rax.1.reg2mem, !insn.addr !4942
  br i1 %45, label %dec_label_pc_c3b6, label %dec_label_pc_c3da, !insn.addr !4942

dec_label_pc_c3da:                                ; preds = %dec_label_pc_c3cd, %dec_label_pc_c348, %dec_label_pc_c391, %dec_label_pc_c2f9
  %rax.1.reload = load i64, i64* %rax.1.reg2mem
  %46 = call i64 @__readgsqword(i64 40), !insn.addr !4943
  ret i64 %rax.1.reload, !insn.addr !4944

dec_label_pc_c3eb:                                ; preds = %dec_label_pc_c3b6, %dec_label_pc_c360.dec_label_pc_c3eb_crit_edge, %dec_label_pc_c396
  %rcx.1.reload = load i64, i64* %rcx.1.reg2mem
  %.pre-phi.reload = load i64, i64* %.pre-phi.reg2mem
  %47 = add i64 %arg1, 400, !insn.addr !4945
  %48 = inttoptr i64 %47 to i32*, !insn.addr !4945
  store i32 %12, i32* %48, align 4, !insn.addr !4945
  %49 = add i64 %arg1, 80, !insn.addr !4946
  %50 = call i64 @memcpy(i64 %49, i64 %18, i64 %17, i64 %rcx.1.reload), !insn.addr !4947
  store i32 %12, i32* %21, align 4, !insn.addr !4948
  %51 = call i64 @memcpy(i64 %.pre-phi.reload, i64 %18, i64 %17, i64 %rcx.1.reload), !insn.addr !4949
  %52 = add i64 %arg1, 5580, !insn.addr !4950
  %53 = inttoptr i64 %52 to i8*, !insn.addr !4950
  store i8 ptrtoint (i32* @global_var_1 to i8), i8* %53, align 1, !insn.addr !4950
  ret i64 %51, !insn.addr !4950
}

define i8 @BCAS_CMDGet_Ext(i8* %PDev, i8* %PTuner, i8* %Status, i8* %size, i8* %buffer, i64 %BufferSz) local_unnamed_addr {
dec_label_pc_c42f:
  %rax = alloca i64, align 8
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = ptrtoint i8* %size to i64
  %2 = add i64 %0, 1428867, !insn.addr !4951
  %3 = inttoptr i64 %2 to i8*, !insn.addr !4951
  %4 = load i8, i8* %3, align 1, !insn.addr !4951
  %5 = trunc i64 %1 to i8, !insn.addr !4951
  %6 = add i8 %4, %5, !insn.addr !4951
  store i8 %6, i8* %3, align 1, !insn.addr !4951
  %7 = bitcast i64* %rax to i8*
  %8 = load i8, i8* %7, align 8, !insn.addr !4952
  %9 = load i64, i64* %rax, align 8
  %10 = trunc i64 %9 to i8, !insn.addr !4952
  %11 = add i8 %8, %10, !insn.addr !4952
  %12 = inttoptr i64 %9 to i8*, !insn.addr !4952
  store i8 %11, i8* %12, align 1, !insn.addr !4952
  %13 = load i64, i64* %rax, align 8, !insn.addr !4953
  %14 = trunc i64 %13 to i8, !insn.addr !4953
  ret i8 %14, !insn.addr !4953
}

define i64 @BCAS_CMDGet_Ext.484(i64 %arg1, i64 %arg2, i64* %arg3, i8* %arg4, i64* %arg5, i64 %arg6, i64 %arg7) local_unnamed_addr {
dec_label_pc_c45f:
  %storemerge.in.in.in.reg2mem = alloca i32*, !insn.addr !4954
  %stack_var_-376 = alloca i64, align 8
  %0 = call i64 @mcount(), !insn.addr !4955
  %1 = call i64 @__readgsqword(i64 40), !insn.addr !4956
  %2 = add i64 %arg1, ptrtoint (i8** @global_var_1338 to i64), !insn.addr !4957
  %3 = inttoptr i64 %2 to i8*, !insn.addr !4957
  %4 = load i8, i8* %3, align 1, !insn.addr !4957
  %5 = bitcast i64* %arg3 to i8*, !insn.addr !4958
  store i8 %4, i8* %5, align 1, !insn.addr !4958
  %6 = icmp eq i64 %arg6, 66, !insn.addr !4959
  %7 = icmp eq i1 %6, false, !insn.addr !4960
  %8 = add i64 %arg1, 1064
  %9 = inttoptr i64 %8 to i32*
  %10 = load i32, i32* %9, align 4
  br i1 %7, label %dec_label_pc_c4c4, label %dec_label_pc_c4af, !insn.addr !4960

dec_label_pc_c4af:                                ; preds = %dec_label_pc_c45f
  %11 = icmp slt i32 %10, 69, !insn.addr !4961
  br i1 %11, label %dec_label_pc_c4da, label %dec_label_pc_c4b8, !insn.addr !4961

dec_label_pc_c4b8:                                ; preds = %dec_label_pc_c4af
  store i32 68, i32* %9, align 4, !insn.addr !4962
  br label %dec_label_pc_c4da, !insn.addr !4963

dec_label_pc_c4c4:                                ; preds = %dec_label_pc_c45f
  %12 = icmp slt i32 %10, 260, !insn.addr !4964
  br i1 %12, label %dec_label_pc_c4da, label %dec_label_pc_c4d0, !insn.addr !4964

dec_label_pc_c4d0:                                ; preds = %dec_label_pc_c4c4
  store i32 259, i32* %9, align 4, !insn.addr !4965
  br label %dec_label_pc_c4da, !insn.addr !4965

dec_label_pc_c4da:                                ; preds = %dec_label_pc_c4d0, %dec_label_pc_c4c4, %dec_label_pc_c4b8, %dec_label_pc_c4af
  %13 = bitcast i64* %stack_var_-376 to i8*, !insn.addr !4966
  call void @__asm_rep_stosq_memset(i8* nonnull %13, i64 0, i64 40), !insn.addr !4966
  %14 = add i64 %arg2, 7472, !insn.addr !4967
  %15 = inttoptr i64 %14 to i8*, !insn.addr !4967
  %16 = load i8, i8* %15, align 1, !insn.addr !4967
  %17 = icmp eq i8 %16, 0, !insn.addr !4967
  %18 = icmp eq i1 %17, false, !insn.addr !4968
  %19 = ptrtoint i64* %stack_var_-376 to i64
  br i1 %18, label %dec_label_pc_c524, label %dec_label_pc_c4fa, !insn.addr !4968

dec_label_pc_c4fa:                                ; preds = %dec_label_pc_c4da
  %20 = add i64 %arg1, 2028, !insn.addr !4969
  %21 = inttoptr i64 %20 to i32*, !insn.addr !4969
  %22 = load i32, i32* %21, align 4, !insn.addr !4969
  %23 = add i32 %22, -4, !insn.addr !4970
  %24 = sext i32 %23 to i64, !insn.addr !4971
  %25 = add i64 %arg1, 2035, !insn.addr !4972
  %26 = call i64 @memcpy(i64 %19, i64 %25, i64 %24, i64 0), !insn.addr !4973
  store i32* %21, i32** %storemerge.in.in.in.reg2mem, !insn.addr !4974
  br label %dec_label_pc_c550, !insn.addr !4974

dec_label_pc_c524:                                ; preds = %dec_label_pc_c4da
  %27 = add i64 %arg1, 2992, !insn.addr !4975
  %28 = inttoptr i64 %27 to i32*, !insn.addr !4975
  %29 = load i32, i32* %28, align 4, !insn.addr !4975
  %30 = add i32 %29, -4, !insn.addr !4976
  %31 = sext i32 %30 to i64, !insn.addr !4977
  %32 = add i64 %arg1, 2999, !insn.addr !4978
  %33 = call i64 @memcpy(i64 %19, i64 %32, i64 %31, i64 0), !insn.addr !4979
  store i32* %28, i32** %storemerge.in.in.in.reg2mem, !insn.addr !4980
  br label %dec_label_pc_c550, !insn.addr !4980

dec_label_pc_c550:                                ; preds = %dec_label_pc_c524, %dec_label_pc_c4fa
  %storemerge.in.in.in.reload = load i32*, i32** %storemerge.in.in.in.reg2mem
  %storemerge.in.in = load i32, i32* %storemerge.in.in.in.reload, align 4
  %storemerge.in = add i32 %storemerge.in.in, -4
  %storemerge = trunc i32 %storemerge.in to i8
  store i8 %storemerge, i8* %arg4, align 1
  %rax.0 = zext i32 %storemerge.in to i64
  ret i64 %rax.0, !insn.addr !4981
}

define void @DTV_HardwareDecrypt_ASV5606(i64 %pTuner, i8* %Input188B, i8* %Output188B) local_unnamed_addr {
dec_label_pc_c560:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = add i64 %0, -40, !insn.addr !4982
  %2 = inttoptr i64 %1 to i64*, !insn.addr !4982
  %3 = load i64, i64* %2, align 8, !insn.addr !4982
  %4 = call i64 @__readgsqword(i64 40), !insn.addr !4983
  %5 = icmp eq i64 %3, %4, !insn.addr !4983
  br i1 %5, label %dec_label_pc_c582, label %dec_label_pc_c57d, !insn.addr !4984

dec_label_pc_c57d:                                ; preds = %dec_label_pc_c560
  %6 = call i64 @__stack_chk_fail(), !insn.addr !4985
  br label %dec_label_pc_c582, !insn.addr !4985

dec_label_pc_c582:                                ; preds = %dec_label_pc_c57d, %dec_label_pc_c560
  ret void, !insn.addr !4986
}

define i64 @DTV_HardwareDecrypt_ASV5606.451(i64 %arg1, i64 %arg2, i64 %arg3) local_unnamed_addr {
dec_label_pc_c590:
  %rdi.4.reg2mem = alloca i64, !insn.addr !4987
  %rdi.3.reg2mem = alloca i64, !insn.addr !4987
  %r9.2.reg2mem = alloca i64, !insn.addr !4987
  %rdi.2.reg2mem = alloca i64, !insn.addr !4987
  %r9.1.reg2mem = alloca i64, !insn.addr !4987
  %rdi.1.reg2mem = alloca i64, !insn.addr !4987
  %.pre-phi2.reg2mem = alloca i8, !insn.addr !4987
  %r9.0.reg2mem = alloca i64, !insn.addr !4987
  %rdi.0.reg2mem = alloca i64, !insn.addr !4987
  %.pre-phi.reg2mem = alloca i8, !insn.addr !4987
  %rsi = alloca i64, align 8
  %0 = call i1 @__decompiler_undefined_function_2()
  store i64 %arg2, i64* %rsi, align 8
  %1 = call i64 @mcount(), !insn.addr !4988
  %2 = trunc i64 %arg3 to i8
  %3 = and i8 %2, ptrtoint (i32* @global_var_1 to i8), !insn.addr !4989
  %4 = icmp eq i8 %3, 0, !insn.addr !4989
  store i8 %2, i8* %.pre-phi.reg2mem, !insn.addr !4990
  store i64 %arg3, i64* %rdi.0.reg2mem, !insn.addr !4990
  store i64 188, i64* %r9.0.reg2mem, !insn.addr !4990
  br i1 %4, label %dec_label_pc_c5c0, label %dec_label_pc_c5b6, !insn.addr !4990

dec_label_pc_c5b6:                                ; preds = %dec_label_pc_c590
  %5 = inttoptr i64 %arg3 to i8*, !insn.addr !4991
  store i8 0, i8* %5, align 1, !insn.addr !4991
  %6 = add i64 %arg3, ptrtoint (i32* @global_var_1 to i64), !insn.addr !4992
  %.pre = trunc i64 %6 to i8, !insn.addr !4993
  store i8 %.pre, i8* %.pre-phi.reg2mem, !insn.addr !4994
  store i64 %6, i64* %rdi.0.reg2mem, !insn.addr !4994
  store i64 187, i64* %r9.0.reg2mem, !insn.addr !4994
  br label %dec_label_pc_c5c0, !insn.addr !4994

dec_label_pc_c5c0:                                ; preds = %dec_label_pc_c5b6, %dec_label_pc_c590
  %r9.0.reload = load i64, i64* %r9.0.reg2mem
  %rdi.0.reload = load i64, i64* %rdi.0.reg2mem
  %.pre-phi.reload = load i8, i8* %.pre-phi.reg2mem
  %7 = and i8 %.pre-phi.reload, ptrtoint (i32* @global_var_2 to i8), !insn.addr !4993
  %8 = icmp eq i8 %7, 0, !insn.addr !4993
  store i8 %.pre-phi.reload, i8* %.pre-phi2.reg2mem, !insn.addr !4995
  store i64 %rdi.0.reload, i64* %rdi.1.reg2mem, !insn.addr !4995
  store i64 %r9.0.reload, i64* %r9.1.reg2mem, !insn.addr !4995
  br i1 %8, label %dec_label_pc_c5d1, label %dec_label_pc_c5c6, !insn.addr !4995

dec_label_pc_c5c6:                                ; preds = %dec_label_pc_c5c0
  %9 = inttoptr i64 %rdi.0.reload to i16*, !insn.addr !4996
  store i16 0, i16* %9, align 2, !insn.addr !4996
  %10 = add i64 %rdi.0.reload, ptrtoint (i32* @global_var_2 to i64), !insn.addr !4997
  %11 = add nuw nsw i64 %r9.0.reload, 254, !insn.addr !4998
  %12 = and i64 %11, 191, !insn.addr !4998
  %.pre1 = trunc i64 %10 to i8, !insn.addr !4999
  store i8 %.pre1, i8* %.pre-phi2.reg2mem, !insn.addr !4998
  store i64 %10, i64* %rdi.1.reg2mem, !insn.addr !4998
  store i64 %12, i64* %r9.1.reg2mem, !insn.addr !4998
  br label %dec_label_pc_c5d1, !insn.addr !4998

dec_label_pc_c5d1:                                ; preds = %dec_label_pc_c5c6, %dec_label_pc_c5c0
  %r9.1.reload = load i64, i64* %r9.1.reg2mem
  %rdi.1.reload = load i64, i64* %rdi.1.reg2mem
  %.pre-phi2.reload = load i8, i8* %.pre-phi2.reg2mem
  %13 = and i8 %.pre-phi2.reload, ptrtoint (i16* @global_var_4 to i8), !insn.addr !4999
  %14 = icmp eq i8 %13, 0, !insn.addr !4999
  store i64 %rdi.1.reload, i64* %rdi.2.reg2mem, !insn.addr !5000
  store i64 %r9.1.reload, i64* %r9.2.reg2mem, !insn.addr !5000
  br i1 %14, label %dec_label_pc_c5e1, label %dec_label_pc_c5d7, !insn.addr !5000

dec_label_pc_c5d7:                                ; preds = %dec_label_pc_c5d1
  %15 = inttoptr i64 %rdi.1.reload to i32*, !insn.addr !5001
  store i32 0, i32* %15, align 4, !insn.addr !5001
  %16 = add i64 %rdi.1.reload, ptrtoint (i16* @global_var_4 to i64), !insn.addr !5002
  %17 = add nsw i64 %r9.1.reload, 4294967292, !insn.addr !5003
  %18 = and i64 %17, 4294967295, !insn.addr !5003
  store i64 %16, i64* %rdi.2.reg2mem, !insn.addr !5003
  store i64 %18, i64* %r9.2.reg2mem, !insn.addr !5003
  br label %dec_label_pc_c5e1, !insn.addr !5003

dec_label_pc_c5e1:                                ; preds = %dec_label_pc_c5d7, %dec_label_pc_c5d1
  %r9.2.reload = load i64, i64* %r9.2.reg2mem
  %rdi.2.reload = load i64, i64* %rdi.2.reg2mem
  %19 = trunc i64 %r9.2.reload to i32, !insn.addr !5004
  %20 = lshr i32 %19, ptrtoint (i8** @global_var_3 to i32), !insn.addr !5005
  %21 = zext i32 %20 to i64, !insn.addr !5006
  %22 = inttoptr i64 %rdi.2.reload to i8*, !insn.addr !5007
  call void @__asm_rep_stosq_memset(i8* %22, i64 0, i64 %21), !insn.addr !5007
  %23 = select i1 %0, i64 -8, i64 ptrtoint (i8* @global_var_8 to i64), !insn.addr !5007
  %24 = mul i64 %23, %21, !insn.addr !5007
  %25 = add i64 %24, %rdi.2.reload, !insn.addr !5007
  %26 = trunc i64 %r9.2.reload to i8, !insn.addr !5008
  %27 = and i8 %26, ptrtoint (i16* @global_var_4 to i8), !insn.addr !5008
  %28 = icmp eq i8 %27, 0, !insn.addr !5008
  store i64 %25, i64* %rdi.3.reg2mem, !insn.addr !5009
  br i1 %28, label %dec_label_pc_c5f8, label %dec_label_pc_c5f2, !insn.addr !5009

dec_label_pc_c5f2:                                ; preds = %dec_label_pc_c5e1
  %29 = inttoptr i64 %25 to i32*, !insn.addr !5010
  store i32 0, i32* %29, align 4, !insn.addr !5010
  %30 = add i64 %25, ptrtoint (i16* @global_var_4 to i64), !insn.addr !5011
  store i64 %30, i64* %rdi.3.reg2mem, !insn.addr !5011
  br label %dec_label_pc_c5f8, !insn.addr !5011

dec_label_pc_c5f8:                                ; preds = %dec_label_pc_c5f2, %dec_label_pc_c5e1
  %rdi.3.reload = load i64, i64* %rdi.3.reg2mem
  %31 = and i8 %26, ptrtoint (i32* @global_var_2 to i8), !insn.addr !5012
  %32 = icmp eq i8 %31, 0, !insn.addr !5012
  store i64 %rdi.3.reload, i64* %rdi.4.reg2mem, !insn.addr !5013
  br i1 %32, label %dec_label_pc_c605, label %dec_label_pc_c5fe, !insn.addr !5013

dec_label_pc_c5fe:                                ; preds = %dec_label_pc_c5f8
  %33 = inttoptr i64 %rdi.3.reload to i16*, !insn.addr !5014
  store i16 0, i16* %33, align 2, !insn.addr !5014
  %34 = add i64 %rdi.3.reload, ptrtoint (i32* @global_var_2 to i64), !insn.addr !5015
  store i64 %34, i64* %rdi.4.reg2mem, !insn.addr !5015
  br label %dec_label_pc_c605, !insn.addr !5015

dec_label_pc_c605:                                ; preds = %dec_label_pc_c5fe, %dec_label_pc_c5f8
  %35 = and i8 %26, ptrtoint (i32* @global_var_1 to i8), !insn.addr !5016
  %36 = icmp eq i8 %35, 0, !insn.addr !5016
  br i1 %36, label %dec_label_pc_c60d, label %dec_label_pc_c60b, !insn.addr !5017

dec_label_pc_c60b:                                ; preds = %dec_label_pc_c605
  %rdi.4.reload = load i64, i64* %rdi.4.reg2mem
  %37 = inttoptr i64 %rdi.4.reload to i8*, !insn.addr !5018
  store i8 0, i8* %37, align 1, !insn.addr !5018
  br label %dec_label_pc_c60d, !insn.addr !5018

dec_label_pc_c60d:                                ; preds = %dec_label_pc_c60b, %dec_label_pc_c605
  %38 = bitcast i64* %rsi to i8*
  %39 = load i8, i8* %38, align 8, !insn.addr !5019
  %40 = inttoptr i64 %arg3 to i8*, !insn.addr !5020
  store i8 %39, i8* %40, align 1, !insn.addr !5020
  %41 = load i64, i64* %rsi, align 8, !insn.addr !5021
  %42 = add i64 %41, ptrtoint (i32* @global_var_1 to i64), !insn.addr !5021
  %43 = inttoptr i64 %42 to i8*, !insn.addr !5021
  %44 = load i8, i8* %43, align 1, !insn.addr !5021
  %45 = add i64 %arg3, ptrtoint (i32* @global_var_1 to i64), !insn.addr !5022
  %46 = inttoptr i64 %45 to i8*, !insn.addr !5022
  store i8 %44, i8* %46, align 1, !insn.addr !5022
  %47 = load i64, i64* %rsi, align 8, !insn.addr !5023
  %48 = add i64 %47, ptrtoint (i32* @global_var_2 to i64), !insn.addr !5023
  %49 = inttoptr i64 %48 to i8*, !insn.addr !5023
  %50 = load i8, i8* %49, align 1, !insn.addr !5023
  %51 = add i64 %arg3, ptrtoint (i32* @global_var_2 to i64), !insn.addr !5024
  %52 = inttoptr i64 %51 to i8*, !insn.addr !5024
  store i8 %50, i8* %52, align 1, !insn.addr !5024
  %53 = load i64, i64* %rsi, align 8, !insn.addr !5025
  %54 = add i64 %53, ptrtoint (i8** @global_var_3 to i64), !insn.addr !5025
  %55 = inttoptr i64 %54 to i8*, !insn.addr !5025
  %56 = load i8, i8* %55, align 1, !insn.addr !5025
  %57 = add i64 %arg3, ptrtoint (i8** @global_var_3 to i64), !insn.addr !5026
  %58 = inttoptr i64 %57 to i8*, !insn.addr !5026
  store i8 %56, i8* %58, align 1, !insn.addr !5026
  %59 = load i64, i64* %rsi, align 8, !insn.addr !5027
  ret i64 %59, !insn.addr !5028
}

define void @DTV_HardwareDecrypt_5211Ver01(i64 %pTuner, i8* %Input188B, i8* %Output188B) local_unnamed_addr {
dec_label_pc_c644:
  ret void, !insn.addr !5029
}

define i64 @function_c646(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4, i64 %arg5, i64 %arg6) local_unnamed_addr {
dec_label_pc_c646:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = trunc i64 %arg4 to i32, !insn.addr !5030
  %2 = lshr i32 %1, ptrtoint (i32** @global_var_1c to i32), !insn.addr !5030
  %3 = trunc i64 %arg1 to i32, !insn.addr !5031
  %4 = add i32 %2, %3, !insn.addr !5031
  %5 = and i32 %4, ptrtoint (i8* @global_var_f to i32), !insn.addr !5032
  %6 = sub i32 %5, %2, !insn.addr !5033
  %7 = sext i32 %6 to i64, !insn.addr !5034
  %8 = trunc i64 %arg6 to i8, !insn.addr !5035
  %9 = mul i64 %7, ptrtoint (i32* @global_var_1 to i64), !insn.addr !5035
  %10 = add i64 %arg5, ptrtoint (i8** @global_var_30dc4 to i64), !insn.addr !5035
  %11 = add i64 %10, %9, !insn.addr !5035
  %12 = inttoptr i64 %11 to i8*, !insn.addr !5035
  %13 = load i8, i8* %12, align 1, !insn.addr !5035
  %14 = xor i8 %13, %8, !insn.addr !5035
  %15 = add i64 %arg3, ptrtoint (i16* @global_var_4 to i64), !insn.addr !5036
  %16 = inttoptr i64 %15 to i8*, !insn.addr !5036
  store i8 %14, i8* %16, align 1, !insn.addr !5036
  %17 = add i64 %0, ptrtoint (i32* @global_var_1 to i64), !insn.addr !5037
  ret i64 %17, !insn.addr !5038
}

define i64 @DTV_HardwareDecrypt_5211Ver01.412(i64 %arg1, i64* %arg2, i64 %arg3) local_unnamed_addr {
dec_label_pc_c674:
  %rdi.4.reg2mem = alloca i64, !insn.addr !5039
  %rdi.3.reg2mem = alloca i64, !insn.addr !5039
  %r9.2.reg2mem = alloca i64, !insn.addr !5039
  %rdi.2.reg2mem = alloca i64, !insn.addr !5039
  %r9.1.reg2mem = alloca i64, !insn.addr !5039
  %rdi.1.reg2mem = alloca i64, !insn.addr !5039
  %.pre-phi2.reg2mem = alloca i8, !insn.addr !5039
  %r9.0.reg2mem = alloca i64, !insn.addr !5039
  %rdi.0.reg2mem = alloca i64, !insn.addr !5039
  %.pre-phi.reg2mem = alloca i8, !insn.addr !5039
  %rsi = alloca i64, align 8
  %0 = call i1 @__decompiler_undefined_function_2()
  %1 = ptrtoint i64* %arg2 to i64
  store i64 %1, i64* %rsi, align 8
  %2 = call i64 @mcount(), !insn.addr !5040
  %3 = trunc i64 %arg3 to i8
  %4 = and i8 %3, ptrtoint (i32* @global_var_1 to i8), !insn.addr !5041
  %5 = icmp eq i8 %4, 0, !insn.addr !5041
  store i8 %3, i8* %.pre-phi.reg2mem, !insn.addr !5042
  store i64 %arg3, i64* %rdi.0.reg2mem, !insn.addr !5042
  store i64 188, i64* %r9.0.reg2mem, !insn.addr !5042
  br i1 %5, label %dec_label_pc_c6a2, label %dec_label_pc_c698, !insn.addr !5042

dec_label_pc_c698:                                ; preds = %dec_label_pc_c674
  %6 = inttoptr i64 %arg3 to i8*, !insn.addr !5043
  store i8 0, i8* %6, align 1, !insn.addr !5043
  %7 = add i64 %arg3, ptrtoint (i32* @global_var_1 to i64), !insn.addr !5044
  %.pre = trunc i64 %7 to i8, !insn.addr !5045
  store i8 %.pre, i8* %.pre-phi.reg2mem, !insn.addr !5046
  store i64 %7, i64* %rdi.0.reg2mem, !insn.addr !5046
  store i64 187, i64* %r9.0.reg2mem, !insn.addr !5046
  br label %dec_label_pc_c6a2, !insn.addr !5046

dec_label_pc_c6a2:                                ; preds = %dec_label_pc_c698, %dec_label_pc_c674
  %r9.0.reload = load i64, i64* %r9.0.reg2mem
  %rdi.0.reload = load i64, i64* %rdi.0.reg2mem
  %.pre-phi.reload = load i8, i8* %.pre-phi.reg2mem
  %8 = and i8 %.pre-phi.reload, ptrtoint (i32* @global_var_2 to i8), !insn.addr !5045
  %9 = icmp eq i8 %8, 0, !insn.addr !5045
  store i8 %.pre-phi.reload, i8* %.pre-phi2.reg2mem, !insn.addr !5047
  store i64 %rdi.0.reload, i64* %rdi.1.reg2mem, !insn.addr !5047
  store i64 %r9.0.reload, i64* %r9.1.reg2mem, !insn.addr !5047
  br i1 %9, label %dec_label_pc_c6b3, label %dec_label_pc_c6a8, !insn.addr !5047

dec_label_pc_c6a8:                                ; preds = %dec_label_pc_c6a2
  %10 = inttoptr i64 %rdi.0.reload to i16*, !insn.addr !5048
  store i16 0, i16* %10, align 2, !insn.addr !5048
  %11 = add i64 %rdi.0.reload, ptrtoint (i32* @global_var_2 to i64), !insn.addr !5049
  %12 = add nuw nsw i64 %r9.0.reload, 254, !insn.addr !5050
  %13 = and i64 %12, 191, !insn.addr !5050
  %.pre1 = trunc i64 %11 to i8, !insn.addr !5051
  store i8 %.pre1, i8* %.pre-phi2.reg2mem, !insn.addr !5050
  store i64 %11, i64* %rdi.1.reg2mem, !insn.addr !5050
  store i64 %13, i64* %r9.1.reg2mem, !insn.addr !5050
  br label %dec_label_pc_c6b3, !insn.addr !5050

dec_label_pc_c6b3:                                ; preds = %dec_label_pc_c6a8, %dec_label_pc_c6a2
  %r9.1.reload = load i64, i64* %r9.1.reg2mem
  %rdi.1.reload = load i64, i64* %rdi.1.reg2mem
  %.pre-phi2.reload = load i8, i8* %.pre-phi2.reg2mem
  %14 = and i8 %.pre-phi2.reload, ptrtoint (i16* @global_var_4 to i8), !insn.addr !5051
  %15 = icmp eq i8 %14, 0, !insn.addr !5051
  store i64 %rdi.1.reload, i64* %rdi.2.reg2mem, !insn.addr !5052
  store i64 %r9.1.reload, i64* %r9.2.reg2mem, !insn.addr !5052
  br i1 %15, label %dec_label_pc_c6c3, label %dec_label_pc_c6b9, !insn.addr !5052

dec_label_pc_c6b9:                                ; preds = %dec_label_pc_c6b3
  %16 = inttoptr i64 %rdi.1.reload to i32*, !insn.addr !5053
  store i32 0, i32* %16, align 4, !insn.addr !5053
  %17 = add i64 %rdi.1.reload, ptrtoint (i16* @global_var_4 to i64), !insn.addr !5054
  %18 = add nsw i64 %r9.1.reload, 4294967292, !insn.addr !5055
  %19 = and i64 %18, 4294967295, !insn.addr !5055
  store i64 %17, i64* %rdi.2.reg2mem, !insn.addr !5055
  store i64 %19, i64* %r9.2.reg2mem, !insn.addr !5055
  br label %dec_label_pc_c6c3, !insn.addr !5055

dec_label_pc_c6c3:                                ; preds = %dec_label_pc_c6b9, %dec_label_pc_c6b3
  %r9.2.reload = load i64, i64* %r9.2.reg2mem
  %rdi.2.reload = load i64, i64* %rdi.2.reg2mem
  %20 = trunc i64 %r9.2.reload to i32, !insn.addr !5056
  %21 = lshr i32 %20, ptrtoint (i8** @global_var_3 to i32), !insn.addr !5057
  %22 = zext i32 %21 to i64, !insn.addr !5058
  %23 = inttoptr i64 %rdi.2.reload to i8*, !insn.addr !5059
  call void @__asm_rep_stosq_memset(i8* %23, i64 0, i64 %22), !insn.addr !5059
  %24 = select i1 %0, i64 -8, i64 ptrtoint (i8* @global_var_8 to i64), !insn.addr !5059
  %25 = mul i64 %24, %22, !insn.addr !5059
  %26 = add i64 %25, %rdi.2.reload, !insn.addr !5059
  %27 = trunc i64 %r9.2.reload to i8, !insn.addr !5060
  %28 = and i8 %27, ptrtoint (i16* @global_var_4 to i8), !insn.addr !5060
  %29 = icmp eq i8 %28, 0, !insn.addr !5060
  store i64 %26, i64* %rdi.3.reg2mem, !insn.addr !5061
  br i1 %29, label %dec_label_pc_c6da, label %dec_label_pc_c6d4, !insn.addr !5061

dec_label_pc_c6d4:                                ; preds = %dec_label_pc_c6c3
  %30 = inttoptr i64 %26 to i32*, !insn.addr !5062
  store i32 0, i32* %30, align 4, !insn.addr !5062
  %31 = add i64 %26, ptrtoint (i16* @global_var_4 to i64), !insn.addr !5063
  store i64 %31, i64* %rdi.3.reg2mem, !insn.addr !5063
  br label %dec_label_pc_c6da, !insn.addr !5063

dec_label_pc_c6da:                                ; preds = %dec_label_pc_c6d4, %dec_label_pc_c6c3
  %rdi.3.reload = load i64, i64* %rdi.3.reg2mem
  %32 = and i8 %27, ptrtoint (i32* @global_var_2 to i8), !insn.addr !5064
  %33 = icmp eq i8 %32, 0, !insn.addr !5064
  store i64 %rdi.3.reload, i64* %rdi.4.reg2mem, !insn.addr !5065
  br i1 %33, label %dec_label_pc_c6e7, label %dec_label_pc_c6e0, !insn.addr !5065

dec_label_pc_c6e0:                                ; preds = %dec_label_pc_c6da
  %34 = inttoptr i64 %rdi.3.reload to i16*, !insn.addr !5066
  store i16 0, i16* %34, align 2, !insn.addr !5066
  %35 = add i64 %rdi.3.reload, ptrtoint (i32* @global_var_2 to i64), !insn.addr !5067
  store i64 %35, i64* %rdi.4.reg2mem, !insn.addr !5067
  br label %dec_label_pc_c6e7, !insn.addr !5067

dec_label_pc_c6e7:                                ; preds = %dec_label_pc_c6e0, %dec_label_pc_c6da
  %36 = and i8 %27, ptrtoint (i32* @global_var_1 to i8), !insn.addr !5068
  %37 = icmp eq i8 %36, 0, !insn.addr !5068
  br i1 %37, label %dec_label_pc_c6ef, label %dec_label_pc_c6ed, !insn.addr !5069

dec_label_pc_c6ed:                                ; preds = %dec_label_pc_c6e7
  %rdi.4.reload = load i64, i64* %rdi.4.reg2mem
  %38 = inttoptr i64 %rdi.4.reload to i8*, !insn.addr !5070
  store i8 0, i8* %38, align 1, !insn.addr !5070
  br label %dec_label_pc_c6ef, !insn.addr !5070

dec_label_pc_c6ef:                                ; preds = %dec_label_pc_c6ed, %dec_label_pc_c6e7
  %39 = bitcast i64* %rsi to i8*
  %40 = load i8, i8* %39, align 8, !insn.addr !5071
  %41 = inttoptr i64 %arg3 to i8*, !insn.addr !5072
  store i8 %40, i8* %41, align 1, !insn.addr !5072
  %42 = load i64, i64* %rsi, align 8, !insn.addr !5073
  %43 = add i64 %42, ptrtoint (i32* @global_var_1 to i64), !insn.addr !5073
  %44 = inttoptr i64 %43 to i8*, !insn.addr !5073
  %45 = load i8, i8* %44, align 1, !insn.addr !5073
  %46 = zext i8 %45 to i64, !insn.addr !5073
  ret i64 %46, !insn.addr !5073
}

define void @DTV_HardwareDecrypt_Ver01(i64 %pTuner, i8* %Input188B, i8* %Output188B) local_unnamed_addr {
dec_label_pc_c6f8:
  %rsi.0.reg2mem = alloca i64, !insn.addr !5074
  %rdx.0.reg2mem = alloca i64, !insn.addr !5074
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = call i64 @__decompiler_undefined_function_0()
  %2 = ptrtoint i8* %Output188B to i64
  %3 = ptrtoint i8* %Input188B to i64
  %4 = trunc i64 %1 to i8, !insn.addr !5074
  %5 = add i64 %2, ptrtoint (i32* @global_var_1 to i64), !insn.addr !5074
  %6 = inttoptr i64 %5 to i8*, !insn.addr !5074
  store i8 %4, i8* %6, align 1, !insn.addr !5074
  %7 = add i64 %3, ptrtoint (i32* @global_var_2 to i64), !insn.addr !5075
  %8 = inttoptr i64 %7 to i8*, !insn.addr !5075
  %9 = load i8, i8* %8, align 1, !insn.addr !5075
  %10 = add i64 %2, ptrtoint (i32* @global_var_2 to i64), !insn.addr !5076
  %11 = inttoptr i64 %10 to i8*, !insn.addr !5076
  store i8 %9, i8* %11, align 1, !insn.addr !5076
  %12 = add i64 %3, ptrtoint (i8** @global_var_3 to i64), !insn.addr !5077
  %13 = inttoptr i64 %12 to i8*, !insn.addr !5077
  %14 = load i8, i8* %13, align 1, !insn.addr !5077
  %15 = add i64 %2, ptrtoint (i8** @global_var_3 to i64), !insn.addr !5078
  %16 = inttoptr i64 %15 to i8*, !insn.addr !5078
  store i8 %14, i8* %16, align 1, !insn.addr !5078
  %17 = trunc i64 %0 to i8, !insn.addr !5079
  %18 = add nsw i64 %3, 183
  store i64 %2, i64* %rdx.0.reg2mem, !insn.addr !5080
  store i64 %3, i64* %rsi.0.reg2mem, !insn.addr !5080
  br label %dec_label_pc_c710, !insn.addr !5080

dec_label_pc_c710:                                ; preds = %dec_label_pc_c710, %dec_label_pc_c6f8
  %rsi.0.reload = load i64, i64* %rsi.0.reg2mem
  %rdx.0.reload = load i64, i64* %rdx.0.reg2mem
  %19 = add i64 %rsi.0.reload, 4, !insn.addr !5079
  %20 = inttoptr i64 %19 to i8*, !insn.addr !5079
  %21 = load i8, i8* %20, align 1, !insn.addr !5079
  %22 = xor i8 %21, %17, !insn.addr !5079
  %23 = add i64 %rdx.0.reload, 4, !insn.addr !5081
  %24 = inttoptr i64 %23 to i8*, !insn.addr !5081
  store i8 %22, i8* %24, align 1, !insn.addr !5081
  %25 = add i64 %rsi.0.reload, 1, !insn.addr !5082
  %26 = add i64 %rdx.0.reload, 1, !insn.addr !5083
  %27 = icmp eq i64 %rsi.0.reload, %18, !insn.addr !5084
  %28 = icmp eq i1 %27, false, !insn.addr !5085
  store i64 %26, i64* %rdx.0.reg2mem, !insn.addr !5085
  store i64 %25, i64* %rsi.0.reg2mem, !insn.addr !5085
  br i1 %28, label %dec_label_pc_c710, label %dec_label_pc_c726, !insn.addr !5085

dec_label_pc_c726:                                ; preds = %dec_label_pc_c710
  ret void, !insn.addr !5086
}

define i64 @DTV_HardwareDecrypt_Ver01.395(i64 %arg1, i64* %arg2, i64 %arg3) local_unnamed_addr {
dec_label_pc_c728:
  %rdi.4.reg2mem = alloca i64, !insn.addr !5087
  %rdi.3.reg2mem = alloca i64, !insn.addr !5087
  %r10.2.reg2mem = alloca i64, !insn.addr !5087
  %rdi.2.reg2mem = alloca i64, !insn.addr !5087
  %r10.1.reg2mem = alloca i64, !insn.addr !5087
  %rdi.1.reg2mem = alloca i64, !insn.addr !5087
  %.pre-phi2.reg2mem = alloca i8, !insn.addr !5087
  %r10.0.reg2mem = alloca i64, !insn.addr !5087
  %rdi.0.reg2mem = alloca i64, !insn.addr !5087
  %.pre-phi.reg2mem = alloca i8, !insn.addr !5087
  %rsi = alloca i64, align 8
  %0 = call i1 @__decompiler_undefined_function_2()
  %1 = ptrtoint i64* %arg2 to i64
  store i64 %1, i64* %rsi, align 8
  %2 = call i64 @mcount(), !insn.addr !5088
  %3 = trunc i64 %arg3 to i8
  %4 = and i8 %3, ptrtoint (i32* @global_var_1 to i8), !insn.addr !5089
  %5 = icmp eq i8 %4, 0, !insn.addr !5089
  store i8 %3, i8* %.pre-phi.reg2mem, !insn.addr !5090
  store i64 %arg3, i64* %rdi.0.reg2mem, !insn.addr !5090
  store i64 188, i64* %r10.0.reg2mem, !insn.addr !5090
  br i1 %5, label %dec_label_pc_c75d, label %dec_label_pc_c753, !insn.addr !5090

dec_label_pc_c753:                                ; preds = %dec_label_pc_c728
  %6 = inttoptr i64 %arg3 to i8*, !insn.addr !5091
  store i8 0, i8* %6, align 1, !insn.addr !5091
  %7 = add i64 %arg3, ptrtoint (i32* @global_var_1 to i64), !insn.addr !5092
  %.pre = trunc i64 %7 to i8, !insn.addr !5093
  store i8 %.pre, i8* %.pre-phi.reg2mem, !insn.addr !5094
  store i64 %7, i64* %rdi.0.reg2mem, !insn.addr !5094
  store i64 187, i64* %r10.0.reg2mem, !insn.addr !5094
  br label %dec_label_pc_c75d, !insn.addr !5094

dec_label_pc_c75d:                                ; preds = %dec_label_pc_c753, %dec_label_pc_c728
  %r10.0.reload = load i64, i64* %r10.0.reg2mem
  %rdi.0.reload = load i64, i64* %rdi.0.reg2mem
  %.pre-phi.reload = load i8, i8* %.pre-phi.reg2mem
  %8 = and i8 %.pre-phi.reload, ptrtoint (i32* @global_var_2 to i8), !insn.addr !5093
  %9 = icmp eq i8 %8, 0, !insn.addr !5093
  store i8 %.pre-phi.reload, i8* %.pre-phi2.reg2mem, !insn.addr !5095
  store i64 %rdi.0.reload, i64* %rdi.1.reg2mem, !insn.addr !5095
  store i64 %r10.0.reload, i64* %r10.1.reg2mem, !insn.addr !5095
  br i1 %9, label %dec_label_pc_c76e, label %dec_label_pc_c763, !insn.addr !5095

dec_label_pc_c763:                                ; preds = %dec_label_pc_c75d
  %10 = inttoptr i64 %rdi.0.reload to i16*, !insn.addr !5096
  store i16 0, i16* %10, align 2, !insn.addr !5096
  %11 = add i64 %rdi.0.reload, ptrtoint (i32* @global_var_2 to i64), !insn.addr !5097
  %12 = add nuw nsw i64 %r10.0.reload, 254, !insn.addr !5098
  %13 = and i64 %12, 191, !insn.addr !5098
  %.pre1 = trunc i64 %11 to i8, !insn.addr !5099
  store i8 %.pre1, i8* %.pre-phi2.reg2mem, !insn.addr !5098
  store i64 %11, i64* %rdi.1.reg2mem, !insn.addr !5098
  store i64 %13, i64* %r10.1.reg2mem, !insn.addr !5098
  br label %dec_label_pc_c76e, !insn.addr !5098

dec_label_pc_c76e:                                ; preds = %dec_label_pc_c763, %dec_label_pc_c75d
  %r10.1.reload = load i64, i64* %r10.1.reg2mem
  %rdi.1.reload = load i64, i64* %rdi.1.reg2mem
  %.pre-phi2.reload = load i8, i8* %.pre-phi2.reg2mem
  %14 = and i8 %.pre-phi2.reload, ptrtoint (i16* @global_var_4 to i8), !insn.addr !5099
  %15 = icmp eq i8 %14, 0, !insn.addr !5099
  store i64 %rdi.1.reload, i64* %rdi.2.reg2mem, !insn.addr !5100
  store i64 %r10.1.reload, i64* %r10.2.reg2mem, !insn.addr !5100
  br i1 %15, label %dec_label_pc_c77e, label %dec_label_pc_c774, !insn.addr !5100

dec_label_pc_c774:                                ; preds = %dec_label_pc_c76e
  %16 = inttoptr i64 %rdi.1.reload to i32*, !insn.addr !5101
  store i32 0, i32* %16, align 4, !insn.addr !5101
  %17 = add i64 %rdi.1.reload, ptrtoint (i16* @global_var_4 to i64), !insn.addr !5102
  %18 = add nsw i64 %r10.1.reload, 4294967292, !insn.addr !5103
  %19 = and i64 %18, 4294967295, !insn.addr !5103
  store i64 %17, i64* %rdi.2.reg2mem, !insn.addr !5103
  store i64 %19, i64* %r10.2.reg2mem, !insn.addr !5103
  br label %dec_label_pc_c77e, !insn.addr !5103

dec_label_pc_c77e:                                ; preds = %dec_label_pc_c774, %dec_label_pc_c76e
  %r10.2.reload = load i64, i64* %r10.2.reg2mem
  %rdi.2.reload = load i64, i64* %rdi.2.reg2mem
  %20 = trunc i64 %r10.2.reload to i32, !insn.addr !5104
  %21 = lshr i32 %20, ptrtoint (i8** @global_var_3 to i32), !insn.addr !5105
  %22 = zext i32 %21 to i64, !insn.addr !5106
  %23 = inttoptr i64 %rdi.2.reload to i8*, !insn.addr !5107
  call void @__asm_rep_stosq_memset(i8* %23, i64 0, i64 %22), !insn.addr !5107
  %24 = select i1 %0, i64 -8, i64 ptrtoint (i8* @global_var_8 to i64), !insn.addr !5107
  %25 = mul i64 %24, %22, !insn.addr !5107
  %26 = add i64 %25, %rdi.2.reload, !insn.addr !5107
  %27 = trunc i64 %r10.2.reload to i8, !insn.addr !5108
  %28 = and i8 %27, ptrtoint (i16* @global_var_4 to i8), !insn.addr !5108
  %29 = icmp eq i8 %28, 0, !insn.addr !5108
  store i64 %26, i64* %rdi.3.reg2mem, !insn.addr !5109
  br i1 %29, label %dec_label_pc_c795, label %dec_label_pc_c78f, !insn.addr !5109

dec_label_pc_c78f:                                ; preds = %dec_label_pc_c77e
  %30 = inttoptr i64 %26 to i32*, !insn.addr !5110
  store i32 0, i32* %30, align 4, !insn.addr !5110
  %31 = add i64 %26, ptrtoint (i16* @global_var_4 to i64), !insn.addr !5111
  store i64 %31, i64* %rdi.3.reg2mem, !insn.addr !5111
  br label %dec_label_pc_c795, !insn.addr !5111

dec_label_pc_c795:                                ; preds = %dec_label_pc_c78f, %dec_label_pc_c77e
  %rdi.3.reload = load i64, i64* %rdi.3.reg2mem
  %32 = and i8 %27, ptrtoint (i32* @global_var_2 to i8), !insn.addr !5112
  %33 = icmp eq i8 %32, 0, !insn.addr !5112
  store i64 %rdi.3.reload, i64* %rdi.4.reg2mem, !insn.addr !5113
  br i1 %33, label %dec_label_pc_c7a2, label %dec_label_pc_c79b, !insn.addr !5113

dec_label_pc_c79b:                                ; preds = %dec_label_pc_c795
  %34 = inttoptr i64 %rdi.3.reload to i16*, !insn.addr !5114
  store i16 0, i16* %34, align 2, !insn.addr !5114
  %35 = add i64 %rdi.3.reload, ptrtoint (i32* @global_var_2 to i64), !insn.addr !5115
  store i64 %35, i64* %rdi.4.reg2mem, !insn.addr !5115
  br label %dec_label_pc_c7a2, !insn.addr !5115

dec_label_pc_c7a2:                                ; preds = %dec_label_pc_c79b, %dec_label_pc_c795
  %36 = and i8 %27, ptrtoint (i32* @global_var_1 to i8), !insn.addr !5116
  %37 = icmp eq i8 %36, 0, !insn.addr !5116
  br i1 %37, label %dec_label_pc_c7aa, label %dec_label_pc_c7a8, !insn.addr !5117

dec_label_pc_c7a8:                                ; preds = %dec_label_pc_c7a2
  %rdi.4.reload = load i64, i64* %rdi.4.reg2mem
  %38 = inttoptr i64 %rdi.4.reload to i8*, !insn.addr !5118
  store i8 0, i8* %38, align 1, !insn.addr !5118
  br label %dec_label_pc_c7aa, !insn.addr !5118

dec_label_pc_c7aa:                                ; preds = %dec_label_pc_c7a8, %dec_label_pc_c7a2
  %39 = bitcast i64* %rsi to i8*
  %40 = load i8, i8* %39, align 8, !insn.addr !5119
  %41 = inttoptr i64 %arg3 to i8*, !insn.addr !5120
  store i8 %40, i8* %41, align 1, !insn.addr !5120
  %42 = load i64, i64* %rsi, align 8, !insn.addr !5121
  %43 = add i64 %42, ptrtoint (i32* @global_var_1 to i64), !insn.addr !5121
  %44 = inttoptr i64 %43 to i8*, !insn.addr !5121
  %45 = load i8, i8* %44, align 1, !insn.addr !5121
  %46 = add i64 %arg3, ptrtoint (i32* @global_var_1 to i64), !insn.addr !5122
  %47 = inttoptr i64 %46 to i8*, !insn.addr !5122
  store i8 %45, i8* %47, align 1, !insn.addr !5122
  %48 = load i64, i64* %rsi, align 8, !insn.addr !5123
  %49 = add i64 %48, ptrtoint (i32* @global_var_2 to i64), !insn.addr !5123
  %50 = inttoptr i64 %49 to i8*, !insn.addr !5123
  %51 = load i8, i8* %50, align 1, !insn.addr !5123
  %52 = add i64 %arg3, ptrtoint (i32* @global_var_2 to i64), !insn.addr !5124
  %53 = inttoptr i64 %52 to i8*, !insn.addr !5124
  store i8 %51, i8* %53, align 1, !insn.addr !5124
  %54 = load i64, i64* %rsi, align 8, !insn.addr !5125
  %55 = add i64 %54, ptrtoint (i8** @global_var_3 to i64), !insn.addr !5125
  %56 = inttoptr i64 %55 to i8*, !insn.addr !5125
  %57 = load i8, i8* %56, align 1, !insn.addr !5125
  %58 = add i64 %arg3, ptrtoint (i8** @global_var_3 to i64), !insn.addr !5126
  %59 = inttoptr i64 %58 to i8*, !insn.addr !5126
  store i8 %57, i8* %59, align 1, !insn.addr !5126
  %60 = load i64, i64* %rsi, align 8, !insn.addr !5127
  ret i64 %60, !insn.addr !5127
}

define i64 @function_c7d6(i64 %arg1) local_unnamed_addr {
dec_label_pc_c7d6:
  %0 = call i64 @__decompiler_undefined_function_0()
  ret i64 %0, !insn.addr !5128
}

define void @DTV_HardwareDecrypt(i64 %pTuner, i8* %Input188B, i8* %Output188B) local_unnamed_addr {
dec_label_pc_c7da:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = call i64 @__decompiler_undefined_function_0()
  %2 = call i64 @__decompiler_undefined_function_0()
  %3 = ptrtoint i8* %Output188B to i64
  %4 = call i64 @__asm_iretd(), !insn.addr !5129
  %5 = and i64 %pTuner, sext (i32 ptrtoint (i8** @global_var_1f to i32) to i64), !insn.addr !5130
  %6 = sub i64 %5, %2, !insn.addr !5131
  %sext = mul i64 %6, 4294967296
  %7 = sdiv i64 %sext, 4294967296, !insn.addr !5132
  %8 = trunc i64 %0 to i8, !insn.addr !5133
  %9 = add i64 %1, 664, !insn.addr !5133
  %10 = add i64 %9, %7, !insn.addr !5133
  %11 = inttoptr i64 %10 to i8*, !insn.addr !5133
  %12 = load i8, i8* %11, align 1, !insn.addr !5133
  %13 = xor i8 %12, %8, !insn.addr !5133
  %14 = add i64 %3, ptrtoint (i16* @global_var_4 to i64), !insn.addr !5134
  %15 = inttoptr i64 %14 to i8*, !insn.addr !5134
  store i8 %13, i8* %15, align 1, !insn.addr !5134
  ret void, !insn.addr !5135
}

define i64 @DTV_HardwareDecrypt.598(i64 %arg1, i64* %arg2, i64 %arg3) local_unnamed_addr {
dec_label_pc_c80a:
  %rdi.4.reg2mem = alloca i64, !insn.addr !5136
  %rdi.3.reg2mem = alloca i64, !insn.addr !5136
  %r9.2.reg2mem = alloca i64, !insn.addr !5136
  %rdi.2.reg2mem = alloca i64, !insn.addr !5136
  %r9.1.reg2mem = alloca i64, !insn.addr !5136
  %rdi.1.reg2mem = alloca i64, !insn.addr !5136
  %.pre-phi2.reg2mem = alloca i8, !insn.addr !5136
  %r9.0.reg2mem = alloca i64, !insn.addr !5136
  %rdi.0.reg2mem = alloca i64, !insn.addr !5136
  %.pre-phi.reg2mem = alloca i8, !insn.addr !5136
  %rsi = alloca i64, align 8
  %0 = call i1 @__decompiler_undefined_function_2()
  %1 = ptrtoint i64* %arg2 to i64
  store i64 %1, i64* %rsi, align 8
  %2 = call i64 @mcount(), !insn.addr !5137
  %3 = trunc i64 %arg3 to i8
  %4 = and i8 %3, ptrtoint (i32* @global_var_1 to i8), !insn.addr !5138
  %5 = icmp eq i8 %4, 0, !insn.addr !5138
  store i8 %3, i8* %.pre-phi.reg2mem, !insn.addr !5139
  store i64 %arg3, i64* %rdi.0.reg2mem, !insn.addr !5139
  store i64 188, i64* %r9.0.reg2mem, !insn.addr !5139
  br i1 %5, label %dec_label_pc_c83a, label %dec_label_pc_c830, !insn.addr !5139

dec_label_pc_c830:                                ; preds = %dec_label_pc_c80a
  %6 = inttoptr i64 %arg3 to i8*, !insn.addr !5140
  store i8 0, i8* %6, align 1, !insn.addr !5140
  %7 = add i64 %arg3, ptrtoint (i32* @global_var_1 to i64), !insn.addr !5141
  %.pre = trunc i64 %7 to i8, !insn.addr !5142
  store i8 %.pre, i8* %.pre-phi.reg2mem, !insn.addr !5143
  store i64 %7, i64* %rdi.0.reg2mem, !insn.addr !5143
  store i64 187, i64* %r9.0.reg2mem, !insn.addr !5143
  br label %dec_label_pc_c83a, !insn.addr !5143

dec_label_pc_c83a:                                ; preds = %dec_label_pc_c830, %dec_label_pc_c80a
  %r9.0.reload = load i64, i64* %r9.0.reg2mem
  %rdi.0.reload = load i64, i64* %rdi.0.reg2mem
  %.pre-phi.reload = load i8, i8* %.pre-phi.reg2mem
  %8 = and i8 %.pre-phi.reload, ptrtoint (i32* @global_var_2 to i8), !insn.addr !5142
  %9 = icmp eq i8 %8, 0, !insn.addr !5142
  store i8 %.pre-phi.reload, i8* %.pre-phi2.reg2mem, !insn.addr !5144
  store i64 %rdi.0.reload, i64* %rdi.1.reg2mem, !insn.addr !5144
  store i64 %r9.0.reload, i64* %r9.1.reg2mem, !insn.addr !5144
  br i1 %9, label %dec_label_pc_c84b, label %dec_label_pc_c840, !insn.addr !5144

dec_label_pc_c840:                                ; preds = %dec_label_pc_c83a
  %10 = inttoptr i64 %rdi.0.reload to i16*, !insn.addr !5145
  store i16 0, i16* %10, align 2, !insn.addr !5145
  %11 = add i64 %rdi.0.reload, ptrtoint (i32* @global_var_2 to i64), !insn.addr !5146
  %12 = add nuw nsw i64 %r9.0.reload, 254, !insn.addr !5147
  %13 = and i64 %12, 191, !insn.addr !5147
  %.pre1 = trunc i64 %11 to i8, !insn.addr !5148
  store i8 %.pre1, i8* %.pre-phi2.reg2mem, !insn.addr !5147
  store i64 %11, i64* %rdi.1.reg2mem, !insn.addr !5147
  store i64 %13, i64* %r9.1.reg2mem, !insn.addr !5147
  br label %dec_label_pc_c84b, !insn.addr !5147

dec_label_pc_c84b:                                ; preds = %dec_label_pc_c840, %dec_label_pc_c83a
  %r9.1.reload = load i64, i64* %r9.1.reg2mem
  %rdi.1.reload = load i64, i64* %rdi.1.reg2mem
  %.pre-phi2.reload = load i8, i8* %.pre-phi2.reg2mem
  %14 = and i8 %.pre-phi2.reload, ptrtoint (i16* @global_var_4 to i8), !insn.addr !5148
  %15 = icmp eq i8 %14, 0, !insn.addr !5148
  store i64 %rdi.1.reload, i64* %rdi.2.reg2mem, !insn.addr !5149
  store i64 %r9.1.reload, i64* %r9.2.reg2mem, !insn.addr !5149
  br i1 %15, label %dec_label_pc_c85b, label %dec_label_pc_c851, !insn.addr !5149

dec_label_pc_c851:                                ; preds = %dec_label_pc_c84b
  %16 = inttoptr i64 %rdi.1.reload to i32*, !insn.addr !5150
  store i32 0, i32* %16, align 4, !insn.addr !5150
  %17 = add i64 %rdi.1.reload, ptrtoint (i16* @global_var_4 to i64), !insn.addr !5151
  %18 = add nsw i64 %r9.1.reload, 4294967292, !insn.addr !5152
  %19 = and i64 %18, 4294967295, !insn.addr !5152
  store i64 %17, i64* %rdi.2.reg2mem, !insn.addr !5152
  store i64 %19, i64* %r9.2.reg2mem, !insn.addr !5152
  br label %dec_label_pc_c85b, !insn.addr !5152

dec_label_pc_c85b:                                ; preds = %dec_label_pc_c851, %dec_label_pc_c84b
  %r9.2.reload = load i64, i64* %r9.2.reg2mem
  %rdi.2.reload = load i64, i64* %rdi.2.reg2mem
  %20 = trunc i64 %r9.2.reload to i32, !insn.addr !5153
  %21 = lshr i32 %20, ptrtoint (i8** @global_var_3 to i32), !insn.addr !5154
  %22 = zext i32 %21 to i64, !insn.addr !5155
  %23 = inttoptr i64 %rdi.2.reload to i8*, !insn.addr !5156
  call void @__asm_rep_stosq_memset(i8* %23, i64 0, i64 %22), !insn.addr !5156
  %24 = select i1 %0, i64 -8, i64 ptrtoint (i8* @global_var_8 to i64), !insn.addr !5156
  %25 = mul i64 %24, %22, !insn.addr !5156
  %26 = add i64 %25, %rdi.2.reload, !insn.addr !5156
  %27 = trunc i64 %r9.2.reload to i8, !insn.addr !5157
  %28 = and i8 %27, ptrtoint (i16* @global_var_4 to i8), !insn.addr !5157
  %29 = icmp eq i8 %28, 0, !insn.addr !5157
  store i64 %26, i64* %rdi.3.reg2mem, !insn.addr !5158
  br i1 %29, label %dec_label_pc_c872, label %dec_label_pc_c86c, !insn.addr !5158

dec_label_pc_c86c:                                ; preds = %dec_label_pc_c85b
  %30 = inttoptr i64 %26 to i32*, !insn.addr !5159
  store i32 0, i32* %30, align 4, !insn.addr !5159
  %31 = add i64 %26, ptrtoint (i16* @global_var_4 to i64), !insn.addr !5160
  store i64 %31, i64* %rdi.3.reg2mem, !insn.addr !5160
  br label %dec_label_pc_c872, !insn.addr !5160

dec_label_pc_c872:                                ; preds = %dec_label_pc_c86c, %dec_label_pc_c85b
  %rdi.3.reload = load i64, i64* %rdi.3.reg2mem
  %32 = and i8 %27, ptrtoint (i32* @global_var_2 to i8), !insn.addr !5161
  %33 = icmp eq i8 %32, 0, !insn.addr !5161
  store i64 %rdi.3.reload, i64* %rdi.4.reg2mem, !insn.addr !5162
  br i1 %33, label %dec_label_pc_c87f, label %dec_label_pc_c878, !insn.addr !5162

dec_label_pc_c878:                                ; preds = %dec_label_pc_c872
  %34 = inttoptr i64 %rdi.3.reload to i16*, !insn.addr !5163
  store i16 0, i16* %34, align 2, !insn.addr !5163
  %35 = add i64 %rdi.3.reload, ptrtoint (i32* @global_var_2 to i64), !insn.addr !5164
  store i64 %35, i64* %rdi.4.reg2mem, !insn.addr !5164
  br label %dec_label_pc_c87f, !insn.addr !5164

dec_label_pc_c87f:                                ; preds = %dec_label_pc_c878, %dec_label_pc_c872
  %36 = and i8 %27, ptrtoint (i32* @global_var_1 to i8), !insn.addr !5165
  %37 = icmp eq i8 %36, 0, !insn.addr !5165
  br i1 %37, label %dec_label_pc_c887, label %dec_label_pc_c885, !insn.addr !5166

dec_label_pc_c885:                                ; preds = %dec_label_pc_c87f
  %rdi.4.reload = load i64, i64* %rdi.4.reg2mem
  %38 = inttoptr i64 %rdi.4.reload to i8*, !insn.addr !5167
  store i8 0, i8* %38, align 1, !insn.addr !5167
  br label %dec_label_pc_c887, !insn.addr !5167

dec_label_pc_c887:                                ; preds = %dec_label_pc_c885, %dec_label_pc_c87f
  %39 = bitcast i64* %rsi to i8*
  %40 = load i8, i8* %39, align 8, !insn.addr !5168
  %41 = inttoptr i64 %arg3 to i8*, !insn.addr !5169
  store i8 %40, i8* %41, align 1, !insn.addr !5169
  %42 = load i64, i64* %rsi, align 8, !insn.addr !5170
  %43 = add i64 %42, ptrtoint (i32* @global_var_1 to i64), !insn.addr !5170
  %44 = inttoptr i64 %43 to i8*, !insn.addr !5170
  %45 = load i8, i8* %44, align 1, !insn.addr !5170
  %46 = add i64 %arg3, ptrtoint (i32* @global_var_1 to i64), !insn.addr !5171
  %47 = inttoptr i64 %46 to i8*, !insn.addr !5171
  store i8 %45, i8* %47, align 1, !insn.addr !5171
  %48 = load i64, i64* %rsi, align 8, !insn.addr !5172
  %49 = add i64 %48, ptrtoint (i32* @global_var_2 to i64), !insn.addr !5172
  %50 = inttoptr i64 %49 to i8*, !insn.addr !5172
  %51 = load i8, i8* %50, align 1, !insn.addr !5172
  %52 = add i64 %arg3, ptrtoint (i32* @global_var_2 to i64), !insn.addr !5173
  %53 = inttoptr i64 %52 to i8*, !insn.addr !5173
  store i8 %51, i8* %53, align 1, !insn.addr !5173
  %54 = load i64, i64* %rsi, align 8, !insn.addr !5174
  %55 = add i64 %54, ptrtoint (i8** @global_var_3 to i64), !insn.addr !5174
  %56 = inttoptr i64 %55 to i8*, !insn.addr !5174
  %57 = load i8, i8* %56, align 1, !insn.addr !5174
  %58 = add i64 %arg3, ptrtoint (i8** @global_var_3 to i64), !insn.addr !5175
  %59 = inttoptr i64 %58 to i8*, !insn.addr !5175
  store i8 %57, i8* %59, align 1, !insn.addr !5175
  %60 = load i64, i64* %rsi, align 8, !insn.addr !5176
  ret i64 %60, !insn.addr !5177
}

define i8 @myAnsiToUnicodeString(i8* %buf, i32 %len, i16* %wbuf, i32* %wlen) local_unnamed_addr {
dec_label_pc_c8be:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = trunc i64 %0 to i8, !insn.addr !5178
  ret i8 %1, !insn.addr !5178
}

define i64 @function_c8c0(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4, i64 %arg5, i64 %arg6) local_unnamed_addr {
dec_label_pc_c8c0:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = trunc i64 %arg4 to i32, !insn.addr !5179
  %2 = lshr i32 %1, ptrtoint (i32** @global_var_1c to i32), !insn.addr !5179
  %3 = trunc i64 %arg1 to i32, !insn.addr !5180
  %4 = add i32 %2, %3, !insn.addr !5180
  %5 = and i32 %4, ptrtoint (i8* @global_var_f to i32), !insn.addr !5181
  %6 = sub i32 %5, %2, !insn.addr !5182
  %7 = sext i32 %6 to i64, !insn.addr !5183
  %8 = trunc i64 %arg6 to i8, !insn.addr !5184
  %9 = mul i64 %7, ptrtoint (i32* @global_var_1 to i64), !insn.addr !5184
  %10 = add i64 %arg5, ptrtoint (i8** @global_var_30dc4 to i64), !insn.addr !5184
  %11 = add i64 %10, %9, !insn.addr !5184
  %12 = inttoptr i64 %11 to i8*, !insn.addr !5184
  %13 = load i8, i8* %12, align 1, !insn.addr !5184
  %14 = xor i8 %13, %8, !insn.addr !5184
  %15 = add i64 %arg3, ptrtoint (i16* @global_var_4 to i64), !insn.addr !5185
  %16 = inttoptr i64 %15 to i8*, !insn.addr !5185
  store i8 %14, i8* %16, align 1, !insn.addr !5185
  %17 = add i64 %0, ptrtoint (i32* @global_var_1 to i64), !insn.addr !5186
  ret i64 %17, !insn.addr !5187
}

define i64 @myAnsiToUnicodeString.316(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4) local_unnamed_addr {
dec_label_pc_c8ee:
  %r15.0.reg2mem = alloca i64, !insn.addr !5188
  %rax.0.reg2mem = alloca i64, !insn.addr !5188
  %merge.reg2mem = alloca i64, !insn.addr !5188
  %0 = call i64 @__decompiler_undefined_function_0()
  %stack_var_-328 = alloca i64, align 8
  %1 = call i64 @mcount(), !insn.addr !5189
  %2 = and i64 %arg2, 4294967295, !insn.addr !5190
  %3 = call i64 @__readgsqword(i64 40), !insn.addr !5191
  %4 = trunc i64 %0 to i32
  %5 = mul i64 %2, ptrtoint (i32* @global_var_1 to i64), !insn.addr !5192
  %6 = add i64 %arg2, ptrtoint (i32* @global_var_2 to i64), !insn.addr !5192
  %7 = add i64 %6, %5, !insn.addr !5192
  %8 = trunc i64 %7 to i32, !insn.addr !5192
  %9 = icmp uge i32 %4, %8, !insn.addr !5193
  %10 = trunc i64 %arg2 to i32, !insn.addr !5194
  %11 = icmp ult i32 %10, 128
  %or.cond = icmp eq i1 %11, %9
  store i64 0, i64* %merge.reg2mem, !insn.addr !5195
  br i1 %or.cond, label %dec_label_pc_c939, label %dec_label_pc_c932, !insn.addr !5195

dec_label_pc_c932:                                ; preds = %dec_label_pc_c96e, %dec_label_pc_c939, %dec_label_pc_c8ee
  %merge.reload = load i64, i64* %merge.reg2mem
  ret i64 %merge.reload, !insn.addr !5196

dec_label_pc_c939:                                ; preds = %dec_label_pc_c8ee
  %12 = and i64 %0, 4294967295, !insn.addr !5197
  %13 = call i64 @memset(i64 %arg3, i64 0, i64 %12), !insn.addr !5198
  %14 = bitcast i64* %stack_var_-328 to i8*, !insn.addr !5199
  call void @__asm_rep_stosq_memset(i8* nonnull %14, i64 0, i64 ptrtoint (i32** @global_var_20 to i64)), !insn.addr !5199
  %15 = icmp eq i32 %10, 0, !insn.addr !5200
  store i64 0, i64* %merge.reg2mem, !insn.addr !5201
  br i1 %15, label %dec_label_pc_c932, label %dec_label_pc_c963, !insn.addr !5201

dec_label_pc_c963:                                ; preds = %dec_label_pc_c939
  %16 = ptrtoint i64* %stack_var_-328 to i64, !insn.addr !5202
  %17 = sub i64 %arg2, zext (i32 ptrtoint (i32* @global_var_1 to i32) to i64), !insn.addr !5203
  %18 = and i64 %17, 4294967295, !insn.addr !5203
  %19 = mul i64 %18, ptrtoint (i32* @global_var_1 to i64), !insn.addr !5204
  %20 = add i64 %arg1, ptrtoint (i32* @global_var_1 to i64), !insn.addr !5204
  %21 = add i64 %20, %19, !insn.addr !5204
  store i64 %16, i64* %rax.0.reg2mem, !insn.addr !5204
  store i64 %arg1, i64* %r15.0.reg2mem, !insn.addr !5204
  br label %dec_label_pc_c96e, !insn.addr !5204

dec_label_pc_c96e:                                ; preds = %dec_label_pc_c96e, %dec_label_pc_c963
  %r15.0.reload = load i64, i64* %r15.0.reg2mem
  %rax.0.reload = load i64, i64* %rax.0.reg2mem
  %22 = inttoptr i64 %r15.0.reload to i8*, !insn.addr !5205
  %23 = load i8, i8* %22, align 1, !insn.addr !5205
  %24 = inttoptr i64 %rax.0.reload to i8*, !insn.addr !5206
  store i8 %23, i8* %24, align 4, !insn.addr !5206
  %25 = add i64 %r15.0.reload, ptrtoint (i32* @global_var_1 to i64), !insn.addr !5207
  %26 = add i64 %rax.0.reload, ptrtoint (i32* @global_var_2 to i64), !insn.addr !5208
  %27 = icmp eq i64 %25, %21, !insn.addr !5209
  %28 = icmp eq i1 %27, false, !insn.addr !5210
  store i64 %26, i64* %merge.reg2mem, !insn.addr !5210
  store i64 %26, i64* %rax.0.reg2mem, !insn.addr !5210
  store i64 %25, i64* %r15.0.reg2mem, !insn.addr !5210
  br i1 %28, label %dec_label_pc_c96e, label %dec_label_pc_c932, !insn.addr !5210
}

define void @DriverInterfaceDec(i64 %pTuner, i8* %Input188B, i8* %Output188B) local_unnamed_addr {
dec_label_pc_c992:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = call i64 @__decompiler_undefined_function_0()
  %2 = call i64 @__decompiler_undefined_function_0()
  %3 = add i64 %0, -119, !insn.addr !5211
  %4 = inttoptr i64 %3 to i8*, !insn.addr !5211
  %5 = load i8, i8* %4, align 1, !insn.addr !5211
  %6 = trunc i64 %2 to i8, !insn.addr !5211
  %7 = add i8 %5, %6, !insn.addr !5211
  store i8 %7, i8* %4, align 1, !insn.addr !5211
  %8 = add i64 %2, 1, !insn.addr !5212
  %9 = call i8 @__readgsbyte(i64 %8), !insn.addr !5212
  %10 = lshr i64 %1, ptrtoint (i8* @global_var_8 to i64), !insn.addr !5212
  %11 = trunc i64 %10 to i8, !insn.addr !5212
  %12 = add i8 %9, %11, !insn.addr !5212
  call void @__writegsbyte(i64 %8, i8 %12), !insn.addr !5212
  %13 = add i64 %0, -56, !insn.addr !5213
  %14 = inttoptr i64 %13 to i64*, !insn.addr !5213
  %15 = load i64, i64* %14, align 8, !insn.addr !5213
  %16 = call i64 @__readgsqword(i64 40), !insn.addr !5214
  %17 = icmp eq i64 %15, %16, !insn.addr !5214
  br i1 %17, label %dec_label_pc_c9b0, label %dec_label_pc_c9ab, !insn.addr !5215

dec_label_pc_c9ab:                                ; preds = %dec_label_pc_c992
  %18 = call i64 @__stack_chk_fail(), !insn.addr !5216
  br label %dec_label_pc_c9b0, !insn.addr !5216

dec_label_pc_c9b0:                                ; preds = %dec_label_pc_c9ab, %dec_label_pc_c992
  ret void, !insn.addr !5217
}

define i64 @DriverInterfaceDec.421(i64 %arg1, i64 %arg2, i64 %arg3) local_unnamed_addr {
dec_label_pc_c9c2:
  %r15.0.reg2mem = alloca i64, !insn.addr !5218
  %r13.0.reg2mem = alloca i64, !insn.addr !5218
  %rbx.3.reg2mem = alloca i64, !insn.addr !5218
  %rdx.0.reg2mem = alloca i64, !insn.addr !5218
  %rax.0.reg2mem = alloca i64, !insn.addr !5218
  %rdi.4.reg2mem = alloca i64, !insn.addr !5218
  %rdi.3.reg2mem = alloca i64, !insn.addr !5218
  %rdi.2.reg2mem = alloca i64, !insn.addr !5218
  %rbx.2.reg2mem = alloca i64, !insn.addr !5218
  %rdi.1.reg2mem = alloca i64, !insn.addr !5218
  %rbx.1.reg2mem = alloca i64, !insn.addr !5218
  %.pre-phi2.reg2mem = alloca i8, !insn.addr !5218
  %rdi.0.reg2mem = alloca i64, !insn.addr !5218
  %rbx.0.reg2mem = alloca i64, !insn.addr !5218
  %.pre-phi.reg2mem = alloca i8, !insn.addr !5218
  %0 = call i1 @__decompiler_undefined_function_2()
  %stack_var_-260 = alloca i64, align 8
  %stack_var_-264 = alloca i64, align 8
  %1 = call i64 @mcount(), !insn.addr !5219
  %2 = call i64 @__readgsqword(i64 40), !insn.addr !5220
  %3 = add i64 %arg1, 7480, !insn.addr !5221
  %4 = inttoptr i64 %3 to i64*, !insn.addr !5221
  %5 = load i64, i64* %4, align 8, !insn.addr !5221
  %6 = trunc i64 %arg3 to i8
  %7 = and i8 %6, ptrtoint (i32* @global_var_1 to i8), !insn.addr !5222
  %8 = icmp eq i8 %7, 0, !insn.addr !5222
  store i8 %6, i8* %.pre-phi.reg2mem, !insn.addr !5223
  store i64 188, i64* %rbx.0.reg2mem, !insn.addr !5223
  store i64 %arg3, i64* %rdi.0.reg2mem, !insn.addr !5223
  br i1 %8, label %dec_label_pc_ca0a, label %dec_label_pc_ca01, !insn.addr !5223

dec_label_pc_ca01:                                ; preds = %dec_label_pc_c9c2
  %9 = inttoptr i64 %arg3 to i8*, !insn.addr !5224
  store i8 0, i8* %9, align 1, !insn.addr !5224
  %10 = add i64 %arg3, ptrtoint (i32* @global_var_1 to i64), !insn.addr !5225
  %.pre = trunc i64 %10 to i8, !insn.addr !5226
  store i8 %.pre, i8* %.pre-phi.reg2mem, !insn.addr !5227
  store i64 187, i64* %rbx.0.reg2mem, !insn.addr !5227
  store i64 %10, i64* %rdi.0.reg2mem, !insn.addr !5227
  br label %dec_label_pc_ca0a, !insn.addr !5227

dec_label_pc_ca0a:                                ; preds = %dec_label_pc_ca01, %dec_label_pc_c9c2
  %rdi.0.reload = load i64, i64* %rdi.0.reg2mem
  %rbx.0.reload = load i64, i64* %rbx.0.reg2mem
  %.pre-phi.reload = load i8, i8* %.pre-phi.reg2mem
  %11 = and i8 %.pre-phi.reload, ptrtoint (i32* @global_var_2 to i8), !insn.addr !5226
  %12 = icmp eq i8 %11, 0, !insn.addr !5226
  store i8 %.pre-phi.reload, i8* %.pre-phi2.reg2mem, !insn.addr !5228
  store i64 %rbx.0.reload, i64* %rbx.1.reg2mem, !insn.addr !5228
  store i64 %rdi.0.reload, i64* %rdi.1.reg2mem, !insn.addr !5228
  br i1 %12, label %dec_label_pc_ca1a, label %dec_label_pc_ca10, !insn.addr !5228

dec_label_pc_ca10:                                ; preds = %dec_label_pc_ca0a
  %13 = inttoptr i64 %rdi.0.reload to i16*, !insn.addr !5229
  store i16 0, i16* %13, align 2, !insn.addr !5229
  %14 = add i64 %rdi.0.reload, ptrtoint (i32* @global_var_2 to i64), !insn.addr !5230
  %15 = add nuw nsw i64 %rbx.0.reload, 254, !insn.addr !5231
  %16 = and i64 %15, 191, !insn.addr !5231
  %.pre1 = trunc i64 %14 to i8, !insn.addr !5232
  store i8 %.pre1, i8* %.pre-phi2.reg2mem, !insn.addr !5231
  store i64 %16, i64* %rbx.1.reg2mem, !insn.addr !5231
  store i64 %14, i64* %rdi.1.reg2mem, !insn.addr !5231
  br label %dec_label_pc_ca1a, !insn.addr !5231

dec_label_pc_ca1a:                                ; preds = %dec_label_pc_ca10, %dec_label_pc_ca0a
  %rdi.1.reload = load i64, i64* %rdi.1.reg2mem
  %rbx.1.reload = load i64, i64* %rbx.1.reg2mem
  %.pre-phi2.reload = load i8, i8* %.pre-phi2.reg2mem
  %17 = and i8 %.pre-phi2.reload, ptrtoint (i16* @global_var_4 to i8), !insn.addr !5232
  %18 = icmp eq i8 %17, 0, !insn.addr !5232
  store i64 %rbx.1.reload, i64* %rbx.2.reg2mem, !insn.addr !5233
  store i64 %rdi.1.reload, i64* %rdi.2.reg2mem, !insn.addr !5233
  br i1 %18, label %dec_label_pc_ca29, label %dec_label_pc_ca20, !insn.addr !5233

dec_label_pc_ca20:                                ; preds = %dec_label_pc_ca1a
  %19 = inttoptr i64 %rdi.1.reload to i32*, !insn.addr !5234
  store i32 0, i32* %19, align 4, !insn.addr !5234
  %20 = add i64 %rdi.1.reload, ptrtoint (i16* @global_var_4 to i64), !insn.addr !5235
  %21 = add nsw i64 %rbx.1.reload, 4294967292, !insn.addr !5236
  %22 = and i64 %21, 4294967295, !insn.addr !5236
  store i64 %22, i64* %rbx.2.reg2mem, !insn.addr !5236
  store i64 %20, i64* %rdi.2.reg2mem, !insn.addr !5236
  br label %dec_label_pc_ca29, !insn.addr !5236

dec_label_pc_ca29:                                ; preds = %dec_label_pc_ca20, %dec_label_pc_ca1a
  %rdi.2.reload = load i64, i64* %rdi.2.reg2mem
  %rbx.2.reload = load i64, i64* %rbx.2.reg2mem
  %23 = trunc i64 %rbx.2.reload to i32, !insn.addr !5237
  %24 = lshr i32 %23, ptrtoint (i8** @global_var_3 to i32), !insn.addr !5238
  %25 = zext i32 %24 to i64, !insn.addr !5239
  %26 = inttoptr i64 %rdi.2.reload to i8*, !insn.addr !5240
  call void @__asm_rep_stosq_memset(i8* %26, i64 0, i64 %25), !insn.addr !5240
  %27 = select i1 %0, i64 -8, i64 ptrtoint (i8* @global_var_8 to i64), !insn.addr !5240
  %28 = mul i64 %27, %25, !insn.addr !5240
  %29 = add i64 %28, %rdi.2.reload, !insn.addr !5240
  %30 = trunc i64 %rbx.2.reload to i8, !insn.addr !5241
  %31 = and i8 %30, ptrtoint (i16* @global_var_4 to i8), !insn.addr !5241
  %32 = icmp eq i8 %31, 0, !insn.addr !5241
  store i64 %29, i64* %rdi.3.reg2mem, !insn.addr !5242
  br i1 %32, label %dec_label_pc_ca3e, label %dec_label_pc_ca38, !insn.addr !5242

dec_label_pc_ca38:                                ; preds = %dec_label_pc_ca29
  %33 = inttoptr i64 %29 to i32*, !insn.addr !5243
  store i32 0, i32* %33, align 4, !insn.addr !5243
  %34 = add i64 %29, ptrtoint (i16* @global_var_4 to i64), !insn.addr !5244
  store i64 %34, i64* %rdi.3.reg2mem, !insn.addr !5244
  br label %dec_label_pc_ca3e, !insn.addr !5244

dec_label_pc_ca3e:                                ; preds = %dec_label_pc_ca38, %dec_label_pc_ca29
  %rdi.3.reload = load i64, i64* %rdi.3.reg2mem
  %35 = and i8 %30, ptrtoint (i32* @global_var_2 to i8), !insn.addr !5245
  %36 = icmp eq i8 %35, 0, !insn.addr !5245
  store i64 %rdi.3.reload, i64* %rdi.4.reg2mem, !insn.addr !5246
  br i1 %36, label %dec_label_pc_ca4a, label %dec_label_pc_ca43, !insn.addr !5246

dec_label_pc_ca43:                                ; preds = %dec_label_pc_ca3e
  %37 = inttoptr i64 %rdi.3.reload to i16*, !insn.addr !5247
  store i16 0, i16* %37, align 2, !insn.addr !5247
  %38 = add i64 %rdi.3.reload, ptrtoint (i32* @global_var_2 to i64), !insn.addr !5248
  store i64 %38, i64* %rdi.4.reg2mem, !insn.addr !5248
  br label %dec_label_pc_ca4a, !insn.addr !5248

dec_label_pc_ca4a:                                ; preds = %dec_label_pc_ca43, %dec_label_pc_ca3e
  %39 = and i8 %30, ptrtoint (i32* @global_var_1 to i8), !insn.addr !5249
  %40 = icmp eq i8 %39, 0, !insn.addr !5249
  br i1 %40, label %dec_label_pc_ca51, label %dec_label_pc_ca4f, !insn.addr !5250

dec_label_pc_ca4f:                                ; preds = %dec_label_pc_ca4a
  %rdi.4.reload = load i64, i64* %rdi.4.reg2mem
  %41 = inttoptr i64 %rdi.4.reload to i8*, !insn.addr !5251
  store i8 0, i8* %41, align 1, !insn.addr !5251
  br label %dec_label_pc_ca51, !insn.addr !5251

dec_label_pc_ca51:                                ; preds = %dec_label_pc_ca4f, %dec_label_pc_ca4a
  %42 = ptrtoint i64* %stack_var_-264 to i64, !insn.addr !5252
  %43 = bitcast i64* %stack_var_-264 to i8*, !insn.addr !5253
  call void @__asm_rep_stosq_memset(i8* nonnull %43, i64 0, i64 ptrtoint (i8** @global_var_17 to i64)), !insn.addr !5253
  %44 = select i1 %0, i64 mul (i64 ptrtoint (i8** @global_var_17 to i64), i64 -8), i64 mul (i64 ptrtoint (i8* @global_var_8 to i64), i64 ptrtoint (i8** @global_var_17 to i64)), !insn.addr !5253
  %45 = add i64 %44, %42, !insn.addr !5253
  %46 = inttoptr i64 %45 to i32*, !insn.addr !5254
  store i32 0, i32* %46, align 8, !insn.addr !5254
  %47 = add i64 %arg2, 188, !insn.addr !5255
  store i64 %arg2, i64* %rax.0.reg2mem, !insn.addr !5256
  store i64 %arg3, i64* %rdx.0.reg2mem, !insn.addr !5256
  store i64 %42, i64* %rbx.3.reg2mem, !insn.addr !5256
  br label %dec_label_pc_ca7e, !insn.addr !5256

dec_label_pc_ca7e:                                ; preds = %dec_label_pc_ca7e, %dec_label_pc_ca51
  %rbx.3.reload = load i64, i64* %rbx.3.reg2mem
  %rdx.0.reload = load i64, i64* %rdx.0.reg2mem
  %rax.0.reload = load i64, i64* %rax.0.reg2mem
  %48 = inttoptr i64 %rax.0.reload to i8*, !insn.addr !5257
  %49 = load i8, i8* %48, align 1, !insn.addr !5257
  %50 = inttoptr i64 %rbx.3.reload to i8*, !insn.addr !5258
  store i8 %49, i8* %50, align 4, !insn.addr !5258
  %51 = inttoptr i64 %rdx.0.reload to i8*, !insn.addr !5259
  store i8 %49, i8* %51, align 1, !insn.addr !5259
  %52 = add i64 %rax.0.reload, ptrtoint (i32* @global_var_1 to i64), !insn.addr !5260
  %53 = add i64 %rbx.3.reload, ptrtoint (i32* @global_var_1 to i64), !insn.addr !5261
  %54 = add i64 %rdx.0.reload, 1, !insn.addr !5262
  %55 = icmp eq i64 %52, %47, !insn.addr !5263
  %56 = icmp eq i1 %55, false, !insn.addr !5264
  store i64 %52, i64* %rax.0.reg2mem, !insn.addr !5264
  store i64 %54, i64* %rdx.0.reg2mem, !insn.addr !5264
  store i64 %53, i64* %rbx.3.reg2mem, !insn.addr !5264
  br i1 %56, label %dec_label_pc_ca7e, label %dec_label_pc_ca98, !insn.addr !5264

dec_label_pc_ca98:                                ; preds = %dec_label_pc_ca7e
  %57 = add i64 %5, 3816, !insn.addr !5265
  %58 = add i64 %arg1, 587608, !insn.addr !5266
  %59 = add i64 %arg1, 588344, !insn.addr !5267
  %60 = add i64 %arg2, ptrtoint (i16* @global_var_4 to i64), !insn.addr !5268
  %61 = add i64 %arg2, 164, !insn.addr !5269
  %62 = ptrtoint i64* %stack_var_-260 to i64, !insn.addr !5270
  %63 = add i64 %arg1, 587684, !insn.addr !5271
  %64 = inttoptr i64 %63 to i32*, !insn.addr !5271
  store i64 %60, i64* %r13.0.reg2mem, !insn.addr !5270
  store i64 %62, i64* %r15.0.reg2mem, !insn.addr !5270
  br label %dec_label_pc_cade, !insn.addr !5270

dec_label_pc_cade:                                ; preds = %dec_label_pc_cade, %dec_label_pc_ca98
  %r15.0.reload = load i64, i64* %r15.0.reg2mem
  %r13.0.reload = load i64, i64* %r13.0.reg2mem
  %65 = load i32, i32* %64, align 4, !insn.addr !5271
  %66 = call i64 @cipherUpdateRounds.321(i64 %59, i64 %58, i64 %r13.0.reload, i64* bitcast (i8* @global_var_10 to i64*), i64 %r15.0.reload, i32 %65, i64 %57), !insn.addr !5272
  %67 = add i64 %r13.0.reload, ptrtoint (i32** @global_var_20 to i64), !insn.addr !5273
  %68 = add i64 %r15.0.reload, ptrtoint (i32** @global_var_20 to i64), !insn.addr !5274
  %69 = icmp eq i64 %67, %61, !insn.addr !5275
  %70 = icmp eq i1 %69, false, !insn.addr !5276
  store i64 %67, i64* %r13.0.reg2mem, !insn.addr !5276
  store i64 %68, i64* %r15.0.reg2mem, !insn.addr !5276
  br i1 %70, label %dec_label_pc_cade, label %dec_label_pc_cb1f, !insn.addr !5276

dec_label_pc_cb1f:                                ; preds = %dec_label_pc_cade
  ret i64 %arg3, !insn.addr !5277
}

define i64 @function_cb2e(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4, i64 %arg5) local_unnamed_addr {
dec_label_pc_cb2e:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = call i64 @__decompiler_undefined_function_0()
  %2 = mul i64 %0, ptrtoint (i32* @global_var_1 to i64), !insn.addr !5278
  %3 = add i64 %arg4, -31, !insn.addr !5278
  %4 = add i64 %3, %2, !insn.addr !5278
  %5 = inttoptr i64 %4 to i32*, !insn.addr !5278
  %6 = load i32, i32* %5, align 4, !insn.addr !5278
  %7 = shl i32 %6, ptrtoint (i8** @global_var_9 to i32), !insn.addr !5278
  %8 = lshr i32 %6, ptrtoint (i8** @global_var_17 to i32), !insn.addr !5278
  %9 = or i32 %8, %7, !insn.addr !5278
  store i32 %9, i32* %5, align 4, !insn.addr !5278
  ret i64 %1, !insn.addr !5279
}

define i64 @function_cb49(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4) local_unnamed_addr {
dec_label_pc_cb49:
  %0 = call i64 @__decompiler_undefined_function_0()
  ret i64 %0, !insn.addr !5280
}

define void @DriverInterfaceDec_Multi(i64 %pTuner, i8* %TSData_In, i32 %FrameNum, i8* %TSData_Out) local_unnamed_addr {
dec_label_pc_cb50:
  %0 = call i64 @__decompiler_undefined_function_0()
  %rcx = alloca i64, align 8
  %1 = call i64 @__decompiler_undefined_function_0()
  %2 = ptrtoint i8* %TSData_Out to i64
  %3 = add i64 %1, -125, !insn.addr !5281
  %4 = inttoptr i64 %3 to i32*, !insn.addr !5281
  %5 = load i32, i32* %4, align 4, !insn.addr !5281
  %6 = trunc i64 %2 to i32, !insn.addr !5281
  %7 = add i32 %5, %6, !insn.addr !5281
  store i32 %7, i32* %4, align 4, !insn.addr !5281
  %8 = bitcast i64* %rcx to i8*
  %9 = load i8, i8* %8, align 8, !insn.addr !5282
  %10 = shl i8 %9, ptrtoint (i8* @global_var_8 to i8), !insn.addr !5282
  %11 = or i8 %10, %9, !insn.addr !5282
  store i8 %11, i8* %TSData_Out, align 1, !insn.addr !5282
  %12 = add i64 %0, -56, !insn.addr !5283
  %13 = inttoptr i64 %12 to i64*, !insn.addr !5283
  %14 = load i64, i64* %13, align 8, !insn.addr !5283
  %15 = call i64 @__readgsqword(i64 40), !insn.addr !5284
  %16 = icmp eq i64 %14, %15, !insn.addr !5284
  br i1 %16, label %dec_label_pc_cb6e, label %dec_label_pc_cb69, !insn.addr !5285

dec_label_pc_cb69:                                ; preds = %dec_label_pc_cb50
  %17 = call i64 @__stack_chk_fail(), !insn.addr !5286
  br label %dec_label_pc_cb6e, !insn.addr !5286

dec_label_pc_cb6e:                                ; preds = %dec_label_pc_cb69, %dec_label_pc_cb50
  ret void, !insn.addr !5287
}

define i64 @DriverInterfaceDec_Multi.158(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4) local_unnamed_addr {
dec_label_pc_cb80:
  %0 = call i64 @mcount(), !insn.addr !5288
  ret i64 %0, !insn.addr !5289
}

define void @DriverInterfaceEnc(i64 %pTuner, i8* %Input188B, i8* %Output188B) local_unnamed_addr {
dec_label_pc_cbb5:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = call i64 @__decompiler_undefined_function_0()
  %2 = call i64 @__decompiler_undefined_function_0()
  %3 = ptrtoint i8* %Input188B to i64
  %4 = mul i64 %3, ptrtoint (i32* @global_var_1 to i64), !insn.addr !5290
  %5 = add i64 %1, %4, !insn.addr !5290
  %6 = add i64 %0, %4, !insn.addr !5291
  %7 = add i64 %2, -56, !insn.addr !5292
  %8 = inttoptr i64 %7 to i64*, !insn.addr !5292
  %9 = load i64, i64* %8, align 8, !insn.addr !5292
  %10 = call i64 @DriverInterfaceDec.421(i64 %9, i64 %6, i64 %5), !insn.addr !5293
  ret void, !insn.addr !5294
}

define i64 @DriverInterfaceEnc.457(i64 %arg1, i64 %arg2, i64 %arg3) local_unnamed_addr {
dec_label_pc_cbe5:
  %rcx.0.reg2mem = alloca i64, !insn.addr !5295
  %rax.0.reg2mem = alloca i64, !insn.addr !5295
  %.reg2mem = alloca i64, !insn.addr !5295
  %rdi.4.reg2mem = alloca i64, !insn.addr !5295
  %rdi.3.reg2mem = alloca i64, !insn.addr !5295
  %rdi.2.reg2mem = alloca i64, !insn.addr !5295
  %rbx.2.reg2mem = alloca i64, !insn.addr !5295
  %rdi.1.reg2mem = alloca i64, !insn.addr !5295
  %rbx.1.reg2mem = alloca i64, !insn.addr !5295
  %.pre-phi2.reg2mem = alloca i8, !insn.addr !5295
  %rdi.0.reg2mem = alloca i64, !insn.addr !5295
  %rbx.0.reg2mem = alloca i64, !insn.addr !5295
  %.pre-phi.reg2mem = alloca i8, !insn.addr !5295
  %rsi = alloca i64, align 8
  %0 = call i1 @__decompiler_undefined_function_2()
  store i64 %arg2, i64* %rsi, align 8
  %stack_var_-76 = alloca i64, align 8
  %stack_var_-260 = alloca i64, align 8
  %stack_var_-264 = alloca i64, align 8
  %1 = call i64 @mcount(), !insn.addr !5296
  %2 = call i64 @__readgsqword(i64 40), !insn.addr !5297
  %3 = add i64 %arg1, 7480, !insn.addr !5298
  %4 = inttoptr i64 %3 to i64*, !insn.addr !5298
  %5 = load i64, i64* %4, align 8, !insn.addr !5298
  %6 = trunc i64 %arg3 to i8
  %7 = and i8 %6, ptrtoint (i32* @global_var_1 to i8), !insn.addr !5299
  %8 = icmp eq i8 %7, 0, !insn.addr !5299
  store i8 %6, i8* %.pre-phi.reg2mem, !insn.addr !5300
  store i64 188, i64* %rbx.0.reg2mem, !insn.addr !5300
  store i64 %arg3, i64* %rdi.0.reg2mem, !insn.addr !5300
  br i1 %8, label %dec_label_pc_cc2d, label %dec_label_pc_cc24, !insn.addr !5300

dec_label_pc_cc24:                                ; preds = %dec_label_pc_cbe5
  %9 = inttoptr i64 %arg3 to i8*, !insn.addr !5301
  store i8 0, i8* %9, align 1, !insn.addr !5301
  %10 = add i64 %arg3, ptrtoint (i32* @global_var_1 to i64), !insn.addr !5302
  %.pre = trunc i64 %10 to i8, !insn.addr !5303
  store i8 %.pre, i8* %.pre-phi.reg2mem, !insn.addr !5304
  store i64 187, i64* %rbx.0.reg2mem, !insn.addr !5304
  store i64 %10, i64* %rdi.0.reg2mem, !insn.addr !5304
  br label %dec_label_pc_cc2d, !insn.addr !5304

dec_label_pc_cc2d:                                ; preds = %dec_label_pc_cc24, %dec_label_pc_cbe5
  %rdi.0.reload = load i64, i64* %rdi.0.reg2mem
  %rbx.0.reload = load i64, i64* %rbx.0.reg2mem
  %.pre-phi.reload = load i8, i8* %.pre-phi.reg2mem
  %11 = and i8 %.pre-phi.reload, ptrtoint (i32* @global_var_2 to i8), !insn.addr !5303
  %12 = icmp eq i8 %11, 0, !insn.addr !5303
  store i8 %.pre-phi.reload, i8* %.pre-phi2.reg2mem, !insn.addr !5305
  store i64 %rbx.0.reload, i64* %rbx.1.reg2mem, !insn.addr !5305
  store i64 %rdi.0.reload, i64* %rdi.1.reg2mem, !insn.addr !5305
  br i1 %12, label %dec_label_pc_cc3d, label %dec_label_pc_cc33, !insn.addr !5305

dec_label_pc_cc33:                                ; preds = %dec_label_pc_cc2d
  %13 = inttoptr i64 %rdi.0.reload to i16*, !insn.addr !5306
  store i16 0, i16* %13, align 2, !insn.addr !5306
  %14 = add i64 %rdi.0.reload, ptrtoint (i32* @global_var_2 to i64), !insn.addr !5307
  %15 = add nuw nsw i64 %rbx.0.reload, 254, !insn.addr !5308
  %16 = and i64 %15, 191, !insn.addr !5308
  %.pre1 = trunc i64 %14 to i8, !insn.addr !5309
  store i8 %.pre1, i8* %.pre-phi2.reg2mem, !insn.addr !5308
  store i64 %16, i64* %rbx.1.reg2mem, !insn.addr !5308
  store i64 %14, i64* %rdi.1.reg2mem, !insn.addr !5308
  br label %dec_label_pc_cc3d, !insn.addr !5308

dec_label_pc_cc3d:                                ; preds = %dec_label_pc_cc33, %dec_label_pc_cc2d
  %rdi.1.reload = load i64, i64* %rdi.1.reg2mem
  %rbx.1.reload = load i64, i64* %rbx.1.reg2mem
  %.pre-phi2.reload = load i8, i8* %.pre-phi2.reg2mem
  %17 = and i8 %.pre-phi2.reload, ptrtoint (i16* @global_var_4 to i8), !insn.addr !5309
  %18 = icmp eq i8 %17, 0, !insn.addr !5309
  store i64 %rbx.1.reload, i64* %rbx.2.reg2mem, !insn.addr !5310
  store i64 %rdi.1.reload, i64* %rdi.2.reg2mem, !insn.addr !5310
  br i1 %18, label %dec_label_pc_cc4c, label %dec_label_pc_cc43, !insn.addr !5310

dec_label_pc_cc43:                                ; preds = %dec_label_pc_cc3d
  %19 = inttoptr i64 %rdi.1.reload to i32*, !insn.addr !5311
  store i32 0, i32* %19, align 4, !insn.addr !5311
  %20 = add i64 %rdi.1.reload, ptrtoint (i16* @global_var_4 to i64), !insn.addr !5312
  %21 = add nsw i64 %rbx.1.reload, 4294967292, !insn.addr !5313
  %22 = and i64 %21, 4294967295, !insn.addr !5313
  store i64 %22, i64* %rbx.2.reg2mem, !insn.addr !5313
  store i64 %20, i64* %rdi.2.reg2mem, !insn.addr !5313
  br label %dec_label_pc_cc4c, !insn.addr !5313

dec_label_pc_cc4c:                                ; preds = %dec_label_pc_cc43, %dec_label_pc_cc3d
  %rdi.2.reload = load i64, i64* %rdi.2.reg2mem
  %rbx.2.reload = load i64, i64* %rbx.2.reg2mem
  %23 = trunc i64 %rbx.2.reload to i32, !insn.addr !5314
  %24 = lshr i32 %23, ptrtoint (i8** @global_var_3 to i32), !insn.addr !5315
  %25 = zext i32 %24 to i64, !insn.addr !5316
  %26 = inttoptr i64 %rdi.2.reload to i8*, !insn.addr !5317
  call void @__asm_rep_stosq_memset(i8* %26, i64 0, i64 %25), !insn.addr !5317
  %27 = select i1 %0, i64 -8, i64 ptrtoint (i8* @global_var_8 to i64), !insn.addr !5317
  %28 = mul i64 %27, %25, !insn.addr !5317
  %29 = add i64 %28, %rdi.2.reload, !insn.addr !5317
  %30 = trunc i64 %rbx.2.reload to i8, !insn.addr !5318
  %31 = and i8 %30, ptrtoint (i16* @global_var_4 to i8), !insn.addr !5318
  %32 = icmp eq i8 %31, 0, !insn.addr !5318
  store i64 %29, i64* %rdi.3.reg2mem, !insn.addr !5319
  br i1 %32, label %dec_label_pc_cc61, label %dec_label_pc_cc5b, !insn.addr !5319

dec_label_pc_cc5b:                                ; preds = %dec_label_pc_cc4c
  %33 = inttoptr i64 %29 to i32*, !insn.addr !5320
  store i32 0, i32* %33, align 4, !insn.addr !5320
  %34 = add i64 %29, ptrtoint (i16* @global_var_4 to i64), !insn.addr !5321
  store i64 %34, i64* %rdi.3.reg2mem, !insn.addr !5321
  br label %dec_label_pc_cc61, !insn.addr !5321

dec_label_pc_cc61:                                ; preds = %dec_label_pc_cc5b, %dec_label_pc_cc4c
  %rdi.3.reload = load i64, i64* %rdi.3.reg2mem
  %35 = and i8 %30, ptrtoint (i32* @global_var_2 to i8), !insn.addr !5322
  %36 = icmp eq i8 %35, 0, !insn.addr !5322
  store i64 %rdi.3.reload, i64* %rdi.4.reg2mem, !insn.addr !5323
  br i1 %36, label %dec_label_pc_cc6d, label %dec_label_pc_cc66, !insn.addr !5323

dec_label_pc_cc66:                                ; preds = %dec_label_pc_cc61
  %37 = inttoptr i64 %rdi.3.reload to i16*, !insn.addr !5324
  store i16 0, i16* %37, align 2, !insn.addr !5324
  %38 = add i64 %rdi.3.reload, ptrtoint (i32* @global_var_2 to i64), !insn.addr !5325
  store i64 %38, i64* %rdi.4.reg2mem, !insn.addr !5325
  br label %dec_label_pc_cc6d, !insn.addr !5325

dec_label_pc_cc6d:                                ; preds = %dec_label_pc_cc66, %dec_label_pc_cc61
  %39 = and i8 %30, ptrtoint (i32* @global_var_1 to i8), !insn.addr !5326
  %40 = icmp eq i8 %39, 0, !insn.addr !5326
  br i1 %40, label %dec_label_pc_cc74, label %dec_label_pc_cc72, !insn.addr !5327

dec_label_pc_cc72:                                ; preds = %dec_label_pc_cc6d
  %rdi.4.reload = load i64, i64* %rdi.4.reg2mem
  %41 = inttoptr i64 %rdi.4.reload to i8*, !insn.addr !5328
  store i8 0, i8* %41, align 1, !insn.addr !5328
  br label %dec_label_pc_cc74, !insn.addr !5328

dec_label_pc_cc74:                                ; preds = %dec_label_pc_cc72, %dec_label_pc_cc6d
  %42 = ptrtoint i64* %stack_var_-264 to i64, !insn.addr !5329
  %43 = bitcast i64* %stack_var_-264 to i8*, !insn.addr !5330
  call void @__asm_rep_stosq_memset(i8* nonnull %43, i64 0, i64 ptrtoint (i8** @global_var_17 to i64)), !insn.addr !5330
  %44 = select i1 %0, i64 mul (i64 ptrtoint (i8** @global_var_17 to i64), i64 -8), i64 mul (i64 ptrtoint (i8* @global_var_8 to i64), i64 ptrtoint (i8** @global_var_17 to i64)), !insn.addr !5330
  %45 = add i64 %44, %42, !insn.addr !5330
  %46 = inttoptr i64 %45 to i32*, !insn.addr !5331
  store i32 0, i32* %46, align 8, !insn.addr !5331
  %47 = bitcast i64* %rsi to i8*
  %48 = load i8, i8* %47, align 8, !insn.addr !5332
  %49 = inttoptr i64 %arg3 to i8*, !insn.addr !5333
  store i8 %48, i8* %49, align 1, !insn.addr !5333
  %50 = load i64, i64* %rsi, align 8, !insn.addr !5334
  %51 = add i64 %50, ptrtoint (i32* @global_var_1 to i64), !insn.addr !5334
  %52 = inttoptr i64 %51 to i8*, !insn.addr !5334
  %53 = load i8, i8* %52, align 1, !insn.addr !5334
  %54 = add i64 %arg3, ptrtoint (i32* @global_var_1 to i64), !insn.addr !5335
  %55 = inttoptr i64 %54 to i8*, !insn.addr !5335
  store i8 %53, i8* %55, align 1, !insn.addr !5335
  %56 = load i64, i64* %rsi, align 8, !insn.addr !5336
  %57 = add i64 %56, ptrtoint (i32* @global_var_2 to i64), !insn.addr !5336
  %58 = inttoptr i64 %57 to i8*, !insn.addr !5336
  %59 = load i8, i8* %58, align 1, !insn.addr !5336
  %60 = add i64 %arg3, ptrtoint (i32* @global_var_2 to i64), !insn.addr !5337
  %61 = inttoptr i64 %60 to i8*, !insn.addr !5337
  store i8 %59, i8* %61, align 1, !insn.addr !5337
  %62 = load i64, i64* %rsi, align 8, !insn.addr !5338
  %63 = add i64 %62, ptrtoint (i8** @global_var_3 to i64), !insn.addr !5338
  %64 = inttoptr i64 %63 to i8*, !insn.addr !5338
  %65 = load i8, i8* %64, align 1, !insn.addr !5338
  %66 = add i64 %arg3, ptrtoint (i8** @global_var_3 to i64), !insn.addr !5339
  %67 = inttoptr i64 %66 to i8*, !insn.addr !5339
  store i8 %65, i8* %67, align 1, !insn.addr !5339
  %68 = load i64, i64* %rsi, align 8, !insn.addr !5340
  %69 = add i64 %68, ptrtoint (i16* @global_var_4 to i64), !insn.addr !5340
  store i64 %69, i64* %rsi, align 8, !insn.addr !5340
  %70 = ptrtoint i64* %stack_var_-260 to i64, !insn.addr !5341
  %71 = ptrtoint i64* %stack_var_-76 to i64, !insn.addr !5342
  store i64 %69, i64* %.reg2mem, !insn.addr !5343
  store i64 %70, i64* %rax.0.reg2mem, !insn.addr !5343
  store i64 %arg3, i64* %rcx.0.reg2mem, !insn.addr !5343
  br label %dec_label_pc_ccca, !insn.addr !5343

dec_label_pc_ccca:                                ; preds = %dec_label_pc_ccca, %dec_label_pc_cc74
  %rcx.0.reload = load i64, i64* %rcx.0.reg2mem
  %rax.0.reload = load i64, i64* %rax.0.reg2mem
  %.reload = load i64, i64* %.reg2mem, !insn.addr !5344
  %72 = sub i64 %rcx.0.reload, %arg3, !insn.addr !5345
  %73 = trunc i64 %72 to i32, !insn.addr !5346
  %74 = ashr i32 %73, ptrtoint (i8** @global_var_1f to i32), !insn.addr !5347
  %75 = lshr i32 %74, ptrtoint (i8** @global_var_1b to i32), !insn.addr !5348
  %76 = add i32 %75, %73, !insn.addr !5349
  %77 = and i32 %76, ptrtoint (i8** @global_var_1f to i32), !insn.addr !5350
  %78 = sub i32 %77, %75, !insn.addr !5351
  %79 = sext i32 %78 to i64, !insn.addr !5352
  %80 = mul i64 %79, ptrtoint (i32* @global_var_1 to i64), !insn.addr !5353
  %81 = inttoptr i64 %80 to i8*, !insn.addr !5353
  %82 = load i8, i8* %81, align 4, !insn.addr !5353
  %83 = inttoptr i64 %.reload to i8*, !insn.addr !5344
  %84 = load i8, i8* %83, align 1, !insn.addr !5344
  %85 = xor i8 %84, %82, !insn.addr !5344
  %86 = inttoptr i64 %rax.0.reload to i8*, !insn.addr !5354
  store i8 %85, i8* %86, align 4, !insn.addr !5354
  %87 = add i64 %rcx.0.reload, ptrtoint (i16* @global_var_4 to i64), !insn.addr !5355
  %88 = inttoptr i64 %87 to i8*, !insn.addr !5355
  store i8 %85, i8* %88, align 1, !insn.addr !5355
  %89 = load i64, i64* %rsi, align 8, !insn.addr !5356
  %90 = add i64 %89, ptrtoint (i32* @global_var_1 to i64), !insn.addr !5356
  store i64 %90, i64* %rsi, align 8, !insn.addr !5356
  %91 = add i64 %rax.0.reload, ptrtoint (i32* @global_var_1 to i64), !insn.addr !5357
  %92 = add i64 %rcx.0.reload, ptrtoint (i32* @global_var_1 to i64), !insn.addr !5358
  %93 = icmp eq i64 %91, %71, !insn.addr !5359
  %94 = icmp eq i1 %93, false, !insn.addr !5360
  store i64 %90, i64* %.reg2mem, !insn.addr !5360
  store i64 %91, i64* %rax.0.reg2mem, !insn.addr !5360
  store i64 %92, i64* %rcx.0.reg2mem, !insn.addr !5360
  br i1 %94, label %dec_label_pc_ccca, label %dec_label_pc_cd06, !insn.addr !5360

dec_label_pc_cd06:                                ; preds = %dec_label_pc_ccca
  %95 = add i64 %5, 3816, !insn.addr !5361
  %96 = add i64 %arg1, 586872, !insn.addr !5362
  %97 = add i64 %arg1, 588344, !insn.addr !5363
  %98 = add i64 %arg3, ptrtoint (i16* @global_var_4 to i64), !insn.addr !5364
  %99 = add i64 %arg1, 586948, !insn.addr !5365
  %100 = inttoptr i64 %99 to i32*, !insn.addr !5365
  %101 = load i32, i32* %100, align 4, !insn.addr !5365
  %102 = call i64 @cipherUpdateRounds.321(i64 %97, i64 %96, i64 %70, i64* bitcast (i8* @global_var_10 to i64*), i64 %98, i32 %101, i64 %95), !insn.addr !5366
  ret i64 %102, !insn.addr !5367
}

define void @DriverInterfaceEnc_Multi(i64 %pTuner, i8* %TSData_In, i32 %FrameNum, i8* %TSData_Out) local_unnamed_addr {
dec_label_pc_cd63:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = ptrtoint i8* %TSData_Out to i64
  %2 = add i64 %0, 59, !insn.addr !5368
  %3 = inttoptr i64 %2 to i8*, !insn.addr !5368
  %4 = load i8, i8* %3, align 1, !insn.addr !5368
  %5 = trunc i64 %1 to i8, !insn.addr !5368
  %6 = and i8 %4, %5, !insn.addr !5368
  store i8 %6, i8* %3, align 1, !insn.addr !5368
  ret void, !insn.addr !5369
}

define i64 @function_cd6a(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4, i64 %arg5) local_unnamed_addr {
dec_label_pc_cd6a:
  %rax.0.reg2mem = alloca i64, !insn.addr !5370
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = add i64 %0, -56, !insn.addr !5371
  %2 = inttoptr i64 %1 to i64*, !insn.addr !5371
  %3 = load i64, i64* %2, align 8, !insn.addr !5371
  %4 = call i64 @__readgsqword(i64 40), !insn.addr !5372
  %5 = icmp eq i64 %3, %4, !insn.addr !5372
  store i64 0, i64* %rax.0.reg2mem, !insn.addr !5373
  br i1 %5, label %dec_label_pc_cd81, label %dec_label_pc_cd7c, !insn.addr !5373

dec_label_pc_cd7c:                                ; preds = %dec_label_pc_cd6a
  %6 = call i64 @__stack_chk_fail(), !insn.addr !5374
  store i64 %6, i64* %rax.0.reg2mem, !insn.addr !5374
  br label %dec_label_pc_cd81, !insn.addr !5374

dec_label_pc_cd81:                                ; preds = %dec_label_pc_cd7c, %dec_label_pc_cd6a
  %rax.0.reload = load i64, i64* %rax.0.reg2mem
  ret i64 %rax.0.reload, !insn.addr !5375
}

define i64 @DriverInterfaceEnc_Multi.254(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4) local_unnamed_addr {
dec_label_pc_cd93:
  %0 = call i64 @mcount(), !insn.addr !5376
  ret i64 %0, !insn.addr !5377
}

define i8 @Get_CARD_INFO(i8* %PDev, i8* %PTuner, i8* %Status, i8* %size, i8* %buffer, i64 %BufferSz) local_unnamed_addr {
dec_label_pc_cdc8:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = call i64 @__decompiler_undefined_function_0()
  %2 = call i64 @__decompiler_undefined_function_0()
  %3 = ptrtoint i8* %PTuner to i64
  %4 = mul i64 %3, ptrtoint (i32* @global_var_1 to i64), !insn.addr !5378
  %5 = add i64 %1, %4, !insn.addr !5378
  %6 = add i64 %0, %4, !insn.addr !5379
  %7 = add i64 %2, -56, !insn.addr !5380
  %8 = inttoptr i64 %7 to i64*, !insn.addr !5380
  %9 = load i64, i64* %8, align 8, !insn.addr !5380
  %10 = call i64 @DriverInterfaceEnc.457(i64 %9, i64 %6, i64 %5), !insn.addr !5381
  %11 = trunc i64 %10 to i8, !insn.addr !5382
  ret i8 %11, !insn.addr !5382
}

define i64 @Get_CARD_INFO.237(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4, i64 %arg5) local_unnamed_addr {
dec_label_pc_cdf8:
  %r12.0.reg2mem = alloca i64, !insn.addr !5383
  %rbx.0.reg2mem = alloca i64, !insn.addr !5383
  %.reg2mem = alloca i32, !insn.addr !5383
  %0 = call i64 @__decompiler_undefined_function_0()
  %stack_var_-392 = alloca i64, align 8
  %1 = call i64 @mcount(), !insn.addr !5384
  %2 = call i64 @__readgsqword(i64 40), !insn.addr !5385
  %3 = add i64 %arg2, 7480, !insn.addr !5386
  %4 = inttoptr i64 %3 to i64*, !insn.addr !5386
  %5 = load i64, i64* %4, align 8, !insn.addr !5386
  %6 = add i64 %arg1, ptrtoint (i8** @global_var_1338 to i64), !insn.addr !5387
  %7 = inttoptr i64 %6 to i8*, !insn.addr !5387
  %8 = load i8, i8* %7, align 1, !insn.addr !5387
  %9 = inttoptr i64 %arg3 to i8*, !insn.addr !5388
  store i8 %8, i8* %9, align 1, !insn.addr !5388
  %10 = add i64 %arg1, 5576, !insn.addr !5389
  %11 = inttoptr i64 %10 to i32*, !insn.addr !5389
  %12 = load i32, i32* %11, align 4, !insn.addr !5389
  %13 = icmp eq i32 %12, 0, !insn.addr !5390
  %14 = icmp eq i1 %13, false, !insn.addr !5391
  br i1 %14, label %dec_label_pc_ce68, label %dec_label_pc_ce59, !insn.addr !5391

dec_label_pc_ce59:                                ; preds = %dec_label_pc_cdf8
  %15 = inttoptr i64 %arg4 to i8*, !insn.addr !5392
  store i8 0, i8* %15, align 1, !insn.addr !5392
  ret i64 %arg4, !insn.addr !5393

dec_label_pc_ce68:                                ; preds = %dec_label_pc_cdf8
  %16 = load i8, i8* %7, align 1, !insn.addr !5394
  %17 = icmp eq i8 %16, 0, !insn.addr !5394
  %18 = icmp eq i1 %17, false, !insn.addr !5395
  br i1 %18, label %dec_label_pc_ce89, label %dec_label_pc_ce71, !insn.addr !5395

dec_label_pc_ce71:                                ; preds = %dec_label_pc_ce68
  %19 = inttoptr i64 %arg4 to i8*, !insn.addr !5396
  store i8 0, i8* %19, align 1, !insn.addr !5396
  %20 = load i8, i8* %7, align 1, !insn.addr !5397
  %21 = zext i8 %20 to i64, !insn.addr !5397
  store i8 %20, i8* %9, align 1, !insn.addr !5398
  ret i64 %21, !insn.addr !5399

dec_label_pc_ce89:                                ; preds = %dec_label_pc_ce68
  %22 = icmp slt i32 %12, 256, !insn.addr !5400
  store i32 %12, i32* %.reg2mem, !insn.addr !5400
  br i1 %22, label %dec_label_pc_ce9a, label %dec_label_pc_ce90, !insn.addr !5400

dec_label_pc_ce90:                                ; preds = %dec_label_pc_ce89
  store i32 255, i32* %11, align 4, !insn.addr !5401
  store i32 255, i32* %.reg2mem, !insn.addr !5401
  br label %dec_label_pc_ce9a, !insn.addr !5401

dec_label_pc_ce9a:                                ; preds = %dec_label_pc_ce90, %dec_label_pc_ce89
  %.reload = load i32, i32* %.reg2mem, !insn.addr !5402
  %23 = mul i32 %.reload, 2, !insn.addr !5403
  %24 = add i32 %.reload, 1, !insn.addr !5403
  %25 = add i32 %24, %23, !insn.addr !5403
  %26 = sext i32 %25 to i64, !insn.addr !5404
  %27 = call i64 @FUSB_ExAllocatePool.203(i64 0, i64 %26), !insn.addr !5405
  %28 = load i32, i32* %11, align 4, !insn.addr !5406
  %29 = mul i32 %28, 2, !insn.addr !5407
  %30 = add i32 %28, 1, !insn.addr !5407
  %31 = add i32 %30, %29, !insn.addr !5407
  %32 = sext i32 %31 to i64, !insn.addr !5408
  %33 = call i64 @memset(i64 %27, i64 0, i64 %32), !insn.addr !5409
  %34 = load i32, i32* %11, align 4, !insn.addr !5410
  %35 = icmp slt i32 %34, 1, !insn.addr !5411
  store i64 %arg1, i64* %rbx.0.reg2mem, !insn.addr !5411
  store i64 0, i64* %r12.0.reg2mem, !insn.addr !5411
  br i1 %35, label %dec_label_pc_cf15, label %dec_label_pc_ceea, !insn.addr !5411

dec_label_pc_ceea:                                ; preds = %dec_label_pc_ce9a, %dec_label_pc_ceea
  %r12.0.reload = load i64, i64* %r12.0.reg2mem
  %rbx.0.reload = load i64, i64* %rbx.0.reg2mem
  %36 = add i64 %rbx.0.reload, 5254, !insn.addr !5412
  %37 = inttoptr i64 %36 to i8*, !insn.addr !5412
  %38 = load i8, i8* %37, align 1, !insn.addr !5412
  %39 = call i64 @sprintf(i64 %27, i64 0, i64 %27, i8 %38, i64 %arg5, i64 %0), !insn.addr !5413
  %40 = add nuw nsw i64 %r12.0.reload, zext (i32 ptrtoint (i32* @global_var_1 to i32) to i64), !insn.addr !5414
  %41 = and i64 %40, 4294967295, !insn.addr !5414
  %42 = add i64 %rbx.0.reload, ptrtoint (i32* @global_var_1 to i64), !insn.addr !5415
  %43 = load i32, i32* %11, align 4, !insn.addr !5416
  %44 = sext i32 %43 to i64, !insn.addr !5417
  %45 = icmp slt i64 %41, %44, !insn.addr !5417
  store i64 %42, i64* %rbx.0.reg2mem, !insn.addr !5417
  store i64 %41, i64* %r12.0.reg2mem, !insn.addr !5417
  br i1 %45, label %dec_label_pc_ceea, label %dec_label_pc_cf15, !insn.addr !5417

dec_label_pc_cf15:                                ; preds = %dec_label_pc_ceea, %dec_label_pc_ce9a
  %46 = trunc i64 %27 to i32, !insn.addr !5418
  %47 = call i64 @FUSB_ExFreePool.600(i32 %46, i64 0), !insn.addr !5418
  %48 = bitcast i64* %stack_var_-392 to i8*, !insn.addr !5419
  call void @__asm_rep_stosq_memset(i8* nonnull %48, i64 0, i64 40), !insn.addr !5419
  %49 = load i32, i32* %11, align 4, !insn.addr !5420
  %50 = sext i32 %49 to i64, !insn.addr !5420
  %51 = add i64 %arg1, 5254, !insn.addr !5421
  %52 = ptrtoint i64* %stack_var_-392 to i64, !insn.addr !5422
  %53 = call i64 @memcpy(i64 %52, i64 %51, i64 %50, i64 0), !insn.addr !5423
  %54 = load i32, i32* %11, align 4, !insn.addr !5424
  %55 = trunc i32 %54 to i8, !insn.addr !5425
  %56 = inttoptr i64 %arg4 to i8*, !insn.addr !5425
  store i8 %55, i8* %56, align 1, !insn.addr !5425
  %57 = add i64 %5, 3816, !insn.addr !5426
  %58 = add i64 %arg2, 586872, !insn.addr !5427
  %59 = add i64 %arg2, 588344, !insn.addr !5428
  %60 = add i64 %arg2, 586948, !insn.addr !5429
  %61 = inttoptr i64 %60 to i32*, !insn.addr !5429
  %62 = load i32, i32* %61, align 4, !insn.addr !5429
  %63 = mul i64 %52, ptrtoint (i32* @global_var_1 to i64), !insn.addr !5430
  %64 = call i64 @cipherUpdateRounds.321(i64 %59, i64 %58, i64 %63, i64* bitcast (i8* @global_var_10 to i64*), i64 %arg5, i32 %62, i64 %57), !insn.addr !5431
  ret i64 %64, !insn.addr !5432
}

define i32 @DTV_DecrypTS_5607(i64 %pTuner, i8* %Input188B, i8* %Output188B, i32 %buffersize) local_unnamed_addr {
dec_label_pc_d014:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = trunc i64 %0 to i32
  ret i32 %1
}

define i64 @DTV_DecrypTS_5607.251(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4) local_unnamed_addr {
dec_label_pc_d044:
  %rsi.14.reg2mem = alloca i64, !insn.addr !5433
  %rdi.11.reg2mem = alloca i64, !insn.addr !5433
  %rsi.13.reg2mem = alloca i64, !insn.addr !5433
  %rax.11.reg2mem = alloca i64, !insn.addr !5433
  %rdi.10.reg2mem = alloca i64, !insn.addr !5433
  %rsi.12.reg2mem = alloca i64, !insn.addr !5433
  %rax.10.reg2mem = alloca i64, !insn.addr !5433
  %rdi.9.reg2mem = alloca i64, !insn.addr !5433
  %rsi.11.reg2mem = alloca i64, !insn.addr !5433
  %rax.9.reg2mem = alloca i64, !insn.addr !5433
  %rbx.5.reg2mem = alloca i64, !insn.addr !5433
  %rdx.11.reg2mem = alloca i64, !insn.addr !5433
  %rdi.8.reg2mem = alloca i64, !insn.addr !5433
  %rsi.10.reg2mem = alloca i64, !insn.addr !5433
  %rdx.10.reg2mem = alloca i64, !insn.addr !5433
  %rdi.7.reg2mem = alloca i64, !insn.addr !5433
  %rsi.9.reg2mem = alloca i64, !insn.addr !5433
  %rdx.9.reg2mem = alloca i64, !insn.addr !5433
  %rdi.6.reg2mem = alloca i64, !insn.addr !5433
  %rsi.8.reg2mem = alloca i64, !insn.addr !5433
  %rdx.8.reg2mem = alloca i64, !insn.addr !5433
  %rbx.4.reg2mem = alloca i64, !insn.addr !5433
  %rax.8.reg2mem = alloca i64, !insn.addr !5433
  %rsi.7.reg2mem = alloca i64, !insn.addr !5433
  %rdx.7.reg2mem = alloca i64, !insn.addr !5433
  %rax.7.reg2mem = alloca i64, !insn.addr !5433
  %r14.1.reg2mem = alloca i64, !insn.addr !5433
  %rbx.3.reg2mem = alloca i64, !insn.addr !5433
  %rdx.6.reg2mem = alloca i64, !insn.addr !5433
  %rax.6.reg2mem = alloca i64, !insn.addr !5433
  %stack_var_-108.1.reg2mem = alloca i32, !insn.addr !5433
  %rdi.5.reg2mem = alloca i64, !insn.addr !5433
  %rsi.6.reg2mem = alloca i64, !insn.addr !5433
  %rax.5.reg2mem = alloca i64, !insn.addr !5433
  %rdi.4.reg2mem = alloca i64, !insn.addr !5433
  %rsi.5.reg2mem = alloca i64, !insn.addr !5433
  %rax.4.reg2mem = alloca i64, !insn.addr !5433
  %rdi.3.reg2mem = alloca i64, !insn.addr !5433
  %rsi.4.reg2mem = alloca i64, !insn.addr !5433
  %rax.3.reg2mem = alloca i64, !insn.addr !5433
  %rbx.2.reg2mem = alloca i64, !insn.addr !5433
  %rdx.5.reg2mem = alloca i64, !insn.addr !5433
  %rdi.2.reg2mem = alloca i64, !insn.addr !5433
  %rsi.3.reg2mem = alloca i64, !insn.addr !5433
  %rdx.4.reg2mem = alloca i64, !insn.addr !5433
  %rdi.1.reg2mem = alloca i64, !insn.addr !5433
  %rsi.2.reg2mem = alloca i64, !insn.addr !5433
  %rdx.3.reg2mem = alloca i64, !insn.addr !5433
  %rdi.0.reg2mem = alloca i64, !insn.addr !5433
  %rsi.1.reg2mem = alloca i64, !insn.addr !5433
  %rdx.2.reg2mem = alloca i64, !insn.addr !5433
  %rbx.1.reg2mem = alloca i64, !insn.addr !5433
  %rax.2.reg2mem = alloca i64, !insn.addr !5433
  %rsi.0.reg2mem = alloca i64, !insn.addr !5433
  %rdx.1.reg2mem = alloca i64, !insn.addr !5433
  %rax.1.reg2mem = alloca i64, !insn.addr !5433
  %r14.0.reg2mem = alloca i64, !insn.addr !5433
  %rbx.0.reg2mem = alloca i64, !insn.addr !5433
  %rdx.0.reg2mem = alloca i64, !insn.addr !5433
  %rax.0.reg2mem = alloca i64, !insn.addr !5433
  %stack_var_-108.0.reg2mem = alloca i32, !insn.addr !5433
  %0 = call i1 @__decompiler_undefined_function_2()
  %stack_var_-72 = alloca i64, align 8
  %stack_var_-88 = alloca i64, align 8
  %1 = call i64 @mcount(), !insn.addr !5434
  %2 = call i64 @__readgsqword(i64 40), !insn.addr !5435
  %3 = add i64 %arg1, ptrtoint (i8** @global_var_30de4 to i64), !insn.addr !5436
  %4 = inttoptr i64 %3 to i8*, !insn.addr !5436
  %5 = load i8, i8* %4, align 1, !insn.addr !5436
  %6 = icmp eq i8 %5, 0, !insn.addr !5436
  br i1 %6, label %dec_label_pc_d807, label %dec_label_pc_d08d, !insn.addr !5437

dec_label_pc_d08d:                                ; preds = %dec_label_pc_d044
  %sext = mul i64 %arg4, 4294967296
  %7 = sdiv i64 %sext, 4294967296, !insn.addr !5438
  %8 = add i64 %arg1, 7480, !insn.addr !5439
  %9 = inttoptr i64 %8 to i64*, !insn.addr !5439
  %10 = load i64, i64* %9, align 8, !insn.addr !5439
  %11 = call i64 @FUSB_ExAllocatePool.203(i64 0, i64 %7), !insn.addr !5440
  %12 = call i64 @FUSB_ExAllocatePool.203(i64 0, i64 %7), !insn.addr !5441
  %13 = add i64 %arg1, ptrtoint (i8** @global_var_30da1 to i64), !insn.addr !5442
  %14 = inttoptr i64 %13 to i8*, !insn.addr !5442
  %15 = load i8, i8* %14, align 1, !insn.addr !5442
  %16 = icmp eq i8 %15, 0, !insn.addr !5442
  %17 = trunc i64 %7 to i32
  br i1 %16, label %dec_label_pc_d0d1, label %dec_label_pc_d0c2, !insn.addr !5443

dec_label_pc_d0c2:                                ; preds = %dec_label_pc_d08d
  %18 = icmp eq i32 %17, 0, !insn.addr !5444
  %19 = icmp slt i32 %17, 0, !insn.addr !5444
  %20 = icmp eq i1 %19, false, !insn.addr !5445
  %21 = icmp eq i1 %18, false, !insn.addr !5445
  %22 = icmp eq i1 %20, %21, !insn.addr !5445
  br i1 %22, label %dec_label_pc_d46c, label %dec_label_pc_d857, !insn.addr !5445

dec_label_pc_d0d1:                                ; preds = %dec_label_pc_d08d
  %23 = icmp slt i32 %17, 1, !insn.addr !5446
  br i1 %23, label %dec_label_pc_d81d, label %dec_label_pc_d0db, !insn.addr !5446

dec_label_pc_d0db:                                ; preds = %dec_label_pc_d0d1
  %24 = add i64 %10, 3816, !insn.addr !5447
  %25 = add i64 %arg1, 586116, !insn.addr !5448
  %26 = add i64 %arg1, 586852, !insn.addr !5449
  %27 = ptrtoint i64* %stack_var_-72 to i64, !insn.addr !5450
  %28 = ptrtoint i64* %stack_var_-88 to i64
  %29 = add i64 %arg1, 586192
  %30 = inttoptr i64 %29 to i32*
  %31 = add i64 %arg1, 588951
  store i32 0, i32* %stack_var_-108.0.reg2mem, !insn.addr !5451
  br label %dec_label_pc_d11d, !insn.addr !5451

dec_label_pc_d11d:                                ; preds = %dec_label_pc_d294, %dec_label_pc_d0db
  %stack_var_-108.0.reload = load i32, i32* %stack_var_-108.0.reg2mem
  %32 = sext i32 %stack_var_-108.0.reload to i64, !insn.addr !5452
  %33 = add i64 %32, %arg2, !insn.addr !5453
  %34 = call i64 @DTV_HardwareDecrypt_ASV5606.451(i64 %arg1, i64 %33, i64 %33), !insn.addr !5454
  %35 = inttoptr i64 %33 to i8*, !insn.addr !5455
  %36 = load i8, i8* %35, align 1, !insn.addr !5455
  %37 = add i64 %32, %arg3, !insn.addr !5456
  %38 = inttoptr i64 %37 to i8*, !insn.addr !5456
  store i8 %36, i8* %38, align 1, !insn.addr !5456
  %39 = add i64 %32, ptrtoint (i32* @global_var_1 to i64), !insn.addr !5457
  %40 = mul i64 %39, ptrtoint (i32* @global_var_1 to i64), !insn.addr !5458
  %41 = add i64 %40, %arg2, !insn.addr !5458
  %42 = inttoptr i64 %41 to i8*, !insn.addr !5458
  %43 = load i8, i8* %42, align 1, !insn.addr !5458
  %44 = add i64 %39, %arg3, !insn.addr !5459
  %45 = inttoptr i64 %44 to i8*, !insn.addr !5459
  store i8 %43, i8* %45, align 1, !insn.addr !5459
  %46 = add i64 %32, ptrtoint (i32* @global_var_2 to i64), !insn.addr !5460
  %47 = add i64 %46, %arg2, !insn.addr !5461
  %48 = inttoptr i64 %47 to i8*, !insn.addr !5461
  %49 = load i8, i8* %48, align 1, !insn.addr !5461
  %50 = add i64 %46, %arg3, !insn.addr !5462
  %51 = inttoptr i64 %50 to i8*, !insn.addr !5462
  store i8 %49, i8* %51, align 1, !insn.addr !5462
  %52 = add i64 %32, ptrtoint (i8** @global_var_3 to i64), !insn.addr !5463
  %53 = add i64 %52, %arg2, !insn.addr !5464
  %54 = inttoptr i64 %53 to i8*, !insn.addr !5464
  %55 = load i8, i8* %54, align 1, !insn.addr !5464
  %56 = add i64 %52, %arg3, !insn.addr !5465
  %57 = inttoptr i64 %56 to i8*, !insn.addr !5465
  store i8 %55, i8* %57, align 1, !insn.addr !5465
  %58 = add nsw i64 %32, 172, !insn.addr !5466
  %59 = add i64 %58, %arg2, !insn.addr !5467
  %60 = inttoptr i64 %59 to i64*, !insn.addr !5468
  %61 = load i64, i64* %60, align 8, !insn.addr !5468
  store i64 %61, i64* %stack_var_-88, align 8, !insn.addr !5469
  store i64 %28, i64* %rax.0.reg2mem, !insn.addr !5470
  store i64 %arg1, i64* %rdx.0.reg2mem, !insn.addr !5470
  br label %dec_label_pc_d1a3, !insn.addr !5470

dec_label_pc_d1a3:                                ; preds = %dec_label_pc_d1a3, %dec_label_pc_d11d
  %rdx.0.reload = load i64, i64* %rdx.0.reg2mem
  %rax.0.reload = load i64, i64* %rax.0.reg2mem
  %62 = add i64 %rdx.0.reload, 588951, !insn.addr !5471
  %63 = inttoptr i64 %62 to i8*, !insn.addr !5471
  %64 = load i8, i8* %63, align 1, !insn.addr !5471
  %65 = inttoptr i64 %rax.0.reload to i8*, !insn.addr !5472
  %66 = load i8, i8* %65, align 4, !insn.addr !5472
  %67 = xor i8 %66, %64, !insn.addr !5472
  store i8 %67, i8* %65, align 4, !insn.addr !5472
  %68 = add i64 %rax.0.reload, ptrtoint (i32* @global_var_1 to i64), !insn.addr !5473
  %69 = sub i64 %rdx.0.reload, ptrtoint (i32* @global_var_1 to i64), !insn.addr !5474
  %70 = icmp eq i64 %68, %27, !insn.addr !5475
  %71 = icmp eq i1 %70, false, !insn.addr !5476
  store i64 %68, i64* %rax.0.reg2mem, !insn.addr !5476
  store i64 %69, i64* %rdx.0.reg2mem, !insn.addr !5476
  br i1 %71, label %dec_label_pc_d1a3, label %dec_label_pc_d1b9, !insn.addr !5476

dec_label_pc_d1b9:                                ; preds = %dec_label_pc_d1a3
  %72 = add i64 %58, %arg3, !insn.addr !5477
  %73 = load i32, i32* %30, align 4, !insn.addr !5478
  %74 = call i64 @cipherUpdateRounds.321(i64 %26, i64 %25, i64 %28, i64* bitcast (i8* @global_var_10 to i64*), i64 %72, i32 %73, i64 %24), !insn.addr !5479
  %75 = add nsw i64 %32, 164, !insn.addr !5480
  %76 = add i64 %75, %arg2, !insn.addr !5481
  %77 = inttoptr i64 %76 to i64*, !insn.addr !5481
  %78 = load i64, i64* %77, align 8, !insn.addr !5481
  store i64 %78, i64* %stack_var_-88, align 8, !insn.addr !5482
  store i64 %28, i64* %rbx.0.reg2mem, !insn.addr !5483
  store i64 %arg1, i64* %r14.0.reg2mem, !insn.addr !5483
  br label %dec_label_pc_d20f, !insn.addr !5483

dec_label_pc_d20f:                                ; preds = %dec_label_pc_d20f, %dec_label_pc_d1b9
  %r14.0.reload = load i64, i64* %r14.0.reg2mem
  %rbx.0.reload = load i64, i64* %rbx.0.reg2mem
  %79 = add i64 %r14.0.reload, 588951, !insn.addr !5484
  %80 = inttoptr i64 %79 to i8*, !insn.addr !5484
  %81 = load i8, i8* %80, align 1, !insn.addr !5484
  %82 = inttoptr i64 %rbx.0.reload to i8*, !insn.addr !5485
  %83 = load i8, i8* %82, align 4, !insn.addr !5485
  %84 = xor i8 %83, %81, !insn.addr !5485
  store i8 %84, i8* %82, align 4, !insn.addr !5485
  %85 = add i64 %rbx.0.reload, ptrtoint (i32* @global_var_1 to i64), !insn.addr !5486
  %86 = sub i64 %r14.0.reload, ptrtoint (i32* @global_var_1 to i64), !insn.addr !5487
  %87 = icmp eq i64 %85, %27, !insn.addr !5488
  %88 = icmp eq i1 %87, false, !insn.addr !5489
  store i64 %85, i64* %rbx.0.reg2mem, !insn.addr !5489
  store i64 %86, i64* %r14.0.reg2mem, !insn.addr !5489
  br i1 %88, label %dec_label_pc_d20f, label %dec_label_pc_d226, !insn.addr !5489

dec_label_pc_d226:                                ; preds = %dec_label_pc_d20f
  %89 = load i32, i32* %30, align 4, !insn.addr !5490
  %90 = add i64 %75, %arg3, !insn.addr !5491
  %91 = call i64 @cipherUpdateRounds.321(i64 %26, i64 %25, i64 %28, i64* bitcast (i8* @global_var_10 to i64*), i64 %90, i32 %89, i64 %24), !insn.addr !5492
  %92 = add i32 %stack_var_-108.0.reload, 4, !insn.addr !5493
  %93 = zext i32 %92 to i64, !insn.addr !5493
  %94 = add i32 %stack_var_-108.0.reload, 164, !insn.addr !5494
  store i64 %93, i64* %rsi.0.reg2mem, !insn.addr !5495
  br label %dec_label_pc_d28b, !insn.addr !5495

dec_label_pc_d267:                                ; preds = %dec_label_pc_d267, %dec_label_pc_d28b
  %rdx.1.reload = load i64, i64* %rdx.1.reg2mem
  %rax.1.reload = load i64, i64* %rax.1.reg2mem
  %sext12 = mul i64 %rdx.1.reload, 4294967296
  %95 = sdiv i64 %sext12, 4294967296, !insn.addr !5496
  %96 = add i64 %31, %rax.1.reload, !insn.addr !5497
  %97 = inttoptr i64 %96 to i8*, !insn.addr !5497
  %98 = load i8, i8* %97, align 1, !insn.addr !5497
  %99 = add i64 %95, %arg2, !insn.addr !5498
  %100 = inttoptr i64 %99 to i8*, !insn.addr !5498
  %101 = load i8, i8* %100, align 1, !insn.addr !5498
  %102 = xor i8 %101, %98, !insn.addr !5498
  store i8 %102, i8* %100, align 1, !insn.addr !5498
  %103 = add nsw i64 %rdx.1.reload, 1, !insn.addr !5499
  %104 = and i64 %103, 4294967295, !insn.addr !5499
  %105 = sub i64 %rax.1.reload, ptrtoint (i32* @global_var_1 to i64), !insn.addr !5500
  %106 = icmp eq i64 %105, -16, !insn.addr !5501
  %107 = icmp eq i1 %106, false, !insn.addr !5502
  store i64 %105, i64* %rax.1.reg2mem, !insn.addr !5502
  store i64 %104, i64* %rdx.1.reg2mem, !insn.addr !5502
  br i1 %107, label %dec_label_pc_d267, label %dec_label_pc_d284, !insn.addr !5502

dec_label_pc_d284:                                ; preds = %dec_label_pc_d267
  %108 = add nuw nsw i64 %rsi.0.reload, 16, !insn.addr !5503
  %109 = and i64 %108, 4294967295, !insn.addr !5503
  %110 = trunc i64 %108 to i32, !insn.addr !5504
  %111 = icmp eq i32 %94, %110, !insn.addr !5504
  store i64 %109, i64* %rsi.0.reg2mem, !insn.addr !5505
  br i1 %111, label %dec_label_pc_d294, label %dec_label_pc_d28b, !insn.addr !5505

dec_label_pc_d28b:                                ; preds = %dec_label_pc_d284, %dec_label_pc_d226
  %rsi.0.reload = load i64, i64* %rsi.0.reg2mem
  store i64 0, i64* %rax.1.reg2mem, !insn.addr !5506
  store i64 %rsi.0.reload, i64* %rdx.1.reg2mem, !insn.addr !5506
  br label %dec_label_pc_d267, !insn.addr !5506

dec_label_pc_d294:                                ; preds = %dec_label_pc_d284
  %112 = add i32 %stack_var_-108.0.reload, 188, !insn.addr !5507
  %113 = zext i32 %112 to i64, !insn.addr !5508
  %114 = icmp sgt i64 %7, %113, !insn.addr !5509
  store i32 %112, i32* %stack_var_-108.0.reg2mem, !insn.addr !5509
  br i1 %114, label %dec_label_pc_d11d, label %dec_label_pc_d2a7, !insn.addr !5509

dec_label_pc_d2a7:                                ; preds = %dec_label_pc_d294
  %sext23 = mul i64 %11, 4294967296
  %115 = sdiv i64 %sext23, 4294967296, !insn.addr !5510
  %116 = add i64 %arg2, 4, !insn.addr !5511
  store i64 0, i64* %rax.2.reg2mem, !insn.addr !5510
  store i64 0, i64* %rbx.1.reg2mem, !insn.addr !5510
  br label %dec_label_pc_d2cc, !insn.addr !5510

dec_label_pc_d2cc:                                ; preds = %dec_label_pc_d320, %dec_label_pc_d2a7
  %rbx.1.reload = load i64, i64* %rbx.1.reg2mem
  %rax.2.reload = load i64, i64* %rax.2.reg2mem
  %sext14 = mul i64 %rax.2.reload, 4294967296
  %117 = sdiv i64 %sext14, 4294967296, !insn.addr !5512
  %sext15 = mul i64 %rbx.1.reload, 4294967296
  %118 = sdiv i64 %sext15, 4294967296, !insn.addr !5513
  %119 = add nsw i64 %117, %115, !insn.addr !5514
  %120 = add i64 %116, %118, !insn.addr !5511
  %121 = urem i64 %119, 2
  %122 = icmp eq i64 %121, 0, !insn.addr !5515
  store i64 160, i64* %rdx.2.reg2mem, !insn.addr !5516
  store i64 %120, i64* %rsi.1.reg2mem, !insn.addr !5516
  store i64 %119, i64* %rdi.0.reg2mem, !insn.addr !5516
  br i1 %122, label %dec_label_pc_d2f4, label %dec_label_pc_d2e4, !insn.addr !5516

dec_label_pc_d2e4:                                ; preds = %dec_label_pc_d2cc
  %123 = inttoptr i64 %120 to i8*, !insn.addr !5517
  %124 = load i8, i8* %123, align 1, !insn.addr !5517
  %125 = inttoptr i64 %119 to i8*, !insn.addr !5518
  store i8 %124, i8* %125, align 1, !insn.addr !5518
  %126 = add nsw i64 %119, 1, !insn.addr !5519
  %127 = add i64 %120, 1, !insn.addr !5520
  store i64 159, i64* %rdx.2.reg2mem, !insn.addr !5521
  store i64 %127, i64* %rsi.1.reg2mem, !insn.addr !5521
  store i64 %126, i64* %rdi.0.reg2mem, !insn.addr !5521
  br label %dec_label_pc_d2f4, !insn.addr !5521

dec_label_pc_d2f4:                                ; preds = %dec_label_pc_d2e4, %dec_label_pc_d2cc
  %rdi.0.reload = load i64, i64* %rdi.0.reg2mem
  %rsi.1.reload = load i64, i64* %rsi.1.reg2mem
  %rdx.2.reload = load i64, i64* %rdx.2.reg2mem
  %128 = and i64 %rdi.0.reload, 2
  %129 = icmp eq i64 %128, 0, !insn.addr !5522
  store i64 %rdx.2.reload, i64* %rdx.3.reg2mem, !insn.addr !5523
  store i64 %rsi.1.reload, i64* %rsi.2.reg2mem, !insn.addr !5523
  store i64 %rdi.0.reload, i64* %rdi.1.reg2mem, !insn.addr !5523
  br i1 %129, label %dec_label_pc_d30b, label %dec_label_pc_d2fa, !insn.addr !5523

dec_label_pc_d2fa:                                ; preds = %dec_label_pc_d2f4
  %130 = inttoptr i64 %rsi.1.reload to i16*, !insn.addr !5524
  %131 = load i16, i16* %130, align 2, !insn.addr !5524
  %132 = inttoptr i64 %rdi.0.reload to i16*, !insn.addr !5525
  store i16 %131, i16* %132, align 2, !insn.addr !5525
  %133 = add nsw i64 %rdi.0.reload, 2, !insn.addr !5526
  %134 = add i64 %rsi.1.reload, 2, !insn.addr !5527
  %135 = add nuw nsw i64 %rdx.2.reload, 254, !insn.addr !5528
  %136 = urem i64 %135, 256, !insn.addr !5528
  store i64 %136, i64* %rdx.3.reg2mem, !insn.addr !5528
  store i64 %134, i64* %rsi.2.reg2mem, !insn.addr !5528
  store i64 %133, i64* %rdi.1.reg2mem, !insn.addr !5528
  br label %dec_label_pc_d30b, !insn.addr !5528

dec_label_pc_d30b:                                ; preds = %dec_label_pc_d2fa, %dec_label_pc_d2f4
  %rdi.1.reload = load i64, i64* %rdi.1.reg2mem
  %rsi.2.reload = load i64, i64* %rsi.2.reg2mem
  %rdx.3.reload = load i64, i64* %rdx.3.reg2mem
  %137 = and i64 %rdi.1.reload, 4
  %138 = icmp eq i64 %137, 0, !insn.addr !5529
  store i64 %rdx.3.reload, i64* %rdx.4.reg2mem, !insn.addr !5530
  store i64 %rsi.2.reload, i64* %rsi.3.reg2mem, !insn.addr !5530
  store i64 %rdi.1.reload, i64* %rdi.2.reg2mem, !insn.addr !5530
  br i1 %138, label %dec_label_pc_d320, label %dec_label_pc_d311, !insn.addr !5530

dec_label_pc_d311:                                ; preds = %dec_label_pc_d30b
  %139 = inttoptr i64 %rsi.2.reload to i32*, !insn.addr !5531
  %140 = load i32, i32* %139, align 4, !insn.addr !5531
  %141 = inttoptr i64 %rdi.1.reload to i32*, !insn.addr !5532
  store i32 %140, i32* %141, align 4, !insn.addr !5532
  %142 = add nsw i64 %rdi.1.reload, 4, !insn.addr !5533
  %143 = add i64 %rsi.2.reload, 4, !insn.addr !5534
  %144 = add nsw i64 %rdx.3.reload, 4294967292, !insn.addr !5535
  %145 = and i64 %144, 4294967295, !insn.addr !5535
  store i64 %145, i64* %rdx.4.reg2mem, !insn.addr !5535
  store i64 %143, i64* %rsi.3.reg2mem, !insn.addr !5535
  store i64 %142, i64* %rdi.2.reg2mem, !insn.addr !5535
  br label %dec_label_pc_d320, !insn.addr !5535

dec_label_pc_d320:                                ; preds = %dec_label_pc_d311, %dec_label_pc_d30b
  %rdi.2.reload = load i64, i64* %rdi.2.reg2mem
  %rsi.3.reload = load i64, i64* %rsi.3.reg2mem
  %rdx.4.reload = load i64, i64* %rdx.4.reg2mem
  %146 = trunc i64 %rdx.4.reload to i32, !insn.addr !5536
  %147 = lshr i32 %146, ptrtoint (i8** @global_var_3 to i32), !insn.addr !5537
  %148 = zext i32 %147 to i64, !insn.addr !5538
  %149 = inttoptr i64 %rsi.3.reload to i8*, !insn.addr !5539
  %150 = inttoptr i64 %rdi.2.reload to i8*, !insn.addr !5539
  call void @__asm_rep_movsq_memcpy(i8* %150, i8* %149, i64 %148), !insn.addr !5539
  %151 = add nuw nsw i64 %rbx.1.reload, 188, !insn.addr !5540
  %152 = and i64 %151, 4294967295, !insn.addr !5540
  %153 = add nuw nsw i64 %rax.2.reload, 160, !insn.addr !5541
  %154 = and i64 %153, 4294967295, !insn.addr !5541
  %155 = icmp sgt i64 %7, %152, !insn.addr !5542
  store i64 %154, i64* %rax.2.reg2mem, !insn.addr !5542
  store i64 %152, i64* %rbx.1.reg2mem, !insn.addr !5542
  br i1 %155, label %dec_label_pc_d2cc, label %dec_label_pc_d36c, !insn.addr !5542

dec_label_pc_d36c:                                ; preds = %dec_label_pc_d320
  %156 = load i32, i32* %30, align 4, !insn.addr !5543
  %sext24 = mul i64 %12, 4294967296
  %157 = sdiv i64 %sext24, 4294967296, !insn.addr !5544
  %158 = inttoptr i64 %154 to i64*, !insn.addr !5545
  %159 = call i64 @cipherUpdateRounds.321(i64 %26, i64 %25, i64 %115, i64* %158, i64 %157, i32 %156, i64 %24), !insn.addr !5545
  %160 = and i64 %7, 4294967295, !insn.addr !5546
  %161 = add i64 %arg3, 4, !insn.addr !5547
  store i64 0, i64* %rdx.5.reg2mem, !insn.addr !5546
  store i64 0, i64* %rbx.2.reg2mem, !insn.addr !5546
  br label %dec_label_pc_d3c8, !insn.addr !5546

dec_label_pc_d3c8:                                ; preds = %dec_label_pc_d41d, %dec_label_pc_d36c
  %rbx.2.reload = load i64, i64* %rbx.2.reg2mem
  %rdx.5.reload = load i64, i64* %rdx.5.reg2mem
  %sext17 = mul i64 %rdx.5.reload, 4294967296
  %162 = sdiv i64 %sext17, 4294967296, !insn.addr !5548
  %sext18 = mul i64 %rbx.2.reload, 4294967296
  %163 = sdiv i64 %sext18, 4294967296, !insn.addr !5549
  %164 = add i64 %161, %162, !insn.addr !5547
  %165 = add nsw i64 %163, %157, !insn.addr !5550
  %166 = urem i64 %164, 2
  %167 = icmp eq i64 %166, 0, !insn.addr !5551
  store i64 160, i64* %rax.3.reg2mem, !insn.addr !5552
  store i64 %165, i64* %rsi.4.reg2mem, !insn.addr !5552
  store i64 %164, i64* %rdi.3.reg2mem, !insn.addr !5552
  br i1 %167, label %dec_label_pc_d3f1, label %dec_label_pc_d3e1, !insn.addr !5552

dec_label_pc_d3e1:                                ; preds = %dec_label_pc_d3c8
  %168 = inttoptr i64 %165 to i8*, !insn.addr !5553
  %169 = load i8, i8* %168, align 1, !insn.addr !5553
  %170 = inttoptr i64 %164 to i8*, !insn.addr !5554
  store i8 %169, i8* %170, align 1, !insn.addr !5554
  %171 = add i64 %164, 1, !insn.addr !5555
  %172 = add nsw i64 %165, 1, !insn.addr !5556
  store i64 159, i64* %rax.3.reg2mem, !insn.addr !5557
  store i64 %172, i64* %rsi.4.reg2mem, !insn.addr !5557
  store i64 %171, i64* %rdi.3.reg2mem, !insn.addr !5557
  br label %dec_label_pc_d3f1, !insn.addr !5557

dec_label_pc_d3f1:                                ; preds = %dec_label_pc_d3e1, %dec_label_pc_d3c8
  %rdi.3.reload = load i64, i64* %rdi.3.reg2mem
  %rsi.4.reload = load i64, i64* %rsi.4.reg2mem
  %rax.3.reload = load i64, i64* %rax.3.reg2mem
  %173 = and i64 %rdi.3.reload, 2
  %174 = icmp eq i64 %173, 0, !insn.addr !5558
  store i64 %rax.3.reload, i64* %rax.4.reg2mem, !insn.addr !5559
  store i64 %rsi.4.reload, i64* %rsi.5.reg2mem, !insn.addr !5559
  store i64 %rdi.3.reload, i64* %rdi.4.reg2mem, !insn.addr !5559
  br i1 %174, label %dec_label_pc_d408, label %dec_label_pc_d3f7, !insn.addr !5559

dec_label_pc_d3f7:                                ; preds = %dec_label_pc_d3f1
  %175 = inttoptr i64 %rsi.4.reload to i16*, !insn.addr !5560
  %176 = load i16, i16* %175, align 2, !insn.addr !5560
  %177 = inttoptr i64 %rdi.3.reload to i16*, !insn.addr !5561
  store i16 %176, i16* %177, align 2, !insn.addr !5561
  %178 = add i64 %rdi.3.reload, 2, !insn.addr !5562
  %179 = add nsw i64 %rsi.4.reload, 2, !insn.addr !5563
  %180 = add nuw nsw i64 %rax.3.reload, 254, !insn.addr !5564
  %181 = urem i64 %180, 256, !insn.addr !5564
  store i64 %181, i64* %rax.4.reg2mem, !insn.addr !5564
  store i64 %179, i64* %rsi.5.reg2mem, !insn.addr !5564
  store i64 %178, i64* %rdi.4.reg2mem, !insn.addr !5564
  br label %dec_label_pc_d408, !insn.addr !5564

dec_label_pc_d408:                                ; preds = %dec_label_pc_d3f7, %dec_label_pc_d3f1
  %rdi.4.reload = load i64, i64* %rdi.4.reg2mem
  %rsi.5.reload = load i64, i64* %rsi.5.reg2mem
  %rax.4.reload = load i64, i64* %rax.4.reg2mem
  %182 = and i64 %rdi.4.reload, 4
  %183 = icmp eq i64 %182, 0, !insn.addr !5565
  store i64 %rax.4.reload, i64* %rax.5.reg2mem, !insn.addr !5566
  store i64 %rsi.5.reload, i64* %rsi.6.reg2mem, !insn.addr !5566
  store i64 %rdi.4.reload, i64* %rdi.5.reg2mem, !insn.addr !5566
  br i1 %183, label %dec_label_pc_d41d, label %dec_label_pc_d40e, !insn.addr !5566

dec_label_pc_d40e:                                ; preds = %dec_label_pc_d408
  %184 = inttoptr i64 %rsi.5.reload to i32*, !insn.addr !5567
  %185 = load i32, i32* %184, align 4, !insn.addr !5567
  %186 = inttoptr i64 %rdi.4.reload to i32*, !insn.addr !5568
  store i32 %185, i32* %186, align 4, !insn.addr !5568
  %187 = add i64 %rdi.4.reload, 4, !insn.addr !5569
  %188 = add nsw i64 %rsi.5.reload, 4, !insn.addr !5570
  %189 = add nsw i64 %rax.4.reload, 4294967292, !insn.addr !5571
  %190 = and i64 %189, 4294967295, !insn.addr !5571
  store i64 %190, i64* %rax.5.reg2mem, !insn.addr !5571
  store i64 %188, i64* %rsi.6.reg2mem, !insn.addr !5571
  store i64 %187, i64* %rdi.5.reg2mem, !insn.addr !5571
  br label %dec_label_pc_d41d, !insn.addr !5571

dec_label_pc_d41d:                                ; preds = %dec_label_pc_d40e, %dec_label_pc_d408
  %rdi.5.reload = load i64, i64* %rdi.5.reg2mem
  %rsi.6.reload = load i64, i64* %rsi.6.reg2mem
  %rax.5.reload = load i64, i64* %rax.5.reg2mem
  %191 = trunc i64 %rax.5.reload to i32, !insn.addr !5572
  %192 = lshr i32 %191, ptrtoint (i8** @global_var_3 to i32), !insn.addr !5573
  %193 = zext i32 %192 to i64, !insn.addr !5574
  %194 = inttoptr i64 %rsi.6.reload to i8*, !insn.addr !5575
  %195 = inttoptr i64 %rdi.5.reload to i8*, !insn.addr !5575
  call void @__asm_rep_movsq_memcpy(i8* %195, i8* %194, i64 %193), !insn.addr !5575
  %196 = add nuw nsw i64 %rdx.5.reload, 188, !insn.addr !5576
  %197 = and i64 %196, 4294967295, !insn.addr !5576
  %198 = add nuw nsw i64 %rbx.2.reload, 160, !insn.addr !5577
  %199 = and i64 %198, 4294967295, !insn.addr !5577
  %200 = icmp ugt i64 %160, %197, !insn.addr !5578
  store i64 %197, i64* %rdx.5.reg2mem, !insn.addr !5578
  store i64 %199, i64* %rbx.2.reg2mem, !insn.addr !5578
  br i1 %200, label %dec_label_pc_d3c8, label %dec_label_pc_d7ef.loopexit, !insn.addr !5578

dec_label_pc_d46c:                                ; preds = %dec_label_pc_d0c2
  %201 = add i64 %10, 3816
  %202 = add i64 %arg1, 586116, !insn.addr !5579
  %203 = add i64 %arg1, 586852, !insn.addr !5580
  %204 = ptrtoint i64* %stack_var_-72 to i64, !insn.addr !5581
  %205 = ptrtoint i64* %stack_var_-88 to i64, !insn.addr !5582
  %206 = add i64 %arg1, 586192, !insn.addr !5583
  %207 = inttoptr i64 %206 to i32*
  %208 = add i64 %arg1, 588951
  store i32 0, i32* %stack_var_-108.1.reg2mem, !insn.addr !5584
  br label %dec_label_pc_d4b5, !insn.addr !5584

dec_label_pc_d4b5:                                ; preds = %dec_label_pc_d61c, %dec_label_pc_d46c
  %stack_var_-108.1.reload = load i32, i32* %stack_var_-108.1.reg2mem
  %209 = sext i32 %stack_var_-108.1.reload to i64, !insn.addr !5585
  %210 = add i64 %209, %arg2, !insn.addr !5586
  %211 = inttoptr i64 %210 to i8*, !insn.addr !5586
  %212 = load i8, i8* %211, align 1, !insn.addr !5586
  %213 = add i64 %209, %arg3, !insn.addr !5587
  %214 = inttoptr i64 %213 to i8*, !insn.addr !5587
  store i8 %212, i8* %214, align 1, !insn.addr !5587
  %215 = or i64 %209, 1, !insn.addr !5588
  %216 = add i64 %215, %arg2, !insn.addr !5589
  %217 = inttoptr i64 %216 to i8*, !insn.addr !5589
  %218 = load i8, i8* %217, align 1, !insn.addr !5589
  %219 = add i64 %215, %arg3, !insn.addr !5590
  %220 = inttoptr i64 %219 to i8*, !insn.addr !5590
  store i8 %218, i8* %220, align 1, !insn.addr !5590
  %221 = add i64 %209, ptrtoint (i32* @global_var_2 to i64), !insn.addr !5591
  %222 = add i64 %221, %arg2, !insn.addr !5592
  %223 = inttoptr i64 %222 to i8*, !insn.addr !5592
  %224 = load i8, i8* %223, align 1, !insn.addr !5592
  %225 = add i64 %221, %arg3, !insn.addr !5593
  %226 = inttoptr i64 %225 to i8*, !insn.addr !5593
  store i8 %224, i8* %226, align 1, !insn.addr !5593
  %227 = add i64 %209, ptrtoint (i8** @global_var_3 to i64), !insn.addr !5594
  %228 = add i64 %227, %arg2, !insn.addr !5595
  %229 = inttoptr i64 %228 to i8*, !insn.addr !5595
  %230 = load i8, i8* %229, align 1, !insn.addr !5595
  %231 = add i64 %227, %arg3, !insn.addr !5596
  %232 = inttoptr i64 %231 to i8*, !insn.addr !5596
  store i8 %230, i8* %232, align 1, !insn.addr !5596
  %233 = add nsw i64 %209, 172, !insn.addr !5597
  %234 = add i64 %233, %arg2, !insn.addr !5598
  %235 = inttoptr i64 %234 to i64*, !insn.addr !5599
  %236 = load i64, i64* %235, align 8, !insn.addr !5599
  store i64 %236, i64* %stack_var_-88, align 8, !insn.addr !5600
  store i64 %205, i64* %rax.6.reg2mem, !insn.addr !5601
  store i64 %arg1, i64* %rdx.6.reg2mem, !insn.addr !5601
  br label %dec_label_pc_d52b, !insn.addr !5601

dec_label_pc_d52b:                                ; preds = %dec_label_pc_d52b, %dec_label_pc_d4b5
  %rdx.6.reload = load i64, i64* %rdx.6.reg2mem
  %rax.6.reload = load i64, i64* %rax.6.reg2mem
  %237 = add i64 %rdx.6.reload, 588951, !insn.addr !5602
  %238 = inttoptr i64 %237 to i8*, !insn.addr !5602
  %239 = load i8, i8* %238, align 1, !insn.addr !5602
  %240 = inttoptr i64 %rax.6.reload to i8*, !insn.addr !5603
  %241 = load i8, i8* %240, align 4, !insn.addr !5603
  %242 = xor i8 %241, %239, !insn.addr !5603
  store i8 %242, i8* %240, align 4, !insn.addr !5603
  %243 = add i64 %rax.6.reload, ptrtoint (i32* @global_var_1 to i64), !insn.addr !5604
  %244 = sub i64 %rdx.6.reload, ptrtoint (i32* @global_var_1 to i64), !insn.addr !5605
  %245 = icmp eq i64 %243, %204, !insn.addr !5606
  %246 = icmp eq i1 %245, false, !insn.addr !5607
  store i64 %243, i64* %rax.6.reg2mem, !insn.addr !5607
  store i64 %244, i64* %rdx.6.reg2mem, !insn.addr !5607
  br i1 %246, label %dec_label_pc_d52b, label %dec_label_pc_d541, !insn.addr !5607

dec_label_pc_d541:                                ; preds = %dec_label_pc_d52b
  %247 = add i64 %233, %arg3, !insn.addr !5608
  %248 = load i32, i32* %207, align 4, !insn.addr !5583
  %249 = call i64 @cipherUpdateRounds.321(i64 %203, i64 %202, i64 %205, i64* bitcast (i8* @global_var_10 to i64*), i64 %247, i32 %248, i64 %201), !insn.addr !5609
  %250 = add nsw i64 %209, 164, !insn.addr !5610
  %251 = add i64 %250, %arg2, !insn.addr !5611
  %252 = inttoptr i64 %251 to i64*, !insn.addr !5611
  %253 = load i64, i64* %252, align 8, !insn.addr !5611
  store i64 %253, i64* %stack_var_-88, align 8, !insn.addr !5612
  store i64 %205, i64* %rbx.3.reg2mem, !insn.addr !5613
  store i64 %arg1, i64* %r14.1.reg2mem, !insn.addr !5613
  br label %dec_label_pc_d597, !insn.addr !5613

dec_label_pc_d597:                                ; preds = %dec_label_pc_d597, %dec_label_pc_d541
  %r14.1.reload = load i64, i64* %r14.1.reg2mem
  %rbx.3.reload = load i64, i64* %rbx.3.reg2mem
  %254 = add i64 %r14.1.reload, 588951, !insn.addr !5614
  %255 = inttoptr i64 %254 to i8*, !insn.addr !5614
  %256 = load i8, i8* %255, align 1, !insn.addr !5614
  %257 = inttoptr i64 %rbx.3.reload to i8*, !insn.addr !5615
  %258 = load i8, i8* %257, align 4, !insn.addr !5615
  %259 = xor i8 %258, %256, !insn.addr !5615
  store i8 %259, i8* %257, align 4, !insn.addr !5615
  %260 = add i64 %rbx.3.reload, ptrtoint (i32* @global_var_1 to i64), !insn.addr !5616
  %261 = sub i64 %r14.1.reload, ptrtoint (i32* @global_var_1 to i64), !insn.addr !5617
  %262 = icmp eq i64 %260, %204, !insn.addr !5618
  %263 = icmp eq i1 %262, false, !insn.addr !5619
  store i64 %260, i64* %rbx.3.reg2mem, !insn.addr !5619
  store i64 %261, i64* %r14.1.reg2mem, !insn.addr !5619
  br i1 %263, label %dec_label_pc_d597, label %dec_label_pc_d5ae, !insn.addr !5619

dec_label_pc_d5ae:                                ; preds = %dec_label_pc_d597
  %264 = load i32, i32* %207, align 4, !insn.addr !5620
  %265 = add i64 %250, %arg3, !insn.addr !5621
  %266 = call i64 @cipherUpdateRounds.321(i64 %203, i64 %202, i64 %205, i64* bitcast (i8* @global_var_10 to i64*), i64 %265, i32 %264, i64 %201), !insn.addr !5622
  %267 = add i32 %stack_var_-108.1.reload, 4, !insn.addr !5623
  %268 = zext i32 %267 to i64, !insn.addr !5623
  %269 = add i32 %stack_var_-108.1.reload, 164, !insn.addr !5624
  store i64 %268, i64* %rsi.7.reg2mem, !insn.addr !5625
  br label %dec_label_pc_d613, !insn.addr !5625

dec_label_pc_d5ef:                                ; preds = %dec_label_pc_d5ef, %dec_label_pc_d613
  %rdx.7.reload = load i64, i64* %rdx.7.reg2mem
  %rax.7.reload = load i64, i64* %rax.7.reg2mem
  %sext5 = mul i64 %rdx.7.reload, 4294967296
  %270 = sdiv i64 %sext5, 4294967296, !insn.addr !5626
  %271 = add i64 %208, %rax.7.reload, !insn.addr !5627
  %272 = inttoptr i64 %271 to i8*, !insn.addr !5627
  %273 = load i8, i8* %272, align 1, !insn.addr !5627
  %274 = add i64 %270, %arg2, !insn.addr !5628
  %275 = inttoptr i64 %274 to i8*, !insn.addr !5628
  %276 = load i8, i8* %275, align 1, !insn.addr !5628
  %277 = xor i8 %276, %273, !insn.addr !5628
  store i8 %277, i8* %275, align 1, !insn.addr !5628
  %278 = add nsw i64 %rdx.7.reload, 1, !insn.addr !5629
  %279 = and i64 %278, 4294967295, !insn.addr !5629
  %280 = sub i64 %rax.7.reload, ptrtoint (i32* @global_var_1 to i64), !insn.addr !5630
  %281 = icmp eq i64 %280, -16, !insn.addr !5631
  %282 = icmp eq i1 %281, false, !insn.addr !5632
  store i64 %280, i64* %rax.7.reg2mem, !insn.addr !5632
  store i64 %279, i64* %rdx.7.reg2mem, !insn.addr !5632
  br i1 %282, label %dec_label_pc_d5ef, label %dec_label_pc_d60c, !insn.addr !5632

dec_label_pc_d60c:                                ; preds = %dec_label_pc_d5ef
  %283 = add nuw nsw i64 %rsi.7.reload, 16, !insn.addr !5633
  %284 = and i64 %283, 4294967295, !insn.addr !5633
  %285 = trunc i64 %283 to i32, !insn.addr !5634
  %286 = icmp eq i32 %269, %285, !insn.addr !5634
  store i64 %284, i64* %rsi.7.reg2mem, !insn.addr !5635
  br i1 %286, label %dec_label_pc_d61c, label %dec_label_pc_d613, !insn.addr !5635

dec_label_pc_d613:                                ; preds = %dec_label_pc_d60c, %dec_label_pc_d5ae
  %rsi.7.reload = load i64, i64* %rsi.7.reg2mem
  store i64 0, i64* %rax.7.reg2mem, !insn.addr !5636
  store i64 %rsi.7.reload, i64* %rdx.7.reg2mem, !insn.addr !5636
  br label %dec_label_pc_d5ef, !insn.addr !5636

dec_label_pc_d61c:                                ; preds = %dec_label_pc_d60c
  %287 = add i32 %stack_var_-108.1.reload, 188, !insn.addr !5637
  %288 = zext i32 %287 to i64, !insn.addr !5638
  %289 = icmp sgt i64 %7, %288, !insn.addr !5639
  store i32 %287, i32* %stack_var_-108.1.reg2mem, !insn.addr !5639
  br i1 %289, label %dec_label_pc_d4b5, label %dec_label_pc_d62f, !insn.addr !5639

dec_label_pc_d62f:                                ; preds = %dec_label_pc_d61c
  %sext19 = mul i64 %11, 4294967296
  %290 = sdiv i64 %sext19, 4294967296, !insn.addr !5640
  %291 = add i64 %arg2, 4, !insn.addr !5641
  store i64 0, i64* %rax.8.reg2mem, !insn.addr !5640
  store i64 0, i64* %rbx.4.reg2mem, !insn.addr !5640
  br label %dec_label_pc_d654, !insn.addr !5640

dec_label_pc_d654:                                ; preds = %dec_label_pc_d6a8, %dec_label_pc_d62f
  %rbx.4.reload = load i64, i64* %rbx.4.reg2mem
  %rax.8.reload = load i64, i64* %rax.8.reg2mem
  %sext7 = mul i64 %rax.8.reload, 4294967296
  %292 = sdiv i64 %sext7, 4294967296, !insn.addr !5642
  %sext8 = mul i64 %rbx.4.reload, 4294967296
  %293 = sdiv i64 %sext8, 4294967296, !insn.addr !5643
  %294 = add nsw i64 %292, %290, !insn.addr !5644
  %295 = add i64 %291, %293, !insn.addr !5641
  %296 = urem i64 %294, 2
  %297 = icmp eq i64 %296, 0, !insn.addr !5645
  store i64 160, i64* %rdx.8.reg2mem, !insn.addr !5646
  store i64 %295, i64* %rsi.8.reg2mem, !insn.addr !5646
  store i64 %294, i64* %rdi.6.reg2mem, !insn.addr !5646
  br i1 %297, label %dec_label_pc_d67c, label %dec_label_pc_d66c, !insn.addr !5646

dec_label_pc_d66c:                                ; preds = %dec_label_pc_d654
  %298 = inttoptr i64 %295 to i8*, !insn.addr !5647
  %299 = load i8, i8* %298, align 1, !insn.addr !5647
  %300 = inttoptr i64 %294 to i8*, !insn.addr !5648
  store i8 %299, i8* %300, align 1, !insn.addr !5648
  %301 = add nsw i64 %294, 1, !insn.addr !5649
  %302 = add i64 %295, 1, !insn.addr !5650
  store i64 159, i64* %rdx.8.reg2mem, !insn.addr !5651
  store i64 %302, i64* %rsi.8.reg2mem, !insn.addr !5651
  store i64 %301, i64* %rdi.6.reg2mem, !insn.addr !5651
  br label %dec_label_pc_d67c, !insn.addr !5651

dec_label_pc_d67c:                                ; preds = %dec_label_pc_d66c, %dec_label_pc_d654
  %rdi.6.reload = load i64, i64* %rdi.6.reg2mem
  %rsi.8.reload = load i64, i64* %rsi.8.reg2mem
  %rdx.8.reload = load i64, i64* %rdx.8.reg2mem
  %303 = and i64 %rdi.6.reload, 2
  %304 = icmp eq i64 %303, 0, !insn.addr !5652
  store i64 %rdx.8.reload, i64* %rdx.9.reg2mem, !insn.addr !5653
  store i64 %rsi.8.reload, i64* %rsi.9.reg2mem, !insn.addr !5653
  store i64 %rdi.6.reload, i64* %rdi.7.reg2mem, !insn.addr !5653
  br i1 %304, label %dec_label_pc_d693, label %dec_label_pc_d682, !insn.addr !5653

dec_label_pc_d682:                                ; preds = %dec_label_pc_d67c
  %305 = inttoptr i64 %rsi.8.reload to i16*, !insn.addr !5654
  %306 = load i16, i16* %305, align 2, !insn.addr !5654
  %307 = inttoptr i64 %rdi.6.reload to i16*, !insn.addr !5655
  store i16 %306, i16* %307, align 2, !insn.addr !5655
  %308 = add nsw i64 %rdi.6.reload, 2, !insn.addr !5656
  %309 = add i64 %rsi.8.reload, 2, !insn.addr !5657
  %310 = add nuw nsw i64 %rdx.8.reload, 254, !insn.addr !5658
  %311 = urem i64 %310, 256, !insn.addr !5658
  store i64 %311, i64* %rdx.9.reg2mem, !insn.addr !5658
  store i64 %309, i64* %rsi.9.reg2mem, !insn.addr !5658
  store i64 %308, i64* %rdi.7.reg2mem, !insn.addr !5658
  br label %dec_label_pc_d693, !insn.addr !5658

dec_label_pc_d693:                                ; preds = %dec_label_pc_d682, %dec_label_pc_d67c
  %rdi.7.reload = load i64, i64* %rdi.7.reg2mem
  %rsi.9.reload = load i64, i64* %rsi.9.reg2mem
  %rdx.9.reload = load i64, i64* %rdx.9.reg2mem
  %312 = and i64 %rdi.7.reload, 4
  %313 = icmp eq i64 %312, 0, !insn.addr !5659
  store i64 %rdx.9.reload, i64* %rdx.10.reg2mem, !insn.addr !5660
  store i64 %rsi.9.reload, i64* %rsi.10.reg2mem, !insn.addr !5660
  store i64 %rdi.7.reload, i64* %rdi.8.reg2mem, !insn.addr !5660
  br i1 %313, label %dec_label_pc_d6a8, label %dec_label_pc_d699, !insn.addr !5660

dec_label_pc_d699:                                ; preds = %dec_label_pc_d693
  %314 = inttoptr i64 %rsi.9.reload to i32*, !insn.addr !5661
  %315 = load i32, i32* %314, align 4, !insn.addr !5661
  %316 = inttoptr i64 %rdi.7.reload to i32*, !insn.addr !5662
  store i32 %315, i32* %316, align 4, !insn.addr !5662
  %317 = add nsw i64 %rdi.7.reload, 4, !insn.addr !5663
  %318 = add i64 %rsi.9.reload, 4, !insn.addr !5664
  %319 = add nsw i64 %rdx.9.reload, 4294967292, !insn.addr !5665
  %320 = and i64 %319, 4294967295, !insn.addr !5665
  store i64 %320, i64* %rdx.10.reg2mem, !insn.addr !5665
  store i64 %318, i64* %rsi.10.reg2mem, !insn.addr !5665
  store i64 %317, i64* %rdi.8.reg2mem, !insn.addr !5665
  br label %dec_label_pc_d6a8, !insn.addr !5665

dec_label_pc_d6a8:                                ; preds = %dec_label_pc_d699, %dec_label_pc_d693
  %rdi.8.reload = load i64, i64* %rdi.8.reg2mem
  %rsi.10.reload = load i64, i64* %rsi.10.reg2mem
  %rdx.10.reload = load i64, i64* %rdx.10.reg2mem
  %321 = trunc i64 %rdx.10.reload to i32, !insn.addr !5666
  %322 = lshr i32 %321, ptrtoint (i8** @global_var_3 to i32), !insn.addr !5667
  %323 = zext i32 %322 to i64, !insn.addr !5668
  %324 = inttoptr i64 %rsi.10.reload to i8*, !insn.addr !5669
  %325 = inttoptr i64 %rdi.8.reload to i8*, !insn.addr !5669
  call void @__asm_rep_movsq_memcpy(i8* %325, i8* %324, i64 %323), !insn.addr !5669
  %326 = add nuw nsw i64 %rbx.4.reload, 188, !insn.addr !5670
  %327 = and i64 %326, 4294967295, !insn.addr !5670
  %328 = add nuw nsw i64 %rax.8.reload, 160, !insn.addr !5671
  %329 = and i64 %328, 4294967295, !insn.addr !5671
  %330 = icmp sgt i64 %7, %327, !insn.addr !5672
  store i64 %329, i64* %rax.8.reg2mem, !insn.addr !5672
  store i64 %327, i64* %rbx.4.reg2mem, !insn.addr !5672
  br i1 %330, label %dec_label_pc_d654, label %dec_label_pc_d6f4, !insn.addr !5672

dec_label_pc_d6f4:                                ; preds = %dec_label_pc_d6a8
  %331 = load i32, i32* %207, align 4, !insn.addr !5673
  %sext20 = mul i64 %12, 4294967296
  %332 = sdiv i64 %sext20, 4294967296, !insn.addr !5674
  %333 = inttoptr i64 %329 to i64*, !insn.addr !5675
  %334 = call i64 @cipherUpdateRounds.321(i64 %203, i64 %202, i64 %290, i64* %333, i64 %332, i32 %331, i64 %201), !insn.addr !5675
  %335 = and i64 %7, 4294967295, !insn.addr !5676
  %336 = add i64 %arg3, 4, !insn.addr !5677
  store i64 0, i64* %rdx.11.reg2mem, !insn.addr !5676
  store i64 0, i64* %rbx.5.reg2mem, !insn.addr !5676
  br label %dec_label_pc_d750, !insn.addr !5676

dec_label_pc_d750:                                ; preds = %dec_label_pc_d7a5, %dec_label_pc_d6f4
  %rbx.5.reload = load i64, i64* %rbx.5.reg2mem
  %rdx.11.reload = load i64, i64* %rdx.11.reg2mem
  %sext10 = mul i64 %rdx.11.reload, 4294967296
  %337 = sdiv i64 %sext10, 4294967296, !insn.addr !5678
  %sext11 = mul i64 %rbx.5.reload, 4294967296
  %338 = sdiv i64 %sext11, 4294967296, !insn.addr !5679
  %339 = add i64 %336, %337, !insn.addr !5677
  %340 = add nsw i64 %338, %332, !insn.addr !5680
  %341 = urem i64 %339, 2
  %342 = icmp eq i64 %341, 0, !insn.addr !5681
  store i64 160, i64* %rax.9.reg2mem, !insn.addr !5682
  store i64 %340, i64* %rsi.11.reg2mem, !insn.addr !5682
  store i64 %339, i64* %rdi.9.reg2mem, !insn.addr !5682
  br i1 %342, label %dec_label_pc_d779, label %dec_label_pc_d769, !insn.addr !5682

dec_label_pc_d769:                                ; preds = %dec_label_pc_d750
  %343 = inttoptr i64 %340 to i8*, !insn.addr !5683
  %344 = load i8, i8* %343, align 1, !insn.addr !5683
  %345 = inttoptr i64 %339 to i8*, !insn.addr !5684
  store i8 %344, i8* %345, align 1, !insn.addr !5684
  %346 = add i64 %339, 1, !insn.addr !5685
  %347 = add nsw i64 %340, 1, !insn.addr !5686
  store i64 159, i64* %rax.9.reg2mem, !insn.addr !5687
  store i64 %347, i64* %rsi.11.reg2mem, !insn.addr !5687
  store i64 %346, i64* %rdi.9.reg2mem, !insn.addr !5687
  br label %dec_label_pc_d779, !insn.addr !5687

dec_label_pc_d779:                                ; preds = %dec_label_pc_d769, %dec_label_pc_d750
  %rdi.9.reload = load i64, i64* %rdi.9.reg2mem
  %rsi.11.reload = load i64, i64* %rsi.11.reg2mem
  %rax.9.reload = load i64, i64* %rax.9.reg2mem
  %348 = and i64 %rdi.9.reload, 2
  %349 = icmp eq i64 %348, 0, !insn.addr !5688
  store i64 %rax.9.reload, i64* %rax.10.reg2mem, !insn.addr !5689
  store i64 %rsi.11.reload, i64* %rsi.12.reg2mem, !insn.addr !5689
  store i64 %rdi.9.reload, i64* %rdi.10.reg2mem, !insn.addr !5689
  br i1 %349, label %dec_label_pc_d790, label %dec_label_pc_d77f, !insn.addr !5689

dec_label_pc_d77f:                                ; preds = %dec_label_pc_d779
  %350 = inttoptr i64 %rsi.11.reload to i16*, !insn.addr !5690
  %351 = load i16, i16* %350, align 2, !insn.addr !5690
  %352 = inttoptr i64 %rdi.9.reload to i16*, !insn.addr !5691
  store i16 %351, i16* %352, align 2, !insn.addr !5691
  %353 = add i64 %rdi.9.reload, 2, !insn.addr !5692
  %354 = add nsw i64 %rsi.11.reload, 2, !insn.addr !5693
  %355 = add nuw nsw i64 %rax.9.reload, 254, !insn.addr !5694
  %356 = urem i64 %355, 256, !insn.addr !5694
  store i64 %356, i64* %rax.10.reg2mem, !insn.addr !5694
  store i64 %354, i64* %rsi.12.reg2mem, !insn.addr !5694
  store i64 %353, i64* %rdi.10.reg2mem, !insn.addr !5694
  br label %dec_label_pc_d790, !insn.addr !5694

dec_label_pc_d790:                                ; preds = %dec_label_pc_d77f, %dec_label_pc_d779
  %rdi.10.reload = load i64, i64* %rdi.10.reg2mem
  %rsi.12.reload = load i64, i64* %rsi.12.reg2mem
  %rax.10.reload = load i64, i64* %rax.10.reg2mem
  %357 = and i64 %rdi.10.reload, 4
  %358 = icmp eq i64 %357, 0, !insn.addr !5695
  store i64 %rax.10.reload, i64* %rax.11.reg2mem, !insn.addr !5696
  store i64 %rsi.12.reload, i64* %rsi.13.reg2mem, !insn.addr !5696
  store i64 %rdi.10.reload, i64* %rdi.11.reg2mem, !insn.addr !5696
  br i1 %358, label %dec_label_pc_d7a5, label %dec_label_pc_d796, !insn.addr !5696

dec_label_pc_d796:                                ; preds = %dec_label_pc_d790
  %359 = inttoptr i64 %rsi.12.reload to i32*, !insn.addr !5697
  %360 = load i32, i32* %359, align 4, !insn.addr !5697
  %361 = inttoptr i64 %rdi.10.reload to i32*, !insn.addr !5698
  store i32 %360, i32* %361, align 4, !insn.addr !5698
  %362 = add i64 %rdi.10.reload, 4, !insn.addr !5699
  %363 = add nsw i64 %rsi.12.reload, 4, !insn.addr !5700
  %364 = add nsw i64 %rax.10.reload, 4294967292, !insn.addr !5701
  %365 = and i64 %364, 4294967295, !insn.addr !5701
  store i64 %365, i64* %rax.11.reg2mem, !insn.addr !5701
  store i64 %363, i64* %rsi.13.reg2mem, !insn.addr !5701
  store i64 %362, i64* %rdi.11.reg2mem, !insn.addr !5701
  br label %dec_label_pc_d7a5, !insn.addr !5701

dec_label_pc_d7a5:                                ; preds = %dec_label_pc_d796, %dec_label_pc_d790
  %rdi.11.reload = load i64, i64* %rdi.11.reg2mem
  %rsi.13.reload = load i64, i64* %rsi.13.reg2mem
  %rax.11.reload = load i64, i64* %rax.11.reg2mem
  %366 = trunc i64 %rax.11.reload to i32, !insn.addr !5702
  %367 = lshr i32 %366, ptrtoint (i8** @global_var_3 to i32), !insn.addr !5703
  %368 = zext i32 %367 to i64, !insn.addr !5704
  %369 = inttoptr i64 %rsi.13.reload to i8*, !insn.addr !5705
  %370 = inttoptr i64 %rdi.11.reload to i8*, !insn.addr !5705
  call void @__asm_rep_movsq_memcpy(i8* %370, i8* %369, i64 %368), !insn.addr !5705
  %371 = add nuw nsw i64 %rdx.11.reload, 188, !insn.addr !5706
  %372 = and i64 %371, 4294967295, !insn.addr !5706
  %373 = add nuw nsw i64 %rbx.5.reload, 160, !insn.addr !5707
  %374 = and i64 %373, 4294967295, !insn.addr !5707
  %375 = icmp ugt i64 %335, %372, !insn.addr !5708
  store i64 %372, i64* %rdx.11.reg2mem, !insn.addr !5708
  store i64 %374, i64* %rbx.5.reg2mem, !insn.addr !5708
  br i1 %375, label %dec_label_pc_d750, label %dec_label_pc_d7ef.loopexit32, !insn.addr !5708

dec_label_pc_d7ef.loopexit:                       ; preds = %dec_label_pc_d41d
  %376 = select i1 %0, i64 -8, i64 ptrtoint (i8* @global_var_8 to i64), !insn.addr !5539
  %377 = mul i64 %376, %193, !insn.addr !5575
  %378 = add i64 %377, %rdi.5.reload, !insn.addr !5575
  store i64 %378, i64* %rsi.14.reg2mem
  br label %dec_label_pc_d7ef

dec_label_pc_d7ef.loopexit32:                     ; preds = %dec_label_pc_d7a5
  %379 = select i1 %0, i64 -8, i64 ptrtoint (i8* @global_var_8 to i64), !insn.addr !5669
  %380 = mul i64 %379, %368, !insn.addr !5705
  %381 = add i64 %380, %rdi.11.reload, !insn.addr !5705
  store i64 %381, i64* %rsi.14.reg2mem
  br label %dec_label_pc_d7ef

dec_label_pc_d7ef:                                ; preds = %dec_label_pc_d7ef.loopexit32, %dec_label_pc_d7ef.loopexit, %dec_label_pc_d81d
  %382 = trunc i64 %11 to i32, !insn.addr !5709
  %383 = trunc i64 %12 to i32, !insn.addr !5710
  %rsi.14.reload = load i64, i64* %rsi.14.reg2mem
  %384 = call i64 @FUSB_ExFreePool.600(i32 %382, i64 %rsi.14.reload), !insn.addr !5711
  %385 = call i64 @FUSB_ExFreePool.600(i32 %383, i64 %rsi.14.reload), !insn.addr !5712
  br label %dec_label_pc_d807, !insn.addr !5712

dec_label_pc_d807:                                ; preds = %dec_label_pc_d7ef, %dec_label_pc_d044
  %386 = call i64 @__readgsqword(i64 40), !insn.addr !5713
  ret i64 ptrtoint (i32* @global_var_1 to i64), !insn.addr !5714

dec_label_pc_d81d:                                ; preds = %dec_label_pc_d0d1
  %387 = add i64 %arg1, 586192, !insn.addr !5715
  %388 = inttoptr i64 %387 to i32*, !insn.addr !5715
  %389 = load i32, i32* %388, align 4, !insn.addr !5715
  %390 = add i64 %arg1, 586116, !insn.addr !5716
  %391 = add i64 %arg1, 586852, !insn.addr !5717
  %392 = add i64 %10, 3816, !insn.addr !5718
  %sext27 = mul i64 %12, 4294967296
  %393 = sdiv i64 %sext27, 4294967296, !insn.addr !5719
  %sext28 = mul i64 %11, 4294967296
  %394 = sdiv i64 %sext28, 4294967296, !insn.addr !5720
  %395 = call i64 @cipherUpdateRounds.321(i64 %391, i64 %390, i64 %394, i64* null, i64 %393, i32 %389, i64 %392), !insn.addr !5721
  store i64 %390, i64* %rsi.14.reg2mem, !insn.addr !5722
  br label %dec_label_pc_d7ef, !insn.addr !5722

dec_label_pc_d857:                                ; preds = %dec_label_pc_d0c2
  ret i64 %12, !insn.addr !5723
}

define i32 @DTV_Muli2LibEnable(i64 %pTnim, i8* %pMulti2LibStartKey, i8 %StartKeyLen) local_unnamed_addr {
dec_label_pc_d87b:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = trunc i64 %0 to i32
  ret i32 %1
}

define i64 @DTV_Muli2LibEnable.261(i64 %arg1, i64* %arg2, i8 %arg3) local_unnamed_addr {
dec_label_pc_d8ab:
  %rax.1.reg2mem = alloca i64, !insn.addr !5724
  %rdx.0.reg2mem = alloca i64, !insn.addr !5724
  %rax.0.reg2mem = alloca i64, !insn.addr !5724
  %r13.0.reg2mem = alloca i64, !insn.addr !5724
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = ptrtoint i64* %arg2 to i64
  %stack_var_-120 = alloca i64, align 8
  %stack_var_-72 = alloca i64, align 8
  %stack_var_-87 = alloca i64, align 8
  %stack_var_-88 = alloca i8, align 1
  %2 = call i64 @mcount(), !insn.addr !5725
  %3 = call i64 @__readgsqword(i64 40), !insn.addr !5726
  %4 = add i64 %arg1, 7480, !insn.addr !5727
  %5 = inttoptr i64 %4 to i64*, !insn.addr !5727
  %6 = load i64, i64* %5, align 8, !insn.addr !5727
  %7 = add i64 %1, sext (i32 ptrtoint (i32* @global_var_1 to i32) to i64), !insn.addr !5728
  %8 = ptrtoint i64* %stack_var_-87 to i64, !insn.addr !5729
  %9 = ptrtoint i64* %stack_var_-72 to i64, !insn.addr !5730
  %10 = ptrtoint i8* %stack_var_-88 to i64, !insn.addr !5731
  %sext = mul i64 %7, 4294967296
  %11 = sdiv i64 %sext, 4294967296
  %12 = trunc i64 %0 to i8
  %13 = urem i64 %0, 256
  store i64 0, i64* %r13.0.reg2mem, !insn.addr !5730
  br label %dec_label_pc_d926, !insn.addr !5730

dec_label_pc_d926:                                ; preds = %dec_label_pc_d96c, %dec_label_pc_d8ab
  %r13.0.reload = load i64, i64* %r13.0.reg2mem
  %14 = urem i64 %r13.0.reload, 256, !insn.addr !5732
  %15 = shl i64 %14, ptrtoint (i16* @global_var_4 to i64), !insn.addr !5733
  %16 = call i64 @Gen_Identify_Key.610(i64 %10, i64 %15), !insn.addr !5734
  %17 = load i8, i8* %stack_var_-88, align 1, !insn.addr !5735
  %18 = icmp eq i8 %17, %12, !insn.addr !5735
  %19 = icmp eq i1 %18, false, !insn.addr !5736
  store i64 %8, i64* %rax.0.reg2mem, !insn.addr !5736
  store i64 %11, i64* %rdx.0.reg2mem, !insn.addr !5736
  store i64 %13, i64* %rax.1.reg2mem, !insn.addr !5736
  br i1 %19, label %dec_label_pc_d96c, label %dec_label_pc_d956, !insn.addr !5736

dec_label_pc_d956:                                ; preds = %dec_label_pc_d926, %dec_label_pc_d95d
  %rdx.0.reload = load i64, i64* %rdx.0.reg2mem
  %rax.0.reload = load i64, i64* %rax.0.reg2mem
  %20 = inttoptr i64 %rdx.0.reload to i8*, !insn.addr !5737
  %21 = load i8, i8* %20, align 1, !insn.addr !5737
  %22 = inttoptr i64 %rax.0.reload to i8*, !insn.addr !5738
  %23 = load i8, i8* %22, align 4, !insn.addr !5738
  %24 = icmp eq i8 %21, %23, !insn.addr !5738
  %25 = icmp eq i1 %24, false, !insn.addr !5739
  store i64 %rax.0.reload, i64* %rax.1.reg2mem, !insn.addr !5739
  br i1 %25, label %dec_label_pc_d96c, label %dec_label_pc_d95d, !insn.addr !5739

dec_label_pc_d95d:                                ; preds = %dec_label_pc_d956
  %26 = add i64 %rdx.0.reload, ptrtoint (i32* @global_var_1 to i64), !insn.addr !5740
  %27 = add i64 %rax.0.reload, ptrtoint (i32* @global_var_1 to i64), !insn.addr !5741
  %28 = icmp eq i64 %27, %9, !insn.addr !5742
  %29 = icmp eq i1 %28, false, !insn.addr !5743
  store i64 %27, i64* %rax.0.reg2mem, !insn.addr !5743
  store i64 %26, i64* %rdx.0.reg2mem, !insn.addr !5743
  br i1 %29, label %dec_label_pc_d956, label %dec_label_pc_d97b, !insn.addr !5743

dec_label_pc_d96c:                                ; preds = %dec_label_pc_d956, %dec_label_pc_d926
  %30 = add nuw nsw i64 %r13.0.reload, zext (i32 ptrtoint (i32* @global_var_1 to i32) to i64), !insn.addr !5744
  %31 = and i64 %30, 4294967295, !insn.addr !5744
  %32 = trunc i64 %30 to i8, !insn.addr !5745
  %33 = icmp eq i8 %32, -128, !insn.addr !5745
  %34 = icmp eq i1 %33, false, !insn.addr !5746
  store i64 %31, i64* %r13.0.reg2mem, !insn.addr !5746
  br i1 %34, label %dec_label_pc_d926, label %dec_label_pc_d976, !insn.addr !5746

dec_label_pc_d976:                                ; preds = %dec_label_pc_d96c
  %rax.1.reload = load i64, i64* %rax.1.reg2mem
  ret i64 %rax.1.reload, !insn.addr !5747

dec_label_pc_d97b:                                ; preds = %dec_label_pc_d95d
  %35 = zext i8 %21 to i64, !insn.addr !5737
  %36 = add i64 %arg1, 588476, !insn.addr !5748
  %37 = inttoptr i64 %36 to i8*, !insn.addr !5748
  store i8 ptrtoint (i32* @global_var_1 to i8), i8* %37, align 1, !insn.addr !5748
  %38 = add i64 %arg1, 7472, !insn.addr !5749
  %39 = inttoptr i64 %38 to i8*, !insn.addr !5749
  %40 = load i8, i8* %39, align 1, !insn.addr !5749
  %41 = icmp eq i8 %40, 0, !insn.addr !5750
  %42 = icmp eq i1 %41, false, !insn.addr !5751
  br i1 %42, label %dec_label_pc_d9ee, label %dec_label_pc_d99d, !insn.addr !5751

dec_label_pc_d99d:                                ; preds = %dec_label_pc_d97b
  %43 = add i64 %arg1, ptrtoint (i8* @global_var_8 to i64), !insn.addr !5752
  %44 = call i64 @TS_Init.333(i64 %43, i64 0, i64 0), !insn.addr !5753
  %45 = add i64 %arg1, 588464, !insn.addr !5754
  %46 = inttoptr i64 %45 to i64*, !insn.addr !5754
  store i64 %44, i64* %46, align 8, !insn.addr !5754
  %47 = add i64 %arg1, 5584, !insn.addr !5755
  %48 = inttoptr i64 %47 to i32*, !insn.addr !5755
  %49 = load i32, i32* %48, align 4, !insn.addr !5755
  %50 = sext i32 %49 to i64, !insn.addr !5755
  %51 = add i64 %arg1, 5269, !insn.addr !5756
  %52 = ptrtoint i64* %stack_var_-120 to i64, !insn.addr !5757
  %53 = call i64 @memcpy(i64 %52, i64 %51, i64 %50, i64 %35), !insn.addr !5758
  %54 = load i64, i64* %46, align 8, !insn.addr !5759
  %55 = call i64 @TS_SetBcasCardID.521(i64 %54), !insn.addr !5760
  ret i64 %55, !insn.addr !5761

dec_label_pc_d9ee:                                ; preds = %dec_label_pc_d97b
  %56 = zext i8 %40 to i64, !insn.addr !5749
  %57 = add i64 %6, 1248, !insn.addr !5762
  %58 = inttoptr i64 %57 to i64*, !insn.addr !5762
  %59 = load i64, i64* %58, align 8, !insn.addr !5762
  %60 = add i64 %59, 8, !insn.addr !5763
  %61 = call i64 @TS_Init.333(i64 %60, i64 0, i64 %56), !insn.addr !5764
  %62 = add i64 %arg1, 588464, !insn.addr !5765
  %63 = inttoptr i64 %62 to i64*, !insn.addr !5765
  store i64 %61, i64* %63, align 8, !insn.addr !5765
  %64 = add i64 %59, 5584, !insn.addr !5766
  %65 = inttoptr i64 %64 to i32*, !insn.addr !5766
  %66 = load i32, i32* %65, align 4, !insn.addr !5766
  %67 = sext i32 %66 to i64, !insn.addr !5766
  %68 = add i64 %59, 5269, !insn.addr !5767
  %69 = ptrtoint i64* %stack_var_-120 to i64, !insn.addr !5768
  %70 = call i64 @memcpy(i64 %69, i64 %68, i64 %67, i64 %35), !insn.addr !5769
  ret i64 %70, !insn.addr !5770
}

define i32 @DTV_EncAES_TS(i64 %pTuner, i8* %Input188B, i8* %Output188B) local_unnamed_addr {
dec_label_pc_da45:
  %rax.0.reg2mem = alloca i64, !insn.addr !5771
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = call i64 @TS_SetBcasCardID.521(i64 %pTuner), !insn.addr !5772
  %2 = add i64 %0, -56, !insn.addr !5773
  %3 = inttoptr i64 %2 to i64*, !insn.addr !5773
  %4 = load i64, i64* %3, align 8, !insn.addr !5773
  %5 = call i64 @__readgsqword(i64 40), !insn.addr !5774
  %6 = icmp eq i64 %4, %5, !insn.addr !5774
  store i64 ptrtoint (i32* @global_var_1 to i64), i64* %rax.0.reg2mem, !insn.addr !5775
  br i1 %6, label %dec_label_pc_da66, label %dec_label_pc_da61, !insn.addr !5775

dec_label_pc_da61:                                ; preds = %dec_label_pc_da45
  %7 = call i64 @__stack_chk_fail(), !insn.addr !5776
  store i64 %7, i64* %rax.0.reg2mem, !insn.addr !5776
  br label %dec_label_pc_da66, !insn.addr !5776

dec_label_pc_da66:                                ; preds = %dec_label_pc_da61, %dec_label_pc_da45
  %rax.0.reload = load i64, i64* %rax.0.reg2mem
  %8 = trunc i64 %rax.0.reload to i32, !insn.addr !5777
  ret i32 %8, !insn.addr !5777
}

define i64 @DTV_EncAES_TS.273(i64 %arg1, i64 %arg2, i64 %arg3) local_unnamed_addr {
dec_label_pc_da75:
  %rdi.7.reg2mem = alloca i64, !insn.addr !5778
  %rax.3.reg2mem = alloca i64, !insn.addr !5778
  %.reg2mem12 = alloca i64, !insn.addr !5778
  %rdi.6.reg2mem = alloca i64, !insn.addr !5778
  %rax.2.reg2mem = alloca i64, !insn.addr !5778
  %.reg2mem10 = alloca i64, !insn.addr !5778
  %.pre-phi9.reg2mem = alloca i8, !insn.addr !5778
  %rdi.5.reg2mem = alloca i64, !insn.addr !5778
  %rax.1.reg2mem = alloca i64, !insn.addr !5778
  %.reg2mem = alloca i64, !insn.addr !5778
  %.pre-phi7.reg2mem = alloca i8, !insn.addr !5778
  %r15.0.reg2mem = alloca i64, !insn.addr !5778
  %r12.0.reg2mem = alloca i64, !insn.addr !5778
  %rdx.3.reg2mem = alloca i64, !insn.addr !5778
  %rax.0.reg2mem = alloca i64, !insn.addr !5778
  %rdi.4.reg2mem = alloca i64, !insn.addr !5778
  %rdi.3.reg2mem = alloca i64, !insn.addr !5778
  %rdi.2.reg2mem = alloca i64, !insn.addr !5778
  %rdx.2.reg2mem = alloca i64, !insn.addr !5778
  %rdi.1.reg2mem = alloca i64, !insn.addr !5778
  %rdx.1.reg2mem = alloca i64, !insn.addr !5778
  %.pre-phi5.reg2mem = alloca i8, !insn.addr !5778
  %rdi.0.reg2mem = alloca i64, !insn.addr !5778
  %rdx.0.reg2mem = alloca i64, !insn.addr !5778
  %.pre-phi.reg2mem = alloca i8, !insn.addr !5778
  %rsi = alloca i64, align 8
  %0 = call i1 @__decompiler_undefined_function_2()
  %stack_var_-296 = alloca i64, align 8
  %1 = call i64 @__decompiler_undefined_function_0()
  %stack_var_-88 = alloca i64, align 8
  %stack_var_-103 = alloca i64, align 8
  %stack_var_-104 = alloca i64, align 8
  %2 = call i64 @mcount(), !insn.addr !5779
  %3 = call i64 @__readgsqword(i64 40), !insn.addr !5780
  %4 = add i64 %arg1, 7480, !insn.addr !5781
  %5 = inttoptr i64 %4 to i64*, !insn.addr !5781
  %6 = load i64, i64* %5, align 8, !insn.addr !5781
  %7 = trunc i64 %arg3 to i8
  %8 = and i8 %7, ptrtoint (i32* @global_var_1 to i8), !insn.addr !5782
  %9 = icmp eq i8 %8, 0, !insn.addr !5782
  store i8 %7, i8* %.pre-phi.reg2mem, !insn.addr !5783
  store i64 188, i64* %rdx.0.reg2mem, !insn.addr !5783
  store i64 %arg3, i64* %rdi.0.reg2mem, !insn.addr !5783
  br i1 %9, label %dec_label_pc_dacc, label %dec_label_pc_dac3, !insn.addr !5783

dec_label_pc_dac3:                                ; preds = %dec_label_pc_da75
  %10 = inttoptr i64 %arg3 to i8*, !insn.addr !5784
  store i8 0, i8* %10, align 1, !insn.addr !5784
  %11 = add i64 %arg3, ptrtoint (i32* @global_var_1 to i64), !insn.addr !5785
  %.pre3 = trunc i64 %11 to i8, !insn.addr !5786
  store i8 %.pre3, i8* %.pre-phi.reg2mem, !insn.addr !5787
  store i64 187, i64* %rdx.0.reg2mem, !insn.addr !5787
  store i64 %11, i64* %rdi.0.reg2mem, !insn.addr !5787
  br label %dec_label_pc_dacc, !insn.addr !5787

dec_label_pc_dacc:                                ; preds = %dec_label_pc_dac3, %dec_label_pc_da75
  %rdi.0.reload = load i64, i64* %rdi.0.reg2mem
  %rdx.0.reload = load i64, i64* %rdx.0.reg2mem
  %.pre-phi.reload = load i8, i8* %.pre-phi.reg2mem
  %12 = and i8 %.pre-phi.reload, ptrtoint (i32* @global_var_2 to i8), !insn.addr !5786
  %13 = icmp eq i8 %12, 0, !insn.addr !5786
  store i8 %.pre-phi.reload, i8* %.pre-phi5.reg2mem, !insn.addr !5788
  store i64 %rdx.0.reload, i64* %rdx.1.reg2mem, !insn.addr !5788
  store i64 %rdi.0.reload, i64* %rdi.1.reg2mem, !insn.addr !5788
  br i1 %13, label %dec_label_pc_dadc, label %dec_label_pc_dad2, !insn.addr !5788

dec_label_pc_dad2:                                ; preds = %dec_label_pc_dacc
  %14 = inttoptr i64 %rdi.0.reload to i16*, !insn.addr !5789
  store i16 0, i16* %14, align 2, !insn.addr !5789
  %15 = add i64 %rdi.0.reload, ptrtoint (i32* @global_var_2 to i64), !insn.addr !5790
  %16 = add nuw nsw i64 %rdx.0.reload, 254, !insn.addr !5791
  %17 = and i64 %16, 191, !insn.addr !5791
  %.pre4 = trunc i64 %15 to i8, !insn.addr !5792
  store i8 %.pre4, i8* %.pre-phi5.reg2mem, !insn.addr !5791
  store i64 %17, i64* %rdx.1.reg2mem, !insn.addr !5791
  store i64 %15, i64* %rdi.1.reg2mem, !insn.addr !5791
  br label %dec_label_pc_dadc, !insn.addr !5791

dec_label_pc_dadc:                                ; preds = %dec_label_pc_dad2, %dec_label_pc_dacc
  %rdi.1.reload = load i64, i64* %rdi.1.reg2mem
  %rdx.1.reload = load i64, i64* %rdx.1.reg2mem
  %.pre-phi5.reload = load i8, i8* %.pre-phi5.reg2mem
  %18 = and i8 %.pre-phi5.reload, ptrtoint (i16* @global_var_4 to i8), !insn.addr !5792
  %19 = icmp eq i8 %18, 0, !insn.addr !5792
  store i64 %rdx.1.reload, i64* %rdx.2.reg2mem, !insn.addr !5793
  store i64 %rdi.1.reload, i64* %rdi.2.reg2mem, !insn.addr !5793
  br i1 %19, label %dec_label_pc_daeb, label %dec_label_pc_dae2, !insn.addr !5793

dec_label_pc_dae2:                                ; preds = %dec_label_pc_dadc
  %20 = inttoptr i64 %rdi.1.reload to i32*, !insn.addr !5794
  store i32 0, i32* %20, align 4, !insn.addr !5794
  %21 = add i64 %rdi.1.reload, ptrtoint (i16* @global_var_4 to i64), !insn.addr !5795
  %22 = add nsw i64 %rdx.1.reload, 4294967292, !insn.addr !5796
  %23 = and i64 %22, 4294967295, !insn.addr !5796
  store i64 %23, i64* %rdx.2.reg2mem, !insn.addr !5796
  store i64 %21, i64* %rdi.2.reg2mem, !insn.addr !5796
  br label %dec_label_pc_daeb, !insn.addr !5796

dec_label_pc_daeb:                                ; preds = %dec_label_pc_dae2, %dec_label_pc_dadc
  %rdi.2.reload = load i64, i64* %rdi.2.reg2mem
  %rdx.2.reload = load i64, i64* %rdx.2.reg2mem
  %24 = trunc i64 %rdx.2.reload to i32, !insn.addr !5797
  %25 = lshr i32 %24, ptrtoint (i8** @global_var_3 to i32), !insn.addr !5798
  %26 = zext i32 %25 to i64, !insn.addr !5799
  %27 = inttoptr i64 %rdi.2.reload to i8*, !insn.addr !5800
  call void @__asm_rep_stosq_memset(i8* %27, i64 0, i64 %26), !insn.addr !5800
  %28 = select i1 %0, i64 -8, i64 ptrtoint (i8* @global_var_8 to i64), !insn.addr !5800
  %29 = mul i64 %28, %26, !insn.addr !5800
  %30 = add i64 %29, %rdi.2.reload, !insn.addr !5800
  %31 = trunc i64 %rdx.2.reload to i8, !insn.addr !5801
  %32 = and i8 %31, ptrtoint (i16* @global_var_4 to i8), !insn.addr !5801
  %33 = icmp eq i8 %32, 0, !insn.addr !5801
  store i64 %30, i64* %rdi.3.reg2mem, !insn.addr !5802
  br i1 %33, label %dec_label_pc_db00, label %dec_label_pc_dafa, !insn.addr !5802

dec_label_pc_dafa:                                ; preds = %dec_label_pc_daeb
  %34 = inttoptr i64 %30 to i32*, !insn.addr !5803
  store i32 0, i32* %34, align 4, !insn.addr !5803
  %35 = add i64 %30, ptrtoint (i16* @global_var_4 to i64), !insn.addr !5804
  store i64 %35, i64* %rdi.3.reg2mem, !insn.addr !5804
  br label %dec_label_pc_db00, !insn.addr !5804

dec_label_pc_db00:                                ; preds = %dec_label_pc_dafa, %dec_label_pc_daeb
  %rdi.3.reload = load i64, i64* %rdi.3.reg2mem
  %36 = and i8 %31, ptrtoint (i32* @global_var_2 to i8), !insn.addr !5805
  %37 = icmp eq i8 %36, 0, !insn.addr !5805
  store i64 %rdi.3.reload, i64* %rdi.4.reg2mem, !insn.addr !5806
  br i1 %37, label %dec_label_pc_db0c, label %dec_label_pc_db05, !insn.addr !5806

dec_label_pc_db05:                                ; preds = %dec_label_pc_db00
  %38 = inttoptr i64 %rdi.3.reload to i16*, !insn.addr !5807
  store i16 0, i16* %38, align 2, !insn.addr !5807
  %39 = add i64 %rdi.3.reload, ptrtoint (i32* @global_var_2 to i64), !insn.addr !5808
  store i64 %39, i64* %rdi.4.reg2mem, !insn.addr !5808
  br label %dec_label_pc_db0c, !insn.addr !5808

dec_label_pc_db0c:                                ; preds = %dec_label_pc_db05, %dec_label_pc_db00
  %40 = and i8 %31, ptrtoint (i32* @global_var_1 to i8), !insn.addr !5809
  %41 = icmp eq i8 %40, 0, !insn.addr !5809
  br i1 %41, label %dec_label_pc_db13, label %dec_label_pc_db11, !insn.addr !5810

dec_label_pc_db11:                                ; preds = %dec_label_pc_db0c
  %rdi.4.reload = load i64, i64* %rdi.4.reg2mem
  %42 = inttoptr i64 %rdi.4.reload to i8*, !insn.addr !5811
  store i8 0, i8* %42, align 1, !insn.addr !5811
  br label %dec_label_pc_db13, !insn.addr !5811

dec_label_pc_db13:                                ; preds = %dec_label_pc_db11, %dec_label_pc_db0c
  %43 = add i64 %arg1, 5592, !insn.addr !5812
  %44 = inttoptr i64 %43 to i8*, !insn.addr !5812
  %45 = load i8, i8* %44, align 1, !insn.addr !5812
  %46 = icmp eq i8 %45, 0, !insn.addr !5812
  %47 = icmp eq i1 %46, false, !insn.addr !5813
  br i1 %47, label %dec_label_pc_dcad, label %dec_label_pc_db21, !insn.addr !5813

dec_label_pc_db21:                                ; preds = %dec_label_pc_db13
  %48 = add i64 %arg2, ptrtoint (i8** @global_var_7 to i64), !insn.addr !5814
  store i64 %48, i64* %rsi, align 8, !insn.addr !5814
  store i64 %arg2, i64* %rax.0.reg2mem, !insn.addr !5814
  store i64 %arg3, i64* %rdx.3.reg2mem, !insn.addr !5814
  br label %dec_label_pc_db36, !insn.addr !5814

dec_label_pc_db36:                                ; preds = %dec_label_pc_db36, %dec_label_pc_db21
  %rdx.3.reload = load i64, i64* %rdx.3.reg2mem
  %rax.0.reload = load i64, i64* %rax.0.reg2mem
  %49 = inttoptr i64 %rax.0.reload to i8*, !insn.addr !5815
  %50 = load i8, i8* %49, align 1, !insn.addr !5815
  %51 = inttoptr i64 %rdx.3.reload to i8*, !insn.addr !5816
  store i8 %50, i8* %51, align 1, !insn.addr !5816
  %52 = add i64 %rax.0.reload, ptrtoint (i32* @global_var_1 to i64), !insn.addr !5817
  %53 = add i64 %rdx.3.reload, ptrtoint (i32* @global_var_1 to i64), !insn.addr !5818
  %54 = load i64, i64* %rsi, align 8, !insn.addr !5819
  %55 = icmp eq i64 %52, %54, !insn.addr !5819
  %56 = icmp eq i1 %55, false, !insn.addr !5820
  store i64 %52, i64* %rax.0.reg2mem, !insn.addr !5820
  store i64 %53, i64* %rdx.3.reg2mem, !insn.addr !5820
  br i1 %56, label %dec_label_pc_db36, label %dec_label_pc_db48, !insn.addr !5820

dec_label_pc_db48:                                ; preds = %dec_label_pc_db36
  %57 = add i64 %6, 3816, !insn.addr !5821
  %58 = add i64 %arg1, 585380, !insn.addr !5822
  %59 = add i64 %arg1, 586852, !insn.addr !5823
  %60 = ptrtoint i64* %stack_var_-103 to i64, !insn.addr !5824
  %61 = inttoptr i64 %48 to i64*
  %62 = add i64 %arg1, 585456
  %63 = inttoptr i64 %62 to i32*
  %64 = ptrtoint i64* %stack_var_-88 to i64
  %65 = ptrtoint i64* %stack_var_-104 to i64
  %66 = add i64 %arg3, ptrtoint (i8** @global_var_7 to i64)
  %67 = add i64 %arg2, ptrtoint (i8* @global_var_8 to i64)
  %68 = add i64 %60, ptrtoint (i8* @global_var_8 to i64)
  %69 = inttoptr i64 %68 to i32*
  %70 = add i64 %60, ptrtoint ([4 x i8]* @global_var_c to i64)
  %71 = inttoptr i64 %70 to i16*
  %72 = add i64 %60, ptrtoint (i16** @global_var_e to i64)
  %73 = inttoptr i64 %72 to i8*
  store i64 ptrtoint (i32* @global_var_1 to i64), i64* %r12.0.reg2mem, !insn.addr !5825
  store i64 0, i64* %r15.0.reg2mem, !insn.addr !5825
  br label %dec_label_pc_dbad, !insn.addr !5825

dec_label_pc_dba5:                                ; preds = %dec_label_pc_dc19, %dec_label_pc_dbb3
  %74 = add i64 %r12.0.reload, zext (i32 ptrtoint (i32* @global_var_1 to i32) to i64), !insn.addr !5826
  %75 = and i64 %74, 4294967295, !insn.addr !5826
  %76 = add nuw nsw i64 %r15.0.reload, zext (i32 ptrtoint (i8* @global_var_f to i32) to i64), !insn.addr !5827
  %77 = and i64 %76, 4294967295, !insn.addr !5827
  store i64 %75, i64* %r12.0.reg2mem, !insn.addr !5827
  store i64 %77, i64* %r15.0.reg2mem, !insn.addr !5827
  br label %dec_label_pc_dbad, !insn.addr !5827

dec_label_pc_dbad:                                ; preds = %dec_label_pc_dba5, %dec_label_pc_db48
  %r15.0.reload = load i64, i64* %r15.0.reg2mem
  %r12.0.reload = load i64, i64* %r12.0.reg2mem
  %78 = trunc i64 %r12.0.reload to i32, !insn.addr !5828
  %79 = icmp eq i32 %78, ptrtoint (i32* @global_var_1 to i32), !insn.addr !5828
  %80 = icmp eq i1 %79, false, !insn.addr !5829
  br i1 %80, label %dec_label_pc_dc19, label %dec_label_pc_dbb3, !insn.addr !5829

dec_label_pc_dbb3:                                ; preds = %dec_label_pc_dbad
  %81 = load i64, i64* %61, align 8, !insn.addr !5830
  store i64 %81, i64* %stack_var_-104, align 8, !insn.addr !5831
  %82 = load i32, i32* %63, align 4, !insn.addr !5832
  %83 = call i64 @cipherUpdateRounds.321(i64 %59, i64 %58, i64 %65, i64* bitcast (i8* @global_var_10 to i64*), i64 %64, i32 %82, i64 %57), !insn.addr !5833
  %sext = mul i64 %r15.0.reload, 4294967296
  %84 = sdiv i64 %sext, 4294967296, !insn.addr !5834
  %85 = mul i64 %84, ptrtoint (i32* @global_var_1 to i64), !insn.addr !5835
  %86 = add i64 %85, %66, !insn.addr !5835
  %87 = load i64, i64* %stack_var_-88, align 8, !insn.addr !5836
  %88 = inttoptr i64 %86 to i64*, !insn.addr !5837
  store i64 %87, i64* %88, align 8, !insn.addr !5837
  %89 = add i64 %86, ptrtoint (i8* @global_var_8 to i64), !insn.addr !5838
  %90 = inttoptr i64 %89 to i64*, !insn.addr !5838
  br label %dec_label_pc_dba5, !insn.addr !5839

dec_label_pc_dc19:                                ; preds = %dec_label_pc_dbad
  %sext2 = mul i64 %r15.0.reload, 4294967296
  %91 = sdiv i64 %sext2, 4294967296, !insn.addr !5840
  %92 = mul i64 %91, ptrtoint (i32* @global_var_1 to i64), !insn.addr !5841
  %93 = add i64 %92, %66, !insn.addr !5841
  %94 = inttoptr i64 %93 to i8*, !insn.addr !5842
  %95 = load i8, i8* %94, align 1, !insn.addr !5842
  %96 = sext i8 %95 to i64, !insn.addr !5843
  store i64 %96, i64* %stack_var_-104, align 8, !insn.addr !5843
  %97 = add i64 %67, %92, !insn.addr !5844
  %98 = inttoptr i64 %97 to i64*, !insn.addr !5845
  %99 = load i64, i64* %98, align 8, !insn.addr !5845
  store i64 %99, i64* %stack_var_-103, align 8, !insn.addr !5846
  %100 = add i64 %97, ptrtoint (i8* @global_var_8 to i64), !insn.addr !5847
  %101 = inttoptr i64 %100 to i32*, !insn.addr !5847
  %102 = load i32, i32* %101, align 4, !insn.addr !5847
  store i32 %102, i32* %69, align 4, !insn.addr !5848
  %103 = add i64 %97, ptrtoint ([4 x i8]* @global_var_c to i64), !insn.addr !5849
  %104 = inttoptr i64 %103 to i16*, !insn.addr !5849
  %105 = load i16, i16* %104, align 2, !insn.addr !5849
  store i16 %105, i16* %71, align 2, !insn.addr !5850
  %106 = add i64 %97, ptrtoint (i16** @global_var_e to i64), !insn.addr !5851
  %107 = inttoptr i64 %106 to i8*, !insn.addr !5851
  %108 = load i8, i8* %107, align 1, !insn.addr !5851
  store i8 %108, i8* %73, align 8, !insn.addr !5852
  %109 = load i32, i32* %63, align 4, !insn.addr !5853
  %110 = call i64 @cipherUpdateRounds.321(i64 %59, i64 %58, i64 %65, i64* bitcast (i8* @global_var_10 to i64*), i64 %64, i32 %109, i64 %57), !insn.addr !5854
  %111 = load i64, i64* %stack_var_-88, align 8, !insn.addr !5855
  %112 = inttoptr i64 %93 to i64*, !insn.addr !5856
  store i64 %111, i64* %112, align 8, !insn.addr !5856
  %113 = icmp sgt i32 %78, ptrtoint (i8** @global_var_b to i32), !insn.addr !5857
  br i1 %113, label %dec_label_pc_dca8, label %dec_label_pc_dba5, !insn.addr !5857

dec_label_pc_dca8:                                ; preds = %dec_label_pc_dc19
  %114 = add i64 %93, ptrtoint (i8* @global_var_8 to i64), !insn.addr !5858
  %115 = inttoptr i64 %114 to i64*, !insn.addr !5858
  ret i64 %1, !insn.addr !5859

dec_label_pc_dcad:                                ; preds = %dec_label_pc_db13
  %116 = add i64 %arg1, 586869, !insn.addr !5860
  %117 = inttoptr i64 %116 to i8*, !insn.addr !5860
  %118 = load i8, i8* %117, align 1, !insn.addr !5860
  %119 = icmp eq i8 %118, 7, !insn.addr !5861
  %120 = icmp eq i1 %119, false, !insn.addr !5862
  br i1 %120, label %dec_label_pc_dcd4, label %dec_label_pc_dcb9, !insn.addr !5862

dec_label_pc_dcb9:                                ; preds = %dec_label_pc_dcad
  %121 = call i64 @DTV_Software_process_5606B2.177(i64 %arg1, i64 %arg2, i64 %arg3), !insn.addr !5863
  ret i64 %121, !insn.addr !5864

dec_label_pc_dcd4:                                ; preds = %dec_label_pc_dcad
  %122 = icmp eq i8 %118, 8, !insn.addr !5865
  %123 = icmp eq i1 %122, false, !insn.addr !5866
  br i1 %123, label %dec_label_pc_dd70, label %dec_label_pc_dcdc, !insn.addr !5866

dec_label_pc_dcdc:                                ; preds = %dec_label_pc_dcd4
  store i64 %arg2, i64* %rsi, align 8, !insn.addr !5867
  store i8 %7, i8* %.pre-phi7.reg2mem, !insn.addr !5868
  store i64 %arg2, i64* %.reg2mem, !insn.addr !5868
  store i64 188, i64* %rax.1.reg2mem, !insn.addr !5868
  store i64 %arg3, i64* %rdi.5.reg2mem, !insn.addr !5868
  br i1 %9, label %dec_label_pc_dd05, label %dec_label_pc_dcf5, !insn.addr !5868

dec_label_pc_dcf5:                                ; preds = %dec_label_pc_dcdc
  %124 = trunc i64 %arg2 to i8
  %125 = inttoptr i64 %arg3 to i8*, !insn.addr !5869
  store i8 %124, i8* %125, align 1, !insn.addr !5869
  %126 = add i64 %arg3, ptrtoint (i32* @global_var_1 to i64), !insn.addr !5870
  %127 = load i64, i64* %rsi, align 8, !insn.addr !5871
  %128 = add i64 %127, ptrtoint (i32* @global_var_1 to i64), !insn.addr !5871
  store i64 %128, i64* %rsi, align 8, !insn.addr !5871
  %.pre6 = trunc i64 %126 to i8, !insn.addr !5872
  store i8 %.pre6, i8* %.pre-phi7.reg2mem, !insn.addr !5873
  store i64 %128, i64* %.reg2mem, !insn.addr !5873
  store i64 187, i64* %rax.1.reg2mem, !insn.addr !5873
  store i64 %126, i64* %rdi.5.reg2mem, !insn.addr !5873
  br label %dec_label_pc_dd05, !insn.addr !5873

dec_label_pc_dd05:                                ; preds = %dec_label_pc_dcf5, %dec_label_pc_dcdc
  %rdi.5.reload = load i64, i64* %rdi.5.reg2mem
  %rax.1.reload = load i64, i64* %rax.1.reg2mem
  %.reload = load i64, i64* %.reg2mem, !insn.addr !5874
  %.pre-phi7.reload = load i8, i8* %.pre-phi7.reg2mem
  %129 = and i8 %.pre-phi7.reload, ptrtoint (i32* @global_var_2 to i8), !insn.addr !5872
  %130 = icmp eq i8 %129, 0, !insn.addr !5872
  store i8 %.pre-phi7.reload, i8* %.pre-phi9.reg2mem, !insn.addr !5875
  store i64 %.reload, i64* %.reg2mem10, !insn.addr !5875
  store i64 %rax.1.reload, i64* %rax.2.reg2mem, !insn.addr !5875
  store i64 %rdi.5.reload, i64* %rdi.6.reg2mem, !insn.addr !5875
  br i1 %130, label %dec_label_pc_dd1c, label %dec_label_pc_dd0b, !insn.addr !5875

dec_label_pc_dd0b:                                ; preds = %dec_label_pc_dd05
  %131 = inttoptr i64 %.reload to i16*, !insn.addr !5874
  %132 = load i16, i16* %131, align 2, !insn.addr !5874
  %133 = inttoptr i64 %rdi.5.reload to i16*, !insn.addr !5876
  store i16 %132, i16* %133, align 2, !insn.addr !5876
  %134 = add i64 %rdi.5.reload, ptrtoint (i32* @global_var_2 to i64), !insn.addr !5877
  %135 = load i64, i64* %rsi, align 8, !insn.addr !5878
  %136 = add i64 %135, ptrtoint (i32* @global_var_2 to i64), !insn.addr !5878
  store i64 %136, i64* %rsi, align 8, !insn.addr !5878
  %137 = add nuw nsw i64 %rax.1.reload, 254, !insn.addr !5879
  %138 = and i64 %137, 191, !insn.addr !5879
  %.pre8 = trunc i64 %134 to i8, !insn.addr !5880
  store i8 %.pre8, i8* %.pre-phi9.reg2mem, !insn.addr !5879
  store i64 %136, i64* %.reg2mem10, !insn.addr !5879
  store i64 %138, i64* %rax.2.reg2mem, !insn.addr !5879
  store i64 %134, i64* %rdi.6.reg2mem, !insn.addr !5879
  br label %dec_label_pc_dd1c, !insn.addr !5879

dec_label_pc_dd1c:                                ; preds = %dec_label_pc_dd0b, %dec_label_pc_dd05
  %rdi.6.reload = load i64, i64* %rdi.6.reg2mem
  %rax.2.reload = load i64, i64* %rax.2.reg2mem
  %.reload11 = load i64, i64* %.reg2mem10, !insn.addr !5881
  %.pre-phi9.reload = load i8, i8* %.pre-phi9.reg2mem
  %139 = and i8 %.pre-phi9.reload, ptrtoint (i16* @global_var_4 to i8), !insn.addr !5880
  %140 = icmp eq i8 %139, 0, !insn.addr !5880
  store i64 %.reload11, i64* %.reg2mem12, !insn.addr !5882
  store i64 %rax.2.reload, i64* %rax.3.reg2mem, !insn.addr !5882
  store i64 %rdi.6.reload, i64* %rdi.7.reg2mem, !insn.addr !5882
  br i1 %140, label %dec_label_pc_dd31, label %dec_label_pc_dd22, !insn.addr !5882

dec_label_pc_dd22:                                ; preds = %dec_label_pc_dd1c
  %141 = inttoptr i64 %.reload11 to i32*, !insn.addr !5881
  %142 = load i32, i32* %141, align 4, !insn.addr !5881
  %143 = inttoptr i64 %rdi.6.reload to i32*, !insn.addr !5883
  store i32 %142, i32* %143, align 4, !insn.addr !5883
  %144 = add i64 %rdi.6.reload, ptrtoint (i16* @global_var_4 to i64), !insn.addr !5884
  %145 = load i64, i64* %rsi, align 8, !insn.addr !5885
  %146 = add i64 %145, ptrtoint (i16* @global_var_4 to i64), !insn.addr !5885
  store i64 %146, i64* %rsi, align 8, !insn.addr !5885
  %147 = add nsw i64 %rax.2.reload, 4294967292, !insn.addr !5886
  %148 = and i64 %147, 4294967295, !insn.addr !5886
  store i64 %146, i64* %.reg2mem12, !insn.addr !5886
  store i64 %148, i64* %rax.3.reg2mem, !insn.addr !5886
  store i64 %144, i64* %rdi.7.reg2mem, !insn.addr !5886
  br label %dec_label_pc_dd31, !insn.addr !5886

dec_label_pc_dd31:                                ; preds = %dec_label_pc_dd22, %dec_label_pc_dd1c
  %rdi.7.reload = load i64, i64* %rdi.7.reg2mem
  %rax.3.reload = load i64, i64* %rax.3.reg2mem
  %.reload13 = load i64, i64* %.reg2mem12, !insn.addr !5887
  %149 = trunc i64 %rax.3.reload to i32, !insn.addr !5888
  %150 = lshr i32 %149, ptrtoint (i8** @global_var_3 to i32), !insn.addr !5889
  %151 = zext i32 %150 to i64, !insn.addr !5890
  %152 = inttoptr i64 %.reload13 to i8*, !insn.addr !5887
  %153 = inttoptr i64 %rdi.7.reload to i8*, !insn.addr !5887
  call void @__asm_rep_movsq_memcpy(i8* %153, i8* %152, i64 %151), !insn.addr !5887
  %154 = mul i64 %28, %151, !insn.addr !5887
  %155 = add i64 %154, %rdi.7.reload, !insn.addr !5887
  store i64 %155, i64* %rsi, align 8, !insn.addr !5887
  %156 = trunc i64 %rax.3.reload to i8, !insn.addr !5891
  %157 = and i8 %156, ptrtoint (i16* @global_var_4 to i8), !insn.addr !5891
  %158 = icmp eq i8 %157, 0, !insn.addr !5891
  %spec.select = select i1 %158, i64 0, i64 ptrtoint (i16* @global_var_4 to i64)
  %159 = and i8 %156, ptrtoint (i32* @global_var_2 to i8), !insn.addr !5892
  %160 = icmp eq i8 %159, 0, !insn.addr !5892
  %161 = add i64 %spec.select, ptrtoint (i32* @global_var_2 to i64)
  %rdx.5 = select i1 %160, i64 %spec.select, i64 %161
  %162 = mul i64 %rdx.5, ptrtoint (i32* @global_var_1 to i64), !insn.addr !5893
  %163 = add i64 %162, %155, !insn.addr !5893
  %164 = inttoptr i64 %163 to i8*, !insn.addr !5893
  %165 = load i8, i8* %164, align 1, !insn.addr !5893
  %166 = zext i8 %165 to i64, !insn.addr !5893
  ret i64 %166, !insn.addr !5894

dec_label_pc_dd70:                                ; preds = %dec_label_pc_dcd4
  %167 = bitcast i64* %rsi to i8*
  %168 = load i8, i8* %167, align 8, !insn.addr !5895
  %169 = inttoptr i64 %arg3 to i8*, !insn.addr !5896
  store i8 %168, i8* %169, align 1, !insn.addr !5896
  %170 = add i64 %arg2, ptrtoint (i32* @global_var_1 to i64), !insn.addr !5897
  %171 = inttoptr i64 %170 to i8*, !insn.addr !5897
  %172 = load i8, i8* %171, align 1, !insn.addr !5897
  %173 = add i64 %arg3, ptrtoint (i32* @global_var_1 to i64), !insn.addr !5898
  %174 = inttoptr i64 %173 to i8*, !insn.addr !5898
  store i8 %172, i8* %174, align 1, !insn.addr !5898
  %175 = add i64 %arg2, ptrtoint (i32* @global_var_2 to i64), !insn.addr !5899
  %176 = inttoptr i64 %175 to i8*, !insn.addr !5899
  %177 = load i8, i8* %176, align 1, !insn.addr !5899
  %178 = add i64 %arg3, ptrtoint (i32* @global_var_2 to i64), !insn.addr !5900
  %179 = inttoptr i64 %178 to i8*, !insn.addr !5900
  store i8 %177, i8* %179, align 1, !insn.addr !5900
  %180 = add i64 %arg2, ptrtoint (i8** @global_var_3 to i64), !insn.addr !5901
  %181 = inttoptr i64 %180 to i8*, !insn.addr !5901
  %182 = load i8, i8* %181, align 1, !insn.addr !5901
  %183 = add i64 %arg3, ptrtoint (i8** @global_var_3 to i64), !insn.addr !5902
  %184 = inttoptr i64 %183 to i8*, !insn.addr !5902
  store i8 %182, i8* %184, align 1, !insn.addr !5902
  %185 = add i64 %6, 3816, !insn.addr !5903
  %186 = add i64 %arg1, 585460, !insn.addr !5904
  %187 = add i64 %arg2, ptrtoint (i16* @global_var_4 to i64), !insn.addr !5905
  %188 = add i64 %arg3, ptrtoint (i16* @global_var_4 to i64), !insn.addr !5906
  %189 = inttoptr i64 %187 to i64*, !insn.addr !5907
  %190 = load i64, i64* %189, align 8, !insn.addr !5907
  store i64 %190, i64* %stack_var_-296, align 8, !insn.addr !5908
  %191 = add i64 %arg2, add (i64 ptrtoint (i16* @global_var_4 to i64), i64 ptrtoint (i8* @global_var_8 to i64)), !insn.addr !5909
  %192 = inttoptr i64 %191 to i64*, !insn.addr !5909
  %193 = load i64, i64* %192, align 8, !insn.addr !5909
  %194 = add i64 %arg1, 585456, !insn.addr !5910
  %195 = inttoptr i64 %194 to i32*, !insn.addr !5910
  %196 = load i32, i32* %195, align 4, !insn.addr !5910
  %197 = zext i32 %196 to i64, !insn.addr !5911
  %198 = call i64 @rijndaelEncryptRound.353(i64 %186, i32 %196, i64* nonnull %stack_var_-296, i64 %197, i64 %185), !insn.addr !5912
  %199 = load i64, i64* %stack_var_-296, align 8, !insn.addr !5913
  %200 = inttoptr i64 %188 to i64*, !insn.addr !5914
  store i64 %199, i64* %200, align 8, !insn.addr !5914
  %201 = add i64 %arg3, add (i64 ptrtoint (i16* @global_var_4 to i64), i64 ptrtoint (i8* @global_var_8 to i64)), !insn.addr !5915
  %202 = inttoptr i64 %201 to i64*, !insn.addr !5915
  store i64 %193, i64* %202, align 8, !insn.addr !5915
  %203 = add i64 %arg2, add (i64 ptrtoint (i16* @global_var_4 to i64), i64 ptrtoint (i8* @global_var_10 to i64)), !insn.addr !5916
  %204 = inttoptr i64 %203 to i8*, !insn.addr !5916
  %205 = load i8, i8* %204, align 1, !insn.addr !5916
  %206 = add i64 %arg3, add (i64 ptrtoint (i16* @global_var_4 to i64), i64 ptrtoint (i8* @global_var_10 to i64)), !insn.addr !5917
  %207 = inttoptr i64 %206 to i8*, !insn.addr !5917
  store i8 %205, i8* %207, align 1, !insn.addr !5917
  %208 = add i64 %arg2, add (i64 ptrtoint (i16* @global_var_4 to i64), i64 ptrtoint (i8** @global_var_11 to i64)), !insn.addr !5918
  %209 = inttoptr i64 %208 to i8*, !insn.addr !5918
  %210 = load i8, i8* %209, align 1, !insn.addr !5918
  %211 = add i64 %arg3, add (i64 ptrtoint (i16* @global_var_4 to i64), i64 ptrtoint (i8** @global_var_11 to i64)), !insn.addr !5919
  %212 = inttoptr i64 %211 to i8*, !insn.addr !5919
  store i8 %210, i8* %212, align 1, !insn.addr !5919
  %213 = add i64 %arg2, add (i64 ptrtoint (i16* @global_var_4 to i64), i64 ptrtoint (i32** @global_var_12 to i64)), !insn.addr !5920
  %214 = inttoptr i64 %213 to i8*, !insn.addr !5920
  %215 = load i8, i8* %214, align 1, !insn.addr !5920
  %216 = add i64 %arg3, add (i64 ptrtoint (i16* @global_var_4 to i64), i64 ptrtoint (i32** @global_var_12 to i64)), !insn.addr !5921
  %217 = inttoptr i64 %216 to i8*, !insn.addr !5921
  store i8 %215, i8* %217, align 1, !insn.addr !5921
  %218 = add i64 %arg2, add (i64 ptrtoint (i16* @global_var_4 to i64), i64 ptrtoint (i32** @global_var_13 to i64)), !insn.addr !5922
  %219 = inttoptr i64 %218 to i8*, !insn.addr !5922
  %220 = load i8, i8* %219, align 1, !insn.addr !5922
  %221 = add i64 %arg3, add (i64 ptrtoint (i16* @global_var_4 to i64), i64 ptrtoint (i32** @global_var_13 to i64)), !insn.addr !5923
  %222 = inttoptr i64 %221 to i8*, !insn.addr !5923
  store i8 %220, i8* %222, align 1, !insn.addr !5923
  %223 = add i64 %arg2, add (i64 ptrtoint (i16* @global_var_4 to i64), i64 ptrtoint (i32** @global_var_14 to i64)), !insn.addr !5924
  %224 = inttoptr i64 %223 to i8*, !insn.addr !5924
  %225 = load i8, i8* %224, align 1, !insn.addr !5924
  %226 = add i64 %arg3, add (i64 ptrtoint (i16* @global_var_4 to i64), i64 ptrtoint (i32** @global_var_14 to i64)), !insn.addr !5925
  %227 = inttoptr i64 %226 to i8*, !insn.addr !5925
  store i8 %225, i8* %227, align 1, !insn.addr !5925
  %228 = add i64 %arg2, add (i64 ptrtoint (i16* @global_var_4 to i64), i64 ptrtoint (i8** @global_var_15 to i64)), !insn.addr !5926
  %229 = inttoptr i64 %228 to i8*, !insn.addr !5926
  %230 = load i8, i8* %229, align 1, !insn.addr !5926
  %231 = add i64 %arg3, add (i64 ptrtoint (i16* @global_var_4 to i64), i64 ptrtoint (i8** @global_var_15 to i64)), !insn.addr !5927
  %232 = inttoptr i64 %231 to i8*, !insn.addr !5927
  store i8 %230, i8* %232, align 1, !insn.addr !5927
  %233 = add i64 %arg2, add (i64 ptrtoint (i16* @global_var_4 to i64), i64 ptrtoint (i32** @global_var_16 to i64)), !insn.addr !5928
  %234 = inttoptr i64 %233 to i8*, !insn.addr !5928
  %235 = load i8, i8* %234, align 1, !insn.addr !5928
  %236 = zext i8 %235 to i64, !insn.addr !5928
  %237 = add i64 %arg3, add (i64 ptrtoint (i16* @global_var_4 to i64), i64 ptrtoint (i32** @global_var_16 to i64)), !insn.addr !5929
  %238 = inttoptr i64 %237 to i8*, !insn.addr !5929
  store i8 %235, i8* %238, align 1, !insn.addr !5929
  ret i64 %236, !insn.addr !5930
}

define i32 @DTV_EncAES_MultiTS(i64 %pTuner, i8* %TSData_In, i32 %FrameNum, i8* %TSData_Out) local_unnamed_addr {
dec_label_pc_de5d:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = trunc i64 %0 to i32, !insn.addr !5931
  ret i32 %1, !insn.addr !5931
}

define i64 @DTV_EncAES_MultiTS.146(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4) local_unnamed_addr {
dec_label_pc_de8d:
  %0 = call i64 @mcount(), !insn.addr !5932
  ret i64 %0, !insn.addr !5933
}

define i32 @DTV_DecrypTS(i64 %pTuner, i8* %Input188B, i8* %Output188B) local_unnamed_addr {
dec_label_pc_dec7:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = call i64 @__decompiler_undefined_function_0()
  %2 = ptrtoint i8* %Output188B to i64
  %3 = ptrtoint i8* %Input188B to i64
  %4 = mul i64 %3, ptrtoint (i32* @global_var_1 to i64), !insn.addr !5934
  %5 = add i64 %0, %4, !insn.addr !5934
  %6 = add i64 %1, -56, !insn.addr !5935
  %7 = inttoptr i64 %6 to i64*, !insn.addr !5935
  %8 = load i64, i64* %7, align 8, !insn.addr !5935
  %9 = call i64 @DTV_EncAES_TS.273(i64 %8, i64 %5, i64 %2), !insn.addr !5936
  ret i32 ptrtoint (i32* @global_var_1 to i32), !insn.addr !5937
}

define i64 @DTV_DecrypTS.520(i64 %arg1, i64 %arg2, i64 %arg3) local_unnamed_addr {
dec_label_pc_def7:
  %rdi.5.reg2mem = alloca i64, !insn.addr !5938
  %rax.10.reg2mem = alloca i64, !insn.addr !5938
  %.reg2mem27 = alloca i64, !insn.addr !5938
  %rdi.4.reg2mem = alloca i64, !insn.addr !5938
  %rax.9.reg2mem = alloca i64, !insn.addr !5938
  %.reg2mem25 = alloca i64, !insn.addr !5938
  %.pre-phi10.reg2mem = alloca i8, !insn.addr !5938
  %rdi.3.reg2mem = alloca i64, !insn.addr !5938
  %rax.8.reg2mem = alloca i64, !insn.addr !5938
  %.reg2mem23 = alloca i64, !insn.addr !5938
  %.pre-phi.reg2mem = alloca i8, !insn.addr !5938
  %rax.7.reg2mem = alloca i64, !insn.addr !5938
  %rax.6.reg2mem = alloca i64, !insn.addr !5938
  %.reg2mem21 = alloca i8, !insn.addr !5938
  %rdi.2.reg2mem = alloca i64, !insn.addr !5938
  %rax.5.reg2mem = alloca i64, !insn.addr !5938
  %.reg2mem19 = alloca i64, !insn.addr !5938
  %rdi.1.reg2mem = alloca i64, !insn.addr !5938
  %rax.4.reg2mem = alloca i64, !insn.addr !5938
  %.reg2mem17 = alloca i64, !insn.addr !5938
  %.pre-phi14.reg2mem = alloca i8, !insn.addr !5938
  %rdi.0.reg2mem = alloca i64, !insn.addr !5938
  %rax.3.reg2mem = alloca i64, !insn.addr !5938
  %.reg2mem = alloca i64, !insn.addr !5938
  %.pre-phi12.reg2mem = alloca i8, !insn.addr !5938
  %rax.2.reg2mem = alloca i64, !insn.addr !5938
  %rdx.0.reg2mem = alloca i64, !insn.addr !5938
  %rax.1.reg2mem = alloca i64, !insn.addr !5938
  %rax.0.reg2mem = alloca i64, !insn.addr !5938
  %rsi = alloca i64, align 8
  %0 = call i1 @__decompiler_undefined_function_2()
  store i64 %arg2, i64* %rsi, align 8
  %stack_var_-116 = alloca i64, align 8
  %stack_var_-244 = alloca i64, align 8
  %stack_var_-53 = alloca i64, align 8
  %stack_var_-237 = alloca i64, align 8
  %stack_var_-247 = alloca i8, align 1
  %stack_var_-248 = alloca i8, align 1
  %1 = call i64 @mcount(), !insn.addr !5939
  %2 = call i64 @__readgsqword(i64 40), !insn.addr !5940
  %3 = add i64 %arg1, ptrtoint (i8** @global_var_30de4 to i64), !insn.addr !5941
  %4 = inttoptr i64 %3 to i8*, !insn.addr !5941
  %5 = load i8, i8* %4, align 1, !insn.addr !5941
  %6 = icmp eq i8 %5, 0, !insn.addr !5942
  br i1 %6, label %dec_label_pc_e470, label %dec_label_pc_df45, !insn.addr !5943

dec_label_pc_df45:                                ; preds = %dec_label_pc_def7
  %7 = add i64 %arg1, 7480, !insn.addr !5944
  %8 = inttoptr i64 %7 to i64*, !insn.addr !5944
  %9 = load i64, i64* %8, align 8, !insn.addr !5944
  %10 = add i64 %arg1, ptrtoint (i8** @global_var_30da1 to i64), !insn.addr !5945
  %11 = inttoptr i64 %10 to i8*, !insn.addr !5945
  %12 = load i8, i8* %11, align 1, !insn.addr !5945
  %13 = icmp eq i8 %12, 0, !insn.addr !5946
  %14 = icmp eq i1 %13, false, !insn.addr !5947
  br i1 %14, label %dec_label_pc_e1d2, label %dec_label_pc_df54, !insn.addr !5947

dec_label_pc_df54:                                ; preds = %dec_label_pc_df45
  %15 = add i64 %arg1, 586869, !insn.addr !5948
  %16 = inttoptr i64 %15 to i8*, !insn.addr !5948
  %17 = load i8, i8* %16, align 1, !insn.addr !5948
  %18 = icmp eq i8 %17, 7, !insn.addr !5949
  %19 = icmp eq i1 %18, false, !insn.addr !5950
  br i1 %19, label %dec_label_pc_df6d, label %dec_label_pc_df5f, !insn.addr !5950

dec_label_pc_df5f:                                ; preds = %dec_label_pc_df54
  %20 = ptrtoint i8* %stack_var_-248 to i64, !insn.addr !5951
  %21 = load i64, i64* %rsi, align 8, !insn.addr !5952
  %22 = call i64 @DTV_Software_process_5606B2.177(i64 %arg1, i64 %21, i64 %20), !insn.addr !5952
  br label %dec_label_pc_df87, !insn.addr !5953

dec_label_pc_df6d:                                ; preds = %dec_label_pc_df54
  %23 = icmp eq i8 %17, 8, !insn.addr !5954
  %24 = icmp eq i1 %23, false, !insn.addr !5955
  br i1 %24, label %dec_label_pc_df87, label %dec_label_pc_df71, !insn.addr !5955

dec_label_pc_df71:                                ; preds = %dec_label_pc_df6d
  %25 = load i64, i64* %rsi, align 8, !insn.addr !5956
  %26 = inttoptr i64 %25 to i8*, !insn.addr !5956
  call void @__asm_rep_movsq_memcpy(i8* nonnull %stack_var_-248, i8* %26, i64 ptrtoint (i8** @global_var_17 to i64)), !insn.addr !5956
  br label %dec_label_pc_df87, !insn.addr !5957

dec_label_pc_df87:                                ; preds = %dec_label_pc_df71, %dec_label_pc_df6d, %dec_label_pc_df5f
  %27 = load i8, i8* %4, align 1, !insn.addr !5958
  %28 = icmp eq i8 %27, ptrtoint (i32* @global_var_1 to i8), !insn.addr !5958
  %29 = icmp eq i1 %28, false, !insn.addr !5959
  br i1 %29, label %dec_label_pc_e470, label %dec_label_pc_df94, !insn.addr !5959

dec_label_pc_df94:                                ; preds = %dec_label_pc_df87
  %30 = load i8, i8* %16, align 1, !insn.addr !5960
  %31 = icmp eq i8 %30, 0, !insn.addr !5961
  %32 = icmp eq i1 %31, false, !insn.addr !5962
  br i1 %32, label %dec_label_pc_dfb6, label %dec_label_pc_df9f, !insn.addr !5962

dec_label_pc_df9f:                                ; preds = %dec_label_pc_df94
  %33 = bitcast i8* %stack_var_-248 to i64*, !insn.addr !5963
  %34 = call i64 @DTV_HardwareDecrypt_Ver01.395(i64 %arg1, i64* nonnull %33, i64 %arg3), !insn.addr !5963
  br label %dec_label_pc_e470, !insn.addr !5964

dec_label_pc_dfb6:                                ; preds = %dec_label_pc_df94
  %35 = icmp ne i8 %30, 1, !insn.addr !5965
  %36 = icmp eq i8 %30, 4, !insn.addr !5966
  %37 = icmp eq i1 %36, false, !insn.addr !5967
  %or.cond = icmp eq i1 %35, %37
  br i1 %or.cond, label %dec_label_pc_dfd9, label %dec_label_pc_dfc2, !insn.addr !5968

dec_label_pc_dfc2:                                ; preds = %dec_label_pc_dfb6
  %38 = bitcast i8* %stack_var_-248 to i64*, !insn.addr !5969
  %39 = call i64 @DTV_HardwareDecrypt.598(i64 %arg1, i64* nonnull %38, i64 %arg3), !insn.addr !5969
  br label %dec_label_pc_e470, !insn.addr !5970

dec_label_pc_dfd9:                                ; preds = %dec_label_pc_dfb6
  %40 = icmp eq i8 %30, 3, !insn.addr !5971
  %41 = icmp eq i1 %40, false, !insn.addr !5972
  br i1 %41, label %dec_label_pc_dff4, label %dec_label_pc_dfdd, !insn.addr !5972

dec_label_pc_dfdd:                                ; preds = %dec_label_pc_dfd9
  %42 = bitcast i8* %stack_var_-248 to i64*, !insn.addr !5973
  %43 = call i64 @DTV_HardwareDecrypt_5211Ver01.412(i64 %arg1, i64* nonnull %42, i64 %arg3), !insn.addr !5973
  br label %dec_label_pc_e470, !insn.addr !5974

dec_label_pc_dff4:                                ; preds = %dec_label_pc_dfd9
  %44 = icmp eq i8 %30, 7, !insn.addr !5975
  %45 = icmp eq i1 %44, false, !insn.addr !5976
  br i1 %45, label %dec_label_pc_e0cb, label %dec_label_pc_dffc, !insn.addr !5976

dec_label_pc_dffc:                                ; preds = %dec_label_pc_dff4
  %46 = load i8, i8* %stack_var_-248, align 1, !insn.addr !5977
  %47 = inttoptr i64 %arg3 to i8*, !insn.addr !5978
  store i8 %46, i8* %47, align 1, !insn.addr !5978
  %48 = load i8, i8* %stack_var_-247, align 1, !insn.addr !5979
  %49 = add i64 %arg3, ptrtoint (i32* @global_var_1 to i64), !insn.addr !5980
  %50 = inttoptr i64 %49 to i8*, !insn.addr !5980
  store i8 %48, i8* %50, align 1, !insn.addr !5980
  %51 = add i64 %arg3, ptrtoint (i32* @global_var_2 to i64), !insn.addr !5981
  %52 = inttoptr i64 %51 to i8*, !insn.addr !5981
  %53 = add i64 %arg3, ptrtoint (i8** @global_var_3 to i64), !insn.addr !5982
  %54 = inttoptr i64 %53 to i8*, !insn.addr !5982
  %55 = ptrtoint i64* %stack_var_-237 to i64, !insn.addr !5983
  %56 = ptrtoint i64* %stack_var_-53 to i64, !insn.addr !5984
  store i64 %56, i64* %rsi, align 8, !insn.addr !5984
  %57 = add i64 %arg1, 588970, !insn.addr !5985
  %58 = inttoptr i64 %57 to i8*, !insn.addr !5985
  %59 = add i64 %arg1, 588969, !insn.addr !5986
  %60 = inttoptr i64 %59 to i8*, !insn.addr !5986
  %61 = add i64 %arg1, 588968, !insn.addr !5987
  %62 = inttoptr i64 %61 to i8*, !insn.addr !5987
  %63 = add i64 %arg1, 588971, !insn.addr !5988
  %64 = inttoptr i64 %63 to i8*, !insn.addr !5988
  store i64 %55, i64* %rax.0.reg2mem, !insn.addr !5984
  br label %dec_label_pc_e03a, !insn.addr !5984

dec_label_pc_e03a:                                ; preds = %dec_label_pc_e03a, %dec_label_pc_dffc
  %rax.0.reload = load i64, i64* %rax.0.reg2mem
  %65 = load i8, i8* %58, align 1, !insn.addr !5985
  %66 = inttoptr i64 %rax.0.reload to i8*, !insn.addr !5989
  %67 = load i8, i8* %66, align 1, !insn.addr !5989
  %68 = xor i8 %67, %65, !insn.addr !5989
  store i8 %68, i8* %66, align 1, !insn.addr !5989
  %69 = load i8, i8* %60, align 1, !insn.addr !5986
  %70 = add i64 %rax.0.reload, -1, !insn.addr !5990
  %71 = inttoptr i64 %70 to i8*, !insn.addr !5990
  %72 = load i8, i8* %71, align 1, !insn.addr !5990
  %73 = xor i8 %72, %69, !insn.addr !5990
  store i8 %73, i8* %71, align 1, !insn.addr !5990
  %74 = add i64 %rax.0.reload, -2, !insn.addr !5991
  %75 = inttoptr i64 %74 to i8*, !insn.addr !5991
  %76 = load i8, i8* %75, align 1, !insn.addr !5991
  %77 = xor i8 %76, %65, !insn.addr !5991
  store i8 %77, i8* %75, align 1, !insn.addr !5991
  %78 = load i8, i8* %62, align 1, !insn.addr !5987
  %79 = add i64 %rax.0.reload, -3, !insn.addr !5992
  %80 = inttoptr i64 %79 to i8*, !insn.addr !5992
  %81 = load i8, i8* %80, align 1, !insn.addr !5992
  %82 = xor i8 %81, %78, !insn.addr !5992
  store i8 %82, i8* %80, align 1, !insn.addr !5992
  %83 = add i64 %rax.0.reload, -4, !insn.addr !5993
  %84 = inttoptr i64 %83 to i8*, !insn.addr !5993
  %85 = load i8, i8* %84, align 1, !insn.addr !5993
  %86 = xor i8 %85, %69, !insn.addr !5993
  store i8 %86, i8* %84, align 1, !insn.addr !5993
  %87 = load i8, i8* %64, align 1, !insn.addr !5988
  %88 = add i64 %rax.0.reload, -5, !insn.addr !5994
  %89 = inttoptr i64 %88 to i8*, !insn.addr !5994
  %90 = load i8, i8* %89, align 1, !insn.addr !5994
  %91 = xor i8 %90, %87, !insn.addr !5994
  store i8 %91, i8* %89, align 1, !insn.addr !5994
  %92 = add i64 %rax.0.reload, -6, !insn.addr !5995
  %93 = inttoptr i64 %92 to i8*, !insn.addr !5995
  %94 = load i8, i8* %93, align 1, !insn.addr !5995
  %95 = xor i8 %94, %78, !insn.addr !5995
  store i8 %95, i8* %93, align 1, !insn.addr !5995
  %96 = add i64 %rax.0.reload, -7, !insn.addr !5996
  %97 = inttoptr i64 %96 to i8*, !insn.addr !5996
  %98 = load i8, i8* %97, align 1, !insn.addr !5996
  %99 = xor i8 %98, %78, !insn.addr !5996
  store i8 %99, i8* %97, align 1, !insn.addr !5996
  %100 = add i64 %rax.0.reload, ptrtoint (i8* @global_var_8 to i64), !insn.addr !5997
  %101 = load i64, i64* %rsi, align 8, !insn.addr !5998
  %102 = icmp eq i64 %100, %101, !insn.addr !5998
  %103 = icmp eq i1 %102, false, !insn.addr !5999
  store i64 %100, i64* %rax.0.reg2mem, !insn.addr !5999
  br i1 %103, label %dec_label_pc_e03a, label %dec_label_pc_e076, !insn.addr !5999

dec_label_pc_e076:                                ; preds = %dec_label_pc_e03a
  %104 = add i64 %9, 15984, !insn.addr !6000
  %105 = add i64 %arg3, ptrtoint (i16* @global_var_4 to i64), !insn.addr !6001
  %106 = add i64 %arg1, 588952, !insn.addr !6002
  %107 = inttoptr i64 %106 to i64*, !insn.addr !6002
  %108 = load i64, i64* %107, align 8, !insn.addr !6002
  %109 = call i64 @des_crypt_ecb_Multi.538(i64 %108, i64* nonnull %stack_var_-244, i64 %105, i64 %104, i64* bitcast (i8* @global_var_10 to i64*)), !insn.addr !6003
  %110 = add i64 %arg3, 132, !insn.addr !6004
  %111 = add i64 %arg1, 588960, !insn.addr !6005
  %112 = inttoptr i64 %111 to i64*, !insn.addr !6005
  %113 = load i64, i64* %112, align 8, !insn.addr !6005
  %114 = call i64 @des_crypt_ecb_Multi.538(i64 %113, i64* nonnull %stack_var_-116, i64 %110, i64 %104, i64* bitcast (i8** @global_var_7 to i64*)), !insn.addr !6006
  br label %dec_label_pc_e470, !insn.addr !6007

dec_label_pc_e0cb:                                ; preds = %dec_label_pc_dff4
  %115 = icmp eq i8 %30, 8, !insn.addr !6008
  %116 = icmp eq i1 %115, false, !insn.addr !6009
  br i1 %116, label %dec_label_pc_e470, label %dec_label_pc_e0d3, !insn.addr !6009

dec_label_pc_e0d3:                                ; preds = %dec_label_pc_e0cb
  %117 = ptrtoint i8* %stack_var_-248 to i64, !insn.addr !6010
  store i64 %117, i64* %rsi, align 8, !insn.addr !6011
  %118 = ptrtoint i64* %stack_var_-244 to i64, !insn.addr !6012
  store i64 %117, i64* %rax.1.reg2mem, !insn.addr !6012
  store i64 %arg3, i64* %rdx.0.reg2mem, !insn.addr !6012
  br label %dec_label_pc_e0e4, !insn.addr !6012

dec_label_pc_e0e4:                                ; preds = %dec_label_pc_e0e4, %dec_label_pc_e0d3
  %rdx.0.reload = load i64, i64* %rdx.0.reg2mem
  %rax.1.reload = load i64, i64* %rax.1.reg2mem
  %119 = inttoptr i64 %rax.1.reload to i8*, !insn.addr !6013
  %120 = load i8, i8* %119, align 1, !insn.addr !6013
  %121 = inttoptr i64 %rdx.0.reload to i8*, !insn.addr !6014
  store i8 %120, i8* %121, align 1, !insn.addr !6014
  %122 = add i64 %rax.1.reload, ptrtoint (i32* @global_var_1 to i64), !insn.addr !6015
  %123 = add i64 %rdx.0.reload, ptrtoint (i32* @global_var_1 to i64), !insn.addr !6016
  %124 = icmp eq i64 %122, %118, !insn.addr !6017
  %125 = icmp eq i1 %124, false, !insn.addr !6018
  store i64 %122, i64* %rax.1.reg2mem, !insn.addr !6018
  store i64 %123, i64* %rdx.0.reg2mem, !insn.addr !6018
  br i1 %125, label %dec_label_pc_e0e4, label %dec_label_pc_e0f6, !insn.addr !6018

dec_label_pc_e0f6:                                ; preds = %dec_label_pc_e0e4
  %126 = ptrtoint i64* %stack_var_-237 to i64, !insn.addr !6019
  %127 = ptrtoint i64* %stack_var_-53 to i64, !insn.addr !6020
  store i64 %127, i64* %rsi, align 8, !insn.addr !6020
  %128 = add i64 %arg1, 588970, !insn.addr !6021
  %129 = inttoptr i64 %128 to i8*, !insn.addr !6021
  %130 = add i64 %arg1, 588969, !insn.addr !6022
  %131 = inttoptr i64 %130 to i8*, !insn.addr !6022
  %132 = add i64 %arg1, 588968, !insn.addr !6023
  %133 = inttoptr i64 %132 to i8*, !insn.addr !6023
  %134 = add i64 %arg1, 588971, !insn.addr !6024
  %135 = inttoptr i64 %134 to i8*, !insn.addr !6024
  store i64 %126, i64* %rax.2.reg2mem, !insn.addr !6020
  br label %dec_label_pc_e104, !insn.addr !6020

dec_label_pc_e104:                                ; preds = %dec_label_pc_e104, %dec_label_pc_e0f6
  %rax.2.reload = load i64, i64* %rax.2.reg2mem
  %136 = load i8, i8* %129, align 1, !insn.addr !6021
  %137 = inttoptr i64 %rax.2.reload to i8*, !insn.addr !6025
  %138 = load i8, i8* %137, align 1, !insn.addr !6025
  %139 = xor i8 %138, %136, !insn.addr !6025
  store i8 %139, i8* %137, align 1, !insn.addr !6025
  %140 = load i8, i8* %131, align 1, !insn.addr !6022
  %141 = add i64 %rax.2.reload, -1, !insn.addr !6026
  %142 = inttoptr i64 %141 to i8*, !insn.addr !6026
  %143 = load i8, i8* %142, align 1, !insn.addr !6026
  %144 = xor i8 %143, %140, !insn.addr !6026
  store i8 %144, i8* %142, align 1, !insn.addr !6026
  %145 = add i64 %rax.2.reload, -2, !insn.addr !6027
  %146 = inttoptr i64 %145 to i8*, !insn.addr !6027
  %147 = load i8, i8* %146, align 1, !insn.addr !6027
  %148 = xor i8 %147, %136, !insn.addr !6027
  store i8 %148, i8* %146, align 1, !insn.addr !6027
  %149 = load i8, i8* %133, align 1, !insn.addr !6023
  %150 = add i64 %rax.2.reload, -3, !insn.addr !6028
  %151 = inttoptr i64 %150 to i8*, !insn.addr !6028
  %152 = load i8, i8* %151, align 1, !insn.addr !6028
  %153 = xor i8 %152, %149, !insn.addr !6028
  store i8 %153, i8* %151, align 1, !insn.addr !6028
  %154 = add i64 %rax.2.reload, -4, !insn.addr !6029
  %155 = inttoptr i64 %154 to i8*, !insn.addr !6029
  %156 = load i8, i8* %155, align 1, !insn.addr !6029
  %157 = xor i8 %156, %140, !insn.addr !6029
  store i8 %157, i8* %155, align 1, !insn.addr !6029
  %158 = load i8, i8* %135, align 1, !insn.addr !6024
  %159 = add i64 %rax.2.reload, -5, !insn.addr !6030
  %160 = inttoptr i64 %159 to i8*, !insn.addr !6030
  %161 = load i8, i8* %160, align 1, !insn.addr !6030
  %162 = xor i8 %161, %158, !insn.addr !6030
  store i8 %162, i8* %160, align 1, !insn.addr !6030
  %163 = add i64 %rax.2.reload, -6, !insn.addr !6031
  %164 = inttoptr i64 %163 to i8*, !insn.addr !6031
  %165 = load i8, i8* %164, align 1, !insn.addr !6031
  %166 = xor i8 %165, %149, !insn.addr !6031
  store i8 %166, i8* %164, align 1, !insn.addr !6031
  %167 = add i64 %rax.2.reload, -7, !insn.addr !6032
  %168 = inttoptr i64 %167 to i8*, !insn.addr !6032
  %169 = load i8, i8* %168, align 1, !insn.addr !6032
  %170 = xor i8 %169, %149, !insn.addr !6032
  store i8 %170, i8* %168, align 1, !insn.addr !6032
  %171 = add i64 %rax.2.reload, ptrtoint (i8* @global_var_8 to i64), !insn.addr !6033
  %172 = load i64, i64* %rsi, align 8, !insn.addr !6034
  %173 = icmp eq i64 %171, %172, !insn.addr !6034
  %174 = icmp eq i1 %173, false, !insn.addr !6035
  store i64 %171, i64* %rax.2.reg2mem, !insn.addr !6035
  br i1 %174, label %dec_label_pc_e104, label %dec_label_pc_e140, !insn.addr !6035

dec_label_pc_e140:                                ; preds = %dec_label_pc_e104
  store i64 %117, i64* %rsi, align 8, !insn.addr !6036
  %175 = trunc i64 %arg3 to i8
  %176 = and i8 %175, ptrtoint (i32* @global_var_1 to i8), !insn.addr !6037
  %177 = icmp eq i8 %176, 0, !insn.addr !6037
  store i8 %175, i8* %.pre-phi12.reg2mem, !insn.addr !6038
  store i64 %117, i64* %.reg2mem, !insn.addr !6038
  store i64 188, i64* %rax.3.reg2mem, !insn.addr !6038
  store i64 %arg3, i64* %rdi.0.reg2mem, !insn.addr !6038
  br i1 %177, label %dec_label_pc_e167, label %dec_label_pc_e155, !insn.addr !6038

dec_label_pc_e155:                                ; preds = %dec_label_pc_e140
  %178 = load i8, i8* %stack_var_-248, align 1, !insn.addr !6039
  %179 = inttoptr i64 %arg3 to i8*, !insn.addr !6040
  store i8 %178, i8* %179, align 1, !insn.addr !6040
  %180 = add i64 %arg3, ptrtoint (i32* @global_var_1 to i64), !insn.addr !6041
  %181 = ptrtoint i8* %stack_var_-247 to i64, !insn.addr !6042
  store i64 %181, i64* %rsi, align 8, !insn.addr !6042
  %.pre11 = trunc i64 %180 to i8, !insn.addr !6043
  store i8 %.pre11, i8* %.pre-phi12.reg2mem, !insn.addr !6044
  store i64 %181, i64* %.reg2mem, !insn.addr !6044
  store i64 187, i64* %rax.3.reg2mem, !insn.addr !6044
  store i64 %180, i64* %rdi.0.reg2mem, !insn.addr !6044
  br label %dec_label_pc_e167, !insn.addr !6044

dec_label_pc_e167:                                ; preds = %dec_label_pc_e155, %dec_label_pc_e140
  %rdi.0.reload = load i64, i64* %rdi.0.reg2mem
  %rax.3.reload = load i64, i64* %rax.3.reg2mem
  %.reload = load i64, i64* %.reg2mem, !insn.addr !6045
  %.pre-phi12.reload = load i8, i8* %.pre-phi12.reg2mem
  %182 = and i8 %.pre-phi12.reload, ptrtoint (i32* @global_var_2 to i8), !insn.addr !6043
  %183 = icmp eq i8 %182, 0, !insn.addr !6043
  store i8 %.pre-phi12.reload, i8* %.pre-phi14.reg2mem, !insn.addr !6046
  store i64 %.reload, i64* %.reg2mem17, !insn.addr !6046
  store i64 %rax.3.reload, i64* %rax.4.reg2mem, !insn.addr !6046
  store i64 %rdi.0.reload, i64* %rdi.1.reg2mem, !insn.addr !6046
  br i1 %183, label %dec_label_pc_e17e, label %dec_label_pc_e16d, !insn.addr !6046

dec_label_pc_e16d:                                ; preds = %dec_label_pc_e167
  %184 = inttoptr i64 %.reload to i16*, !insn.addr !6045
  %185 = load i16, i16* %184, align 2, !insn.addr !6045
  %186 = inttoptr i64 %rdi.0.reload to i16*, !insn.addr !6047
  store i16 %185, i16* %186, align 2, !insn.addr !6047
  %187 = add i64 %rdi.0.reload, ptrtoint (i32* @global_var_2 to i64), !insn.addr !6048
  %188 = load i64, i64* %rsi, align 8, !insn.addr !6049
  %189 = add i64 %188, ptrtoint (i32* @global_var_2 to i64), !insn.addr !6049
  store i64 %189, i64* %rsi, align 8, !insn.addr !6049
  %190 = add nuw nsw i64 %rax.3.reload, 254, !insn.addr !6050
  %191 = and i64 %190, 191, !insn.addr !6050
  %.pre13 = trunc i64 %187 to i8, !insn.addr !6051
  store i8 %.pre13, i8* %.pre-phi14.reg2mem, !insn.addr !6050
  store i64 %189, i64* %.reg2mem17, !insn.addr !6050
  store i64 %191, i64* %rax.4.reg2mem, !insn.addr !6050
  store i64 %187, i64* %rdi.1.reg2mem, !insn.addr !6050
  br label %dec_label_pc_e17e, !insn.addr !6050

dec_label_pc_e17e:                                ; preds = %dec_label_pc_e16d, %dec_label_pc_e167
  %rdi.1.reload = load i64, i64* %rdi.1.reg2mem
  %rax.4.reload = load i64, i64* %rax.4.reg2mem
  %.reload18 = load i64, i64* %.reg2mem17, !insn.addr !6052
  %.pre-phi14.reload = load i8, i8* %.pre-phi14.reg2mem
  %192 = and i8 %.pre-phi14.reload, ptrtoint (i16* @global_var_4 to i8), !insn.addr !6051
  %193 = icmp eq i8 %192, 0, !insn.addr !6051
  store i64 %.reload18, i64* %.reg2mem19, !insn.addr !6053
  store i64 %rax.4.reload, i64* %rax.5.reg2mem, !insn.addr !6053
  store i64 %rdi.1.reload, i64* %rdi.2.reg2mem, !insn.addr !6053
  br i1 %193, label %dec_label_pc_e193, label %dec_label_pc_e184, !insn.addr !6053

dec_label_pc_e184:                                ; preds = %dec_label_pc_e17e
  %194 = inttoptr i64 %.reload18 to i32*, !insn.addr !6052
  %195 = load i32, i32* %194, align 4, !insn.addr !6052
  %196 = inttoptr i64 %rdi.1.reload to i32*, !insn.addr !6054
  store i32 %195, i32* %196, align 4, !insn.addr !6054
  %197 = add i64 %rdi.1.reload, ptrtoint (i16* @global_var_4 to i64), !insn.addr !6055
  %198 = load i64, i64* %rsi, align 8, !insn.addr !6056
  %199 = add i64 %198, ptrtoint (i16* @global_var_4 to i64), !insn.addr !6056
  store i64 %199, i64* %rsi, align 8, !insn.addr !6056
  %200 = add nsw i64 %rax.4.reload, 4294967292, !insn.addr !6057
  %201 = and i64 %200, 4294967295, !insn.addr !6057
  store i64 %199, i64* %.reg2mem19, !insn.addr !6057
  store i64 %201, i64* %rax.5.reg2mem, !insn.addr !6057
  store i64 %197, i64* %rdi.2.reg2mem, !insn.addr !6057
  br label %dec_label_pc_e193, !insn.addr !6057

dec_label_pc_e193:                                ; preds = %dec_label_pc_e184, %dec_label_pc_e17e
  %rdi.2.reload = load i64, i64* %rdi.2.reg2mem
  %rax.5.reload = load i64, i64* %rax.5.reg2mem
  %.reload20 = load i64, i64* %.reg2mem19, !insn.addr !6058
  %202 = trunc i64 %rax.5.reload to i32, !insn.addr !6059
  %203 = lshr i32 %202, ptrtoint (i8** @global_var_3 to i32), !insn.addr !6060
  %204 = zext i32 %203 to i64, !insn.addr !6061
  %205 = inttoptr i64 %.reload20 to i8*, !insn.addr !6058
  %206 = inttoptr i64 %rdi.2.reload to i8*, !insn.addr !6058
  call void @__asm_rep_movsq_memcpy(i8* %206, i8* %205, i64 %204), !insn.addr !6058
  ret i64 ptrtoint (i32* @global_var_1 to i64)

dec_label_pc_e1d2:                                ; preds = %dec_label_pc_df45
  %207 = icmp eq i8 %12, ptrtoint (i32* @global_var_1 to i8), !insn.addr !6062
  %208 = icmp eq i8 %5, ptrtoint (i32* @global_var_1 to i8), !insn.addr !6063
  %209 = icmp eq i1 %208, %207
  br i1 %209, label %dec_label_pc_e1e3, label %dec_label_pc_e470, !insn.addr !6064

dec_label_pc_e1e3:                                ; preds = %dec_label_pc_e1d2
  %210 = add i64 %arg1, 586869, !insn.addr !6065
  %211 = inttoptr i64 %210 to i8*, !insn.addr !6065
  %212 = load i8, i8* %211, align 1, !insn.addr !6065
  %213 = icmp eq i8 %212, 8, !insn.addr !6066
  %214 = icmp eq i1 %213, false, !insn.addr !6067
  store i8 %212, i8* %.reg2mem21, !insn.addr !6067
  br i1 %214, label %dec_label_pc_e219, label %dec_label_pc_e1f6, !insn.addr !6067

dec_label_pc_e1f6:                                ; preds = %dec_label_pc_e1e3
  %215 = load i64, i64* %rsi, align 8, !insn.addr !6068
  %216 = inttoptr i64 %215 to i8*, !insn.addr !6068
  call void @__asm_rep_movsq_memcpy(i8* nonnull %stack_var_-248, i8* %216, i64 ptrtoint (i8** @global_var_17 to i64)), !insn.addr !6068
  %217 = load i8, i8* %4, align 1, !insn.addr !6069
  %218 = icmp eq i8 %217, ptrtoint (i32* @global_var_1 to i8), !insn.addr !6069
  %219 = icmp eq i1 %218, false, !insn.addr !6070
  br i1 %219, label %dec_label_pc_e470, label %dec_label_pc_e1f6.dec_label_pc_e219_crit_edge, !insn.addr !6070

dec_label_pc_e1f6.dec_label_pc_e219_crit_edge:    ; preds = %dec_label_pc_e1f6
  %.pre = load i8, i8* %211, align 1
  store i8 %.pre, i8* %.reg2mem21
  br label %dec_label_pc_e219

dec_label_pc_e219:                                ; preds = %dec_label_pc_e1f6.dec_label_pc_e219_crit_edge, %dec_label_pc_e1e3
  %.reload22 = load i8, i8* %.reg2mem21, !insn.addr !6071
  %220 = icmp eq i8 %.reload22, 0, !insn.addr !6072
  %221 = icmp eq i1 %220, false, !insn.addr !6073
  br i1 %221, label %dec_label_pc_e23b, label %dec_label_pc_e224, !insn.addr !6073

dec_label_pc_e224:                                ; preds = %dec_label_pc_e219
  %222 = bitcast i8* %stack_var_-248 to i64*, !insn.addr !6074
  %223 = call i64 @DTV_HardwareDecrypt_Ver01.395(i64 %arg1, i64* nonnull %222, i64 %arg3), !insn.addr !6074
  br label %dec_label_pc_e470, !insn.addr !6075

dec_label_pc_e23b:                                ; preds = %dec_label_pc_e219
  %224 = icmp ne i8 %.reload22, 1, !insn.addr !6076
  %225 = icmp eq i8 %.reload22, 4, !insn.addr !6077
  %226 = icmp eq i1 %225, false, !insn.addr !6078
  %or.cond6 = icmp eq i1 %224, %226
  br i1 %or.cond6, label %dec_label_pc_e25a, label %dec_label_pc_e243, !insn.addr !6079

dec_label_pc_e243:                                ; preds = %dec_label_pc_e23b
  %227 = bitcast i8* %stack_var_-248 to i64*, !insn.addr !6080
  %228 = call i64 @DTV_HardwareDecrypt.598(i64 %arg1, i64* nonnull %227, i64 %arg3), !insn.addr !6080
  br label %dec_label_pc_e470, !insn.addr !6081

dec_label_pc_e25a:                                ; preds = %dec_label_pc_e23b
  %229 = icmp eq i8 %.reload22, 3, !insn.addr !6082
  %230 = icmp eq i1 %229, false, !insn.addr !6083
  br i1 %230, label %dec_label_pc_e275, label %dec_label_pc_e25e, !insn.addr !6083

dec_label_pc_e25e:                                ; preds = %dec_label_pc_e25a
  %231 = bitcast i8* %stack_var_-248 to i64*, !insn.addr !6084
  %232 = call i64 @DTV_HardwareDecrypt_5211Ver01.412(i64 %arg1, i64* nonnull %231, i64 %arg3), !insn.addr !6084
  br label %dec_label_pc_e470, !insn.addr !6085

dec_label_pc_e275:                                ; preds = %dec_label_pc_e25a
  %233 = icmp eq i8 %.reload22, 7, !insn.addr !6086
  %234 = icmp eq i1 %233, false, !insn.addr !6087
  br i1 %234, label %dec_label_pc_e356, label %dec_label_pc_e27d, !insn.addr !6087

dec_label_pc_e27d:                                ; preds = %dec_label_pc_e275
  %235 = bitcast i64* %rsi to i8*
  %236 = load i8, i8* %235, align 8, !insn.addr !6088
  %237 = inttoptr i64 %arg3 to i8*, !insn.addr !6089
  store i8 %236, i8* %237, align 1, !insn.addr !6089
  %238 = add i64 %arg2, ptrtoint (i32* @global_var_1 to i64), !insn.addr !6090
  %239 = inttoptr i64 %238 to i8*, !insn.addr !6090
  %240 = load i8, i8* %239, align 1, !insn.addr !6090
  %241 = add i64 %arg3, ptrtoint (i32* @global_var_1 to i64), !insn.addr !6091
  %242 = inttoptr i64 %241 to i8*, !insn.addr !6091
  store i8 %240, i8* %242, align 1, !insn.addr !6091
  %243 = add i64 %arg2, ptrtoint (i32* @global_var_2 to i64), !insn.addr !6092
  %244 = inttoptr i64 %243 to i8*, !insn.addr !6092
  %245 = load i8, i8* %244, align 1, !insn.addr !6092
  %246 = add i64 %arg3, ptrtoint (i32* @global_var_2 to i64), !insn.addr !6093
  %247 = inttoptr i64 %246 to i8*, !insn.addr !6093
  store i8 %245, i8* %247, align 1, !insn.addr !6093
  %248 = add i64 %arg2, ptrtoint (i8** @global_var_3 to i64), !insn.addr !6094
  %249 = inttoptr i64 %248 to i8*, !insn.addr !6094
  %250 = load i8, i8* %249, align 1, !insn.addr !6094
  %251 = add i64 %arg3, ptrtoint (i8** @global_var_3 to i64), !insn.addr !6095
  %252 = inttoptr i64 %251 to i8*, !insn.addr !6095
  store i8 %250, i8* %252, align 1, !insn.addr !6095
  %253 = add i64 %arg2, 184, !insn.addr !6096
  %254 = add i64 %arg1, 588970, !insn.addr !6097
  %255 = inttoptr i64 %254 to i8*, !insn.addr !6097
  %256 = add i64 %arg1, 588969, !insn.addr !6098
  %257 = inttoptr i64 %256 to i8*, !insn.addr !6098
  %258 = add i64 %arg1, 588968, !insn.addr !6099
  %259 = inttoptr i64 %258 to i8*, !insn.addr !6099
  %260 = add i64 %arg1, 588971, !insn.addr !6100
  %261 = inttoptr i64 %260 to i8*, !insn.addr !6100
  store i64 %arg2, i64* %rax.6.reg2mem, !insn.addr !6096
  br label %dec_label_pc_e2af, !insn.addr !6096

dec_label_pc_e2af:                                ; preds = %dec_label_pc_e2af, %dec_label_pc_e27d
  %rax.6.reload = load i64, i64* %rax.6.reg2mem
  %262 = load i8, i8* %255, align 1, !insn.addr !6097
  %263 = add i64 %rax.6.reload, ptrtoint (i8** @global_var_b to i64), !insn.addr !6101
  %264 = inttoptr i64 %263 to i8*, !insn.addr !6101
  %265 = load i8, i8* %264, align 1, !insn.addr !6101
  %266 = xor i8 %265, %262, !insn.addr !6101
  store i8 %266, i8* %264, align 1, !insn.addr !6101
  %267 = load i8, i8* %257, align 1, !insn.addr !6098
  %268 = add i64 %rax.6.reload, ptrtoint (i8* @global_var_a to i64), !insn.addr !6102
  %269 = inttoptr i64 %268 to i8*, !insn.addr !6102
  %270 = load i8, i8* %269, align 1, !insn.addr !6102
  %271 = xor i8 %270, %267, !insn.addr !6102
  store i8 %271, i8* %269, align 1, !insn.addr !6102
  %272 = load i8, i8* %255, align 1, !insn.addr !6103
  %273 = add i64 %rax.6.reload, ptrtoint (i8** @global_var_9 to i64), !insn.addr !6104
  %274 = inttoptr i64 %273 to i8*, !insn.addr !6104
  %275 = load i8, i8* %274, align 1, !insn.addr !6104
  %276 = xor i8 %275, %272, !insn.addr !6104
  store i8 %276, i8* %274, align 1, !insn.addr !6104
  %277 = load i8, i8* %259, align 1, !insn.addr !6099
  %278 = add i64 %rax.6.reload, 8, !insn.addr !6105
  %279 = inttoptr i64 %278 to i8*, !insn.addr !6105
  %280 = load i8, i8* %279, align 1, !insn.addr !6105
  %281 = xor i8 %280, %277, !insn.addr !6105
  %282 = add i64 %rax.6.reload, ptrtoint (i8* @global_var_8 to i64), !insn.addr !6105
  %283 = inttoptr i64 %282 to i8*, !insn.addr !6105
  store i8 %281, i8* %283, align 1, !insn.addr !6105
  %284 = load i8, i8* %257, align 1, !insn.addr !6106
  %285 = add i64 %rax.6.reload, ptrtoint (i8** @global_var_7 to i64), !insn.addr !6107
  %286 = inttoptr i64 %285 to i8*, !insn.addr !6107
  %287 = load i8, i8* %286, align 1, !insn.addr !6107
  %288 = xor i8 %287, %284, !insn.addr !6107
  store i8 %288, i8* %286, align 1, !insn.addr !6107
  %289 = load i8, i8* %261, align 1, !insn.addr !6100
  %290 = add i64 %rax.6.reload, ptrtoint (i8* @global_var_6 to i64), !insn.addr !6108
  %291 = inttoptr i64 %290 to i8*, !insn.addr !6108
  %292 = load i8, i8* %291, align 1, !insn.addr !6108
  %293 = xor i8 %292, %289, !insn.addr !6108
  store i8 %293, i8* %291, align 1, !insn.addr !6108
  %294 = load i8, i8* %259, align 1, !insn.addr !6109
  %295 = add i64 %rax.6.reload, ptrtoint (i8* @global_var_5 to i64), !insn.addr !6110
  %296 = inttoptr i64 %295 to i8*, !insn.addr !6110
  %297 = load i8, i8* %296, align 1, !insn.addr !6110
  %298 = xor i8 %297, %294, !insn.addr !6110
  store i8 %298, i8* %296, align 1, !insn.addr !6110
  %299 = load i8, i8* %259, align 1, !insn.addr !6111
  %300 = add i64 %rax.6.reload, ptrtoint (i16* @global_var_4 to i64), !insn.addr !6112
  %301 = inttoptr i64 %300 to i8*, !insn.addr !6112
  %302 = load i8, i8* %301, align 1, !insn.addr !6112
  %303 = xor i8 %302, %299, !insn.addr !6112
  store i8 %303, i8* %301, align 1, !insn.addr !6112
  %304 = icmp eq i64 %282, %253, !insn.addr !6113
  %305 = icmp eq i1 %304, false, !insn.addr !6114
  store i64 %282, i64* %rax.6.reg2mem, !insn.addr !6114
  br i1 %305, label %dec_label_pc_e2af, label %dec_label_pc_e308, !insn.addr !6114

dec_label_pc_e308:                                ; preds = %dec_label_pc_e2af
  %306 = add i64 %9, 15984, !insn.addr !6115
  %307 = add i64 %arg3, ptrtoint (i16* @global_var_4 to i64), !insn.addr !6116
  %308 = add i64 %arg2, ptrtoint (i16* @global_var_4 to i64), !insn.addr !6117
  %309 = add i64 %arg1, 588952, !insn.addr !6118
  %310 = inttoptr i64 %309 to i64*, !insn.addr !6118
  %311 = load i64, i64* %310, align 8, !insn.addr !6118
  %312 = inttoptr i64 %308 to i64*, !insn.addr !6119
  %313 = call i64 @des_crypt_ecb_Multi.538(i64 %311, i64* %312, i64 %307, i64 %306, i64* bitcast (i8* @global_var_10 to i64*)), !insn.addr !6119
  %314 = add i64 %arg3, 132, !insn.addr !6120
  %315 = add i64 %arg2, 132, !insn.addr !6121
  %316 = add i64 %arg1, 588960, !insn.addr !6122
  %317 = inttoptr i64 %316 to i64*, !insn.addr !6122
  %318 = load i64, i64* %317, align 8, !insn.addr !6122
  %319 = inttoptr i64 %315 to i64*, !insn.addr !6123
  %320 = call i64 @des_crypt_ecb_Multi.538(i64 %318, i64* %319, i64 %314, i64 %306, i64* bitcast (i8** @global_var_7 to i64*)), !insn.addr !6123
  br label %dec_label_pc_e470, !insn.addr !6124

dec_label_pc_e356:                                ; preds = %dec_label_pc_e275
  %321 = icmp eq i8 %.reload22, 8, !insn.addr !6125
  %322 = icmp eq i1 %321, false, !insn.addr !6126
  br i1 %322, label %dec_label_pc_e470, label %dec_label_pc_e35e, !insn.addr !6126

dec_label_pc_e35e:                                ; preds = %dec_label_pc_e356
  %323 = bitcast i64* %rsi to i8*
  %324 = load i8, i8* %323, align 8, !insn.addr !6127
  %325 = inttoptr i64 %arg3 to i8*, !insn.addr !6128
  store i8 %324, i8* %325, align 1, !insn.addr !6128
  %326 = add i64 %arg2, ptrtoint (i32* @global_var_1 to i64), !insn.addr !6129
  %327 = inttoptr i64 %326 to i8*, !insn.addr !6129
  %328 = load i8, i8* %327, align 1, !insn.addr !6129
  %329 = add i64 %arg3, ptrtoint (i32* @global_var_1 to i64), !insn.addr !6130
  %330 = inttoptr i64 %329 to i8*, !insn.addr !6130
  store i8 %328, i8* %330, align 1, !insn.addr !6130
  %331 = add i64 %arg2, ptrtoint (i32* @global_var_2 to i64), !insn.addr !6131
  %332 = inttoptr i64 %331 to i8*, !insn.addr !6131
  %333 = load i8, i8* %332, align 1, !insn.addr !6131
  %334 = add i64 %arg3, ptrtoint (i32* @global_var_2 to i64), !insn.addr !6132
  %335 = inttoptr i64 %334 to i8*, !insn.addr !6132
  store i8 %333, i8* %335, align 1, !insn.addr !6132
  %336 = add i64 %arg2, ptrtoint (i8** @global_var_3 to i64), !insn.addr !6133
  %337 = inttoptr i64 %336 to i8*, !insn.addr !6133
  %338 = load i8, i8* %337, align 1, !insn.addr !6133
  %339 = add i64 %arg3, ptrtoint (i8** @global_var_3 to i64), !insn.addr !6134
  %340 = inttoptr i64 %339 to i8*, !insn.addr !6134
  store i8 %338, i8* %340, align 1, !insn.addr !6134
  %341 = add i64 %arg2, 184, !insn.addr !6135
  %342 = add i64 %arg1, 588970, !insn.addr !6136
  %343 = inttoptr i64 %342 to i8*, !insn.addr !6136
  %344 = add i64 %arg1, 588969, !insn.addr !6137
  %345 = inttoptr i64 %344 to i8*, !insn.addr !6137
  %346 = add i64 %arg1, 588968, !insn.addr !6138
  %347 = inttoptr i64 %346 to i8*, !insn.addr !6138
  %348 = add i64 %arg1, 588971, !insn.addr !6139
  %349 = inttoptr i64 %348 to i8*, !insn.addr !6139
  store i64 %arg2, i64* %rax.7.reg2mem, !insn.addr !6135
  br label %dec_label_pc_e390, !insn.addr !6135

dec_label_pc_e390:                                ; preds = %dec_label_pc_e390, %dec_label_pc_e35e
  %rax.7.reload = load i64, i64* %rax.7.reg2mem
  %350 = load i8, i8* %343, align 1, !insn.addr !6136
  %351 = add i64 %rax.7.reload, ptrtoint (i8** @global_var_b to i64), !insn.addr !6140
  %352 = inttoptr i64 %351 to i8*, !insn.addr !6140
  %353 = load i8, i8* %352, align 1, !insn.addr !6140
  %354 = xor i8 %353, %350, !insn.addr !6140
  store i8 %354, i8* %352, align 1, !insn.addr !6140
  %355 = load i8, i8* %345, align 1, !insn.addr !6137
  %356 = add i64 %rax.7.reload, ptrtoint (i8* @global_var_a to i64), !insn.addr !6141
  %357 = inttoptr i64 %356 to i8*, !insn.addr !6141
  %358 = load i8, i8* %357, align 1, !insn.addr !6141
  %359 = xor i8 %358, %355, !insn.addr !6141
  store i8 %359, i8* %357, align 1, !insn.addr !6141
  %360 = load i8, i8* %343, align 1, !insn.addr !6142
  %361 = add i64 %rax.7.reload, ptrtoint (i8** @global_var_9 to i64), !insn.addr !6143
  %362 = inttoptr i64 %361 to i8*, !insn.addr !6143
  %363 = load i8, i8* %362, align 1, !insn.addr !6143
  %364 = xor i8 %363, %360, !insn.addr !6143
  store i8 %364, i8* %362, align 1, !insn.addr !6143
  %365 = load i8, i8* %347, align 1, !insn.addr !6138
  %366 = add i64 %rax.7.reload, 8, !insn.addr !6144
  %367 = inttoptr i64 %366 to i8*, !insn.addr !6144
  %368 = load i8, i8* %367, align 1, !insn.addr !6144
  %369 = xor i8 %368, %365, !insn.addr !6144
  %370 = add i64 %rax.7.reload, ptrtoint (i8* @global_var_8 to i64), !insn.addr !6144
  %371 = inttoptr i64 %370 to i8*, !insn.addr !6144
  store i8 %369, i8* %371, align 1, !insn.addr !6144
  %372 = load i8, i8* %345, align 1, !insn.addr !6145
  %373 = add i64 %rax.7.reload, ptrtoint (i8** @global_var_7 to i64), !insn.addr !6146
  %374 = inttoptr i64 %373 to i8*, !insn.addr !6146
  %375 = load i8, i8* %374, align 1, !insn.addr !6146
  %376 = xor i8 %375, %372, !insn.addr !6146
  store i8 %376, i8* %374, align 1, !insn.addr !6146
  %377 = load i8, i8* %349, align 1, !insn.addr !6139
  %378 = add i64 %rax.7.reload, ptrtoint (i8* @global_var_6 to i64), !insn.addr !6147
  %379 = inttoptr i64 %378 to i8*, !insn.addr !6147
  %380 = load i8, i8* %379, align 1, !insn.addr !6147
  %381 = xor i8 %380, %377, !insn.addr !6147
  store i8 %381, i8* %379, align 1, !insn.addr !6147
  %382 = load i8, i8* %347, align 1, !insn.addr !6148
  %383 = add i64 %rax.7.reload, ptrtoint (i8* @global_var_5 to i64), !insn.addr !6149
  %384 = inttoptr i64 %383 to i8*, !insn.addr !6149
  %385 = load i8, i8* %384, align 1, !insn.addr !6149
  %386 = xor i8 %385, %382, !insn.addr !6149
  store i8 %386, i8* %384, align 1, !insn.addr !6149
  %387 = load i8, i8* %347, align 1, !insn.addr !6150
  %388 = add i64 %rax.7.reload, ptrtoint (i16* @global_var_4 to i64), !insn.addr !6151
  %389 = inttoptr i64 %388 to i8*, !insn.addr !6151
  %390 = load i8, i8* %389, align 1, !insn.addr !6151
  %391 = xor i8 %390, %387, !insn.addr !6151
  store i8 %391, i8* %389, align 1, !insn.addr !6151
  %392 = icmp eq i64 %370, %341, !insn.addr !6152
  %393 = icmp eq i1 %392, false, !insn.addr !6153
  store i64 %370, i64* %rax.7.reg2mem, !insn.addr !6153
  br i1 %393, label %dec_label_pc_e390, label %dec_label_pc_e3e9, !insn.addr !6153

dec_label_pc_e3e9:                                ; preds = %dec_label_pc_e390
  store i64 %arg2, i64* %rsi, align 8, !insn.addr !6154
  %394 = trunc i64 %arg3 to i8
  %395 = and i8 %394, ptrtoint (i32* @global_var_1 to i8), !insn.addr !6155
  %396 = icmp eq i8 %395, 0, !insn.addr !6155
  store i8 %394, i8* %.pre-phi.reg2mem, !insn.addr !6156
  store i64 %arg2, i64* %.reg2mem23, !insn.addr !6156
  store i64 188, i64* %rax.8.reg2mem, !insn.addr !6156
  store i64 %arg3, i64* %rdi.3.reg2mem, !insn.addr !6156
  br i1 %396, label %dec_label_pc_e40e, label %dec_label_pc_e3fa, !insn.addr !6156

dec_label_pc_e3fa:                                ; preds = %dec_label_pc_e3e9
  %397 = trunc i64 %arg2 to i8
  store i8 %397, i8* %325, align 1, !insn.addr !6157
  %398 = load i64, i64* %rsi, align 8, !insn.addr !6158
  %399 = add i64 %398, ptrtoint (i32* @global_var_1 to i64), !insn.addr !6158
  store i64 %399, i64* %rsi, align 8, !insn.addr !6158
  %.pre8 = trunc i64 %329 to i8, !insn.addr !6159
  store i8 %.pre8, i8* %.pre-phi.reg2mem, !insn.addr !6160
  store i64 %399, i64* %.reg2mem23, !insn.addr !6160
  store i64 187, i64* %rax.8.reg2mem, !insn.addr !6160
  store i64 %329, i64* %rdi.3.reg2mem, !insn.addr !6160
  br label %dec_label_pc_e40e, !insn.addr !6160

dec_label_pc_e40e:                                ; preds = %dec_label_pc_e3fa, %dec_label_pc_e3e9
  %rdi.3.reload = load i64, i64* %rdi.3.reg2mem
  %rax.8.reload = load i64, i64* %rax.8.reg2mem
  %.reload24 = load i64, i64* %.reg2mem23, !insn.addr !6161
  %.pre-phi.reload = load i8, i8* %.pre-phi.reg2mem
  %400 = and i8 %.pre-phi.reload, ptrtoint (i32* @global_var_2 to i8), !insn.addr !6159
  %401 = icmp eq i8 %400, 0, !insn.addr !6159
  store i8 %.pre-phi.reload, i8* %.pre-phi10.reg2mem, !insn.addr !6162
  store i64 %.reload24, i64* %.reg2mem25, !insn.addr !6162
  store i64 %rax.8.reload, i64* %rax.9.reg2mem, !insn.addr !6162
  store i64 %rdi.3.reload, i64* %rdi.4.reg2mem, !insn.addr !6162
  br i1 %401, label %dec_label_pc_e425, label %dec_label_pc_e414, !insn.addr !6162

dec_label_pc_e414:                                ; preds = %dec_label_pc_e40e
  %402 = inttoptr i64 %.reload24 to i16*, !insn.addr !6161
  %403 = load i16, i16* %402, align 2, !insn.addr !6161
  %404 = inttoptr i64 %rdi.3.reload to i16*, !insn.addr !6163
  store i16 %403, i16* %404, align 2, !insn.addr !6163
  %405 = add i64 %rdi.3.reload, ptrtoint (i32* @global_var_2 to i64), !insn.addr !6164
  %406 = load i64, i64* %rsi, align 8, !insn.addr !6165
  %407 = add i64 %406, ptrtoint (i32* @global_var_2 to i64), !insn.addr !6165
  store i64 %407, i64* %rsi, align 8, !insn.addr !6165
  %408 = add nuw nsw i64 %rax.8.reload, 254, !insn.addr !6166
  %409 = and i64 %408, 191, !insn.addr !6166
  %.pre9 = trunc i64 %405 to i8, !insn.addr !6167
  store i8 %.pre9, i8* %.pre-phi10.reg2mem, !insn.addr !6166
  store i64 %407, i64* %.reg2mem25, !insn.addr !6166
  store i64 %409, i64* %rax.9.reg2mem, !insn.addr !6166
  store i64 %405, i64* %rdi.4.reg2mem, !insn.addr !6166
  br label %dec_label_pc_e425, !insn.addr !6166

dec_label_pc_e425:                                ; preds = %dec_label_pc_e414, %dec_label_pc_e40e
  %rdi.4.reload = load i64, i64* %rdi.4.reg2mem
  %rax.9.reload = load i64, i64* %rax.9.reg2mem
  %.reload26 = load i64, i64* %.reg2mem25, !insn.addr !6168
  %.pre-phi10.reload = load i8, i8* %.pre-phi10.reg2mem
  %410 = and i8 %.pre-phi10.reload, ptrtoint (i16* @global_var_4 to i8), !insn.addr !6167
  %411 = icmp eq i8 %410, 0, !insn.addr !6167
  store i64 %.reload26, i64* %.reg2mem27, !insn.addr !6169
  store i64 %rax.9.reload, i64* %rax.10.reg2mem, !insn.addr !6169
  store i64 %rdi.4.reload, i64* %rdi.5.reg2mem, !insn.addr !6169
  br i1 %411, label %dec_label_pc_e43a, label %dec_label_pc_e42b, !insn.addr !6169

dec_label_pc_e42b:                                ; preds = %dec_label_pc_e425
  %412 = inttoptr i64 %.reload26 to i32*, !insn.addr !6168
  %413 = load i32, i32* %412, align 4, !insn.addr !6168
  %414 = inttoptr i64 %rdi.4.reload to i32*, !insn.addr !6170
  store i32 %413, i32* %414, align 4, !insn.addr !6170
  %415 = add i64 %rdi.4.reload, ptrtoint (i16* @global_var_4 to i64), !insn.addr !6171
  %416 = load i64, i64* %rsi, align 8, !insn.addr !6172
  %417 = add i64 %416, ptrtoint (i16* @global_var_4 to i64), !insn.addr !6172
  store i64 %417, i64* %rsi, align 8, !insn.addr !6172
  %418 = add nsw i64 %rax.9.reload, 4294967292, !insn.addr !6173
  %419 = and i64 %418, 4294967295, !insn.addr !6173
  store i64 %417, i64* %.reg2mem27, !insn.addr !6173
  store i64 %419, i64* %rax.10.reg2mem, !insn.addr !6173
  store i64 %415, i64* %rdi.5.reg2mem, !insn.addr !6173
  br label %dec_label_pc_e43a, !insn.addr !6173

dec_label_pc_e43a:                                ; preds = %dec_label_pc_e42b, %dec_label_pc_e425
  %rdi.5.reload = load i64, i64* %rdi.5.reg2mem
  %rax.10.reload = load i64, i64* %rax.10.reg2mem
  %.reload28 = load i64, i64* %.reg2mem27, !insn.addr !6174
  %420 = trunc i64 %rax.10.reload to i32, !insn.addr !6175
  %421 = lshr i32 %420, ptrtoint (i8** @global_var_3 to i32), !insn.addr !6176
  %422 = zext i32 %421 to i64, !insn.addr !6177
  %423 = inttoptr i64 %.reload28 to i8*, !insn.addr !6174
  %424 = inttoptr i64 %rdi.5.reload to i8*, !insn.addr !6174
  call void @__asm_rep_movsq_memcpy(i8* %424, i8* %423, i64 %422), !insn.addr !6174
  %425 = select i1 %0, i64 -8, i64 ptrtoint (i8* @global_var_8 to i64), !insn.addr !6174
  %426 = mul i64 %425, %422, !insn.addr !6174
  %427 = add i64 %426, %rdi.5.reload, !insn.addr !6174
  store i64 %427, i64* %rsi, align 8, !insn.addr !6174
  br label %dec_label_pc_e470

dec_label_pc_e470:                                ; preds = %dec_label_pc_e43a, %dec_label_pc_e1d2, %dec_label_pc_e356, %dec_label_pc_e308, %dec_label_pc_e25e, %dec_label_pc_e243, %dec_label_pc_e224, %dec_label_pc_e1f6, %dec_label_pc_e0cb, %dec_label_pc_e076, %dec_label_pc_dfdd, %dec_label_pc_dfc2, %dec_label_pc_df9f, %dec_label_pc_df87, %dec_label_pc_def7
  ret i64 ptrtoint (i32* @global_var_1 to i64), !insn.addr !6178
}

define i32 @DTV_Calculate_Final_Key(i64 %pTuner, i8* %VID, i8* %PID, i8* %EEPROM8b, i8* %APEncSeed, i8* %PCKey) local_unnamed_addr {
dec_label_pc_e479:
  %rax.0.reg2mem = alloca i64, !insn.addr !6179
  %0 = ptrtoint i8* %PID to i64
  %1 = call i64 @__readgsqword(i64 40), !insn.addr !6179
  %2 = icmp eq i64 %1, %0, !insn.addr !6179
  br i1 %2, label %dec_label_pc_e497, label %dec_label_pc_e492, !insn.addr !6180

dec_label_pc_e492:                                ; preds = %dec_label_pc_e479
  %3 = call i64 @__stack_chk_fail(), !insn.addr !6181
  store i64 %3, i64* %rax.0.reg2mem, !insn.addr !6181
  br label %dec_label_pc_e497, !insn.addr !6181

dec_label_pc_e497:                                ; preds = %dec_label_pc_e492, %dec_label_pc_e479
  %rax.0.reload = load i64, i64* %rax.0.reg2mem
  %4 = trunc i64 %rax.0.reload to i32, !insn.addr !6182
  ret i32 %4, !insn.addr !6182
}

define i64 @DTV_Calculate_Final_Key.317(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4, i64 %arg5, i64 %arg6) local_unnamed_addr {
dec_label_pc_e4a9:
  %r12.3.reg2mem = alloca i64, !insn.addr !6183
  %rbx.4.reg2mem = alloca i64, !insn.addr !6183
  %rsi.0.reg2mem = alloca i64, !insn.addr !6183
  %rdx.0.reg2mem = alloca i64, !insn.addr !6183
  %rcx.0.reg2mem = alloca i64, !insn.addr !6183
  %rax.3.reg2mem = alloca i64, !insn.addr !6183
  %rax.2.reg2mem = alloca i64, !insn.addr !6183
  %r12.2.reg2mem = alloca i64, !insn.addr !6183
  %rbx.2.reg2mem = alloca i64, !insn.addr !6183
  %rax.1.reg2mem = alloca i64, !insn.addr !6183
  %r12.1.reg2mem = alloca i64, !insn.addr !6183
  %rbx.1.reg2mem = alloca i64, !insn.addr !6183
  %rax.0.reg2mem = alloca i64, !insn.addr !6183
  %r12.0.reg2mem = alloca i64, !insn.addr !6183
  %rbx.0.reg2mem = alloca i64, !insn.addr !6183
  %stack_var_-136 = alloca i64, align 8
  %stack_var_-72 = alloca i64, align 8
  %stack_var_-120 = alloca i64, align 8
  %stack_var_-104 = alloca i64, align 8
  %stack_var_-936 = alloca i64, align 8
  %stack_var_-168 = alloca i64, align 8
  %stack_var_-200 = alloca i64, align 8
  %stack_var_-88 = alloca i8, align 1
  %0 = call i64 @mcount(), !insn.addr !6184
  %1 = call i64 @__readgsqword(i64 40), !insn.addr !6185
  store i8 ptrtoint (i8** @global_var_1e to i8), i8* %stack_var_-88, align 1, !insn.addr !6186
  %2 = add i64 %arg1, 7480, !insn.addr !6187
  %3 = inttoptr i64 %2 to i64*, !insn.addr !6187
  %4 = load i64, i64* %3, align 8, !insn.addr !6187
  %5 = bitcast i64* %stack_var_-200 to i8*, !insn.addr !6188
  call void @__asm_rep_stosq_memset(i8* nonnull %5, i64 0, i64 ptrtoint (i8* @global_var_8 to i64)), !insn.addr !6188
  %6 = ptrtoint i64* %stack_var_-200 to i64, !insn.addr !6189
  %7 = ptrtoint i64* %stack_var_-168 to i64, !insn.addr !6190
  store i64 %6, i64* %rbx.0.reg2mem, !insn.addr !6191
  store i64 %arg5, i64* %r12.0.reg2mem, !insn.addr !6191
  br label %dec_label_pc_e56b, !insn.addr !6191

dec_label_pc_e56b:                                ; preds = %dec_label_pc_e56b, %dec_label_pc_e4a9
  %r12.0.reload = load i64, i64* %r12.0.reg2mem
  %rbx.0.reload = load i64, i64* %rbx.0.reg2mem
  %8 = inttoptr i64 %r12.0.reload to i8*, !insn.addr !6192
  %9 = load i8, i8* %8, align 1, !insn.addr !6192
  %10 = zext i8 %9 to i64, !insn.addr !6192
  %11 = call i64 @sprintf(i64 %rbx.0.reload, i64 0, i64 %10, i8 0, i64 %arg5, i64 %arg6), !insn.addr !6193
  %12 = add i64 %r12.0.reload, ptrtoint (i32* @global_var_1 to i64), !insn.addr !6194
  %13 = add i64 %rbx.0.reload, ptrtoint (i32* @global_var_2 to i64), !insn.addr !6195
  %14 = icmp eq i64 %13, %7, !insn.addr !6196
  %15 = icmp eq i1 %14, false, !insn.addr !6197
  store i64 %13, i64* %rbx.0.reg2mem, !insn.addr !6197
  store i64 %12, i64* %r12.0.reg2mem, !insn.addr !6197
  br i1 %15, label %dec_label_pc_e56b, label %dec_label_pc_e58d, !insn.addr !6197

dec_label_pc_e58d:                                ; preds = %dec_label_pc_e56b
  %16 = add i64 %4, 3816, !insn.addr !6198
  %17 = call i64 @makeKey.363(i64* nonnull %stack_var_-936, i64 0, i64 128, i64* nonnull %stack_var_-200, i64 %16), !insn.addr !6199
  %18 = ptrtoint i64* %stack_var_-936 to i64, !insn.addr !6200
  %19 = ptrtoint i64* %stack_var_-104 to i64, !insn.addr !6201
  %20 = add i64 %18, 240, !insn.addr !6202
  store i64 0, i64* %rax.0.reg2mem, !insn.addr !6201
  br label %dec_label_pc_e5d1, !insn.addr !6201

dec_label_pc_e5d1:                                ; preds = %dec_label_pc_e5d1, %dec_label_pc_e58d
  %rax.0.reload = load i64, i64* %rax.0.reg2mem
  %21 = add i64 %rax.0.reload, %20, !insn.addr !6202
  %22 = inttoptr i64 %21 to i32*, !insn.addr !6202
  %23 = load i32, i32* %22, align 4, !insn.addr !6202
  %24 = udiv i32 %23, 16777216, !insn.addr !6203
  %25 = trunc i32 %24 to i8, !insn.addr !6204
  %26 = add i64 %rax.0.reload, %19
  %27 = inttoptr i64 %26 to i8*, !insn.addr !6204
  store i8 %25, i8* %27, align 2, !insn.addr !6204
  %28 = udiv i32 %23, 65536, !insn.addr !6205
  %29 = trunc i32 %28 to i8, !insn.addr !6206
  %30 = add i64 %26, ptrtoint (i32* @global_var_1 to i64), !insn.addr !6206
  %31 = inttoptr i64 %30 to i8*, !insn.addr !6206
  store i8 %29, i8* %31, align 2, !insn.addr !6206
  %32 = udiv i32 %23, 256, !insn.addr !6207
  %33 = trunc i32 %32 to i8, !insn.addr !6208
  %34 = add i64 %26, ptrtoint (i32* @global_var_2 to i64), !insn.addr !6208
  %35 = inttoptr i64 %34 to i8*, !insn.addr !6208
  store i8 %33, i8* %35, align 2, !insn.addr !6208
  %36 = trunc i32 %23 to i8, !insn.addr !6209
  %37 = add i64 %26, ptrtoint (i8** @global_var_3 to i64), !insn.addr !6209
  %38 = inttoptr i64 %37 to i8*, !insn.addr !6209
  store i8 %36, i8* %38, align 2, !insn.addr !6209
  %39 = add i64 %rax.0.reload, ptrtoint (i16* @global_var_4 to i64), !insn.addr !6210
  %40 = icmp eq i64 %39, ptrtoint (i8* @global_var_10 to i64), !insn.addr !6211
  %41 = icmp eq i1 %40, false, !insn.addr !6212
  store i64 %39, i64* %rax.0.reg2mem, !insn.addr !6212
  br i1 %41, label %dec_label_pc_e5d1, label %dec_label_pc_e600, !insn.addr !6212

dec_label_pc_e600:                                ; preds = %dec_label_pc_e5d1
  %42 = and i64 %39, -256, !insn.addr !6213
  call void @__asm_rep_stosq_memset(i8* nonnull %5, i64 %42, i64 ptrtoint (i8* @global_var_8 to i64)), !insn.addr !6214
  store i64 %6, i64* %rbx.1.reg2mem, !insn.addr !6215
  store i64 %arg6, i64* %r12.1.reg2mem, !insn.addr !6215
  br label %dec_label_pc_e629, !insn.addr !6215

dec_label_pc_e629:                                ; preds = %dec_label_pc_e629, %dec_label_pc_e600
  %r12.1.reload = load i64, i64* %r12.1.reg2mem
  %rbx.1.reload = load i64, i64* %rbx.1.reg2mem
  %43 = inttoptr i64 %r12.1.reload to i8*, !insn.addr !6216
  %44 = load i8, i8* %43, align 1, !insn.addr !6216
  %45 = zext i8 %44 to i64, !insn.addr !6216
  %46 = call i64 @sprintf(i64 %rbx.1.reload, i64 0, i64 %45, i8 0, i64 %16, i64 %arg6), !insn.addr !6217
  %47 = add i64 %r12.1.reload, ptrtoint (i32* @global_var_1 to i64), !insn.addr !6218
  %48 = add i64 %rbx.1.reload, ptrtoint (i32* @global_var_2 to i64), !insn.addr !6219
  %49 = icmp eq i64 %48, %7, !insn.addr !6220
  %50 = icmp eq i1 %49, false, !insn.addr !6221
  store i64 %48, i64* %rbx.1.reg2mem, !insn.addr !6221
  store i64 %47, i64* %r12.1.reg2mem, !insn.addr !6221
  br i1 %50, label %dec_label_pc_e629, label %dec_label_pc_e64b, !insn.addr !6221

dec_label_pc_e64b:                                ; preds = %dec_label_pc_e629
  %51 = call i64 @makeKey.363(i64* nonnull %stack_var_-936, i64 0, i64 128, i64* nonnull %stack_var_-200, i64 %16), !insn.addr !6222
  %52 = ptrtoint i64* %stack_var_-120 to i64, !insn.addr !6223
  store i64 0, i64* %rax.1.reg2mem, !insn.addr !6223
  br label %dec_label_pc_e67f, !insn.addr !6223

dec_label_pc_e67f:                                ; preds = %dec_label_pc_e67f, %dec_label_pc_e64b
  %rax.1.reload = load i64, i64* %rax.1.reg2mem
  %53 = add i64 %rax.1.reload, %20, !insn.addr !6224
  %54 = inttoptr i64 %53 to i32*, !insn.addr !6224
  %55 = load i32, i32* %54, align 4, !insn.addr !6224
  %56 = udiv i32 %55, 16777216, !insn.addr !6225
  %57 = trunc i32 %56 to i8, !insn.addr !6226
  %58 = add i64 %rax.1.reload, %52
  %59 = inttoptr i64 %58 to i8*, !insn.addr !6226
  store i8 %57, i8* %59, align 2, !insn.addr !6226
  %60 = udiv i32 %55, 65536, !insn.addr !6227
  %61 = trunc i32 %60 to i8, !insn.addr !6228
  %62 = add i64 %58, ptrtoint (i32* @global_var_1 to i64), !insn.addr !6228
  %63 = inttoptr i64 %62 to i8*, !insn.addr !6228
  store i8 %61, i8* %63, align 2, !insn.addr !6228
  %64 = udiv i32 %55, 256, !insn.addr !6229
  %65 = trunc i32 %64 to i8, !insn.addr !6230
  %66 = add i64 %58, ptrtoint (i32* @global_var_2 to i64), !insn.addr !6230
  %67 = inttoptr i64 %66 to i8*, !insn.addr !6230
  store i8 %65, i8* %67, align 2, !insn.addr !6230
  %68 = trunc i32 %55 to i8, !insn.addr !6231
  %69 = add i64 %58, ptrtoint (i8** @global_var_3 to i64), !insn.addr !6231
  %70 = inttoptr i64 %69 to i8*, !insn.addr !6231
  store i8 %68, i8* %70, align 2, !insn.addr !6231
  %71 = add i64 %rax.1.reload, ptrtoint (i16* @global_var_4 to i64), !insn.addr !6232
  %72 = icmp eq i64 %71, ptrtoint (i8* @global_var_10 to i64), !insn.addr !6233
  %73 = icmp eq i1 %72, false, !insn.addr !6234
  store i64 %71, i64* %rax.1.reg2mem, !insn.addr !6234
  br i1 %73, label %dec_label_pc_e67f, label %dec_label_pc_e6ae, !insn.addr !6234

dec_label_pc_e6ae:                                ; preds = %dec_label_pc_e67f
  %74 = ptrtoint i8* %stack_var_-88 to i64, !insn.addr !6235
  %75 = trunc i64 %52 to i8, !insn.addr !6236
  store i8 %75, i8* %stack_var_-88, align 1, !insn.addr !6236
  call void @__asm_rep_stosq_memset(i8* nonnull %5, i64 0, i64 ptrtoint (i8* @global_var_8 to i64)), !insn.addr !6237
  %76 = ptrtoint i64* %stack_var_-72 to i64, !insn.addr !6238
  store i64 %74, i64* %rbx.2.reg2mem, !insn.addr !6239
  store i64 %6, i64* %r12.2.reg2mem, !insn.addr !6239
  br label %dec_label_pc_e6fd, !insn.addr !6239

dec_label_pc_e6fd:                                ; preds = %dec_label_pc_e6fd, %dec_label_pc_e6ae
  %r12.2.reload = load i64, i64* %r12.2.reg2mem
  %rbx.2.reload = load i64, i64* %rbx.2.reg2mem
  %77 = inttoptr i64 %rbx.2.reload to i8*, !insn.addr !6240
  %78 = load i8, i8* %77, align 1, !insn.addr !6240
  %79 = zext i8 %78 to i64, !insn.addr !6240
  %80 = call i64 @sprintf(i64 %r12.2.reload, i64 0, i64 %79, i8 0, i64 %16, i64 %arg6), !insn.addr !6241
  %81 = add i64 %rbx.2.reload, ptrtoint (i32* @global_var_1 to i64), !insn.addr !6242
  %82 = add i64 %r12.2.reload, ptrtoint (i32* @global_var_2 to i64), !insn.addr !6243
  %83 = icmp eq i64 %81, %76, !insn.addr !6244
  %84 = icmp eq i1 %83, false, !insn.addr !6245
  store i64 %81, i64* %rbx.2.reg2mem, !insn.addr !6245
  store i64 %82, i64* %r12.2.reg2mem, !insn.addr !6245
  br i1 %84, label %dec_label_pc_e6fd, label %dec_label_pc_e721, !insn.addr !6245

dec_label_pc_e721:                                ; preds = %dec_label_pc_e6fd
  %85 = call i64 @makeKey.363(i64* nonnull %stack_var_-936, i64 0, i64 128, i64* nonnull %stack_var_-200, i64 %16), !insn.addr !6246
  %86 = ptrtoint i64* %stack_var_-136 to i64, !insn.addr !6247
  store i64 0, i64* %rax.2.reg2mem, !insn.addr !6247
  br label %dec_label_pc_e755, !insn.addr !6247

dec_label_pc_e755:                                ; preds = %dec_label_pc_e755, %dec_label_pc_e721
  %rax.2.reload = load i64, i64* %rax.2.reg2mem
  %87 = add i64 %rax.2.reload, %20, !insn.addr !6248
  %88 = inttoptr i64 %87 to i32*, !insn.addr !6248
  %89 = load i32, i32* %88, align 4, !insn.addr !6248
  %90 = udiv i32 %89, 16777216, !insn.addr !6249
  %91 = trunc i32 %90 to i8, !insn.addr !6250
  %92 = add i64 %rax.2.reload, %86
  %93 = inttoptr i64 %92 to i8*, !insn.addr !6250
  store i8 %91, i8* %93, align 2, !insn.addr !6250
  %94 = udiv i32 %89, 65536, !insn.addr !6251
  %95 = trunc i32 %94 to i8, !insn.addr !6252
  %96 = add i64 %92, ptrtoint (i32* @global_var_1 to i64), !insn.addr !6252
  %97 = inttoptr i64 %96 to i8*, !insn.addr !6252
  store i8 %95, i8* %97, align 2, !insn.addr !6252
  %98 = udiv i32 %89, 256, !insn.addr !6253
  %99 = trunc i32 %98 to i8, !insn.addr !6254
  %100 = add i64 %92, ptrtoint (i32* @global_var_2 to i64), !insn.addr !6254
  %101 = inttoptr i64 %100 to i8*, !insn.addr !6254
  store i8 %99, i8* %101, align 2, !insn.addr !6254
  %102 = trunc i32 %89 to i8, !insn.addr !6255
  %103 = add i64 %92, ptrtoint (i8** @global_var_3 to i64), !insn.addr !6255
  %104 = inttoptr i64 %103 to i8*, !insn.addr !6255
  store i8 %102, i8* %104, align 2, !insn.addr !6255
  %105 = add i64 %rax.2.reload, ptrtoint (i16* @global_var_4 to i64), !insn.addr !6256
  %106 = icmp eq i64 %105, ptrtoint (i8* @global_var_10 to i64), !insn.addr !6257
  %107 = icmp eq i1 %106, false, !insn.addr !6258
  store i64 %105, i64* %rax.2.reg2mem, !insn.addr !6258
  store i64 %19, i64* %rax.3.reg2mem, !insn.addr !6258
  store i64 %86, i64* %rcx.0.reg2mem, !insn.addr !6258
  store i64 %arg1, i64* %rdx.0.reg2mem, !insn.addr !6258
  store i64 %52, i64* %rsi.0.reg2mem, !insn.addr !6258
  br i1 %107, label %dec_label_pc_e755, label %dec_label_pc_e79a, !insn.addr !6258

dec_label_pc_e79a:                                ; preds = %dec_label_pc_e755, %dec_label_pc_e79a
  %rsi.0.reload = load i64, i64* %rsi.0.reg2mem
  %rdx.0.reload = load i64, i64* %rdx.0.reg2mem
  %rcx.0.reload = load i64, i64* %rcx.0.reg2mem
  %rax.3.reload = load i64, i64* %rax.3.reg2mem
  %108 = inttoptr i64 %rsi.0.reload to i8*, !insn.addr !6259
  %109 = load i8, i8* %108, align 4, !insn.addr !6259
  %110 = inttoptr i64 %rax.3.reload to i8*, !insn.addr !6260
  %111 = load i8, i8* %110, align 4, !insn.addr !6260
  %112 = add i8 %111, %109, !insn.addr !6260
  %113 = inttoptr i64 %rcx.0.reload to i8*, !insn.addr !6261
  %114 = load i8, i8* %113, align 4, !insn.addr !6261
  %115 = add i8 %112, %114, !insn.addr !6261
  %116 = add i64 %rdx.0.reload, ptrtoint (i8** @global_var_30da4 to i64), !insn.addr !6262
  %117 = inttoptr i64 %116 to i8*, !insn.addr !6262
  store i8 %115, i8* %117, align 1, !insn.addr !6262
  %118 = add i64 %rax.3.reload, ptrtoint (i32* @global_var_1 to i64), !insn.addr !6263
  %119 = add i64 %rsi.0.reload, ptrtoint (i32* @global_var_1 to i64), !insn.addr !6264
  %120 = add i64 %rcx.0.reload, ptrtoint (i32* @global_var_1 to i64), !insn.addr !6265
  %121 = add i64 %rdx.0.reload, ptrtoint (i32* @global_var_1 to i64), !insn.addr !6266
  %122 = icmp eq i64 %118, %74, !insn.addr !6267
  %123 = icmp eq i1 %122, false, !insn.addr !6268
  store i64 %118, i64* %rax.3.reg2mem, !insn.addr !6268
  store i64 %120, i64* %rcx.0.reg2mem, !insn.addr !6268
  store i64 %121, i64* %rdx.0.reg2mem, !insn.addr !6268
  store i64 %119, i64* %rsi.0.reg2mem, !insn.addr !6268
  br i1 %123, label %dec_label_pc_e79a, label %dec_label_pc_e7bf, !insn.addr !6268

dec_label_pc_e7bf:                                ; preds = %dec_label_pc_e79a
  call void @__asm_rep_stosq_memset(i8* nonnull %5, i64 0, i64 ptrtoint (i8* @global_var_8 to i64)), !insn.addr !6269
  %124 = add i64 %arg1, 5261, !insn.addr !6270
  %125 = inttoptr i64 %124 to i8*, !insn.addr !6270
  %126 = load i8, i8* %125, align 1, !insn.addr !6270
  switch i8 %126, label %dec_label_pc_e7f2 [
    i8 11, label %dec_label_pc_e808
    i8 3, label %dec_label_pc_e800
    i8 15, label %dec_label_pc_e800
    i8 4, label %dec_label_pc_e800
  ]

dec_label_pc_e7f2:                                ; preds = %dec_label_pc_e7bf
  %127 = icmp eq i8 %126, 17, !insn.addr !6271
  %128 = icmp eq i1 %127, false, !insn.addr !6272
  store i64 %6, i64* %rbx.4.reg2mem, !insn.addr !6272
  store i64 %arg1, i64* %r12.3.reg2mem, !insn.addr !6272
  br i1 %128, label %dec_label_pc_e821, label %dec_label_pc_e800, !insn.addr !6272

dec_label_pc_e800:                                ; preds = %dec_label_pc_e7bf, %dec_label_pc_e7bf, %dec_label_pc_e7bf, %dec_label_pc_e7f2
  %129 = call i64 @DTV_5606B2_KeyTransfer1.193(i64 %arg1), !insn.addr !6273
  br label %dec_label_pc_e808, !insn.addr !6273

dec_label_pc_e808:                                ; preds = %dec_label_pc_e7bf, %dec_label_pc_e847, %dec_label_pc_e800
  %130 = add i64 %arg1, ptrtoint (i8** @global_var_30da4 to i64), !insn.addr !6274
  %131 = inttoptr i64 %130 to i8*, !insn.addr !6274
  %132 = load i8, i8* %131, align 1, !insn.addr !6274
  %133 = zext i8 %132 to i64, !insn.addr !6275
  %134 = call i64 @ChangeEndian.223(i64 %133), !insn.addr !6276
  %135 = trunc i64 %134 to i8, !insn.addr !6277
  %136 = add i64 %arg1, ptrtoint (i8** @global_var_30dc4 to i64), !insn.addr !6277
  %137 = inttoptr i64 %136 to i8*, !insn.addr !6277
  store i8 %135, i8* %137, align 1, !insn.addr !6277
  %138 = call i64 @ChangeEndian.223(i64 %133), !insn.addr !6278
  %139 = trunc i64 %138 to i8, !insn.addr !6279
  %140 = add i64 %arg1, ptrtoint (i64* @global_var_30de3 to i64), !insn.addr !6279
  %141 = inttoptr i64 %140 to i8*, !insn.addr !6279
  store i8 %139, i8* %141, align 1, !insn.addr !6279
  ret i64 %138, !insn.addr !6280

dec_label_pc_e821:                                ; preds = %dec_label_pc_e7f2, %dec_label_pc_e821
  %r12.3.reload = load i64, i64* %r12.3.reg2mem
  %rbx.4.reload = load i64, i64* %rbx.4.reg2mem
  %142 = add i64 %r12.3.reload, ptrtoint (i8** @global_var_30da4 to i64), !insn.addr !6281
  %143 = inttoptr i64 %142 to i8*, !insn.addr !6281
  %144 = load i8, i8* %143, align 1, !insn.addr !6281
  %145 = zext i8 %144 to i64, !insn.addr !6281
  %146 = call i64 @sprintf(i64 %rbx.4.reload, i64 0, i64 %145, i8 0, i64 %74, i64 %arg6), !insn.addr !6282
  %147 = add i64 %r12.3.reload, ptrtoint (i32* @global_var_1 to i64), !insn.addr !6283
  %148 = add i64 %rbx.4.reload, ptrtoint (i32* @global_var_2 to i64), !insn.addr !6284
  %149 = icmp eq i64 %148, %7, !insn.addr !6285
  %150 = icmp eq i1 %149, false, !insn.addr !6286
  store i64 %148, i64* %rbx.4.reg2mem, !insn.addr !6286
  store i64 %147, i64* %r12.3.reg2mem, !insn.addr !6286
  br i1 %150, label %dec_label_pc_e821, label %dec_label_pc_e847, !insn.addr !6286

dec_label_pc_e847:                                ; preds = %dec_label_pc_e821
  %151 = add i64 %arg1, 585380, !insn.addr !6287
  %152 = inttoptr i64 %151 to i64*, !insn.addr !6288
  %153 = call i64 @makeKey.363(i64* %152, i64 0, i64 128, i64* nonnull %stack_var_-200, i64 %16), !insn.addr !6288
  %154 = add i64 %arg1, 586116, !insn.addr !6289
  %155 = inttoptr i64 %154 to i64*, !insn.addr !6290
  %156 = call i64 @makeKey.363(i64* %155, i64 ptrtoint (i32* @global_var_1 to i64), i64 128, i64* nonnull %stack_var_-200, i64 %16), !insn.addr !6290
  %157 = add i64 %arg1, 586852, !insn.addr !6291
  %158 = call i64 @cipherInit.466(i64 %157, i64* bitcast (i32* @global_var_1 to i64*), i64 0), !insn.addr !6292
  br label %dec_label_pc_e808, !insn.addr !6293
}

define i8 @DTV_5606B2_KeyTransfer2(i64 %pTuner) local_unnamed_addr {
dec_label_pc_e8e0:
  %rax.0.reg2mem = alloca i64, !insn.addr !6294
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = add i64 %0, -56, !insn.addr !6295
  %2 = inttoptr i64 %1 to i64*, !insn.addr !6295
  %3 = load i64, i64* %2, align 8, !insn.addr !6295
  %4 = call i64 @__readgsqword(i64 40), !insn.addr !6296
  %5 = icmp eq i64 %3, %4, !insn.addr !6296
  store i64 ptrtoint (i32* @global_var_1 to i64), i64* %rax.0.reg2mem, !insn.addr !6297
  br i1 %5, label %dec_label_pc_e8fe, label %dec_label_pc_e8f9, !insn.addr !6297

dec_label_pc_e8f9:                                ; preds = %dec_label_pc_e8e0
  %6 = call i64 @__stack_chk_fail(), !insn.addr !6298
  store i64 %6, i64* %rax.0.reg2mem, !insn.addr !6298
  br label %dec_label_pc_e8fe, !insn.addr !6298

dec_label_pc_e8fe:                                ; preds = %dec_label_pc_e8f9, %dec_label_pc_e8e0
  %rax.0.reload = load i64, i64* %rax.0.reg2mem
  %7 = trunc i64 %rax.0.reload to i8, !insn.addr !6299
  ret i8 %7, !insn.addr !6299
}

define i64 @DTV_5606B2_KeyTransfer2.150(i64 %arg1) local_unnamed_addr {
dec_label_pc_e910:
  %r8.0.reg2mem = alloca i64, !insn.addr !6300
  %rdi.2.reg2mem = alloca i64, !insn.addr !6300
  %storemerge.reg2mem = alloca i64, !insn.addr !6300
  %rdx.5.reg2mem = alloca i64, !insn.addr !6300
  %rcx.4.reg2mem = alloca i64, !insn.addr !6300
  %rax.3.reg2mem = alloca i64, !insn.addr !6300
  %rdi.1.reg2mem = alloca i64, !insn.addr !6300
  %rsi.0.reg2mem = alloca i64, !insn.addr !6300
  %rdx.4.reg2mem = alloca i64, !insn.addr !6300
  %rcx.3.reg2mem = alloca i64, !insn.addr !6300
  %rax.2.reg2mem = alloca i64, !insn.addr !6300
  %rcx.2.reg2mem = alloca i64, !insn.addr !6300
  %rdi.0.reg2mem = alloca i64, !insn.addr !6300
  %rdx.3.reg2mem = alloca i64, !insn.addr !6300
  %rdx.2.reg2mem = alloca i64, !insn.addr !6300
  %rcx.1.reg2mem = alloca i64, !insn.addr !6300
  %rax.1.reg2mem = alloca i64, !insn.addr !6300
  %rdx.1.reg2mem = alloca i64, !insn.addr !6300
  %rcx.0.reg2mem = alloca i64, !insn.addr !6300
  %rdx.0.reg2mem = alloca i64, !insn.addr !6300
  %rax.0.reg2mem = alloca i64, !insn.addr !6300
  %stack_var_-49 = alloca i64, align 8
  %stack_var_-33 = alloca i64, align 8
  %0 = call i32 @__decompiler_undefined_function_3()
  %1 = call i8 @__decompiler_undefined_function_1()
  %2 = call i32 @__decompiler_undefined_function_3()
  %3 = call i8 @__decompiler_undefined_function_1()
  %4 = call i32 @__decompiler_undefined_function_3()
  %5 = call i32 @__decompiler_undefined_function_3()
  %stack_var_-74 = alloca i64, align 8
  %stack_var_-104 = alloca i32, align 4
  %stack_var_-136 = alloca i8, align 1
  %stack_var_-106 = alloca i64, align 8
  %stack_var_-88 = alloca i64, align 8
  %stack_var_-72 = alloca i64, align 8
  %stack_var_-120 = alloca i8, align 1
  %stack_var_-8 = alloca i64, align 8
  %6 = call i64 @mcount(), !insn.addr !6301
  %7 = call i64 @__readgsqword(i64 40), !insn.addr !6302
  store i8 ptrtoint (i8** @global_var_b to i8), i8* %stack_var_-120, align 1, !insn.addr !6303
  %8 = add i64 %arg1, ptrtoint ([9 x i8]* @global_var_30db3 to i64), !insn.addr !6304
  %9 = inttoptr i64 %8 to i8*, !insn.addr !6304
  %10 = load i8, i8* %9, align 1, !insn.addr !6304
  %11 = add i64 %arg1, ptrtoint ([16 x i8]* @global_var_30dac to i64), !insn.addr !6305
  %12 = inttoptr i64 %11 to i8*, !insn.addr !6305
  %13 = load i8, i8* %12, align 1, !insn.addr !6305
  %14 = zext i8 %13 to i32, !insn.addr !6306
  %15 = add i64 %arg1, ptrtoint ([15 x i8]* @global_var_30dad to i64), !insn.addr !6307
  %16 = inttoptr i64 %15 to i8*, !insn.addr !6307
  %17 = load i8, i8* %16, align 1, !insn.addr !6307
  %18 = zext i8 %17 to i32, !insn.addr !6308
  %19 = mul i32 %18, 2, !insn.addr !6308
  %20 = add i64 %arg1, ptrtoint ([14 x i8]* @global_var_30dae to i64), !insn.addr !6309
  %21 = inttoptr i64 %20 to i8*, !insn.addr !6309
  %22 = load i8, i8* %21, align 1, !insn.addr !6309
  %23 = zext i8 %22 to i32, !insn.addr !6310
  %24 = shl i32 %23, ptrtoint (i32* @global_var_2 to i32), !insn.addr !6310
  %25 = add i64 %arg1, ptrtoint ([13 x i8]* @global_var_30daf to i64), !insn.addr !6311
  %26 = inttoptr i64 %25 to i8*, !insn.addr !6311
  %27 = load i8, i8* %26, align 1, !insn.addr !6311
  %28 = zext i8 %27 to i32, !insn.addr !6312
  %29 = shl i32 %28, ptrtoint (i8** @global_var_3 to i32), !insn.addr !6312
  %30 = add i64 %arg1, ptrtoint ([12 x i8]* @global_var_30db0 to i64), !insn.addr !6313
  %31 = inttoptr i64 %30 to i8*, !insn.addr !6313
  %32 = load i8, i8* %31, align 1, !insn.addr !6313
  %33 = zext i8 %32 to i32, !insn.addr !6314
  %34 = shl i32 %33, ptrtoint (i16* @global_var_4 to i32), !insn.addr !6314
  %35 = add i64 %arg1, ptrtoint ([11 x i8]* @global_var_30db1 to i64), !insn.addr !6315
  %36 = inttoptr i64 %35 to i8*, !insn.addr !6315
  %37 = load i8, i8* %36, align 1, !insn.addr !6315
  %38 = zext i8 %37 to i32, !insn.addr !6316
  %39 = shl i32 %38, ptrtoint (i8* @global_var_5 to i32), !insn.addr !6316
  %40 = add i64 %arg1, ptrtoint ([10 x i8]* @global_var_30db2 to i64), !insn.addr !6317
  %41 = inttoptr i64 %40 to i8*, !insn.addr !6317
  %42 = load i8, i8* %41, align 1, !insn.addr !6317
  %43 = zext i8 %42 to i32, !insn.addr !6318
  %44 = shl i32 %43, ptrtoint (i8* @global_var_6 to i32), !insn.addr !6318
  %45 = ptrtoint i64* %stack_var_-72 to i64, !insn.addr !6319
  %46 = add i64 %arg1, ptrtoint (i16** @global_var_e to i64), !insn.addr !6320
  store i64 %arg1, i64* %rax.0.reg2mem, !insn.addr !6320
  store i64 %45, i64* %rdx.0.reg2mem, !insn.addr !6320
  br label %dec_label_pc_ea6f, !insn.addr !6320

dec_label_pc_ea6f:                                ; preds = %dec_label_pc_ea6f, %dec_label_pc_e910
  %rdx.0.reload = load i64, i64* %rdx.0.reg2mem
  %rax.0.reload = load i64, i64* %rax.0.reg2mem
  %47 = add i64 %rax.0.reload, ptrtoint ([8 x i8]* @global_var_30db4 to i64), !insn.addr !6321
  %48 = inttoptr i64 %47 to i8*, !insn.addr !6321
  %49 = load i8, i8* %48, align 1, !insn.addr !6321
  %50 = inttoptr i64 %rdx.0.reload to i8*, !insn.addr !6322
  store i8 %49, i8* %50, align 4, !insn.addr !6322
  %51 = add i64 %rax.0.reload, ptrtoint (i32* @global_var_1 to i64), !insn.addr !6323
  %52 = add i64 %rdx.0.reload, ptrtoint (i32* @global_var_1 to i64), !insn.addr !6324
  %53 = icmp eq i64 %51, %46, !insn.addr !6325
  %54 = icmp eq i1 %53, false, !insn.addr !6326
  store i64 %51, i64* %rax.0.reg2mem, !insn.addr !6326
  store i64 %52, i64* %rdx.0.reg2mem, !insn.addr !6326
  br i1 %54, label %dec_label_pc_ea6f, label %dec_label_pc_ea85, !insn.addr !6326

dec_label_pc_ea85:                                ; preds = %dec_label_pc_ea6f
  %55 = zext i8 %10 to i32, !insn.addr !6327
  %56 = and i32 %14, ptrtoint (i32* @global_var_1 to i32), !insn.addr !6306
  %57 = and i32 %19, ptrtoint (i32* @global_var_2 to i32), !insn.addr !6328
  %58 = and i32 %24, ptrtoint (i16* @global_var_4 to i32), !insn.addr !6329
  %59 = and i32 %29, ptrtoint (i8* @global_var_8 to i32), !insn.addr !6330
  %60 = and i32 %34, ptrtoint (i8* @global_var_10 to i32), !insn.addr !6331
  %61 = and i32 %39, ptrtoint (i32** @global_var_20 to i32), !insn.addr !6332
  %62 = and i32 %44, 64, !insn.addr !6333
  %63 = ptrtoint i64* %stack_var_-8 to i64, !insn.addr !6334
  %64 = shl i32 %55, ptrtoint (i8** @global_var_7 to i32), !insn.addr !6327
  %65 = or i32 %56, %64, !insn.addr !6335
  %66 = or i32 %65, %57, !insn.addr !6336
  %67 = or i32 %66, %58, !insn.addr !6337
  %68 = or i32 %67, %59, !insn.addr !6338
  %69 = or i32 %68, %60, !insn.addr !6339
  %70 = or i32 %69, %61, !insn.addr !6340
  %71 = ptrtoint i8* %stack_var_-120 to i64, !insn.addr !6341
  %72 = ptrtoint i64* %stack_var_-88 to i64, !insn.addr !6342
  %73 = ptrtoint i64* %stack_var_-106 to i64, !insn.addr !6343
  %74 = add i64 %63, -64, !insn.addr !6344
  store i64 %72, i64* %rcx.0.reg2mem, !insn.addr !6345
  store i64 %71, i64* %rdx.1.reg2mem, !insn.addr !6345
  br label %dec_label_pc_ea94, !insn.addr !6345

dec_label_pc_ea94:                                ; preds = %dec_label_pc_ea94, %dec_label_pc_ea85
  %rdx.1.reload = load i64, i64* %rdx.1.reg2mem
  %rcx.0.reload = load i64, i64* %rcx.0.reg2mem
  %75 = inttoptr i64 %rdx.1.reload to i8*, !insn.addr !6346
  %76 = load i8, i8* %75, align 1, !insn.addr !6346
  %77 = zext i8 %76 to i64, !insn.addr !6346
  %78 = mul i64 %77, ptrtoint (i32* @global_var_1 to i64), !insn.addr !6344
  %79 = add i64 %74, %78, !insn.addr !6344
  %80 = inttoptr i64 %79 to i8*, !insn.addr !6344
  %81 = load i8, i8* %80, align 4, !insn.addr !6344
  %82 = inttoptr i64 %rcx.0.reload to i8*, !insn.addr !6347
  store i8 %81, i8* %82, align 4, !insn.addr !6347
  %83 = add i64 %rdx.1.reload, ptrtoint (i32* @global_var_1 to i64), !insn.addr !6348
  %84 = add i64 %rcx.0.reload, ptrtoint (i32* @global_var_1 to i64), !insn.addr !6349
  %85 = icmp eq i64 %83, %73, !insn.addr !6350
  %86 = icmp eq i1 %85, false, !insn.addr !6351
  store i64 %84, i64* %rcx.0.reg2mem, !insn.addr !6351
  store i64 %83, i64* %rdx.1.reg2mem, !insn.addr !6351
  br i1 %86, label %dec_label_pc_ea94, label %dec_label_pc_eaac, !insn.addr !6351

dec_label_pc_eaac:                                ; preds = %dec_label_pc_ea94
  %87 = or i32 %70, %62, !insn.addr !6352
  %88 = trunc i32 %87 to i8, !insn.addr !6353
  store i8 %88, i8* %stack_var_-136, align 1, !insn.addr !6353
  %89 = ptrtoint i8* %stack_var_-136 to i64, !insn.addr !6354
  %90 = ptrtoint i32* %stack_var_-104 to i64, !insn.addr !6355
  %91 = ptrtoint i64* %stack_var_-74 to i64, !insn.addr !6356
  store i64 %72, i64* %rax.1.reg2mem, !insn.addr !6357
  store i64 %89, i64* %rcx.1.reg2mem, !insn.addr !6357
  store i64 %90, i64* %rdx.2.reg2mem, !insn.addr !6357
  br label %dec_label_pc_eaf3, !insn.addr !6357

dec_label_pc_eaf3:                                ; preds = %dec_label_pc_eaf3, %dec_label_pc_eaac
  %rdx.2.reload = load i64, i64* %rdx.2.reg2mem
  %rcx.1.reload = load i64, i64* %rcx.1.reg2mem
  %rax.1.reload = load i64, i64* %rax.1.reg2mem
  %92 = inttoptr i64 %rcx.1.reload to i8*, !insn.addr !6358
  %93 = load i8, i8* %92, align 1, !insn.addr !6358
  %94 = inttoptr i64 %rax.1.reload to i8*, !insn.addr !6359
  %95 = load i8, i8* %94, align 4, !insn.addr !6359
  %96 = xor i8 %95, %93, !insn.addr !6359
  %97 = inttoptr i64 %rdx.2.reload to i8*, !insn.addr !6360
  store i8 %96, i8* %97, align 4, !insn.addr !6360
  %98 = add i64 %rax.1.reload, ptrtoint (i32* @global_var_1 to i64), !insn.addr !6361
  %99 = add i64 %rcx.1.reload, ptrtoint (i32* @global_var_1 to i64), !insn.addr !6362
  %100 = add i64 %rdx.2.reload, ptrtoint (i32* @global_var_1 to i64), !insn.addr !6363
  %101 = icmp eq i64 %98, %91, !insn.addr !6364
  %102 = icmp eq i1 %101, false, !insn.addr !6365
  store i64 %98, i64* %rax.1.reg2mem, !insn.addr !6365
  store i64 %99, i64* %rcx.1.reg2mem, !insn.addr !6365
  store i64 %100, i64* %rdx.2.reg2mem, !insn.addr !6365
  br i1 %102, label %dec_label_pc_eaf3, label %dec_label_pc_eb0d, !insn.addr !6365

dec_label_pc_eb0d:                                ; preds = %dec_label_pc_eaf3
  %103 = urem i32 %5, 256
  %104 = urem i32 %4, 256, !insn.addr !6366
  %105 = shl i32 %104, ptrtoint (i16* @global_var_4 to i32), !insn.addr !6366
  %106 = trunc i32 %5 to i8, !insn.addr !6367
  %107 = lshr i8 %106, ptrtoint (i16* @global_var_4 to i8), !insn.addr !6367
  %108 = trunc i32 %105 to i8
  %109 = or i8 %107, %108, !insn.addr !6368
  %110 = add i64 %arg1, 588968, !insn.addr !6368
  %111 = inttoptr i64 %110 to i8*, !insn.addr !6368
  store i8 %109, i8* %111, align 1, !insn.addr !6368
  %112 = shl i32 %103, ptrtoint (i16* @global_var_4 to i32), !insn.addr !6369
  %113 = lshr i8 %3, ptrtoint (i16* @global_var_4 to i8), !insn.addr !6370
  %114 = trunc i32 %112 to i8
  %115 = or i8 %113, %114, !insn.addr !6371
  %116 = add i64 %arg1, 588969, !insn.addr !6371
  %117 = inttoptr i64 %116 to i8*, !insn.addr !6371
  store i8 %115, i8* %117, align 1, !insn.addr !6371
  %118 = lshr i8 %1, ptrtoint (i16* @global_var_4 to i8), !insn.addr !6372
  %119 = trunc i32 %2 to i8
  %120 = and i8 %119, -16
  %121 = or i8 %120, %118, !insn.addr !6373
  %122 = add i64 %arg1, 588970, !insn.addr !6373
  %123 = inttoptr i64 %122 to i8*, !insn.addr !6373
  store i8 %121, i8* %123, align 1, !insn.addr !6373
  %124 = and i32 %0, 240, !insn.addr !6374
  %125 = load i32, i32* %stack_var_-104, align 4, !insn.addr !6375
  %126 = and i32 %125, and (i32 ptrtoint (i8* @global_var_f to i32), i32 255), !insn.addr !6376
  %127 = or i32 %126, %124, !insn.addr !6377
  %128 = trunc i32 %127 to i8, !insn.addr !6378
  %129 = add i64 %arg1, 588971, !insn.addr !6378
  %130 = inttoptr i64 %129 to i8*, !insn.addr !6378
  store i8 %128, i8* %130, align 1, !insn.addr !6378
  %131 = add i64 %63, -256, !insn.addr !6379
  store i64 0, i64* %rdx.3.reg2mem, !insn.addr !6380
  store i64 %90, i64* %rdi.0.reg2mem, !insn.addr !6380
  br label %dec_label_pc_eb6e, !insn.addr !6380

dec_label_pc_eb6e:                                ; preds = %dec_label_pc_eb93, %dec_label_pc_eb0d
  %rdi.0.reload = load i64, i64* %rdi.0.reg2mem
  %rdx.3.reload = load i64, i64* %rdx.3.reg2mem
  %132 = inttoptr i64 %rdi.0.reload to i8*, !insn.addr !6381
  %133 = load i8, i8* %132, align 4, !insn.addr !6381
  %134 = zext i8 %133 to i32
  store i64 0, i64* %rcx.2.reg2mem, !insn.addr !6381
  br label %dec_label_pc_eb74, !insn.addr !6381

dec_label_pc_eb74:                                ; preds = %dec_label_pc_eb74, %dec_label_pc_eb6e
  %rcx.2.reload = load i64, i64* %rcx.2.reg2mem
  %135 = mul i64 %rcx.2.reload, ptrtoint (i32* @global_var_1 to i64), !insn.addr !6382
  %136 = add i64 %135, %rdx.3.reload, !insn.addr !6382
  %sext = mul i64 %136, 4294967296
  %137 = sdiv i64 %sext, 4294967296, !insn.addr !6383
  %138 = trunc i64 %rcx.2.reload to i32, !insn.addr !6384
  %139 = and i32 %138, and (i32 ptrtoint (i8** @global_var_1f to i32), i32 255), !insn.addr !6384
  %140 = icmp eq i32 %139, 0, !insn.addr !6384
  %141 = lshr i32 %134, %139
  %142 = trunc i32 %141 to i8
  %r9.0 = select i1 %140, i8 %133, i8 %142
  %143 = and i8 %r9.0, ptrtoint (i32* @global_var_1 to i8), !insn.addr !6385
  %144 = add i64 %137, %131, !insn.addr !6379
  %145 = inttoptr i64 %144 to i8*, !insn.addr !6379
  store i8 %143, i8* %145, align 1, !insn.addr !6379
  %146 = add nuw nsw i64 %rcx.2.reload, zext (i32 ptrtoint (i32* @global_var_1 to i32) to i64), !insn.addr !6386
  %147 = and i64 %146, 4294967295, !insn.addr !6386
  %148 = trunc i64 %146 to i32, !insn.addr !6387
  %149 = icmp eq i32 %148, ptrtoint (i8* @global_var_8 to i32), !insn.addr !6387
  %150 = icmp eq i1 %149, false, !insn.addr !6388
  store i64 %147, i64* %rcx.2.reg2mem, !insn.addr !6388
  br i1 %150, label %dec_label_pc_eb74, label %dec_label_pc_eb93, !insn.addr !6388

dec_label_pc_eb93:                                ; preds = %dec_label_pc_eb74
  %151 = add i64 %rdi.0.reload, ptrtoint (i32* @global_var_1 to i64), !insn.addr !6389
  %152 = add nuw nsw i64 %rdx.3.reload, zext (i32 ptrtoint (i8* @global_var_8 to i32) to i64), !insn.addr !6390
  %153 = and i64 %152, 4294967295, !insn.addr !6390
  %154 = trunc i64 %152 to i32, !insn.addr !6391
  %155 = icmp eq i32 %154, 112, !insn.addr !6391
  %156 = icmp eq i1 %155, false, !insn.addr !6392
  store i64 %153, i64* %rdx.3.reg2mem, !insn.addr !6392
  store i64 %151, i64* %rdi.0.reg2mem, !insn.addr !6392
  br i1 %156, label %dec_label_pc_eb6e, label %dec_label_pc_eb9f, !insn.addr !6392

dec_label_pc_eb9f:                                ; preds = %dec_label_pc_eb93
  %157 = ptrtoint i64* %stack_var_-33 to i64, !insn.addr !6393
  store i64 0, i64* %rsi.0.reg2mem, !insn.addr !6394
  store i64 %157, i64* %rdi.1.reg2mem, !insn.addr !6394
  br label %dec_label_pc_ebde, !insn.addr !6394

dec_label_pc_ebb6:                                ; preds = %174, %dec_label_pc_ebde
  %rcx.3.reload = load i64, i64* %rcx.3.reg2mem
  %rax.2.reload = load i64, i64* %rax.2.reg2mem
  %158 = mul i64 %rcx.3.reload, ptrtoint (i32* @global_var_1 to i64), !insn.addr !6395
  %159 = add i64 %158, %rsi.0.reload, !insn.addr !6395
  %sext6 = mul i64 %159, 4294967296
  %160 = sdiv i64 %sext6, 4294967296, !insn.addr !6396
  %161 = mul i64 %160, ptrtoint (i32* @global_var_1 to i64), !insn.addr !6397
  %162 = add i64 %161, %131, !insn.addr !6397
  %163 = inttoptr i64 %162 to i8*, !insn.addr !6397
  %164 = load i8, i8* %163, align 4, !insn.addr !6397
  %165 = zext i8 %164 to i64, !insn.addr !6397
  %166 = add nuw nsw i64 %rcx.3.reload, zext (i32 ptrtoint (i32* @global_var_1 to i32) to i64), !insn.addr !6398
  %167 = trunc i64 %166 to i32, !insn.addr !6399
  %168 = and i32 %167, and (i32 ptrtoint (i8** @global_var_1f to i32), i32 255), !insn.addr !6399
  %169 = icmp eq i32 %168, 0, !insn.addr !6399
  store i64 %165, i64* %rdx.4.reg2mem, !insn.addr !6399
  br i1 %169, label %174, label %170, !insn.addr !6399

; <label>:170:                                    ; preds = %dec_label_pc_ebb6
  %171 = zext i8 %164 to i32, !insn.addr !6399
  %172 = shl i32 %171, %168, !insn.addr !6399
  %173 = zext i32 %172 to i64, !insn.addr !6399
  store i64 %173, i64* %rdx.4.reg2mem, !insn.addr !6399
  br label %174, !insn.addr !6399

; <label>:174:                                    ; preds = %dec_label_pc_ebb6, %170
  %175 = and i64 %166, 4294967295, !insn.addr !6398
  %rdx.4.reload = load i64, i64* %rdx.4.reg2mem
  %176 = or i64 %rdx.4.reload, %rax.2.reload
  %177 = icmp eq i32 %167, ptrtoint (i8** @global_var_7 to i32), !insn.addr !6400
  %178 = icmp eq i1 %177, false, !insn.addr !6401
  store i64 %176, i64* %rax.2.reg2mem, !insn.addr !6401
  store i64 %175, i64* %rcx.3.reg2mem, !insn.addr !6401
  br i1 %178, label %dec_label_pc_ebb6, label %dec_label_pc_ebd0, !insn.addr !6401

dec_label_pc_ebd0:                                ; preds = %174
  %179 = trunc i64 %176 to i8, !insn.addr !6402
  %180 = inttoptr i64 %rdi.1.reload to i8*, !insn.addr !6402
  store i8 %179, i8* %180, align 4, !insn.addr !6402
  %181 = sub i64 %rdi.1.reload, ptrtoint (i32* @global_var_1 to i64), !insn.addr !6403
  %182 = add nuw nsw i64 %rsi.0.reload, zext (i32 ptrtoint (i8** @global_var_7 to i32) to i64), !insn.addr !6404
  %183 = and i64 %182, 4294967295, !insn.addr !6404
  %184 = trunc i64 %182 to i32, !insn.addr !6405
  %185 = icmp eq i32 %184, 56, !insn.addr !6405
  store i64 %183, i64* %rsi.0.reg2mem, !insn.addr !6406
  store i64 %181, i64* %rdi.1.reg2mem, !insn.addr !6406
  br i1 %185, label %dec_label_pc_ebe6, label %dec_label_pc_ebde, !insn.addr !6406

dec_label_pc_ebde:                                ; preds = %dec_label_pc_ebd0, %dec_label_pc_eb9f
  %rdi.1.reload = load i64, i64* %rdi.1.reg2mem
  %rsi.0.reload = load i64, i64* %rsi.0.reg2mem
  store i64 0, i64* %rax.2.reg2mem, !insn.addr !6407
  store i64 0, i64* %rcx.3.reg2mem, !insn.addr !6407
  br label %dec_label_pc_ebb6, !insn.addr !6407

dec_label_pc_ebe6:                                ; preds = %dec_label_pc_ebd0
  %186 = ptrtoint i64* %stack_var_-49 to i64, !insn.addr !6408
  store i64 56, i64* %rdi.2.reg2mem, !insn.addr !6409
  store i64 %186, i64* %r8.0.reg2mem, !insn.addr !6409
  br label %dec_label_pc_ec26, !insn.addr !6409

dec_label_pc_ebfd:                                ; preds = %200, %dec_label_pc_ec26
  %rdx.5.reload = load i64, i64* %rdx.5.reg2mem
  %rcx.4.reload = load i64, i64* %rcx.4.reg2mem
  %rax.3.reload = load i64, i64* %rax.3.reg2mem
  %187 = add nuw nsw i64 %rcx.4.reload, zext (i32 ptrtoint (i32* @global_var_1 to i32) to i64), !insn.addr !6410
  %sext7 = mul i64 %rax.3.reload, 4294967296
  %188 = sdiv i64 %sext7, 4294967296, !insn.addr !6411
  %189 = add i64 %188, %131, !insn.addr !6412
  %190 = inttoptr i64 %189 to i8*, !insn.addr !6412
  %191 = load i8, i8* %190, align 1, !insn.addr !6412
  %192 = zext i8 %191 to i64, !insn.addr !6412
  %193 = trunc i64 %187 to i32, !insn.addr !6413
  %194 = and i32 %193, and (i32 ptrtoint (i8** @global_var_1f to i32), i32 255), !insn.addr !6413
  %195 = icmp eq i32 %194, 0, !insn.addr !6413
  store i64 %192, i64* %storemerge.reg2mem, !insn.addr !6413
  br i1 %195, label %200, label %196, !insn.addr !6413

; <label>:196:                                    ; preds = %dec_label_pc_ebfd
  %197 = zext i8 %191 to i32, !insn.addr !6413
  %198 = shl i32 %197, %194, !insn.addr !6413
  %199 = zext i32 %198 to i64, !insn.addr !6413
  store i64 %199, i64* %storemerge.reg2mem, !insn.addr !6413
  br label %200, !insn.addr !6413

; <label>:200:                                    ; preds = %dec_label_pc_ebfd, %196
  %201 = and i64 %187, 4294967295, !insn.addr !6410
  %storemerge.reload = load i64, i64* %storemerge.reg2mem
  %202 = or i64 %storemerge.reload, %rdx.5.reload, !insn.addr !6414
  %203 = add nsw i64 %rax.3.reload, 1, !insn.addr !6415
  %204 = and i64 %203, 4294967295, !insn.addr !6415
  %205 = icmp eq i32 %193, ptrtoint (i8** @global_var_7 to i32), !insn.addr !6416
  %206 = icmp eq i1 %205, false, !insn.addr !6417
  store i64 %204, i64* %rax.3.reg2mem, !insn.addr !6417
  store i64 %201, i64* %rcx.4.reg2mem, !insn.addr !6417
  store i64 %202, i64* %rdx.5.reg2mem, !insn.addr !6417
  br i1 %206, label %dec_label_pc_ebfd, label %dec_label_pc_ec17, !insn.addr !6417

dec_label_pc_ec17:                                ; preds = %200
  %207 = trunc i64 %202 to i8, !insn.addr !6418
  %208 = inttoptr i64 %r8.0.reload to i8*, !insn.addr !6418
  store i8 %207, i8* %208, align 4, !insn.addr !6418
  %209 = sub i64 %r8.0.reload, ptrtoint (i32* @global_var_1 to i64), !insn.addr !6419
  %210 = add nuw nsw i64 %rdi.2.reload, 7, !insn.addr !6420
  %211 = and i64 %210, 4294967295, !insn.addr !6420
  %212 = trunc i64 %210 to i32, !insn.addr !6421
  %213 = icmp eq i32 %212, 112, !insn.addr !6421
  store i64 %211, i64* %rdi.2.reg2mem, !insn.addr !6422
  store i64 %209, i64* %r8.0.reg2mem, !insn.addr !6422
  br i1 %213, label %dec_label_pc_ec30, label %dec_label_pc_ec26, !insn.addr !6422

dec_label_pc_ec26:                                ; preds = %dec_label_pc_ec17, %dec_label_pc_ebe6
  %r8.0.reload = load i64, i64* %r8.0.reg2mem
  %rdi.2.reload = load i64, i64* %rdi.2.reg2mem
  store i64 %rdi.2.reload, i64* %rax.3.reg2mem, !insn.addr !6423
  store i64 0, i64* %rcx.4.reg2mem, !insn.addr !6423
  store i64 0, i64* %rdx.5.reg2mem, !insn.addr !6423
  br label %dec_label_pc_ebfd, !insn.addr !6423

dec_label_pc_ec30:                                ; preds = %dec_label_pc_ec17
  %214 = add i64 %arg1, 588952, !insn.addr !6424
  %215 = inttoptr i64 %214 to i64*, !insn.addr !6424
  %216 = load i64, i64* %215, align 8, !insn.addr !6424
  %217 = call i64 @des_setkey_dec.408(i64 %216), !insn.addr !6425
  ret i64 %217, !insn.addr !6426
}

define i32 @DTV_DecrypMultiTS_no_decrypt_multi2(i64 %pTnim, i8* %TSData_In, i32 %FrameNum, i8* %TSData_Out) local_unnamed_addr {
dec_label_pc_ec52:
  %.reg2mem = alloca i64, !insn.addr !6427
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = call i64 @__decompiler_undefined_function_0()
  %2 = trunc i64 %1 to i8
  %3 = inttoptr i64 %1 to i8*, !insn.addr !6428
  store i8 %2, i8* %3, align 1, !insn.addr !6428
  %4 = call i64 @des_setkey_dec.408(i64 %pTnim), !insn.addr !6429
  %5 = add i64 %0, -24, !insn.addr !6430
  %6 = inttoptr i64 %5 to i64*, !insn.addr !6430
  %7 = load i64, i64* %6, align 8, !insn.addr !6430
  %8 = call i64 @__readgsqword(i64 40), !insn.addr !6431
  %9 = icmp eq i64 %7, %8, !insn.addr !6431
  store i64 ptrtoint (i32* @global_var_1 to i64), i64* %.reg2mem, !insn.addr !6432
  br i1 %9, label %dec_label_pc_ec76, label %dec_label_pc_ec71, !insn.addr !6432

dec_label_pc_ec71:                                ; preds = %dec_label_pc_ec52
  %10 = call i64 @__stack_chk_fail(), !insn.addr !6433
  store i64 %10, i64* %.reg2mem, !insn.addr !6433
  br label %dec_label_pc_ec76, !insn.addr !6433

dec_label_pc_ec76:                                ; preds = %dec_label_pc_ec71, %dec_label_pc_ec52
  %.reload = load i64, i64* %.reg2mem, !insn.addr !6434
  %11 = trunc i64 %.reload to i32, !insn.addr !6434
  ret i32 %11, !insn.addr !6434
}

define i64 @DTV_DecrypMultiTS_no_decrypt_multi2.417(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4) local_unnamed_addr {
dec_label_pc_ec82:
  %r12.0.reg2mem = alloca i64, !insn.addr !6435
  %rbx.0.reg2mem = alloca i64, !insn.addr !6435
  %0 = call i1 @__decompiler_undefined_function_2()
  %1 = call i64 @mcount(), !insn.addr !6436
  %2 = add i64 %arg1, 586869, !insn.addr !6437
  %3 = inttoptr i64 %2 to i8*, !insn.addr !6437
  %4 = load i8, i8* %3, align 1, !insn.addr !6437
  %5 = add i8 %4, -7
  %6 = icmp ult i8 %5, 2
  br i1 %6, label %dec_label_pc_ecb3, label %dec_label_pc_ecb8, !insn.addr !6438

dec_label_pc_ecb3:                                ; preds = %dec_label_pc_ec82
  %7 = call i64 @DTV_5606B2_KeyTransfer2.150(i64 %arg1), !insn.addr !6439
  br label %dec_label_pc_ecb8, !insn.addr !6439

dec_label_pc_ecb8:                                ; preds = %dec_label_pc_ec82, %dec_label_pc_ecb3
  %8 = and i64 %arg3, 4294967295, !insn.addr !6440
  %9 = trunc i64 %arg3 to i32, !insn.addr !6441
  %10 = icmp slt i32 %9, 1
  store i64 0, i64* %rbx.0.reg2mem, !insn.addr !6442
  store i64 0, i64* %r12.0.reg2mem, !insn.addr !6442
  br i1 %10, label %dec_label_pc_ecea, label %dec_label_pc_ecc8, !insn.addr !6442

dec_label_pc_ecc8:                                ; preds = %dec_label_pc_ecb8, %dec_label_pc_ecc8
  %r12.0.reload = load i64, i64* %r12.0.reg2mem
  %rbx.0.reload = load i64, i64* %rbx.0.reg2mem
  %sext = mul i64 %rbx.0.reload, 4294967296
  %11 = sdiv i64 %sext, 4294967296, !insn.addr !6443
  %12 = add i64 %11, %arg4, !insn.addr !6444
  %13 = add i64 %11, %arg2, !insn.addr !6445
  %14 = call i64 @DTV_DecrypTS.520(i64 %arg1, i64 %13, i64 %12), !insn.addr !6446
  %15 = add nuw nsw i64 %r12.0.reload, zext (i32 ptrtoint (i32* @global_var_1 to i32) to i64), !insn.addr !6447
  %16 = and i64 %15, 4294967295, !insn.addr !6447
  %17 = add nuw nsw i64 %rbx.0.reload, 188, !insn.addr !6448
  %18 = and i64 %17, 4294967295, !insn.addr !6448
  %19 = icmp ugt i64 %8, %16, !insn.addr !6449
  store i64 %18, i64* %rbx.0.reg2mem, !insn.addr !6449
  store i64 %16, i64* %r12.0.reg2mem, !insn.addr !6449
  br i1 %19, label %dec_label_pc_ecc8, label %dec_label_pc_ecea, !insn.addr !6449

dec_label_pc_ecea:                                ; preds = %dec_label_pc_ecc8, %dec_label_pc_ecb8
  %20 = load i8, i8* %3, align 1, !insn.addr !6450
  %21 = add i8 %20, -7
  %22 = icmp ult i8 %21, 2
  br i1 %22, label %dec_label_pc_ecfa, label %dec_label_pc_ed22, !insn.addr !6451

dec_label_pc_ecfa:                                ; preds = %dec_label_pc_ecea
  %23 = add i64 %arg1, 588952, !insn.addr !6452
  %24 = inttoptr i64 %23 to i64*, !insn.addr !6452
  %25 = load i64, i64* %24, align 8, !insn.addr !6452
  %26 = inttoptr i64 %25 to i8*, !insn.addr !6453
  call void @__asm_rep_stosq_memset(i8* %26, i64 0, i64 ptrtoint (i32** @global_var_21 to i64)), !insn.addr !6453
  %27 = add i64 %arg1, 588960, !insn.addr !6454
  %28 = inttoptr i64 %27 to i64*, !insn.addr !6454
  %29 = load i64, i64* %28, align 8, !insn.addr !6454
  %30 = inttoptr i64 %29 to i8*, !insn.addr !6455
  call void @__asm_rep_stosq_memset(i8* %30, i64 0, i64 ptrtoint (i32** @global_var_21 to i64)), !insn.addr !6455
  ret i64 0, !insn.addr !6456

dec_label_pc_ed22:                                ; preds = %dec_label_pc_ecea
  %31 = add i64 %arg1, 585380, !insn.addr !6457
  %32 = inttoptr i64 %31 to i32*, !insn.addr !6457
  store i32 0, i32* %32, align 4, !insn.addr !6457
  %33 = add i64 %arg1, 585384, !insn.addr !6458
  %34 = inttoptr i64 %33 to i8*, !insn.addr !6459
  call void @__asm_rep_stosq_memset(i8* %34, i64 0, i64 91), !insn.addr !6459
  %35 = select i1 %0, i64 -728, i64 728, !insn.addr !6459
  %36 = add i64 %35, %33, !insn.addr !6459
  %37 = inttoptr i64 %36 to i32*, !insn.addr !6460
  store i32 0, i32* %37, align 4, !insn.addr !6460
  %38 = add i64 %arg1, 586116, !insn.addr !6461
  %39 = inttoptr i64 %38 to i32*, !insn.addr !6461
  store i32 0, i32* %39, align 4, !insn.addr !6461
  %40 = add i64 %arg1, 586120, !insn.addr !6462
  %41 = inttoptr i64 %40 to i8*, !insn.addr !6463
  call void @__asm_rep_stosq_memset(i8* %41, i64 0, i64 91), !insn.addr !6463
  %42 = add i64 %35, %40, !insn.addr !6463
  %43 = inttoptr i64 %42 to i32*, !insn.addr !6464
  store i32 0, i32* %43, align 4, !insn.addr !6464
  ret i64 0, !insn.addr !6464
}

define i32 @DTV_DecrypMultiTS(i64 %pTnim, i8* %TSData_In, i32 %FrameNum, i8* %TSData_Out) local_unnamed_addr {
dec_label_pc_ed68:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = add i64 %0, 586852, !insn.addr !6465
  %2 = inttoptr i64 %1 to i64*, !insn.addr !6466
  store i64 0, i64* %2, align 8, !insn.addr !6466
  %3 = add i64 %0, 586860, !insn.addr !6467
  %4 = inttoptr i64 %3 to i64*, !insn.addr !6467
  store i64 0, i64* %4, align 8, !insn.addr !6467
  %5 = add i64 %0, 586868, !insn.addr !6468
  %6 = inttoptr i64 %5 to i8*, !insn.addr !6468
  store i8 0, i8* %6, align 1, !insn.addr !6468
  ret i32 ptrtoint (i32* @global_var_1 to i32), !insn.addr !6469
}

define i64 @DTV_DecrypMultiTS.429(i64 %arg1, i64 %arg2, i32 %arg3, i64 %arg4) local_unnamed_addr {
dec_label_pc_ed98:
  %r12.0.reg2mem = alloca i64, !insn.addr !6470
  %rbx.0.reg2mem = alloca i64, !insn.addr !6470
  %0 = call i1 @__decompiler_undefined_function_2()
  %1 = call i64 @mcount(), !insn.addr !6471
  %2 = add i64 %arg1, 7480, !insn.addr !6472
  %3 = inttoptr i64 %2 to i64*, !insn.addr !6472
  %4 = load i64, i64* %3, align 8, !insn.addr !6472
  %5 = add i64 %arg1, 586869, !insn.addr !6473
  %6 = inttoptr i64 %5 to i8*, !insn.addr !6473
  %7 = load i8, i8* %6, align 1, !insn.addr !6473
  %8 = add i8 %7, -7
  %9 = icmp ult i8 %8, 2
  br i1 %9, label %dec_label_pc_edd8, label %dec_label_pc_eddd, !insn.addr !6474

dec_label_pc_edd8:                                ; preds = %dec_label_pc_ed98
  %10 = call i64 @DTV_5606B2_KeyTransfer2.150(i64 %arg1), !insn.addr !6475
  br label %dec_label_pc_eddd, !insn.addr !6475

dec_label_pc_eddd:                                ; preds = %dec_label_pc_ed98, %dec_label_pc_edd8
  %11 = zext i32 %arg3 to i64, !insn.addr !6476
  %12 = icmp slt i32 %arg3, 1
  store i64 0, i64* %rbx.0.reg2mem, !insn.addr !6477
  store i64 0, i64* %r12.0.reg2mem, !insn.addr !6477
  br i1 %12, label %dec_label_pc_ee0f, label %dec_label_pc_eded, !insn.addr !6477

dec_label_pc_eded:                                ; preds = %dec_label_pc_eddd, %dec_label_pc_eded
  %r12.0.reload = load i64, i64* %r12.0.reg2mem
  %rbx.0.reload = load i64, i64* %rbx.0.reg2mem
  %sext = mul i64 %rbx.0.reload, 4294967296
  %13 = sdiv i64 %sext, 4294967296, !insn.addr !6478
  %14 = add i64 %13, %arg4, !insn.addr !6479
  %15 = add i64 %13, %arg2, !insn.addr !6480
  %16 = call i64 @DTV_DecrypTS.520(i64 %arg1, i64 %15, i64 %14), !insn.addr !6481
  %17 = add nuw nsw i64 %r12.0.reload, zext (i32 ptrtoint (i32* @global_var_1 to i32) to i64), !insn.addr !6482
  %18 = and i64 %17, 4294967295, !insn.addr !6482
  %19 = add nuw nsw i64 %rbx.0.reload, 188, !insn.addr !6483
  %20 = and i64 %19, 4294967295, !insn.addr !6483
  %21 = icmp ult i64 %18, %11, !insn.addr !6484
  store i64 %20, i64* %rbx.0.reg2mem, !insn.addr !6484
  store i64 %18, i64* %r12.0.reg2mem, !insn.addr !6484
  br i1 %21, label %dec_label_pc_eded, label %dec_label_pc_ee0f, !insn.addr !6484

dec_label_pc_ee0f:                                ; preds = %dec_label_pc_eded, %dec_label_pc_eddd
  %22 = load i8, i8* %6, align 1, !insn.addr !6485
  %23 = add i8 %22, -7
  %24 = icmp ult i8 %23, 2
  br i1 %24, label %dec_label_pc_ee1f, label %dec_label_pc_ee47, !insn.addr !6486

dec_label_pc_ee1f:                                ; preds = %dec_label_pc_ee0f
  %25 = add i64 %arg1, 588952, !insn.addr !6487
  %26 = inttoptr i64 %25 to i64*, !insn.addr !6487
  %27 = load i64, i64* %26, align 8, !insn.addr !6487
  %28 = inttoptr i64 %27 to i8*, !insn.addr !6488
  call void @__asm_rep_stosq_memset(i8* %28, i64 0, i64 ptrtoint (i32** @global_var_21 to i64)), !insn.addr !6488
  %29 = add i64 %arg1, 588960, !insn.addr !6489
  %30 = inttoptr i64 %29 to i64*, !insn.addr !6489
  %31 = load i64, i64* %30, align 8, !insn.addr !6489
  %32 = inttoptr i64 %31 to i8*, !insn.addr !6490
  call void @__asm_rep_stosq_memset(i8* %32, i64 0, i64 ptrtoint (i32** @global_var_21 to i64)), !insn.addr !6490
  br label %dec_label_pc_eea7, !insn.addr !6491

dec_label_pc_ee47:                                ; preds = %dec_label_pc_ee0f
  %33 = icmp eq i8 %22, 6, !insn.addr !6492
  %34 = icmp eq i1 %33, false, !insn.addr !6493
  br i1 %34, label %dec_label_pc_eea7, label %dec_label_pc_ee4b, !insn.addr !6493

dec_label_pc_ee4b:                                ; preds = %dec_label_pc_ee47
  %35 = add i64 %arg1, 585380, !insn.addr !6494
  %36 = inttoptr i64 %35 to i32*, !insn.addr !6494
  store i32 0, i32* %36, align 4, !insn.addr !6494
  %37 = add i64 %arg1, 585384, !insn.addr !6495
  %38 = inttoptr i64 %37 to i8*, !insn.addr !6496
  call void @__asm_rep_stosq_memset(i8* %38, i64 0, i64 91), !insn.addr !6496
  %39 = select i1 %0, i64 -728, i64 728, !insn.addr !6496
  %40 = add i64 %39, %37, !insn.addr !6496
  %41 = inttoptr i64 %40 to i32*, !insn.addr !6497
  store i32 0, i32* %41, align 4, !insn.addr !6497
  %42 = add i64 %arg1, 586116, !insn.addr !6498
  %43 = inttoptr i64 %42 to i32*, !insn.addr !6498
  store i32 0, i32* %43, align 4, !insn.addr !6498
  %44 = add i64 %arg1, 586120, !insn.addr !6499
  %45 = inttoptr i64 %44 to i8*, !insn.addr !6500
  call void @__asm_rep_stosq_memset(i8* %45, i64 0, i64 91), !insn.addr !6500
  %46 = add i64 %39, %44, !insn.addr !6500
  %47 = inttoptr i64 %46 to i32*, !insn.addr !6501
  store i32 0, i32* %47, align 4, !insn.addr !6501
  %48 = add i64 %arg1, 586852, !insn.addr !6502
  %49 = inttoptr i64 %48 to i64*, !insn.addr !6503
  store i64 0, i64* %49, align 8, !insn.addr !6503
  %50 = add i64 %arg1, 586860, !insn.addr !6504
  %51 = inttoptr i64 %50 to i64*, !insn.addr !6504
  store i64 0, i64* %51, align 8, !insn.addr !6504
  %52 = add i64 %arg1, 586868, !insn.addr !6505
  %53 = inttoptr i64 %52 to i8*, !insn.addr !6505
  store i8 0, i8* %53, align 1, !insn.addr !6505
  br label %dec_label_pc_eea7, !insn.addr !6505

dec_label_pc_eea7:                                ; preds = %dec_label_pc_ee4b, %dec_label_pc_ee47, %dec_label_pc_ee1f
  %54 = call i64 @DTV_GetResetMulti2LibFlag.233(i64 %arg1), !insn.addr !6506
  %55 = add i64 %arg1, 588477, !insn.addr !6507
  %56 = inttoptr i64 %55 to i8*, !insn.addr !6507
  %57 = load i8, i8* %56, align 1, !insn.addr !6507
  %58 = icmp eq i8 %57, 1, !insn.addr !6507
  br i1 %58, label %dec_label_pc_eed1, label %dec_label_pc_eee5, !insn.addr !6508

dec_label_pc_eed1:                                ; preds = %dec_label_pc_eea7
  %59 = add i64 %arg1, 588464, !insn.addr !6509
  %60 = inttoptr i64 %59 to i64*, !insn.addr !6509
  %61 = load i64, i64* %60, align 8, !insn.addr !6509
  %62 = call i64 @TS_Reset.339(i64 %61), !insn.addr !6510
  store i8 0, i8* %56, align 1, !insn.addr !6511
  br label %dec_label_pc_eee5, !insn.addr !6511

dec_label_pc_eee5:                                ; preds = %dec_label_pc_eea7, %dec_label_pc_eed1
  %63 = add i64 %4, 1248, !insn.addr !6512
  %64 = inttoptr i64 %63 to i64*, !insn.addr !6512
  %65 = load i64, i64* %64, align 8, !insn.addr !6512
  %66 = add i64 %65, 4928, !insn.addr !6513
  %67 = inttoptr i64 %66 to i8*, !insn.addr !6513
  %68 = load i8, i8* %67, align 1, !insn.addr !6513
  %69 = icmp eq i8 %68, 0, !insn.addr !6513
  %70 = icmp eq i1 %69, false, !insn.addr !6514
  br i1 %70, label %dec_label_pc_ef12, label %dec_label_pc_ef03, !insn.addr !6514

dec_label_pc_ef03:                                ; preds = %dec_label_pc_eee5
  %71 = call i64 @DTV_SetBCASCardExist.288(i64 %arg1), !insn.addr !6515
  ret i64 %71, !insn.addr !6516

dec_label_pc_ef12:                                ; preds = %dec_label_pc_eee5
  ret i64 %65, !insn.addr !6517
}

define i32 @DTV_Set_EncSeedRegEx(i64 %pTuner, i8* %EncSeed_CE, i8 %EncSeedLen) local_unnamed_addr {
dec_label_pc_ef19:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = call i64 @__decompiler_undefined_function_0()
  %2 = call i64 @__decompiler_undefined_function_0()
  %3 = call i64 @__decompiler_undefined_function_0()
  %4 = sext i8 %EncSeedLen to i16, !insn.addr !6518
  %5 = trunc i64 %3 to i32, !insn.addr !6518
  call void @__asm_out(i16 %4, i32 %5), !insn.addr !6518
  %6 = call i64 @DTV_SetBCASCardExist.288(i64 %pTuner), !insn.addr !6519
  %7 = mul i64 %0, 188, !insn.addr !6520
  %8 = and i64 %7, 4294967292, !insn.addr !6520
  %9 = add i64 %2, 588464, !insn.addr !6521
  %10 = inttoptr i64 %9 to i64*, !insn.addr !6521
  %11 = load i64, i64* %10, align 8, !insn.addr !6521
  %12 = call i64 @TS_Process.545(i64 %11, i64 %1, i64 %8), !insn.addr !6522
  ret i32 ptrtoint (i32* @global_var_1 to i32), !insn.addr !6523
}

define i64 @DTV_Set_EncSeedRegEx.343(i64 %arg1, i64 %arg2, i64* %arg3) local_unnamed_addr {
dec_label_pc_ef49:
  %0 = call i64 @mcount(), !insn.addr !6524
  ret i64 0, !insn.addr !6525
}

define i32 @DTV_Reset_EncChipEx(i64 %pTuner) local_unnamed_addr {
dec_label_pc_efbb:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = trunc i64 %0 to i32
  ret i32 %1
}

define i64 @function_efbc(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4) local_unnamed_addr {
dec_label_pc_efbc:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = mul i64 %0, ptrtoint (i32* @global_var_1 to i64), !insn.addr !6526
  %2 = add i64 %arg4, -29, !insn.addr !6526
  %3 = add i64 %2, %1, !insn.addr !6526
  %4 = inttoptr i64 %3 to i32*, !insn.addr !6526
  %5 = load i32, i32* %4, align 4, !insn.addr !6526
  %6 = add i32 %5, ptrtoint (i32* @global_var_1 to i32), !insn.addr !6526
  store i32 %6, i32* %4, align 4, !insn.addr !6526
  %7 = trunc i64 %0 to i8, !insn.addr !6527
  %8 = icmp eq i8 %7, ptrtoint (i32* @global_var_1 to i8), !insn.addr !6527
  %spec.select = select i1 %8, i64 %0, i64 4294967294
  ret i64 %spec.select, !insn.addr !6528
}

define i64 @DTV_Reset_EncChipEx.437(i64 %arg1, i64 %arg2, i64 %arg3) local_unnamed_addr {
dec_label_pc_efeb:
  %0 = call i64 @mcount(), !insn.addr !6529
  %1 = add i64 %arg1, 7480, !insn.addr !6530
  %2 = inttoptr i64 %1 to i64*, !insn.addr !6530
  %3 = load i64, i64* %2, align 8, !insn.addr !6530
  ret i64 %3, !insn.addr !6531
}

define i32 @DTV_Set_EncSeedReg(i64 %pTnim, i8* %EncSeed_CE, i8 %EncSeedLen) local_unnamed_addr {
dec_label_pc_f014:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = call i64 @__decompiler_undefined_function_0()
  %2 = call i64 @__decompiler_undefined_function_0()
  %3 = add i8 %EncSeedLen, -96, !insn.addr !6532
  %4 = add i64 %1, -1, !insn.addr !6533
  %5 = inttoptr i64 %4 to i8*, !insn.addr !6533
  store i8 %3, i8* %5, align 1, !insn.addr !6533
  %6 = trunc i64 %1 to i16
  %7 = add i16 %6, -1, !insn.addr !6534
  %8 = inttoptr i64 %0 to i8*, !insn.addr !6534
  %9 = call i64 @FUSBDTV_Cmd_EncRead(i64 %2, i8 ptrtoint (i8* @global_var_a to i8), i8 ptrtoint (i32* @global_var_1 to i8), i16 %7, i8* %8), !insn.addr !6534
  %10 = trunc i64 %9 to i8, !insn.addr !6535
  %11 = icmp eq i8 %10, ptrtoint (i32* @global_var_1 to i8), !insn.addr !6535
  %12 = icmp eq i1 %11, false, !insn.addr !6536
  %13 = select i1 %12, i32 -2, i32 ptrtoint (i32* @global_var_1 to i32), !insn.addr !6537
  ret i32 %13, !insn.addr !6537
}

define i64 @DTV_Set_EncSeedReg.582(i64 %arg1, i64 %arg2, i64* %arg3) local_unnamed_addr {
dec_label_pc_f044:
  %0 = call i64 @mcount(), !insn.addr !6538
  ret i64 %0, !insn.addr !6539
}

define i32 @DTV_StartStop_Enc(i64 %pTnim, i8 %bStart) local_unnamed_addr {
dec_label_pc_f091:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = call i64 @FUSBDTV_InitializeStreamUrb_ISR(i64 %0), !insn.addr !6540
  %2 = trunc i64 %1 to i8, !insn.addr !6541
  %3 = icmp eq i8 %2, ptrtoint (i32* @global_var_1 to i8), !insn.addr !6541
  %. = select i1 %3, i32 ptrtoint (i32* @global_var_1 to i32), i32 -2
  ret i32 %., !insn.addr !6542
}

define i64 @DTV_StartStop_Enc.572(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_f0c1:
  %0 = call i64 @mcount(), !insn.addr !6543
  %1 = add i64 %arg1, 7480, !insn.addr !6544
  %2 = inttoptr i64 %1 to i64*, !insn.addr !6544
  %3 = load i64, i64* %2, align 8, !insn.addr !6544
  ret i64 %3, !insn.addr !6545
}

define i32 @DTV_Reset_EncChip(i64 %pTnim) local_unnamed_addr {
dec_label_pc_f0f0:
  %0 = call i64 @FUSBDTV_InitializeStreamUrb_ISR(i64 %pTnim), !insn.addr !6546
  %1 = trunc i64 %0 to i8, !insn.addr !6547
  %2 = icmp eq i8 %1, ptrtoint (i32* @global_var_1 to i8), !insn.addr !6547
  %3 = icmp eq i1 %2, false, !insn.addr !6548
  %4 = select i1 %3, i32 -2, i32 ptrtoint (i32* @global_var_1 to i32), !insn.addr !6549
  ret i32 %4, !insn.addr !6549
}

define i64 @DTV_Reset_EncChip.558(i64 %arg1) local_unnamed_addr {
dec_label_pc_f120:
  %0 = call i64 @mcount(), !insn.addr !6550
  ret i64 %0, !insn.addr !6550
}

define i8 @ASV5220_bReadBCAS_Data(i64 %pTuner, i8* %DataBuf, i32* %GetLen, i8 %bRdATR, i8 %bRdEcm, i32 %BufferSz) local_unnamed_addr {
dec_label_pc_f12e:
  %storemerge.reg2mem = alloca i8, !insn.addr !6551
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = trunc i64 %0 to i8
  %2 = mul i8 %1, 2, !insn.addr !6551
  %3 = inttoptr i64 %0 to i8*, !insn.addr !6551
  store i8 %2, i8* %3, align 1, !insn.addr !6551
  %4 = add i64 %pTuner, 5611, !insn.addr !6552
  %5 = inttoptr i64 %4 to i8*, !insn.addr !6552
  %6 = load i8, i8* %5, align 1, !insn.addr !6552
  %7 = icmp eq i8 %6, 17, !insn.addr !6552
  %8 = icmp eq i1 %7, false, !insn.addr !6553
  br i1 %8, label %dec_label_pc_f157, label %dec_label_pc_f139, !insn.addr !6553

dec_label_pc_f139:                                ; preds = %dec_label_pc_f12e
  %9 = add i64 %pTuner, 5592, !insn.addr !6554
  %10 = inttoptr i64 %9 to i8*, !insn.addr !6554
  %11 = load i8, i8* %10, align 1, !insn.addr !6554
  %12 = icmp eq i8 %11, 1, !insn.addr !6554
  br i1 %12, label %dec_label_pc_f157, label %dec_label_pc_f142, !insn.addr !6555

dec_label_pc_f142:                                ; preds = %dec_label_pc_f139
  %13 = call i64 @FUSBDTV_ProcessTransfer(i64 %0), !insn.addr !6556
  %14 = trunc i64 %13 to i8, !insn.addr !6557
  %15 = icmp eq i8 %14, ptrtoint (i32* @global_var_1 to i8), !insn.addr !6557
  %16 = icmp eq i1 %15, false, !insn.addr !6558
  store i8 -2, i8* %storemerge.reg2mem, !insn.addr !6558
  br i1 %16, label %dec_label_pc_f15c, label %dec_label_pc_f157, !insn.addr !6558

dec_label_pc_f157:                                ; preds = %dec_label_pc_f142, %dec_label_pc_f139, %dec_label_pc_f12e
  store i8 ptrtoint (i32* @global_var_1 to i8), i8* %storemerge.reg2mem, !insn.addr !6559
  br label %dec_label_pc_f15c, !insn.addr !6559

dec_label_pc_f15c:                                ; preds = %dec_label_pc_f157, %dec_label_pc_f142
  %storemerge.reload = load i8, i8* %storemerge.reg2mem
  ret i8 %storemerge.reload, !insn.addr !6560
}

define i64 @ASV5220_bReadBCAS_Data.224(i64 %arg1, i64* %arg2, i64* %arg3, i64 %arg4, i64 %arg5, i64 %arg6) local_unnamed_addr {
dec_label_pc_f15e:
  %rbx.1.reg2mem = alloca i64, !insn.addr !6561
  %r13.0.reg2mem = alloca i64, !insn.addr !6561
  %r12.0.reg2mem = alloca i64, !insn.addr !6561
  %rbx.0.reg2mem = alloca i64, !insn.addr !6561
  %0 = ptrtoint i64* %arg2 to i64
  %stack_var_-581 = alloca i64, align 8
  %1 = call i32 @__decompiler_undefined_function_3()
  %stack_var_-584 = alloca i64, align 8
  %2 = call i64 @mcount(), !insn.addr !6562
  %3 = call i64 @__readgsqword(i64 40), !insn.addr !6563
  %4 = add i64 %arg1, 7480, !insn.addr !6564
  %5 = inttoptr i64 %4 to i64*, !insn.addr !6564
  %6 = load i64, i64* %5, align 8, !insn.addr !6564
  %7 = trunc i64 %arg4 to i8, !insn.addr !6565
  %8 = icmp eq i8 %7, ptrtoint (i32* @global_var_1 to i8), !insn.addr !6565
  %9 = icmp eq i1 %8, false, !insn.addr !6566
  br i1 %9, label %dec_label_pc_f20d, label %dec_label_pc_f1ae, !insn.addr !6566

dec_label_pc_f1ae:                                ; preds = %dec_label_pc_f15e
  %10 = call i64 @ASV5220_ReadResponse.486(i64 %0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @global_var_d, i64 0, i64 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @global_var_3e8, i64 0, i64 0), i64 %6), !insn.addr !6567
  %11 = icmp eq i64 %10, ptrtoint (i32* @global_var_1 to i64), !insn.addr !6568
  %12 = icmp eq i1 %11, false, !insn.addr !6569
  %13 = bitcast i64* %arg3 to i32*
  br i1 %12, label %dec_label_pc_f1f5, label %dec_label_pc_f1dd, !insn.addr !6569

dec_label_pc_f1dd:                                ; preds = %dec_label_pc_f1ae
  store i32 ptrtoint ([3 x i8]* @global_var_d to i32), i32* %13, align 4, !insn.addr !6570
  ret i64 %10, !insn.addr !6571

dec_label_pc_f1f5:                                ; preds = %dec_label_pc_f1ae
  %14 = ptrtoint i64* %arg3 to i64
  store i32 0, i32* %13, align 4, !insn.addr !6572
  ret i64 %14, !insn.addr !6573

dec_label_pc_f20d:                                ; preds = %dec_label_pc_f15e
  %15 = trunc i64 %arg5 to i8, !insn.addr !6574
  %16 = icmp ult i8 %15, ptrtoint (i32* @global_var_1 to i8), !insn.addr !6574
  %17 = ptrtoint i64* %stack_var_-584 to i64, !insn.addr !6575
  %18 = select i1 %16, i8* inttoptr (i64 1000 to i8*), i8* inttoptr (i64 600 to i8*), !insn.addr !6576
  %19 = call i64 @ASV5220_ReadResponse.486(i64 %17, i8* bitcast (i8** @global_var_3 to i8*), i8* nonnull %18, i64 %6), !insn.addr !6576
  %20 = icmp eq i64 %19, ptrtoint (i32* @global_var_1 to i64), !insn.addr !6577
  %21 = icmp eq i1 %20, false, !insn.addr !6578
  store i64 0, i64* %rbx.1.reg2mem, !insn.addr !6578
  br i1 %21, label %dec_label_pc_f2ac, label %dec_label_pc_f246, !insn.addr !6578

dec_label_pc_f246:                                ; preds = %dec_label_pc_f20d
  %22 = urem i32 %1, 256, !insn.addr !6579
  %23 = add i32 %22, ptrtoint (i32* @global_var_1 to i32), !insn.addr !6579
  %24 = icmp slt i32 %23, 1
  store i64 ptrtoint (i8** @global_var_3 to i64), i64* %rbx.1.reg2mem, !insn.addr !6580
  br i1 %24, label %dec_label_pc_f2ac, label %dec_label_pc_f262, !insn.addr !6580

dec_label_pc_f262:                                ; preds = %dec_label_pc_f246
  %25 = ptrtoint i64* %stack_var_-581 to i64, !insn.addr !6581
  store i64 ptrtoint (i8** @global_var_3 to i64), i64* %rbx.0.reg2mem, !insn.addr !6582
  store i64 %25, i64* %r12.0.reg2mem, !insn.addr !6582
  store i64 0, i64* %r13.0.reg2mem, !insn.addr !6582
  br label %dec_label_pc_f26f, !insn.addr !6582

dec_label_pc_f26f:                                ; preds = %dec_label_pc_f292, %dec_label_pc_f262
  %r12.0.reload = load i64, i64* %r12.0.reg2mem
  %rbx.0.reload = load i64, i64* %rbx.0.reg2mem
  %26 = call i64 @ASV5220_ReadResponse.486(i64 %r12.0.reload, i8* bitcast (i32* @global_var_1 to i8*), i8* nonnull @global_var_5, i64 %6), !insn.addr !6583
  %27 = icmp eq i64 %26, ptrtoint (i32* @global_var_1 to i64), !insn.addr !6584
  store i64 %rbx.0.reload, i64* %rbx.1.reg2mem, !insn.addr !6585
  br i1 %27, label %dec_label_pc_f292, label %dec_label_pc_f2ac, !insn.addr !6585

dec_label_pc_f292:                                ; preds = %dec_label_pc_f26f
  %r13.0.reload = load i64, i64* %r13.0.reg2mem
  %28 = add i64 %rbx.0.reload, zext (i32 ptrtoint (i32* @global_var_1 to i32) to i64), !insn.addr !6586
  %29 = and i64 %28, 4294967295, !insn.addr !6586
  %30 = add nuw nsw i64 %r13.0.reload, zext (i32 ptrtoint (i32* @global_var_1 to i32) to i64), !insn.addr !6587
  %31 = and i64 %30, 4294967295, !insn.addr !6587
  %32 = add i64 %r12.0.reload, ptrtoint (i32* @global_var_1 to i64), !insn.addr !6588
  %33 = trunc i64 %30 to i32, !insn.addr !6589
  %34 = icmp sgt i32 %23, %33, !insn.addr !6589
  store i64 %29, i64* %rbx.0.reg2mem, !insn.addr !6589
  store i64 %32, i64* %r12.0.reg2mem, !insn.addr !6589
  store i64 %31, i64* %r13.0.reg2mem, !insn.addr !6589
  store i64 %29, i64* %rbx.1.reg2mem, !insn.addr !6589
  br i1 %34, label %dec_label_pc_f26f, label %dec_label_pc_f2ac, !insn.addr !6589

dec_label_pc_f2ac:                                ; preds = %dec_label_pc_f292, %dec_label_pc_f26f, %dec_label_pc_f246, %dec_label_pc_f20d
  %rbx.1.reload = load i64, i64* %rbx.1.reg2mem
  %35 = trunc i64 %rbx.1.reload to i32, !insn.addr !6590
  %36 = trunc i64 %arg6 to i32, !insn.addr !6590
  %37 = sub i32 %35, %36, !insn.addr !6590
  %38 = xor i64 %rbx.1.reload, %arg6
  %39 = trunc i64 %38 to i32, !insn.addr !6590
  %40 = xor i32 %37, %35, !insn.addr !6590
  %41 = and i32 %40, %39, !insn.addr !6590
  %42 = icmp slt i32 %41, 0, !insn.addr !6590
  %43 = icmp eq i32 %37, 0, !insn.addr !6590
  %44 = icmp slt i32 %37, 0, !insn.addr !6590
  %45 = icmp eq i1 %44, %42, !insn.addr !6591
  %46 = icmp eq i1 %43, false, !insn.addr !6591
  %47 = icmp eq i1 %45, %46, !insn.addr !6591
  %.v = select i1 %47, i64 %arg6, i64 %rbx.1.reload
  %sext = mul i64 %.v, 4294967296
  %48 = sdiv i64 %sext, 4294967296, !insn.addr !6592
  %49 = call i64 @memcpy(i64 %0, i64 %17, i64 %48, i64 %6), !insn.addr !6593
  ret i64 %49, !insn.addr !6593
}

define i8 @ASV5220_bWtBCAS_Data(i64 %pTuner, i8* %DataBuf, i32 %WtLen) local_unnamed_addr {
dec_label_pc_f2cf:
  %rax.0.reg2mem = alloca i64, !insn.addr !6594
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = call i64 @__decompiler_undefined_function_0()
  %2 = add i64 %1, -527875046, !insn.addr !6594
  %3 = inttoptr i64 %2 to i32*, !insn.addr !6594
  %4 = load i32, i32* %3, align 4, !insn.addr !6594
  %5 = sub i32 %4, ptrtoint (i32* @global_var_1 to i32), !insn.addr !6594
  store i32 %5, i32* %3, align 4, !insn.addr !6594
  %6 = add i64 %0, -56, !insn.addr !6595
  %7 = inttoptr i64 %6 to i64*, !insn.addr !6595
  %8 = load i64, i64* %7, align 8, !insn.addr !6595
  %9 = call i64 @__readgsqword(i64 40), !insn.addr !6596
  %10 = icmp eq i64 %8, %9, !insn.addr !6596
  br i1 %10, label %dec_label_pc_f2e9, label %dec_label_pc_f2e4, !insn.addr !6597

dec_label_pc_f2e4:                                ; preds = %dec_label_pc_f2cf
  %11 = call i64 @__stack_chk_fail(), !insn.addr !6598
  store i64 %11, i64* %rax.0.reg2mem, !insn.addr !6598
  br label %dec_label_pc_f2e9, !insn.addr !6598

dec_label_pc_f2e9:                                ; preds = %dec_label_pc_f2e4, %dec_label_pc_f2cf
  %rax.0.reload = load i64, i64* %rax.0.reg2mem
  %12 = trunc i64 %rax.0.reload to i8, !insn.addr !6599
  ret i8 %12, !insn.addr !6599
}

define i8 @ASV5220_Get_BCAS_INFO(i64 %BCAS_Dev) local_unnamed_addr {
dec_label_pc_f2f5:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = trunc i64 %0 to i8, !insn.addr !6600
  ret i8 %1, !insn.addr !6600
}

define i64 @ASV5220_bWtBCAS_Data.174(i64 %arg1, i8* %arg2, i64* %arg3) local_unnamed_addr {
dec_label_pc_f2ff:
  %0 = ptrtoint i64* %arg3 to i64
  %1 = ptrtoint i8* %arg2 to i64
  %2 = call i64 @mcount(), !insn.addr !6601
  %3 = and i64 %0, 4294967295, !insn.addr !6602
  %4 = add i64 %arg1, 7480, !insn.addr !6603
  %5 = inttoptr i64 %4 to i64*, !insn.addr !6603
  %6 = load i64, i64* %5, align 8, !insn.addr !6603
  %7 = call i64 @ASV5220_WriteCommand.367(i64 %1, i64 %3, i64 %6), !insn.addr !6604
  %8 = icmp eq i64 %7, ptrtoint (i32* @global_var_1 to i64), !insn.addr !6605
  %9 = zext i1 %8 to i64, !insn.addr !6606
  %10 = and i64 %7, -256, !insn.addr !6606
  %11 = or i64 %10, %9, !insn.addr !6606
  ret i64 %11, !insn.addr !6607
}

define i64 @ASV5220_Get_BCAS_INFO.179(i64 %arg1) local_unnamed_addr {
dec_label_pc_f325:
  %rdx.0.reg2mem = alloca i64, !insn.addr !6608
  %rcx.0.reg2mem = alloca i64, !insn.addr !6608
  %rax.1.reg2mem = alloca i64, !insn.addr !6608
  %rax.0.reg2mem = alloca i64, !insn.addr !6608
  %.reg2mem = alloca i8, !insn.addr !6608
  %stack_var_-421 = alloca i64, align 8
  %stack_var_-424 = alloca i64, align 8
  %stack_var_-428 = alloca i32, align 4
  %stack_var_-96 = alloca i8, align 1
  %stack_var_-103 = alloca i8, align 1
  %stack_var_-104 = alloca i8, align 1
  %0 = call i64 @mcount(), !insn.addr !6609
  %1 = call i64 @__readgsqword(i64 40), !insn.addr !6610
  store i8 0, i8* %stack_var_-104, align 1, !insn.addr !6611
  %2 = add i64 %arg1, 5250, !insn.addr !6612
  %3 = inttoptr i64 %2 to i8*, !insn.addr !6612
  %4 = load i8, i8* %3, align 1, !insn.addr !6612
  %5 = icmp eq i8 %4, 0, !insn.addr !6612
  %6 = select i1 %5, i8 0, i8 64, !insn.addr !6613
  store i8 %6, i8* %stack_var_-103, align 1, !insn.addr !6613
  store i8 0, i8* %stack_var_-96, align 1, !insn.addr !6614
  %7 = ptrtoint i8* %stack_var_-103 to i64, !insn.addr !6615
  %8 = ptrtoint i8* %stack_var_-96 to i64, !insn.addr !6616
  store i8 0, i8* %.reg2mem, !insn.addr !6616
  store i64 %7, i64* %rax.0.reg2mem, !insn.addr !6616
  br label %dec_label_pc_f3ae, !insn.addr !6616

dec_label_pc_f3ae:                                ; preds = %dec_label_pc_f3ae, %dec_label_pc_f325
  %rax.0.reload = load i64, i64* %rax.0.reg2mem
  %.reload = load i8, i8* %.reg2mem, !insn.addr !6617
  %9 = inttoptr i64 %rax.0.reload to i8*, !insn.addr !6618
  %10 = load i8, i8* %9, align 1, !insn.addr !6618
  %11 = xor i8 %10, %.reload, !insn.addr !6617
  store i8 %11, i8* %stack_var_-96, align 1, !insn.addr !6617
  %12 = add i64 %rax.0.reload, ptrtoint (i32* @global_var_1 to i64), !insn.addr !6619
  %13 = icmp eq i64 %12, %8, !insn.addr !6620
  %14 = icmp eq i1 %13, false, !insn.addr !6621
  store i8 %11, i8* %.reg2mem, !insn.addr !6621
  store i64 %12, i64* %rax.0.reg2mem, !insn.addr !6621
  br i1 %14, label %dec_label_pc_f3ae, label %dec_label_pc_f3bd, !insn.addr !6621

dec_label_pc_f3bd:                                ; preds = %dec_label_pc_f3ae
  %15 = add i64 %arg1, 72, !insn.addr !6622
  %16 = inttoptr i64 %15 to i64*, !insn.addr !6622
  %17 = load i64, i64* %16, align 8, !insn.addr !6622
  %18 = call i64 @ASV5220_bWtBCAS_Data.174(i64 %17, i8* nonnull %stack_var_-104, i64* bitcast (i8** @global_var_9 to i64*)), !insn.addr !6623
  %19 = load i64, i64* %16, align 8, !insn.addr !6624
  %20 = bitcast i32* %stack_var_-428 to i64*, !insn.addr !6625
  %21 = call i64 @ASV5220_bReadBCAS_Data.224(i64 %19, i64* nonnull %stack_var_-424, i64* nonnull %20, i64 0, i64 0, i64 320), !insn.addr !6625
  %22 = load i32, i32* %stack_var_-428, align 4, !insn.addr !6626
  %23 = icmp sgt i32 %22, ptrtoint (i16* @global_var_4 to i32), !insn.addr !6627
  br i1 %23, label %dec_label_pc_f40e, label %dec_label_pc_f419, !insn.addr !6627

dec_label_pc_f40e:                                ; preds = %dec_label_pc_f3bd
  %24 = sub i32 %22, ptrtoint (i16* @global_var_4 to i32), !insn.addr !6628
  %25 = add i64 %arg1, 5576, !insn.addr !6629
  %26 = inttoptr i64 %25 to i32*, !insn.addr !6629
  store i32 %24, i32* %26, align 4, !insn.addr !6629
  br label %dec_label_pc_f423, !insn.addr !6630

dec_label_pc_f419:                                ; preds = %dec_label_pc_f3bd
  %27 = add i64 %arg1, 5576, !insn.addr !6631
  %28 = inttoptr i64 %27 to i32*, !insn.addr !6631
  store i32 0, i32* %28, align 4, !insn.addr !6631
  br label %dec_label_pc_f423, !insn.addr !6631

dec_label_pc_f423:                                ; preds = %dec_label_pc_f419, %dec_label_pc_f40e
  %29 = load i32, i32* %stack_var_-428, align 4, !insn.addr !6632
  %30 = sub i32 %29, ptrtoint (i32* @global_var_1 to i32), !insn.addr !6633
  %31 = icmp sgt i32 %30, ptrtoint (i8** @global_var_3 to i32), !insn.addr !6634
  br i1 %31, label %dec_label_pc_f431, label %dec_label_pc_f462, !insn.addr !6634

dec_label_pc_f431:                                ; preds = %dec_label_pc_f423
  %32 = ptrtoint i64* %stack_var_-421 to i64, !insn.addr !6635
  store i64 ptrtoint (i8** @global_var_3 to i64), i64* %rax.1.reg2mem, !insn.addr !6636
  store i64 %32, i64* %rcx.0.reg2mem, !insn.addr !6636
  store i64 %arg1, i64* %rdx.0.reg2mem, !insn.addr !6636
  br label %dec_label_pc_f440, !insn.addr !6636

dec_label_pc_f440:                                ; preds = %dec_label_pc_f440, %dec_label_pc_f431
  %rdx.0.reload = load i64, i64* %rdx.0.reg2mem
  %rcx.0.reload = load i64, i64* %rcx.0.reg2mem
  %rax.1.reload = load i64, i64* %rax.1.reg2mem
  %33 = inttoptr i64 %rcx.0.reload to i8*, !insn.addr !6637
  %34 = load i8, i8* %33, align 4, !insn.addr !6637
  %35 = add i64 %rdx.0.reload, 5254, !insn.addr !6638
  %36 = inttoptr i64 %35 to i8*, !insn.addr !6638
  store i8 %34, i8* %36, align 1, !insn.addr !6638
  %37 = add i64 %rax.1.reload, zext (i32 ptrtoint (i32* @global_var_1 to i32) to i64), !insn.addr !6639
  %38 = and i64 %37, 4294967295, !insn.addr !6639
  %39 = add i64 %rcx.0.reload, ptrtoint (i32* @global_var_1 to i64), !insn.addr !6640
  %40 = add i64 %rdx.0.reload, ptrtoint (i32* @global_var_1 to i64), !insn.addr !6641
  %41 = load i32, i32* %stack_var_-428, align 4, !insn.addr !6642
  %42 = sub i32 %41, ptrtoint (i32* @global_var_1 to i32), !insn.addr !6643
  %43 = zext i32 %42 to i64, !insn.addr !6643
  %44 = icmp ult i64 %38, %43, !insn.addr !6644
  store i64 %38, i64* %rax.1.reg2mem, !insn.addr !6644
  store i64 %39, i64* %rcx.0.reg2mem, !insn.addr !6644
  store i64 %40, i64* %rdx.0.reg2mem, !insn.addr !6644
  br i1 %44, label %dec_label_pc_f440, label %dec_label_pc_f462, !insn.addr !6644

dec_label_pc_f462:                                ; preds = %dec_label_pc_f440, %dec_label_pc_f423
  %45 = load i8, i8* %3, align 1, !insn.addr !6645
  %46 = urem i8 %45, 2
  %47 = xor i8 %46, 1
  %48 = zext i8 %47 to i64, !insn.addr !6646
  ret i64 %48, !insn.addr !6646
}

define void @DTV_PollingDeviceThreadClose(i64 %deviceExtension) local_unnamed_addr {
dec_label_pc_f46f:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = call i64 @__decompiler_undefined_function_0()
  %2 = call i64 @__decompiler_undefined_function_0()
  %3 = trunc i64 %2 to i8, !insn.addr !6647
  %4 = add i64 %1, 5250, !insn.addr !6647
  %5 = inttoptr i64 %4 to i8*, !insn.addr !6647
  store i8 %3, i8* %5, align 1, !insn.addr !6647
  %6 = add i64 %0, -24, !insn.addr !6648
  %7 = inttoptr i64 %6 to i64*, !insn.addr !6648
  %8 = load i64, i64* %7, align 8, !insn.addr !6648
  %9 = call i64 @__readgsqword(i64 40), !insn.addr !6649
  %10 = icmp eq i64 %8, %9, !insn.addr !6649
  br i1 %10, label %dec_label_pc_f495, label %dec_label_pc_f490, !insn.addr !6650

dec_label_pc_f490:                                ; preds = %dec_label_pc_f46f
  %11 = call i64 @__stack_chk_fail(), !insn.addr !6651
  br label %dec_label_pc_f495, !insn.addr !6651

dec_label_pc_f495:                                ; preds = %dec_label_pc_f490, %dec_label_pc_f46f
  ret void, !insn.addr !6652
}

define i64 @DTV_PollingDeviceThreadClose.406(i64 %arg1) local_unnamed_addr {
dec_label_pc_f49f:
  %0 = call i64 @mcount(), !insn.addr !6653
  ret i64 %0, !insn.addr !6654
}

define void @ASV5220_BcasThreadClose(i64 %pTnim) local_unnamed_addr {
dec_label_pc_f4bf:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = call i64 @__decompiler_undefined_function_0()
  %2 = call i64 @__decompiler_undefined_function_0()
  %3 = call i64 @__decompiler_undefined_function_0()
  %4 = trunc i64 %0 to i32, !insn.addr !6655
  %5 = trunc i64 %3 to i32, !insn.addr !6655
  %6 = add i32 %5, %4, !insn.addr !6655
  %7 = add i64 %3, 16777300, !insn.addr !6656
  %8 = inttoptr i64 %7 to i32*, !insn.addr !6656
  %9 = load i32, i32* %8, align 4, !insn.addr !6656
  %10 = trunc i64 %2 to i32, !insn.addr !6656
  store i32 %10, i32* %8, align 4, !insn.addr !6656
  %11 = add i64 %pTnim, 21616, !insn.addr !6657
  %12 = call i64 @wait_for_completion(i64 %11, i32 %6, i32 %9), !insn.addr !6658
  %13 = add i64 %1, 21656, !insn.addr !6659
  %14 = inttoptr i64 %13 to i64*, !insn.addr !6659
  %15 = load i64, i64* %14, align 8, !insn.addr !6659
  %16 = icmp eq i64 %15, 0, !insn.addr !6659
  br i1 %16, label %dec_label_pc_f4e8, label %dec_label_pc_f4dd, !insn.addr !6660

dec_label_pc_f4dd:                                ; preds = %dec_label_pc_f4bf
  store i64 0, i64* %14, align 8, !insn.addr !6661
  br label %dec_label_pc_f4e8, !insn.addr !6661

dec_label_pc_f4e8:                                ; preds = %dec_label_pc_f4dd, %dec_label_pc_f4bf
  ret void, !insn.addr !6662
}

define i64 @ASV5220_BcasThreadClose.346(i64 %arg1) local_unnamed_addr {
dec_label_pc_f4ef:
  %rdx.0.reg2mem = alloca i64, !insn.addr !6663
  %rax.0.reg2mem = alloca i64, !insn.addr !6663
  %0 = call i64 @mcount(), !insn.addr !6664
  %1 = add i64 %arg1, 7480, !insn.addr !6665
  %2 = inttoptr i64 %1 to i64*, !insn.addr !6665
  %3 = load i64, i64* %2, align 8, !insn.addr !6665
  %4 = add i64 %arg1, 7472, !insn.addr !6666
  %5 = inttoptr i64 %4 to i8*, !insn.addr !6666
  %6 = load i8, i8* %5, align 1, !insn.addr !6666
  %7 = zext i8 %6 to i64, !insn.addr !6666
  %8 = add i64 %3, 21753, !insn.addr !6667
  %9 = inttoptr i64 %8 to i8*, !insn.addr !6667
  %10 = load i8, i8* %9, align 1, !insn.addr !6667
  %11 = icmp eq i8 %10, 0, !insn.addr !6667
  %12 = icmp eq i1 %11, false, !insn.addr !6668
  store i64 0, i64* %rax.0.reg2mem, !insn.addr !6668
  store i64 %3, i64* %rdx.0.reg2mem, !insn.addr !6668
  br i1 %12, label %dec_label_pc_f529, label %dec_label_pc_f51c, !insn.addr !6668

dec_label_pc_f51c:                                ; preds = %dec_label_pc_f4ef
  %13 = add i64 %3, 21754, !insn.addr !6669
  %14 = add i64 %13, %7, !insn.addr !6669
  %15 = inttoptr i64 %14 to i8*, !insn.addr !6669
  store i8 0, i8* %15, align 1, !insn.addr !6669
  ret i64 0, !insn.addr !6670

dec_label_pc_f529:                                ; preds = %dec_label_pc_f4ef, %dec_label_pc_f536
  %rdx.0.reload = load i64, i64* %rdx.0.reg2mem
  %rax.0.reload = load i64, i64* %rax.0.reg2mem
  %16 = trunc i64 %rax.0.reload to i8, !insn.addr !6671
  %17 = icmp eq i8 %6, %16, !insn.addr !6671
  br i1 %17, label %dec_label_pc_f536, label %dec_label_pc_f52d, !insn.addr !6672

dec_label_pc_f52d:                                ; preds = %dec_label_pc_f529
  %18 = add i64 %rdx.0.reload, 21754, !insn.addr !6673
  %19 = inttoptr i64 %18 to i8*, !insn.addr !6673
  %20 = load i8, i8* %19, align 1, !insn.addr !6673
  %21 = icmp eq i8 %20, 1, !insn.addr !6673
  br i1 %21, label %dec_label_pc_f543, label %dec_label_pc_f536, !insn.addr !6674

dec_label_pc_f536:                                ; preds = %dec_label_pc_f52d, %dec_label_pc_f529
  %22 = add nuw nsw i64 %rax.0.reload, zext (i32 ptrtoint (i32* @global_var_1 to i32) to i64), !insn.addr !6675
  %23 = and i64 %22, 4294967295, !insn.addr !6675
  %24 = add i64 %rdx.0.reload, 1, !insn.addr !6676
  %25 = trunc i64 %22 to i8, !insn.addr !6677
  %26 = icmp eq i8 %25, ptrtoint (i8* @global_var_8 to i8), !insn.addr !6677
  %27 = icmp eq i1 %26, false, !insn.addr !6678
  store i64 %23, i64* %rax.0.reg2mem, !insn.addr !6678
  store i64 %24, i64* %rdx.0.reg2mem, !insn.addr !6678
  br i1 %27, label %dec_label_pc_f529, label %dec_label_pc_f55d, !insn.addr !6678

dec_label_pc_f543:                                ; preds = %dec_label_pc_f52d
  %28 = add i64 %3, 21754, !insn.addr !6679
  %29 = add i64 %28, %7, !insn.addr !6679
  %30 = inttoptr i64 %29 to i8*, !insn.addr !6679
  store i8 0, i8* %30, align 1, !insn.addr !6679
  ret i64 %rax.0.reload, !insn.addr !6680

dec_label_pc_f55d:                                ; preds = %dec_label_pc_f536
  ret i64 %23, !insn.addr !6681
}

define void @DTV_PollingWDThreadClose(i64 %pTnim) local_unnamed_addr {
dec_label_pc_f563:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = call i64 @__decompiler_undefined_function_0()
  %2 = call i64 @__decompiler_undefined_function_0()
  %3 = call i64 @__decompiler_undefined_function_0()
  %4 = trunc i64 %3 to i8
  %5 = mul i8 %4, 2, !insn.addr !6682
  %6 = inttoptr i64 %3 to i8*, !insn.addr !6682
  %7 = lshr i64 %1, ptrtoint (i8* @global_var_8 to i64), !insn.addr !6683
  %8 = add i64 %3, %7, !insn.addr !6683
  %9 = urem i64 %8, 256, !insn.addr !6683
  %10 = shl i64 %9, ptrtoint (i8* @global_var_8 to i64), !insn.addr !6683
  %11 = and i64 %1, -65281, !insn.addr !6683
  %12 = or i64 %10, %11, !insn.addr !6683
  %13 = lshr i64 %12, ptrtoint (i8* @global_var_8 to i64), !insn.addr !6684
  %14 = add i64 %13, %3, !insn.addr !6684
  %15 = urem i64 %14, 256, !insn.addr !6684
  %16 = shl i64 %15, ptrtoint (i8* @global_var_8 to i64), !insn.addr !6684
  %17 = and i64 %12, 4294902015, !insn.addr !6684
  %18 = or i64 %16, %17, !insn.addr !6684
  store i8 %5, i8* %6, align 1, !insn.addr !6685
  %19 = add i64 %3, -115, !insn.addr !6686
  %20 = inttoptr i64 %19 to i32*, !insn.addr !6686
  %21 = load i32, i32* %20, align 4, !insn.addr !6686
  %22 = trunc i64 %2 to i32, !insn.addr !6686
  %23 = add i32 %21, %22, !insn.addr !6686
  store i32 %23, i32* %20, align 4, !insn.addr !6686
  %24 = trunc i64 %0 to i32, !insn.addr !6687
  %25 = trunc i64 %18 to i32, !insn.addr !6687
  %26 = call i64 @wait_for_completion(i64 %pTnim, i32 %24, i32 %25), !insn.addr !6687
  ret void, !insn.addr !6688
}

define i64 @DTV_PollingWDThreadClose.170(i64 %arg1) local_unnamed_addr {
dec_label_pc_f593:
  %rdx.0.reg2mem = alloca i64, !insn.addr !6689
  %rax.0.reg2mem = alloca i64, !insn.addr !6689
  %0 = call i64 @mcount(), !insn.addr !6690
  %1 = add i64 %arg1, 7480, !insn.addr !6691
  %2 = inttoptr i64 %1 to i64*, !insn.addr !6691
  %3 = load i64, i64* %2, align 8, !insn.addr !6691
  %4 = add i64 %arg1, 7472, !insn.addr !6692
  %5 = inttoptr i64 %4 to i8*, !insn.addr !6692
  %6 = load i8, i8* %5, align 1, !insn.addr !6692
  %7 = zext i8 %6 to i64, !insn.addr !6692
  %8 = add i64 %3, 21593, !insn.addr !6693
  %9 = inttoptr i64 %8 to i8*, !insn.addr !6693
  %10 = load i8, i8* %9, align 1, !insn.addr !6693
  %11 = icmp eq i8 %10, 0, !insn.addr !6693
  %12 = icmp eq i1 %11, false, !insn.addr !6694
  store i64 0, i64* %rax.0.reg2mem, !insn.addr !6694
  store i64 %3, i64* %rdx.0.reg2mem, !insn.addr !6694
  br i1 %12, label %dec_label_pc_f5cd, label %dec_label_pc_f5c0, !insn.addr !6694

dec_label_pc_f5c0:                                ; preds = %dec_label_pc_f593
  %13 = add i64 %3, 21594, !insn.addr !6695
  %14 = add i64 %13, %7, !insn.addr !6695
  %15 = inttoptr i64 %14 to i8*, !insn.addr !6695
  store i8 0, i8* %15, align 1, !insn.addr !6695
  ret i64 0, !insn.addr !6696

dec_label_pc_f5cd:                                ; preds = %dec_label_pc_f593, %dec_label_pc_f5da
  %rdx.0.reload = load i64, i64* %rdx.0.reg2mem
  %rax.0.reload = load i64, i64* %rax.0.reg2mem
  %16 = trunc i64 %rax.0.reload to i8, !insn.addr !6697
  %17 = icmp eq i8 %6, %16, !insn.addr !6697
  br i1 %17, label %dec_label_pc_f5da, label %dec_label_pc_f5d1, !insn.addr !6698

dec_label_pc_f5d1:                                ; preds = %dec_label_pc_f5cd
  %18 = add i64 %rdx.0.reload, 21594, !insn.addr !6699
  %19 = inttoptr i64 %18 to i8*, !insn.addr !6699
  %20 = load i8, i8* %19, align 1, !insn.addr !6699
  %21 = icmp eq i8 %20, 1, !insn.addr !6699
  br i1 %21, label %dec_label_pc_f5e7, label %dec_label_pc_f5da, !insn.addr !6700

dec_label_pc_f5da:                                ; preds = %dec_label_pc_f5d1, %dec_label_pc_f5cd
  %22 = add nuw nsw i64 %rax.0.reload, zext (i32 ptrtoint (i32* @global_var_1 to i32) to i64), !insn.addr !6701
  %23 = and i64 %22, 4294967295, !insn.addr !6701
  %24 = add i64 %rdx.0.reload, 1, !insn.addr !6702
  %25 = trunc i64 %22 to i8, !insn.addr !6703
  %26 = icmp eq i8 %25, ptrtoint (i8* @global_var_8 to i8), !insn.addr !6703
  %27 = icmp eq i1 %26, false, !insn.addr !6704
  store i64 %23, i64* %rax.0.reg2mem, !insn.addr !6704
  store i64 %24, i64* %rdx.0.reg2mem, !insn.addr !6704
  br i1 %27, label %dec_label_pc_f5cd, label %dec_label_pc_f601, !insn.addr !6704

dec_label_pc_f5e7:                                ; preds = %dec_label_pc_f5d1
  %28 = add i64 %3, 21594, !insn.addr !6705
  %29 = add i64 %28, %7, !insn.addr !6705
  %30 = inttoptr i64 %29 to i8*, !insn.addr !6705
  store i8 0, i8* %30, align 1, !insn.addr !6705
  ret i64 %rax.0.reload, !insn.addr !6706

dec_label_pc_f601:                                ; preds = %dec_label_pc_f5da
  ret i64 %23, !insn.addr !6707
}

define void @DTV_PollingThreadClose(i64 %pTnim) local_unnamed_addr {
dec_label_pc_f607:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = call i64 @__decompiler_undefined_function_0()
  %2 = call i64 @__decompiler_undefined_function_0()
  %rax = alloca i64, align 8
  %3 = call i64 @__decompiler_undefined_function_0()
  %4 = call i64 @__decompiler_undefined_function_0()
  %5 = bitcast i64* %rax to i8*
  %6 = trunc i64 %3 to i8
  %7 = mul i8 %6, 2, !insn.addr !6708
  %8 = inttoptr i64 %3 to i8*, !insn.addr !6708
  store i8 %7, i8* %8, align 1, !insn.addr !6708
  %9 = lshr i64 %4, ptrtoint (i8* @global_var_8 to i64), !insn.addr !6709
  %10 = trunc i64 %9 to i8, !insn.addr !6709
  %11 = load i64, i64* %rax, align 8, !insn.addr !6709
  %12 = trunc i64 %11 to i8, !insn.addr !6709
  %13 = add i8 %12, %10, !insn.addr !6709
  %14 = icmp ult i8 %13, %10, !insn.addr !6709
  %15 = zext i8 %13 to i64, !insn.addr !6709
  %16 = shl i64 %15, ptrtoint (i8* @global_var_8 to i64), !insn.addr !6709
  %17 = and i64 %4, 4294902015, !insn.addr !6709
  %18 = or i64 %16, %17, !insn.addr !6709
  %19 = add i64 %2, 84, !insn.addr !6710
  %20 = inttoptr i64 %19 to i32*, !insn.addr !6710
  %21 = load i32, i32* %20, align 4, !insn.addr !6710
  %22 = zext i1 %14 to i32, !insn.addr !6710
  %23 = sub i32 %21, %22, !insn.addr !6710
  store i32 %23, i32* %20, align 4, !insn.addr !6710
  %24 = load i8, i8* %5, align 8, !insn.addr !6711
  %25 = load i64, i64* %rax, align 8
  %26 = trunc i64 %25 to i8, !insn.addr !6711
  %27 = add i8 %24, %26, !insn.addr !6711
  %28 = inttoptr i64 %25 to i8*, !insn.addr !6711
  store i8 %27, i8* %28, align 1, !insn.addr !6711
  %29 = add i64 %1, 21592, !insn.addr !6712
  %30 = inttoptr i64 %29 to i8*, !insn.addr !6712
  store i8 ptrtoint (i32* @global_var_1 to i8), i8* %30, align 1, !insn.addr !6712
  %31 = add i64 %1, 21560, !insn.addr !6713
  %32 = trunc i64 %0 to i32, !insn.addr !6714
  %33 = trunc i64 %18 to i32, !insn.addr !6714
  %34 = call i64 @wait_for_completion(i64 %31, i32 %32, i32 %33), !insn.addr !6714
  ret void, !insn.addr !6715
}

define i64 @DTV_PollingThreadClose.532(i64 %arg1) local_unnamed_addr {
dec_label_pc_f637:
  %rdx.0.reg2mem = alloca i64, !insn.addr !6716
  %rax.0.reg2mem = alloca i64, !insn.addr !6716
  %0 = call i64 @mcount(), !insn.addr !6717
  %1 = add i64 %arg1, 7480, !insn.addr !6718
  %2 = inttoptr i64 %1 to i64*, !insn.addr !6718
  %3 = load i64, i64* %2, align 8, !insn.addr !6718
  %4 = add i64 %arg1, 7472, !insn.addr !6719
  %5 = inttoptr i64 %4 to i8*, !insn.addr !6719
  %6 = load i8, i8* %5, align 1, !insn.addr !6719
  %7 = zext i8 %6 to i64, !insn.addr !6719
  %8 = add i64 %3, 21465, !insn.addr !6720
  %9 = inttoptr i64 %8 to i8*, !insn.addr !6720
  %10 = load i8, i8* %9, align 1, !insn.addr !6720
  %11 = icmp eq i8 %10, 0, !insn.addr !6720
  %12 = icmp eq i1 %11, false, !insn.addr !6721
  store i64 0, i64* %rax.0.reg2mem, !insn.addr !6721
  store i64 %3, i64* %rdx.0.reg2mem, !insn.addr !6721
  br i1 %12, label %dec_label_pc_f671, label %dec_label_pc_f664, !insn.addr !6721

dec_label_pc_f664:                                ; preds = %dec_label_pc_f637
  %13 = add i64 %3, 21466, !insn.addr !6722
  %14 = add i64 %13, %7, !insn.addr !6722
  %15 = inttoptr i64 %14 to i8*, !insn.addr !6722
  store i8 0, i8* %15, align 1, !insn.addr !6722
  ret i64 0, !insn.addr !6723

dec_label_pc_f671:                                ; preds = %dec_label_pc_f637, %dec_label_pc_f67e
  %rdx.0.reload = load i64, i64* %rdx.0.reg2mem
  %rax.0.reload = load i64, i64* %rax.0.reg2mem
  %16 = trunc i64 %rax.0.reload to i8, !insn.addr !6724
  %17 = icmp eq i8 %6, %16, !insn.addr !6724
  br i1 %17, label %dec_label_pc_f67e, label %dec_label_pc_f675, !insn.addr !6725

dec_label_pc_f675:                                ; preds = %dec_label_pc_f671
  %18 = add i64 %rdx.0.reload, 21466, !insn.addr !6726
  %19 = inttoptr i64 %18 to i8*, !insn.addr !6726
  %20 = load i8, i8* %19, align 1, !insn.addr !6726
  %21 = icmp eq i8 %20, 1, !insn.addr !6726
  br i1 %21, label %dec_label_pc_f68b, label %dec_label_pc_f67e, !insn.addr !6727

dec_label_pc_f67e:                                ; preds = %dec_label_pc_f675, %dec_label_pc_f671
  %22 = add nuw nsw i64 %rax.0.reload, zext (i32 ptrtoint (i32* @global_var_1 to i32) to i64), !insn.addr !6728
  %23 = and i64 %22, 4294967295, !insn.addr !6728
  %24 = add i64 %rdx.0.reload, 1, !insn.addr !6729
  %25 = trunc i64 %22 to i8, !insn.addr !6730
  %26 = icmp eq i8 %25, ptrtoint (i8* @global_var_8 to i8), !insn.addr !6730
  %27 = icmp eq i1 %26, false, !insn.addr !6731
  store i64 %23, i64* %rax.0.reg2mem, !insn.addr !6731
  store i64 %24, i64* %rdx.0.reg2mem, !insn.addr !6731
  br i1 %27, label %dec_label_pc_f671, label %dec_label_pc_f6a5, !insn.addr !6731

dec_label_pc_f68b:                                ; preds = %dec_label_pc_f675
  %28 = add i64 %3, 21466, !insn.addr !6732
  %29 = add i64 %28, %7, !insn.addr !6732
  %30 = inttoptr i64 %29 to i8*, !insn.addr !6732
  store i8 0, i8* %30, align 1, !insn.addr !6732
  ret i64 %rax.0.reload, !insn.addr !6733

dec_label_pc_f6a5:                                ; preds = %dec_label_pc_f67e
  %31 = add i64 %3, 21466, !insn.addr !6734
  %32 = add i64 %31, %7, !insn.addr !6734
  %33 = inttoptr i64 %32 to i8*, !insn.addr !6734
  store i8 0, i8* %33, align 1, !insn.addr !6734
  store i8 0, i8* %9, align 1, !insn.addr !6735
  ret i64 %23, !insn.addr !6735
}

define i32 @DTV_PollingDeviceThreadInit(i64 %deviceExtension) local_unnamed_addr {
dec_label_pc_f6b9:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = call i64 @__decompiler_undefined_function_0()
  %2 = call i64 @__decompiler_undefined_function_0()
  %3 = call i64 @__decompiler_undefined_function_0()
  %4 = call i64 @__decompiler_undefined_function_0()
  %5 = trunc i64 %3 to i8
  %6 = trunc i64 %4 to i8, !insn.addr !6736
  %7 = add i8 %6, %5, !insn.addr !6736
  %8 = inttoptr i64 %3 to i8*, !insn.addr !6736
  store i8 %7, i8* %8, align 1, !insn.addr !6736
  %9 = add i64 %1, 21552, !insn.addr !6737
  %10 = inttoptr i64 %9 to i8*, !insn.addr !6737
  store i8 0, i8* %10, align 1, !insn.addr !6737
  %11 = add i64 %1, ptrtoint (i8** @global_var_5431 to i64), !insn.addr !6738
  %12 = inttoptr i64 %11 to i8*, !insn.addr !6738
  store i8 ptrtoint (i32* @global_var_1 to i8), i8* %12, align 1, !insn.addr !6738
  %13 = add i64 %1, 21432, !insn.addr !6739
  %14 = trunc i64 %0 to i32, !insn.addr !6740
  %15 = trunc i64 %2 to i32, !insn.addr !6740
  %16 = call i64 @wait_for_completion(i64 %13, i32 %14, i32 %15), !insn.addr !6740
  %17 = trunc i64 %16 to i32, !insn.addr !6741
  ret i32 %17, !insn.addr !6741
}

define i64 @DTV_PollingDeviceThreadInit.271(i64 %arg1) local_unnamed_addr {
dec_label_pc_f6e9:
  %0 = call i64 @mcount(), !insn.addr !6742
  %1 = add i64 %arg1, 21648, !insn.addr !6743
  %2 = inttoptr i64 %1 to i8*, !insn.addr !6743
  store i8 0, i8* %2, align 1, !insn.addr !6743
  ret i64 ptrtoint (i32* @global_var_1 to i64), !insn.addr !6743
}

define i32 @ASV5220_BcasThreadInit(i64 %pTnim) local_unnamed_addr {
dec_label_pc_f719:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = call i64 @__decompiler_undefined_function_0()
  %2 = call i64 @__decompiler_undefined_function_0()
  %3 = add i64 %pTnim, 21616, !insn.addr !6744
  %4 = inttoptr i64 %3 to i32*, !insn.addr !6744
  store i32 0, i32* %4, align 4, !insn.addr !6744
  %5 = add i64 %pTnim, 21624, !insn.addr !6745
  %6 = call i64 @__init_waitqueue_head(i64 %5, i64 0, i64 %1, i64 %2), !insn.addr !6746
  %7 = add i64 %0, 21649, !insn.addr !6747
  %8 = inttoptr i64 %7 to i8*, !insn.addr !6747
  store i8 ptrtoint (i32* @global_var_1 to i8), i8* %8, align 1, !insn.addr !6747
  ret i32 ptrtoint (i32* @global_var_1 to i32), !insn.addr !6748
}

define i64 @ASV5220_BcasThreadInit.315(i64 %arg1) local_unnamed_addr {
dec_label_pc_f749:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = call i64 @__decompiler_undefined_function_0()
  %2 = call i64 @mcount(), !insn.addr !6749
  %3 = add i64 %arg1, 7480, !insn.addr !6750
  %4 = inttoptr i64 %3 to i64*, !insn.addr !6750
  %5 = load i64, i64* %4, align 8, !insn.addr !6750
  %6 = add i64 %5, 21753, !insn.addr !6751
  %7 = inttoptr i64 %6 to i8*, !insn.addr !6751
  %8 = load i8, i8* %7, align 1, !insn.addr !6751
  %9 = icmp eq i8 %8, 0, !insn.addr !6751
  br i1 %9, label %dec_label_pc_f799, label %dec_label_pc_f785, !insn.addr !6752

dec_label_pc_f785:                                ; preds = %dec_label_pc_f749
  %10 = add i64 %arg1, 7472, !insn.addr !6753
  %11 = inttoptr i64 %10 to i8*, !insn.addr !6753
  %12 = load i8, i8* %11, align 1, !insn.addr !6753
  %13 = zext i8 %12 to i64, !insn.addr !6753
  %14 = add i64 %5, 21754, !insn.addr !6754
  %15 = add i64 %14, %13, !insn.addr !6754
  %16 = inttoptr i64 %15 to i8*, !insn.addr !6754
  store i8 ptrtoint (i32* @global_var_1 to i8), i8* %16, align 1, !insn.addr !6754
  ret i64 ptrtoint (i32* @global_var_1 to i64), !insn.addr !6755

dec_label_pc_f799:                                ; preds = %dec_label_pc_f749
  %17 = add i64 %5, 21752, !insn.addr !6756
  %18 = inttoptr i64 %17 to i8*, !insn.addr !6756
  store i8 0, i8* %18, align 1, !insn.addr !6756
  %19 = add i64 %5, 21720, !insn.addr !6757
  %20 = inttoptr i64 %19 to i32*, !insn.addr !6757
  store i32 0, i32* %20, align 4, !insn.addr !6757
  %21 = add i64 %5, 21728, !insn.addr !6758
  %22 = call i64 @__init_waitqueue_head(i64 %21, i64 0, i64 %0, i64 %1), !insn.addr !6759
  %23 = call i64 @kthread_create(i64 0, i64 %5, i64 0), !insn.addr !6760
  %24 = add i64 %5, 25368, !insn.addr !6761
  %25 = inttoptr i64 %24 to i64*, !insn.addr !6761
  store i64 %23, i64* %25, align 8, !insn.addr !6761
  ret i64 %23, !insn.addr !6761
}

define i32 @DTV_PollingThreadInit(i64 %pTnim) local_unnamed_addr {
dec_label_pc_f7e3:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = trunc i64 %0 to i32
  ret i32 %1
}

define i64 @DTV_PollingThreadInit.322(i64 %arg1) local_unnamed_addr {
dec_label_pc_f813:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = call i64 @__decompiler_undefined_function_0()
  %2 = call i64 @mcount(), !insn.addr !6762
  %3 = add i64 %arg1, 7480, !insn.addr !6763
  %4 = inttoptr i64 %3 to i64*, !insn.addr !6763
  %5 = load i64, i64* %4, align 8, !insn.addr !6763
  %6 = add i64 %5, 21465, !insn.addr !6764
  %7 = inttoptr i64 %6 to i8*, !insn.addr !6764
  %8 = load i8, i8* %7, align 1, !insn.addr !6764
  %9 = icmp eq i8 %8, 0, !insn.addr !6764
  br i1 %9, label %dec_label_pc_f863, label %dec_label_pc_f84f, !insn.addr !6765

dec_label_pc_f84f:                                ; preds = %dec_label_pc_f813
  %10 = add i64 %arg1, 7472, !insn.addr !6766
  %11 = inttoptr i64 %10 to i8*, !insn.addr !6766
  %12 = load i8, i8* %11, align 1, !insn.addr !6766
  %13 = zext i8 %12 to i64, !insn.addr !6766
  %14 = add i64 %5, 21466, !insn.addr !6767
  %15 = add i64 %14, %13, !insn.addr !6767
  %16 = inttoptr i64 %15 to i8*, !insn.addr !6767
  store i8 ptrtoint (i32* @global_var_1 to i8), i8* %16, align 1, !insn.addr !6767
  ret i64 ptrtoint (i32* @global_var_1 to i64), !insn.addr !6768

dec_label_pc_f863:                                ; preds = %dec_label_pc_f813
  %17 = add i64 %5, ptrtoint (i8** @global_var_5431 to i64), !insn.addr !6769
  %18 = inttoptr i64 %17 to i8*, !insn.addr !6769
  store i8 0, i8* %18, align 1, !insn.addr !6769
  %19 = add i64 %5, 21464, !insn.addr !6770
  %20 = inttoptr i64 %19 to i8*, !insn.addr !6770
  store i8 0, i8* %20, align 1, !insn.addr !6770
  %21 = add i64 %5, 21432, !insn.addr !6771
  %22 = inttoptr i64 %21 to i32*, !insn.addr !6771
  store i32 0, i32* %22, align 4, !insn.addr !6771
  %23 = add i64 %5, 21440, !insn.addr !6772
  %24 = call i64 @__init_waitqueue_head(i64 %23, i64 0, i64 %0, i64 %1), !insn.addr !6773
  %25 = call i64 @kthread_create(i64 0, i64 %5, i64 0), !insn.addr !6774
  %26 = add i64 %5, 25360, !insn.addr !6775
  %27 = inttoptr i64 %26 to i64*, !insn.addr !6775
  store i64 %25, i64* %27, align 8, !insn.addr !6775
  ret i64 %25, !insn.addr !6775
}

define i32 @DTV_PollingWDThreadInit(i64 %pTnim) local_unnamed_addr {
dec_label_pc_f8b4:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = trunc i64 %0 to i32
  ret i32 %1
}

define i64 @DTV_PollingWDThreadInit.285(i64 %arg1) local_unnamed_addr {
dec_label_pc_f8e4:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = call i64 @__decompiler_undefined_function_0()
  %2 = call i64 @mcount(), !insn.addr !6776
  %3 = add i64 %arg1, 7480, !insn.addr !6777
  %4 = inttoptr i64 %3 to i64*, !insn.addr !6777
  %5 = load i64, i64* %4, align 8, !insn.addr !6777
  %6 = add i64 %5, 21593, !insn.addr !6778
  %7 = inttoptr i64 %6 to i8*, !insn.addr !6778
  %8 = load i8, i8* %7, align 1, !insn.addr !6778
  %9 = icmp eq i8 %8, 0, !insn.addr !6778
  br i1 %9, label %dec_label_pc_f92b, label %dec_label_pc_f917, !insn.addr !6779

dec_label_pc_f917:                                ; preds = %dec_label_pc_f8e4
  %10 = add i64 %arg1, 7472, !insn.addr !6780
  %11 = inttoptr i64 %10 to i8*, !insn.addr !6780
  %12 = load i8, i8* %11, align 1, !insn.addr !6780
  %13 = zext i8 %12 to i64, !insn.addr !6780
  %14 = add i64 %5, 21594, !insn.addr !6781
  %15 = add i64 %14, %13, !insn.addr !6781
  %16 = inttoptr i64 %15 to i8*, !insn.addr !6781
  store i8 ptrtoint (i32* @global_var_1 to i8), i8* %16, align 1, !insn.addr !6781
  ret i64 ptrtoint (i32* @global_var_1 to i64), !insn.addr !6782

dec_label_pc_f92b:                                ; preds = %dec_label_pc_f8e4
  %17 = add i64 %5, 21592, !insn.addr !6783
  %18 = inttoptr i64 %17 to i8*, !insn.addr !6783
  store i8 0, i8* %18, align 1, !insn.addr !6783
  %19 = add i64 %5, 21560, !insn.addr !6784
  %20 = inttoptr i64 %19 to i32*, !insn.addr !6784
  store i32 0, i32* %20, align 4, !insn.addr !6784
  %21 = add i64 %5, 21568, !insn.addr !6785
  %22 = call i64 @__init_waitqueue_head(i64 %21, i64 0, i64 %0, i64 %1), !insn.addr !6786
  ret i64 %22, !insn.addr !6787
}

define void @DTV_PollingDeviceThread(i8* %Context) local_unnamed_addr {
dec_label_pc_f958:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = call i64 @__decompiler_undefined_function_0()
  %2 = call i64 @__decompiler_undefined_function_0()
  %rax = alloca i64, align 8
  %3 = call i64 @__decompiler_undefined_function_0()
  %4 = mul i64 %3, ptrtoint (i8* @global_var_8 to i64)
  %5 = add i64 %3, -2084168844
  %6 = add i64 %5, %4
  %7 = inttoptr i64 %6 to i32*
  %8 = load i32, i32* %7, align 4, !insn.addr !6788
  %9 = add i32 %8, ptrtoint (i32* @global_var_1 to i32), !insn.addr !6788
  store i32 %9, i32* %7, align 4, !insn.addr !6788
  %10 = bitcast i64* %rax to i8*
  %11 = load i8, i8* %10, align 8, !insn.addr !6789
  %12 = load i64, i64* %rax, align 8
  %13 = trunc i64 %12 to i8, !insn.addr !6789
  %14 = add i8 %11, %13, !insn.addr !6789
  %15 = inttoptr i64 %12 to i8*, !insn.addr !6789
  store i8 %14, i8* %15, align 1, !insn.addr !6789
  %16 = add i64 %1, ptrtoint (i8* @global_var_f to i64), !insn.addr !6790
  %17 = inttoptr i64 %16 to i32*, !insn.addr !6790
  %18 = load i32, i32* %17, align 4, !insn.addr !6790
  %19 = load i64, i64* %rax, align 8, !insn.addr !6790
  %20 = trunc i64 %19 to i32, !insn.addr !6790
  %21 = add i32 %18, %20, !insn.addr !6790
  store i32 %21, i32* %17, align 4, !insn.addr !6790
  %22 = add i64 %0, 21594, !insn.addr !6791
  %23 = add i64 %22, %2, !insn.addr !6791
  %24 = inttoptr i64 %23 to i8*, !insn.addr !6791
  store i8 ptrtoint (i32* @global_var_1 to i8), i8* %24, align 1, !insn.addr !6791
  ret void, !insn.addr !6792
}

define i64 @DTV_PollingDeviceThread.571(i64 %arg1) local_unnamed_addr {
dec_label_pc_f988:
  %stack_var_-57 = alloca i8, align 1
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = call i64 @mcount(), !insn.addr !6793
  %2 = add i64 %arg1, 25352, !insn.addr !6794
  %3 = inttoptr i64 %2 to i8*, !insn.addr !6794
  %4 = load i8, i8* %3, align 1, !insn.addr !6794
  %5 = icmp eq i8 %4, 1, !insn.addr !6794
  %6 = icmp eq i64 %0, ptrtoint (i32* @global_var_1 to i64), !insn.addr !6795
  %7 = icmp eq i1 %6, %5
  br i1 %7, label %dec_label_pc_f9db, label %dec_label_pc_fa13, !insn.addr !6796

dec_label_pc_f9db:                                ; preds = %dec_label_pc_f988
  store i8 0, i8* %stack_var_-57, align 1, !insn.addr !6797
  %8 = bitcast i8* %stack_var_-57 to i64*, !insn.addr !6798
  %9 = call i64 @TC_GetLNBShortDetect.431(i64 %arg1, i64 0, i64* nonnull %8), !insn.addr !6798
  %10 = trunc i64 %9 to i8, !insn.addr !6799
  %11 = icmp eq i8 %10, ptrtoint (i32* @global_var_1 to i8), !insn.addr !6799
  %12 = icmp eq i1 %11, false, !insn.addr !6800
  br i1 %12, label %dec_label_pc_fa13, label %dec_label_pc_f9f4, !insn.addr !6800

dec_label_pc_f9f4:                                ; preds = %dec_label_pc_f9db
  %13 = load i8, i8* %stack_var_-57, align 1, !insn.addr !6801
  %14 = icmp eq i8 %13, 1, !insn.addr !6801
  %15 = icmp eq i1 %14, false, !insn.addr !6802
  br i1 %15, label %dec_label_pc_fa13, label %dec_label_pc_f9fa, !insn.addr !6802

dec_label_pc_f9fa:                                ; preds = %dec_label_pc_f9f4
  %16 = call i64 @TC_SetLNB.173(i64 %arg1, i64 0), !insn.addr !6803
  br label %dec_label_pc_fa13, !insn.addr !6804

dec_label_pc_fa13:                                ; preds = %dec_label_pc_f988, %dec_label_pc_f9fa, %dec_label_pc_f9f4, %dec_label_pc_f9db
  %17 = call i64 @vUSB_Wait.362(i64 100), !insn.addr !6805
  ret i64 %17, !insn.addr !6806
}

define void @ASV5220_BcasThread(i8* %Context) local_unnamed_addr {
dec_label_pc_fa25:
  ret void
}

define i64 @function_fa26() local_unnamed_addr {
dec_label_pc_fa26:
  %0 = call i64 @__decompiler_undefined_function_0()
  ret i64 %0, !insn.addr !6807
}

define i64 @function_fa2c() local_unnamed_addr {
dec_label_pc_fa2c:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = add i64 %0, 21649, !insn.addr !6808
  %2 = inttoptr i64 %1 to i8*, !insn.addr !6808
  store i8 0, i8* %2, align 1, !insn.addr !6808
  %3 = add i64 %0, 21616, !insn.addr !6809
  %4 = call i64 @complete(i64 %3), !insn.addr !6810
  ret i64 %4, !insn.addr !6811
}

define i64 @ASV5220_BcasThread.397(i64 %arg1) local_unnamed_addr {
dec_label_pc_fa55:
  %r9.1.reg2mem = alloca i64, !insn.addr !6812
  %r8.2.reg2mem = alloca i64, !insn.addr !6812
  %rcx.10.reg2mem = alloca i64, !insn.addr !6812
  %stack_var_-168.1.reg2mem = alloca i8, !insn.addr !6812
  %stack_var_-188.2.reg2mem = alloca i32, !insn.addr !6812
  %r8.1.reg2mem = alloca i64, !insn.addr !6812
  %rcx.9.reg2mem = alloca i64, !insn.addr !6812
  %rcx.8.reg2mem = alloca i64, !insn.addr !6812
  %r14.0.reg2mem = alloca i64, !insn.addr !6812
  %r13.1.reg2mem = alloca i64, !insn.addr !6812
  %storemerge.reg2mem = alloca i8, !insn.addr !6812
  %rcx.7.reg2mem = alloca i64, !insn.addr !6812
  %rcx.6.reg2mem = alloca i64, !insn.addr !6812
  %.reg2mem228 = alloca i8, !insn.addr !6812
  %rax.2.reg2mem = alloca i64, !insn.addr !6812
  %.reg2mem226 = alloca i8, !insn.addr !6812
  %rdx.4.reg2mem = alloca i64, !insn.addr !6812
  %rdx.3.reg2mem = alloca i64, !insn.addr !6812
  %rcx.5.reg2mem = alloca i64, !insn.addr !6812
  %stack_var_-188.1.reg2mem = alloca i32, !insn.addr !6812
  %stack_var_-188.1.ph.reg2mem = alloca i32, !insn.addr !6812
  %rdx.070.reg2mem = alloca i64, !insn.addr !6812
  %.reg2mem224 = alloca i64, !insn.addr !6812
  %rax.0.reg2mem = alloca i64, !insn.addr !6812
  %.reg2mem222 = alloca i8, !insn.addr !6812
  %rcx.1.reg2mem = alloca i64, !insn.addr !6812
  %r13.0.reg2mem = alloca i64, !insn.addr !6812
  %rcx.0.ph12.be.reg2mem = alloca i64, !insn.addr !6812
  %.reg2mem220 = alloca i64, !insn.addr !6812
  %rcx.0.ph1263.reg2mem = alloca i64, !insn.addr !6812
  %r8.0.ph1364.reg2mem = alloca i64, !insn.addr !6812
  %r9.0.ph1465.reg2mem = alloca i64, !insn.addr !6812
  %.reg2mem = alloca i64, !insn.addr !6812
  %r9.0.ph.reg2mem = alloca i64, !insn.addr !6812
  %r8.0.ph.reg2mem = alloca i64, !insn.addr !6812
  %rcx.0.ph.reg2mem = alloca i64, !insn.addr !6812
  %stack_var_-168.0.ph.reg2mem = alloca i8, !insn.addr !6812
  %stack_var_-153.0.ph.reg2mem = alloca i32, !insn.addr !6812
  %stack_var_-188.0.ph.reg2mem = alloca i32, !insn.addr !6812
  %stack_var_-152 = alloca i8, align 1
  %stack_var_-136 = alloca i8, align 1
  %stack_var_-137 = alloca i8, align 1
  %0 = call i64 @mcount(), !insn.addr !6813
  %1 = call i64 @__readgsqword(i64 40), !insn.addr !6814
  store i8 0, i8* %stack_var_-137, align 1, !insn.addr !6815
  %2 = call i64 @ASV5220_ResetUart.247(i64 %arg1), !insn.addr !6816
  %3 = add i64 %arg1, ptrtoint (i64* @global_var_4e0 to i64), !insn.addr !6817
  %4 = inttoptr i64 %3 to i64*, !insn.addr !6817
  %5 = add i64 %arg1, 21752
  %6 = inttoptr i64 %5 to i8*
  %7 = add i64 %arg1, 22424
  %8 = inttoptr i64 %7 to i8*
  %9 = ptrtoint i8* %stack_var_-136 to i64
  %10 = add i64 %arg1, 21776
  %11 = inttoptr i64 %10 to i8*
  store i32 0, i32* %stack_var_-188.0.ph.reg2mem, !insn.addr !6818
  store i32 0, i32* %stack_var_-153.0.ph.reg2mem, !insn.addr !6818
  br label %dec_label_pc_fa9d.outer, !insn.addr !6818

dec_label_pc_fa9d.outer:                          ; preds = %dec_label_pc_1024a, %dec_label_pc_fa55
  %r9.0.ph.reload = load i64, i64* %r9.0.ph.reg2mem
  %r8.0.ph.reload = load i64, i64* %r8.0.ph.reg2mem
  %rcx.0.ph.reload = load i64, i64* %rcx.0.ph.reg2mem
  %stack_var_-168.0.ph.reload = load i8, i8* %stack_var_-168.0.ph.reg2mem
  %stack_var_-153.0.ph.reload = load i32, i32* %stack_var_-153.0.ph.reg2mem
  %stack_var_-188.0.ph.reload = load i32, i32* %stack_var_-188.0.ph.reg2mem
  %12 = load i64, i64* %4, align 8, !insn.addr !6817
  %13 = icmp eq i64 %12, 0, !insn.addr !6819
  store i64 %12, i64* %.reg2mem, !insn.addr !6820
  store i64 %r9.0.ph.reload, i64* %r9.0.ph1465.reg2mem, !insn.addr !6820
  store i64 %r8.0.ph.reload, i64* %r8.0.ph1364.reg2mem, !insn.addr !6820
  store i64 %rcx.0.ph.reload, i64* %rcx.0.ph1263.reg2mem, !insn.addr !6820
  store i32 %stack_var_-188.0.ph.reload, i32* %stack_var_-188.2.reg2mem, !insn.addr !6820
  store i8 %stack_var_-168.0.ph.reload, i8* %stack_var_-168.1.reg2mem, !insn.addr !6820
  store i64 %rcx.0.ph.reload, i64* %rcx.10.reg2mem, !insn.addr !6820
  store i64 %r8.0.ph.reload, i64* %r8.2.reg2mem, !insn.addr !6820
  store i64 %r9.0.ph.reload, i64* %r9.1.reg2mem, !insn.addr !6820
  br i1 %13, label %dec_label_pc_101da, label %dec_label_pc_faae.lr.ph, !insn.addr !6820

dec_label_pc_faae.lr.ph:                          ; preds = %dec_label_pc_fa9d.outer, %dec_label_pc_fa9d.outer10.backedge
  %rcx.0.ph1263.reload = load i64, i64* %rcx.0.ph1263.reg2mem
  %r8.0.ph1364.reload = load i64, i64* %r8.0.ph1364.reg2mem
  %r9.0.ph1465.reload = load i64, i64* %r9.0.ph1465.reg2mem
  %.reload = load i64, i64* %.reg2mem
  store i64 %.reload, i64* %.reg2mem220
  br label %dec_label_pc_faae

dec_label_pc_faae:                                ; preds = %dec_label_pc_faae.lr.ph, %dec_label_pc_fb52
  %.reload221 = load i64, i64* %.reg2mem220
  %14 = add i64 %.reload221, 4928, !insn.addr !6821
  %15 = inttoptr i64 %14 to i8*
  %16 = load i8, i8* %15, align 1, !insn.addr !6821
  %17 = icmp eq i8 %16, 0, !insn.addr !6822
  %18 = icmp eq i1 %17, false, !insn.addr !6823
  br i1 %18, label %dec_label_pc_fcfa, label %dec_label_pc_fad7, !insn.addr !6823

dec_label_pc_fad7:                                ; preds = %dec_label_pc_faae
  %19 = add i64 %.reload221, 589264, !insn.addr !6824
  %20 = inttoptr i64 %19 to i64*, !insn.addr !6824
  store i64 0, i64* %20, align 8, !insn.addr !6824
  %21 = add i64 %.reload221, 589248, !insn.addr !6825
  %22 = inttoptr i64 %21 to i64*, !insn.addr !6825
  store i64 0, i64* %22, align 8, !insn.addr !6825
  %23 = add i64 %.reload221, 589256, !insn.addr !6826
  %24 = inttoptr i64 %23 to i64*, !insn.addr !6826
  store i64 0, i64* %24, align 8, !insn.addr !6826
  %25 = add i64 %.reload221, 589272, !insn.addr !6827
  %26 = inttoptr i64 %25 to i8*, !insn.addr !6827
  store i8 0, i8* %26, align 1, !insn.addr !6827
  %27 = add i64 %.reload221, 5590
  %28 = inttoptr i64 %27 to i8*
  br label %dec_label_pc_faff, !insn.addr !6827

dec_label_pc_faff:                                ; preds = %dec_label_pc_fb21, %dec_label_pc_fad7
  %29 = call i64 @vUSB_Wait.362(i64 200), !insn.addr !6828
  %30 = call i64 @ASV5220_GetCardInDetect.511(i8* nonnull %stack_var_-137), !insn.addr !6829
  %31 = load i8, i8* %stack_var_-137, align 1, !insn.addr !6830
  %32 = icmp eq i8 %31, 1, !insn.addr !6830
  br i1 %32, label %dec_label_pc_fb38, label %dec_label_pc_fb21, !insn.addr !6831

dec_label_pc_fb21:                                ; preds = %dec_label_pc_faff
  store i8 0, i8* %28, align 1, !insn.addr !6832
  %33 = load i8, i8* %6, align 1, !insn.addr !6833
  %34 = icmp eq i8 %33, 1, !insn.addr !6833
  %35 = icmp eq i1 %34, false, !insn.addr !6834
  br i1 %35, label %dec_label_pc_faff, label %dec_label_pc_10263, !insn.addr !6834

dec_label_pc_fb38:                                ; preds = %dec_label_pc_faff
  %36 = load i8, i8* %6, align 1, !insn.addr !6835
  %37 = icmp eq i8 %36, 1, !insn.addr !6835
  br i1 %37, label %dec_label_pc_10263, label %dec_label_pc_fb47, !insn.addr !6836

dec_label_pc_fb47:                                ; preds = %dec_label_pc_fb38
  %38 = load i8, i8* %8, align 1, !insn.addr !6837
  %39 = icmp eq i8 %38, 1, !insn.addr !6837
  %40 = icmp eq i1 %39, false, !insn.addr !6838
  br i1 %40, label %dec_label_pc_fb74, label %dec_label_pc_fb52, !insn.addr !6838

dec_label_pc_fb52:                                ; preds = %dec_label_pc_fb47
  %41 = add i64 %.reload221, 5258, !insn.addr !6839
  %42 = inttoptr i64 %41 to i8*, !insn.addr !6839
  store i8 0, i8* %42, align 1, !insn.addr !6839
  store i8 0, i8* %28, align 1, !insn.addr !6840
  %43 = call i64 @ASV5220_ResetUart.247(i64 %arg1), !insn.addr !6841
  store i8 0, i8* %15, align 1, !insn.addr !6842
  %44 = load i64, i64* %4, align 8, !insn.addr !6817
  %45 = icmp eq i64 %44, 0, !insn.addr !6819
  store i64 %44, i64* %.reg2mem220, !insn.addr !6820
  br i1 %45, label %dec_label_pc_fa9d.dec_label_pc_101da.loopexit_crit_edge, label %dec_label_pc_faae, !insn.addr !6820

dec_label_pc_fb74:                                ; preds = %dec_label_pc_fb47
  %46 = call i64 @ASV5220_InitUart.293(i64 %arg1), !insn.addr !6843
  %47 = add i64 %.reload221, 4932, !insn.addr !6844
  %48 = add i64 %.reload221, 4936, !insn.addr !6845
  %49 = inttoptr i64 %48 to i64*, !insn.addr !6846
  %50 = inttoptr i64 %47 to i64*, !insn.addr !6846
  %51 = call i64 @ASV5220_bReadBCAS_Data.224(i64 %.reload221, i64* %49, i64* %50, i64 ptrtoint (i32* @global_var_1 to i64), i64 0, i64 320), !insn.addr !6846
  %52 = trunc i64 %51 to i8, !insn.addr !6847
  %53 = icmp eq i8 %52, 0, !insn.addr !6847
  %54 = icmp eq i1 %53, false, !insn.addr !6848
  br i1 %54, label %dec_label_pc_fbc9, label %dec_label_pc_fba7, !insn.addr !6848

dec_label_pc_fba7:                                ; preds = %dec_label_pc_fb74
  %55 = add i64 %.reload221, 5258, !insn.addr !6849
  %56 = inttoptr i64 %55 to i8*, !insn.addr !6849
  store i8 0, i8* %56, align 1, !insn.addr !6849
  store i8 0, i8* %28, align 1, !insn.addr !6850
  %57 = call i64 @ASV5220_ResetUart.247(i64 %arg1), !insn.addr !6851
  store i8 0, i8* %15, align 1, !insn.addr !6852
  store i64 ptrtoint (i32* @global_var_1 to i64), i64* %rcx.0.ph12.be.reg2mem, !insn.addr !6853
  br label %dec_label_pc_fa9d.outer10.backedge, !insn.addr !6853

dec_label_pc_fbc9:                                ; preds = %dec_label_pc_fb74
  %58 = call i64 @ASV5220_SetBaudrate.207(i64 %arg1), !insn.addr !6854
  store i8 0, i8* %stack_var_-136, align 1, !insn.addr !6855
  %59 = call i64 @vUSB_Wait.362(i64 50), !insn.addr !6856
  %60 = call i64 @ASV5220_bWtBCAS_Data.174(i64 %.reload221, i8* nonnull %stack_var_-136, i64* bitcast (i8* @global_var_5 to i64*)), !insn.addr !6857
  %61 = call i64 @ASV5220_ReadResponse.486(i64 %9, i8* nonnull @global_var_5, i8* inttoptr (i64 200 to i8*), i64 %arg1), !insn.addr !6858
  %62 = load i8, i8* %28, align 1, !insn.addr !6859
  %63 = icmp eq i8 %62, 1, !insn.addr !6859
  %64 = icmp eq i1 %63, false, !insn.addr !6860
  br i1 %64, label %dec_label_pc_fc32, label %dec_label_pc_fc1f, !insn.addr !6860

dec_label_pc_fc1f:                                ; preds = %dec_label_pc_fbc9
  store i8 ptrtoint (i32* @global_var_2 to i8), i8* %15, align 1, !insn.addr !6861
  store i8 0, i8* %28, align 1, !insn.addr !6862
  store i64 %arg1, i64* %rcx.0.ph12.be.reg2mem, !insn.addr !6863
  br label %dec_label_pc_fa9d.outer10.backedge, !insn.addr !6863

dec_label_pc_fa9d.outer10.backedge:               ; preds = %dec_label_pc_fc1f, %dec_label_pc_fba7
  %rcx.0.ph12.be.reload = load i64, i64* %rcx.0.ph12.be.reg2mem
  %65 = load i64, i64* %4, align 8, !insn.addr !6817
  %66 = icmp eq i64 %65, 0, !insn.addr !6819
  store i64 %65, i64* %.reg2mem, !insn.addr !6820
  store i64 320, i64* %r9.0.ph1465.reg2mem, !insn.addr !6820
  store i64 0, i64* %r8.0.ph1364.reg2mem, !insn.addr !6820
  store i64 %rcx.0.ph12.be.reload, i64* %rcx.0.ph1263.reg2mem, !insn.addr !6820
  br i1 %66, label %dec_label_pc_fa9d.outer10.dec_label_pc_fa9d.outer10.dec_label_pc_101da.loopexit_crit_edge_crit_edge, label %dec_label_pc_faae.lr.ph, !insn.addr !6820

dec_label_pc_fc32:                                ; preds = %dec_label_pc_fbc9
  %67 = trunc i64 %.reload221 to i8
  %68 = add i8 %67, ptrtoint (i8* @global_var_8 to i8), !insn.addr !6864
  %69 = call i64 @vUSB_Wait.362(i64 50), !insn.addr !6865
  %70 = sext i8 %68 to i64, !insn.addr !6866
  %71 = call i64 @ASV5220_Get_BCAS_INFO.179(i64 %70), !insn.addr !6867
  %72 = trunc i64 %71 to i8, !insn.addr !6868
  %73 = icmp eq i8 %72, 0, !insn.addr !6868
  br i1 %73, label %dec_label_pc_fcd8, label %dec_label_pc_fc50, !insn.addr !6869

dec_label_pc_fc50:                                ; preds = %dec_label_pc_fc32
  %74 = add i64 %.reload221, 5584, !insn.addr !6870
  %75 = inttoptr i64 %74 to i32*, !insn.addr !6870
  %76 = load i32, i32* %75, align 4, !insn.addr !6870
  %77 = icmp eq i32 %76, 0, !insn.addr !6870
  %78 = icmp eq i1 %77, false, !insn.addr !6871
  br i1 %78, label %dec_label_pc_fccc, label %dec_label_pc_fc59, !insn.addr !6871

dec_label_pc_fc59:                                ; preds = %dec_label_pc_fc50
  %79 = call i64 @vUSB_Wait.362(i64 50), !insn.addr !6872
  %80 = call i64 @ASV5220_Get_BCAS_INFO.179(i64 %70), !insn.addr !6873
  %81 = trunc i64 %80 to i8, !insn.addr !6874
  %82 = icmp eq i8 %81, 0, !insn.addr !6874
  br i1 %82, label %dec_label_pc_fcaa, label %dec_label_pc_fc73, !insn.addr !6875

dec_label_pc_fc73:                                ; preds = %dec_label_pc_fc59
  %83 = load i32, i32* %75, align 4, !insn.addr !6876
  %84 = icmp eq i32 %83, 0, !insn.addr !6876
  %85 = icmp eq i1 %84, false, !insn.addr !6877
  br i1 %85, label %dec_label_pc_fc9e, label %dec_label_pc_fc7c, !insn.addr !6877

dec_label_pc_fc7c:                                ; preds = %dec_label_pc_fc73
  %86 = add i64 %.reload221, 5258, !insn.addr !6878
  %87 = inttoptr i64 %86 to i8*, !insn.addr !6878
  store i8 0, i8* %87, align 1, !insn.addr !6878
  store i8 0, i8* %28, align 1, !insn.addr !6879
  %88 = call i64 @ASV5220_ResetUart.247(i64 %arg1), !insn.addr !6880
  store i8 0, i8* %15, align 1, !insn.addr !6881
  store i32 %stack_var_-188.0.ph.reload, i32* %stack_var_-188.2.reg2mem, !insn.addr !6882
  store i8 %68, i8* %stack_var_-168.1.reg2mem, !insn.addr !6882
  store i64 %arg1, i64* %rcx.10.reg2mem, !insn.addr !6882
  store i64 0, i64* %r8.2.reg2mem, !insn.addr !6882
  store i64 320, i64* %r9.1.reg2mem, !insn.addr !6882
  br label %dec_label_pc_101da, !insn.addr !6882

dec_label_pc_fc9e:                                ; preds = %dec_label_pc_fc73
  store i8 ptrtoint (i32* @global_var_1 to i8), i8* %15, align 1, !insn.addr !6883
  store i32 %stack_var_-188.0.ph.reload, i32* %stack_var_-188.2.reg2mem, !insn.addr !6884
  store i8 %68, i8* %stack_var_-168.1.reg2mem, !insn.addr !6884
  store i64 %arg1, i64* %rcx.10.reg2mem, !insn.addr !6884
  store i64 0, i64* %r8.2.reg2mem, !insn.addr !6884
  store i64 320, i64* %r9.1.reg2mem, !insn.addr !6884
  br label %dec_label_pc_101da, !insn.addr !6884

dec_label_pc_fcaa:                                ; preds = %dec_label_pc_fc59
  %89 = add i64 %.reload221, 5258, !insn.addr !6885
  %90 = inttoptr i64 %89 to i8*, !insn.addr !6885
  store i8 0, i8* %90, align 1, !insn.addr !6885
  store i8 0, i8* %28, align 1, !insn.addr !6886
  %91 = call i64 @ASV5220_ResetUart.247(i64 %arg1), !insn.addr !6887
  store i8 0, i8* %15, align 1, !insn.addr !6888
  store i32 %stack_var_-188.0.ph.reload, i32* %stack_var_-188.2.reg2mem, !insn.addr !6889
  store i8 %68, i8* %stack_var_-168.1.reg2mem, !insn.addr !6889
  store i64 %arg1, i64* %rcx.10.reg2mem, !insn.addr !6889
  store i64 0, i64* %r8.2.reg2mem, !insn.addr !6889
  store i64 320, i64* %r9.1.reg2mem, !insn.addr !6889
  br label %dec_label_pc_101da, !insn.addr !6889

dec_label_pc_fccc:                                ; preds = %dec_label_pc_fc50
  store i8 ptrtoint (i32* @global_var_1 to i8), i8* %15, align 1, !insn.addr !6890
  store i32 %stack_var_-188.0.ph.reload, i32* %stack_var_-188.2.reg2mem, !insn.addr !6891
  store i8 %68, i8* %stack_var_-168.1.reg2mem, !insn.addr !6891
  store i64 %arg1, i64* %rcx.10.reg2mem, !insn.addr !6891
  store i64 0, i64* %r8.2.reg2mem, !insn.addr !6891
  store i64 320, i64* %r9.1.reg2mem, !insn.addr !6891
  br label %dec_label_pc_101da, !insn.addr !6891

dec_label_pc_fcd8:                                ; preds = %dec_label_pc_fc32
  %92 = add i64 %.reload221, 5258, !insn.addr !6892
  %93 = inttoptr i64 %92 to i8*, !insn.addr !6892
  store i8 0, i8* %93, align 1, !insn.addr !6892
  store i8 0, i8* %28, align 1, !insn.addr !6893
  %94 = call i64 @ASV5220_ResetUart.247(i64 %arg1), !insn.addr !6894
  store i8 0, i8* %15, align 1, !insn.addr !6895
  store i32 %stack_var_-188.0.ph.reload, i32* %stack_var_-188.2.reg2mem, !insn.addr !6896
  store i8 %68, i8* %stack_var_-168.1.reg2mem, !insn.addr !6896
  store i64 %arg1, i64* %rcx.10.reg2mem, !insn.addr !6896
  store i64 0, i64* %r8.2.reg2mem, !insn.addr !6896
  store i64 320, i64* %r9.1.reg2mem, !insn.addr !6896
  br label %dec_label_pc_101da, !insn.addr !6896

dec_label_pc_fcfa:                                ; preds = %dec_label_pc_faae
  %95 = trunc i64 %.reload221 to i8
  %96 = add i8 %95, ptrtoint (i8* @global_var_8 to i8), !insn.addr !6864
  %97 = icmp eq i8 %16, 2, !insn.addr !6897
  %98 = icmp eq i1 %97, false, !insn.addr !6898
  store i32 %stack_var_-188.0.ph.reload, i32* %stack_var_-188.2.reg2mem, !insn.addr !6898
  store i8 %96, i8* %stack_var_-168.1.reg2mem, !insn.addr !6898
  store i64 %rcx.0.ph1263.reload, i64* %rcx.10.reg2mem, !insn.addr !6898
  store i64 %r8.0.ph1364.reload, i64* %r8.2.reg2mem, !insn.addr !6898
  store i64 %r9.0.ph1465.reload, i64* %r9.1.reg2mem, !insn.addr !6898
  br i1 %98, label %dec_label_pc_101da, label %dec_label_pc_fd02, !insn.addr !6898

dec_label_pc_fd02:                                ; preds = %dec_label_pc_fcfa
  %99 = add i64 %.reload221, 408, !insn.addr !6899
  %100 = inttoptr i64 %99 to i32*, !insn.addr !6899
  %101 = load i32, i32* %100, align 4, !insn.addr !6899
  %102 = add i64 %.reload221, 88, !insn.addr !6900
  %103 = mul i32 %101, 2, !insn.addr !6901
  %104 = add i32 %101, 1, !insn.addr !6901
  %105 = add i32 %104, %103, !insn.addr !6901
  %106 = sext i32 %105 to i64, !insn.addr !6902
  %107 = call i64 @FUSB_ExAllocatePool.203(i64 0, i64 %106), !insn.addr !6903
  %108 = load i32, i32* %100, align 4, !insn.addr !6904
  %109 = mul i32 %108, 2, !insn.addr !6905
  %110 = add i32 %108, 1, !insn.addr !6905
  %111 = add i32 %110, %109, !insn.addr !6905
  %112 = sext i32 %111 to i64, !insn.addr !6906
  %113 = call i64 @memset(i64 %107, i64 0, i64 %112), !insn.addr !6907
  %114 = load i32, i32* %100, align 4, !insn.addr !6908
  %115 = icmp slt i32 %114, 1, !insn.addr !6909
  store i64 0, i64* %r13.0.reg2mem, !insn.addr !6909
  store i64 %rcx.0.ph1263.reload, i64* %rcx.1.reg2mem, !insn.addr !6909
  br i1 %115, label %dec_label_pc_fd8c, label %dec_label_pc_fd60, !insn.addr !6909

dec_label_pc_fd60:                                ; preds = %dec_label_pc_fd02, %dec_label_pc_fd60
  %r13.0.reload = load i64, i64* %r13.0.reg2mem
  %sext4 = mul i64 %r13.0.reload, 4294967296
  %116 = sdiv i64 %sext4, 4294967296, !insn.addr !6910
  %117 = add i64 %116, %102, !insn.addr !6911
  %118 = inttoptr i64 %117 to i8*, !insn.addr !6911
  %119 = load i8, i8* %118, align 1, !insn.addr !6911
  %120 = call i64 @sprintf(i64 %107, i64 0, i64 %107, i8 %119, i64 %r8.0.ph1364.reload, i64 %r9.0.ph1465.reload), !insn.addr !6912
  %121 = add nuw nsw i64 %r13.0.reload, zext (i32 ptrtoint (i32* @global_var_1 to i32) to i64), !insn.addr !6913
  %122 = and i64 %121, 4294967295, !insn.addr !6913
  %123 = load i32, i32* %100, align 4, !insn.addr !6914
  %124 = sext i32 %123 to i64, !insn.addr !6915
  %125 = icmp slt i64 %122, %124, !insn.addr !6915
  store i64 %122, i64* %r13.0.reg2mem, !insn.addr !6915
  br i1 %125, label %dec_label_pc_fd60, label %dec_label_pc_fd8c.loopexit, !insn.addr !6915

dec_label_pc_fd8c.loopexit:                       ; preds = %dec_label_pc_fd60
  %126 = zext i8 %119 to i64, !insn.addr !6911
  store i64 %126, i64* %rcx.1.reg2mem
  br label %dec_label_pc_fd8c

dec_label_pc_fd8c:                                ; preds = %dec_label_pc_fd8c.loopexit, %dec_label_pc_fd02
  %127 = add i64 %.reload221, 736, !insn.addr !6916
  %128 = inttoptr i64 %127 to i8*, !insn.addr !6917
  %rcx.1.reload = load i64, i64* %rcx.1.reg2mem
  %129 = trunc i64 %107 to i32, !insn.addr !6918
  %130 = call i64 @FUSB_ExFreePool.600(i32 %129, i64 0), !insn.addr !6918
  %131 = add i64 %.reload221, 599776, !insn.addr !6919
  %132 = load i32, i32* %100, align 4, !insn.addr !6920
  %133 = sext i32 %132 to i64, !insn.addr !6920
  %134 = call i64 @memcpy(i64 %131, i64 %102, i64 %133, i64 %rcx.1.reload), !insn.addr !6921
  %135 = load i32, i32* %100, align 4, !insn.addr !6922
  %136 = add i64 %.reload221, 600096, !insn.addr !6923
  %137 = inttoptr i64 %136 to i32*, !insn.addr !6923
  store i32 %135, i32* %137, align 4, !insn.addr !6923
  store i8 0, i8* %128, align 1, !insn.addr !6924
  %138 = add i64 %.reload221, 5258, !insn.addr !6925
  %139 = inttoptr i64 %138 to i8*, !insn.addr !6925
  %140 = load i8, i8* %139, align 1, !insn.addr !6925
  %141 = icmp eq i8 %140, 0, !insn.addr !6925
  %142 = select i1 %141, i8 0, i8 64, !insn.addr !6926
  %143 = add i64 %.reload221, 737, !insn.addr !6926
  %144 = inttoptr i64 %143 to i8*, !insn.addr !6926
  store i8 %142, i8* %144, align 1, !insn.addr !6926
  %145 = trunc i32 %101 to i8, !insn.addr !6927
  %146 = add i64 %.reload221, 738, !insn.addr !6927
  %147 = inttoptr i64 %146 to i8*, !insn.addr !6927
  store i8 %145, i8* %147, align 1, !insn.addr !6927
  %148 = sext i32 %101 to i64, !insn.addr !6928
  %149 = add i64 %.reload221, 739
  %150 = call i64 @memcpy(i64 %149, i64 %102, i64 %148, i64 %rcx.1.reload), !insn.addr !6929
  %151 = add i64 %149, %148, !insn.addr !6930
  %152 = inttoptr i64 %151 to i8*, !insn.addr !6930
  store i8 0, i8* %152, align 1, !insn.addr !6930
  %153 = inttoptr i64 %102 to i8*, !insn.addr !6931
  store i8 -112, i8* %153, align 1, !insn.addr !6931
  %154 = load i8, i8* %128, align 1, !insn.addr !6932
  store i8 %154, i8* %152, align 1, !insn.addr !6933
  %155 = add i32 %101, 3, !insn.addr !6934
  %156 = icmp sgt i32 %155, ptrtoint (i32* @global_var_1 to i32), !insn.addr !6935
  br i1 %156, label %dec_label_pc_fe2b, label %dec_label_pc_fe4f, !insn.addr !6935

dec_label_pc_fe2b:                                ; preds = %dec_label_pc_fd8c
  %157 = zext i32 %104 to i64, !insn.addr !6936
  %158 = add i64 %.reload221, ptrtoint (i32* @global_var_1 to i64), !insn.addr !6937
  %159 = add i64 %158, %157, !insn.addr !6937
  store i8 %154, i8* %.reg2mem222, !insn.addr !6937
  store i64 %.reload221, i64* %rax.0.reg2mem, !insn.addr !6937
  br label %dec_label_pc_fe37, !insn.addr !6937

dec_label_pc_fe37:                                ; preds = %dec_label_pc_fe37, %dec_label_pc_fe2b
  %rax.0.reload = load i64, i64* %rax.0.reg2mem
  %.reload223 = load i8, i8* %.reg2mem222, !insn.addr !6938
  %160 = add i64 %rax.0.reload, 737, !insn.addr !6939
  %161 = inttoptr i64 %160 to i8*, !insn.addr !6939
  %162 = load i8, i8* %161, align 1, !insn.addr !6939
  %163 = xor i8 %162, %.reload223, !insn.addr !6938
  store i8 %163, i8* %152, align 1, !insn.addr !6938
  %164 = add i64 %rax.0.reload, ptrtoint (i32* @global_var_1 to i64), !insn.addr !6940
  %165 = icmp eq i64 %164, %159, !insn.addr !6941
  %166 = icmp eq i1 %165, false, !insn.addr !6942
  store i8 %163, i8* %.reg2mem222, !insn.addr !6942
  store i64 %164, i64* %rax.0.reg2mem, !insn.addr !6942
  br i1 %166, label %dec_label_pc_fe37, label %dec_label_pc_fe4f, !insn.addr !6942

dec_label_pc_fe4f:                                ; preds = %dec_label_pc_fe37, %dec_label_pc_fd8c
  %167 = add i32 %101, 4, !insn.addr !6943
  %168 = zext i32 %167 to i64, !insn.addr !6943
  %169 = add i64 %.reload221, 1056, !insn.addr !6944
  %170 = inttoptr i64 %169 to i32*, !insn.addr !6944
  store i32 %167, i32* %170, align 4, !insn.addr !6944
  %171 = add i64 %.reload221, 80, !insn.addr !6945
  %172 = inttoptr i64 %171 to i64*, !insn.addr !6945
  %173 = load i64, i64* %172, align 8, !insn.addr !6945
  %174 = inttoptr i64 %168 to i64*, !insn.addr !6946
  %175 = call i64 @ASV5220_bWtBCAS_Data.174(i64 %173, i8* %128, i64* %174), !insn.addr !6946
  %176 = add i64 %.reload221, 1072, !insn.addr !6947
  %177 = add i64 %.reload221, 1076, !insn.addr !6948
  %178 = load i64, i64* %172, align 8, !insn.addr !6949
  %179 = and i64 %r8.0.ph1364.reload, and (i64 zext (i32 ptrtoint (i32* @global_var_1 to i32) to i64), i64 4294967040), !insn.addr !6950
  %180 = inttoptr i64 %177 to i64*, !insn.addr !6951
  %181 = inttoptr i64 %176 to i64*, !insn.addr !6951
  %182 = call i64 @ASV5220_bReadBCAS_Data.224(i64 %178, i64* %180, i64* %181, i64 0, i64 %179, i64 320), !insn.addr !6951
  %183 = trunc i64 %182 to i8, !insn.addr !6952
  %184 = icmp eq i8 %183, 0, !insn.addr !6952
  store i32 %stack_var_-188.0.ph.reload, i32* %stack_var_-188.1.reg2mem, !insn.addr !6953
  store i64 0, i64* %rcx.5.reg2mem, !insn.addr !6953
  store i64 %176, i64* %rdx.3.reg2mem, !insn.addr !6953
  br i1 %184, label %dec_label_pc_fee9, label %dec_label_pc_fe9e, !insn.addr !6953

dec_label_pc_fe9e:                                ; preds = %dec_label_pc_fe4f
  %185 = inttoptr i64 %176 to i32*, !insn.addr !6954
  %186 = load i32, i32* %185, align 4, !insn.addr !6954
  %187 = icmp slt i32 %186, 1
  store i32 ptrtoint (i32* @global_var_1 to i32), i32* %stack_var_-188.1.reg2mem, !insn.addr !6955
  store i64 0, i64* %rcx.5.reg2mem, !insn.addr !6955
  store i64 %176, i64* %rdx.3.reg2mem, !insn.addr !6955
  br i1 %187, label %dec_label_pc_fee9, label %dec_label_pc_fea8, !insn.addr !6955

dec_label_pc_fea8:                                ; preds = %dec_label_pc_fe9e
  %188 = inttoptr i64 %177 to i8*, !insn.addr !6956
  %189 = load i8, i8* %188, align 1, !insn.addr !6956
  %190 = icmp eq i8 %189, 0, !insn.addr !6956
  store i32 0, i32* %stack_var_-188.1.reg2mem, !insn.addr !6957
  store i64 0, i64* %rcx.5.reg2mem, !insn.addr !6957
  store i64 %.reload221, i64* %rdx.3.reg2mem, !insn.addr !6957
  br i1 %190, label %dec_label_pc_feca.preheader, label %dec_label_pc_fee9, !insn.addr !6957

dec_label_pc_feca.preheader:                      ; preds = %dec_label_pc_fea8
  %191 = zext i32 %186 to i64, !insn.addr !6954
  %192 = icmp ugt i32 %186, ptrtoint (i32* @global_var_1 to i32), !insn.addr !6958
  store i64 zext (i32 ptrtoint (i32* @global_var_1 to i32) to i64), i64* %.reg2mem224, !insn.addr !6958
  store i64 %.reload221, i64* %rdx.070.reg2mem, !insn.addr !6958
  store i32 ptrtoint (i32* @global_var_1 to i32), i32* %stack_var_-188.1.reg2mem, !insn.addr !6958
  store i64 0, i64* %rcx.5.reg2mem, !insn.addr !6958
  store i64 %.reload221, i64* %rdx.3.reg2mem, !insn.addr !6958
  br i1 %192, label %dec_label_pc_febb, label %dec_label_pc_fee9, !insn.addr !6958

dec_label_pc_febb:                                ; preds = %dec_label_pc_feca.preheader, %dec_label_pc_feca
  %rdx.070.reload = load i64, i64* %rdx.070.reg2mem
  %193 = add i64 %rdx.070.reload, 1077, !insn.addr !6959
  %194 = inttoptr i64 %193 to i8*, !insn.addr !6959
  %195 = load i8, i8* %194, align 1, !insn.addr !6959
  %196 = add i64 %rdx.070.reload, ptrtoint (i32* @global_var_1 to i64), !insn.addr !6960
  %197 = icmp eq i8 %195, 0, !insn.addr !6961
  %198 = icmp eq i1 %197, false, !insn.addr !6962
  store i32 0, i32* %stack_var_-188.1.ph.reg2mem, !insn.addr !6962
  br i1 %198, label %dec_label_pc_fee9.loopexit, label %dec_label_pc_feca, !insn.addr !6962

dec_label_pc_feca:                                ; preds = %dec_label_pc_febb
  %.reload225 = load i64, i64* %.reg2mem224
  %199 = add nuw nsw i64 %.reload225, zext (i32 ptrtoint (i32* @global_var_1 to i32) to i64), !insn.addr !6963
  %200 = and i64 %199, 4294967295, !insn.addr !6963
  %201 = icmp ult i64 %200, %191, !insn.addr !6958
  store i64 %200, i64* %.reg2mem224, !insn.addr !6958
  store i64 %196, i64* %rdx.070.reg2mem, !insn.addr !6958
  store i32 ptrtoint (i32* @global_var_1 to i32), i32* %stack_var_-188.1.ph.reg2mem, !insn.addr !6958
  br i1 %201, label %dec_label_pc_febb, label %dec_label_pc_fee9.loopexit, !insn.addr !6958

dec_label_pc_fee9.loopexit:                       ; preds = %dec_label_pc_feca, %dec_label_pc_febb
  %stack_var_-188.1.ph.reload = load i32, i32* %stack_var_-188.1.ph.reg2mem
  %202 = zext i8 %195 to i64, !insn.addr !6959
  store i32 %stack_var_-188.1.ph.reload, i32* %stack_var_-188.1.reg2mem
  store i64 %202, i64* %rcx.5.reg2mem
  store i64 %196, i64* %rdx.3.reg2mem
  br label %dec_label_pc_fee9

dec_label_pc_fee9:                                ; preds = %dec_label_pc_fee9.loopexit, %dec_label_pc_feca.preheader, %dec_label_pc_fe9e, %dec_label_pc_fea8, %dec_label_pc_fe4f
  %rdx.3.reload = load i64, i64* %rdx.3.reg2mem
  %rcx.5.reload = load i64, i64* %rcx.5.reg2mem
  %stack_var_-188.1.reload = load i32, i32* %stack_var_-188.1.reg2mem
  %203 = add i64 %.reload221, 5588, !insn.addr !6964
  %204 = inttoptr i64 %203 to i8*, !insn.addr !6964
  %205 = load i8, i8* %204, align 1, !insn.addr !6964
  %206 = icmp eq i8 %205, 1, !insn.addr !6964
  %207 = icmp eq i1 %206, false, !insn.addr !6965
  store i64 %rdx.3.reload, i64* %rdx.4.reg2mem, !insn.addr !6965
  br i1 %207, label %dec_label_pc_ff41, label %dec_label_pc_fef2, !insn.addr !6965

dec_label_pc_fef2:                                ; preds = %dec_label_pc_fee9
  %208 = add i64 %.reload221, 5589, !insn.addr !6966
  %209 = inttoptr i64 %208 to i8*, !insn.addr !6966
  %210 = load i8, i8* %209, align 1, !insn.addr !6966
  %211 = icmp eq i8 %210, 0, !insn.addr !6966
  %212 = icmp eq i1 %211, false, !insn.addr !6967
  %213 = inttoptr i64 %176 to i32*
  %214 = load i32, i32* %213, align 4
  br i1 %212, label %dec_label_pc_ff1f, label %dec_label_pc_fefb, !insn.addr !6967

dec_label_pc_fefb:                                ; preds = %dec_label_pc_fef2
  %215 = add i64 %.reload221, 2036, !insn.addr !6968
  %216 = inttoptr i64 %215 to i32*, !insn.addr !6968
  store i32 %214, i32* %216, align 4, !insn.addr !6968
  %217 = add i64 %.reload221, 2040, !insn.addr !6969
  %218 = sext i32 %214 to i64, !insn.addr !6970
  %219 = call i64 @memcpy(i64 %217, i64 %177, i64 %218, i64 %rcx.5.reload), !insn.addr !6971
  store i64 %218, i64* %rdx.4.reg2mem, !insn.addr !6972
  br label %dec_label_pc_ff41, !insn.addr !6972

dec_label_pc_ff1f:                                ; preds = %dec_label_pc_fef2
  %220 = add i64 %.reload221, 3000, !insn.addr !6973
  %221 = inttoptr i64 %220 to i32*, !insn.addr !6973
  store i32 %214, i32* %221, align 4, !insn.addr !6973
  %222 = add i64 %.reload221, 3004, !insn.addr !6974
  %223 = sext i32 %214 to i64, !insn.addr !6975
  %224 = call i64 @memcpy(i64 %222, i64 %177, i64 %223, i64 %rcx.5.reload), !insn.addr !6976
  store i64 %223, i64* %rdx.4.reg2mem, !insn.addr !6976
  br label %dec_label_pc_ff41, !insn.addr !6976

dec_label_pc_ff41:                                ; preds = %dec_label_pc_ff1f, %dec_label_pc_fefb, %dec_label_pc_fee9
  %rdx.4.reload = load i64, i64* %rdx.4.reg2mem
  %225 = icmp eq i1 %184, false, !insn.addr !6977
  %226 = and i64 %rdx.4.reload, 4294967040, !insn.addr !6977
  %227 = icmp eq i32 %stack_var_-188.1.reload, 0, !insn.addr !6978
  %228 = icmp eq i1 %225, %227
  %229 = icmp eq i1 %228, false, !insn.addr !6979
  %230 = zext i1 %228 to i64, !insn.addr !6979
  %231 = or i64 %226, %230, !insn.addr !6979
  store i64 %rcx.5.reload, i64* %rcx.9.reg2mem, !insn.addr !6980
  store i64 %179, i64* %r8.1.reg2mem, !insn.addr !6980
  br i1 %229, label %dec_label_pc_101bd, label %dec_label_pc_ff5c, !insn.addr !6980

dec_label_pc_ff5c:                                ; preds = %dec_label_pc_ff41
  %232 = inttoptr i64 %176 to i32*, !insn.addr !6981
  %233 = load i32, i32* %232, align 4, !insn.addr !6981
  %234 = sext i32 %233 to i64, !insn.addr !6982
  %235 = inttoptr i64 %177 to i8*, !insn.addr !6983
  %236 = load i8, i8* %235, align 1, !insn.addr !6983
  %237 = add i64 %177, %234, !insn.addr !6984
  %238 = inttoptr i64 %237 to i8*, !insn.addr !6984
  store i8 %236, i8* %238, align 1, !insn.addr !6984
  %239 = add i32 %233, -1, !insn.addr !6985
  %240 = icmp sgt i32 %239, ptrtoint (i32* @global_var_1 to i32), !insn.addr !6986
  store i8 %236, i8* %.reg2mem228, !insn.addr !6986
  store i64 %rcx.5.reload, i64* %rcx.6.reg2mem, !insn.addr !6986
  br i1 %240, label %dec_label_pc_ff7d, label %dec_label_pc_ffa9, !insn.addr !6986

dec_label_pc_ff7d:                                ; preds = %dec_label_pc_ff5c
  %241 = add i32 %233, -3
  %242 = zext i32 %241 to i64, !insn.addr !6987
  %243 = add i64 %.reload221, ptrtoint (i32* @global_var_1 to i64), !insn.addr !6988
  %244 = add i64 %243, %242, !insn.addr !6988
  store i8 %236, i8* %.reg2mem226, !insn.addr !6989
  store i64 %.reload221, i64* %rax.2.reg2mem, !insn.addr !6989
  br label %dec_label_pc_ff8b, !insn.addr !6989

dec_label_pc_ff8b:                                ; preds = %dec_label_pc_ff8b, %dec_label_pc_ff7d
  %rax.2.reload = load i64, i64* %rax.2.reg2mem
  %.reload227 = load i8, i8* %.reg2mem226, !insn.addr !6990
  %245 = add i64 %rax.2.reload, 1077, !insn.addr !6991
  %246 = inttoptr i64 %245 to i8*, !insn.addr !6991
  %247 = load i8, i8* %246, align 1, !insn.addr !6991
  %248 = xor i8 %247, %.reload227, !insn.addr !6991
  store i8 %248, i8* %238, align 1, !insn.addr !6992
  %249 = add i64 %rax.2.reload, ptrtoint (i32* @global_var_1 to i64), !insn.addr !6993
  %250 = icmp eq i64 %249, %244, !insn.addr !6994
  %251 = icmp eq i1 %250, false, !insn.addr !6995
  store i8 %248, i8* %.reg2mem226, !insn.addr !6995
  store i64 %249, i64* %rax.2.reg2mem, !insn.addr !6995
  br i1 %251, label %dec_label_pc_ff8b, label %dec_label_pc_ffa9.loopexit, !insn.addr !6995

dec_label_pc_ffa9.loopexit:                       ; preds = %dec_label_pc_ff8b
  %252 = zext i8 %248 to i64, !insn.addr !6991
  store i8 %248, i8* %.reg2mem228
  store i64 %252, i64* %rcx.6.reg2mem
  br label %dec_label_pc_ffa9

dec_label_pc_ffa9:                                ; preds = %dec_label_pc_ffa9.loopexit, %dec_label_pc_ff5c
  %rcx.6.reload = load i64, i64* %rcx.6.reg2mem
  %.reload229 = load i8, i8* %.reg2mem228, !insn.addr !6996
  %253 = sext i32 %239 to i64, !insn.addr !6997
  %254 = add i64 %177, %253, !insn.addr !6998
  %255 = inttoptr i64 %254 to i8*, !insn.addr !6998
  %256 = load i8, i8* %255, align 1, !insn.addr !6998
  %257 = icmp eq i8 %.reload229, %256, !insn.addr !6998
  %258 = icmp eq i1 %257, false, !insn.addr !6999
  store i64 %rcx.6.reload, i64* %rcx.9.reg2mem, !insn.addr !6999
  store i64 %253, i64* %r8.1.reg2mem, !insn.addr !6999
  br i1 %258, label %dec_label_pc_101bd, label %dec_label_pc_ffce, !insn.addr !6999

dec_label_pc_ffce:                                ; preds = %dec_label_pc_ffa9
  %259 = load i8, i8* %139, align 1, !insn.addr !7000
  %260 = icmp eq i8 %259, 0, !insn.addr !7000
  %261 = zext i1 %260 to i8, !insn.addr !7001
  store i8 %261, i8* %139, align 1, !insn.addr !7001
  %262 = add i64 %.reload221, 1077, !insn.addr !7002
  %263 = inttoptr i64 %262 to i8*, !insn.addr !7002
  %264 = load i8, i8* %263, align 1, !insn.addr !7002
  %265 = call i64 @ASV5220_GetCardInDetect.511(i8* nonnull %stack_var_-137), !insn.addr !7003
  %266 = load i8, i8* %stack_var_-137, align 1, !insn.addr !7004
  %267 = icmp eq i8 %266, 1, !insn.addr !7004
  %268 = icmp eq i1 %267, false, !insn.addr !7005
  store i64 %rcx.6.reload, i64* %rcx.7.reg2mem, !insn.addr !7005
  br i1 %268, label %dec_label_pc_10024, label %dec_label_pc_10001, !insn.addr !7005

dec_label_pc_10001:                               ; preds = %dec_label_pc_ffce
  %269 = add i64 %.reload221, 1064, !insn.addr !7006
  %270 = inttoptr i64 %269 to i64*, !insn.addr !7006
  %271 = load i64, i64* %270, align 8, !insn.addr !7006
  %272 = add i64 %.reload221, 1060, !insn.addr !7007
  %273 = inttoptr i64 %272 to i8*, !insn.addr !7007
  %274 = load i8, i8* %273, align 1, !insn.addr !7007
  %275 = load i32, i32* %232, align 4, !insn.addr !7008
  %276 = add i32 %275, -4, !insn.addr !7009
  %277 = add i64 %.reload221, 1079, !insn.addr !7010
  %278 = call i64 @TS_SetBCASResponse.389(i64 %277, i32 %276, i8 %274, i64 %271), !insn.addr !7011
  store i64 %271, i64* %rcx.7.reg2mem, !insn.addr !7011
  br label %dec_label_pc_10024, !insn.addr !7011

dec_label_pc_10024:                               ; preds = %dec_label_pc_10001, %dec_label_pc_ffce
  %rcx.7.reload = load i64, i64* %rcx.7.reg2mem
  %279 = load i32, i32* %232, align 4, !insn.addr !7012
  %280 = icmp sgt i32 %279, ptrtoint (i8** @global_var_7 to i32), !insn.addr !7013
  br i1 %280, label %dec_label_pc_10033, label %dec_label_pc_10104, !insn.addr !7013

dec_label_pc_10033:                               ; preds = %dec_label_pc_10024
  %281 = add i64 %.reload221, 1080, !insn.addr !7014
  %282 = inttoptr i64 %281 to i8*, !insn.addr !7014
  %283 = load i8, i8* %282, align 1, !insn.addr !7014
  %284 = icmp ult i8 %283, 2
  store i8 0, i8* %storemerge.reg2mem, !insn.addr !7015
  br i1 %284, label %dec_label_pc_10092, label %dec_label_pc_10068, !insn.addr !7015

dec_label_pc_10068:                               ; preds = %dec_label_pc_10033
  %285 = add i64 %.reload221, 1083, !insn.addr !7016
  %286 = inttoptr i64 %285 to i8*, !insn.addr !7016
  %287 = load i8, i8* %286, align 1, !insn.addr !7016
  store i8 %287, i8* %storemerge.reg2mem, !insn.addr !7017
  br label %dec_label_pc_10092, !insn.addr !7017

dec_label_pc_10092:                               ; preds = %dec_label_pc_10033, %dec_label_pc_10068
  %storemerge.reload = load i8, i8* %storemerge.reg2mem
  store i8 %storemerge.reload, i8* %stack_var_-152, align 1
  %288 = add i64 %.reload221, 600100, !insn.addr !7018
  %289 = sext i32 %279 to i64, !insn.addr !7019
  %290 = call i64 @memcpy(i64 %288, i64 %177, i64 %289, i64 %rcx.7.reload), !insn.addr !7020
  %291 = load i32, i32* %232, align 4, !insn.addr !7021
  %292 = add i64 %.reload221, 600420, !insn.addr !7022
  %293 = inttoptr i64 %292 to i32*, !insn.addr !7022
  store i32 %291, i32* %293, align 4, !insn.addr !7022
  %294 = add i64 %.reload221, 1060, !insn.addr !7023
  %295 = inttoptr i64 %294 to i8*, !insn.addr !7023
  %296 = load i8, i8* %295, align 1, !insn.addr !7023
  %297 = udiv i8 %296, 2
  %298 = zext i8 %297 to i64, !insn.addr !7024
  %299 = and i64 %298, zext (i32 ptrtoint (i8** @global_var_7 to i32) to i64), !insn.addr !7024
  %300 = mul i64 %299, ptrtoint (i8* @global_var_8 to i64), !insn.addr !7025
  %301 = add i64 %300, %3, !insn.addr !7025
  %302 = inttoptr i64 %301 to i64*, !insn.addr !7025
  %303 = load i64, i64* %302, align 8, !insn.addr !7025
  %304 = icmp eq i64 %303, 0, !insn.addr !7026
  br i1 %304, label %dec_label_pc_10104, label %dec_label_pc_100d2, !insn.addr !7027

dec_label_pc_100d2:                               ; preds = %dec_label_pc_10092
  %305 = call i64 @DTV_SaveBCASCommand.370(i64 %303, i64 %131), !insn.addr !7028
  %306 = load i8, i8* %295, align 1, !insn.addr !7029
  %307 = udiv i8 %306, 2
  %308 = zext i8 %307 to i64, !insn.addr !7030
  %309 = and i64 %308, zext (i32 ptrtoint (i8** @global_var_7 to i32) to i64), !insn.addr !7030
  %310 = mul i64 %309, ptrtoint (i8* @global_var_8 to i64), !insn.addr !7031
  %311 = add i64 %310, %3, !insn.addr !7031
  %312 = inttoptr i64 %311 to i64*, !insn.addr !7031
  %313 = load i64, i64* %312, align 8, !insn.addr !7031
  %314 = icmp eq i64 %313, 0, !insn.addr !7032
  br i1 %314, label %dec_label_pc_10104, label %dec_label_pc_100f8, !insn.addr !7033

dec_label_pc_100f8:                               ; preds = %dec_label_pc_100d2
  %315 = call i64 @DTV_SaveBcasReturnCode.593(i64 %313, i8* nonnull %stack_var_-152), !insn.addr !7034
  br label %dec_label_pc_10104, !insn.addr !7034

dec_label_pc_10104:                               ; preds = %dec_label_pc_10024, %dec_label_pc_100f8, %dec_label_pc_100d2, %dec_label_pc_10092
  %316 = load i32, i32* %232, align 4, !insn.addr !7035
  %317 = mul i32 %316, 2, !insn.addr !7036
  %318 = add i32 %316, 1, !insn.addr !7036
  %319 = add i32 %318, %317, !insn.addr !7036
  %320 = sext i32 %319 to i64, !insn.addr !7037
  %321 = call i64 @FUSB_ExAllocatePool.203(i64 0, i64 %320), !insn.addr !7038
  %322 = load i32, i32* %232, align 4, !insn.addr !7039
  %323 = mul i32 %322, 2, !insn.addr !7040
  %324 = add i32 %322, 1, !insn.addr !7040
  %325 = add i32 %324, %323, !insn.addr !7040
  %326 = sext i32 %325 to i64, !insn.addr !7041
  %327 = call i64 @memset(i64 %321, i64 0, i64 %326), !insn.addr !7042
  %328 = load i32, i32* %232, align 4, !insn.addr !7043
  %329 = icmp slt i32 %328, 1, !insn.addr !7044
  store i64 %.reload221, i64* %r13.1.reg2mem, !insn.addr !7044
  store i64 0, i64* %r14.0.reg2mem, !insn.addr !7044
  store i64 %rcx.7.reload, i64* %rcx.8.reg2mem, !insn.addr !7044
  br i1 %329, label %dec_label_pc_1017a, label %dec_label_pc_1014a, !insn.addr !7044

dec_label_pc_1014a:                               ; preds = %dec_label_pc_10104, %dec_label_pc_1014a
  %r14.0.reload = load i64, i64* %r14.0.reg2mem
  %r13.1.reload = load i64, i64* %r13.1.reg2mem
  %330 = add i64 %r13.1.reload, 1076, !insn.addr !7045
  %331 = inttoptr i64 %330 to i8*, !insn.addr !7045
  %332 = load i8, i8* %331, align 1, !insn.addr !7045
  %333 = call i64 @sprintf(i64 %321, i64 0, i64 %321, i8 %332, i64 %253, i64 %231), !insn.addr !7046
  %334 = add nuw nsw i64 %r14.0.reload, zext (i32 ptrtoint (i32* @global_var_1 to i32) to i64), !insn.addr !7047
  %335 = and i64 %334, 4294967295, !insn.addr !7047
  %336 = add i64 %r13.1.reload, ptrtoint (i32* @global_var_1 to i64), !insn.addr !7048
  %337 = load i32, i32* %232, align 4, !insn.addr !7049
  %338 = sext i32 %337 to i64, !insn.addr !7050
  %339 = icmp slt i64 %335, %338, !insn.addr !7050
  store i64 %336, i64* %r13.1.reg2mem, !insn.addr !7050
  store i64 %335, i64* %r14.0.reg2mem, !insn.addr !7050
  br i1 %339, label %dec_label_pc_1014a, label %dec_label_pc_1017a.loopexit, !insn.addr !7050

dec_label_pc_1017a.loopexit:                      ; preds = %dec_label_pc_1014a
  %340 = zext i8 %332 to i64, !insn.addr !7045
  store i64 %340, i64* %rcx.8.reg2mem
  br label %dec_label_pc_1017a

dec_label_pc_1017a:                               ; preds = %dec_label_pc_1017a.loopexit, %dec_label_pc_10104
  %rcx.8.reload = load i64, i64* %rcx.8.reg2mem
  %341 = trunc i64 %321 to i32, !insn.addr !7051
  %342 = call i64 @FUSB_ExFreePool.600(i32 %341, i64 0), !insn.addr !7051
  %343 = and i8 %264, -126
  %344 = icmp eq i8 %343, -126, !insn.addr !7052
  %345 = icmp eq i1 %344, false, !insn.addr !7053
  br i1 %345, label %dec_label_pc_101b4, label %dec_label_pc_10195, !insn.addr !7053

dec_label_pc_10195:                               ; preds = %dec_label_pc_1017a
  store i8 0, i8* %139, align 1, !insn.addr !7054
  %346 = add i64 %.reload221, 5590, !insn.addr !7055
  %347 = inttoptr i64 %346 to i8*, !insn.addr !7055
  store i8 ptrtoint (i32* @global_var_1 to i8), i8* %347, align 1, !insn.addr !7055
  %348 = call i64 @ASV5220_ResetUart.247(i64 %arg1), !insn.addr !7056
  store i8 0, i8* %15, align 1, !insn.addr !7057
  store i32 %stack_var_-188.1.reload, i32* %stack_var_-188.2.reg2mem, !insn.addr !7058
  store i8 %96, i8* %stack_var_-168.1.reg2mem, !insn.addr !7058
  store i64 %rcx.8.reload, i64* %rcx.10.reg2mem, !insn.addr !7058
  store i64 %253, i64* %r8.2.reg2mem, !insn.addr !7058
  store i64 %231, i64* %r9.1.reg2mem, !insn.addr !7058
  br label %dec_label_pc_101da, !insn.addr !7058

dec_label_pc_101b4:                               ; preds = %dec_label_pc_1017a
  store i8 ptrtoint (i32* @global_var_1 to i8), i8* %15, align 1, !insn.addr !7059
  store i32 %stack_var_-188.1.reload, i32* %stack_var_-188.2.reg2mem, !insn.addr !7060
  store i8 %96, i8* %stack_var_-168.1.reg2mem, !insn.addr !7060
  store i64 %rcx.8.reload, i64* %rcx.10.reg2mem, !insn.addr !7060
  store i64 %253, i64* %r8.2.reg2mem, !insn.addr !7060
  store i64 %231, i64* %r9.1.reg2mem, !insn.addr !7060
  br label %dec_label_pc_101da, !insn.addr !7060

dec_label_pc_101bd:                               ; preds = %dec_label_pc_ffa9, %dec_label_pc_ff41
  %r8.1.reload = load i64, i64* %r8.1.reg2mem
  %rcx.9.reload = load i64, i64* %rcx.9.reg2mem
  store i8 0, i8* %139, align 1, !insn.addr !7061
  %349 = add i64 %.reload221, 5590, !insn.addr !7062
  %350 = inttoptr i64 %349 to i8*, !insn.addr !7062
  store i8 ptrtoint (i32* @global_var_1 to i8), i8* %350, align 1, !insn.addr !7062
  %351 = call i64 @ASV5220_ResetUart.247(i64 %arg1), !insn.addr !7063
  store i8 0, i8* %15, align 1, !insn.addr !7064
  store i32 %stack_var_-188.1.reload, i32* %stack_var_-188.2.reg2mem, !insn.addr !7064
  store i8 %96, i8* %stack_var_-168.1.reg2mem, !insn.addr !7064
  store i64 %rcx.9.reload, i64* %rcx.10.reg2mem, !insn.addr !7064
  store i64 %r8.1.reload, i64* %r8.2.reg2mem, !insn.addr !7064
  store i64 %231, i64* %r9.1.reg2mem, !insn.addr !7064
  br label %dec_label_pc_101da, !insn.addr !7064

dec_label_pc_fa9d.outer10.dec_label_pc_fa9d.outer10.dec_label_pc_101da.loopexit_crit_edge_crit_edge: ; preds = %dec_label_pc_fa9d.outer10.backedge
  %352 = trunc i64 %.reload221 to i8
  %353 = add i8 %352, ptrtoint (i8* @global_var_8 to i8), !insn.addr !6864
  store i32 %stack_var_-188.0.ph.reload, i32* %stack_var_-188.2.reg2mem
  store i8 %353, i8* %stack_var_-168.1.reg2mem
  store i64 %rcx.0.ph12.be.reload, i64* %rcx.10.reg2mem
  store i64 0, i64* %r8.2.reg2mem
  store i64 320, i64* %r9.1.reg2mem
  br label %dec_label_pc_101da

dec_label_pc_fa9d.dec_label_pc_101da.loopexit_crit_edge: ; preds = %dec_label_pc_fb52
  %354 = trunc i64 %.reload221 to i8
  %355 = add i8 %354, ptrtoint (i8* @global_var_8 to i8), !insn.addr !6864
  store i32 %stack_var_-188.0.ph.reload, i32* %stack_var_-188.2.reg2mem
  store i8 %355, i8* %stack_var_-168.1.reg2mem
  store i64 %rcx.0.ph1263.reload, i64* %rcx.10.reg2mem
  store i64 %r8.0.ph1364.reload, i64* %r8.2.reg2mem
  store i64 %r9.0.ph1465.reload, i64* %r9.1.reg2mem
  br label %dec_label_pc_101da

dec_label_pc_101da:                               ; preds = %dec_label_pc_fa9d.dec_label_pc_101da.loopexit_crit_edge, %dec_label_pc_fa9d.outer10.dec_label_pc_fa9d.outer10.dec_label_pc_101da.loopexit_crit_edge_crit_edge, %dec_label_pc_fa9d.outer, %dec_label_pc_101bd, %dec_label_pc_101b4, %dec_label_pc_10195, %dec_label_pc_fcfa, %dec_label_pc_fcd8, %dec_label_pc_fccc, %dec_label_pc_fcaa, %dec_label_pc_fc9e, %dec_label_pc_fc7c
  %r9.1.reload = load i64, i64* %r9.1.reg2mem
  %r8.2.reload = load i64, i64* %r8.2.reg2mem
  %rcx.10.reload = load i64, i64* %rcx.10.reg2mem
  %stack_var_-168.1.reload = load i8, i8* %stack_var_-168.1.reg2mem
  %stack_var_-188.2.reload = load i32, i32* %stack_var_-188.2.reg2mem
  %356 = add nsw i32 %stack_var_-153.0.ph.reload, sext (i8 ptrtoint (i32* @global_var_1 to i8) to i32), !insn.addr !7065
  %sext = mul i32 %356, 16777216
  %357 = sdiv i32 %sext, 16777216, !insn.addr !7065
  %358 = load i8, i8* %11, align 1, !insn.addr !7066
  %359 = icmp eq i8 %358, 1, !insn.addr !7066
  %360 = icmp eq i1 %359, false, !insn.addr !7067
  br i1 %360, label %dec_label_pc_1024a, label %dec_label_pc_101ec, !insn.addr !7067

dec_label_pc_101ec:                               ; preds = %dec_label_pc_101da
  %361 = trunc i32 %357 to i16
  %362 = urem i16 %361, 256
  %363 = mul nuw nsw i16 %362, 37, !insn.addr !7068
  %364 = lshr i16 %363, ptrtoint (i8* @global_var_8 to i16), !insn.addr !7068
  %365 = trunc i16 %364 to i8, !insn.addr !7068
  %366 = trunc i32 %357 to i8, !insn.addr !7069
  %367 = sub i8 %366, %365, !insn.addr !7069
  %368 = lshr i8 %367, ptrtoint (i32* @global_var_1 to i8), !insn.addr !7070
  %369 = mul i8 %365, ptrtoint (i32* @global_var_1 to i8), !insn.addr !7071
  %370 = add i8 %368, %369, !insn.addr !7071
  %371 = lshr i8 %370, ptrtoint (i32* @global_var_2 to i8), !insn.addr !7072
  %372 = mul i8 %371, sub (i8 1, i8 ptrtoint (i8* @global_var_8 to i8))
  %373 = sub i8 0, %366, !insn.addr !7073
  %374 = icmp eq i8 %372, %373, !insn.addr !7073
  %375 = icmp eq i1 %374, false, !insn.addr !7074
  br i1 %375, label %dec_label_pc_1024a, label %dec_label_pc_1021d, !insn.addr !7074

dec_label_pc_1021d:                               ; preds = %dec_label_pc_101ec
  %376 = call i64 @ASV5220_GetCardInDetect.511(i8* nonnull %stack_var_-137), !insn.addr !7075
  %377 = load i8, i8* %stack_var_-137, align 1, !insn.addr !7076
  %378 = icmp eq i8 %377, 0, !insn.addr !7076
  %379 = icmp eq i1 %378, false, !insn.addr !7077
  br i1 %379, label %dec_label_pc_1024a, label %dec_label_pc_10235, !insn.addr !7077

dec_label_pc_10235:                               ; preds = %dec_label_pc_1021d
  %380 = sext i8 %stack_var_-168.1.reload to i64, !insn.addr !7078
  %381 = add nsw i64 %380, 5582, !insn.addr !7079
  %382 = inttoptr i64 %381 to i8*, !insn.addr !7079
  store i8 0, i8* %382, align 1, !insn.addr !7079
  %383 = add i64 %380, ptrtoint (i8** @global_var_1338 to i64), !insn.addr !7080
  %384 = inttoptr i64 %383 to i8*, !insn.addr !7080
  store i8 0, i8* %384, align 1, !insn.addr !7080
  br label %dec_label_pc_1024a, !insn.addr !7080

dec_label_pc_1024a:                               ; preds = %dec_label_pc_10235, %dec_label_pc_1021d, %dec_label_pc_101ec, %dec_label_pc_101da
  %385 = call i64 @vUSB_Wait.362(i64 50), !insn.addr !7081
  %386 = load i8, i8* %6, align 1, !insn.addr !7082
  %387 = icmp eq i8 %386, 0, !insn.addr !7082
  store i32 %stack_var_-188.2.reload, i32* %stack_var_-188.0.ph.reg2mem, !insn.addr !7083
  store i32 %357, i32* %stack_var_-153.0.ph.reg2mem, !insn.addr !7083
  store i8 %stack_var_-168.1.reload, i8* %stack_var_-168.0.ph.reg2mem, !insn.addr !7083
  store i64 %rcx.10.reload, i64* %rcx.0.ph.reg2mem, !insn.addr !7083
  store i64 %r8.2.reload, i64* %r8.0.ph.reg2mem, !insn.addr !7083
  store i64 %r9.1.reload, i64* %r9.0.ph.reg2mem, !insn.addr !7083
  br i1 %387, label %dec_label_pc_fa9d.outer, label %dec_label_pc_10263, !insn.addr !7083

dec_label_pc_10263:                               ; preds = %dec_label_pc_1024a, %dec_label_pc_fb38, %dec_label_pc_fb21
  %388 = add i64 %arg1, 21753, !insn.addr !7084
  %389 = inttoptr i64 %388 to i8*, !insn.addr !7084
  store i8 0, i8* %389, align 1, !insn.addr !7084
  store i8 ptrtoint (i32* @global_var_1 to i8), i8* %6, align 1, !insn.addr !7085
  %390 = add i64 %arg1, 21720, !insn.addr !7086
  %391 = call i64 @complete(i64 %390), !insn.addr !7087
  ret i64 %391, !insn.addr !7087
}

define i32 @DTV_StreamDataRead(i64 %pTnim, i8* %Buffer, i32 %MaxReadLen) local_unnamed_addr {
dec_label_pc_10283:
  %rax.0.reg2mem = alloca i64, !insn.addr !7088
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = add i64 %0, -56, !insn.addr !7088
  %2 = inttoptr i64 %1 to i32*, !insn.addr !7088
  %3 = load i32, i32* %2, align 4, !insn.addr !7088
  %4 = zext i32 %3 to i64, !insn.addr !7088
  %5 = call i64 @__readgsqword(i64 40), !insn.addr !7089
  %6 = icmp eq i64 %5, %4, !insn.addr !7089
  br i1 %6, label %dec_label_pc_102a1, label %dec_label_pc_1029c, !insn.addr !7090

dec_label_pc_1029c:                               ; preds = %dec_label_pc_10283
  %7 = call i64 @__stack_chk_fail(), !insn.addr !7091
  store i64 %7, i64* %rax.0.reg2mem, !insn.addr !7091
  br label %dec_label_pc_102a1, !insn.addr !7091

dec_label_pc_102a1:                               ; preds = %dec_label_pc_1029c, %dec_label_pc_10283
  %rax.0.reload = load i64, i64* %rax.0.reg2mem
  %8 = trunc i64 %rax.0.reload to i32, !insn.addr !7092
  ret i32 %8, !insn.addr !7092
}

define i64 @DTV_StreamDataRead.499(i64 %arg1, i64 %arg2, i64 %arg3) local_unnamed_addr {
dec_label_pc_102b3:
  %storemerge24.reg2mem = alloca i64, !insn.addr !7093
  %r13.2.reg2mem = alloca i64, !insn.addr !7093
  %r15.1.reg2mem = alloca i64, !insn.addr !7093
  %rcx.3.reg2mem = alloca i64, !insn.addr !7093
  %r15.0.reg2mem = alloca i64, !insn.addr !7093
  %rcx.2.reg2mem = alloca i64, !insn.addr !7093
  %.reg2mem = alloca i32, !insn.addr !7093
  %rcx.1.reg2mem = alloca i64, !insn.addr !7093
  %r13.1.reg2mem = alloca i64, !insn.addr !7093
  %rax.2.reg2mem = alloca i64, !insn.addr !7093
  %rcx.0.reg2mem = alloca i64, !insn.addr !7093
  %r12.1.reg2mem = alloca i64, !insn.addr !7093
  %rax.1.reg2mem = alloca i64, !insn.addr !7093
  %rax.0.reg2mem = alloca i64, !insn.addr !7093
  %storemerge14.reg2mem = alloca i64, !insn.addr !7093
  %r12.0.reg2mem = alloca i64, !insn.addr !7093
  %.pre-phi65.reg2mem = alloca i32, !insn.addr !7093
  %storemerge.reg2mem = alloca i64, !insn.addr !7093
  %r13.0.reg2mem = alloca i64, !insn.addr !7093
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = call i64 @__decompiler_undefined_function_0()
  %stack_var_-57 = alloca i32, align 4
  %2 = call i64 @mcount(), !insn.addr !7094
  %3 = and i64 %arg3, 4294967295, !insn.addr !7095
  %4 = add i64 %arg1, 7480, !insn.addr !7096
  %5 = inttoptr i64 %4 to i64*, !insn.addr !7096
  %6 = load i64, i64* %5, align 8, !insn.addr !7096
  %7 = add i64 %arg1, 7472, !insn.addr !7097
  %8 = inttoptr i64 %7 to i8*, !insn.addr !7097
  %9 = load i8, i8* %8, align 1, !insn.addr !7097
  %10 = zext i8 %9 to i64, !insn.addr !7097
  %11 = trunc i64 %arg3 to i32, !insn.addr !7098
  %12 = icmp ugt i32 %11, ptrtoint ([9 x i8]* @global_var_2efff to i32)
  %13 = select i1 %12, i64 zext (i32 ptrtoint ([8 x i8]* @global_var_2f000 to i32) to i64), i64 %3, !insn.addr !7099
  %14 = call i64 @FUSB_ExAllocatePool.203(i64 0, i64 %13), !insn.addr !7100
  %15 = add i64 %arg1, 7496, !insn.addr !7101
  %16 = inttoptr i64 %15 to i32*, !insn.addr !7101
  %17 = load i32, i32* %16, align 4, !insn.addr !7101
  %18 = icmp eq i32 %17, 0, !insn.addr !7102
  %19 = icmp eq i1 %18, false, !insn.addr !7103
  br i1 %19, label %dec_label_pc_104b4, label %dec_label_pc_10349, !insn.addr !7103

dec_label_pc_10349:                               ; preds = %dec_label_pc_102b3
  %20 = call i64 @USB_BulkStreamRead.537(i64 %6, i64 %10), !insn.addr !7104
  %21 = and i64 %20, 4294967295, !insn.addr !7105
  %22 = add i64 %20, 4294965792, !insn.addr !7106
  %23 = and i64 %22, 4294967295, !insn.addr !7106
  %24 = add i64 %arg1, 7500, !insn.addr !7107
  store i64 0, i64* %r13.0.reg2mem, !insn.addr !7108
  br label %dec_label_pc_10385, !insn.addr !7108

dec_label_pc_10385:                               ; preds = %dec_label_pc_1039e, %dec_label_pc_10349
  %r13.0.reload = load i64, i64* %r13.0.reg2mem
  %sext = mul i64 %r13.0.reload, 4294967296
  %25 = sdiv i64 %sext, 4294967296, !insn.addr !7109
  %26 = add i64 %24, %25, !insn.addr !7107
  %27 = call i64 @DTV_CheckSync.253(i64 %26, i64* bitcast (i8* @global_var_8 to i64*)), !insn.addr !7110
  %28 = trunc i64 %27 to i32, !insn.addr !7111
  %29 = icmp eq i32 %28, 0, !insn.addr !7111
  %30 = icmp eq i1 %29, false, !insn.addr !7112
  br i1 %30, label %dec_label_pc_103ac, label %dec_label_pc_1039e, !insn.addr !7112

dec_label_pc_1039e:                               ; preds = %dec_label_pc_10385
  %31 = add nuw nsw i64 %r13.0.reload, zext (i32 ptrtoint (i32* @global_var_1 to i32) to i64), !insn.addr !7113
  %32 = and i64 %31, 4294967295, !insn.addr !7113
  %33 = icmp ugt i64 %23, %32, !insn.addr !7114
  store i64 %32, i64* %r13.0.reg2mem, !insn.addr !7114
  br i1 %33, label %dec_label_pc_10385, label %dec_label_pc_103a7, !insn.addr !7114

dec_label_pc_103a7:                               ; preds = %dec_label_pc_1039e
  ret i64 %27, !insn.addr !7115

dec_label_pc_103ac:                               ; preds = %dec_label_pc_10385
  %34 = sub nsw i64 %21, %r13.0.reload, !insn.addr !7116
  %35 = and i64 %34, 4294967295, !insn.addr !7116
  %sext3 = mul i64 %34, 4294967296
  %36 = sdiv i64 %sext3, 4294967296, !insn.addr !7117
  %37 = mul nsw i64 %36, -1370734243, !insn.addr !7117
  %38 = lshr i64 %37, ptrtoint (i32** @global_var_20 to i64), !insn.addr !7117
  %39 = mul i64 %35, ptrtoint (i32* @global_var_1 to i64), !insn.addr !7118
  %40 = add i64 %38, %39, !insn.addr !7118
  %41 = trunc i64 %40 to i32, !insn.addr !7118
  %42 = ashr i32 %41, ptrtoint (i8** @global_var_7 to i32), !insn.addr !7119
  %43 = trunc i64 %34 to i32, !insn.addr !7120
  %44 = ashr i32 %43, ptrtoint (i8** @global_var_1f to i32), !insn.addr !7121
  %45 = sub i32 %42, %44, !insn.addr !7122
  %46 = mul i32 %45, -188
  %47 = add i32 %46, %43, !insn.addr !7123
  %48 = add i64 %arg1, ptrtoint (i32** @global_var_30d4c to i64), !insn.addr !7124
  %49 = inttoptr i64 %48 to i32*, !insn.addr !7124
  store i32 %47, i32* %49, align 4, !insn.addr !7124
  %50 = sub i32 0, %46, !insn.addr !7125
  %51 = trunc i64 %20 to i32, !insn.addr !7126
  %52 = sub i32 %51, %47, !insn.addr !7126
  %53 = add i64 %arg1, ptrtoint (i32** @global_var_30d50 to i64), !insn.addr !7127
  %54 = inttoptr i64 %53 to i32*, !insn.addr !7127
  store i32 %52, i32* %54, align 4, !insn.addr !7127
  %55 = add i64 %arg1, 586869, !insn.addr !7128
  %56 = inttoptr i64 %55 to i8*, !insn.addr !7128
  %57 = load i8, i8* %56, align 1, !insn.addr !7128
  %58 = icmp ne i8 %57, 0, !insn.addr !7129
  %59 = icmp eq i8 %57, 3, !insn.addr !7130
  %60 = icmp eq i1 %59, false, !insn.addr !7131
  %or.cond = icmp eq i1 %58, %60
  br i1 %or.cond, label %dec_label_pc_1042b, label %dec_label_pc_10401, !insn.addr !7132

dec_label_pc_10401:                               ; preds = %dec_label_pc_103ac
  %61 = sext i32 %50 to i64, !insn.addr !7133
  %62 = mul nsw i64 %61, -1370734243, !insn.addr !7133
  %63 = lshr i64 %62, ptrtoint (i32** @global_var_20 to i64), !insn.addr !7133
  %64 = trunc i64 %63 to i32
  %65 = sub i32 %64, %46, !insn.addr !7134
  %66 = ashr i32 %65, ptrtoint (i8** @global_var_7 to i32), !insn.addr !7135
  %67 = ashr i32 %50, ptrtoint (i8** @global_var_1f to i32), !insn.addr !7136
  %68 = sub i32 %66, %67, !insn.addr !7137
  %69 = call i64 @DTV_CleanEncFlag.479(i64 %26, i32 %68, i32 %65, i32 %44), !insn.addr !7138
  br label %dec_label_pc_1042b, !insn.addr !7138

dec_label_pc_1042b:                               ; preds = %dec_label_pc_103ac, %dec_label_pc_10401
  %70 = add i64 %arg1, ptrtoint (i8** @global_var_30de4 to i64), !insn.addr !7139
  %71 = inttoptr i64 %70 to i8*, !insn.addr !7139
  %72 = load i8, i8* %71, align 1, !insn.addr !7139
  %73 = icmp eq i8 %72, ptrtoint (i32* @global_var_1 to i8), !insn.addr !7139
  %74 = icmp eq i1 %73, false, !insn.addr !7140
  br i1 %74, label %dec_label_pc_10467, label %dec_label_pc_10434, !insn.addr !7140

dec_label_pc_10434:                               ; preds = %dec_label_pc_1042b
  %75 = add i64 %arg1, ptrtoint (i8** @global_var_30da1 to i64), !insn.addr !7141
  %76 = inttoptr i64 %75 to i8*, !insn.addr !7141
  %77 = load i8, i8* %76, align 1, !insn.addr !7141
  %78 = icmp eq i8 %77, 0, !insn.addr !7141
  %79 = icmp eq i1 %78, false, !insn.addr !7142
  br i1 %79, label %dec_label_pc_10467, label %dec_label_pc_1043d, !insn.addr !7142

dec_label_pc_1043d:                               ; preds = %dec_label_pc_10434
  %80 = zext i32 %50 to i64, !insn.addr !7125
  %81 = ashr i32 %50, 31, !insn.addr !7143
  %82 = zext i32 %81 to i64, !insn.addr !7144
  %83 = mul i64 %82, 4294967296, !insn.addr !7144
  %84 = or i64 %83, %80, !insn.addr !7144
  %85 = sdiv i64 %84, 188, !insn.addr !7144
  %86 = and i64 %85, 4294967295, !insn.addr !7145
  %87 = call i64 @DTV_EncAES_MultiTS.146(i64 %arg1, i64 %26, i64 %86, i64 %arg2), !insn.addr !7146
  store i64 %87, i64* %storemerge.reg2mem, !insn.addr !7147
  br label %dec_label_pc_104a5, !insn.addr !7147

dec_label_pc_10467:                               ; preds = %dec_label_pc_10434, %dec_label_pc_1042b
  %88 = zext i32 %44 to i64, !insn.addr !7121
  %89 = sext i32 %50 to i64, !insn.addr !7148
  %90 = call i64 @memcpy(i64 %14, i64 %26, i64 %89, i64 %88), !insn.addr !7149
  %91 = mul nsw i64 %89, -1370734243, !insn.addr !7150
  %92 = lshr i64 %91, ptrtoint (i32** @global_var_20 to i64), !insn.addr !7150
  %93 = trunc i64 %92 to i32, !insn.addr !7150
  %94 = sub i32 %93, %46, !insn.addr !7151
  %95 = ashr i32 %94, ptrtoint (i8** @global_var_7 to i32), !insn.addr !7152
  %96 = ashr i32 %50, ptrtoint (i8** @global_var_1f to i32), !insn.addr !7153
  %97 = sub i32 %95, %96, !insn.addr !7154
  %98 = call i64 @DTV_DecrypMultiTS.429(i64 %arg1, i64 %14, i32 %97, i64 %arg2), !insn.addr !7155
  store i64 %98, i64* %storemerge.reg2mem, !insn.addr !7155
  br label %dec_label_pc_104a5, !insn.addr !7155

dec_label_pc_104a5:                               ; preds = %dec_label_pc_10467, %dec_label_pc_1043d
  %storemerge.reload = load i64, i64* %storemerge.reg2mem
  store i32 ptrtoint (i32* @global_var_1 to i32), i32* %16, align 4, !insn.addr !7156
  ret i64 %storemerge.reload, !insn.addr !7157

dec_label_pc_104b4:                               ; preds = %dec_label_pc_102b3
  %99 = icmp eq i32 %17, 1, !insn.addr !7158
  %100 = icmp eq i1 %99, false, !insn.addr !7159
  %101 = add i64 %arg1, ptrtoint (i8** @global_var_30de4 to i64)
  %102 = inttoptr i64 %101 to i8*
  %103 = load i8, i8* %102, align 1
  %104 = icmp eq i8 %103, ptrtoint (i32* @global_var_1 to i8)
  %105 = icmp eq i1 %104, false
  br i1 %100, label %dec_label_pc_10662, label %dec_label_pc_104bd, !insn.addr !7159

dec_label_pc_104bd:                               ; preds = %dec_label_pc_104b4
  br i1 %105, label %dec_label_pc_10577, label %dec_label_pc_104ca, !insn.addr !7160

dec_label_pc_104ca:                               ; preds = %dec_label_pc_104bd
  %106 = add i64 %arg1, ptrtoint (i8** @global_var_30da1 to i64), !insn.addr !7161
  %107 = inttoptr i64 %106 to i8*, !insn.addr !7161
  %108 = load i8, i8* %107, align 1, !insn.addr !7161
  %109 = icmp eq i8 %108, 0, !insn.addr !7161
  %110 = icmp eq i1 %109, false, !insn.addr !7162
  br i1 %110, label %dec_label_pc_10577, label %dec_label_pc_104d7, !insn.addr !7162

dec_label_pc_104d7:                               ; preds = %dec_label_pc_104ca
  %111 = add i64 %arg1, ptrtoint (i32** @global_var_30d4c to i64), !insn.addr !7163
  %112 = inttoptr i64 %111 to i32*, !insn.addr !7163
  %113 = load i32, i32* %112, align 4, !insn.addr !7163
  %114 = sext i32 %113 to i64, !insn.addr !7163
  %115 = add i64 %arg1, ptrtoint (i32** @global_var_30d50 to i64), !insn.addr !7164
  %116 = inttoptr i64 %115 to i32*, !insn.addr !7164
  %117 = load i32, i32* %116, align 4, !insn.addr !7164
  %118 = sext i32 %117 to i64, !insn.addr !7164
  %119 = add i64 %arg1, 7500, !insn.addr !7165
  %120 = add i64 %119, %118, !insn.addr !7165
  %121 = call i64 @memcpy(i64 %14, i64 %120, i64 %114, i64 %1), !insn.addr !7166
  %122 = call i64 @USB_BulkStreamRead.537(i64 %6, i64 %10), !insn.addr !7167
  %123 = trunc i64 %122 to i32, !insn.addr !7168
  %124 = load i32, i32* %112, align 4, !insn.addr !7169
  %125 = add i32 %124, %123, !insn.addr !7169
  %126 = zext i32 %125 to i64, !insn.addr !7169
  %127 = add i64 %arg1, 586869, !insn.addr !7170
  %128 = inttoptr i64 %127 to i8*, !insn.addr !7170
  %129 = load i8, i8* %128, align 1, !insn.addr !7170
  %130 = icmp ne i8 %129, 0, !insn.addr !7171
  %131 = icmp eq i8 %129, 3, !insn.addr !7172
  %132 = icmp eq i1 %131, false, !insn.addr !7173
  %or.cond30 = icmp eq i1 %130, %132
  %.pre66 = ashr i32 %125, ptrtoint (i8** @global_var_1f to i32)
  br i1 %or.cond30, label %dec_label_pc_1054b, label %dec_label_pc_10530, !insn.addr !7174

dec_label_pc_10530:                               ; preds = %dec_label_pc_104d7
  %133 = zext i32 %.pre66 to i64, !insn.addr !7175
  %134 = mul i64 %133, 4294967296, !insn.addr !7175
  %135 = or i64 %134, %126, !insn.addr !7175
  %136 = sdiv i64 %135, 188, !insn.addr !7175
  %137 = trunc i64 %136 to i32, !insn.addr !7175
  %138 = srem i64 %135, 188, !insn.addr !7175
  %139 = trunc i64 %138 to i32, !insn.addr !7175
  %140 = call i64 @DTV_CleanEncFlag.479(i64 %14, i32 %137, i32 %139, i32 188), !insn.addr !7176
  br label %dec_label_pc_1054b, !insn.addr !7176

dec_label_pc_1054b:                               ; preds = %dec_label_pc_104d7, %dec_label_pc_10530
  %141 = sext i32 %125 to i64, !insn.addr !7177
  %142 = mul nsw i64 %141, -1370734243, !insn.addr !7177
  %143 = lshr i64 %142, ptrtoint (i32** @global_var_20 to i64), !insn.addr !7177
  %144 = trunc i64 %143 to i32, !insn.addr !7177
  %145 = add i32 %125, %144, !insn.addr !7178
  %146 = ashr i32 %145, ptrtoint (i8** @global_var_7 to i32), !insn.addr !7179
  %147 = sub i32 %146, %.pre66, !insn.addr !7180
  %148 = zext i32 %147 to i64, !insn.addr !7180
  %149 = call i64 @DTV_EncAES_MultiTS.146(i64 %arg1, i64 %14, i64 %148, i64 %arg2), !insn.addr !7181
  store i64 %126, i64* %r12.0.reg2mem, !insn.addr !7182
  store i64 %149, i64* %storemerge14.reg2mem, !insn.addr !7182
  br label %dec_label_pc_1061a, !insn.addr !7182

dec_label_pc_10577:                               ; preds = %dec_label_pc_104ca, %dec_label_pc_104bd
  %150 = add i64 %arg1, ptrtoint (i32** @global_var_30d4c to i64), !insn.addr !7183
  %151 = inttoptr i64 %150 to i32*, !insn.addr !7183
  %152 = load i32, i32* %151, align 4, !insn.addr !7183
  %153 = sext i32 %152 to i64, !insn.addr !7183
  %154 = add i64 %arg1, ptrtoint (i32** @global_var_30d50 to i64), !insn.addr !7184
  %155 = inttoptr i64 %154 to i32*, !insn.addr !7184
  %156 = load i32, i32* %155, align 4, !insn.addr !7184
  %157 = sext i32 %156 to i64, !insn.addr !7184
  %158 = add i64 %arg1, 7500, !insn.addr !7185
  %159 = add i64 %158, %157, !insn.addr !7185
  %160 = call i64 @memcpy(i64 %14, i64 %159, i64 %153, i64 %1), !insn.addr !7186
  %161 = load i32, i32* %151, align 4, !insn.addr !7187
  %162 = call i64 @USB_BulkStreamRead.537(i64 %6, i64 %10), !insn.addr !7188
  %163 = trunc i64 %162 to i32, !insn.addr !7189
  %164 = load i32, i32* %151, align 4, !insn.addr !7190
  %165 = add i32 %164, %163, !insn.addr !7190
  %166 = add i64 %arg1, 586869, !insn.addr !7191
  %167 = inttoptr i64 %166 to i8*, !insn.addr !7191
  %168 = load i8, i8* %167, align 1, !insn.addr !7191
  %169 = icmp ne i8 %168, 0, !insn.addr !7192
  %170 = icmp eq i8 %168, 3, !insn.addr !7193
  %171 = icmp eq i1 %170, false, !insn.addr !7194
  %or.cond32 = icmp eq i1 %169, %171
  br i1 %or.cond32, label %dec_label_pc_10577.dec_label_pc_105f3_crit_edge, label %dec_label_pc_105d0, !insn.addr !7195

dec_label_pc_10577.dec_label_pc_105f3_crit_edge:  ; preds = %dec_label_pc_10577
  %.pre51 = sext i32 %165 to i64, !insn.addr !7196
  %.pre52 = mul nsw i64 %.pre51, -1370734243, !insn.addr !7196
  %.pre54 = lshr i64 %.pre52, ptrtoint (i32** @global_var_20 to i64), !insn.addr !7196
  %.pre56 = trunc i64 %.pre54 to i32, !insn.addr !7196
  %.pre58 = add i32 %165, %.pre56, !insn.addr !7197
  %.pre60 = ashr i32 %.pre58, ptrtoint (i8** @global_var_7 to i32), !insn.addr !7198
  %.pre62 = ashr i32 %165, ptrtoint (i8** @global_var_1f to i32), !insn.addr !7199
  %.pre64 = sub i32 %.pre60, %.pre62, !insn.addr !7200
  store i32 %.pre64, i32* %.pre-phi65.reg2mem
  br label %dec_label_pc_105f3

dec_label_pc_105d0:                               ; preds = %dec_label_pc_10577
  %172 = sub i32 %11, %161, !insn.addr !7201
  %173 = sext i32 %165 to i64
  %174 = mul nsw i64 %173, -1370734243
  %175 = lshr i64 %174, ptrtoint (i32** @global_var_20 to i64)
  %176 = trunc i64 %175 to i32
  %177 = add i32 %165, %176
  %178 = ashr i32 %177, ptrtoint (i8** @global_var_7 to i32)
  %179 = ashr i32 %165, ptrtoint (i8** @global_var_1f to i32)
  %180 = sub i32 %178, %179
  %181 = call i64 @DTV_CleanEncFlag.479(i64 %14, i32 %180, i32 %177, i32 %172), !insn.addr !7202
  store i32 %180, i32* %.pre-phi65.reg2mem, !insn.addr !7202
  br label %dec_label_pc_105f3, !insn.addr !7202

dec_label_pc_105f3:                               ; preds = %dec_label_pc_10577.dec_label_pc_105f3_crit_edge, %dec_label_pc_105d0
  %182 = zext i32 %165 to i64, !insn.addr !7190
  %.pre-phi65.reload = load i32, i32* %.pre-phi65.reg2mem
  %183 = call i64 @DTV_DecrypMultiTS.429(i64 %arg1, i64 %14, i32 %.pre-phi65.reload, i64 %arg2), !insn.addr !7203
  store i64 %182, i64* %r12.0.reg2mem, !insn.addr !7203
  store i64 %183, i64* %storemerge14.reg2mem, !insn.addr !7203
  br label %dec_label_pc_1061a, !insn.addr !7203

dec_label_pc_1061a:                               ; preds = %dec_label_pc_105f3, %dec_label_pc_1054b
  %184 = trunc i64 %0 to i8
  %storemerge14.reload = load i64, i64* %storemerge14.reg2mem
  %185 = icmp eq i8 %184, 71, !insn.addr !7204
  %186 = icmp eq i1 %185, false, !insn.addr !7205
  store i64 %storemerge14.reload, i64* %rax.0.reg2mem, !insn.addr !7205
  br i1 %186, label %dec_label_pc_10644, label %dec_label_pc_10620, !insn.addr !7205

dec_label_pc_10620:                               ; preds = %dec_label_pc_1061a
  %r12.0.reload = load i64, i64* %r12.0.reg2mem
  %sext11 = mul i64 %r12.0.reload, 4294967296
  %187 = sdiv i64 %sext11, 4294967296, !insn.addr !7206
  %188 = mul nsw i64 %187, -1370734243, !insn.addr !7206
  %189 = lshr i64 %188, ptrtoint (i32** @global_var_20 to i64), !insn.addr !7206
  %190 = mul i64 %r12.0.reload, ptrtoint (i32* @global_var_1 to i64), !insn.addr !7207
  %191 = add i64 %189, %190, !insn.addr !7207
  %192 = trunc i64 %191 to i32, !insn.addr !7207
  %193 = ashr i32 %192, ptrtoint (i8** @global_var_7 to i32), !insn.addr !7208
  %194 = trunc i64 %r12.0.reload to i32, !insn.addr !7209
  %195 = ashr i32 %194, ptrtoint (i8** @global_var_1f to i32), !insn.addr !7210
  %196 = sub i32 %193, %195, !insn.addr !7211
  %197 = mul i32 %196, 188, !insn.addr !7212
  %198 = zext i32 %197 to i64, !insn.addr !7212
  %199 = icmp eq i32 %197, %194, !insn.addr !7213
  store i64 %198, i64* %rax.0.reg2mem, !insn.addr !7214
  br i1 %199, label %dec_label_pc_10653, label %dec_label_pc_10644, !insn.addr !7214

dec_label_pc_10644:                               ; preds = %dec_label_pc_10620, %dec_label_pc_1061a
  %rax.0.reload = load i64, i64* %rax.0.reg2mem
  store i32 0, i32* %16, align 4, !insn.addr !7215
  ret i64 %rax.0.reload, !insn.addr !7216

dec_label_pc_10653:                               ; preds = %dec_label_pc_10620
  store i32 ptrtoint (i32* @global_var_2 to i32), i32* %16, align 4, !insn.addr !7217
  ret i64 %198, !insn.addr !7218

dec_label_pc_10662:                               ; preds = %dec_label_pc_104b4
  %200 = inttoptr i64 %14 to i8*, !insn.addr !7219
  br i1 %105, label %dec_label_pc_10771, label %dec_label_pc_1066f, !insn.addr !7220

dec_label_pc_1066f:                               ; preds = %dec_label_pc_10662
  %201 = add i64 %arg1, ptrtoint (i8** @global_var_30da1 to i64), !insn.addr !7221
  %202 = inttoptr i64 %201 to i8*, !insn.addr !7221
  %203 = load i8, i8* %202, align 1, !insn.addr !7221
  %204 = icmp eq i8 %203, 0, !insn.addr !7221
  %205 = icmp eq i1 %204, false, !insn.addr !7222
  br i1 %205, label %dec_label_pc_10771, label %dec_label_pc_1067c, !insn.addr !7222

dec_label_pc_1067c:                               ; preds = %dec_label_pc_1066f
  %206 = add i64 %arg1, 588472, !insn.addr !7223
  %207 = inttoptr i64 %206 to i32*, !insn.addr !7223
  store i32 0, i32* %207, align 4, !insn.addr !7223
  %208 = call i64 @USB_BulkStreamRead.537(i64 %6, i64 %10), !insn.addr !7224
  %209 = add i64 %14, 184, !insn.addr !7225
  store i64 %arg1, i64* %rax.1.reg2mem, !insn.addr !7226
  store i64 %14, i64* %r12.1.reg2mem, !insn.addr !7226
  br label %dec_label_pc_106ab, !insn.addr !7226

dec_label_pc_106ab:                               ; preds = %dec_label_pc_106ab, %dec_label_pc_1067c
  %r12.1.reload = load i64, i64* %r12.1.reg2mem
  %rax.1.reload = load i64, i64* %rax.1.reg2mem
  %210 = add i64 %r12.1.reload, ptrtoint (i16* @global_var_4 to i64), !insn.addr !7227
  %211 = inttoptr i64 %210 to i8*, !insn.addr !7227
  %212 = load i8, i8* %211, align 1, !insn.addr !7227
  %213 = add i64 %rax.1.reload, 7288, !insn.addr !7228
  %214 = inttoptr i64 %213 to i8*, !insn.addr !7228
  store i8 %212, i8* %214, align 1, !insn.addr !7228
  %215 = add i64 %r12.1.reload, ptrtoint (i32* @global_var_1 to i64), !insn.addr !7229
  %216 = add i64 %rax.1.reload, ptrtoint (i32* @global_var_1 to i64), !insn.addr !7230
  %217 = icmp eq i64 %215, %209, !insn.addr !7231
  %218 = icmp eq i1 %217, false, !insn.addr !7232
  store i64 %216, i64* %rax.1.reg2mem, !insn.addr !7232
  store i64 %215, i64* %r12.1.reg2mem, !insn.addr !7232
  br i1 %218, label %dec_label_pc_106ab, label %dec_label_pc_106c4, !insn.addr !7232

dec_label_pc_106c4:                               ; preds = %dec_label_pc_106ab
  %219 = and i64 %208, 4294967295, !insn.addr !7233
  %220 = add i64 %arg1, 586869, !insn.addr !7234
  %221 = inttoptr i64 %220 to i8*, !insn.addr !7234
  %222 = load i8, i8* %221, align 1, !insn.addr !7234
  %223 = icmp ne i8 %222, 0, !insn.addr !7235
  %224 = icmp eq i8 %222, 3, !insn.addr !7236
  %225 = icmp eq i1 %224, false, !insn.addr !7237
  %or.cond34 = icmp eq i1 %223, %225
  store i64 %209, i64* %rcx.0.reg2mem, !insn.addr !7238
  br i1 %or.cond34, label %dec_label_pc_106ee, label %dec_label_pc_106d3, !insn.addr !7238

dec_label_pc_106d3:                               ; preds = %dec_label_pc_106c4
  %226 = trunc i64 %208 to i32, !insn.addr !7239
  %227 = ashr i32 %226, ptrtoint (i8** @global_var_1f to i32), !insn.addr !7240
  %228 = zext i32 %227 to i64, !insn.addr !7241
  %229 = mul i64 %228, 4294967296, !insn.addr !7241
  %230 = or i64 %229, %219, !insn.addr !7241
  %231 = sdiv i64 %230, 188, !insn.addr !7241
  %232 = trunc i64 %231 to i32, !insn.addr !7241
  %233 = srem i64 %230, 188, !insn.addr !7241
  %234 = trunc i64 %233 to i32, !insn.addr !7241
  %235 = call i64 @DTV_CleanEncFlag.479(i64 %14, i32 %232, i32 %234, i32 188), !insn.addr !7242
  store i64 188, i64* %rcx.0.reg2mem, !insn.addr !7242
  br label %dec_label_pc_106ee, !insn.addr !7242

dec_label_pc_106ee:                               ; preds = %dec_label_pc_106c4, %dec_label_pc_106d3
  %rcx.0.reload = load i64, i64* %rcx.0.reg2mem
  %236 = load i8, i8* %200, align 1, !insn.addr !7243
  %237 = sext i8 %236 to i32, !insn.addr !7244
  store i32 %237, i32* %stack_var_-57, align 4, !insn.addr !7244
  %238 = icmp eq i8 %236, 71, !insn.addr !7245
  %239 = icmp eq i1 %238, false, !insn.addr !7246
  store i64 %rcx.0.reload, i64* %rcx.1.reg2mem, !insn.addr !7246
  br i1 %239, label %dec_label_pc_10762, label %dec_label_pc_106fc, !insn.addr !7246

dec_label_pc_106fc:                               ; preds = %dec_label_pc_106ee
  %240 = trunc i64 %208 to i32, !insn.addr !7247
  %241 = ashr i32 %240, ptrtoint (i8** @global_var_1f to i32), !insn.addr !7248
  %242 = zext i32 %241 to i64, !insn.addr !7249
  %243 = mul i64 %242, 4294967296, !insn.addr !7249
  %244 = or i64 %243, %219, !insn.addr !7249
  %245 = srem i64 %244, 188, !insn.addr !7249
  %246 = trunc i64 %245 to i32, !insn.addr !7250
  %247 = icmp eq i32 %246, 0, !insn.addr !7250
  %248 = icmp eq i1 %247, false, !insn.addr !7251
  store i64 188, i64* %rcx.1.reg2mem, !insn.addr !7251
  br i1 %248, label %dec_label_pc_10762, label %dec_label_pc_10710, !insn.addr !7251

dec_label_pc_10710:                               ; preds = %dec_label_pc_106fc
  %249 = sdiv i64 %244, 188, !insn.addr !7252
  %250 = and i64 %249, 4294967295, !insn.addr !7253
  %251 = call i64 @DTV_EncAES_MultiTS.146(i64 %arg1, i64 %14, i64 %250, i64 %arg2), !insn.addr !7254
  %252 = add i64 %arg2, 184, !insn.addr !7255
  store i64 %arg2, i64* %rax.2.reg2mem, !insn.addr !7255
  store i64 %arg1, i64* %r13.1.reg2mem, !insn.addr !7255
  br label %dec_label_pc_10736, !insn.addr !7255

dec_label_pc_10736:                               ; preds = %dec_label_pc_10736, %dec_label_pc_10710
  %r13.1.reload = load i64, i64* %r13.1.reg2mem
  %rax.2.reload = load i64, i64* %rax.2.reg2mem
  %253 = add i64 %rax.2.reload, ptrtoint (i16* @global_var_4 to i64), !insn.addr !7256
  %254 = inttoptr i64 %253 to i8*, !insn.addr !7256
  %255 = load i8, i8* %254, align 1, !insn.addr !7256
  %256 = add i64 %r13.1.reload, 585194, !insn.addr !7257
  %257 = inttoptr i64 %256 to i8*, !insn.addr !7257
  store i8 %255, i8* %257, align 1, !insn.addr !7257
  %258 = add i64 %rax.2.reload, ptrtoint (i32* @global_var_1 to i64), !insn.addr !7258
  %259 = add i64 %r13.1.reload, ptrtoint (i32* @global_var_1 to i64), !insn.addr !7259
  %260 = icmp eq i64 %258, %252, !insn.addr !7260
  %261 = icmp eq i1 %260, false, !insn.addr !7261
  store i64 %258, i64* %rax.2.reg2mem, !insn.addr !7261
  store i64 %259, i64* %r13.1.reg2mem, !insn.addr !7261
  br i1 %261, label %dec_label_pc_10736, label %dec_label_pc_1074e, !insn.addr !7261

dec_label_pc_1074e:                               ; preds = %dec_label_pc_10736
  store i32 ptrtoint (i32* @global_var_1 to i32), i32* %207, align 4, !insn.addr !7262
  %262 = load i8, i8* %200, align 1, !insn.addr !7263
  %263 = sext i8 %262 to i32, !insn.addr !7264
  store i32 %263, i32* %stack_var_-57, align 4, !insn.addr !7264
  store i64 %252, i64* %rcx.1.reg2mem, !insn.addr !7264
  br label %dec_label_pc_10762, !insn.addr !7264

dec_label_pc_10762:                               ; preds = %dec_label_pc_1074e, %dec_label_pc_106fc, %dec_label_pc_106ee
  %rcx.1.reload = load i64, i64* %rcx.1.reg2mem
  store i32 ptrtoint (i32* @global_var_1 to i32), i32* %207, align 4, !insn.addr !7265
  %.pre = load i32, i32* %stack_var_-57, align 4
  store i32 %.pre, i32* %.reg2mem, !insn.addr !7266
  store i64 %rcx.1.reload, i64* %rcx.2.reg2mem, !insn.addr !7266
  store i64 %219, i64* %r15.0.reg2mem, !insn.addr !7266
  br label %dec_label_pc_10816, !insn.addr !7266

dec_label_pc_10771:                               ; preds = %dec_label_pc_1066f, %dec_label_pc_10662
  %264 = call i64 @USB_BulkStreamRead.537(i64 %6, i64 %10), !insn.addr !7267
  %265 = and i64 %264, 4294967295, !insn.addr !7268
  %266 = add i64 %arg1, 586869, !insn.addr !7269
  %267 = inttoptr i64 %266 to i8*, !insn.addr !7269
  %268 = load i8, i8* %267, align 1, !insn.addr !7269
  %269 = icmp ne i8 %268, 0, !insn.addr !7270
  %270 = icmp eq i8 %268, 3, !insn.addr !7271
  %271 = icmp eq i1 %270, false, !insn.addr !7272
  %or.cond36 = icmp eq i1 %269, %271
  br i1 %or.cond36, label %dec_label_pc_107b9, label %dec_label_pc_10797, !insn.addr !7273

dec_label_pc_10797:                               ; preds = %dec_label_pc_10771
  %sext25 = mul i64 %264, 4294967296
  %272 = sdiv i64 %sext25, 4294967296, !insn.addr !7274
  %273 = mul nsw i64 %272, -1370734243, !insn.addr !7274
  %274 = lshr i64 %273, ptrtoint (i32** @global_var_20 to i64), !insn.addr !7274
  %275 = mul i64 %265, ptrtoint (i32* @global_var_1 to i64), !insn.addr !7275
  %276 = add i64 %274, %275, !insn.addr !7275
  %277 = trunc i64 %276 to i32, !insn.addr !7275
  %278 = ashr i32 %277, ptrtoint (i8** @global_var_7 to i32), !insn.addr !7276
  %279 = trunc i64 %264 to i32, !insn.addr !7277
  %280 = ashr i32 %279, ptrtoint (i8** @global_var_1f to i32), !insn.addr !7278
  %281 = sub i32 %278, %280, !insn.addr !7279
  %282 = trunc i64 %274 to i32, !insn.addr !7280
  %283 = call i64 @DTV_CleanEncFlag.479(i64 %14, i32 %281, i32 %282, i32 %11), !insn.addr !7280
  br label %dec_label_pc_107b9, !insn.addr !7280

dec_label_pc_107b9:                               ; preds = %dec_label_pc_10771, %dec_label_pc_10797
  %284 = load i8, i8* %200, align 1, !insn.addr !7281
  %285 = sext i8 %284 to i32, !insn.addr !7282
  store i32 %285, i32* %stack_var_-57, align 4, !insn.addr !7282
  %286 = icmp eq i8 %284, 71, !insn.addr !7283
  %287 = icmp eq i1 %286, false, !insn.addr !7284
  store i64 %3, i64* %rcx.3.reg2mem, !insn.addr !7284
  store i64 %265, i64* %r15.1.reg2mem, !insn.addr !7284
  br i1 %287, label %dec_label_pc_10844, label %dec_label_pc_107c7, !insn.addr !7284

dec_label_pc_107c7:                               ; preds = %dec_label_pc_107b9
  %sext26 = mul i64 %264, 4294967296
  %288 = sdiv i64 %sext26, 4294967296, !insn.addr !7285
  %289 = mul nsw i64 %288, -1370734243, !insn.addr !7285
  %290 = lshr i64 %289, ptrtoint (i32** @global_var_20 to i64), !insn.addr !7285
  %291 = mul i64 %265, ptrtoint (i32* @global_var_1 to i64), !insn.addr !7286
  %292 = add i64 %290, %291, !insn.addr !7286
  %293 = trunc i64 %292 to i32, !insn.addr !7286
  %294 = ashr i32 %293, ptrtoint (i8** @global_var_7 to i32), !insn.addr !7287
  %295 = trunc i64 %264 to i32, !insn.addr !7288
  %296 = ashr i32 %295, ptrtoint (i8** @global_var_1f to i32), !insn.addr !7289
  %297 = zext i32 %296 to i64, !insn.addr !7289
  %298 = sub i32 %294, %296, !insn.addr !7290
  %299 = mul i32 %298, -188
  %300 = sub i32 0, %295, !insn.addr !7291
  %301 = icmp eq i32 %299, %300, !insn.addr !7291
  %302 = icmp eq i1 %301, false, !insn.addr !7292
  store i64 %297, i64* %rcx.3.reg2mem, !insn.addr !7292
  store i64 %265, i64* %r15.1.reg2mem, !insn.addr !7292
  br i1 %302, label %dec_label_pc_10844, label %dec_label_pc_107eb, !insn.addr !7292

dec_label_pc_107eb:                               ; preds = %dec_label_pc_107c7
  %303 = trunc i64 %290 to i32, !insn.addr !7293
  %304 = add i32 %303, %295, !insn.addr !7294
  %305 = ashr i32 %304, ptrtoint (i8** @global_var_7 to i32), !insn.addr !7295
  %306 = sub i32 %305, %296, !insn.addr !7296
  %307 = call i64 @DTV_DecrypMultiTS.429(i64 %arg1, i64 %14, i32 %306, i64 %arg2), !insn.addr !7297
  %308 = load i8, i8* %200, align 1, !insn.addr !7298
  %309 = sext i8 %308 to i32, !insn.addr !7299
  store i32 %309, i32* %stack_var_-57, align 4, !insn.addr !7299
  store i32 %309, i32* %.reg2mem, !insn.addr !7299
  store i64 %arg2, i64* %rcx.2.reg2mem, !insn.addr !7299
  store i64 %265, i64* %r15.0.reg2mem, !insn.addr !7299
  br label %dec_label_pc_10816, !insn.addr !7299

dec_label_pc_10816:                               ; preds = %dec_label_pc_107eb, %dec_label_pc_10762
  %r15.0.reload = load i64, i64* %r15.0.reg2mem
  %rcx.2.reload = load i64, i64* %rcx.2.reg2mem
  %.reload = load i32, i32* %.reg2mem, !insn.addr !7300
  %310 = trunc i32 %.reload to i8, !insn.addr !7300
  %311 = icmp eq i8 %310, 71, !insn.addr !7300
  %312 = icmp eq i1 %311, false, !insn.addr !7301
  store i64 %rcx.2.reload, i64* %rcx.3.reg2mem, !insn.addr !7301
  store i64 %r15.0.reload, i64* %r15.1.reg2mem, !insn.addr !7301
  br i1 %312, label %dec_label_pc_10844, label %dec_label_pc_1081c, !insn.addr !7301

dec_label_pc_1081c:                               ; preds = %dec_label_pc_10816
  %313 = trunc i64 %r15.0.reload to i32, !insn.addr !7302
  %314 = ashr i32 %313, ptrtoint (i8** @global_var_1f to i32), !insn.addr !7303
  %315 = zext i32 %314 to i64, !insn.addr !7303
  store i64 %315, i64* %rcx.3.reg2mem, !insn.addr !7304
  store i64 %r15.0.reload, i64* %r15.1.reg2mem, !insn.addr !7304
  br label %dec_label_pc_10844, !insn.addr !7304

dec_label_pc_10844:                               ; preds = %dec_label_pc_1081c, %dec_label_pc_10816, %dec_label_pc_107c7, %dec_label_pc_107b9
  %r15.1.reload = load i64, i64* %r15.1.reg2mem
  %rcx.3.reload = load i64, i64* %rcx.3.reg2mem
  %316 = add i64 %arg1, 7500, !insn.addr !7305
  %sext16 = mul i64 %r15.1.reload, 4294967296
  %317 = sdiv i64 %sext16, 4294967296, !insn.addr !7306
  %318 = call i64 @memcpy(i64 %316, i64 %14, i64 %317, i64 %rcx.3.reload), !insn.addr !7307
  %319 = add nsw i64 %r15.1.reload, 4294965792, !insn.addr !7308
  %320 = and i64 %319, 4294967295, !insn.addr !7308
  %321 = trunc i64 %319 to i32, !insn.addr !7309
  %322 = icmp slt i32 %321, 1
  store i64 0, i64* %r13.2.reg2mem, !insn.addr !7310
  br i1 %322, label %dec_label_pc_108a3, label %dec_label_pc_1087a, !insn.addr !7310

dec_label_pc_1087a:                               ; preds = %dec_label_pc_10844, %dec_label_pc_10893
  %r13.2.reload = load i64, i64* %r13.2.reg2mem
  %sext17 = mul i64 %r13.2.reload, 4294967296
  %323 = sdiv i64 %sext17, 4294967296, !insn.addr !7311
  %324 = add i64 %323, %316, !insn.addr !7312
  %325 = call i64 @DTV_CheckSync.253(i64 %324, i64* bitcast (i8* @global_var_8 to i64*)), !insn.addr !7313
  %326 = trunc i64 %325 to i32, !insn.addr !7314
  %327 = icmp eq i32 %326, 0, !insn.addr !7314
  %328 = icmp eq i1 %327, false, !insn.addr !7315
  br i1 %328, label %dec_label_pc_1089e, label %dec_label_pc_10893, !insn.addr !7315

dec_label_pc_10893:                               ; preds = %dec_label_pc_1087a
  %329 = add nuw nsw i64 %r13.2.reload, zext (i32 ptrtoint (i32* @global_var_1 to i32) to i64), !insn.addr !7316
  %330 = and i64 %329, 4294967295, !insn.addr !7316
  %331 = icmp ugt i64 %320, %330, !insn.addr !7317
  store i64 %330, i64* %r13.2.reg2mem, !insn.addr !7317
  br i1 %331, label %dec_label_pc_1087a, label %dec_label_pc_108a3, !insn.addr !7317

dec_label_pc_1089e:                               ; preds = %dec_label_pc_1087a
  %332 = icmp ult i64 %r13.2.reload, %320, !insn.addr !7318
  br i1 %332, label %dec_label_pc_108c8, label %dec_label_pc_108a3, !insn.addr !7318

dec_label_pc_108a3:                               ; preds = %dec_label_pc_10893, %dec_label_pc_1089e, %dec_label_pc_10844
  store i32 sext (i8 ptrtoint (i32* @global_var_2 to i8) to i32), i32* %stack_var_-57, align 4, !insn.addr !7319
  %333 = bitcast i32* %stack_var_-57 to i8*, !insn.addr !7320
  %334 = call i64 @DTV_SaveTSReSync.439(i64 %arg1, i8* nonnull %333), !insn.addr !7320
  store i32 0, i32* %16, align 4, !insn.addr !7321
  ret i64 %334, !insn.addr !7322

dec_label_pc_108c8:                               ; preds = %dec_label_pc_1089e
  %335 = sub nsw i64 %r15.1.reload, %r13.2.reload, !insn.addr !7323
  %336 = and i64 %335, 4294967295, !insn.addr !7323
  %sext18 = mul i64 %335, 4294967296
  %337 = sdiv i64 %sext18, 4294967296, !insn.addr !7324
  %338 = mul nsw i64 %337, -1370734243, !insn.addr !7324
  %339 = lshr i64 %338, ptrtoint (i32** @global_var_20 to i64), !insn.addr !7324
  %340 = mul i64 %336, ptrtoint (i32* @global_var_1 to i64), !insn.addr !7325
  %341 = add i64 %339, %340, !insn.addr !7325
  %342 = trunc i64 %341 to i32, !insn.addr !7325
  %343 = ashr i32 %342, ptrtoint (i8** @global_var_7 to i32), !insn.addr !7326
  %344 = trunc i64 %335 to i32, !insn.addr !7327
  %345 = ashr i32 %344, ptrtoint (i8** @global_var_1f to i32), !insn.addr !7328
  %346 = sub i32 %343, %345, !insn.addr !7329
  %347 = mul i32 %346, -188
  %348 = add i32 %347, %344, !insn.addr !7330
  %349 = add i64 %arg1, ptrtoint (i32** @global_var_30d4c to i64), !insn.addr !7331
  %350 = inttoptr i64 %349 to i32*, !insn.addr !7331
  store i32 %348, i32* %350, align 4, !insn.addr !7331
  %351 = sub i32 0, %347, !insn.addr !7332
  %352 = trunc i64 %r15.1.reload to i32, !insn.addr !7333
  %353 = sub i32 %352, %348, !insn.addr !7333
  %354 = add i64 %arg1, ptrtoint (i32** @global_var_30d50 to i64), !insn.addr !7334
  %355 = inttoptr i64 %354 to i32*, !insn.addr !7334
  store i32 %353, i32* %355, align 4, !insn.addr !7334
  %356 = load i8, i8* %102, align 1, !insn.addr !7335
  %357 = icmp eq i8 %356, ptrtoint (i32* @global_var_1 to i8), !insn.addr !7335
  %358 = icmp eq i1 %357, false, !insn.addr !7336
  br i1 %358, label %dec_label_pc_10947, label %dec_label_pc_1090e, !insn.addr !7336

dec_label_pc_1090e:                               ; preds = %dec_label_pc_108c8
  %359 = add i64 %arg1, ptrtoint (i8** @global_var_30da1 to i64), !insn.addr !7337
  %360 = inttoptr i64 %359 to i8*, !insn.addr !7337
  %361 = load i8, i8* %360, align 1, !insn.addr !7337
  %362 = icmp eq i8 %361, 0, !insn.addr !7337
  %363 = icmp eq i1 %362, false, !insn.addr !7338
  br i1 %363, label %dec_label_pc_10947, label %dec_label_pc_10917, !insn.addr !7338

dec_label_pc_10917:                               ; preds = %dec_label_pc_1090e
  %364 = sext i32 %351 to i64, !insn.addr !7339
  %365 = mul nsw i64 %364, -1370734243, !insn.addr !7339
  %366 = lshr i64 %365, ptrtoint (i32** @global_var_20 to i64), !insn.addr !7339
  %367 = trunc i64 %366 to i32, !insn.addr !7339
  %368 = sub i32 %367, %347, !insn.addr !7340
  %369 = ashr i32 %368, ptrtoint (i8** @global_var_7 to i32), !insn.addr !7341
  %370 = ashr i32 %351, ptrtoint (i8** @global_var_1f to i32), !insn.addr !7342
  %371 = sub i32 %369, %370, !insn.addr !7343
  %372 = zext i32 %371 to i64, !insn.addr !7343
  %373 = call i64 @DTV_EncAES_MultiTS.146(i64 %arg1, i64 %324, i64 %372, i64 %arg2), !insn.addr !7344
  store i64 %373, i64* %storemerge24.reg2mem, !insn.addr !7345
  br label %dec_label_pc_10981, !insn.addr !7345

dec_label_pc_10947:                               ; preds = %dec_label_pc_1090e, %dec_label_pc_108c8
  %374 = zext i32 %345 to i64, !insn.addr !7328
  %375 = sext i32 %351 to i64, !insn.addr !7346
  %376 = call i64 @memcpy(i64 %14, i64 %324, i64 %375, i64 %374), !insn.addr !7347
  %377 = mul nsw i64 %375, -1370734243, !insn.addr !7348
  %378 = lshr i64 %377, ptrtoint (i32** @global_var_20 to i64), !insn.addr !7348
  %379 = trunc i64 %378 to i32, !insn.addr !7348
  %380 = sub i32 %379, %347, !insn.addr !7349
  %381 = ashr i32 %380, ptrtoint (i8** @global_var_7 to i32), !insn.addr !7350
  %382 = ashr i32 %351, ptrtoint (i8** @global_var_1f to i32), !insn.addr !7351
  %383 = sub i32 %381, %382, !insn.addr !7352
  %384 = call i64 @DTV_DecrypMultiTS.429(i64 %arg1, i64 %14, i32 %383, i64 %arg2), !insn.addr !7353
  store i64 %384, i64* %storemerge24.reg2mem, !insn.addr !7353
  br label %dec_label_pc_10981, !insn.addr !7353

dec_label_pc_10981:                               ; preds = %dec_label_pc_10947, %dec_label_pc_10917
  %storemerge24.reload = load i64, i64* %storemerge24.reg2mem
  store i32 ptrtoint (i32* @global_var_1 to i32), i32* %16, align 4, !insn.addr !7354
  ret i64 %storemerge24.reload, !insn.addr !7355
}

define i32 @DTV_StreamThreadRun(i64 %pTnim) local_unnamed_addr {
dec_label_pc_1099a:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = trunc i64 %0 to i32
  ret i32 %1
}

define i64 @DTV_StreamThreadRun.284(i64 %arg1) local_unnamed_addr {
dec_label_pc_109ca:
  %rax.1.reg2mem = alloca i64, !insn.addr !7356
  %rax.0.reg2mem = alloca i64, !insn.addr !7356
  %storemerge1.reg2mem = alloca i64, !insn.addr !7356
  %0 = call i64 @mcount(), !insn.addr !7357
  %1 = add i64 %arg1, 7480, !insn.addr !7358
  %2 = inttoptr i64 %1 to i64*, !insn.addr !7358
  %3 = load i64, i64* %2, align 8, !insn.addr !7358
  %4 = add i64 %arg1, 7472, !insn.addr !7359
  %5 = inttoptr i64 %4 to i8*, !insn.addr !7359
  %6 = load i8, i8* %5, align 1, !insn.addr !7359
  %7 = zext i8 %6 to i64, !insn.addr !7359
  %8 = add i64 %3, 22872, !insn.addr !7360
  %9 = add i64 %8, %7, !insn.addr !7360
  %10 = inttoptr i64 %9 to i8*, !insn.addr !7360
  store i8 0, i8* %10, align 1, !insn.addr !7360
  %11 = add i64 %arg1, 7492, !insn.addr !7361
  %12 = inttoptr i64 %11 to i32*, !insn.addr !7361
  %13 = load i32, i32* %12, align 4, !insn.addr !7361
  %14 = icmp eq i32 %13, 1, !insn.addr !7361
  %15 = icmp eq i1 %14, false, !insn.addr !7362
  %16 = add i64 %arg1, ptrtoint (i64* @global_var_30d58 to i64)
  %17 = inttoptr i64 %16 to i64*
  br i1 %15, label %dec_label_pc_10a47, label %dec_label_pc_10a11, !insn.addr !7362

dec_label_pc_10a11:                               ; preds = %dec_label_pc_109ca
  store i64 128, i64* %17, align 8, !insn.addr !7363
  %18 = call i64 @USB_BulkStreamStart.377(i64 %3, i64 %7, i64 %arg1, i64 128, i64 18800), !insn.addr !7364
  store i64 %18, i64* %storemerge1.reg2mem, !insn.addr !7365
  br label %dec_label_pc_10a77, !insn.addr !7365

dec_label_pc_10a47:                               ; preds = %dec_label_pc_109ca
  store i64 ptrtoint (i8* @global_var_8 to i64), i64* %17, align 8, !insn.addr !7366
  %19 = call i64 @USB_BulkStreamStart.377(i64 %3, i64 %7, i64 %arg1, i64 ptrtoint (i8* @global_var_8 to i64), i64 18800), !insn.addr !7367
  store i64 %19, i64* %storemerge1.reg2mem, !insn.addr !7368
  br label %dec_label_pc_10a77, !insn.addr !7368

dec_label_pc_10a77:                               ; preds = %dec_label_pc_10a47, %dec_label_pc_10a11
  %storemerge1.reload = load i64, i64* %storemerge1.reg2mem
  %20 = trunc i64 %storemerge1.reload to i32, !insn.addr !7369
  %21 = icmp eq i32 %20, ptrtoint (i32* @global_var_1 to i32), !insn.addr !7369
  %22 = icmp eq i1 %21, false, !insn.addr !7370
  store i64 %storemerge1.reload, i64* %rax.1.reg2mem, !insn.addr !7370
  br i1 %22, label %dec_label_pc_10aa0, label %dec_label_pc_10a7d, !insn.addr !7370

dec_label_pc_10a7d:                               ; preds = %dec_label_pc_10a77
  %23 = add i64 %arg1, ptrtoint (i8** @global_var_30d60 to i64), !insn.addr !7371
  %24 = inttoptr i64 %23 to i8*, !insn.addr !7371
  %25 = load i8, i8* %24, align 1, !insn.addr !7371
  %26 = icmp eq i8 %25, ptrtoint (i32* @global_var_1 to i8), !insn.addr !7371
  store i64 %storemerge1.reload, i64* %rax.0.reg2mem, !insn.addr !7372
  br i1 %26, label %dec_label_pc_10a96, label %dec_label_pc_10a86, !insn.addr !7372

dec_label_pc_10a86:                               ; preds = %dec_label_pc_10a7d
  %27 = call i64 @USB_FilterStart_Stop.481(i64 %3, i64 %7), !insn.addr !7373
  store i64 %27, i64* %rax.0.reg2mem, !insn.addr !7373
  br label %dec_label_pc_10a96, !insn.addr !7373

dec_label_pc_10a96:                               ; preds = %dec_label_pc_10a86, %dec_label_pc_10a7d
  %rax.0.reload = load i64, i64* %rax.0.reg2mem
  %28 = add i64 %arg1, 7496, !insn.addr !7374
  %29 = inttoptr i64 %28 to i32*, !insn.addr !7374
  store i32 0, i32* %29, align 4, !insn.addr !7374
  store i64 %rax.0.reload, i64* %rax.1.reg2mem, !insn.addr !7374
  br label %dec_label_pc_10aa0, !insn.addr !7374

dec_label_pc_10aa0:                               ; preds = %dec_label_pc_10a96, %dec_label_pc_10a77
  %rax.1.reload = load i64, i64* %rax.1.reg2mem
  ret i64 %rax.1.reload, !insn.addr !7374
}

define i32 @DTV_GetTunerSignalLevel(i64 %pTnim, i8* %SNR, i64* %IF_AGC) local_unnamed_addr {
dec_label_pc_10aa6:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = call i64 @__decompiler_undefined_function_0()
  %2 = call i64 @__decompiler_undefined_function_0()
  %3 = call i64 @__decompiler_undefined_function_0()
  %rax = alloca i64, align 8
  %4 = ptrtoint i64* %IF_AGC to i64
  %5 = ptrtoint i8* %SNR to i64
  %6 = mul i64 %3, ptrtoint (i32* @global_var_1 to i64), !insn.addr !7375
  %7 = add i64 %1, -66, !insn.addr !7375
  %8 = add i64 %7, %6, !insn.addr !7375
  %9 = inttoptr i64 %8 to i8*, !insn.addr !7375
  %10 = load i8, i8* %9, align 1, !insn.addr !7375
  %11 = lshr i64 %4, ptrtoint (i8* @global_var_8 to i64), !insn.addr !7375
  %12 = trunc i64 %11 to i8, !insn.addr !7375
  %13 = add i8 %10, %12, !insn.addr !7375
  store i8 %13, i8* %9, align 1, !insn.addr !7375
  %14 = bitcast i64* %rax to i32*
  %15 = load i32, i32* %14, align 8, !insn.addr !7376
  %16 = load i64, i64* %rax, align 8
  %17 = trunc i64 %16 to i32, !insn.addr !7376
  %18 = add i32 %15, %17, !insn.addr !7376
  %19 = inttoptr i64 %16 to i32*, !insn.addr !7376
  store i32 %18, i32* %19, align 4, !insn.addr !7376
  %20 = bitcast i64* %rax to i8*
  %21 = load i8, i8* %20, align 8, !insn.addr !7377
  %22 = load i64, i64* %rax, align 8
  %23 = trunc i64 %22 to i8, !insn.addr !7377
  %24 = add i8 %21, %23, !insn.addr !7377
  %25 = inttoptr i64 %22 to i8*, !insn.addr !7377
  store i8 %24, i8* %25, align 1, !insn.addr !7377
  %26 = call i64 @DTV_StartStop_Enc.572(i64 %2, i64 %5), !insn.addr !7378
  %27 = trunc i64 %0 to i32, !insn.addr !7379
  ret i32 %27, !insn.addr !7380
}

define i64 @DTV_GetTunerSignalLevel.542(i64 %arg1, i64 %arg2, i64 %arg3) local_unnamed_addr {
dec_label_pc_10ad6:
  %0 = call i64 @mcount(), !insn.addr !7381
  %1 = add i64 %arg1, ptrtoint (i8** @global_var_30d60 to i64), !insn.addr !7382
  %2 = inttoptr i64 %1 to i8*, !insn.addr !7382
  %3 = load i8, i8* %2, align 1, !insn.addr !7382
  %4 = icmp eq i8 %3, 0, !insn.addr !7382
  br i1 %4, label %dec_label_pc_10b30, label %dec_label_pc_10b0f, !insn.addr !7383

dec_label_pc_10b0f:                               ; preds = %dec_label_pc_10ad6
  %5 = icmp eq i64 %arg2, 0, !insn.addr !7384
  br i1 %5, label %dec_label_pc_10b17, label %dec_label_pc_10b14, !insn.addr !7385

dec_label_pc_10b14:                               ; preds = %dec_label_pc_10b0f
  %6 = inttoptr i64 %arg2 to i8*, !insn.addr !7386
  store i8 0, i8* %6, align 1, !insn.addr !7386
  br label %dec_label_pc_10b17, !insn.addr !7386

dec_label_pc_10b17:                               ; preds = %dec_label_pc_10b14, %dec_label_pc_10b0f
  %7 = inttoptr i64 %arg3 to i64*, !insn.addr !7387
  store i64 0, i64* %7, align 8, !insn.addr !7387
  ret i64 ptrtoint (i32* @global_var_1 to i64), !insn.addr !7388

dec_label_pc_10b30:                               ; preds = %dec_label_pc_10ad6
  ret i64 4294967286, !insn.addr !7389
}

define i32 @DTV_TunerLockCheck(i64 %pTnim) local_unnamed_addr {
dec_label_pc_10b34:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = call i64 @__decompiler_undefined_function_0()
  %2 = call i64 @__decompiler_undefined_function_0()
  %3 = call i64 @__decompiler_undefined_function_0()
  %4 = add i64 %2, -120, !insn.addr !7390
  %5 = inttoptr i64 %4 to i8*, !insn.addr !7390
  %6 = load i8, i8* %5, align 1, !insn.addr !7390
  %7 = trunc i64 %3 to i8, !insn.addr !7390
  %8 = add i8 %6, %7, !insn.addr !7390
  store i8 %8, i8* %5, align 1, !insn.addr !7390
  %9 = icmp eq i64 %0, 0, !insn.addr !7391
  br i1 %9, label %dec_label_pc_10b56, label %dec_label_pc_10b3e, !insn.addr !7392

dec_label_pc_10b3e:                               ; preds = %dec_label_pc_10b34
  %10 = call i64 @Tnim_SignalLevel.326(i64 %1), !insn.addr !7393
  %11 = inttoptr i64 %0 to i64*, !insn.addr !7394
  store i64 %10, i64* %11, align 8, !insn.addr !7394
  br label %dec_label_pc_10b56, !insn.addr !7395

dec_label_pc_10b56:                               ; preds = %dec_label_pc_10b34, %dec_label_pc_10b3e
  ret i32 ptrtoint (i32* @global_var_1 to i32), !insn.addr !7396
}

define i32 @DTV_SetPidTable(i64 %pTnim, i32* %PID_TableBuf, i8 %WordLen) local_unnamed_addr {
dec_label_pc_10b63:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = trunc i64 %0 to i32, !insn.addr !7397
  ret i32 %1, !insn.addr !7397
}

define i64 @DTV_TunerLockCheck.163(i64 %arg1) local_unnamed_addr {
dec_label_pc_10b64:
  %rax.0.reg2mem = alloca i64, !insn.addr !7398
  %0 = call i64 @mcount(), !insn.addr !7399
  %1 = add i64 %arg1, 7488, !insn.addr !7400
  %2 = inttoptr i64 %1 to i32*, !insn.addr !7400
  %3 = load i32, i32* %2, align 4, !insn.addr !7400
  %4 = icmp eq i32 %3, 0, !insn.addr !7400
  store i64 4294967286, i64* %rax.0.reg2mem, !insn.addr !7401
  br i1 %4, label %dec_label_pc_10b91, label %dec_label_pc_10b7b, !insn.addr !7401

dec_label_pc_10b7b:                               ; preds = %dec_label_pc_10b64
  %5 = add i64 %arg1, ptrtoint (i8** @global_var_30d60 to i64), !insn.addr !7402
  %6 = inttoptr i64 %5 to i8*, !insn.addr !7402
  %7 = load i8, i8* %6, align 1, !insn.addr !7402
  %8 = icmp eq i8 %7, 0, !insn.addr !7402
  %9 = icmp eq i1 %8, false, !insn.addr !7403
  store i64 0, i64* %rax.0.reg2mem, !insn.addr !7403
  br i1 %9, label %dec_label_pc_10b91, label %dec_label_pc_10b89, !insn.addr !7403

dec_label_pc_10b89:                               ; preds = %dec_label_pc_10b7b
  %10 = call i64 @Tnim_IsLocked.222(), !insn.addr !7404
  %11 = urem i64 %10, 256, !insn.addr !7405
  store i64 %11, i64* %rax.0.reg2mem, !insn.addr !7405
  br label %dec_label_pc_10b91, !insn.addr !7405

dec_label_pc_10b91:                               ; preds = %dec_label_pc_10b89, %dec_label_pc_10b7b, %dec_label_pc_10b64
  %rax.0.reload = load i64, i64* %rax.0.reg2mem
  ret i64 %rax.0.reload, !insn.addr !7406
}

define i64 @DTV_SetPidTable.528(i64 %arg1, i64 %arg2, i64 %arg3) local_unnamed_addr {
dec_label_pc_10b93:
  %merge.reg2mem = alloca i64, !insn.addr !7407
  %stack_var_-136 = alloca i64, align 8
  %0 = call i64 @mcount(), !insn.addr !7408
  %1 = trunc i64 %arg3 to i8, !insn.addr !7409
  %2 = icmp ule i8 %1, ptrtoint (i32** @global_var_20 to i8)
  %3 = icmp eq i64 %arg2, 0, !insn.addr !7410
  %4 = icmp eq i1 %3, false, !insn.addr !7411
  %or.cond = icmp eq i1 %4, %2
  store i64 4294967294, i64* %merge.reg2mem, !insn.addr !7412
  br i1 %or.cond, label %dec_label_pc_10bd1, label %dec_label_pc_10bca, !insn.addr !7412

dec_label_pc_10bca:                               ; preds = %dec_label_pc_10bd1, %dec_label_pc_10b93
  %merge.reload = load i64, i64* %merge.reg2mem
  ret i64 %merge.reload, !insn.addr !7413

dec_label_pc_10bd1:                               ; preds = %dec_label_pc_10b93
  %5 = urem i64 %arg3, 256, !insn.addr !7414
  %6 = icmp eq i64 %5, 0, !insn.addr !7415
  store i64 0, i64* %merge.reg2mem, !insn.addr !7415
  br i1 %6, label %dec_label_pc_10bca, label %dec_label_pc_10be3, !insn.addr !7415

dec_label_pc_10be3:                               ; preds = %dec_label_pc_10bd1
  %7 = ptrtoint i64* %stack_var_-136 to i64, !insn.addr !7416
  %8 = inttoptr i64 %arg2 to i32*, !insn.addr !7417
  %9 = load i32, i32* %8, align 4, !insn.addr !7417
  %10 = bitcast i64* %stack_var_-136 to i32*, !insn.addr !7418
  store i32 %9, i32* %10, align 8, !insn.addr !7418
  %11 = inttoptr i64 %arg2 to i8*, !insn.addr !7419
  call void @GetDeviceUniqueString(i64 %7, i8* %11, i32* null), !insn.addr !7419
  ret i64 ptrtoint (i32* @0 to i64), !insn.addr !7419
}

define void @GetDeviceUniqueString(i64 %deviceExtension, i8* %buf, i32* %len) local_unnamed_addr {
dec_label_pc_10bf4:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = call i64 @__decompiler_undefined_function_0()
  %2 = call i64 @__decompiler_undefined_function_0()
  %3 = add i64 %2, -128, !insn.addr !7420
  %4 = urem i64 %0, 256, !insn.addr !7421
  %5 = call i64 @USB_SetPidTable.178(i64 %1, i64 %4, i64 %3, i64* bitcast (i32** @global_var_20 to i64*)), !insn.addr !7422
  ret void, !insn.addr !7423
}

define i64 @GetDeviceUniqueString.375(i64 %arg1, i64 %arg2, i64 %arg3) local_unnamed_addr {
dec_label_pc_10c24:
  %0 = call i64 @__decompiler_undefined_function_0()
  %stack_var_-67 = alloca i64, align 8
  %stack_var_-88 = alloca i8, align 1
  %1 = call i64 @mcount(), !insn.addr !7424
  %2 = call i64 @__readgsqword(i64 40), !insn.addr !7425
  %3 = add i64 %arg1, 20339, !insn.addr !7426
  %4 = inttoptr i64 %3 to i8*, !insn.addr !7426
  %5 = load i8, i8* %4, align 1, !insn.addr !7426
  %6 = add i64 %arg1, 20340, !insn.addr !7427
  %7 = inttoptr i64 %6 to i8*, !insn.addr !7427
  %8 = load i8, i8* %7, align 1, !insn.addr !7427
  %9 = add i64 %arg1, 20341, !insn.addr !7428
  %10 = inttoptr i64 %9 to i8*, !insn.addr !7428
  %11 = load i8, i8* %10, align 1, !insn.addr !7428
  store i8 0, i8* %stack_var_-88, align 1, !insn.addr !7429
  %12 = ptrtoint i8* %stack_var_-88 to i64, !insn.addr !7430
  %13 = call i64 @TLIB_I2C_Write.278(i64 %arg1, i64 160, i64 0, i64 %12, i64 ptrtoint (i32* @global_var_2 to i64), i64 ptrtoint (i32* @global_var_2 to i64)), !insn.addr !7431
  %14 = call i64 @TLIB_I2C_Read.262(i64 %arg1, i64 160, i64 0, i64* nonnull %stack_var_-67, i64* bitcast (i8** @global_var_7 to i64*), i64 ptrtoint (i32* @global_var_2 to i64)), !insn.addr !7432
  %15 = and i64 %0, 4294967295, !insn.addr !7433
  %16 = call i64 @memset(i64 %arg2, i64 0, i64 %15), !insn.addr !7434
  %17 = zext i8 %11 to i64, !insn.addr !7435
  %18 = zext i8 %8 to i64, !insn.addr !7436
  %19 = call i64 @sprintf(i64 %arg2, i64 0, i64 0, i8 %5, i64 %18, i64 %17), !insn.addr !7437
  ret i64 0, !insn.addr !7438
}

define i32 @DTV_TunerPower(i64 %pTnim, i8 %bPowerOn) local_unnamed_addr {
dec_label_pc_10d58:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = trunc i64 %0 to i32
  ret i32 %1
}

define i64 @function_10d5a(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4, i64 %arg5, i64 %arg6, i64 %arg7, i64 %arg8) local_unnamed_addr {
dec_label_pc_10d5a:
  %rax.0.reg2mem = alloca i64, !insn.addr !7439
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = call i64 @__decompiler_undefined_function_0()
  %2 = trunc i64 %arg4 to i32
  %3 = sub i32 0, %2
  %4 = sub i32 %3, 1
  %5 = sub i32 %4, ptrtoint (i32* @global_var_1 to i32), !insn.addr !7440
  %6 = inttoptr i64 %0 to i32*, !insn.addr !7440
  store i32 %5, i32* %6, align 4, !insn.addr !7440
  %7 = add i64 %1, -40, !insn.addr !7441
  %8 = inttoptr i64 %7 to i64*, !insn.addr !7441
  %9 = load i64, i64* %8, align 8, !insn.addr !7441
  %10 = call i64 @__readgsqword(i64 40), !insn.addr !7442
  %11 = icmp eq i64 %9, %10, !insn.addr !7442
  store i64 0, i64* %rax.0.reg2mem, !insn.addr !7443
  br i1 %11, label %dec_label_pc_10d7b, label %dec_label_pc_10d76, !insn.addr !7443

dec_label_pc_10d76:                               ; preds = %dec_label_pc_10d5a
  %12 = call i64 @__stack_chk_fail(), !insn.addr !7444
  store i64 %12, i64* %rax.0.reg2mem, !insn.addr !7444
  br label %dec_label_pc_10d7b, !insn.addr !7444

dec_label_pc_10d7b:                               ; preds = %dec_label_pc_10d76, %dec_label_pc_10d5a
  %rax.0.reload = load i64, i64* %rax.0.reg2mem
  ret i64 %rax.0.reload, !insn.addr !7445
}

define i64 @DTV_TunerPower.444(i64 %arg1) local_unnamed_addr {
dec_label_pc_10d88:
  %0 = call i64 @mcount(), !insn.addr !7446
  ret i64 %arg1, !insn.addr !7447
}

define i32 @DTV_TunerHardReset(i64 %deviceExtension, i8 %TunerNum) local_unnamed_addr {
dec_label_pc_10d98:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = call i1 @__decompiler_undefined_function_2()
  %2 = select i1 %1, i64 3054436353, i64 3054436352, !insn.addr !7448
  %3 = sub i64 %0, %2, !insn.addr !7448
  %4 = and i64 %3, 4294967295, !insn.addr !7448
  %5 = inttoptr i64 %4 to i8*, !insn.addr !7449
  %6 = load i8, i8* %5, align 1, !insn.addr !7449
  %7 = xor i8 %6, ptrtoint (i32** @global_var_1d to i8), !insn.addr !7449
  %8 = trunc i64 %3 to i8, !insn.addr !7450
  %9 = add i8 %7, %8, !insn.addr !7450
  store i8 %9, i8* %5, align 1, !insn.addr !7450
  %10 = urem i64 %3, 256, !insn.addr !7451
  %11 = mul i64 %10, shl (i64 add (i64 ptrtoint (i16* @global_var_4 to i64), i64 1), i64 ptrtoint (i16* @global_var_4 to i64)), !insn.addr !7452
  %12 = add i64 %deviceExtension, 22880, !insn.addr !7453
  %13 = add i64 %12, %11, !insn.addr !7453
  %14 = zext i8 %TunerNum to i64, !insn.addr !7454
  %15 = call i64 @TC_PowerTunerDemod.604(i64 %deviceExtension, i64 %10, i64 %14, i64 %13), !insn.addr !7455
  ret i32 ptrtoint (i32* @global_var_1 to i32), !insn.addr !7456
}

define i64 @DTV_TunerHardReset.297(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_10dc8:
  %0 = call i64 @__decompiler_undefined_function_0()
  ret i64 %0, !insn.addr !7457
}

define i32 @TunerReset(i64 %pTnim, i8 %bInitTuner, i8 %bChkRstFlag) local_unnamed_addr {
dec_label_pc_10dc9:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = call i64 @__decompiler_undefined_function_0()
  %2 = call i64 @__decompiler_undefined_function_0()
  %3 = call i64 @mcount(), !insn.addr !7458
  %4 = zext i8 %bInitTuner to i64, !insn.addr !7459
  %5 = mul i64 %4, shl (i64 add (i64 ptrtoint (i16* @global_var_4 to i64), i64 1), i64 ptrtoint (i16* @global_var_4 to i64)), !insn.addr !7460
  %6 = add i64 %pTnim, 96, !insn.addr !7461
  %7 = add i64 %6, %5, !insn.addr !7461
  %8 = inttoptr i64 %pTnim to i8*, !insn.addr !7462
  %9 = trunc i64 %7 to i8, !insn.addr !7462
  %10 = inttoptr i64 %1 to i8*, !insn.addr !7462
  %11 = call i8 @ReadWrite_Customization_Data(i8* %8, i8 %bInitTuner, i8 %9, i64 %2, i8* %10, i64 %0, i8* bitcast (i32* @0 to i8*)), !insn.addr !7462
  %12 = icmp ult i8 %11, ptrtoint (i32* @global_var_1 to i8), !insn.addr !7463
  %13 = sext i8 %11 to i32, !insn.addr !7464
  %14 = zext i1 %12 to i32, !insn.addr !7464
  %15 = sub i8 0, %11
  %16 = sub i8 %15, 1
  %17 = sext i8 %16 to i32
  %18 = add i32 %13, ptrtoint (i32* @global_var_2 to i32), !insn.addr !7464
  %19 = add i32 %18, %17, !insn.addr !7465
  %20 = add i32 %19, %14, !insn.addr !7466
  ret i32 %20, !insn.addr !7467
}

define i64 @TunerReset.356(i64 %arg1, i64 %arg2, i64 %arg3) local_unnamed_addr {
dec_label_pc_10df9:
  %0 = call i64 @mcount(), !insn.addr !7468
  %1 = add i64 %arg1, 7480, !insn.addr !7469
  %2 = inttoptr i64 %1 to i64*, !insn.addr !7469
  %3 = load i64, i64* %2, align 8, !insn.addr !7469
  %4 = add i64 %arg1, 7472, !insn.addr !7470
  %5 = inttoptr i64 %4 to i8*, !insn.addr !7470
  %6 = load i8, i8* %5, align 1, !insn.addr !7470
  %7 = add i64 %arg1, 588462, !insn.addr !7471
  %8 = inttoptr i64 %7 to i8*, !insn.addr !7471
  store i8 0, i8* %8, align 1, !insn.addr !7471
  %9 = zext i8 %6 to i64, !insn.addr !7472
  %10 = call i64 @DTV_TunerHardReset.297(i64 %3, i64 %9), !insn.addr !7473
  ret i64 0, !insn.addr !7474
}

define i32 @DTV_StreamThreadStop(i64 %pTnim, i8 %bRstTuner) local_unnamed_addr {
dec_label_pc_10e4c:
  %storemerge.reg2mem = alloca i32, !insn.addr !7475
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = call i64 @__decompiler_undefined_function_0()
  %2 = call i64 @__decompiler_undefined_function_0()
  %3 = call i64 @__decompiler_undefined_function_0()
  %4 = trunc i64 %3 to i8, !insn.addr !7475
  %5 = add i64 %0, -124, !insn.addr !7475
  %6 = inttoptr i64 %5 to i8*, !insn.addr !7475
  %7 = load i8, i8* %6, align 1, !insn.addr !7475
  %8 = or i8 %7, %4, !insn.addr !7475
  %9 = icmp eq i8 %8, 0, !insn.addr !7475
  %10 = trunc i64 %2 to i16, !insn.addr !7476
  %11 = call i32 @__asm_in.623(i16 %10), !insn.addr !7476
  %12 = trunc i64 %2 to i32, !insn.addr !7477
  %13 = icmp eq i32 %12, ptrtoint (i32* @global_var_1 to i32), !insn.addr !7477
  %or.cond = or i1 %13, %9
  store i32 ptrtoint (i32* @global_var_1 to i32), i32* %storemerge.reg2mem, !insn.addr !7478
  br i1 %or.cond, label %dec_label_pc_10e5e, label %dec_label_pc_10e6e, !insn.addr !7478

dec_label_pc_10e5e:                               ; preds = %dec_label_pc_10e4c
  %14 = call i64 @Tnim_Initialise.422(i64 %1), !insn.addr !7479
  %15 = trunc i64 %14 to i8, !insn.addr !7480
  %16 = icmp eq i8 %15, 0, !insn.addr !7480
  %17 = icmp eq i1 %16, false, !insn.addr !7481
  %18 = zext i1 %17 to i32, !insn.addr !7482
  store i32 %18, i32* %storemerge.reg2mem, !insn.addr !7482
  br label %dec_label_pc_10e6e, !insn.addr !7482

dec_label_pc_10e6e:                               ; preds = %dec_label_pc_10e4c, %dec_label_pc_10e5e
  %storemerge.reload = load i32, i32* %storemerge.reg2mem
  ret i32 %storemerge.reload, !insn.addr !7483
}

define i64 @DTV_StreamThreadStop.192(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_10e7c:
  %0 = call i64 @mcount(), !insn.addr !7484
  %1 = add i64 %arg1, 7480, !insn.addr !7485
  %2 = inttoptr i64 %1 to i64*, !insn.addr !7485
  %3 = load i64, i64* %2, align 8, !insn.addr !7485
  %4 = add i64 %arg1, 7472, !insn.addr !7486
  %5 = inttoptr i64 %4 to i8*, !insn.addr !7486
  %6 = load i8, i8* %5, align 1, !insn.addr !7486
  %7 = zext i8 %6 to i64, !insn.addr !7486
  %8 = add i64 %3, 22872, !insn.addr !7487
  %9 = add i64 %8, %7, !insn.addr !7487
  %10 = inttoptr i64 %9 to i8*, !insn.addr !7487
  %11 = load i8, i8* %10, align 1, !insn.addr !7487
  %12 = icmp eq i8 %11, 1, !insn.addr !7487
  %13 = icmp eq i1 %12, false, !insn.addr !7488
  br i1 %13, label %dec_label_pc_10ed9, label %dec_label_pc_10ec4, !insn.addr !7488

dec_label_pc_10ec4:                               ; preds = %dec_label_pc_10e7c, %dec_label_pc_10ec4
  %14 = call i64 @vUSB_Wait.362(i64 ptrtoint (i32* @global_var_1 to i64)), !insn.addr !7489
  %15 = load i8, i8* %10, align 1, !insn.addr !7490
  %16 = icmp eq i8 %15, 1, !insn.addr !7490
  br i1 %16, label %dec_label_pc_10ec4, label %dec_label_pc_10ed9, !insn.addr !7491

dec_label_pc_10ed9:                               ; preds = %dec_label_pc_10ec4, %dec_label_pc_10e7c
  %17 = call i64 @USB_BulkStreamStop.313(i64 %3, i64 %7), !insn.addr !7492
  %18 = add i64 %3, 248, !insn.addr !7493
  %19 = call i64 @down(i64 %18, i64 %7), !insn.addr !7494
  %narrow = mul nuw nsw i64 %7, 312
  %20 = add i64 %narrow, %3, !insn.addr !7495
  %21 = add i64 %20, 1328, !insn.addr !7496
  %22 = inttoptr i64 %21 to i64*, !insn.addr !7496
  store i64 0, i64* %22, align 8, !insn.addr !7496
  %23 = call i64 @up(i64 %18), !insn.addr !7497
  %24 = add i64 %20, 1320, !insn.addr !7498
  %25 = inttoptr i64 %24 to i8*, !insn.addr !7498
  store i8 0, i8* %25, align 1, !insn.addr !7498
  %26 = add i64 %arg1, ptrtoint (i8** @global_var_30de4 to i64), !insn.addr !7499
  %27 = inttoptr i64 %26 to i8*, !insn.addr !7499
  %28 = load i8, i8* %27, align 1, !insn.addr !7499
  %29 = icmp eq i8 %28, 0, !insn.addr !7499
  br i1 %29, label %dec_label_pc_10f33, label %dec_label_pc_10f26, !insn.addr !7500

dec_label_pc_10f26:                               ; preds = %dec_label_pc_10ed9
  %30 = call i64 @DTV_StartStop_Enc.572(i64 %arg1, i64 0), !insn.addr !7501
  br label %dec_label_pc_10f33, !insn.addr !7501

dec_label_pc_10f33:                               ; preds = %dec_label_pc_10f26, %dec_label_pc_10ed9
  %31 = call i64 @TunerReset.356(i64 %arg1, i64 0, i64 0), !insn.addr !7502
  ret i64 %31, !insn.addr !7503
}

define i8 @bWriteMPUI2CData(i8 %MPU_Slave_Addr, i8 %Target_Slave_Addr, i8 %RegOffset, i8 %u16WriteLen, i8* %pDataBuf, i8 %withRSA, i64 %hCtrlTransfer) local_unnamed_addr {
dec_label_pc_10f4d:
  %rax.0.reg2mem = alloca i8, !insn.addr !7504
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = sext i8 %RegOffset to i32, !insn.addr !7505
  %2 = icmp eq i32 %1, ptrtoint (i32* @global_var_1 to i32), !insn.addr !7505
  %3 = icmp eq i1 %2, false, !insn.addr !7506
  store i8 -2, i8* %rax.0.reg2mem, !insn.addr !7506
  br i1 %3, label %dec_label_pc_10f67, label %dec_label_pc_10f57, !insn.addr !7506

dec_label_pc_10f57:                               ; preds = %dec_label_pc_10f4d
  %4 = add i64 %0, 7496, !insn.addr !7507
  %5 = inttoptr i64 %4 to i32*, !insn.addr !7507
  store i32 0, i32* %5, align 4, !insn.addr !7507
  store i8 ptrtoint (i32* @global_var_1 to i8), i8* %rax.0.reg2mem, !insn.addr !7508
  br label %dec_label_pc_10f67, !insn.addr !7508

dec_label_pc_10f67:                               ; preds = %dec_label_pc_10f57, %dec_label_pc_10f4d
  %rax.0.reload = load i8, i8* %rax.0.reg2mem
  ret i8 %rax.0.reload, !insn.addr !7509
}

define i64 @bWriteMPUI2CData.491(i64 %arg1) local_unnamed_addr {
dec_label_pc_10f7d:
  %0 = call i64 @mcount(), !insn.addr !7510
  ret i64 0, !insn.addr !7511
}

define i8 @DTV_DecEncChip_I2C_Write(i64 %pTuner, i8 %I2C_Addr, i8 %byReg, i8* %pBuffer, i8 %byCount, i8 %withRSA) local_unnamed_addr {
dec_label_pc_10f90:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = sext i8 %byCount to i64
  %2 = ptrtoint i8* %pBuffer to i64
  %3 = add i64 %pTuner, 42, !insn.addr !7512
  %4 = inttoptr i64 %3 to i8*, !insn.addr !7512
  %5 = load i8, i8* %4, align 1, !insn.addr !7512
  %6 = ashr i8 %byReg, 7, !insn.addr !7512
  %7 = and i8 %5, %6, !insn.addr !7512
  store i8 %7, i8* %4, align 1, !insn.addr !7512
  %8 = zext i8 %I2C_Addr to i64, !insn.addr !7513
  %9 = urem i64 %pTuner, 256, !insn.addr !7514
  %10 = urem i64 %2, 256, !insn.addr !7515
  %11 = zext i8 %byReg to i64, !insn.addr !7516
  %12 = add i64 %0, ptrtoint (i8* @global_var_10 to i64), !insn.addr !7517
  %13 = inttoptr i64 %12 to i64*, !insn.addr !7517
  %14 = load i64, i64* %13, align 8, !insn.addr !7517
  %15 = zext i8 %withRSA to i64, !insn.addr !7518
  %16 = call i64 @FUSBDTV_Cmd_MPU_I2CWrite.180(i64 %14, i64 %9, i64 %8, i64 %11, i64 %10, i64 %1, i64 %15), !insn.addr !7518
  %17 = trunc i64 %16 to i8, !insn.addr !7519
  %18 = icmp eq i8 %17, ptrtoint (i32* @global_var_1 to i8), !insn.addr !7519
  %19 = zext i1 %18 to i8, !insn.addr !7520
  ret i8 %19, !insn.addr !7521
}

define i64 @DTV_DecEncChip_I2C_Write.354(i64 %arg1, i8 %arg2, i64* %arg3, i8* %arg4, i64* %arg5) local_unnamed_addr {
dec_label_pc_10fc0:
  %0 = call i64 @mcount(), !insn.addr !7522
  %1 = add i64 %arg1, 600425, !insn.addr !7523
  %2 = inttoptr i64 %1 to i8*, !insn.addr !7523
  %3 = load i8, i8* %2, align 1, !insn.addr !7523
  %4 = zext i8 %3 to i64, !insn.addr !7523
  ret i64 %4, !insn.addr !7524
}

define i8 @DTV_EnableEncryptionChipTSOutput(i64 %pTnim) local_unnamed_addr {
dec_label_pc_10ff5:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = and i64 %0, 4294967295, !insn.addr !7525
  %2 = call i64 @bWriteMPUI2CData.491(i64 %1), !insn.addr !7526
  %3 = trunc i64 %2 to i8, !insn.addr !7527
  ret i8 %3, !insn.addr !7527
}

define i64 @DTV_EnableEncryptionChipTSOutput.166(i64 %arg1) local_unnamed_addr {
dec_label_pc_11025:
  %rax.0.reg2mem = alloca i64, !insn.addr !7528
  %.reg2mem1 = alloca i8, !insn.addr !7528
  %.reg2mem = alloca i8, !insn.addr !7528
  %stack_var_-25 = alloca i8, align 1
  %0 = call i64 @mcount(), !insn.addr !7529
  %1 = add i64 %arg1, 5261, !insn.addr !7530
  %2 = inttoptr i64 %1 to i8*, !insn.addr !7530
  %3 = load i8, i8* %2, align 1
  switch i8 %3, label %dec_label_pc_1105f [
    i8 3, label %dec_label_pc_11063
    i8 15, label %dec_label_pc_11063
    i8 4, label %dec_label_pc_11063
  ]

dec_label_pc_1105f:                               ; preds = %dec_label_pc_11025
  %4 = icmp eq i8 %3, 17, !insn.addr !7531
  %5 = icmp eq i1 %4, false, !insn.addr !7532
  store i8 %3, i8* %.reg2mem1, !insn.addr !7532
  br i1 %5, label %dec_label_pc_1108e, label %dec_label_pc_11063, !insn.addr !7532

dec_label_pc_11063:                               ; preds = %dec_label_pc_11025, %dec_label_pc_11025, %dec_label_pc_11025, %dec_label_pc_1105f
  %6 = add i64 %arg1, 5609, !insn.addr !7533
  %7 = inttoptr i64 %6 to i8*, !insn.addr !7533
  %8 = load i8, i8* %7, align 1, !insn.addr !7533
  %9 = icmp eq i8 %8, 0, !insn.addr !7533
  %10 = select i1 %9, i8 0, i8 ptrtoint (i8* @global_var_10 to i8), !insn.addr !7534
  store i8 %10, i8* %stack_var_-25, align 1, !insn.addr !7535
  %11 = add i64 %arg1, ptrtoint (i32** @global_var_1c70 to i64), !insn.addr !7536
  %12 = inttoptr i64 %11 to i32*, !insn.addr !7536
  %13 = load i32, i32* %12, align 4, !insn.addr !7536
  %14 = icmp eq i32 %13, ptrtoint (i32* @global_var_1 to i32), !insn.addr !7536
  %15 = icmp eq i1 %14, false, !insn.addr !7537
  store i8 %10, i8* %.reg2mem, !insn.addr !7537
  br i1 %15, label %dec_label_pc_11081, label %dec_label_pc_1107d, !insn.addr !7537

dec_label_pc_1107d:                               ; preds = %dec_label_pc_11063
  %16 = or i8 %10, -128, !insn.addr !7538
  store i8 %16, i8* %stack_var_-25, align 1, !insn.addr !7538
  store i8 %16, i8* %.reg2mem, !insn.addr !7538
  br label %dec_label_pc_11081, !insn.addr !7538

dec_label_pc_11081:                               ; preds = %dec_label_pc_1107d, %dec_label_pc_11063
  %17 = add i64 %arg1, 5610, !insn.addr !7539
  %18 = inttoptr i64 %17 to i8*, !insn.addr !7539
  %19 = load i8, i8* %18, align 1, !insn.addr !7539
  %20 = icmp eq i8 %19, 1, !insn.addr !7539
  %21 = icmp eq i1 %20, false, !insn.addr !7540
  br i1 %21, label %dec_label_pc_1108ethread-pre-split, label %dec_label_pc_1108a, !insn.addr !7540

dec_label_pc_1108a:                               ; preds = %dec_label_pc_11081
  %.reload = load i8, i8* %.reg2mem, !insn.addr !7541
  %22 = or i8 %.reload, ptrtoint (i32** @global_var_20 to i8), !insn.addr !7541
  store i8 %22, i8* %stack_var_-25, align 1, !insn.addr !7541
  br label %dec_label_pc_1108ethread-pre-split, !insn.addr !7541

dec_label_pc_1108ethread-pre-split:               ; preds = %dec_label_pc_11081, %dec_label_pc_1108a
  %.pr = load i8, i8* %2, align 1
  store i8 %.pr, i8* %.reg2mem1
  br label %dec_label_pc_1108e

dec_label_pc_1108e:                               ; preds = %dec_label_pc_1108ethread-pre-split, %dec_label_pc_1105f
  %.reload2 = load i8, i8* %.reg2mem1, !insn.addr !7542
  switch i8 %.reload2, label %dec_label_pc_1109d [
    i8 15, label %dec_label_pc_110a5
    i8 4, label %dec_label_pc_110a5
  ]

dec_label_pc_1109d:                               ; preds = %dec_label_pc_1108e
  %23 = icmp eq i8 %.reload2, 17, !insn.addr !7543
  %24 = icmp eq i1 %23, false, !insn.addr !7544
  br i1 %24, label %dec_label_pc_11126, label %dec_label_pc_110a5, !insn.addr !7544

dec_label_pc_110a5:                               ; preds = %dec_label_pc_1108e, %dec_label_pc_1108e, %dec_label_pc_1109d
  %25 = add i64 %arg1, 7472, !insn.addr !7545
  %26 = inttoptr i64 %25 to i8*, !insn.addr !7545
  %27 = load i8, i8* %26, align 1, !insn.addr !7545
  %28 = icmp eq i8 %27, 0, !insn.addr !7545
  %29 = icmp eq i1 %28, false, !insn.addr !7546
  br i1 %29, label %dec_label_pc_110db, label %dec_label_pc_110ae, !insn.addr !7546

dec_label_pc_110ae:                               ; preds = %dec_label_pc_110a5
  %30 = add i64 %arg1, 588972, !insn.addr !7547
  %31 = inttoptr i64 %30 to i8*, !insn.addr !7547
  %32 = load i8, i8* %31, align 1, !insn.addr !7547
  %33 = call i64 @DTV_DecEncChip_I2C_Write.354(i64 %arg1, i8 %32, i64* bitcast (i8* @global_var_5 to i64*), i8* nonnull %stack_var_-25, i64* bitcast (i32* @global_var_1 to i64*)), !insn.addr !7548
  br label %dec_label_pc_110db, !insn.addr !7549

dec_label_pc_110db:                               ; preds = %dec_label_pc_110ae, %dec_label_pc_110a5
  store i64 0, i64* %rax.0.reg2mem, !insn.addr !7550
  br label %dec_label_pc_110e0, !insn.addr !7550

dec_label_pc_110e0:                               ; preds = %dec_label_pc_110e0, %dec_label_pc_110db
  %rax.0.reload = load i64, i64* %rax.0.reg2mem
  %34 = add i64 %rax.0.reload, ptrtoint (i8* @global_var_8 to i64), !insn.addr !7551
  %35 = icmp eq i64 %rax.0.reload, sub (i64 0, i64 add (i64 ptrtoint (i8* @global_var_8 to i64), i64 -64)), !insn.addr !7552
  %36 = icmp eq i1 %35, false, !insn.addr !7553
  store i64 %34, i64* %rax.0.reg2mem, !insn.addr !7553
  br i1 %36, label %dec_label_pc_110e0, label %dec_label_pc_11100, !insn.addr !7553

dec_label_pc_11100:                               ; preds = %dec_label_pc_110e0
  %37 = add i64 %arg1, 588972, !insn.addr !7554
  %38 = inttoptr i64 %37 to i8*, !insn.addr !7554
  %39 = load i8, i8* %38, align 1, !insn.addr !7554
  %40 = call i64 @DTV_DecEncChip_I2C_Write.354(i64 %arg1, i8 %39, i64* bitcast (i8* @global_var_5 to i64*), i8* nonnull %stack_var_-25, i64* bitcast (i32* @global_var_1 to i64*)), !insn.addr !7555
  ret i64 %40, !insn.addr !7556

dec_label_pc_11126:                               ; preds = %dec_label_pc_1109d
  %41 = zext i8 %.reload2 to i64, !insn.addr !7542
  ret i64 %41, !insn.addr !7556
}

define i8 @SWResetSlowdownIC(i64 %pTuner, i32 %outputPin) local_unnamed_addr {
dec_label_pc_11128:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = call i64 @__decompiler_undefined_function_0()
  %2 = call i64 @__decompiler_undefined_function_0()
  %3 = call i64 @__decompiler_undefined_function_0()
  %4 = trunc i64 %1 to i16, !insn.addr !7557
  %5 = trunc i64 %3 to i32, !insn.addr !7557
  call void @__asm_out(i16 %4, i32 %5), !insn.addr !7557
  %6 = add i64 %0, 588972, !insn.addr !7558
  %7 = inttoptr i64 %6 to i8*, !insn.addr !7558
  %8 = load i8, i8* %7, align 1, !insn.addr !7558
  %9 = inttoptr i64 %2 to i8*, !insn.addr !7559
  %10 = call i64 @DTV_DecEncChip_I2C_Write.354(i64 %0, i8 %8, i64* bitcast (i8* @global_var_5 to i64*), i8* %9, i64* bitcast (i32* @global_var_1 to i64*)), !insn.addr !7559
  ret i8 ptrtoint (i32* @global_var_1 to i8), !insn.addr !7560
}

define i64 @SWResetSlowdownIC.427(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_11158:
  %0 = call i64 @mcount(), !insn.addr !7561
  ret i64 4294967297, !insn.addr !7562
}

define i8 @SetSlowdownIC(i64 %pTuner, i32 %inputPin, i32 %outputPin, i8 %bInverse, i8 %IsAutoSyncEnable, i8 %SyncByte) local_unnamed_addr {
dec_label_pc_111b6:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = trunc i64 %0 to i8
  ret i8 %1
}

define i64 @function_111b8() local_unnamed_addr {
dec_label_pc_111b8:
  %0 = call i64 @__decompiler_undefined_function_0()
  ret i64 %0, !insn.addr !7563
}

define i64 @SetSlowdownIC.242(i64 %arg1, i32 %arg2, i64 %arg3, i64* %arg4, i64* %arg5, i64 %arg6) local_unnamed_addr {
dec_label_pc_111e6:
  %stack_var_-41 = alloca i16, align 2
  %stack_var_-56 = alloca i64, align 8
  %0 = call i64 @mcount(), !insn.addr !7564
  %1 = add i64 %arg1, 600424, !insn.addr !7565
  %2 = inttoptr i64 %1 to i64*, !insn.addr !7565
  %3 = load i64, i64* %2, align 8, !insn.addr !7565
  %4 = urem i64 %3, 4294967552, !insn.addr !7565
  %5 = icmp eq i64 %4, 4294967297, !insn.addr !7566
  %6 = icmp eq i1 %5, false, !insn.addr !7567
  br i1 %6, label %dec_label_pc_1127a, label %dec_label_pc_11237, !insn.addr !7567

dec_label_pc_11237:                               ; preds = %dec_label_pc_111e6
  store i64 -46, i64* %stack_var_-56, align 8, !insn.addr !7568
  %7 = add i64 %arg1, 600425, !insn.addr !7569
  %8 = inttoptr i64 %7 to i8*, !insn.addr !7569
  %9 = load i8, i8* %8, align 1, !insn.addr !7569
  %10 = bitcast i64* %stack_var_-56 to i8*, !insn.addr !7570
  %11 = call i64 @DTV_DecEncChip_I2C_Write.354(i64 %arg1, i8 %9, i64* bitcast (i8* @global_var_a to i64*), i8* nonnull %10, i64* bitcast (i8* @global_var_6 to i64*)), !insn.addr !7570
  ret i64 %11, !insn.addr !7571

dec_label_pc_1127a:                               ; preds = %dec_label_pc_111e6
  %12 = add i64 %arg1, 7480, !insn.addr !7572
  %13 = inttoptr i64 %12 to i64*, !insn.addr !7572
  %14 = load i64, i64* %13, align 8, !insn.addr !7572
  %15 = ptrtoint i64* %arg5 to i64
  %16 = ptrtoint i64* %arg4 to i64
  %17 = shl i32 %arg2, ptrtoint (i16* @global_var_4 to i32), !insn.addr !7573
  %18 = trunc i32 %17 to i16, !insn.addr !7574
  %19 = trunc i64 %16 to i8, !insn.addr !7575
  %20 = icmp eq i8 %19, 0, !insn.addr !7575
  %21 = icmp eq i1 %20, false, !insn.addr !7576
  %22 = or i16 %18, sext (i8 ptrtoint (i8** @global_var_3 to i8) to i16)
  %storemerge.in.in = select i1 %21, i16 %18, i16 %22
  %storemerge.in = mul i16 %storemerge.in.in, 256
  %storemerge = sdiv i16 %storemerge.in, 256
  %23 = trunc i64 %15 to i8, !insn.addr !7577
  %24 = icmp eq i8 %23, 0, !insn.addr !7577
  %25 = icmp eq i1 %24, false, !insn.addr !7578
  %26 = or i16 %storemerge, sext (i8 ptrtoint (i16* @global_var_4 to i8) to i16)
  %spec.select = select i1 %25, i16 %storemerge, i16 %26
  store i16 %spec.select, i16* %stack_var_-41, align 2
  %27 = ptrtoint i16* %stack_var_-41 to i64, !insn.addr !7579
  %28 = urem i64 %arg3, 256, !insn.addr !7580
  %29 = call i64 @TLIB_I2C_Write.278(i64 %14, i64 210, i64 %28, i64 %27, i64 ptrtoint (i32* @global_var_1 to i64), i64 0), !insn.addr !7581
  ret i64 %29, !insn.addr !7582
}

define i32 @DTV_SetTunerFreq(i64 %pTnim, i64 %Freq, i8 %BW) local_unnamed_addr {
dec_label_pc_112c2:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = call i64 @__decompiler_undefined_function_0()
  %2 = call i64 @__decompiler_undefined_function_0()
  %3 = call i64 @__decompiler_undefined_function_0()
  %4 = call i64 @__decompiler_undefined_function_0()
  %5 = call i128 @__decompiler_undefined_function_8()
  %6 = sext i8 %BW to i64
  %7 = add i64 %0, 12141012, !insn.addr !7583
  %8 = inttoptr i64 %7 to i128*, !insn.addr !7583
  %9 = load i128, i128* %8, align 8, !insn.addr !7583
  %10 = call i128 @__asm_vpalignr(i128 %5, i128 %9, i64 0), !insn.addr !7583
  %11 = trunc i64 %4 to i8
  %12 = mul i8 %11, 2, !insn.addr !7584
  %13 = inttoptr i64 %4 to i8*, !insn.addr !7584
  store i8 %12, i8* %13, align 1, !insn.addr !7584
  %14 = call i64 @TLIB_I2C_Write.278(i64 %1, i64 210, i64 %6, i64 %3, i64 ptrtoint (i32* @global_var_1 to i64), i64 %2), !insn.addr !7585
  %15 = trunc i64 %14 to i32, !insn.addr !7586
  ret i32 %15, !insn.addr !7586
}

define i64 @DTV_SetTunerFreq.157(i64 %arg1, i64 %arg2, i64* %arg3) local_unnamed_addr {
dec_label_pc_112f2:
  %merge.reg2mem = alloca i64, !insn.addr !7587
  %0 = call i64 @mcount(), !insn.addr !7588
  %1 = add i64 %arg1, ptrtoint (i8** @global_var_30d60 to i64), !insn.addr !7589
  %2 = inttoptr i64 %1 to i8*, !insn.addr !7589
  %3 = load i8, i8* %2, align 1, !insn.addr !7589
  %4 = icmp eq i8 %3, ptrtoint (i32* @global_var_1 to i8), !insn.addr !7589
  %5 = icmp eq i1 %4, false, !insn.addr !7590
  br i1 %5, label %dec_label_pc_11369, label %dec_label_pc_11355, !insn.addr !7590

dec_label_pc_11355:                               ; preds = %dec_label_pc_112f2
  %6 = call i64 @TLIB_Delay.388(i64* inttoptr (i64 400 to i64*)), !insn.addr !7591
  ret i64 ptrtoint (i32* @global_var_1 to i64), !insn.addr !7592

dec_label_pc_11369:                               ; preds = %dec_label_pc_112f2
  %7 = add i64 %arg1, 7480, !insn.addr !7593
  %8 = inttoptr i64 %7 to i64*, !insn.addr !7593
  %9 = load i64, i64* %8, align 8, !insn.addr !7593
  %10 = add i64 %arg1, 7472, !insn.addr !7594
  %11 = inttoptr i64 %10 to i8*, !insn.addr !7594
  %12 = load i8, i8* %11, align 1, !insn.addr !7594
  %13 = zext i8 %12 to i64, !insn.addr !7594
  %14 = mul i64 %13, 8, !insn.addr !7595
  %15 = add i64 %9, 1160, !insn.addr !7595
  %16 = add i64 %15, %14, !insn.addr !7595
  %17 = inttoptr i64 %16 to i64*, !insn.addr !7595
  %18 = load i64, i64* %17, align 8, !insn.addr !7595
  %19 = call i64 @TunerReset.356(i64 %arg1, i64 ptrtoint (i32* @global_var_1 to i64), i64 ptrtoint (i32* @global_var_1 to i64)), !insn.addr !7596
  %20 = add i64 %arg1, ptrtoint (i8** @global_var_30de4 to i64), !insn.addr !7597
  %21 = inttoptr i64 %20 to i8*, !insn.addr !7597
  %22 = load i8, i8* %21, align 1, !insn.addr !7597
  %23 = icmp eq i8 %22, 0, !insn.addr !7597
  %.pre = add i64 %9, %13
  br i1 %23, label %dec_label_pc_113d4, label %dec_label_pc_113b2, !insn.addr !7598

dec_label_pc_113b2:                               ; preds = %dec_label_pc_11369
  %24 = add i64 %.pre, 1152, !insn.addr !7599
  %25 = inttoptr i64 %24 to i8*, !insn.addr !7599
  %26 = load i8, i8* %25, align 1, !insn.addr !7599
  %27 = icmp eq i8 %26, 1, !insn.addr !7599
  %28 = icmp eq i1 %27, false, !insn.addr !7600
  %29 = icmp eq i64 %18, 0, !insn.addr !7601
  %or.cond = or i1 %29, %28
  br i1 %or.cond, label %dec_label_pc_113d4, label %dec_label_pc_113c7, !insn.addr !7600

dec_label_pc_113c7:                               ; preds = %dec_label_pc_113b2
  %30 = call i64 @DTV_StartStop_Enc.572(i64 %arg1, i64 0), !insn.addr !7602
  br label %dec_label_pc_113d4, !insn.addr !7602

dec_label_pc_113d4:                               ; preds = %dec_label_pc_11369, %dec_label_pc_113c7, %dec_label_pc_113b2
  %31 = ptrtoint i64* %arg3 to i64
  %32 = call i64 @vUSB_Wait.362(i64 50), !insn.addr !7603
  %33 = add i64 %.pre, 1312, !insn.addr !7604
  %34 = inttoptr i64 %33 to i8*, !insn.addr !7604
  store i8 ptrtoint (i32* @global_var_1 to i8), i8* %34, align 1, !insn.addr !7604
  %35 = load i8, i8* %11, align 1, !insn.addr !7605
  %36 = zext i8 %35 to i64, !insn.addr !7606
  %37 = mul nuw nsw i64 %36, 80, !insn.addr !7606
  %38 = add i64 %9, 22888, !insn.addr !7607
  %39 = add i64 %38, %37, !insn.addr !7607
  %40 = inttoptr i64 %39 to i64*, !insn.addr !7607
  store i64 ptrtoint (i32* @global_var_1 to i64), i64* %40, align 8, !insn.addr !7607
  %41 = load i8, i8* %11, align 1, !insn.addr !7608
  %42 = zext i8 %41 to i64, !insn.addr !7609
  %43 = mul nuw nsw i64 %42, 80, !insn.addr !7609
  %44 = add i64 %9, 22896, !insn.addr !7610
  %45 = add i64 %44, %43, !insn.addr !7610
  %46 = inttoptr i64 %45 to i64*, !insn.addr !7610
  store i64 0, i64* %46, align 8, !insn.addr !7610
  %47 = load i8, i8* %11, align 1, !insn.addr !7611
  %48 = zext i8 %47 to i64, !insn.addr !7612
  %49 = mul nuw nsw i64 %48, 80, !insn.addr !7612
  %50 = add i64 %9, 22904, !insn.addr !7613
  %51 = add i64 %50, %49, !insn.addr !7613
  %52 = inttoptr i64 %51 to i64*, !insn.addr !7613
  store i64 ptrtoint (i8** @global_var_17 to i64), i64* %52, align 8, !insn.addr !7613
  %53 = urem i64 %31, 256, !insn.addr !7614
  %54 = call i64 @Tnim_AcquireFrequency.402(i64 %arg1, i64 %arg2, i64 %53), !insn.addr !7615
  %55 = trunc i64 %54 to i8, !insn.addr !7616
  %56 = icmp eq i8 %55, ptrtoint (i32* @global_var_1 to i8), !insn.addr !7616
  %57 = icmp eq i1 %56, false, !insn.addr !7617
  br i1 %57, label %dec_label_pc_11489, label %dec_label_pc_11442, !insn.addr !7617

dec_label_pc_11442:                               ; preds = %dec_label_pc_113d4
  %58 = add i64 %arg1, 600488, !insn.addr !7618
  %59 = inttoptr i64 %58 to i64*, !insn.addr !7618
  store i64 %arg2, i64* %59, align 8, !insn.addr !7618
  %60 = add i64 %arg1, 600496, !insn.addr !7619
  %61 = inttoptr i64 %60 to i32*, !insn.addr !7619
  store i32 0, i32* %61, align 4, !insn.addr !7619
  %62 = add i64 %arg1, 588476, !insn.addr !7620
  %63 = inttoptr i64 %62 to i8*, !insn.addr !7620
  %64 = load i8, i8* %63, align 1, !insn.addr !7620
  %65 = icmp eq i8 %64, 0, !insn.addr !7620
  br i1 %65, label %dec_label_pc_11489, label %dec_label_pc_1145c, !insn.addr !7621

dec_label_pc_1145c:                               ; preds = %dec_label_pc_11442
  %66 = icmp ult i64 %arg2, 12291000
  %67 = add i64 %arg1, 588464
  %68 = inttoptr i64 %67 to i64*
  %69 = load i64, i64* %68, align 8
  br i1 %66, label %dec_label_pc_11478, label %dec_label_pc_11465, !insn.addr !7622

dec_label_pc_11465:                               ; preds = %dec_label_pc_1145c
  %70 = call i64 @TS_EnableProcProgramID.349(i64 %69, i64 ptrtoint (i32* @global_var_1 to i64)), !insn.addr !7623
  br label %dec_label_pc_11489, !insn.addr !7624

dec_label_pc_11478:                               ; preds = %dec_label_pc_1145c
  %71 = call i64 @TS_EnableProcProgramID.349(i64 %69, i64 0), !insn.addr !7625
  br label %dec_label_pc_11489, !insn.addr !7625

dec_label_pc_11489:                               ; preds = %dec_label_pc_11478, %dec_label_pc_11465, %dec_label_pc_11442, %dec_label_pc_113d4
  store i8 0, i8* %34, align 1, !insn.addr !7626
  %72 = add i64 %arg1, ptrtoint (i32** @global_var_1c70 to i64), !insn.addr !7627
  %73 = inttoptr i64 %72 to i32*, !insn.addr !7627
  %74 = load i32, i32* %73, align 4, !insn.addr !7627
  %75 = icmp eq i32 %74, 0, !insn.addr !7627
  %76 = icmp eq i1 %75, false, !insn.addr !7628
  br i1 %76, label %dec_label_pc_114d4, label %dec_label_pc_1149e, !insn.addr !7628

dec_label_pc_1149e:                               ; preds = %dec_label_pc_11489
  %77 = add i64 %9, 20400, !insn.addr !7629
  %78 = inttoptr i64 %77 to i8*, !insn.addr !7629
  %79 = load i8, i8* %78, align 1, !insn.addr !7629
  %80 = zext i8 %79 to i32, !insn.addr !7630
  %81 = mul i32 %80, 256, !insn.addr !7630
  %82 = add i64 %9, 20399, !insn.addr !7631
  %83 = inttoptr i64 %82 to i8*, !insn.addr !7631
  %84 = load i8, i8* %83, align 1, !insn.addr !7631
  %85 = zext i8 %84 to i32, !insn.addr !7632
  %86 = or i32 %81, %85, !insn.addr !7632
  %87 = add i64 %9, 21778, !insn.addr !7633
  %88 = inttoptr i64 %87 to i8*, !insn.addr !7633
  %89 = load i8, i8* %88, align 1, !insn.addr !7633
  %90 = zext i8 %89 to i32, !insn.addr !7634
  %91 = mul i32 %90, 256, !insn.addr !7634
  %92 = add i64 %9, 21777, !insn.addr !7635
  %93 = inttoptr i64 %92 to i8*, !insn.addr !7635
  %94 = load i8, i8* %93, align 1, !insn.addr !7635
  %95 = zext i8 %94 to i32, !insn.addr !7636
  %96 = or i32 %91, %95, !insn.addr !7636
  %97 = xor i32 %96, %86, !insn.addr !7637
  %98 = add i64 %arg1, 588480, !insn.addr !7638
  %99 = inttoptr i64 %98 to i32*, !insn.addr !7638
  store i32 %97, i32* %99, align 4, !insn.addr !7638
  br label %dec_label_pc_114d4, !insn.addr !7638

dec_label_pc_114d4:                               ; preds = %dec_label_pc_1149e, %dec_label_pc_11489
  %100 = call i64 @Tnim_AcqInit.390(i64 %arg1), !insn.addr !7639
  %101 = add i64 %arg1, 600440, !insn.addr !7640
  %102 = inttoptr i64 %101 to i8*, !insn.addr !7640
  %103 = load i8, i8* %102, align 1, !insn.addr !7640
  %104 = icmp eq i8 %103, 1, !insn.addr !7640
  %105 = icmp eq i1 %104, false, !insn.addr !7641
  br i1 %105, label %dec_label_pc_115e3, label %dec_label_pc_114e9, !insn.addr !7641

dec_label_pc_114e9:                               ; preds = %dec_label_pc_114d4
  %106 = add i64 %arg1, 589182, !insn.addr !7642
  %107 = inttoptr i64 %106 to i8*, !insn.addr !7642
  %108 = load i8, i8* %107, align 1, !insn.addr !7642
  %109 = icmp eq i8 %108, 1, !insn.addr !7642
  %110 = icmp eq i1 %109, false, !insn.addr !7643
  br i1 %110, label %dec_label_pc_115e3, label %dec_label_pc_114f6, !insn.addr !7643

dec_label_pc_114f6:                               ; preds = %dec_label_pc_114e9
  %111 = load i8, i8* %11, align 1, !insn.addr !7644
  %112 = icmp eq i8 %111, 0, !insn.addr !7644
  %113 = sext i1 %112 to i32, !insn.addr !7645
  %114 = add i32 %113, ptrtoint (i32* @global_var_1 to i32), !insn.addr !7646
  %115 = sext i1 %112 to i64, !insn.addr !7647
  %116 = add nsw i64 %115, zext (i32 ptrtoint (i32* @global_var_2 to i32) to i64), !insn.addr !7648
  %117 = and i64 %116, 4294967295, !insn.addr !7648
  %118 = call i64 @vUSB_Wait.362(i64 ptrtoint (i8* @global_var_a to i64)), !insn.addr !7649
  %119 = add i64 %9, 22425, !insn.addr !7650
  %120 = inttoptr i64 %119 to i8*, !insn.addr !7650
  %121 = load i8, i8* %120, align 1, !insn.addr !7650
  %122 = icmp eq i8 %121, 0, !insn.addr !7650
  %123 = icmp eq i1 %122, false, !insn.addr !7651
  br i1 %123, label %dec_label_pc_11581, label %dec_label_pc_11528, !insn.addr !7651

dec_label_pc_11528:                               ; preds = %dec_label_pc_114f6
  %124 = call i64 @SetSlowdownIC.242(i64 %arg1, i32 %114, i64 %117, i64* bitcast (i32* @global_var_1 to i64*), i64* bitcast (i32* @global_var_1 to i64*), i64 71), !insn.addr !7652
  %125 = call i64 @vUSB_Wait.362(i64 ptrtoint (i8* @global_var_a to i64)), !insn.addr !7653
  %126 = call i64 @SetSlowdownIC.242(i64 %arg1, i32 %114, i64 %117, i64* null, i64* bitcast (i32* @global_var_1 to i64*), i64 71), !insn.addr !7654
  %127 = trunc i64 %126 to i8, !insn.addr !7655
  %128 = icmp eq i8 %127, 0, !insn.addr !7655
  %129 = icmp eq i1 %128, false, !insn.addr !7656
  store i64 %126, i64* %merge.reg2mem, !insn.addr !7656
  br i1 %129, label %dec_label_pc_115d9, label %dec_label_pc_1157c, !insn.addr !7656

dec_label_pc_1157c:                               ; preds = %dec_label_pc_1160d, %dec_label_pc_11528
  %merge.reload = load i64, i64* %merge.reg2mem
  ret i64 %merge.reload, !insn.addr !7657

dec_label_pc_11581:                               ; preds = %dec_label_pc_114f6
  %130 = call i64 @SetSlowdownIC.242(i64 %arg1, i32 %114, i64 %117, i64* null, i64* bitcast (i32* @global_var_1 to i64*), i64 71), !insn.addr !7658
  %131 = call i64 @vUSB_Wait.362(i64 ptrtoint (i8* @global_var_a to i64)), !insn.addr !7659
  %132 = call i64 @SetSlowdownIC.242(i64 %arg1, i32 %114, i64 %117, i64* bitcast (i32* @global_var_1 to i64*), i64* bitcast (i32* @global_var_1 to i64*), i64 71), !insn.addr !7660
  br label %dec_label_pc_115d9, !insn.addr !7661

dec_label_pc_115d9:                               ; preds = %dec_label_pc_11581, %dec_label_pc_11528
  %133 = call i64 @vUSB_Wait.362(i64 ptrtoint (i8* @global_var_a to i64)), !insn.addr !7662
  br label %dec_label_pc_115e3, !insn.addr !7662

dec_label_pc_115e3:                               ; preds = %dec_label_pc_115d9, %dec_label_pc_114e9, %dec_label_pc_114d4
  %134 = add i64 %arg1, 5261, !insn.addr !7663
  %135 = inttoptr i64 %134 to i8*, !insn.addr !7663
  %136 = load i8, i8* %135, align 1, !insn.addr !7663
  switch i8 %136, label %dec_label_pc_115f6 [
    i8 3, label %dec_label_pc_115fa
    i8 15, label %dec_label_pc_115fa
    i8 4, label %dec_label_pc_115fa
  ]

dec_label_pc_115f6:                               ; preds = %dec_label_pc_115e3
  %137 = icmp eq i8 %136, 17, !insn.addr !7664
  %138 = icmp eq i1 %137, false, !insn.addr !7665
  %139 = icmp ult i64 %arg2, 11727480
  %or.cond7 = or i1 %139, %138
  br i1 %or.cond7, label %dec_label_pc_1160d, label %dec_label_pc_11603, !insn.addr !7665

dec_label_pc_115fa:                               ; preds = %dec_label_pc_115e3, %dec_label_pc_115e3, %dec_label_pc_115e3
  %.old = icmp ult i64 %arg2, 11727480
  br i1 %.old, label %dec_label_pc_1160d, label %dec_label_pc_11603, !insn.addr !7666

dec_label_pc_11603:                               ; preds = %dec_label_pc_115f6, %dec_label_pc_115fa
  %140 = call i64 @vUSB_Wait.362(i64 500), !insn.addr !7667
  br label %dec_label_pc_1160d, !insn.addr !7667

dec_label_pc_1160d:                               ; preds = %dec_label_pc_11603, %dec_label_pc_115fa, %dec_label_pc_115f6
  %141 = call i64 @USB_FilterReset.459(i64 %9, i64 %13), !insn.addr !7668
  %142 = trunc i64 %141 to i32, !insn.addr !7669
  %143 = icmp eq i32 %142, ptrtoint (i32* @global_var_1 to i32), !insn.addr !7669
  %144 = call i64 @DTV_SetPidFilterBoundary.194(i64 %arg1, i64 8191, i64 8191)
  store i64 4294967290, i64* %merge.reg2mem, !insn.addr !7670
  br i1 %143, label %dec_label_pc_11644, label %dec_label_pc_1157c, !insn.addr !7670

dec_label_pc_11644:                               ; preds = %dec_label_pc_1160d
  %145 = add i64 %.pre, 1152, !insn.addr !7671
  %146 = inttoptr i64 %145 to i8*, !insn.addr !7671
  %147 = load i8, i8* %146, align 1, !insn.addr !7671
  %148 = icmp eq i8 %147, 1, !insn.addr !7671
  %149 = icmp eq i1 %148, false, !insn.addr !7672
  %150 = icmp eq i64 %18, 0, !insn.addr !7673
  %or.cond6 = or i1 %150, %149
  br i1 %or.cond6, label %dec_label_pc_11681, label %dec_label_pc_1166b, !insn.addr !7672

dec_label_pc_1166b:                               ; preds = %dec_label_pc_11644
  %151 = call i64 @Hardware_StopTSStream.617(i64 %9, i64 %13), !insn.addr !7674
  %152 = call i64 @Hardware_StartTSStream.564(i64 %9, i8 %12), !insn.addr !7675
  br label %dec_label_pc_11681, !insn.addr !7675

dec_label_pc_11681:                               ; preds = %dec_label_pc_1166b, %dec_label_pc_11644
  %153 = add i64 %arg1, 588477, !insn.addr !7676
  %154 = inttoptr i64 %153 to i8*, !insn.addr !7676
  store i8 ptrtoint (i32* @global_var_1 to i8), i8* %154, align 1, !insn.addr !7676
  %155 = call i64 @DTV_SetIsStreamScramble.432(i64 %arg1), !insn.addr !7677
  ret i64 %155, !insn.addr !7677
}

define i8 @InitSlowDownIC(i64 %pTnim) local_unnamed_addr {
dec_label_pc_11698:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = call i1 @__decompiler_undefined_function_2()
  %2 = zext i1 %1 to i64, !insn.addr !7678
  %3 = sub i64 %0, %2, !insn.addr !7678
  %4 = and i64 %3, 4294967295, !insn.addr !7678
  %5 = inttoptr i64 %4 to i8*, !insn.addr !7679
  %6 = load i8, i8* %5, align 1, !insn.addr !7679
  %7 = trunc i64 %3 to i8, !insn.addr !7679
  %8 = add i8 %6, %7, !insn.addr !7679
  store i8 %8, i8* %5, align 1, !insn.addr !7679
  ret i8 ptrtoint (i32* @global_var_1 to i8), !insn.addr !7680
}

define i64 @InitSlowDownIC.258(i64 %arg1) local_unnamed_addr {
dec_label_pc_116c8:
  %0 = call i64 @mcount(), !insn.addr !7681
  ret i64 0, !insn.addr !7682
}

define i8 @bBCardUninit(i64 %BCAS_Dev) local_unnamed_addr {
dec_label_pc_116f6:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = call i64 @__decompiler_undefined_function_0()
  %2 = add i64 %1, 22425, !insn.addr !7683
  %3 = inttoptr i64 %2 to i8*, !insn.addr !7683
  %4 = load i8, i8* %3, align 1, !insn.addr !7683
  %5 = zext i8 %4 to i64, !insn.addr !7683
  %6 = trunc i64 %0 to i32, !insn.addr !7684
  %7 = inttoptr i64 %5 to i64*, !insn.addr !7684
  %8 = call i64 @SetSlowdownIC.242(i64 %BCAS_Dev, i32 %6, i64 zext (i32 ptrtoint (i32* @global_var_2 to i32) to i64), i64* %7, i64* bitcast (i32* @global_var_1 to i64*), i64 71), !insn.addr !7684
  %9 = trunc i64 %8 to i8, !insn.addr !7685
  %10 = icmp eq i8 %9, 0, !insn.addr !7685
  %11 = icmp eq i1 %10, false, !insn.addr !7686
  %12 = zext i1 %11 to i8, !insn.addr !7686
  ret i8 %12, !insn.addr !7687
}

define i64 @bBCardUninit.310(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_11726:
  %merge.reg2mem = alloca i64, !insn.addr !7688
  %rdx.0.reg2mem = alloca i64, !insn.addr !7688
  %rax.0.reg2mem = alloca i64, !insn.addr !7688
  %0 = call i64 @mcount(), !insn.addr !7689
  %1 = add i64 %arg1, 64, !insn.addr !7690
  %2 = inttoptr i64 %1 to i64*, !insn.addr !7690
  %3 = load i64, i64* %2, align 8, !insn.addr !7690
  %4 = add i64 %arg1, 5249, !insn.addr !7691
  %5 = inttoptr i64 %4 to i8*, !insn.addr !7691
  %6 = load i8, i8* %5, align 1, !insn.addr !7691
  %7 = zext i8 %6 to i64, !insn.addr !7691
  %8 = add i64 %3, 21697, !insn.addr !7692
  %9 = inttoptr i64 %8 to i8*, !insn.addr !7692
  %10 = load i8, i8* %9, align 1, !insn.addr !7692
  %11 = icmp eq i8 %10, 0, !insn.addr !7692
  %12 = icmp eq i1 %11, false, !insn.addr !7693
  store i64 0, i64* %rax.0.reg2mem, !insn.addr !7693
  store i64 %3, i64* %rdx.0.reg2mem, !insn.addr !7693
  br i1 %12, label %dec_label_pc_1176c, label %dec_label_pc_11756, !insn.addr !7693

dec_label_pc_11756:                               ; preds = %dec_label_pc_11726
  %13 = add i64 %3, 21698, !insn.addr !7694
  %14 = add i64 %13, %7, !insn.addr !7694
  %15 = inttoptr i64 %14 to i8*, !insn.addr !7694
  store i8 0, i8* %15, align 1, !insn.addr !7694
  store i64 and (i64 ptrtoint (i32* @global_var_1 to i64), i64 4294967295), i64* %merge.reg2mem, !insn.addr !7695
  br label %dec_label_pc_11784, !insn.addr !7695

dec_label_pc_1176c:                               ; preds = %dec_label_pc_11726, %dec_label_pc_11779
  %rdx.0.reload = load i64, i64* %rdx.0.reg2mem
  %rax.0.reload = load i64, i64* %rax.0.reg2mem
  %16 = trunc i64 %rax.0.reload to i8, !insn.addr !7696
  %17 = icmp eq i8 %6, %16, !insn.addr !7696
  br i1 %17, label %dec_label_pc_11779, label %dec_label_pc_11770, !insn.addr !7697

dec_label_pc_11770:                               ; preds = %dec_label_pc_1176c
  %18 = add i64 %rdx.0.reload, 21698, !insn.addr !7698
  %19 = inttoptr i64 %18 to i8*, !insn.addr !7698
  %20 = load i8, i8* %19, align 1, !insn.addr !7698
  %21 = icmp eq i8 %20, 1, !insn.addr !7698
  br i1 %21, label %dec_label_pc_11789, label %dec_label_pc_11779, !insn.addr !7699

dec_label_pc_11779:                               ; preds = %dec_label_pc_11770, %dec_label_pc_1176c
  %22 = add nuw nsw i64 %rax.0.reload, zext (i32 ptrtoint (i32* @global_var_1 to i32) to i64), !insn.addr !7700
  %23 = and i64 %22, 4294967295, !insn.addr !7700
  %24 = add i64 %rdx.0.reload, 1, !insn.addr !7701
  %25 = trunc i64 %22 to i8, !insn.addr !7702
  %26 = icmp eq i8 %25, ptrtoint (i8* @global_var_8 to i8), !insn.addr !7702
  %27 = icmp eq i1 %26, false, !insn.addr !7703
  store i64 %23, i64* %rax.0.reg2mem, !insn.addr !7703
  store i64 %24, i64* %rdx.0.reg2mem, !insn.addr !7703
  store i64 %23, i64* %merge.reg2mem, !insn.addr !7703
  br i1 %27, label %dec_label_pc_1176c, label %dec_label_pc_11784, !insn.addr !7703

dec_label_pc_11784:                               ; preds = %dec_label_pc_11779, %dec_label_pc_11756, %dec_label_pc_11789
  %merge.reload = load i64, i64* %merge.reg2mem
  ret i64 %merge.reload, !insn.addr !7704

dec_label_pc_11789:                               ; preds = %dec_label_pc_11770
  %28 = add i64 %3, 21698, !insn.addr !7705
  %29 = add i64 %28, %7, !insn.addr !7705
  %30 = inttoptr i64 %29 to i8*, !insn.addr !7705
  store i8 0, i8* %30, align 1, !insn.addr !7705
  store i64 and (i64 ptrtoint (i32* @global_var_1 to i64), i64 4294967295), i64* %merge.reg2mem, !insn.addr !7706
  br label %dec_label_pc_11784, !insn.addr !7706
}

define i32 @DTV_UnInit(i64 %pTnim) local_unnamed_addr {
dec_label_pc_1183e:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = trunc i64 %0 to i32, !insn.addr !7707
  ret i32 %1, !insn.addr !7707
}

define i64 @DTV_UnInit.331(i64 %arg1) local_unnamed_addr {
dec_label_pc_1186e:
  %rax.2.reg2mem = alloca i64, !insn.addr !7708
  %rax.1.reg2mem = alloca i64, !insn.addr !7708
  %rsi.1.reg2mem = alloca i64, !insn.addr !7708
  %rax.0.reg2mem = alloca i64, !insn.addr !7708
  %rsi.0.in.reg2mem = alloca i8, !insn.addr !7708
  %stack_var_-41 = alloca i8, align 1
  %0 = call i64 @mcount(), !insn.addr !7709
  %1 = add i64 %arg1, 7488, !insn.addr !7710
  %2 = inttoptr i64 %1 to i32*, !insn.addr !7710
  %3 = load i32, i32* %2, align 4, !insn.addr !7710
  store i32 0, i32* %2, align 4, !insn.addr !7711
  %4 = add i64 %arg1, 5592, !insn.addr !7712
  %5 = inttoptr i64 %4 to i8*, !insn.addr !7712
  %6 = load i8, i8* %5, align 1, !insn.addr !7712
  %7 = icmp eq i8 %6, 1, !insn.addr !7712
  %8 = icmp eq i1 %7, false, !insn.addr !7713
  store i64 ptrtoint (i32* @global_var_1 to i64), i64* %rax.0.reg2mem, !insn.addr !7713
  br i1 %8, label %dec_label_pc_1194c, label %dec_label_pc_118cd, !insn.addr !7713

dec_label_pc_118cd:                               ; preds = %dec_label_pc_1186e
  store i8 0, i8* %stack_var_-41, align 1, !insn.addr !7714
  %9 = add i64 %arg1, 588972, !insn.addr !7715
  %10 = inttoptr i64 %9 to i8*, !insn.addr !7715
  %11 = load i8, i8* %10, align 1, !insn.addr !7715
  %12 = and i32 %3, -256
  %13 = or i32 %12, 128
  %14 = zext i32 %13 to i64, !insn.addr !7716
  %15 = inttoptr i64 %14 to i64*, !insn.addr !7717
  %16 = call i64 @DTV_DecEncChip_I2C_Write.354(i64 %arg1, i8 %11, i64* nonnull %15, i8* nonnull %stack_var_-41, i64* bitcast (i32* @global_var_1 to i64*)), !insn.addr !7717
  %17 = load i8, i8* %5, align 1, !insn.addr !7718
  %18 = icmp eq i8 %17, 1, !insn.addr !7718
  store i8 %11, i8* %rsi.0.in.reg2mem, !insn.addr !7719
  br i1 %18, label %dec_label_pc_1191c, label %dec_label_pc_118f8, !insn.addr !7719

dec_label_pc_118f8:                               ; preds = %dec_label_pc_118cd
  %19 = load i8, i8* %10, align 1, !insn.addr !7720
  %20 = call i64 @DTV_DecEncChip_I2C_Write.354(i64 %arg1, i8 %19, i64* inttoptr (i64 128 to i64*), i8* nonnull %stack_var_-41, i64* bitcast (i32* @global_var_1 to i64*)), !insn.addr !7721
  store i8 %19, i8* %rsi.0.in.reg2mem, !insn.addr !7721
  br label %dec_label_pc_1191c, !insn.addr !7721

dec_label_pc_1191c:                               ; preds = %dec_label_pc_118f8, %dec_label_pc_118cd
  %rsi.0.in.reload = load i8, i8* %rsi.0.in.reg2mem
  %rsi.0 = zext i8 %rsi.0.in.reload to i64
  %21 = add i64 %arg1, ptrtoint (i8* @global_var_8 to i64), !insn.addr !7722
  %22 = call i64 @bBCardUninit.310(i64 %21, i64 %rsi.0), !insn.addr !7723
  %23 = add i64 %arg1, 588476, !insn.addr !7724
  %24 = inttoptr i64 %23 to i8*, !insn.addr !7724
  %25 = load i8, i8* %24, align 1, !insn.addr !7724
  %26 = icmp eq i8 %25, 1, !insn.addr !7724
  %27 = icmp eq i1 %26, false, !insn.addr !7725
  store i64 %22, i64* %rax.0.reg2mem, !insn.addr !7725
  store i64 %rsi.0, i64* %rsi.1.reg2mem, !insn.addr !7725
  br i1 %27, label %dec_label_pc_1194c, label %dec_label_pc_1192e, !insn.addr !7725

dec_label_pc_1192e:                               ; preds = %dec_label_pc_1191c
  store i8 0, i8* %24, align 1, !insn.addr !7726
  %28 = add i64 %arg1, 588464, !insn.addr !7727
  %29 = inttoptr i64 %28 to i64*, !insn.addr !7727
  %30 = load i64, i64* %29, align 8, !insn.addr !7727
  %31 = call i64 @TS_Destroy.387(i64 %30), !insn.addr !7728
  store i64 0, i64* %29, align 8, !insn.addr !7729
  store i64 %31, i64* %rax.0.reg2mem, !insn.addr !7729
  store i64 %rsi.0, i64* %rsi.1.reg2mem, !insn.addr !7729
  br label %dec_label_pc_1194c, !insn.addr !7729

dec_label_pc_1194c:                               ; preds = %dec_label_pc_1192e, %dec_label_pc_1191c, %dec_label_pc_1186e
  %rsi.1.reload = load i64, i64* %rsi.1.reg2mem
  %rax.0.reload = load i64, i64* %rax.0.reg2mem
  %32 = add i64 %arg1, 588952, !insn.addr !7730
  %33 = inttoptr i64 %32 to i64*, !insn.addr !7730
  %34 = load i64, i64* %33, align 8, !insn.addr !7730
  %35 = icmp eq i64 %34, 0, !insn.addr !7731
  store i64 %rax.0.reload, i64* %rax.1.reg2mem, !insn.addr !7732
  br i1 %35, label %dec_label_pc_1195d, label %dec_label_pc_11958, !insn.addr !7732

dec_label_pc_11958:                               ; preds = %dec_label_pc_1194c
  %36 = trunc i64 %34 to i32, !insn.addr !7733
  %37 = call i64 @FUSB_ExFreePool.600(i32 %36, i64 %rsi.1.reload), !insn.addr !7733
  store i64 %37, i64* %rax.1.reg2mem, !insn.addr !7733
  br label %dec_label_pc_1195d, !insn.addr !7733

dec_label_pc_1195d:                               ; preds = %dec_label_pc_11958, %dec_label_pc_1194c
  %rax.1.reload = load i64, i64* %rax.1.reg2mem
  %38 = add i64 %arg1, 588960, !insn.addr !7734
  %39 = inttoptr i64 %38 to i64*, !insn.addr !7734
  %40 = load i64, i64* %39, align 8, !insn.addr !7734
  %41 = icmp eq i64 %40, 0, !insn.addr !7735
  store i64 %rax.1.reload, i64* %rax.2.reg2mem, !insn.addr !7736
  br i1 %41, label %dec_label_pc_1196e, label %dec_label_pc_11969, !insn.addr !7736

dec_label_pc_11969:                               ; preds = %dec_label_pc_1195d
  %42 = trunc i64 %40 to i32, !insn.addr !7737
  %43 = call i64 @FUSB_ExFreePool.600(i32 %42, i64 %rsi.1.reload), !insn.addr !7737
  store i64 %43, i64* %rax.2.reg2mem, !insn.addr !7737
  br label %dec_label_pc_1196e, !insn.addr !7737

dec_label_pc_1196e:                               ; preds = %dec_label_pc_11969, %dec_label_pc_1195d
  %rax.2.reload = load i64, i64* %rax.2.reg2mem
  ret i64 %rax.2.reload, !insn.addr !7737
}

define i8 @bReadMPUI2CData(i8 %MPU_Slave_Addr, i8 %Target_Slave_Addr, i8 %RegOffset, i8 %u16ReadLen, i8* %pDataBuf, i8 %withRSA, i64 %hCtrlTransfer) local_unnamed_addr {
dec_label_pc_1196f:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = call i64 @__decompiler_undefined_function_0()
  %2 = call i64 @__decompiler_undefined_function_0()
  %3 = lshr i64 %2, ptrtoint (i8* @global_var_8 to i64), !insn.addr !7738
  %4 = trunc i64 %3 to i8, !insn.addr !7738
  %5 = call i64 @FUSBDTV_Cmd_StartDSC(i64 %0, i8 %4), !insn.addr !7739
  %6 = call i64 @DTV_TunerPower.444(i64 %1), !insn.addr !7740
  ret i8 ptrtoint (i32* @global_var_1 to i8), !insn.addr !7741
}

define i64 @bReadMPUI2CData.238(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4, i64 %arg5, i64 %arg6, i64 %arg7) local_unnamed_addr {
dec_label_pc_1199f:
  %0 = call i64 @mcount(), !insn.addr !7742
  %1 = urem i64 %arg3, 256, !insn.addr !7743
  ret i64 %1, !insn.addr !7744
}

define i8 @DTV_DecEncChip_I2C_Read(i64 %pTuner, i8 %I2C_Addr, i8 %byReg, i8* %pBuffer, i8 %byCount, i8 %withRSA) local_unnamed_addr {
dec_label_pc_119e0:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = trunc i64 %0 to i8, !insn.addr !7745
  ret i8 %1, !insn.addr !7745
}

define i64 @function_119e3() local_unnamed_addr {
dec_label_pc_119e3:
  %0 = call i64 @__decompiler_undefined_function_0()
  ret i64 %0, !insn.addr !7746
}

define i64 @DTV_DecEncChip_I2C_Read.612(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4, i64 %arg5) local_unnamed_addr {
dec_label_pc_11a10:
  %0 = call i64 @mcount(), !insn.addr !7747
  %1 = add i64 %arg1, 600425, !insn.addr !7748
  %2 = inttoptr i64 %1 to i8*, !insn.addr !7748
  %3 = load i8, i8* %2, align 1, !insn.addr !7748
  %4 = zext i8 %3 to i64, !insn.addr !7748
  ret i64 %4, !insn.addr !7749
}

define i8 @ReadSlowdownICVersion(i64 %pTuner, i8* %SlowdownICVersion) local_unnamed_addr {
dec_label_pc_11a45:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = call i64 @__decompiler_undefined_function_0()
  %2 = call i64 @__decompiler_undefined_function_0()
  %3 = call i64 @__decompiler_undefined_function_0()
  %4 = call i64 @__decompiler_undefined_function_0()
  %5 = ptrtoint i8* %SlowdownICVersion to i64
  %6 = and i64 %2, -65281, !insn.addr !7750
  %7 = or i64 %6, 51456, !insn.addr !7750
  %8 = and i64 %0, 4294967295, !insn.addr !7751
  %9 = and i64 %4, 4294967295, !insn.addr !7752
  %10 = call i64 @bReadMPUI2CData.238(i64 %9, i64 %5, i64 %7, i64 %8, i64 %3, i64 %1, i64 ptrtoint (i32* @0 to i64)), !insn.addr !7753
  %11 = trunc i64 %10 to i8, !insn.addr !7754
  ret i8 %11, !insn.addr !7754
}

define i64 @ReadSlowdownICVersion.268(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_11a75:
  %0 = call i64 @mcount(), !insn.addr !7755
  ret i64 4294967297, !insn.addr !7756
}

define i8 @DTV_IsSlowDownICExisted(i64 %pTuner) local_unnamed_addr {
dec_label_pc_11abf:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = call i64 @__decompiler_undefined_function_0()
  %2 = call i64 @__decompiler_undefined_function_0()
  %3 = call i64 @__decompiler_undefined_function_0()
  %4 = call i64 @__decompiler_undefined_function_0()
  %5 = trunc i64 %4 to i8
  %6 = mul i8 %5, 2, !insn.addr !7757
  %7 = inttoptr i64 %4 to i8*, !insn.addr !7757
  store i8 %6, i8* %7, align 1, !insn.addr !7757
  %8 = call i64 @DTV_DecEncChip_I2C_Read.612(i64 %pTuner, i64 %1, i64 %2, i64 %3, i64 %0), !insn.addr !7758
  %9 = trunc i64 %8 to i8, !insn.addr !7759
  ret i8 %9, !insn.addr !7759
}

define i8 @bBCardInit(i64 %BCAS_Dev) local_unnamed_addr {
dec_label_pc_11ad6:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = call i64 @__decompiler_undefined_function_0()
  %2 = call i64 @__decompiler_undefined_function_0()
  %3 = inttoptr i64 %2 to i64*, !insn.addr !7760
  %4 = inttoptr i64 %1 to i64*, !insn.addr !7760
  %5 = call i64 @TLIB_I2C_Read.262(i64 %BCAS_Dev, i64 210, i64 0, i64* %3, i64* %4, i64 %0), !insn.addr !7760
  %6 = trunc i64 %5 to i8, !insn.addr !7761
  ret i8 %6, !insn.addr !7761
}

define i64 @DTV_IsSlowDownICExisted.531(i64 %arg1) local_unnamed_addr {
dec_label_pc_11aef:
  %0 = call i64 @mcount(), !insn.addr !7762
  %1 = add i64 %arg1, 600440, !insn.addr !7763
  %2 = call i64 @ReadSlowdownICVersion.268(i64 %arg1, i64 %1), !insn.addr !7764
  ret i64 %2, !insn.addr !7765
}

define i64 @bBCardInit.504(i64 %arg1) local_unnamed_addr {
dec_label_pc_11b06:
  %rax.0.reg2mem = alloca i64, !insn.addr !7766
  %.pre-phi3.reg2mem = alloca i8*, !insn.addr !7766
  %.pre-phi.reg2mem = alloca i64, !insn.addr !7766
  %storemerge.reg2mem = alloca i64, !insn.addr !7766
  %storemerge2.reg2mem = alloca i8, !insn.addr !7766
  %stack_var_-72 = alloca i32, align 4
  %0 = call i64 @mcount(), !insn.addr !7767
  %1 = add i64 %arg1, 64, !insn.addr !7768
  %2 = inttoptr i64 %1 to i64*, !insn.addr !7768
  %3 = load i64, i64* %2, align 8, !insn.addr !7768
  %4 = add i64 %arg1, 5249, !insn.addr !7769
  %5 = inttoptr i64 %4 to i8*, !insn.addr !7769
  %6 = load i8, i8* %5, align 1, !insn.addr !7769
  %7 = add i64 %arg1, 72, !insn.addr !7770
  %8 = inttoptr i64 %7 to i64*, !insn.addr !7770
  %9 = load i64, i64* %8, align 8, !insn.addr !7770
  %10 = icmp eq i8 %6, 0, !insn.addr !7771
  %.pre = ptrtoint i32* %stack_var_-72 to i64
  store i8 74, i8* %storemerge2.reg2mem, !insn.addr !7772
  store i64 90, i64* %storemerge.reg2mem, !insn.addr !7772
  br i1 %10, label %dec_label_pc_11beb, label %dec_label_pc_11b43, !insn.addr !7772

dec_label_pc_11b43:                               ; preds = %dec_label_pc_11b06
  %11 = call i64 @DTV_DecEncChip_I2C_Read.612(i64 %9, i64 74, i64 ptrtoint (i8** @global_var_9 to i64), i64 %.pre, i64 ptrtoint (i32* @global_var_1 to i64)), !insn.addr !7773
  %12 = trunc i64 %11 to i8, !insn.addr !7774
  %13 = icmp eq i8 %12, ptrtoint (i32* @global_var_1 to i8), !insn.addr !7774
  %14 = icmp eq i1 %13, false, !insn.addr !7775
  br i1 %14, label %dec_label_pc_11b81, label %dec_label_pc_11b69, !insn.addr !7775

dec_label_pc_11b69:                               ; preds = %dec_label_pc_11b43
  %15 = load i32, i32* %stack_var_-72, align 4, !insn.addr !7776
  %16 = udiv i32 %15, 2, !insn.addr !7777
  %17 = urem i32 %16, 32
  store i8 74, i8* %storemerge2.reg2mem
  store i8 74, i8* %storemerge2.reg2mem
  store i8 74, i8* %storemerge2.reg2mem
  store i64 90, i64* %storemerge.reg2mem
  store i64 90, i64* %storemerge.reg2mem
  store i64 90, i64* %storemerge.reg2mem
  switch i32 %17, label %dec_label_pc_11b81 [
    i32 15, label %dec_label_pc_11beb
    i32 4, label %dec_label_pc_11beb
    i32 17, label %dec_label_pc_11beb
  ]

dec_label_pc_11b81:                               ; preds = %dec_label_pc_11b69, %dec_label_pc_11b43
  %18 = call i64 @TLIB_SetGPIO.391(i64 %3, i64* inttoptr (i64 255 to i64*), i64* inttoptr (i64 128 to i64*)), !insn.addr !7778
  %19 = call i64 @TLIB_Delay.388(i64* bitcast (i8** @global_var_19 to i64*)), !insn.addr !7779
  %20 = call i64 @TLIB_SetGPIO.391(i64 %3, i64* null, i64* inttoptr (i64 128 to i64*)), !insn.addr !7780
  %21 = call i64 @TLIB_Delay.388(i64* bitcast (i8** @global_var_19 to i64*)), !insn.addr !7781
  %22 = call i64 @TLIB_SetGPIO.391(i64 %3, i64* inttoptr (i64 255 to i64*), i64* inttoptr (i64 128 to i64*)), !insn.addr !7782
  %23 = call i64 @TLIB_Delay.388(i64* inttoptr (i64 50 to i64*)), !insn.addr !7783
  store i8 76, i8* %storemerge2.reg2mem, !insn.addr !7784
  store i64 92, i64* %storemerge.reg2mem, !insn.addr !7784
  br label %dec_label_pc_11beb, !insn.addr !7784

dec_label_pc_11beb:                               ; preds = %dec_label_pc_11b06, %dec_label_pc_11b69, %dec_label_pc_11b69, %dec_label_pc_11b69, %dec_label_pc_11b81
  %storemerge.reload = load i64, i64* %storemerge.reg2mem
  %24 = call i64 @DTV_DecEncChip_I2C_Read.612(i64 %9, i64 %storemerge.reload, i64 ptrtoint (i8** @global_var_9 to i64), i64 %.pre, i64 ptrtoint (i32* @global_var_1 to i64)), !insn.addr !7785
  %25 = trunc i64 %24 to i8, !insn.addr !7786
  %26 = icmp eq i8 %25, 0, !insn.addr !7786
  %27 = icmp eq i1 %26, false, !insn.addr !7787
  br i1 %27, label %dec_label_pc_11c54, label %dec_label_pc_11c10, !insn.addr !7787

dec_label_pc_11c10:                               ; preds = %dec_label_pc_11beb
  %storemerge2.reload = load i8, i8* %storemerge2.reg2mem
  %28 = call i64 @TLIB_Delay.388(i64* bitcast (i8* @global_var_a to i64*)), !insn.addr !7788
  %29 = zext i8 %storemerge2.reload to i64
  %30 = call i64 @DTV_DecEncChip_I2C_Read.612(i64 %9, i64 %29, i64 ptrtoint (i8** @global_var_9 to i64), i64 %.pre, i64 ptrtoint (i32* @global_var_1 to i64)), !insn.addr !7789
  %31 = add i64 %9, 588972
  %32 = inttoptr i64 %31 to i8*
  store i8 %storemerge2.reload, i8* %32, align 1, !insn.addr !7790
  store i64 %29, i64* %.pre-phi.reg2mem, !insn.addr !7791
  store i8* %32, i8** %.pre-phi3.reg2mem, !insn.addr !7791
  br label %dec_label_pc_11c5c, !insn.addr !7791

dec_label_pc_11c54:                               ; preds = %dec_label_pc_11beb
  %33 = trunc i64 %storemerge.reload to i8, !insn.addr !7792
  %34 = add i64 %9, 588972
  %35 = inttoptr i64 %34 to i8*
  store i8 %33, i8* %35, align 1, !insn.addr !7792
  store i64 %storemerge.reload, i64* %.pre-phi.reg2mem, !insn.addr !7792
  store i8* %35, i8** %.pre-phi3.reg2mem, !insn.addr !7792
  br label %dec_label_pc_11c5c, !insn.addr !7792

dec_label_pc_11c5c:                               ; preds = %dec_label_pc_11c54, %dec_label_pc_11c10
  %.pre-phi3.reload = load i8*, i8** %.pre-phi3.reg2mem
  %.pre-phi.reload = load i64, i64* %.pre-phi.reg2mem
  %36 = call i64 @DTV_DecEncChip_I2C_Read.612(i64 %9, i64 %.pre-phi.reload, i64 ptrtoint (i8** @global_var_9 to i64), i64 %.pre, i64 ptrtoint (i32* @global_var_1 to i64)), !insn.addr !7793
  %37 = load i32, i32* %stack_var_-72, align 4, !insn.addr !7794
  %38 = udiv i32 %37, 2, !insn.addr !7795
  %39 = urem i32 %38, 32
  %40 = zext i32 %39 to i64, !insn.addr !7796
  %41 = trunc i32 %39 to i8, !insn.addr !7797
  %42 = add i64 %arg1, 5253, !insn.addr !7797
  %43 = inttoptr i64 %42 to i8*, !insn.addr !7797
  store i8 %41, i8* %43, align 1, !insn.addr !7797
  %44 = icmp ult i8 %41, 18
  br i1 %44, label %dec_label_pc_11ca3, label %dec_label_pc_11c98, !insn.addr !7798

dec_label_pc_11c98:                               ; preds = %dec_label_pc_11c5c
  ret i64 %40, !insn.addr !7799

dec_label_pc_11ca3:                               ; preds = %dec_label_pc_11c5c
  %45 = add i64 %9, 600424, !insn.addr !7800
  %46 = inttoptr i64 %45 to i8*, !insn.addr !7800
  %47 = load i8, i8* %46, align 1, !insn.addr !7800
  %48 = icmp eq i8 %47, 1, !insn.addr !7800
  store i64 %40, i64* %rax.0.reg2mem, !insn.addr !7801
  br i1 %48, label %dec_label_pc_11cec, label %dec_label_pc_11cae, !insn.addr !7801

dec_label_pc_11cae:                               ; preds = %dec_label_pc_11ca3
  %49 = add i64 %9, 5261, !insn.addr !7802
  %50 = inttoptr i64 %49 to i8*, !insn.addr !7802
  %51 = load i8, i8* %50, align 1, !insn.addr !7802
  switch i8 %51, label %dec_label_pc_11cbf [
    i8 15, label %dec_label_pc_11cc3
    i8 4, label %dec_label_pc_11cc3
  ]

dec_label_pc_11cbf:                               ; preds = %dec_label_pc_11cae
  %52 = icmp eq i8 %51, 17, !insn.addr !7803
  %53 = icmp eq i1 %52, false, !insn.addr !7804
  br i1 %53, label %dec_label_pc_11cdb, label %dec_label_pc_11cc3, !insn.addr !7804

dec_label_pc_11cc3:                               ; preds = %dec_label_pc_11cae, %dec_label_pc_11cae, %dec_label_pc_11cbf
  %54 = zext i8 %51 to i64, !insn.addr !7802
  %55 = icmp eq i1 %10, false, !insn.addr !7805
  store i64 %54, i64* %rax.0.reg2mem, !insn.addr !7805
  br i1 %55, label %dec_label_pc_11cec, label %dec_label_pc_11cc8, !insn.addr !7805

dec_label_pc_11cc8:                               ; preds = %dec_label_pc_11cc3
  %56 = load i8, i8* %.pre-phi3.reload, align 1, !insn.addr !7806
  %57 = zext i8 %56 to i64, !insn.addr !7806
  %58 = inttoptr i64 %57 to i8*, !insn.addr !7807
  %59 = call i64 @FUSBDTV_Cmd_ReadIR(i64 %3, i8* %58), !insn.addr !7807
  store i64 %59, i64* %rax.0.reg2mem, !insn.addr !7808
  br label %dec_label_pc_11cec, !insn.addr !7808

dec_label_pc_11cdb:                               ; preds = %dec_label_pc_11cbf
  %60 = load i8, i8* %.pre-phi3.reload, align 1, !insn.addr !7809
  %61 = zext i8 %60 to i64, !insn.addr !7809
  %62 = inttoptr i64 %61 to i8*, !insn.addr !7810
  %63 = call i64 @FUSBDTV_Cmd_ReadIR(i64 %3, i8* %62), !insn.addr !7810
  store i64 %63, i64* %rax.0.reg2mem, !insn.addr !7810
  br label %dec_label_pc_11cec, !insn.addr !7810

dec_label_pc_11cec:                               ; preds = %dec_label_pc_11cdb, %dec_label_pc_11cc8, %dec_label_pc_11cc3, %dec_label_pc_11ca3
  %rax.0.reload = load i64, i64* %rax.0.reg2mem
  %64 = add i64 %3, 21697, !insn.addr !7811
  %65 = inttoptr i64 %64 to i8*, !insn.addr !7811
  %66 = load i8, i8* %65, align 1, !insn.addr !7811
  %67 = icmp eq i8 %66, 0, !insn.addr !7811
  br i1 %67, label %dec_label_pc_11d0e, label %dec_label_pc_11cf6, !insn.addr !7812

dec_label_pc_11cf6:                               ; preds = %dec_label_pc_11cec
  %68 = zext i8 %6 to i64, !insn.addr !7769
  %69 = add i64 %3, 21698, !insn.addr !7813
  %70 = add i64 %69, %68, !insn.addr !7813
  %71 = inttoptr i64 %70 to i8*, !insn.addr !7813
  store i8 ptrtoint (i32* @global_var_1 to i8), i8* %71, align 1, !insn.addr !7813
  ret i64 %rax.0.reload, !insn.addr !7814

dec_label_pc_11d0e:                               ; preds = %dec_label_pc_11cec
  %72 = add i64 %arg1, 5248, !insn.addr !7815
  %73 = inttoptr i64 %72 to i8*, !insn.addr !7815
  store i8 ptrtoint (i32* @global_var_1 to i8), i8* %73, align 1, !insn.addr !7815
  %74 = add i64 %arg1, 4924, !insn.addr !7816
  %75 = inttoptr i64 %74 to i32*, !insn.addr !7816
  store i32 0, i32* %75, align 4, !insn.addr !7816
  %76 = add i64 %arg1, 5250, !insn.addr !7817
  %77 = inttoptr i64 %76 to i8*, !insn.addr !7817
  store i8 0, i8* %77, align 1, !insn.addr !7817
  %78 = add i64 %arg1, 1064, !insn.addr !7818
  %79 = inttoptr i64 %78 to i32*, !insn.addr !7818
  store i32 64, i32* %79, align 4, !insn.addr !7818
  %80 = add i64 %arg1, 2028, !insn.addr !7819
  %81 = inttoptr i64 %80 to i32*, !insn.addr !7819
  store i32 64, i32* %81, align 4, !insn.addr !7819
  %82 = add i64 %arg1, 2992, !insn.addr !7820
  %83 = inttoptr i64 %82 to i32*, !insn.addr !7820
  store i32 64, i32* %83, align 4, !insn.addr !7820
  %84 = add i64 %arg1, ptrtoint (i8** @global_var_1338 to i64), !insn.addr !7821
  %85 = inttoptr i64 %84 to i8*, !insn.addr !7821
  store i8 0, i8* %85, align 1, !insn.addr !7821
  %86 = add i64 %arg1, 400, !insn.addr !7822
  %87 = inttoptr i64 %86 to i32*, !insn.addr !7822
  store i32 0, i32* %87, align 4, !insn.addr !7822
  %88 = add i64 %arg1, ptrtoint ([3 x i8]* @global_var_2d4 to i64), !insn.addr !7823
  %89 = inttoptr i64 %88 to i32*, !insn.addr !7823
  store i32 0, i32* %89, align 4, !insn.addr !7823
  %90 = add i64 %arg1, 5576, !insn.addr !7824
  %91 = inttoptr i64 %90 to i32*, !insn.addr !7824
  store i32 0, i32* %91, align 4, !insn.addr !7824
  %92 = add i64 %arg1, 1056, !insn.addr !7825
  %93 = inttoptr i64 %92 to i64*, !insn.addr !7825
  store i64 0, i64* %93, align 8, !insn.addr !7825
  %94 = add i64 %arg1, 5580, !insn.addr !7826
  %95 = inttoptr i64 %94 to i8*, !insn.addr !7826
  store i8 0, i8* %95, align 1, !insn.addr !7826
  %96 = add i64 %3, 21696, !insn.addr !7827
  %97 = inttoptr i64 %96 to i8*, !insn.addr !7827
  store i8 0, i8* %97, align 1, !insn.addr !7827
  %98 = add i64 %3, 21776, !insn.addr !7828
  %99 = inttoptr i64 %98 to i8*, !insn.addr !7828
  store i8 ptrtoint (i32* @global_var_1 to i8), i8* %99, align 1, !insn.addr !7828
  ret i64 %rax.0.reload, !insn.addr !7828
}

define i32 @DTV_Init(i64 %pTnim, i32 %Mode, i8 %bAPKeyIdenfy) local_unnamed_addr {
dec_label_pc_11d90:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = call i64 @__decompiler_undefined_function_0()
  %2 = call i64 @__decompiler_undefined_function_0()
  %3 = call i64 @__decompiler_undefined_function_0()
  %4 = trunc i64 %3 to i8
  %5 = mul i8 %4, 2, !insn.addr !7829
  %6 = inttoptr i64 %3 to i8*, !insn.addr !7829
  store i8 %5, i8* %6, align 1, !insn.addr !7829
  %7 = add i64 %1, 21697, !insn.addr !7830
  %8 = inttoptr i64 %7 to i8*, !insn.addr !7830
  store i8 ptrtoint (i32* @global_var_1 to i8), i8* %8, align 1, !insn.addr !7830
  %9 = urem i64 %0, 256, !insn.addr !7831
  %10 = add i64 %1, 21698, !insn.addr !7832
  %11 = add i64 %10, %9, !insn.addr !7832
  %12 = inttoptr i64 %11 to i8*, !insn.addr !7832
  store i8 ptrtoint (i32* @global_var_1 to i8), i8* %12, align 1, !insn.addr !7832
  %13 = trunc i64 %2 to i32, !insn.addr !7833
  ret i32 %13, !insn.addr !7834
}

define i64 @DTV_Init.236(i64 %arg1, i64* %arg2, i64* %arg3) local_unnamed_addr {
dec_label_pc_11dc0:
  %rax.1.reg2mem = alloca i64, !insn.addr !7835
  %r8.1.reg2mem = alloca i64, !insn.addr !7835
  %.pre-phi10.reg2mem = alloca i8*, !insn.addr !7835
  %r14.2.reg2mem = alloca i64, !insn.addr !7835
  %r13.2.reg2mem = alloca i64, !insn.addr !7835
  %r8.0.reg2mem = alloca i64, !insn.addr !7835
  %r14.1.reg2mem = alloca i64, !insn.addr !7835
  %r13.1.reg2mem = alloca i64, !insn.addr !7835
  %r14.0.reg2mem = alloca i64, !insn.addr !7835
  %r13.0.reg2mem = alloca i64, !insn.addr !7835
  %rdx.0.reg2mem = alloca i64, !insn.addr !7835
  %rax.0.reg2mem = alloca i64, !insn.addr !7835
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = call i64 @__decompiler_undefined_function_0()
  %stack_var_-201 = alloca i32, align 4
  %stack_var_-168 = alloca i64, align 8
  %stack_var_-200 = alloca i64, align 8
  %stack_var_-120 = alloca i64, align 8
  %stack_var_-136 = alloca i8, align 1
  %2 = call i8 @__decompiler_undefined_function_1()
  %stack_var_-216 = alloca i8, align 1
  %3 = call i64 @mcount(), !insn.addr !7836
  %4 = call i64 @__readgsqword(i64 40), !insn.addr !7837
  %5 = add i64 %arg1, 7480, !insn.addr !7838
  %6 = inttoptr i64 %5 to i64*, !insn.addr !7838
  %7 = load i64, i64* %6, align 8, !insn.addr !7838
  %8 = add i64 %arg1, 7472, !insn.addr !7839
  %9 = inttoptr i64 %8 to i8*, !insn.addr !7839
  %10 = load i8, i8* %9, align 1, !insn.addr !7839
  %11 = add i64 %7, 21921, !insn.addr !7840
  %12 = inttoptr i64 %11 to i8*, !insn.addr !7840
  store i8 ptrtoint (i32* @global_var_1 to i8), i8* %12, align 1, !insn.addr !7840
  %13 = add i64 %arg1, 589360, !insn.addr !7841
  %14 = inttoptr i64 %13 to i64*, !insn.addr !7841
  store i64 0, i64* %14, align 8, !insn.addr !7841
  %15 = add i64 %arg1, 589344, !insn.addr !7842
  %16 = inttoptr i64 %15 to i64*, !insn.addr !7842
  store i64 0, i64* %16, align 8, !insn.addr !7842
  %17 = add i64 %arg1, 589352, !insn.addr !7843
  %18 = inttoptr i64 %17 to i64*, !insn.addr !7843
  store i64 0, i64* %18, align 8, !insn.addr !7843
  %19 = add i64 %arg1, 589368, !insn.addr !7844
  %20 = inttoptr i64 %19 to i8*, !insn.addr !7844
  store i8 0, i8* %20, align 1, !insn.addr !7844
  %21 = add i64 %arg1, 589165, !insn.addr !7845
  %22 = inttoptr i64 %21 to i8*, !insn.addr !7845
  store i8 0, i8* %22, align 1, !insn.addr !7845
  %23 = add i64 %arg1, 600488, !insn.addr !7846
  %24 = inttoptr i64 %23 to i64*, !insn.addr !7846
  store i64 0, i64* %24, align 8, !insn.addr !7846
  %25 = add i64 %arg1, 600496, !insn.addr !7847
  %26 = inttoptr i64 %25 to i32*, !insn.addr !7847
  store i32 0, i32* %26, align 4, !insn.addr !7847
  %27 = bitcast i8* %stack_var_-216 to i64*, !insn.addr !7848
  %28 = call i64 @FUSBDTV_Cmd_SysCtrlRead.198(i64 %7, i64* bitcast (i32* @global_var_2 to i64*), i64* bitcast (i32* @global_var_2 to i64*), i64* nonnull %27), !insn.addr !7848
  %29 = trunc i64 %28 to i8, !insn.addr !7849
  %30 = icmp eq i8 %29, ptrtoint (i32* @global_var_1 to i8), !insn.addr !7849
  %31 = icmp eq i1 %30, false, !insn.addr !7850
  br i1 %31, label %dec_label_pc_11f5e, label %dec_label_pc_11f3c, !insn.addr !7850

dec_label_pc_11f3c:                               ; preds = %dec_label_pc_11dc0
  %32 = load i8, i8* %stack_var_-216, align 1, !insn.addr !7851
  %33 = icmp eq i8 %32, ptrtoint (i32** @global_var_16 to i8), !insn.addr !7851
  %34 = icmp eq i8 %2, 82, !insn.addr !7852
  %35 = icmp eq i1 %34, %33
  br i1 %35, label %dec_label_pc_11f4e, label %dec_label_pc_11f5e, !insn.addr !7853

dec_label_pc_11f4e:                               ; preds = %dec_label_pc_11f3c
  %36 = add i64 %arg1, 586869, !insn.addr !7854
  %37 = inttoptr i64 %36 to i8*, !insn.addr !7854
  store i8 ptrtoint (i32* @global_var_1 to i8), i8* %37, align 1, !insn.addr !7854
  %38 = add i64 %arg1, 5611, !insn.addr !7855
  %39 = inttoptr i64 %38 to i8*, !insn.addr !7855
  store i8 ptrtoint (i32** @global_var_16 to i8), i8* %39, align 1, !insn.addr !7855
  br label %dec_label_pc_11f7a, !insn.addr !7856

dec_label_pc_11f5e:                               ; preds = %dec_label_pc_11f3c, %dec_label_pc_11dc0
  %40 = add i64 %arg1, ptrtoint (i8** @global_var_30de4 to i64), !insn.addr !7857
  %41 = inttoptr i64 %40 to i8*, !insn.addr !7857
  store i8 ptrtoint (i32* @global_var_1 to i8), i8* %41, align 1, !insn.addr !7857
  %42 = add i64 %arg1, 586869, !insn.addr !7858
  %43 = inttoptr i64 %42 to i8*, !insn.addr !7858
  store i8 ptrtoint (i8** @global_var_3 to i8), i8* %43, align 1, !insn.addr !7858
  %44 = add i64 %arg1, 5609, !insn.addr !7859
  %45 = inttoptr i64 %44 to i8*, !insn.addr !7859
  store i8 0, i8* %45, align 1, !insn.addr !7859
  %46 = add i64 %arg1, 5611, !insn.addr !7860
  %47 = inttoptr i64 %46 to i8*, !insn.addr !7860
  store i8 ptrtoint (i8** @global_var_11 to i8), i8* %47, align 1, !insn.addr !7860
  br label %dec_label_pc_11f7a, !insn.addr !7860

dec_label_pc_11f7a:                               ; preds = %dec_label_pc_11f5e, %dec_label_pc_11f4e
  %48 = ptrtoint i64* %arg3 to i64
  %49 = trunc i64 %48 to i8, !insn.addr !7861
  %50 = icmp eq i8 %49, 0, !insn.addr !7861
  br i1 %50, label %dec_label_pc_120a6, label %dec_label_pc_11f83, !insn.addr !7862

dec_label_pc_11f83:                               ; preds = %dec_label_pc_11f7a
  store i8 60, i8* %stack_var_-136, align 1, !insn.addr !7863
  %51 = add i64 %arg1, 5612, !insn.addr !7864
  %52 = inttoptr i64 %51 to i8*, !insn.addr !7864
  store i8 ptrtoint (i32* @global_var_1 to i8), i8* %52, align 1, !insn.addr !7864
  %53 = add i64 %arg1, 5613, !insn.addr !7865
  %54 = inttoptr i64 %53 to i64*, !insn.addr !7866
  %55 = add i64 %arg1, 5621, !insn.addr !7867
  %56 = inttoptr i64 %55 to i64*, !insn.addr !7867
  %57 = ptrtoint i8* %stack_var_-136 to i64, !insn.addr !7868
  %58 = ptrtoint i64* %stack_var_-120 to i64, !insn.addr !7869
  store i64 %57, i64* %rax.0.reg2mem, !insn.addr !7870
  store i64 %arg1, i64* %rdx.0.reg2mem, !insn.addr !7870
  br label %dec_label_pc_11ff4, !insn.addr !7870

dec_label_pc_11ff4:                               ; preds = %dec_label_pc_11ff4, %dec_label_pc_11f83
  %rdx.0.reload = load i64, i64* %rdx.0.reg2mem
  %rax.0.reload = load i64, i64* %rax.0.reg2mem
  %59 = add i64 %rdx.0.reload, 5613, !insn.addr !7871
  %60 = inttoptr i64 %59 to i8*, !insn.addr !7871
  %61 = load i8, i8* %60, align 1, !insn.addr !7871
  %62 = inttoptr i64 %rax.0.reload to i8*, !insn.addr !7872
  %63 = load i8, i8* %62, align 1, !insn.addr !7872
  %64 = xor i8 %63, %61, !insn.addr !7872
  store i8 %64, i8* %62, align 1, !insn.addr !7872
  %65 = add i64 %rax.0.reload, ptrtoint (i32* @global_var_1 to i64), !insn.addr !7873
  %66 = add i64 %rdx.0.reload, ptrtoint (i32* @global_var_1 to i64), !insn.addr !7874
  %67 = icmp eq i64 %65, %58, !insn.addr !7875
  %68 = icmp eq i1 %67, false, !insn.addr !7876
  store i64 %65, i64* %rax.0.reg2mem, !insn.addr !7876
  store i64 %66, i64* %rdx.0.reg2mem, !insn.addr !7876
  br i1 %68, label %dec_label_pc_11ff4, label %dec_label_pc_1200a, !insn.addr !7876

dec_label_pc_1200a:                               ; preds = %dec_label_pc_11ff4
  %69 = ptrtoint i64* %stack_var_-200 to i64, !insn.addr !7877
  %70 = bitcast i64* %stack_var_-200 to i8*, !insn.addr !7878
  call void @__asm_rep_stosq_memset(i8* nonnull %70, i64 0, i64 ptrtoint (i8* @global_var_8 to i64)), !insn.addr !7878
  store i64 %57, i64* %r13.0.reg2mem, !insn.addr !7878
  store i64 %69, i64* %r14.0.reg2mem, !insn.addr !7878
  br label %dec_label_pc_12021, !insn.addr !7878

dec_label_pc_12021:                               ; preds = %dec_label_pc_12021, %dec_label_pc_1200a
  %r14.0.reload = load i64, i64* %r14.0.reg2mem
  %r13.0.reload = load i64, i64* %r13.0.reg2mem
  %71 = inttoptr i64 %r13.0.reload to i8*, !insn.addr !7879
  %72 = load i8, i8* %71, align 1, !insn.addr !7879
  %73 = zext i8 %72 to i64, !insn.addr !7879
  %74 = call i64 @sprintf(i64 %r14.0.reload, i64 0, i64 %73, i8 0, i64 %1, i64 %0), !insn.addr !7880
  %75 = add i64 %r13.0.reload, ptrtoint (i32* @global_var_1 to i64), !insn.addr !7881
  %76 = add i64 %r14.0.reload, ptrtoint (i32* @global_var_2 to i64), !insn.addr !7882
  %77 = icmp eq i64 %75, %58, !insn.addr !7883
  %78 = icmp eq i1 %77, false, !insn.addr !7884
  store i64 %75, i64* %r13.0.reg2mem, !insn.addr !7884
  store i64 %76, i64* %r14.0.reg2mem, !insn.addr !7884
  br i1 %78, label %dec_label_pc_12021, label %dec_label_pc_12047, !insn.addr !7884

dec_label_pc_12047:                               ; preds = %dec_label_pc_12021
  %79 = add i64 %7, 3816, !insn.addr !7885
  %80 = add i64 %arg1, 586872, !insn.addr !7886
  %81 = inttoptr i64 %80 to i64*, !insn.addr !7887
  %82 = call i64 @makeKey.363(i64* %81, i64 0, i64 128, i64* nonnull %stack_var_-200, i64 %79), !insn.addr !7887
  %83 = add i64 %arg1, 587608, !insn.addr !7888
  %84 = inttoptr i64 %83 to i64*, !insn.addr !7889
  %85 = call i64 @makeKey.363(i64* %84, i64 ptrtoint (i32* @global_var_1 to i64), i64 128, i64* nonnull %stack_var_-200, i64 %79), !insn.addr !7889
  %86 = add i64 %arg1, 588344, !insn.addr !7890
  %87 = call i64 @cipherInit.466(i64 %86, i64* bitcast (i32* @global_var_1 to i64*), i64 0), !insn.addr !7891
  br label %dec_label_pc_120ad, !insn.addr !7892

dec_label_pc_120a6:                               ; preds = %dec_label_pc_11f7a
  %88 = add i64 %arg1, 5612, !insn.addr !7893
  %89 = inttoptr i64 %88 to i8*, !insn.addr !7893
  store i8 0, i8* %89, align 1, !insn.addr !7893
  br label %dec_label_pc_120ad, !insn.addr !7893

dec_label_pc_120ad:                               ; preds = %dec_label_pc_120a6, %dec_label_pc_12047
  %90 = call i64 @DTV_TunerPower.444(i64 %arg1), !insn.addr !7894
  %91 = add i64 %arg1, 5592, !insn.addr !7895
  %92 = inttoptr i64 %91 to i8*, !insn.addr !7895
  store i8 0, i8* %92, align 1, !insn.addr !7895
  %93 = call i64 @TunerReset.356(i64 %arg1, i64 ptrtoint (i32* @global_var_1 to i64), i64 0), !insn.addr !7896
  %94 = trunc i64 %93 to i32, !insn.addr !7897
  %95 = icmp eq i32 %94, ptrtoint (i32* @global_var_1 to i32), !insn.addr !7897
  br i1 %95, label %dec_label_pc_12153, label %dec_label_pc_120d8, !insn.addr !7898

dec_label_pc_120d8:                               ; preds = %dec_label_pc_120ad
  %96 = call i64 @DTV_TunerPower.444(i64 %arg1), !insn.addr !7899
  %97 = icmp eq i8 %10, 0, !insn.addr !7900
  %98 = icmp eq i1 %97, false, !insn.addr !7901
  br i1 %98, label %dec_label_pc_12104, label %dec_label_pc_120ee, !insn.addr !7901

dec_label_pc_120ee:                               ; preds = %dec_label_pc_120d8
  %99 = load i64, i64* %6, align 8, !insn.addr !7902
  %100 = call i64 @TLIB_SetGPIO.391(i64 %99, i64* bitcast (i8* @global_var_8 to i64*), i64* bitcast (i8* @global_var_8 to i64*)), !insn.addr !7903
  br label %dec_label_pc_12104, !insn.addr !7903

dec_label_pc_12104:                               ; preds = %dec_label_pc_120ee, %dec_label_pc_120d8
  %101 = call i64 @TLIB_Delay.388(i64* inttoptr (i64 600 to i64*)), !insn.addr !7904
  %102 = call i64 @DTV_TunerPower.444(i64 %arg1), !insn.addr !7905
  %103 = call i64 @TLIB_Delay.388(i64* inttoptr (i64 100 to i64*)), !insn.addr !7906
  %104 = call i64 @TunerReset.356(i64 %arg1, i64 ptrtoint (i32* @global_var_1 to i64), i64 0), !insn.addr !7907
  %105 = trunc i64 %104 to i32, !insn.addr !7908
  %106 = icmp eq i32 %105, ptrtoint (i32* @global_var_1 to i32), !insn.addr !7908
  br i1 %106, label %dec_label_pc_12153, label %dec_label_pc_1213c, !insn.addr !7909

dec_label_pc_1213c:                               ; preds = %dec_label_pc_12104
  %107 = call i64 @DTV_TunerPower.444(i64 %arg1), !insn.addr !7910
  ret i64 4294967294, !insn.addr !7911

dec_label_pc_12153:                               ; preds = %dec_label_pc_12104, %dec_label_pc_120ad
  %108 = add i64 %arg1, ptrtoint (i32** @global_var_1c70 to i64), !insn.addr !7912
  %109 = inttoptr i64 %108 to i32*, !insn.addr !7912
  store i32 0, i32* %109, align 4, !insn.addr !7912
  %110 = add i64 %arg1, 588472, !insn.addr !7913
  %111 = inttoptr i64 %110 to i32*, !insn.addr !7913
  store i32 0, i32* %111, align 4, !insn.addr !7913
  %112 = call i64 @FUSBDTV_Cmd_Get_DevRandomKey.334(i64 %7), !insn.addr !7914
  %113 = add i64 %arg1, 600424, !insn.addr !7915
  %114 = inttoptr i64 %113 to i8*, !insn.addr !7915
  store i8 0, i8* %114, align 1, !insn.addr !7915
  %115 = add i64 %arg1, 600425, !insn.addr !7916
  %116 = inttoptr i64 %115 to i8*, !insn.addr !7916
  store i8 0, i8* %116, align 1, !insn.addr !7916
  %117 = add i64 %arg1, 5600, !insn.addr !7917
  %118 = inttoptr i64 %117 to i64*, !insn.addr !7917
  store i64 57376, i64* %118, align 8, !insn.addr !7917
  %119 = add i64 %arg1, 5608, !insn.addr !7918
  %120 = inttoptr i64 %119 to i8*, !insn.addr !7918
  store i8 0, i8* %120, align 1, !insn.addr !7918
  %121 = add i64 %arg1, 588361, !insn.addr !7919
  %122 = inttoptr i64 %121 to i8*, !insn.addr !7919
  store i8 0, i8* %122, align 1, !insn.addr !7919
  %123 = add i64 %arg1, 588476, !insn.addr !7920
  %124 = inttoptr i64 %123 to i8*, !insn.addr !7920
  store i8 0, i8* %124, align 1, !insn.addr !7920
  %125 = add i64 %arg1, 588464, !insn.addr !7921
  %126 = inttoptr i64 %125 to i64*, !insn.addr !7921
  store i64 0, i64* %126, align 8, !insn.addr !7921
  %127 = add i64 %arg1, 588477, !insn.addr !7922
  %128 = inttoptr i64 %127 to i8*, !insn.addr !7922
  store i8 0, i8* %128, align 1, !insn.addr !7922
  %129 = add i64 %arg1, 588480, !insn.addr !7923
  %130 = inttoptr i64 %129 to i32*, !insn.addr !7923
  store i32 0, i32* %130, align 4, !insn.addr !7923
  %131 = add i64 %7, 15976, !insn.addr !7924
  %132 = inttoptr i64 %131 to i8*, !insn.addr !7924
  %133 = load i8, i8* %132, align 1, !insn.addr !7924
  %134 = icmp eq i8 %133, 0, !insn.addr !7924
  %135 = icmp eq i1 %134, false, !insn.addr !7925
  br i1 %135, label %dec_label_pc_121fa, label %dec_label_pc_121c4, !insn.addr !7925

dec_label_pc_121c4:                               ; preds = %dec_label_pc_12153
  %136 = add i64 %7, 20400, !insn.addr !7926
  %137 = inttoptr i64 %136 to i8*, !insn.addr !7926
  %138 = load i8, i8* %137, align 1, !insn.addr !7926
  %139 = zext i8 %138 to i32, !insn.addr !7927
  %140 = mul i32 %139, 256, !insn.addr !7927
  %141 = add i64 %7, 20399, !insn.addr !7928
  %142 = inttoptr i64 %141 to i8*, !insn.addr !7928
  %143 = load i8, i8* %142, align 1, !insn.addr !7928
  %144 = zext i8 %143 to i32, !insn.addr !7929
  %145 = or i32 %140, %144, !insn.addr !7929
  %146 = add i64 %7, 21778, !insn.addr !7930
  %147 = inttoptr i64 %146 to i8*, !insn.addr !7930
  %148 = load i8, i8* %147, align 1, !insn.addr !7930
  %149 = zext i8 %148 to i32, !insn.addr !7931
  %150 = mul i32 %149, 256, !insn.addr !7931
  %151 = add i64 %7, 21777, !insn.addr !7932
  %152 = inttoptr i64 %151 to i8*, !insn.addr !7932
  %153 = load i8, i8* %152, align 1, !insn.addr !7932
  %154 = zext i8 %153 to i32, !insn.addr !7933
  %155 = or i32 %150, %154, !insn.addr !7933
  %156 = xor i32 %155, %145, !insn.addr !7934
  store i32 %156, i32* %130, align 4, !insn.addr !7935
  br label %dec_label_pc_121fa, !insn.addr !7935

dec_label_pc_121fa:                               ; preds = %dec_label_pc_121c4, %dec_label_pc_12153
  %157 = load i8, i8* %9, align 1, !insn.addr !7936
  %158 = zext i8 %157 to i64, !insn.addr !7936
  %159 = mul i64 %158, 8, !insn.addr !7937
  %160 = add i64 %7, 1248, !insn.addr !7937
  %161 = add i64 %160, %159, !insn.addr !7937
  %162 = inttoptr i64 %161 to i64*, !insn.addr !7937
  store i64 %arg1, i64* %162, align 8, !insn.addr !7937
  %163 = icmp ult i8 %10, 8
  br i1 %163, label %dec_label_pc_12212, label %dec_label_pc_12273, !insn.addr !7938

dec_label_pc_12212:                               ; preds = %dec_label_pc_121fa
  %164 = add i64 %arg1, 72, !insn.addr !7939
  %165 = inttoptr i64 %164 to i64*, !insn.addr !7939
  store i64 %7, i64* %165, align 8, !insn.addr !7939
  %166 = add i64 %arg1, 5257, !insn.addr !7940
  %167 = inttoptr i64 %166 to i8*, !insn.addr !7940
  store i8 %10, i8* %167, align 1, !insn.addr !7940
  %168 = add i64 %arg1, 80, !insn.addr !7941
  %169 = inttoptr i64 %168 to i64*, !insn.addr !7941
  store i64 %arg1, i64* %169, align 8, !insn.addr !7941
  %170 = add i64 %arg1, ptrtoint (i8* @global_var_8 to i64), !insn.addr !7942
  %171 = call i64 @bBCardInit.504(i64 %170), !insn.addr !7943
  %172 = trunc i64 %171 to i8, !insn.addr !7944
  %173 = icmp eq i8 %172, 0, !insn.addr !7944
  %174 = icmp eq i1 %173, false, !insn.addr !7945
  br i1 %174, label %dec_label_pc_12245, label %dec_label_pc_12234, !insn.addr !7945

dec_label_pc_12234:                               ; preds = %dec_label_pc_12212
  store i8 0, i8* %92, align 1, !insn.addr !7946
  ret i64 4294967295, !insn.addr !7947

dec_label_pc_12245:                               ; preds = %dec_label_pc_12212
  %175 = add i64 %arg1, 5261, !insn.addr !7948
  %176 = inttoptr i64 %175 to i8*, !insn.addr !7948
  %177 = load i8, i8* %176, align 1, !insn.addr !7948
  switch i8 %177, label %dec_label_pc_12254 [
    i8 3, label %dec_label_pc_12258
    i8 15, label %dec_label_pc_12258
  ]

dec_label_pc_12254:                               ; preds = %dec_label_pc_12245
  %178 = icmp eq i8 %177, 4, !insn.addr !7949
  %179 = icmp eq i1 %178, false, !insn.addr !7950
  br i1 %179, label %dec_label_pc_12261, label %dec_label_pc_12258, !insn.addr !7950

dec_label_pc_12258:                               ; preds = %dec_label_pc_12245, %dec_label_pc_12245, %dec_label_pc_12254
  %180 = add i64 %arg1, 586869, !insn.addr !7951
  %181 = inttoptr i64 %180 to i8*, !insn.addr !7951
  store i8 ptrtoint (i8** @global_var_7 to i8), i8* %181, align 1, !insn.addr !7951
  br label %dec_label_pc_1226c, !insn.addr !7952

dec_label_pc_12261:                               ; preds = %dec_label_pc_12254
  %182 = icmp eq i8 %177, 17, !insn.addr !7953
  %183 = icmp eq i1 %182, false, !insn.addr !7954
  br i1 %183, label %dec_label_pc_1226c, label %dec_label_pc_12265, !insn.addr !7954

dec_label_pc_12265:                               ; preds = %dec_label_pc_12261
  %184 = add i64 %arg1, 586869, !insn.addr !7955
  %185 = inttoptr i64 %184 to i8*, !insn.addr !7955
  store i8 ptrtoint (i8* @global_var_8 to i8), i8* %185, align 1, !insn.addr !7955
  br label %dec_label_pc_1226c, !insn.addr !7955

dec_label_pc_1226c:                               ; preds = %dec_label_pc_12265, %dec_label_pc_12261, %dec_label_pc_12258
  store i8 ptrtoint (i32* @global_var_1 to i8), i8* %92, align 1, !insn.addr !7956
  br label %dec_label_pc_12273, !insn.addr !7956

dec_label_pc_12273:                               ; preds = %dec_label_pc_121fa, %dec_label_pc_1226c
  %186 = call i64 @FUSBDTV_Cmd_StartDSC(i64 %7, i8 %10), !insn.addr !7957
  %187 = ptrtoint i64* %arg2 to i64
  %188 = trunc i64 %187 to i32, !insn.addr !7958
  %189 = icmp eq i32 %188, 0, !insn.addr !7958
  %190 = icmp eq i1 %189, false, !insn.addr !7959
  br i1 %190, label %dec_label_pc_12310, label %dec_label_pc_122ae, !insn.addr !7959

dec_label_pc_122ae:                               ; preds = %dec_label_pc_12273
  %191 = call i64 @USB_IsHighSpeed.476(i64 %7), !insn.addr !7960
  %192 = trunc i64 %191 to i32, !insn.addr !7961
  %193 = icmp eq i32 %192, 0, !insn.addr !7961
  %194 = sext i8 %10 to i32
  %195 = call i64 @USB_FilterONOFF.458(i64 %7, i32 %194)
  %196 = add i64 %arg1, 7492
  %197 = inttoptr i64 %196 to i32*
  br i1 %193, label %dec_label_pc_122e5, label %dec_label_pc_122ba, !insn.addr !7962

dec_label_pc_122ba:                               ; preds = %dec_label_pc_122ae
  store i32 ptrtoint (i32* @global_var_1 to i32), i32* %197, align 4, !insn.addr !7963
  store i8 ptrtoint (i32* @global_var_1 to i8), i8* %12, align 1, !insn.addr !7964
  br label %dec_label_pc_1239a, !insn.addr !7965

dec_label_pc_122e5:                               ; preds = %dec_label_pc_122ae
  store i32 0, i32* %197, align 4, !insn.addr !7966
  store i8 0, i8* %12, align 1, !insn.addr !7967
  br label %dec_label_pc_1239a, !insn.addr !7968

dec_label_pc_12310:                               ; preds = %dec_label_pc_12273
  %198 = icmp eq i32 %188, ptrtoint (i32* @global_var_1 to i32), !insn.addr !7969
  %199 = icmp eq i1 %198, false, !insn.addr !7970
  %200 = sext i8 %10 to i32
  %201 = call i64 @USB_FilterONOFF.458(i64 %7, i32 %200)
  br i1 %199, label %dec_label_pc_12341, label %dec_label_pc_12319, !insn.addr !7970

dec_label_pc_12319:                               ; preds = %dec_label_pc_12310
  %202 = add i64 %arg1, 7492, !insn.addr !7971
  %203 = inttoptr i64 %202 to i32*, !insn.addr !7971
  store i32 0, i32* %203, align 4, !insn.addr !7971
  store i8 0, i8* %12, align 1, !insn.addr !7972
  br label %dec_label_pc_1239a, !insn.addr !7973

dec_label_pc_12341:                               ; preds = %dec_label_pc_12310
  %204 = call i64 @DTV_SetPidFilterBoundary.194(i64 %arg1, i64 8191, i64 8191), !insn.addr !7974
  %205 = call i64 @USB_IsHighSpeed.476(i64 %7), !insn.addr !7975
  %206 = trunc i64 %205 to i32, !insn.addr !7976
  %207 = icmp eq i32 %206, 0, !insn.addr !7976
  br i1 %207, label %dec_label_pc_12387, label %dec_label_pc_12372, !insn.addr !7977

dec_label_pc_12372:                               ; preds = %dec_label_pc_12341
  store i8 ptrtoint (i32* @global_var_1 to i8), i8* %12, align 1, !insn.addr !7978
  %208 = add i64 %arg1, 7492, !insn.addr !7979
  %209 = inttoptr i64 %208 to i32*, !insn.addr !7979
  store i32 ptrtoint (i32* @global_var_1 to i32), i32* %209, align 4, !insn.addr !7979
  br label %dec_label_pc_1239a, !insn.addr !7980

dec_label_pc_12387:                               ; preds = %dec_label_pc_12341
  store i8 0, i8* %12, align 1, !insn.addr !7981
  %210 = add i64 %arg1, 7492, !insn.addr !7982
  %211 = inttoptr i64 %210 to i32*, !insn.addr !7982
  store i32 0, i32* %211, align 4, !insn.addr !7982
  br label %dec_label_pc_1239a, !insn.addr !7982

dec_label_pc_1239a:                               ; preds = %dec_label_pc_12387, %dec_label_pc_12372, %dec_label_pc_12319, %dec_label_pc_122e5, %dec_label_pc_122ba
  %212 = add i64 %arg1, 7488, !insn.addr !7983
  %213 = inttoptr i64 %212 to i32*, !insn.addr !7983
  %214 = load i32, i32* %213, align 4, !insn.addr !7983
  %215 = add i32 %214, 1, !insn.addr !7983
  store i32 %215, i32* %213, align 4, !insn.addr !7983
  %216 = add i64 %arg1, 7496, !insn.addr !7984
  %217 = inttoptr i64 %216 to i32*, !insn.addr !7984
  store i32 0, i32* %217, align 4, !insn.addr !7984
  %218 = add i64 %arg1, 585189, !insn.addr !7985
  %219 = inttoptr i64 %218 to i8*, !insn.addr !7985
  store i8 0, i8* %219, align 1, !insn.addr !7985
  %220 = add i64 %arg1, ptrtoint (i8** @global_var_30d54 to i64), !insn.addr !7986
  %221 = inttoptr i64 %220 to i8*, !insn.addr !7986
  store i8 ptrtoint (i32* @global_var_1 to i8), i8* %221, align 1, !insn.addr !7986
  %222 = call i64 @FUSB_ExAllocatePool.203(i64 0, i64 264), !insn.addr !7987
  %223 = add i64 %arg1, 588952, !insn.addr !7988
  %224 = inttoptr i64 %223 to i64*, !insn.addr !7988
  store i64 %222, i64* %224, align 8, !insn.addr !7988
  %225 = call i64 @FUSB_ExAllocatePool.203(i64 0, i64 264), !insn.addr !7989
  %226 = add i64 %arg1, 588960, !insn.addr !7990
  %227 = inttoptr i64 %226 to i64*, !insn.addr !7990
  store i64 %225, i64* %227, align 8, !insn.addr !7990
  %228 = load i64, i64* %224, align 8, !insn.addr !7991
  %229 = inttoptr i64 %228 to i8*, !insn.addr !7992
  call void @__asm_rep_stosq_memset(i8* %229, i64 0, i64 ptrtoint (i32** @global_var_21 to i64)), !insn.addr !7992
  %230 = load i64, i64* %227, align 8, !insn.addr !7993
  %231 = inttoptr i64 %230 to i8*, !insn.addr !7994
  call void @__asm_rep_stosq_memset(i8* %231, i64 0, i64 ptrtoint (i32** @global_var_21 to i64)), !insn.addr !7994
  %232 = ptrtoint i64* %stack_var_-120 to i64, !insn.addr !7995
  %233 = add i64 %arg1, 588972, !insn.addr !7996
  %234 = inttoptr i64 %233 to i8*, !insn.addr !7996
  %235 = load i8, i8* %234, align 1, !insn.addr !7996
  %236 = zext i8 %235 to i64, !insn.addr !7996
  %237 = call i64 @DTV_DecEncChip_I2C_Read.612(i64 %arg1, i64 %236, i64 ptrtoint (i8** @global_var_9 to i64), i64 %232, i64 ptrtoint (i32* @global_var_1 to i64)), !insn.addr !7997
  %238 = trunc i64 %237 to i8, !insn.addr !7998
  %239 = icmp eq i8 %238, 0, !insn.addr !7998
  br i1 %239, label %dec_label_pc_1243a, label %dec_label_pc_12433, !insn.addr !7999

dec_label_pc_12433:                               ; preds = %dec_label_pc_1239a
  store i8 ptrtoint (i32* @global_var_1 to i8), i8* %22, align 1, !insn.addr !8000
  br label %dec_label_pc_1243a, !insn.addr !8000

dec_label_pc_1243a:                               ; preds = %dec_label_pc_12433, %dec_label_pc_1239a
  %240 = call i64 @DTV_Reset_EncChipEx.437(i64 %arg1, i64 %236, i64 ptrtoint (i8** @global_var_9 to i64)), !insn.addr !8001
  %241 = add i64 %arg1, ptrtoint (i8** @global_var_30de4 to i64), !insn.addr !8002
  %242 = inttoptr i64 %241 to i8*, !insn.addr !8002
  %243 = load i8, i8* %242, align 1, !insn.addr !8002
  %244 = icmp eq i8 %243, ptrtoint (i32* @global_var_1 to i8), !insn.addr !8002
  %245 = icmp eq i1 %244, false, !insn.addr !8003
  store i8 ptrtoint (i32* @global_var_1 to i8), i8* %242, align 1
  %246 = add i64 %arg1, ptrtoint (i8** @global_var_30da1 to i64)
  %247 = inttoptr i64 %246 to i8*
  store i8 0, i8* %247, align 1
  %248 = add i64 %arg1, ptrtoint (i8** @global_var_30da4 to i64)
  %249 = inttoptr i64 %248 to i64*
  store i64 -83, i64* %249, align 8
  %250 = add i64 %arg1, add (i64 ptrtoint (i8** @global_var_30da4 to i64), i64 ptrtoint (i8* @global_var_8 to i64))
  %251 = inttoptr i64 %250 to i64*
  store i64 -112, i64* %251, align 8
  %252 = add i64 %arg1, ptrtoint (i8** @global_var_30dc4 to i64)
  %253 = inttoptr i64 %252 to i64*
  store i64 -3, i64* %253, align 8
  %254 = add i64 %arg1, add (i64 ptrtoint (i8** @global_var_30dc4 to i64), i64 ptrtoint (i8* @global_var_8 to i64))
  %255 = inttoptr i64 %254 to i64*
  store i64 -85, i64* %255, align 8
  br i1 %245, label %dec_label_pc_125b5, label %dec_label_pc_1244f, !insn.addr !8003

dec_label_pc_1244f:                               ; preds = %dec_label_pc_1243a
  %256 = add i64 %arg1, ptrtoint (i8** @global_var_30dd4 to i64), !insn.addr !8004
  %257 = inttoptr i64 %256 to i64*, !insn.addr !8005
  store i64 -3, i64* %257, align 8, !insn.addr !8005
  %258 = add i64 %arg1, add (i64 ptrtoint (i8** @global_var_30dd4 to i64), i64 ptrtoint (i8* @global_var_8 to i64)), !insn.addr !8006
  %259 = inttoptr i64 %258 to i64*, !insn.addr !8006
  store i64 -85, i64* %259, align 8, !insn.addr !8006
  %260 = ptrtoint i64* %stack_var_-200 to i64, !insn.addr !8007
  %261 = bitcast i64* %stack_var_-200 to i8*, !insn.addr !8008
  call void @__asm_rep_stosq_memset(i8* nonnull %261, i64 0, i64 ptrtoint (i8* @global_var_8 to i64)), !insn.addr !8008
  %262 = ptrtoint i64* %stack_var_-168 to i64, !insn.addr !8009
  store i64 %260, i64* %r13.1.reg2mem, !insn.addr !8009
  store i64 %arg1, i64* %r14.1.reg2mem, !insn.addr !8009
  br label %dec_label_pc_124bb, !insn.addr !8009

dec_label_pc_124bb:                               ; preds = %dec_label_pc_124bb, %dec_label_pc_1244f
  %r14.1.reload = load i64, i64* %r14.1.reg2mem
  %r13.1.reload = load i64, i64* %r13.1.reg2mem
  %263 = add i64 %r14.1.reload, ptrtoint (i8** @global_var_30da4 to i64), !insn.addr !8010
  %264 = inttoptr i64 %263 to i8*, !insn.addr !8010
  %265 = load i8, i8* %264, align 1, !insn.addr !8010
  %266 = zext i8 %265 to i64, !insn.addr !8010
  %267 = call i64 @sprintf(i64 %r13.1.reload, i64 0, i64 %266, i8 0, i64 ptrtoint (i32* @global_var_1 to i64), i64 0), !insn.addr !8011
  %268 = add i64 %r14.1.reload, ptrtoint (i32* @global_var_1 to i64), !insn.addr !8012
  %269 = add i64 %r13.1.reload, ptrtoint (i32* @global_var_2 to i64), !insn.addr !8013
  %270 = icmp eq i64 %269, %262, !insn.addr !8014
  %271 = icmp eq i1 %270, false, !insn.addr !8015
  store i64 %269, i64* %r13.1.reg2mem, !insn.addr !8015
  store i64 %268, i64* %r14.1.reg2mem, !insn.addr !8015
  br i1 %271, label %dec_label_pc_124bb, label %dec_label_pc_124e4, !insn.addr !8015

dec_label_pc_124e4:                               ; preds = %dec_label_pc_124bb
  %272 = add i64 %7, 3816, !insn.addr !8016
  %273 = add i64 %arg1, 585380, !insn.addr !8017
  %274 = inttoptr i64 %273 to i64*, !insn.addr !8018
  %275 = call i64 @makeKey.363(i64* %274, i64 0, i64 128, i64* nonnull %stack_var_-200, i64 %272), !insn.addr !8018
  %276 = add i64 %arg1, 586116, !insn.addr !8019
  %277 = inttoptr i64 %276 to i64*, !insn.addr !8020
  %278 = call i64 @makeKey.363(i64* %277, i64 0, i64 128, i64* nonnull %stack_var_-200, i64 %272), !insn.addr !8020
  %279 = add i64 %arg1, 586852, !insn.addr !8021
  %280 = call i64 @cipherInit.466(i64 %279, i64* bitcast (i32* @global_var_1 to i64*), i64 0), !insn.addr !8022
  %281 = call i64 @DTV_Reset_EncChip.558(i64 %arg1), !insn.addr !8023
  %282 = add i64 %arg1, 5611
  %283 = inttoptr i64 %282 to i8*
  %284 = load i8, i8* %283, align 1, !insn.addr !8024
  %285 = icmp eq i8 %284, 22, !insn.addr !8024
  %286 = icmp eq i1 %285, false, !insn.addr !8025
  store i64 %272, i64* %r8.0.reg2mem, !insn.addr !8025
  br i1 %286, label %dec_label_pc_125a8, label %dec_label_pc_12552, !insn.addr !8025

dec_label_pc_12552:                               ; preds = %dec_label_pc_124e4
  %287 = call i64 @FUSBDTV_Cmd_Rst_Enc(i64 %7), !insn.addr !8026
  %288 = load i32, i32* %stack_var_-201, align 4, !insn.addr !8027
  %289 = trunc i32 %288 to i8
  %290 = and i8 %289, 124, !insn.addr !8028
  %291 = add i64 %arg1, 586869, !insn.addr !8028
  %292 = inttoptr i64 %291 to i8*, !insn.addr !8028
  %293 = load i8, i8* %292, align 1, !insn.addr !8028
  %294 = or i8 %293, %290, !insn.addr !8028
  %295 = or i8 %294, -128, !insn.addr !8029
  %296 = sext i8 %295 to i32, !insn.addr !8030
  store i32 %296, i32* %stack_var_-201, align 4, !insn.addr !8030
  %297 = ptrtoint i32* %stack_var_-201 to i64, !insn.addr !8031
  %298 = call i64 @FUSBDTV_Cmd_WriteEncReg(i64 %7, i8 %10, i8 64), !insn.addr !8032
  store i64 %297, i64* %r8.0.reg2mem, !insn.addr !8032
  br label %dec_label_pc_125a8, !insn.addr !8032

dec_label_pc_125a8:                               ; preds = %dec_label_pc_12552, %dec_label_pc_124e4
  %r8.0.reload = load i64, i64* %r8.0.reg2mem
  %299 = call i64 @DTV_EnableEncryptionChipTSOutput.166(i64 %arg1), !insn.addr !8033
  store i8* %283, i8** %.pre-phi10.reg2mem, !insn.addr !8034
  store i64 %r8.0.reload, i64* %r8.1.reg2mem, !insn.addr !8034
  br label %dec_label_pc_12699, !insn.addr !8034

dec_label_pc_125b5:                               ; preds = %dec_label_pc_1243a
  %300 = ptrtoint i64* %stack_var_-200 to i64, !insn.addr !8035
  %301 = bitcast i64* %stack_var_-200 to i8*, !insn.addr !8036
  call void @__asm_rep_stosq_memset(i8* nonnull %301, i64 0, i64 ptrtoint (i8* @global_var_8 to i64)), !insn.addr !8036
  %302 = ptrtoint i64* %stack_var_-168 to i64, !insn.addr !8037
  store i64 %300, i64* %r13.2.reg2mem, !insn.addr !8037
  store i64 %arg1, i64* %r14.2.reg2mem, !insn.addr !8037
  br label %dec_label_pc_12613, !insn.addr !8037

dec_label_pc_12613:                               ; preds = %dec_label_pc_12613, %dec_label_pc_125b5
  %r14.2.reload = load i64, i64* %r14.2.reg2mem
  %r13.2.reload = load i64, i64* %r13.2.reg2mem
  %303 = add i64 %r14.2.reload, ptrtoint (i8** @global_var_30da4 to i64), !insn.addr !8038
  %304 = inttoptr i64 %303 to i8*, !insn.addr !8038
  %305 = load i8, i8* %304, align 1, !insn.addr !8038
  %306 = zext i8 %305 to i64, !insn.addr !8038
  %307 = call i64 @sprintf(i64 %r13.2.reload, i64 0, i64 %306, i8 0, i64 ptrtoint (i32* @global_var_1 to i64), i64 0), !insn.addr !8039
  %308 = add i64 %r14.2.reload, ptrtoint (i32* @global_var_1 to i64), !insn.addr !8040
  %309 = add i64 %r13.2.reload, ptrtoint (i32* @global_var_2 to i64), !insn.addr !8041
  %310 = icmp eq i64 %309, %302, !insn.addr !8042
  %311 = icmp eq i1 %310, false, !insn.addr !8043
  store i64 %309, i64* %r13.2.reg2mem, !insn.addr !8043
  store i64 %308, i64* %r14.2.reg2mem, !insn.addr !8043
  br i1 %311, label %dec_label_pc_12613, label %dec_label_pc_1263c, !insn.addr !8043

dec_label_pc_1263c:                               ; preds = %dec_label_pc_12613
  %312 = add i64 %7, 3816, !insn.addr !8044
  %313 = add i64 %arg1, 585380, !insn.addr !8045
  %314 = inttoptr i64 %313 to i64*, !insn.addr !8046
  %315 = call i64 @makeKey.363(i64* %314, i64 0, i64 128, i64* nonnull %stack_var_-200, i64 %312), !insn.addr !8046
  %316 = add i64 %arg1, 586116, !insn.addr !8047
  %317 = inttoptr i64 %316 to i64*, !insn.addr !8048
  %318 = call i64 @makeKey.363(i64* %317, i64 0, i64 128, i64* nonnull %stack_var_-200, i64 %312), !insn.addr !8048
  %319 = add i64 %arg1, 586852, !insn.addr !8049
  %320 = call i64 @cipherInit.466(i64 %319, i64* bitcast (i32* @global_var_1 to i64*), i64 0), !insn.addr !8050
  %.pre = add i64 %arg1, 5611, !insn.addr !8051
  %.pre9 = inttoptr i64 %.pre to i8*, !insn.addr !8051
  store i8* %.pre9, i8** %.pre-phi10.reg2mem, !insn.addr !8050
  store i64 %312, i64* %r8.1.reg2mem, !insn.addr !8050
  br label %dec_label_pc_12699, !insn.addr !8050

dec_label_pc_12699:                               ; preds = %dec_label_pc_1263c, %dec_label_pc_125a8
  %.pre-phi10.reload = load i8*, i8** %.pre-phi10.reg2mem
  %321 = load i8, i8* %.pre-phi10.reload, align 1, !insn.addr !8051
  %322 = icmp eq i8 %321, 22, !insn.addr !8051
  %323 = icmp eq i1 %322, false, !insn.addr !8052
  br i1 %323, label %dec_label_pc_12711, label %dec_label_pc_126a2, !insn.addr !8052

dec_label_pc_126a2:                               ; preds = %dec_label_pc_12699
  %r8.1.reload = load i64, i64* %r8.1.reg2mem
  %324 = bitcast i32* %stack_var_-201 to i64*, !insn.addr !8053
  %325 = call i64 @FUSBDTV_Cmd_SysCtrlRead.198(i64 %7, i64* bitcast (i8* @global_var_6 to i64*), i64* bitcast (i32* @global_var_1 to i64*), i64* nonnull %324), !insn.addr !8053
  %326 = icmp eq i8 %10, 0, !insn.addr !8054
  %327 = icmp eq i1 %326, false, !insn.addr !8055
  %328 = add i64 %arg1, 5609
  %329 = inttoptr i64 %328 to i8*
  %330 = load i8, i8* %329, align 1
  %331 = icmp eq i8 %330, 0
  %332 = icmp eq i1 %331, false
  %333 = load i32, i32* %stack_var_-201, align 4
  %334 = mul i32 %333, 16777216
  %sext7 = sdiv i32 %334, 16777216
  br i1 %327, label %dec_label_pc_126df, label %dec_label_pc_126c4, !insn.addr !8055

dec_label_pc_126c4:                               ; preds = %dec_label_pc_126a2
  br i1 %332, label %dec_label_pc_126d6, label %dec_label_pc_126cd, !insn.addr !8056

dec_label_pc_126cd:                               ; preds = %dec_label_pc_126c4
  %335 = and i32 %sext7, -5, !insn.addr !8057
  store i32 %335, i32* %stack_var_-201, align 4, !insn.addr !8057
  br label %dec_label_pc_126f8, !insn.addr !8058

dec_label_pc_126d6:                               ; preds = %dec_label_pc_126c4
  %336 = or i32 %sext7, 4, !insn.addr !8059
  store i32 %336, i32* %stack_var_-201, align 4, !insn.addr !8059
  br label %dec_label_pc_126f8, !insn.addr !8060

dec_label_pc_126df:                               ; preds = %dec_label_pc_126a2
  br i1 %332, label %dec_label_pc_126f1, label %dec_label_pc_126e8, !insn.addr !8061

dec_label_pc_126e8:                               ; preds = %dec_label_pc_126df
  %337 = and i32 %sext7, -9, !insn.addr !8062
  store i32 %337, i32* %stack_var_-201, align 4, !insn.addr !8062
  br label %dec_label_pc_126f8, !insn.addr !8063

dec_label_pc_126f1:                               ; preds = %dec_label_pc_126df
  %338 = or i32 %sext7, 8, !insn.addr !8064
  store i32 %338, i32* %stack_var_-201, align 4, !insn.addr !8064
  br label %dec_label_pc_126f8, !insn.addr !8064

dec_label_pc_126f8:                               ; preds = %dec_label_pc_126f1, %dec_label_pc_126e8, %dec_label_pc_126d6, %dec_label_pc_126cd
  %339 = ptrtoint i32* %stack_var_-201 to i64, !insn.addr !8065
  %340 = trunc i64 %339 to i16, !insn.addr !8066
  %341 = inttoptr i64 %r8.1.reload to i8*, !insn.addr !8066
  %342 = call i64 @FUSBDTV_Cmd_EncRead(i64 %7, i8 ptrtoint (i8* @global_var_6 to i8), i8 ptrtoint (i32* @global_var_1 to i8), i16 %340, i8* %341), !insn.addr !8066
  br label %dec_label_pc_12711, !insn.addr !8066

dec_label_pc_12711:                               ; preds = %dec_label_pc_126f8, %dec_label_pc_12699
  %343 = icmp eq i8 %10, 0, !insn.addr !8067
  %344 = icmp eq i1 %343, false, !insn.addr !8068
  br i1 %344, label %dec_label_pc_12721, label %dec_label_pc_1271a, !insn.addr !8068

dec_label_pc_1271a:                               ; preds = %dec_label_pc_12711
  %345 = add i64 %arg1, 4928, !insn.addr !8069
  %346 = inttoptr i64 %345 to i8*, !insn.addr !8069
  store i8 0, i8* %346, align 1, !insn.addr !8069
  br label %dec_label_pc_12721, !insn.addr !8069

dec_label_pc_12721:                               ; preds = %dec_label_pc_1271a, %dec_label_pc_12711
  %347 = add i64 %arg1, ptrtoint (i8** @global_var_30d60 to i64), !insn.addr !8070
  %348 = inttoptr i64 %347 to i8*, !insn.addr !8070
  store i8 ptrtoint (i32* @global_var_1 to i8), i8* %348, align 1, !insn.addr !8070
  %349 = call i64 @FUSBDTV_Cmd_StartDSC(i64 %7, i8 %10), !insn.addr !8071
  %350 = add i64 %arg1, ptrtoint (i32** @global_var_20 to i64), !insn.addr !8072
  store i64 %arg1, i64* %rax.1.reg2mem, !insn.addr !8072
  br label %dec_label_pc_12742, !insn.addr !8072

dec_label_pc_12742:                               ; preds = %dec_label_pc_12742, %dec_label_pc_12721
  %rax.1.reload = load i64, i64* %rax.1.reg2mem
  %351 = add i64 %rax.1.reload, ptrtoint (i8** @global_var_30d61 to i64), !insn.addr !8073
  %352 = inttoptr i64 %351 to i8*, !insn.addr !8073
  store i8 ptrtoint (i32* @global_var_1 to i8), i8* %352, align 1, !insn.addr !8073
  %353 = add i64 %rax.1.reload, ptrtoint (i8** @global_var_30d81 to i64), !insn.addr !8074
  %354 = inttoptr i64 %353 to i8*, !insn.addr !8074
  store i8 ptrtoint (i32* @global_var_1 to i8), i8* %354, align 1, !insn.addr !8074
  %355 = add i64 %rax.1.reload, ptrtoint (i32* @global_var_1 to i64), !insn.addr !8075
  %356 = icmp eq i64 %355, %350, !insn.addr !8076
  %357 = icmp eq i1 %356, false, !insn.addr !8077
  store i64 %355, i64* %rax.1.reg2mem, !insn.addr !8077
  br i1 %357, label %dec_label_pc_12742, label %dec_label_pc_12759, !insn.addr !8077

dec_label_pc_12759:                               ; preds = %dec_label_pc_12742
  %358 = add i64 %arg1, 589182, !insn.addr !8078
  %359 = inttoptr i64 %358 to i8*, !insn.addr !8078
  store i8 0, i8* %359, align 1, !insn.addr !8078
  %360 = call i64 @InitSlowDownIC.258(i64 %arg1), !insn.addr !8079
  ret i64 %360, !insn.addr !8079
}

define i8 @bReadI2CEncData(i8 %Slave_Addr, i8 %RegOffset, i16 %u16ReadLen, i8* %pDataBuf, i8 %I2CFlag, i64 %hCtrlTransfer) local_unnamed_addr {
dec_label_pc_1276a:
  %.reg2mem = alloca i64, !insn.addr !8080
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = trunc i64 %0 to i8
  %2 = mul i8 %1, 2, !insn.addr !8080
  %3 = inttoptr i64 %0 to i8*, !insn.addr !8080
  store i8 %2, i8* %3, align 1, !insn.addr !8080
  %4 = trunc i64 %0 to i32, !insn.addr !8081
  %5 = add i64 %0, 4294966968, !insn.addr !8081
  %6 = icmp ugt i32 %4, 327, !insn.addr !8081
  %7 = and i64 %5, 4294967295, !insn.addr !8081
  %8 = add nsw i64 %7, -117, !insn.addr !8082
  %9 = inttoptr i64 %8 to i32*, !insn.addr !8082
  %10 = load i32, i32* %9, align 4, !insn.addr !8082
  %11 = sub i32 %10, ptrtoint (i32* @global_var_1 to i32), !insn.addr !8082
  store i32 %11, i32* %9, align 4, !insn.addr !8082
  %12 = zext i1 %6 to i64, !insn.addr !8083
  %13 = add i64 %0, 221, !insn.addr !8083
  %14 = add i64 %13, %12, !insn.addr !8083
  %15 = urem i64 %14, 256, !insn.addr !8083
  %16 = and i64 %5, 4294967040, !insn.addr !8083
  %17 = or i64 %15, %16, !insn.addr !8083
  %18 = inttoptr i64 %17 to i8*, !insn.addr !8084
  %19 = load i8, i8* %18, align 1, !insn.addr !8084
  %20 = icmp eq i8 %19, 0, !insn.addr !8085
  store i64 %17, i64* %.reg2mem, !insn.addr !8086
  br i1 %20, label %dec_label_pc_12788, label %dec_label_pc_12783, !insn.addr !8086

dec_label_pc_12783:                               ; preds = %dec_label_pc_1276a
  %21 = call i64 @__stack_chk_fail(), !insn.addr !8087
  store i64 %21, i64* %.reg2mem, !insn.addr !8087
  br label %dec_label_pc_12788, !insn.addr !8087

dec_label_pc_12788:                               ; preds = %dec_label_pc_12783, %dec_label_pc_1276a
  %.reload = load i64, i64* %.reg2mem, !insn.addr !8088
  %22 = trunc i64 %.reload to i8, !insn.addr !8088
  ret i8 %22, !insn.addr !8088
}

define i64 @bReadI2CEncData.438(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4, i64 %arg5, i64 %arg6) local_unnamed_addr {
dec_label_pc_1279a:
  %0 = call i64 @__decompiler_undefined_function_0()
  ret i64 %0, !insn.addr !8089
}

define i8 @DTV_ReadI2CEncData(i64 %pTuner, i8 %I2C_Addr, i8 %byReg, i8 %byCount, i8* %pBuffer, i8 %I2CFlag, i8 %withRSA) local_unnamed_addr {
dec_label_pc_127a0:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = trunc i64 %0 to i8
  ret i8 %1
}

define i64 @function_127a1(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4, i64 %arg5, i64 %arg6) local_unnamed_addr {
dec_label_pc_127a1:
  %0 = urem i64 %arg3, 65536, !insn.addr !8090
  %1 = urem i64 %arg2, 256, !insn.addr !8091
  %2 = urem i64 %arg1, 256, !insn.addr !8092
  %3 = call i64 @FUSBDTV_Cmd_I2CReadEnc.183(i64 %arg6, i64 %2, i64 %1, i64 %0, i64 %arg4), !insn.addr !8093
  %4 = urem i64 %3, 256, !insn.addr !8094
  %5 = call i64 @NT_SUCCESS.556(i64 %4), !insn.addr !8095
  %6 = trunc i64 %5 to i8, !insn.addr !8096
  %7 = icmp eq i8 %6, 0, !insn.addr !8096
  %8 = icmp eq i1 %7, false, !insn.addr !8097
  %9 = zext i1 %8 to i64, !insn.addr !8097
  %10 = and i64 %5, -256, !insn.addr !8097
  %11 = or i64 %10, %9, !insn.addr !8097
  ret i64 %11, !insn.addr !8098
}

define i64 @DTV_ReadI2CEncData.473(i64 %arg1, i64 %arg2, i64 %arg3, i64* %arg4, i64 %arg5, i64 %arg6, i32 %arg7) local_unnamed_addr {
dec_label_pc_127d0:
  %0 = call i64 @mcount(), !insn.addr !8099
  %1 = add i64 %arg1, 7480, !insn.addr !8100
  %2 = inttoptr i64 %1 to i64*, !insn.addr !8100
  %3 = load i64, i64* %2, align 8, !insn.addr !8100
  ret i64 %3, !insn.addr !8101
}

define i8 @bWriteI2CEncData(i8 %Slave_Addr, i8 %RegOffset, i16 %u16WriteLen, i8* %pDataBuf, i64 %hCtrlTransfer) local_unnamed_addr {
dec_label_pc_12813:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = call i64 @__decompiler_undefined_function_0()
  %2 = call i64 @__decompiler_undefined_function_0()
  %3 = ptrtoint i8* %pDataBuf to i64
  %4 = sext i16 %u16WriteLen to i64
  %5 = sext i8 %RegOffset to i64
  %6 = and i64 %4, -65281, !insn.addr !8102
  %7 = or i64 %6, 51456, !insn.addr !8102
  %8 = and i64 %1, 4294967295, !insn.addr !8103
  %9 = call i64 @bReadMPUI2CData.238(i64 %8, i64 %5, i64 %7, i64 %3, i64 %0, i64 %2, i64 ptrtoint (i32* @0 to i64)), !insn.addr !8104
  %10 = trunc i64 %9 to i8, !insn.addr !8105
  ret i8 %10, !insn.addr !8105
}

define i64 @bWriteI2CEncData.441(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4, i64 %arg5) local_unnamed_addr {
dec_label_pc_12843:
  %0 = call i64 @__decompiler_undefined_function_0()
  ret i64 %0, !insn.addr !8106
}

define i8 @DTV_WriteI2CEncData(i64 %pTuner, i8 %I2C_Addr, i8 %byReg, i8 %byCount, i8* %pBuffer, i8 %withRSA) local_unnamed_addr {
dec_label_pc_12845:
  %0 = ptrtoint i8* %pBuffer to i64
  %1 = sext i8 %byCount to i64
  %2 = call i64 @mcount(), !insn.addr !8107
  %3 = sext i8 %byReg to i64, !insn.addr !8108
  %4 = urem i64 %3, 65536, !insn.addr !8108
  %5 = zext i8 %I2C_Addr to i64, !insn.addr !8109
  %6 = urem i64 %pTuner, 256, !insn.addr !8110
  %7 = call i64 @FUSBDTV_Cmd_I2CWriteEnc.184(i64 %0, i64 %6, i64 %5, i64 %4, i64 %1), !insn.addr !8111
  %8 = urem i64 %7, 256, !insn.addr !8112
  %9 = call i64 @NT_SUCCESS.556(i64 %8), !insn.addr !8113
  %10 = trunc i64 %9 to i8, !insn.addr !8114
  %11 = icmp eq i8 %10, 0, !insn.addr !8114
  %12 = icmp eq i1 %11, false, !insn.addr !8115
  %13 = zext i1 %12 to i8, !insn.addr !8115
  ret i8 %13, !insn.addr !8116
}

define i64 @DTV_WriteI2CEncData.517(i64 %arg1, i64 %arg2, i64 %arg3, i64* %arg4, i8* %arg5) local_unnamed_addr {
dec_label_pc_12875:
  %0 = call i64 @mcount(), !insn.addr !8117
  %1 = add i64 %arg1, 600425, !insn.addr !8118
  %2 = inttoptr i64 %1 to i8*, !insn.addr !8118
  %3 = load i8, i8* %2, align 1, !insn.addr !8118
  %4 = zext i8 %3 to i64, !insn.addr !8118
  ret i64 %4, !insn.addr !8118
}

define i8 @bReadBCAS_Data(i8* %DevExt, i8* %DataBuf, i32* %GetLen, i8 %bRdATR, i32 %BufferSz, i8 %ASIE5606Ver) local_unnamed_addr {
dec_label_pc_128a7:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = trunc i64 %0 to i8
  %2 = mul i8 %1, 2, !insn.addr !8119
  %3 = inttoptr i64 %0 to i8*, !insn.addr !8119
  store i8 %2, i8* %3, align 1, !insn.addr !8119
  %4 = and i64 %0, 4294967295, !insn.addr !8120
  %5 = call i64 @bWriteMPUI2CData.491(i64 %4), !insn.addr !8121
  %6 = trunc i64 %5 to i8, !insn.addr !8122
  ret i8 %6, !insn.addr !8122
}

define i64 @bReadBCAS_Data.551(i64 %arg1, i64* %arg2, i64* %arg3, i64 %arg4, i64 %arg5, i8 %arg6) local_unnamed_addr {
dec_label_pc_128d7:
  %rbx.2.reg2mem = alloca i32, !insn.addr !8123
  %r14.1.reg2mem = alloca i64, !insn.addr !8123
  %r12.1.reg2mem = alloca i64, !insn.addr !8123
  %rbx.0.reg2mem = alloca i64, !insn.addr !8123
  %stack_var_-72 = alloca i8, align 1
  %stack_var_-87 = alloca i64, align 8
  %stack_var_-86 = alloca i32, align 4
  %stack_var_-88 = alloca i8, align 1
  %0 = call i64 @mcount(), !insn.addr !8124
  %1 = add i64 %arg1, ptrtoint (i64* @global_var_4e0 to i64), !insn.addr !8125
  %2 = inttoptr i64 %1 to i64*, !insn.addr !8125
  %3 = load i64, i64* %2, align 8, !insn.addr !8125
  %4 = trunc i64 %arg4 to i8, !insn.addr !8126
  %5 = icmp eq i8 %4, ptrtoint (i32* @global_var_1 to i8), !insn.addr !8126
  %6 = ptrtoint i32* %stack_var_-86 to i64, !insn.addr !8127
  %7 = add i64 %3, 588972, !insn.addr !8128
  %8 = inttoptr i64 %7 to i8*, !insn.addr !8128
  %9 = load i8, i8* %8, align 1, !insn.addr !8128
  %10 = zext i8 %9 to i64, !insn.addr !8128
  %11 = trunc i64 %arg5 to i32
  %12 = icmp slt i32 %11, 65
  %sext11 = mul i64 %6, 4294967296
  %13 = sdiv i64 %sext11, 4294967296
  %14 = ptrtoint i8* %stack_var_-88 to i64
  %15 = ptrtoint i64* %stack_var_-87 to i64
  %16 = select i1 %5, i64 sext (i32 ptrtoint ([3 x i8]* @global_var_d to i32) to i64), i64 sext (i32 ptrtoint (i8** @global_var_3 to i32) to i64)
  br label %dec_label_pc_1293c, !insn.addr !8129

dec_label_pc_1293c:                               ; preds = %dec_label_pc_12977, %dec_label_pc_128d7
  %17 = call i64 @TLIB_Delay.388(i64* inttoptr (i64 50 to i64*)), !insn.addr !8130
  br i1 %12, label %dec_label_pc_12973, label %dec_label_pc_1294c, !insn.addr !8131

dec_label_pc_1294c:                               ; preds = %dec_label_pc_1293c
  %18 = call i64 @DTV_ReadI2CEncData.473(i64 %3, i64 %10, i64 57, i64* bitcast (i32* @global_var_1 to i64*), i64 %13, i64 0, i32 0), !insn.addr !8132
  br label %dec_label_pc_12977, !insn.addr !8133

dec_label_pc_12973:                               ; preds = %dec_label_pc_1293c
  store i32 0, i32* %stack_var_-86, align 4, !insn.addr !8134
  br label %dec_label_pc_12977, !insn.addr !8134

dec_label_pc_12977:                               ; preds = %dec_label_pc_12973, %dec_label_pc_1294c
  %19 = call i64 @DTV_ReadI2CEncData.473(i64 %3, i64 %10, i64 ptrtoint (i8** @global_var_3 to i64), i64* bitcast (i32* @global_var_1 to i64*), i64 %14, i64 0, i32 0), !insn.addr !8135
  %20 = call i64 @DTV_ReadI2CEncData.473(i64 %3, i64 %10, i64 ptrtoint (i16* @global_var_4 to i64), i64* bitcast (i32* @global_var_1 to i64*), i64 %15, i64 0, i32 0), !insn.addr !8136
  %21 = load i8, i8* %stack_var_-88, align 1, !insn.addr !8137
  %22 = load i32, i32* %stack_var_-86, align 4, !insn.addr !8138
  %23 = and i32 %22, and (i32 ptrtoint (i32* @global_var_1 to i32), i32 255), !insn.addr !8139
  %24 = shl i32 %23, ptrtoint (i8* @global_var_8 to i32), !insn.addr !8140
  %25 = zext i8 %21 to i32, !insn.addr !8141
  %26 = or i32 %24, %25, !insn.addr !8141
  %27 = zext i32 %26 to i64, !insn.addr !8141
  %28 = icmp sgt i64 %16, %27, !insn.addr !8142
  br i1 %28, label %dec_label_pc_1293c, label %dec_label_pc_129ed, !insn.addr !8142

dec_label_pc_129ed:                               ; preds = %dec_label_pc_12977
  %29 = ptrtoint i64* %arg2 to i64
  %30 = icmp eq i32 %26, 0, !insn.addr !8143
  %31 = icmp slt i32 %26, 0, !insn.addr !8143
  %32 = icmp eq i1 %31, false, !insn.addr !8144
  %33 = icmp eq i1 %30, false, !insn.addr !8144
  %34 = icmp eq i1 %32, %33, !insn.addr !8144
  br i1 %34, label %dec_label_pc_12a29.preheader, label %dec_label_pc_12a9e, !insn.addr !8144

dec_label_pc_12a29.preheader:                     ; preds = %dec_label_pc_129ed
  %35 = icmp eq i8 %arg6, 0, !insn.addr !8145
  store i64 0, i64* %rbx.0.reg2mem
  store i64 %29, i64* %r12.1.reg2mem
  br label %dec_label_pc_12a29

dec_label_pc_12a29:                               ; preds = %dec_label_pc_12a29.preheader, %dec_label_pc_12a5a
  %r12.1.reload = load i64, i64* %r12.1.reg2mem
  %rbx.0.reload = load i64, i64* %rbx.0.reg2mem
  %.pre = urem i64 %rbx.0.reload, 64
  %36 = icmp eq i64 %.pre, 0, !insn.addr !8146
  %37 = icmp eq i1 %36, false, !insn.addr !8147
  %or.cond = or i1 %35, %37
  br i1 %or.cond, label %dec_label_pc_12a5a, label %dec_label_pc_12a33, !insn.addr !8148

dec_label_pc_12a33:                               ; preds = %dec_label_pc_12a29
  %38 = trunc i64 %rbx.0.reload to i32, !insn.addr !8149
  %39 = ashr i32 %38, ptrtoint (i8* @global_var_6 to i32), !insn.addr !8150
  %40 = trunc i32 %39 to i8, !insn.addr !8151
  store i8 %40, i8* %stack_var_-72, align 1, !insn.addr !8151
  %41 = call i64 @DTV_WriteI2CEncData.517(i64 %3, i64 %10, i64 58, i64* bitcast (i32* @global_var_1 to i64*), i8* nonnull %stack_var_-72), !insn.addr !8152
  br label %dec_label_pc_12a5a, !insn.addr !8152

dec_label_pc_12a5a:                               ; preds = %dec_label_pc_12a29, %dec_label_pc_12a33
  %42 = or i64 %.pre, 64, !insn.addr !8153
  %43 = call i64 @DTV_ReadI2CEncData.473(i64 %3, i64 %10, i64 %42, i64* bitcast (i32* @global_var_1 to i64*), i64 %14, i64 0, i32 0), !insn.addr !8154
  %44 = load i8, i8* %stack_var_-88, align 1, !insn.addr !8155
  %45 = inttoptr i64 %r12.1.reload to i8*, !insn.addr !8156
  store i8 %44, i8* %45, align 1, !insn.addr !8156
  %46 = add nuw nsw i64 %rbx.0.reload, zext (i32 ptrtoint (i32* @global_var_1 to i32) to i64), !insn.addr !8157
  %47 = and i64 %46, 4294967295, !insn.addr !8157
  %48 = add i64 %r12.1.reload, ptrtoint (i32* @global_var_1 to i64), !insn.addr !8158
  %49 = trunc i64 %46 to i32, !insn.addr !8159
  %50 = icmp sgt i32 %26, %49, !insn.addr !8159
  store i64 %47, i64* %rbx.0.reg2mem, !insn.addr !8159
  store i64 %48, i64* %r12.1.reg2mem, !insn.addr !8159
  br i1 %50, label %dec_label_pc_12a29, label %dec_label_pc_12a9e, !insn.addr !8159

dec_label_pc_12a9e:                               ; preds = %dec_label_pc_12a5a, %dec_label_pc_129ed
  %51 = icmp eq i8 %4, 0, !insn.addr !8160
  %52 = icmp eq i1 %51, false, !insn.addr !8161
  store i32 0, i32* %rbx.2.reg2mem, !insn.addr !8161
  br i1 %52, label %dec_label_pc_12c3d, label %dec_label_pc_12aad, !insn.addr !8161

dec_label_pc_12aad:                               ; preds = %dec_label_pc_12a9e
  %53 = add i64 %29, ptrtoint (i32* @global_var_2 to i64), !insn.addr !8162
  %54 = inttoptr i64 %53 to i8*, !insn.addr !8162
  %55 = load i8, i8* %54, align 1, !insn.addr !8162
  %56 = zext i8 %55 to i64, !insn.addr !8162
  %57 = call i64 @ChangeEndian.223(i64 %56), !insn.addr !8163
  %58 = trunc i64 %57 to i32, !insn.addr !8164
  %59 = add i32 %58, zext (i16 sext (i8 ptrtoint (i16* @global_var_4 to i8) to i16) to i32), !insn.addr !8165
  %sext12 = mul i64 %15, 4294967296
  %60 = sdiv i64 %sext12, 4294967296
  %61 = mul i32 %59, 16777216
  %62 = sdiv i32 %61, 16777216
  %63 = sext i32 %62 to i64
  br label %dec_label_pc_12adc, !insn.addr !8166

dec_label_pc_12adc:                               ; preds = %dec_label_pc_12b1b, %dec_label_pc_12aad
  %64 = call i64 @TLIB_Delay.388(i64* inttoptr (i64 50 to i64*)), !insn.addr !8167
  br i1 %12, label %dec_label_pc_12b17, label %dec_label_pc_12aec, !insn.addr !8168

dec_label_pc_12aec:                               ; preds = %dec_label_pc_12adc
  %65 = call i64 @DTV_ReadI2CEncData.473(i64 %3, i64 %10, i64 57, i64* bitcast (i32* @global_var_1 to i64*), i64 %6, i64 0, i32 0), !insn.addr !8169
  br label %dec_label_pc_12b1b, !insn.addr !8170

dec_label_pc_12b17:                               ; preds = %dec_label_pc_12adc
  store i32 0, i32* %stack_var_-86, align 4, !insn.addr !8171
  br label %dec_label_pc_12b1b, !insn.addr !8171

dec_label_pc_12b1b:                               ; preds = %dec_label_pc_12b17, %dec_label_pc_12aec
  %66 = call i64 @DTV_ReadI2CEncData.473(i64 %3, i64 %10, i64 ptrtoint (i8** @global_var_3 to i64), i64* bitcast (i32* @global_var_1 to i64*), i64 %14, i64 0, i32 0), !insn.addr !8172
  %67 = call i64 @DTV_ReadI2CEncData.473(i64 %3, i64 %10, i64 ptrtoint (i16* @global_var_4 to i64), i64* bitcast (i32* @global_var_1 to i64*), i64 %60, i64 0, i32 0), !insn.addr !8173
  %68 = load i8, i8* %stack_var_-88, align 1, !insn.addr !8174
  %69 = load i32, i32* %stack_var_-86, align 4, !insn.addr !8175
  %70 = and i32 %69, and (i32 ptrtoint (i32* @global_var_1 to i32), i32 255), !insn.addr !8176
  %71 = shl i32 %70, ptrtoint (i8* @global_var_8 to i32), !insn.addr !8177
  %72 = zext i8 %68 to i32, !insn.addr !8178
  %73 = or i32 %71, %72, !insn.addr !8178
  %74 = zext i32 %73 to i64, !insn.addr !8178
  %75 = icmp sgt i64 %63, %74, !insn.addr !8179
  br i1 %75, label %dec_label_pc_12adc, label %dec_label_pc_12b90, !insn.addr !8179

dec_label_pc_12b90:                               ; preds = %dec_label_pc_12b1b
  %76 = sub i32 %73, %26, !insn.addr !8180
  %77 = mul i32 %26, ptrtoint (i32* @global_var_1 to i32), !insn.addr !8181
  %78 = add i32 %76, %77, !insn.addr !8181
  %79 = icmp sgt i32 %78, %26, !insn.addr !8182
  store i32 %76, i32* %rbx.2.reg2mem, !insn.addr !8182
  br i1 %79, label %dec_label_pc_12bc5.preheader, label %dec_label_pc_12c3d, !insn.addr !8182

dec_label_pc_12bc5.preheader:                     ; preds = %dec_label_pc_12b90
  %80 = zext i32 %78 to i64, !insn.addr !8181
  %81 = icmp eq i8 %arg6, 0, !insn.addr !8183
  store i64 %27, i64* %r14.1.reg2mem
  br label %dec_label_pc_12bc5

dec_label_pc_12bc5:                               ; preds = %dec_label_pc_12bc5.preheader, %dec_label_pc_12bf9
  %r14.1.reload = load i64, i64* %r14.1.reg2mem
  %.pre20 = urem i64 %r14.1.reload, 64
  %82 = icmp eq i64 %.pre20, 0, !insn.addr !8184
  %83 = icmp eq i1 %82, false, !insn.addr !8185
  %or.cond24 = or i1 %81, %83
  br i1 %or.cond24, label %dec_label_pc_12bf9, label %dec_label_pc_12bd1, !insn.addr !8186

dec_label_pc_12bd1:                               ; preds = %dec_label_pc_12bc5
  %84 = trunc i64 %r14.1.reload to i32, !insn.addr !8187
  %85 = ashr i32 %84, ptrtoint (i8* @global_var_6 to i32), !insn.addr !8188
  %86 = trunc i32 %85 to i8, !insn.addr !8189
  store i8 %86, i8* %stack_var_-72, align 1, !insn.addr !8189
  %87 = call i64 @DTV_WriteI2CEncData.517(i64 %3, i64 %10, i64 58, i64* bitcast (i32* @global_var_1 to i64*), i8* nonnull %stack_var_-72), !insn.addr !8190
  br label %dec_label_pc_12bf9, !insn.addr !8190

dec_label_pc_12bf9:                               ; preds = %dec_label_pc_12bc5, %dec_label_pc_12bd1
  %88 = or i64 %.pre20, 64, !insn.addr !8191
  %89 = call i64 @DTV_ReadI2CEncData.473(i64 %3, i64 %10, i64 %88, i64* bitcast (i32* @global_var_1 to i64*), i64 %14, i64 0, i32 0), !insn.addr !8192
  %sext10 = mul i64 %r14.1.reload, 4294967296
  %90 = sdiv i64 %sext10, 4294967296, !insn.addr !8193
  %91 = load i8, i8* %stack_var_-88, align 1, !insn.addr !8194
  %92 = mul i64 %90, ptrtoint (i32* @global_var_1 to i64), !insn.addr !8195
  %93 = add i64 %92, %29, !insn.addr !8195
  %94 = inttoptr i64 %93 to i8*, !insn.addr !8195
  store i8 %91, i8* %94, align 1, !insn.addr !8195
  %95 = add nuw nsw i64 %r14.1.reload, zext (i32 ptrtoint (i32* @global_var_1 to i32) to i64), !insn.addr !8196
  %96 = and i64 %95, 4294967295, !insn.addr !8196
  %97 = icmp ult i64 %96, %80, !insn.addr !8197
  store i64 %96, i64* %r14.1.reg2mem, !insn.addr !8197
  store i32 %76, i32* %rbx.2.reg2mem, !insn.addr !8197
  br i1 %97, label %dec_label_pc_12bc5, label %dec_label_pc_12c3d, !insn.addr !8197

dec_label_pc_12c3d:                               ; preds = %dec_label_pc_12bf9, %dec_label_pc_12b90, %dec_label_pc_12a9e
  %98 = ptrtoint i64* %arg3 to i64
  %rbx.2.reload = load i32, i32* %rbx.2.reg2mem
  %99 = add i32 %rbx.2.reload, %26, !insn.addr !8198
  %100 = bitcast i64* %arg3 to i32*, !insn.addr !8199
  store i32 %99, i32* %100, align 4, !insn.addr !8199
  ret i64 %98, !insn.addr !8200
}

define i8 @bWtBCAS_Data(i8* %DevExt, i8* %DataBuf, i32 %WtLen, i8 %ASIE5606Ver) local_unnamed_addr {
dec_label_pc_12c4f:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = call i64 @__decompiler_undefined_function_0()
  %2 = call i64 @__decompiler_undefined_function_0()
  %3 = call i64 @__decompiler_undefined_function_0()
  %rax = alloca i64, align 8
  %4 = sext i8 %ASIE5606Ver to i64
  %5 = sext i32 %WtLen to i64
  %6 = mul i64 %4, 4, !insn.addr !8201
  %7 = add nsw i64 %6, 69, !insn.addr !8201
  %8 = add i64 %7, %3, !insn.addr !8201
  %9 = inttoptr i64 %8 to i8*, !insn.addr !8201
  %10 = load i8, i8* %9, align 1, !insn.addr !8201
  %11 = add i8 %10, %ASIE5606Ver, !insn.addr !8201
  store i8 %11, i8* %9, align 1, !insn.addr !8201
  %12 = bitcast i64* %rax to i8*
  %13 = load i8, i8* %12, align 8, !insn.addr !8202
  %14 = load i64, i64* %rax, align 8
  %15 = trunc i64 %14 to i8, !insn.addr !8202
  %16 = add i8 %13, %15, !insn.addr !8202
  %17 = inttoptr i64 %14 to i8*, !insn.addr !8202
  store i8 %16, i8* %17, align 1, !insn.addr !8202
  %18 = load i8, i8* %12, align 8, !insn.addr !8203
  %19 = load i64, i64* %rax, align 8
  %20 = trunc i64 %19 to i8, !insn.addr !8203
  %21 = add i8 %18, %20, !insn.addr !8203
  %22 = inttoptr i64 %19 to i8*, !insn.addr !8203
  store i8 %21, i8* %22, align 1, !insn.addr !8203
  %23 = and i64 %0, 4294967295, !insn.addr !8204
  %24 = inttoptr i64 %4 to i64*, !insn.addr !8205
  %25 = inttoptr i64 %2 to i8*, !insn.addr !8205
  %26 = call i64 @DTV_WriteI2CEncData.517(i64 %1, i64 %23, i64 %5, i64* %24, i8* %25), !insn.addr !8205
  %27 = trunc i64 %26 to i8, !insn.addr !8206
  ret i8 %27, !insn.addr !8206
}

define i64 @bWtBCAS_Data.188(i64 %arg1, i8* %arg2, i64* %arg3, i8 %arg4) local_unnamed_addr {
dec_label_pc_12c7f:
  %rax.1.reg2mem = alloca i64, !insn.addr !8207
  %r12.0.reg2mem = alloca i64, !insn.addr !8207
  %rbx.0.reg2mem = alloca i64, !insn.addr !8207
  %rax.0.reg2mem = alloca i64, !insn.addr !8207
  %0 = ptrtoint i64* %arg3 to i64
  %stack_var_-72 = alloca i32, align 4
  %1 = call i64 @mcount(), !insn.addr !8208
  %2 = add i64 %arg1, ptrtoint (i64* @global_var_4e0 to i64), !insn.addr !8209
  %3 = inttoptr i64 %2 to i64*, !insn.addr !8209
  %4 = load i64, i64* %3, align 8, !insn.addr !8209
  %5 = add i64 %4, 588972, !insn.addr !8210
  %6 = inttoptr i64 %5 to i8*, !insn.addr !8210
  %7 = load i8, i8* %6, align 1, !insn.addr !8210
  %8 = trunc i64 %0 to i32, !insn.addr !8211
  %sext = mul i32 %8, 16777216
  %9 = sdiv i32 %sext, 16777216, !insn.addr !8212
  store i32 %9, i32* %stack_var_-72, align 4, !insn.addr !8212
  %10 = zext i8 %7 to i64, !insn.addr !8213
  %11 = bitcast i32* %stack_var_-72 to i8*, !insn.addr !8214
  %12 = call i64 @DTV_WriteI2CEncData.517(i64 %4, i64 %10, i64 ptrtoint (i32* @global_var_2 to i64), i64* bitcast (i32* @global_var_1 to i64*), i8* nonnull %11), !insn.addr !8214
  %13 = icmp eq i8 %arg4, 0, !insn.addr !8215
  store i64 %12, i64* %rax.0.reg2mem, !insn.addr !8216
  br i1 %13, label %dec_label_pc_12d07, label %dec_label_pc_12cdc, !insn.addr !8216

dec_label_pc_12cdc:                               ; preds = %dec_label_pc_12c7f
  %14 = ashr i32 %8, ptrtoint (i8* @global_var_8 to i32), !insn.addr !8217
  %15 = and i32 %14, sext (i8 ptrtoint (i32* @global_var_1 to i8) to i32), !insn.addr !8218
  %sext3 = mul i32 %15, 16777216
  %16 = sdiv i32 %sext3, 16777216, !insn.addr !8218
  store i32 %16, i32* %stack_var_-72, align 4, !insn.addr !8218
  %17 = call i64 @DTV_WriteI2CEncData.517(i64 %4, i64 %10, i64 56, i64* bitcast (i32* @global_var_1 to i64*), i8* nonnull %11), !insn.addr !8219
  store i64 %17, i64* %rax.0.reg2mem, !insn.addr !8219
  br label %dec_label_pc_12d07, !insn.addr !8219

dec_label_pc_12d07:                               ; preds = %dec_label_pc_12cdc, %dec_label_pc_12c7f
  %rax.0.reload = load i64, i64* %rax.0.reg2mem
  %18 = icmp slt i32 %8, 1, !insn.addr !8220
  store i64 %rax.0.reload, i64* %rax.1.reg2mem, !insn.addr !8220
  br i1 %18, label %dec_label_pc_12d80, label %dec_label_pc_12d13.preheader, !insn.addr !8220

dec_label_pc_12d13.preheader:                     ; preds = %dec_label_pc_12d07
  %19 = ptrtoint i8* %arg2 to i64
  %sext5 = mul i64 %0, 4294967296
  %20 = sdiv i64 %sext5, 4294967296
  store i64 %19, i64* %rbx.0.reg2mem
  store i64 0, i64* %r12.0.reg2mem
  br label %dec_label_pc_12d13

dec_label_pc_12d13:                               ; preds = %dec_label_pc_12d13.preheader, %dec_label_pc_12d46
  %r12.0.reload = load i64, i64* %r12.0.reg2mem
  %rbx.0.reload = load i64, i64* %rbx.0.reg2mem
  %.pre = urem i64 %r12.0.reload, 64
  %21 = icmp eq i64 %.pre, 0, !insn.addr !8221
  %22 = icmp eq i1 %21, false, !insn.addr !8222
  %or.cond = or i1 %13, %22
  br i1 %or.cond, label %dec_label_pc_12d46, label %dec_label_pc_12d1e, !insn.addr !8223

dec_label_pc_12d1e:                               ; preds = %dec_label_pc_12d13
  %23 = trunc i64 %r12.0.reload to i32, !insn.addr !8224
  %24 = ashr i32 %23, ptrtoint (i8* @global_var_6 to i32), !insn.addr !8225
  %sext4 = mul i32 %24, 16777216
  %25 = sdiv i32 %sext4, 16777216, !insn.addr !8226
  store i32 %25, i32* %stack_var_-72, align 4, !insn.addr !8226
  %26 = call i64 @DTV_WriteI2CEncData.517(i64 %4, i64 %10, i64 58, i64* bitcast (i32* @global_var_1 to i64*), i8* nonnull %11), !insn.addr !8227
  br label %dec_label_pc_12d46, !insn.addr !8227

dec_label_pc_12d46:                               ; preds = %dec_label_pc_12d13, %dec_label_pc_12d1e
  %27 = inttoptr i64 %rbx.0.reload to i8*, !insn.addr !8228
  %28 = load i8, i8* %27, align 1, !insn.addr !8228
  %29 = sext i8 %28 to i32, !insn.addr !8229
  store i32 %29, i32* %stack_var_-72, align 4, !insn.addr !8229
  %30 = or i64 %.pre, 64, !insn.addr !8230
  %31 = call i64 @DTV_WriteI2CEncData.517(i64 %4, i64 %10, i64 %30, i64* bitcast (i32* @global_var_1 to i64*), i8* nonnull %11), !insn.addr !8231
  %32 = add nuw nsw i64 %r12.0.reload, zext (i32 ptrtoint (i32* @global_var_1 to i32) to i64), !insn.addr !8232
  %33 = and i64 %32, 4294967295, !insn.addr !8232
  %34 = add i64 %rbx.0.reload, ptrtoint (i32* @global_var_1 to i64), !insn.addr !8233
  %35 = icmp sgt i64 %20, %33, !insn.addr !8234
  store i64 %34, i64* %rbx.0.reg2mem, !insn.addr !8234
  store i64 %33, i64* %r12.0.reg2mem, !insn.addr !8234
  store i64 %31, i64* %rax.1.reg2mem, !insn.addr !8234
  br i1 %35, label %dec_label_pc_12d13, label %dec_label_pc_12d80, !insn.addr !8234

dec_label_pc_12d80:                               ; preds = %dec_label_pc_12d46, %dec_label_pc_12d07
  %rax.1.reload = load i64, i64* %rax.1.reg2mem
  ret i64 %rax.1.reload, !insn.addr !8235
}

define i8 @Get_BCAS_INFO(i64 %BCAS_Dev) local_unnamed_addr {
dec_label_pc_12d90:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = call i64 @__decompiler_undefined_function_0()
  %2 = call i64 @__decompiler_undefined_function_0()
  %3 = call i64 @__decompiler_undefined_function_0()
  %rdx = alloca i64, align 8
  %4 = call i64 @__decompiler_undefined_function_0()
  %5 = call i64 @__decompiler_undefined_function_0()
  %6 = trunc i64 %5 to i8
  %7 = mul i8 %6, 2, !insn.addr !8236
  %8 = inttoptr i64 %5 to i8*, !insn.addr !8236
  store i8 %7, i8* %8, align 1, !insn.addr !8236
  %9 = bitcast i64* %rdx to i8*
  %10 = load i8, i8* %9, align 8, !insn.addr !8237
  %11 = lshr i64 %3, ptrtoint (i8* @global_var_8 to i64), !insn.addr !8237
  %12 = trunc i64 %11 to i8, !insn.addr !8237
  %13 = add i8 %10, %12, !insn.addr !8237
  %14 = load i64, i64* %rdx, align 8, !insn.addr !8237
  %15 = inttoptr i64 %14 to i8*, !insn.addr !8237
  store i8 %13, i8* %15, align 1, !insn.addr !8237
  %16 = and i64 %0, 4294967295, !insn.addr !8238
  %17 = load i64, i64* %rdx, align 8, !insn.addr !8239
  %18 = inttoptr i64 %4 to i64*, !insn.addr !8239
  %19 = inttoptr i64 %2 to i8*, !insn.addr !8239
  %20 = call i64 @DTV_WriteI2CEncData.517(i64 %1, i64 %16, i64 %17, i64* %18, i8* %19), !insn.addr !8239
  %21 = call i64 @TLIB_Delay.388(i64* inttoptr (i64 100 to i64*)), !insn.addr !8240
  %22 = trunc i64 %20 to i8, !insn.addr !8241
  ret i8 %22, !insn.addr !8241
}

define i64 @Get_BCAS_INFO.250(i64 %arg1) local_unnamed_addr {
dec_label_pc_12dc0:
  %r13.0.reg2mem = alloca i64, !insn.addr !8242
  %r12.0.reg2mem = alloca i64, !insn.addr !8242
  %rbx.1.reg2mem = alloca i64, !insn.addr !8242
  %rax.0.reg2mem = alloca i64, !insn.addr !8242
  %.reg2mem3 = alloca i8, !insn.addr !8242
  %.reg2mem = alloca i8, !insn.addr !8242
  %rbx.0.reg2mem = alloca i64, !insn.addr !8242
  %stack_var_-437 = alloca i64, align 8
  %stack_var_-440 = alloca i64, align 8
  %stack_var_-444 = alloca i32, align 4
  %stack_var_-111 = alloca i64, align 8
  %stack_var_-112 = alloca i8, align 1
  %stack_var_-119 = alloca i8, align 1
  %stack_var_-120 = alloca i8, align 1
  %0 = call i64 @mcount(), !insn.addr !8243
  %1 = call i64 @__readgsqword(i64 40), !insn.addr !8244
  store i8 0, i8* %stack_var_-120, align 1, !insn.addr !8245
  %2 = add i64 %arg1, 5250, !insn.addr !8246
  %3 = inttoptr i64 %2 to i8*, !insn.addr !8246
  %4 = load i8, i8* %3, align 1, !insn.addr !8246
  %5 = icmp eq i8 %4, 0, !insn.addr !8246
  %6 = select i1 %5, i8 0, i8 64, !insn.addr !8247
  store i8 %6, i8* %stack_var_-119, align 1, !insn.addr !8247
  store i8 0, i8* %stack_var_-112, align 1, !insn.addr !8248
  %7 = add i64 %arg1, 5248, !insn.addr !8249
  %8 = inttoptr i64 %7 to i8*, !insn.addr !8249
  %9 = load i8, i8* %8, align 1, !insn.addr !8249
  %10 = icmp eq i8 %9, 0, !insn.addr !8249
  store i8 0, i8* %.reg2mem, !insn.addr !8250
  br i1 %10, label %dec_label_pc_12e63, label %dec_label_pc_12e48, !insn.addr !8250

dec_label_pc_12e48:                               ; preds = %dec_label_pc_12dc0
  %11 = ptrtoint i8* %stack_var_-120 to i64, !insn.addr !8251
  %12 = ptrtoint i64* %stack_var_-111 to i64, !insn.addr !8252
  store i64 %11, i64* %rbx.0.reg2mem, !insn.addr !8252
  br label %dec_label_pc_12e50, !insn.addr !8252

dec_label_pc_12e50:                               ; preds = %dec_label_pc_12e50, %dec_label_pc_12e48
  %rbx.0.reload = load i64, i64* %rbx.0.reg2mem
  %13 = inttoptr i64 %rbx.0.reload to i8*, !insn.addr !8253
  %14 = load i8, i8* %13, align 1, !insn.addr !8253
  %15 = zext i8 %14 to i64, !insn.addr !8253
  %16 = call i64 @ChangeEndian.223(i64 %15), !insn.addr !8254
  %17 = trunc i64 %16 to i8, !insn.addr !8255
  store i8 %17, i8* %13, align 1, !insn.addr !8255
  %18 = add i64 %rbx.0.reload, ptrtoint (i32* @global_var_1 to i64), !insn.addr !8256
  %19 = icmp eq i64 %18, %12, !insn.addr !8257
  %20 = icmp eq i1 %19, false, !insn.addr !8258
  store i64 %18, i64* %rbx.0.reg2mem, !insn.addr !8258
  br i1 %20, label %dec_label_pc_12e50, label %dec_label_pc_12e63.loopexit, !insn.addr !8258

dec_label_pc_12e63.loopexit:                      ; preds = %dec_label_pc_12e50
  %.pre = load i8, i8* %stack_var_-120, align 1
  store i8 %.pre, i8* %.reg2mem
  br label %dec_label_pc_12e63

dec_label_pc_12e63:                               ; preds = %dec_label_pc_12e63.loopexit, %dec_label_pc_12dc0
  %.reload = load i8, i8* %.reg2mem, !insn.addr !8259
  store i8 %.reload, i8* %stack_var_-112, align 1, !insn.addr !8260
  %21 = ptrtoint i8* %stack_var_-119 to i64, !insn.addr !8261
  %22 = ptrtoint i8* %stack_var_-112 to i64, !insn.addr !8262
  store i8 %.reload, i8* %.reg2mem3, !insn.addr !8262
  store i64 %21, i64* %rax.0.reg2mem, !insn.addr !8262
  br label %dec_label_pc_12e76, !insn.addr !8262

dec_label_pc_12e76:                               ; preds = %dec_label_pc_12e76, %dec_label_pc_12e63
  %rax.0.reload = load i64, i64* %rax.0.reg2mem
  %.reload4 = load i8, i8* %.reg2mem3, !insn.addr !8263
  %23 = inttoptr i64 %rax.0.reload to i8*, !insn.addr !8264
  %24 = load i8, i8* %23, align 1, !insn.addr !8264
  %25 = xor i8 %24, %.reload4, !insn.addr !8263
  store i8 %25, i8* %stack_var_-112, align 1, !insn.addr !8263
  %26 = add i64 %rax.0.reload, ptrtoint (i32* @global_var_1 to i64), !insn.addr !8265
  %27 = icmp eq i64 %26, %22, !insn.addr !8266
  %28 = icmp eq i1 %27, false, !insn.addr !8267
  store i8 %25, i8* %.reg2mem3, !insn.addr !8267
  store i64 %26, i64* %rax.0.reg2mem, !insn.addr !8267
  br i1 %28, label %dec_label_pc_12e76, label %dec_label_pc_12e85, !insn.addr !8267

dec_label_pc_12e85:                               ; preds = %dec_label_pc_12e76
  %29 = add i64 %arg1, 5253, !insn.addr !8268
  %30 = inttoptr i64 %29 to i8*, !insn.addr !8268
  %31 = load i8, i8* %30, align 1, !insn.addr !8268
  %32 = add i64 %arg1, 64, !insn.addr !8269
  %33 = inttoptr i64 %32 to i64*, !insn.addr !8269
  %34 = load i64, i64* %33, align 8, !insn.addr !8269
  %35 = call i64 @bWtBCAS_Data.188(i64 %34, i8* nonnull %stack_var_-120, i64* bitcast (i8** @global_var_9 to i64*), i8 %31), !insn.addr !8270
  %36 = load i64, i64* %33, align 8, !insn.addr !8271
  %37 = load i8, i8* %30, align 1, !insn.addr !8272
  %38 = bitcast i32* %stack_var_-444 to i64*, !insn.addr !8273
  %39 = call i64 @bReadBCAS_Data.551(i64 %36, i64* nonnull %stack_var_-440, i64* nonnull %38, i64 0, i64 320, i8 %37), !insn.addr !8273
  %40 = load i32, i32* %stack_var_-444, align 4, !insn.addr !8274
  %41 = icmp sgt i32 %40, ptrtoint (i16* @global_var_4 to i32), !insn.addr !8275
  br i1 %41, label %dec_label_pc_12ee4, label %dec_label_pc_12f42, !insn.addr !8275

dec_label_pc_12ee4:                               ; preds = %dec_label_pc_12e85
  %42 = sub i32 %40, ptrtoint (i16* @global_var_4 to i32), !insn.addr !8276
  %43 = add i64 %arg1, 5576, !insn.addr !8277
  %44 = inttoptr i64 %43 to i32*, !insn.addr !8277
  store i32 %42, i32* %44, align 4, !insn.addr !8277
  %45 = load i8, i8* %8, align 1, !insn.addr !8278
  %46 = icmp eq i8 %45, 0, !insn.addr !8278
  br i1 %46, label %dec_label_pc_12f4d, label %dec_label_pc_12ef8, !insn.addr !8279

dec_label_pc_12ef8:                               ; preds = %dec_label_pc_12ee4
  %47 = load i32, i32* %stack_var_-444, align 4, !insn.addr !8280
  %48 = sub i32 %47, ptrtoint (i32* @global_var_1 to i32), !insn.addr !8281
  %49 = icmp sgt i32 %48, ptrtoint (i8** @global_var_3 to i32), !insn.addr !8282
  br i1 %49, label %dec_label_pc_12f06, label %dec_label_pc_12f4d, !insn.addr !8282

dec_label_pc_12f06:                               ; preds = %dec_label_pc_12ef8
  %50 = ptrtoint i64* %stack_var_-437 to i64, !insn.addr !8283
  store i64 %50, i64* %rbx.1.reg2mem, !insn.addr !8284
  store i64 %arg1, i64* %r12.0.reg2mem, !insn.addr !8284
  store i64 ptrtoint (i8** @global_var_3 to i64), i64* %r13.0.reg2mem, !insn.addr !8284
  br label %dec_label_pc_12f16, !insn.addr !8284

dec_label_pc_12f16:                               ; preds = %dec_label_pc_12f16, %dec_label_pc_12f06
  %r13.0.reload = load i64, i64* %r13.0.reg2mem
  %r12.0.reload = load i64, i64* %r12.0.reg2mem
  %rbx.1.reload = load i64, i64* %rbx.1.reg2mem
  %51 = inttoptr i64 %rbx.1.reload to i8*, !insn.addr !8285
  %52 = load i8, i8* %51, align 4, !insn.addr !8285
  %53 = zext i8 %52 to i64, !insn.addr !8285
  %54 = call i64 @ChangeEndian.223(i64 %53), !insn.addr !8286
  %55 = trunc i64 %54 to i8, !insn.addr !8287
  %56 = add i64 %r12.0.reload, 5254, !insn.addr !8287
  %57 = inttoptr i64 %56 to i8*, !insn.addr !8287
  store i8 %55, i8* %57, align 1, !insn.addr !8287
  %58 = add i64 %r13.0.reload, zext (i32 ptrtoint (i32* @global_var_1 to i32) to i64), !insn.addr !8288
  %59 = and i64 %58, 4294967295, !insn.addr !8288
  %60 = add i64 %rbx.1.reload, ptrtoint (i32* @global_var_1 to i64), !insn.addr !8289
  %61 = add i64 %r12.0.reload, ptrtoint (i32* @global_var_1 to i64), !insn.addr !8290
  %62 = load i32, i32* %stack_var_-444, align 4, !insn.addr !8291
  %63 = sub i32 %62, ptrtoint (i32* @global_var_1 to i32), !insn.addr !8292
  %64 = zext i32 %63 to i64, !insn.addr !8292
  %65 = icmp ult i64 %59, %64, !insn.addr !8293
  store i64 %60, i64* %rbx.1.reg2mem, !insn.addr !8293
  store i64 %61, i64* %r12.0.reg2mem, !insn.addr !8293
  store i64 %59, i64* %r13.0.reg2mem, !insn.addr !8293
  br i1 %65, label %dec_label_pc_12f16, label %dec_label_pc_12f4d, !insn.addr !8293

dec_label_pc_12f42:                               ; preds = %dec_label_pc_12e85
  %66 = add i64 %arg1, 5576, !insn.addr !8294
  %67 = inttoptr i64 %66 to i32*, !insn.addr !8294
  store i32 0, i32* %67, align 4, !insn.addr !8294
  br label %dec_label_pc_12f4d, !insn.addr !8294

dec_label_pc_12f4d:                               ; preds = %dec_label_pc_12f16, %dec_label_pc_12ef8, %dec_label_pc_12f42, %dec_label_pc_12ee4
  %68 = load i8, i8* %3, align 1, !insn.addr !8295
  %69 = urem i8 %68, 2
  %70 = xor i8 %69, 1
  %71 = zext i8 %70 to i64, !insn.addr !8296
  store i8 %70, i8* %3, align 1, !insn.addr !8297
  ret i64 %71, !insn.addr !8297
}

define i32 @DTV_Set_EncSeedRegASV5606(i64 %pTuner, i8* %EncSeed_CE, i8 %EncSeedLen) local_unnamed_addr {
dec_label_pc_12f62:
  %rax.0.reg2mem = alloca i64, !insn.addr !8298
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = add i64 %0, -40, !insn.addr !8299
  %2 = inttoptr i64 %1 to i64*, !insn.addr !8299
  %3 = load i64, i64* %2, align 8, !insn.addr !8299
  %4 = call i64 @__readgsqword(i64 40), !insn.addr !8300
  %5 = icmp eq i64 %3, %4, !insn.addr !8300
  store i64 ptrtoint (i32* @global_var_1 to i64), i64* %rax.0.reg2mem, !insn.addr !8301
  br i1 %5, label %dec_label_pc_12f82, label %dec_label_pc_12f7d, !insn.addr !8301

dec_label_pc_12f7d:                               ; preds = %dec_label_pc_12f62
  %6 = call i64 @__stack_chk_fail(), !insn.addr !8302
  store i64 %6, i64* %rax.0.reg2mem, !insn.addr !8302
  br label %dec_label_pc_12f82, !insn.addr !8302

dec_label_pc_12f82:                               ; preds = %dec_label_pc_12f7d, %dec_label_pc_12f62
  %rax.0.reload = load i64, i64* %rax.0.reg2mem
  %7 = trunc i64 %rax.0.reload to i32, !insn.addr !8303
  ret i32 %7, !insn.addr !8303
}

define i64 @DTV_Set_EncSeedRegASV5606.176(i64 %arg1, i64 %arg2, i64* %arg3) local_unnamed_addr {
dec_label_pc_12f92:
  %rax.0.reg2mem = alloca i64, !insn.addr !8304
  %0 = call i64 @mcount(), !insn.addr !8305
  %1 = add i64 %arg1, 7472, !insn.addr !8306
  %2 = inttoptr i64 %1 to i8*, !insn.addr !8306
  %3 = load i8, i8* %2, align 1, !insn.addr !8306
  %4 = add i64 %arg1, 5261, !insn.addr !8307
  %5 = inttoptr i64 %4 to i8*, !insn.addr !8307
  %6 = load i8, i8* %5, align 1, !insn.addr !8307
  switch i8 %6, label %dec_label_pc_12fe6 [
    i8 15, label %dec_label_pc_12fea
    i8 4, label %dec_label_pc_12fea
  ]

dec_label_pc_12fe6:                               ; preds = %dec_label_pc_12f92
  %7 = icmp eq i8 %6, 17, !insn.addr !8308
  %8 = icmp eq i1 %7, false, !insn.addr !8309
  %9 = icmp eq i8 %3, 0, !insn.addr !8310
  %or.cond = or i1 %9, %8
  br i1 %or.cond, label %dec_label_pc_1301b, label %dec_label_pc_12ff2, !insn.addr !8309

dec_label_pc_12fea:                               ; preds = %dec_label_pc_12f92, %dec_label_pc_12f92
  %.old = icmp eq i8 %3, 0, !insn.addr !8310
  br i1 %.old, label %dec_label_pc_1301b, label %dec_label_pc_12ff2, !insn.addr !8311

dec_label_pc_12ff2:                               ; preds = %dec_label_pc_12fe6, %dec_label_pc_12fea
  store i64 0, i64* %rax.0.reg2mem, !insn.addr !8312
  br label %dec_label_pc_12ff7, !insn.addr !8312

dec_label_pc_12ff7:                               ; preds = %dec_label_pc_12ff7, %dec_label_pc_12ff2
  %rax.0.reload = load i64, i64* %rax.0.reg2mem
  %10 = add i64 %rax.0.reload, ptrtoint (i8* @global_var_8 to i64), !insn.addr !8313
  %11 = icmp eq i64 %rax.0.reload, sub (i64 0, i64 add (i64 ptrtoint (i8* @global_var_8 to i64), i64 -64)), !insn.addr !8314
  %12 = icmp eq i1 %11, false, !insn.addr !8315
  store i64 %10, i64* %rax.0.reg2mem, !insn.addr !8315
  br i1 %12, label %dec_label_pc_12ff7, label %dec_label_pc_1301b, !insn.addr !8315

dec_label_pc_1301b:                               ; preds = %dec_label_pc_12ff7, %dec_label_pc_12fea, %dec_label_pc_12fe6
  %13 = add i64 %arg1, 588361, !insn.addr !8316
  %14 = inttoptr i64 %13 to i8*, !insn.addr !8316
  %15 = load i8, i8* %14, align 1, !insn.addr !8316
  %16 = icmp eq i8 %15, 0, !insn.addr !8316
  br i1 %16, label %dec_label_pc_13037, label %dec_label_pc_13024, !insn.addr !8317

dec_label_pc_13024:                               ; preds = %dec_label_pc_1301b, %dec_label_pc_13024
  %17 = call i64 @TLIB_Delay.388(i64* bitcast (i32* @global_var_1 to i64*)), !insn.addr !8318
  %18 = load i8, i8* %14, align 1, !insn.addr !8319
  %19 = icmp eq i8 %18, 0, !insn.addr !8319
  %20 = icmp eq i1 %19, false, !insn.addr !8320
  br i1 %20, label %dec_label_pc_13024, label %dec_label_pc_13037, !insn.addr !8320

dec_label_pc_13037:                               ; preds = %dec_label_pc_13024, %dec_label_pc_1301b
  %21 = ptrtoint i64* %arg3 to i64
  store i8 ptrtoint (i32* @global_var_1 to i8), i8* %14, align 1, !insn.addr !8321
  %22 = trunc i64 %21 to i8, !insn.addr !8322
  %23 = icmp eq i8 %22, 0, !insn.addr !8322
  %.op = urem i64 %21, 256
  %24 = add i64 %arg1, 588972, !insn.addr !8323
  %25 = inttoptr i64 %24 to i8*, !insn.addr !8323
  %26 = load i8, i8* %25, align 1, !insn.addr !8323
  %27 = zext i8 %26 to i64, !insn.addr !8323
  %28 = inttoptr i64 %.op to i64*
  %29 = select i1 %23, i64* %28, i64* inttoptr (i8 ptrtoint (i32* @global_var_1 to i8) to i64*), !insn.addr !8324
  %30 = inttoptr i64 %arg2 to i8*, !insn.addr !8324
  %31 = call i64 @DTV_WriteI2CEncData.517(i64 %arg1, i64 %27, i64 zext (i8 ptrtoint (i8* @global_var_10 to i8) to i64), i64* %29, i8* %30), !insn.addr !8324
  store i8 0, i8* %14, align 1, !insn.addr !8325
  ret i64 4294967294, !insn.addr !8326
}

define i32 @DTV_GenEncSeed(i64 %pTnim, i8* %APEncSeed, i8 %APEncSeedLen, i8* %PCKey, i8 %PCKeyLen) local_unnamed_addr {
dec_label_pc_13092:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = trunc i64 %0 to i32, !insn.addr !8327
  ret i32 %1, !insn.addr !8327
}

define i64 @DTV_GenEncSeed.172(i64 %arg1, i64 %arg2, i8 %arg3, i64 %arg4, i8 %arg5) local_unnamed_addr {
dec_label_pc_130c2:
  %rax.6.reg2mem = alloca i64, !insn.addr !8328
  %.reg2mem86 = alloca i8, !insn.addr !8328
  %rdx.5.reg2mem = alloca i64, !insn.addr !8328
  %rax.5.reg2mem = alloca i64, !insn.addr !8328
  %rdx.4.reg2mem = alloca i64, !insn.addr !8328
  %rax.4.reg2mem = alloca i64, !insn.addr !8328
  %rdx.3.reg2mem = alloca i64, !insn.addr !8328
  %rcx.4.reg2mem = alloca i64, !insn.addr !8328
  %rax.3.reg2mem = alloca i64, !insn.addr !8328
  %r14.1.reg2mem = alloca i64, !insn.addr !8328
  %r13.0.reg2mem = alloca i64, !insn.addr !8328
  %r12.1.reg2mem = alloca i64, !insn.addr !8328
  %.reg2mem84 = alloca i8, !insn.addr !8328
  %.reg2mem82 = alloca i8, !insn.addr !8328
  %.reg2mem80 = alloca i8, !insn.addr !8328
  %rdx.2.reg2mem = alloca i64, !insn.addr !8328
  %rax.2.reg2mem = alloca i64, !insn.addr !8328
  %rdx.1.reg2mem = alloca i64, !insn.addr !8328
  %rax.1.reg2mem = alloca i64, !insn.addr !8328
  %rdx.0.reg2mem = alloca i64, !insn.addr !8328
  %rcx.3.reg2mem = alloca i64, !insn.addr !8328
  %rax.0.reg2mem = alloca i64, !insn.addr !8328
  %r14.0.reg2mem = alloca i64, !insn.addr !8328
  %r12.0.reg2mem = alloca i64, !insn.addr !8328
  %rbx.0.reg2mem = alloca i64, !insn.addr !8328
  %.reg2mem78 = alloca i8, !insn.addr !8328
  %.reg2mem76 = alloca i8, !insn.addr !8328
  %zf.5.reg2mem = alloca i1, !insn.addr !8328
  %.lcssa66.reg2mem = alloca i8, !insn.addr !8328
  %rcx.220.reg2mem = alloca i64, !insn.addr !8328
  %rdi.221.reg2mem = alloca i64, !insn.addr !8328
  %.reg2mem74 = alloca i64, !insn.addr !8328
  %zf.3.reg2mem = alloca i1, !insn.addr !8328
  %.lcssa68.reg2mem = alloca i8, !insn.addr !8328
  %rcx.122.reg2mem = alloca i64, !insn.addr !8328
  %rdi.123.reg2mem = alloca i64, !insn.addr !8328
  %.reg2mem72 = alloca i64, !insn.addr !8328
  %zf.1.reg2mem = alloca i1, !insn.addr !8328
  %.lcssa70.reg2mem = alloca i8, !insn.addr !8328
  %rcx.024.reg2mem = alloca i64, !insn.addr !8328
  %rdi.025.reg2mem = alloca i64, !insn.addr !8328
  %.reg2mem = alloca i64, !insn.addr !8328
  %.in.reg2mem = alloca i64, !insn.addr !8328
  %rsi = alloca i64, align 8
  %0 = call i1 @__decompiler_undefined_function_2()
  %stack_var_-72 = alloca i64, align 8
  %stack_var_-87 = alloca i64, align 8
  %stack_var_-88 = alloca i8, align 1
  %stack_var_-104 = alloca i64, align 8
  %stack_var_-152 = alloca i8, align 1
  %stack_var_-136 = alloca i8, align 1
  %stack_var_-119 = alloca i8, align 1
  %stack_var_-120 = alloca i8, align 1
  %1 = call i64 @mcount(), !insn.addr !8329
  %2 = call i64 @__readgsqword(i64 40), !insn.addr !8330
  store i8 ptrtoint (i8** @global_var_1f to i8), i8* %stack_var_-120, align 1, !insn.addr !8331
  store i8 -59, i8* %stack_var_-119, align 1, !insn.addr !8332
  %3 = icmp eq i8 %arg3, ptrtoint (i8* @global_var_10 to i8), !insn.addr !8333
  %4 = icmp eq i8 %arg5, ptrtoint (i8* @global_var_10 to i8), !insn.addr !8334
  %or.cond = icmp eq i1 %3, %4
  store i64 4294967294, i64* %rax.6.reg2mem, !insn.addr !8335
  br i1 %or.cond, label %dec_label_pc_1315a, label %dec_label_pc_136db, !insn.addr !8335

dec_label_pc_1315a:                               ; preds = %dec_label_pc_130c2
  %5 = call i64 @TLIB_Delay.388(i64* bitcast (i8* @global_var_a to i64*)), !insn.addr !8336
  store i8 -83, i8* %stack_var_-136, align 1, !insn.addr !8337
  store i8 -3, i8* %stack_var_-152, align 1, !insn.addr !8338
  %6 = add i64 %arg1, 5592, !insn.addr !8339
  %7 = inttoptr i64 %6 to i8*, !insn.addr !8339
  %8 = load i8, i8* %7, align 1, !insn.addr !8339
  %9 = icmp eq i8 %8, 1, !insn.addr !8339
  br i1 %9, label %dec_label_pc_132bd, label %dec_label_pc_13221, !insn.addr !8340

dec_label_pc_13221:                               ; preds = %75, %dec_label_pc_1315a
  %.in.reload = load i64, i64* %.in.reg2mem
  %10 = trunc i64 %.in.reload to i8
  %11 = load i8, i8* %stack_var_-120, align 1, !insn.addr !8341
  %12 = ptrtoint i64* %stack_var_-104 to i64, !insn.addr !8342
  %13 = ptrtoint i8* %stack_var_-88 to i64, !insn.addr !8343
  %14 = add i64 %arg2, sext (i32 ptrtoint (i32* @global_var_1 to i32) to i64), !insn.addr !8344
  %15 = ptrtoint i64* %stack_var_-87 to i64, !insn.addr !8345
  %16 = ptrtoint i64* %stack_var_-72 to i64, !insn.addr !8346
  %17 = ptrtoint i8* %stack_var_-119 to i64, !insn.addr !8347
  %18 = add i64 %arg1, 5612
  %19 = inttoptr i64 %18 to i8*
  %20 = bitcast i64* %rsi to i8*
  %21 = ptrtoint i8* %stack_var_-120 to i64
  %sext9 = mul i64 %14, 4294967296
  %22 = sdiv i64 %sext9, 4294967296
  %23 = trunc i64 %16 to i8
  store i8 %10, i8* %.reg2mem76, !insn.addr !8348
  store i8 %10, i8* %.reg2mem78, !insn.addr !8348
  store i64 0, i64* %rbx.0.reg2mem, !insn.addr !8348
  store i64 0, i64* %r12.0.reg2mem, !insn.addr !8348
  store i64 %arg1, i64* %r14.0.reg2mem, !insn.addr !8348
  br label %dec_label_pc_13328, !insn.addr !8348

dec_label_pc_132bd:                               ; preds = %dec_label_pc_1315a
  %24 = add i64 %arg1, ptrtoint (i8** @global_var_30da4 to i64), !insn.addr !8349
  store i64 %24, i64* %rsi, align 8, !insn.addr !8349
  %25 = ptrtoint i8* %stack_var_-136 to i64, !insn.addr !8350
  %26 = select i1 %0, i64 -1, i64 ptrtoint (i32* @global_var_1 to i64)
  store i64 %24, i64* %.reg2mem
  store i64 %25, i64* %rdi.025.reg2mem
  store i64 ptrtoint (i8* @global_var_10 to i64), i64* %rcx.024.reg2mem
  br label %31

; <label>:27:                                     ; preds = %31
  %rcx.024.reload = load i64, i64* %rcx.024.reg2mem
  %28 = sub i64 %rcx.024.reload, ptrtoint (i32* @global_var_1 to i64), !insn.addr !8351
  %29 = add i64 %rdi.025.reload, %26, !insn.addr !8351
  %30 = icmp eq i64 %28, 0, !insn.addr !8351
  store i64 %37, i64* %.reg2mem, !insn.addr !8351
  store i64 %29, i64* %rdi.025.reg2mem, !insn.addr !8351
  store i64 %28, i64* %rcx.024.reg2mem, !insn.addr !8351
  store i8 %33, i8* %.lcssa70.reg2mem, !insn.addr !8351
  store i1 true, i1* %zf.1.reg2mem, !insn.addr !8351
  br i1 %30, label %38, label %31, !insn.addr !8351

; <label>:31:                                     ; preds = %dec_label_pc_132bd, %27
  %rdi.025.reload = load i64, i64* %rdi.025.reg2mem
  %.reload = load i64, i64* %.reg2mem, !insn.addr !8351
  %32 = inttoptr i64 %.reload to i8*, !insn.addr !8351
  %33 = load i8, i8* %32, align 1, !insn.addr !8351
  %34 = inttoptr i64 %rdi.025.reload to i8*, !insn.addr !8351
  %35 = load i8, i8* %34, align 1, !insn.addr !8351
  %36 = icmp eq i8 %33, %35, !insn.addr !8351
  %37 = add i64 %.reload, %26, !insn.addr !8351
  store i64 %37, i64* %rsi, align 8, !insn.addr !8351
  store i8 %35, i8* %.lcssa70.reg2mem, !insn.addr !8351
  store i1 false, i1* %zf.1.reg2mem, !insn.addr !8351
  br i1 %36, label %27, label %38, !insn.addr !8351

; <label>:38:                                     ; preds = %27, %31
  %zf.1.reload = load i1, i1* %zf.1.reg2mem
  %.lcssa70.reload = load i8, i8* %.lcssa70.reg2mem
  %39 = icmp ult i8 %33, %.lcssa70.reload, !insn.addr !8351
  %40 = or i1 %39, %zf.1.reload, !insn.addr !8352
  %41 = icmp ne i1 %40, ptrtoint (i32* @global_var_1 to i1), !insn.addr !8352
  %42 = icmp eq i1 %41, %39, !insn.addr !8353
  %43 = icmp eq i1 %42, false, !insn.addr !8354
  store i64 ptrtoint (i32* @global_var_1 to i64), i64* %rax.6.reg2mem, !insn.addr !8354
  br i1 %43, label %dec_label_pc_136db, label %dec_label_pc_132dd, !insn.addr !8354

dec_label_pc_132dd:                               ; preds = %38
  %44 = add i64 %arg1, ptrtoint (i8** @global_var_30dc4 to i64), !insn.addr !8355
  store i64 %44, i64* %rsi, align 8, !insn.addr !8355
  %45 = ptrtoint i8* %stack_var_-152 to i64, !insn.addr !8356
  store i64 %44, i64* %.reg2mem72
  store i64 %45, i64* %rdi.123.reg2mem
  store i64 ptrtoint (i8* @global_var_10 to i64), i64* %rcx.122.reg2mem
  br label %50

; <label>:46:                                     ; preds = %50
  %rcx.122.reload = load i64, i64* %rcx.122.reg2mem
  %47 = sub i64 %rcx.122.reload, ptrtoint (i32* @global_var_1 to i64), !insn.addr !8357
  %48 = add i64 %rdi.123.reload, %26, !insn.addr !8357
  %49 = icmp eq i64 %47, 0, !insn.addr !8357
  store i64 %56, i64* %.reg2mem72, !insn.addr !8357
  store i64 %48, i64* %rdi.123.reg2mem, !insn.addr !8357
  store i64 %47, i64* %rcx.122.reg2mem, !insn.addr !8357
  store i8 %52, i8* %.lcssa68.reg2mem, !insn.addr !8357
  store i1 true, i1* %zf.3.reg2mem, !insn.addr !8357
  br i1 %49, label %57, label %50, !insn.addr !8357

; <label>:50:                                     ; preds = %dec_label_pc_132dd, %46
  %rdi.123.reload = load i64, i64* %rdi.123.reg2mem
  %.reload73 = load i64, i64* %.reg2mem72, !insn.addr !8357
  %51 = inttoptr i64 %.reload73 to i8*, !insn.addr !8357
  %52 = load i8, i8* %51, align 1, !insn.addr !8357
  %53 = inttoptr i64 %rdi.123.reload to i8*, !insn.addr !8357
  %54 = load i8, i8* %53, align 1, !insn.addr !8357
  %55 = icmp eq i8 %52, %54, !insn.addr !8357
  %56 = add i64 %.reload73, %26, !insn.addr !8357
  store i64 %56, i64* %rsi, align 8, !insn.addr !8357
  store i8 %54, i8* %.lcssa68.reg2mem, !insn.addr !8357
  store i1 false, i1* %zf.3.reg2mem, !insn.addr !8357
  br i1 %55, label %46, label %57, !insn.addr !8357

; <label>:57:                                     ; preds = %46, %50
  %zf.3.reload = load i1, i1* %zf.3.reg2mem
  %.lcssa68.reload = load i8, i8* %.lcssa68.reg2mem
  %58 = icmp ult i8 %52, %.lcssa68.reload, !insn.addr !8357
  %59 = or i1 %58, %zf.3.reload, !insn.addr !8358
  %60 = icmp ne i1 %59, ptrtoint (i32* @global_var_1 to i1), !insn.addr !8358
  %61 = icmp eq i1 %60, %58, !insn.addr !8359
  %62 = icmp eq i1 %61, false, !insn.addr !8360
  store i64 ptrtoint (i32* @global_var_1 to i64), i64* %rax.6.reg2mem, !insn.addr !8360
  br i1 %62, label %dec_label_pc_136db, label %dec_label_pc_13300, !insn.addr !8360

dec_label_pc_13300:                               ; preds = %57
  %63 = add i64 %arg1, ptrtoint (i8** @global_var_30dd4 to i64), !insn.addr !8361
  store i64 %63, i64* %rsi, align 8, !insn.addr !8361
  store i64 %63, i64* %.reg2mem74
  store i64 %45, i64* %rdi.221.reg2mem
  store i64 ptrtoint (i8* @global_var_10 to i64), i64* %rcx.220.reg2mem
  br label %68

; <label>:64:                                     ; preds = %68
  %rcx.220.reload = load i64, i64* %rcx.220.reg2mem
  %65 = sub i64 %rcx.220.reload, ptrtoint (i32* @global_var_1 to i64), !insn.addr !8362
  %66 = add i64 %rdi.221.reload, %26, !insn.addr !8362
  %67 = icmp eq i64 %65, 0, !insn.addr !8362
  store i64 %74, i64* %.reg2mem74, !insn.addr !8362
  store i64 %66, i64* %rdi.221.reg2mem, !insn.addr !8362
  store i64 %65, i64* %rcx.220.reg2mem, !insn.addr !8362
  store i8 %70, i8* %.lcssa66.reg2mem, !insn.addr !8362
  store i1 true, i1* %zf.5.reg2mem, !insn.addr !8362
  br i1 %67, label %75, label %68, !insn.addr !8362

; <label>:68:                                     ; preds = %dec_label_pc_13300, %64
  %rdi.221.reload = load i64, i64* %rdi.221.reg2mem
  %.reload75 = load i64, i64* %.reg2mem74, !insn.addr !8362
  %69 = inttoptr i64 %.reload75 to i8*, !insn.addr !8362
  %70 = load i8, i8* %69, align 1, !insn.addr !8362
  %71 = inttoptr i64 %rdi.221.reload to i8*, !insn.addr !8362
  %72 = load i8, i8* %71, align 1, !insn.addr !8362
  %73 = icmp eq i8 %70, %72, !insn.addr !8362
  %74 = add i64 %.reload75, %26, !insn.addr !8362
  store i64 %74, i64* %rsi, align 8, !insn.addr !8362
  store i8 %72, i8* %.lcssa66.reg2mem, !insn.addr !8362
  store i1 false, i1* %zf.5.reg2mem, !insn.addr !8362
  br i1 %73, label %64, label %75, !insn.addr !8362

; <label>:75:                                     ; preds = %64, %68
  %zf.5.reload = load i1, i1* %zf.5.reg2mem
  %.lcssa66.reload = load i8, i8* %.lcssa66.reg2mem
  %76 = icmp ult i8 %70, %.lcssa66.reload, !insn.addr !8362
  %77 = or i1 %76, %zf.5.reload, !insn.addr !8363
  %78 = icmp ne i1 %77, ptrtoint (i32* @global_var_1 to i1), !insn.addr !8363
  %79 = icmp eq i1 %78, %76, !insn.addr !8364
  %80 = icmp eq i1 %79, false, !insn.addr !8365
  store i64 %74, i64* %.in.reg2mem, !insn.addr !8365
  store i64 ptrtoint (i32* @global_var_1 to i64), i64* %rax.6.reg2mem, !insn.addr !8365
  br i1 %80, label %dec_label_pc_136db, label %dec_label_pc_13221, !insn.addr !8365

dec_label_pc_13328:                               ; preds = %dec_label_pc_13440, %dec_label_pc_13221
  %r14.0.reload = load i64, i64* %r14.0.reg2mem
  %r12.0.reload = load i64, i64* %r12.0.reg2mem
  %rbx.0.reload = load i64, i64* %rbx.0.reg2mem
  %.reload79 = load i8, i8* %.reg2mem78, !insn.addr !8366
  %.reload77 = load i8, i8* %.reg2mem76
  %81 = add i64 %r14.0.reload, ptrtoint (i8** @global_var_30d61 to i64), !insn.addr !8367
  %82 = inttoptr i64 %81 to i8*, !insn.addr !8367
  %83 = load i8, i8* %82, align 1, !insn.addr !8367
  %84 = icmp eq i8 %83, ptrtoint (i32* @global_var_1 to i8), !insn.addr !8367
  %85 = icmp eq i1 %84, false, !insn.addr !8368
  store i8 %.reload77, i8* %.reg2mem80, !insn.addr !8368
  store i8 %.reload79, i8* %.reg2mem82, !insn.addr !8368
  br i1 %85, label %dec_label_pc_13440, label %dec_label_pc_1333d, !insn.addr !8368

dec_label_pc_1333d:                               ; preds = %dec_label_pc_13328
  %86 = load i8, i8* %19, align 1, !insn.addr !8369
  %87 = icmp eq i8 %86, 0, !insn.addr !8369
  %88 = icmp eq i1 %87, false, !insn.addr !8370
  br i1 %88, label %dec_label_pc_133a4, label %dec_label_pc_1334d, !insn.addr !8370

dec_label_pc_1334d:                               ; preds = %dec_label_pc_1333d
  %89 = inttoptr i64 %rbx.0.reload to i8*, !insn.addr !8371
  %90 = load i8, i8* %89, align 1, !insn.addr !8371
  %91 = xor i8 %90, %11, !insn.addr !8371
  %92 = icmp eq i8 %.reload79, %91, !insn.addr !8366
  %93 = icmp eq i1 %92, false, !insn.addr !8372
  store i8 %.reload77, i8* %.reg2mem80, !insn.addr !8372
  store i8 %.reload79, i8* %.reg2mem82, !insn.addr !8372
  br i1 %93, label %dec_label_pc_13440, label %dec_label_pc_1335f, !insn.addr !8372

dec_label_pc_1335f:                               ; preds = %dec_label_pc_1334d
  %sext4 = mul i64 %r12.0.reload, 4294967296
  %94 = sdiv i64 %sext4, 4294967296, !insn.addr !8373
  %95 = shl i64 %94, ptrtoint (i16* @global_var_4 to i64), !insn.addr !8374
  store i64 %17, i64* %rax.0.reg2mem, !insn.addr !8375
  store i64 %95, i64* %rcx.3.reg2mem, !insn.addr !8375
  store i64 %arg2, i64* %rdx.0.reg2mem, !insn.addr !8375
  br label %dec_label_pc_13377, !insn.addr !8375

dec_label_pc_13377:                               ; preds = %dec_label_pc_13387, %dec_label_pc_1335f
  %rdx.0.reload = load i64, i64* %rdx.0.reg2mem
  %rcx.3.reload = load i64, i64* %rcx.3.reg2mem
  %rax.0.reload = load i64, i64* %rax.0.reg2mem
  %96 = inttoptr i64 %rax.0.reload to i8*, !insn.addr !8376
  %97 = load i8, i8* %96, align 1, !insn.addr !8376
  %98 = inttoptr i64 %rcx.3.reload to i8*, !insn.addr !8377
  %99 = load i8, i8* %98, align 1, !insn.addr !8377
  %100 = xor i8 %99, %97, !insn.addr !8377
  %101 = add i64 %rdx.0.reload, ptrtoint (i32* @global_var_1 to i64), !insn.addr !8378
  %102 = inttoptr i64 %101 to i8*, !insn.addr !8378
  %103 = load i8, i8* %102, align 1, !insn.addr !8378
  %104 = icmp eq i8 %103, %100, !insn.addr !8378
  %105 = icmp eq i1 %104, false, !insn.addr !8379
  store i8 %.reload77, i8* %.reg2mem80, !insn.addr !8379
  store i8 %.reload79, i8* %.reg2mem82, !insn.addr !8379
  br i1 %105, label %dec_label_pc_13440, label %dec_label_pc_13387, !insn.addr !8379

dec_label_pc_13387:                               ; preds = %dec_label_pc_13377
  %106 = add i64 %rcx.3.reload, ptrtoint (i32* @global_var_1 to i64), !insn.addr !8380
  %107 = add i64 %rax.0.reload, ptrtoint (i32* @global_var_1 to i64), !insn.addr !8381
  %108 = icmp eq i64 %107, %12, !insn.addr !8382
  %109 = icmp eq i1 %108, false, !insn.addr !8383
  store i64 %107, i64* %rax.0.reg2mem, !insn.addr !8383
  store i64 %106, i64* %rcx.3.reg2mem, !insn.addr !8383
  store i64 %101, i64* %rdx.0.reg2mem, !insn.addr !8383
  br i1 %109, label %dec_label_pc_13377, label %dec_label_pc_13427, !insn.addr !8383

dec_label_pc_133a4:                               ; preds = %dec_label_pc_1333d
  %110 = inttoptr i64 %rbx.0.reload to i64*, !insn.addr !8384
  %111 = load i64, i64* %110, align 8, !insn.addr !8384
  store i64 %111, i64* %stack_var_-104, align 8, !insn.addr !8385
  store i64 %13, i64* %rsi, align 8, !insn.addr !8386
  store i64 %12, i64* %rax.1.reg2mem, !insn.addr !8386
  store i64 %21, i64* %rdx.1.reg2mem, !insn.addr !8386
  br label %dec_label_pc_133c5, !insn.addr !8386

dec_label_pc_133c5:                               ; preds = %dec_label_pc_133c5, %dec_label_pc_133a4
  %rdx.1.reload = load i64, i64* %rdx.1.reg2mem
  %rax.1.reload = load i64, i64* %rax.1.reg2mem
  %112 = inttoptr i64 %rdx.1.reload to i8*, !insn.addr !8387
  %113 = load i8, i8* %112, align 1, !insn.addr !8387
  %114 = inttoptr i64 %rax.1.reload to i8*, !insn.addr !8388
  %115 = load i8, i8* %114, align 4, !insn.addr !8388
  %116 = xor i8 %115, %113, !insn.addr !8388
  store i8 %116, i8* %114, align 4, !insn.addr !8388
  %117 = add i64 %rax.1.reload, ptrtoint (i32* @global_var_1 to i64), !insn.addr !8389
  %118 = add i64 %rdx.1.reload, ptrtoint (i32* @global_var_1 to i64), !insn.addr !8390
  %119 = load i64, i64* %rsi, align 8, !insn.addr !8391
  %120 = icmp eq i64 %117, %119, !insn.addr !8391
  %121 = icmp eq i1 %120, false, !insn.addr !8392
  store i64 %117, i64* %rax.1.reg2mem, !insn.addr !8392
  store i64 %118, i64* %rdx.1.reg2mem, !insn.addr !8392
  br i1 %121, label %dec_label_pc_133c5, label %dec_label_pc_133d7, !insn.addr !8392

dec_label_pc_133d7:                               ; preds = %dec_label_pc_133c5
  %122 = trunc i64 %119 to i8
  %123 = call i64 @Gen_Identify_Key.610(i64 %13, i64 %12), !insn.addr !8393
  %124 = load i8, i8* %stack_var_-88, align 1, !insn.addr !8394
  %125 = icmp eq i8 %124, %122, !insn.addr !8394
  %126 = icmp eq i1 %125, false, !insn.addr !8395
  store i8 %122, i8* %.reg2mem80, !insn.addr !8395
  store i8 %122, i8* %.reg2mem82, !insn.addr !8395
  br i1 %126, label %dec_label_pc_13440, label %dec_label_pc_133f7, !insn.addr !8395

dec_label_pc_133f7:                               ; preds = %dec_label_pc_133d7
  store i64 %16, i64* %rsi, align 8, !insn.addr !8396
  store i64 %15, i64* %rax.2.reg2mem, !insn.addr !8396
  store i64 %22, i64* %rdx.2.reg2mem, !insn.addr !8396
  br label %dec_label_pc_1340c, !insn.addr !8396

dec_label_pc_1340c:                               ; preds = %dec_label_pc_13413, %dec_label_pc_133f7
  %rdx.2.reload = load i64, i64* %rdx.2.reg2mem
  %rax.2.reload = load i64, i64* %rax.2.reg2mem
  %127 = inttoptr i64 %rdx.2.reload to i8*, !insn.addr !8397
  %128 = load i8, i8* %127, align 1, !insn.addr !8397
  %129 = inttoptr i64 %rax.2.reload to i8*, !insn.addr !8398
  %130 = load i8, i8* %129, align 4, !insn.addr !8398
  %131 = icmp eq i8 %128, %130, !insn.addr !8398
  %132 = icmp eq i1 %131, false, !insn.addr !8399
  store i8 %23, i8* %.reg2mem80, !insn.addr !8399
  store i8 %23, i8* %.reg2mem82, !insn.addr !8399
  br i1 %132, label %dec_label_pc_13440, label %dec_label_pc_13413, !insn.addr !8399

dec_label_pc_13413:                               ; preds = %dec_label_pc_1340c
  %133 = add i64 %rdx.2.reload, ptrtoint (i32* @global_var_1 to i64), !insn.addr !8400
  %134 = add i64 %rax.2.reload, ptrtoint (i32* @global_var_1 to i64), !insn.addr !8401
  %135 = icmp eq i64 %134, %16, !insn.addr !8402
  %136 = icmp eq i1 %135, false, !insn.addr !8403
  store i64 %134, i64* %rax.2.reg2mem, !insn.addr !8403
  store i64 %133, i64* %rdx.2.reg2mem, !insn.addr !8403
  br i1 %136, label %dec_label_pc_1340c, label %dec_label_pc_13427, !insn.addr !8403

dec_label_pc_13427:                               ; preds = %dec_label_pc_13387, %dec_label_pc_13413
  %137 = add i64 %arg1, ptrtoint (i8** @global_var_30da1 to i64), !insn.addr !8404
  %138 = inttoptr i64 %137 to i8*, !insn.addr !8404
  store i8 0, i8* %138, align 1, !insn.addr !8404
  %139 = trunc i64 %r12.0.reload to i8, !insn.addr !8405
  %140 = add i64 %arg1, ptrtoint (i8** @global_var_30da2 to i64), !insn.addr !8406
  %141 = inttoptr i64 %140 to i8*, !insn.addr !8406
  store i8 %139, i8* %141, align 1, !insn.addr !8406
  br label %dec_label_pc_136ec, !insn.addr !8407

dec_label_pc_13440:                               ; preds = %dec_label_pc_13377, %dec_label_pc_1340c, %dec_label_pc_133d7, %dec_label_pc_1334d, %dec_label_pc_13328
  %.reload83 = load i8, i8* %.reg2mem82
  %.reload81 = load i8, i8* %.reg2mem80
  %142 = add nuw nsw i64 %r12.0.reload, zext (i32 ptrtoint (i32* @global_var_1 to i32) to i64), !insn.addr !8408
  %143 = and i64 %142, 4294967295, !insn.addr !8408
  %144 = add i64 %r14.0.reload, ptrtoint (i32* @global_var_1 to i64), !insn.addr !8409
  %145 = add i64 %rbx.0.reload, ptrtoint (i8* @global_var_10 to i64), !insn.addr !8410
  %146 = trunc i64 %142 to i32, !insn.addr !8411
  %147 = icmp eq i32 %146, 64, !insn.addr !8411
  %148 = icmp eq i1 %147, false, !insn.addr !8412
  store i8 %.reload81, i8* %.reg2mem76, !insn.addr !8412
  store i8 %.reload83, i8* %.reg2mem78, !insn.addr !8412
  store i64 %145, i64* %rbx.0.reg2mem, !insn.addr !8412
  store i64 %143, i64* %r12.0.reg2mem, !insn.addr !8412
  store i64 %144, i64* %r14.0.reg2mem, !insn.addr !8412
  br i1 %148, label %dec_label_pc_13328, label %dec_label_pc_13456, !insn.addr !8412

dec_label_pc_13456:                               ; preds = %dec_label_pc_13440
  %149 = and i64 %142, 4294967040, !insn.addr !8413
  store i8 %.reload81, i8* %.reg2mem84, !insn.addr !8414
  store i64 %149, i64* %r12.1.reg2mem, !insn.addr !8414
  store i64 %arg1, i64* %r13.0.reg2mem, !insn.addr !8414
  store i64 0, i64* %r14.1.reg2mem, !insn.addr !8414
  br label %dec_label_pc_134dc, !insn.addr !8414

dec_label_pc_134dc:                               ; preds = %dec_label_pc_13614, %dec_label_pc_13456
  %r14.1.reload = load i64, i64* %r14.1.reg2mem
  %r13.0.reload = load i64, i64* %r13.0.reg2mem
  %r12.1.reload = load i64, i64* %r12.1.reg2mem
  %.reload85 = load i8, i8* %.reg2mem84, !insn.addr !8415
  %150 = add i64 %r13.0.reload, ptrtoint (i8** @global_var_30d61 to i64), !insn.addr !8416
  %151 = inttoptr i64 %150 to i8*, !insn.addr !8416
  %152 = load i8, i8* %151, align 1, !insn.addr !8416
  %153 = icmp eq i8 %152, ptrtoint (i32* @global_var_1 to i8), !insn.addr !8416
  %154 = icmp eq i1 %153, false, !insn.addr !8417
  store i8 %.reload85, i8* %.reg2mem86, !insn.addr !8417
  br i1 %154, label %dec_label_pc_13614, label %dec_label_pc_134f1, !insn.addr !8417

dec_label_pc_134f1:                               ; preds = %dec_label_pc_134dc
  %155 = load i8, i8* %19, align 1, !insn.addr !8418
  %156 = icmp eq i8 %155, 0, !insn.addr !8418
  %157 = icmp eq i1 %156, false, !insn.addr !8419
  br i1 %157, label %dec_label_pc_13563, label %dec_label_pc_13501, !insn.addr !8419

dec_label_pc_13501:                               ; preds = %dec_label_pc_134f1
  %158 = inttoptr i64 %r14.1.reload to i8*, !insn.addr !8420
  %159 = load i8, i8* %158, align 1, !insn.addr !8420
  %160 = xor i8 %159, %11, !insn.addr !8420
  %161 = icmp eq i8 %.reload85, %160, !insn.addr !8415
  %162 = icmp eq i1 %161, false, !insn.addr !8421
  store i8 %.reload85, i8* %.reg2mem86, !insn.addr !8421
  br i1 %162, label %dec_label_pc_13614, label %dec_label_pc_1351a, !insn.addr !8421

dec_label_pc_1351a:                               ; preds = %dec_label_pc_13501
  %sext6 = mul i64 %r12.1.reload, 4294967296
  %163 = sdiv i64 %sext6, 4294967296, !insn.addr !8422
  %164 = shl i64 %163, ptrtoint (i16* @global_var_4 to i64), !insn.addr !8423
  store i64 %17, i64* %rax.3.reg2mem, !insn.addr !8424
  store i64 %164, i64* %rcx.4.reg2mem, !insn.addr !8424
  store i64 %arg2, i64* %rdx.3.reg2mem, !insn.addr !8424
  br label %dec_label_pc_1352f, !insn.addr !8424

dec_label_pc_1352f:                               ; preds = %dec_label_pc_1353f, %dec_label_pc_1351a
  %rdx.3.reload = load i64, i64* %rdx.3.reg2mem
  %rcx.4.reload = load i64, i64* %rcx.4.reg2mem
  %rax.3.reload = load i64, i64* %rax.3.reg2mem
  %165 = inttoptr i64 %rax.3.reload to i8*, !insn.addr !8425
  %166 = load i8, i8* %165, align 1, !insn.addr !8425
  %167 = inttoptr i64 %rcx.4.reload to i8*, !insn.addr !8426
  %168 = load i8, i8* %167, align 1, !insn.addr !8426
  %169 = xor i8 %168, %166, !insn.addr !8426
  %170 = add i64 %rdx.3.reload, ptrtoint (i32* @global_var_1 to i64), !insn.addr !8427
  %171 = inttoptr i64 %170 to i8*, !insn.addr !8427
  %172 = load i8, i8* %171, align 1, !insn.addr !8427
  %173 = icmp eq i8 %172, %169, !insn.addr !8427
  %174 = icmp eq i1 %173, false, !insn.addr !8428
  store i8 %.reload85, i8* %.reg2mem86, !insn.addr !8428
  br i1 %174, label %dec_label_pc_13614, label %dec_label_pc_1353f, !insn.addr !8428

dec_label_pc_1353f:                               ; preds = %dec_label_pc_1352f
  %175 = add i64 %rcx.4.reload, ptrtoint (i32* @global_var_1 to i64), !insn.addr !8429
  %176 = add i64 %rax.3.reload, ptrtoint (i32* @global_var_1 to i64), !insn.addr !8430
  %177 = icmp eq i64 %176, %12, !insn.addr !8431
  %178 = icmp eq i1 %177, false, !insn.addr !8432
  store i64 %176, i64* %rax.3.reg2mem, !insn.addr !8432
  store i64 %175, i64* %rcx.4.reg2mem, !insn.addr !8432
  store i64 %170, i64* %rdx.3.reg2mem, !insn.addr !8432
  br i1 %178, label %dec_label_pc_1352f, label %dec_label_pc_135ec, !insn.addr !8432

dec_label_pc_13563:                               ; preds = %dec_label_pc_134f1
  %179 = inttoptr i64 %r14.1.reload to i64*, !insn.addr !8433
  %180 = load i64, i64* %179, align 8, !insn.addr !8433
  store i64 %180, i64* %stack_var_-104, align 8, !insn.addr !8434
  store i64 %12, i64* %rax.4.reg2mem, !insn.addr !8435
  store i64 %21, i64* %rdx.4.reg2mem, !insn.addr !8435
  br label %dec_label_pc_1357d, !insn.addr !8435

dec_label_pc_1357d:                               ; preds = %dec_label_pc_1357d, %dec_label_pc_13563
  %rdx.4.reload = load i64, i64* %rdx.4.reg2mem
  %rax.4.reload = load i64, i64* %rax.4.reg2mem
  %181 = inttoptr i64 %rdx.4.reload to i8*, !insn.addr !8436
  %182 = load i8, i8* %181, align 1, !insn.addr !8436
  %183 = inttoptr i64 %rax.4.reload to i8*, !insn.addr !8437
  %184 = load i8, i8* %183, align 4, !insn.addr !8437
  %185 = xor i8 %184, %182, !insn.addr !8437
  store i8 %185, i8* %183, align 4, !insn.addr !8437
  %186 = add i64 %rax.4.reload, ptrtoint (i32* @global_var_1 to i64), !insn.addr !8438
  %187 = add i64 %rdx.4.reload, ptrtoint (i32* @global_var_1 to i64), !insn.addr !8439
  %188 = icmp eq i64 %186, %13, !insn.addr !8440
  %189 = icmp eq i1 %188, false, !insn.addr !8441
  store i64 %186, i64* %rax.4.reg2mem, !insn.addr !8441
  store i64 %187, i64* %rdx.4.reg2mem, !insn.addr !8441
  br i1 %189, label %dec_label_pc_1357d, label %dec_label_pc_1358f, !insn.addr !8441

dec_label_pc_1358f:                               ; preds = %dec_label_pc_1357d
  %190 = call i64 @Gen_Identify_Key.610(i64 %13, i64 %12), !insn.addr !8442
  %191 = load i8, i8* %20, align 8, !insn.addr !8443
  %192 = load i8, i8* %stack_var_-88, align 1, !insn.addr !8444
  %193 = icmp eq i8 %191, %192, !insn.addr !8444
  %194 = icmp eq i1 %193, false, !insn.addr !8445
  store i8 %191, i8* %.reg2mem86, !insn.addr !8445
  br i1 %194, label %dec_label_pc_13614, label %dec_label_pc_135b5, !insn.addr !8445

dec_label_pc_135b5:                               ; preds = %dec_label_pc_1358f
  store i64 %16, i64* %rsi, align 8, !insn.addr !8446
  store i64 %15, i64* %rax.5.reg2mem, !insn.addr !8446
  store i64 %22, i64* %rdx.5.reg2mem, !insn.addr !8446
  br label %dec_label_pc_135ca, !insn.addr !8446

dec_label_pc_135ca:                               ; preds = %dec_label_pc_135d1, %dec_label_pc_135b5
  %rdx.5.reload = load i64, i64* %rdx.5.reg2mem
  %rax.5.reload = load i64, i64* %rax.5.reg2mem
  %195 = inttoptr i64 %rdx.5.reload to i8*, !insn.addr !8447
  %196 = load i8, i8* %195, align 1, !insn.addr !8447
  %197 = inttoptr i64 %rax.5.reload to i8*, !insn.addr !8448
  %198 = load i8, i8* %197, align 4, !insn.addr !8448
  %199 = icmp eq i8 %196, %198, !insn.addr !8448
  %200 = icmp eq i1 %199, false, !insn.addr !8449
  store i8 %23, i8* %.reg2mem86, !insn.addr !8449
  br i1 %200, label %dec_label_pc_13614, label %dec_label_pc_135d1, !insn.addr !8449

dec_label_pc_135d1:                               ; preds = %dec_label_pc_135ca
  %201 = add i64 %rdx.5.reload, ptrtoint (i32* @global_var_1 to i64), !insn.addr !8450
  %202 = add i64 %rax.5.reload, ptrtoint (i32* @global_var_1 to i64), !insn.addr !8451
  %203 = icmp eq i64 %202, %16, !insn.addr !8452
  %204 = icmp eq i1 %203, false, !insn.addr !8453
  store i64 %202, i64* %rax.5.reg2mem, !insn.addr !8453
  store i64 %201, i64* %rdx.5.reg2mem, !insn.addr !8453
  br i1 %204, label %dec_label_pc_135ca, label %dec_label_pc_135ec, !insn.addr !8453

dec_label_pc_135ec:                               ; preds = %dec_label_pc_1353f, %dec_label_pc_135d1
  %205 = add i64 %arg1, ptrtoint (i8** @global_var_30da1 to i64), !insn.addr !8454
  %206 = inttoptr i64 %205 to i8*, !insn.addr !8454
  store i8 ptrtoint (i32* @global_var_1 to i8), i8* %206, align 1, !insn.addr !8454
  %207 = trunc i64 %r12.1.reload to i8, !insn.addr !8455
  %208 = icmp eq i8 %207, 62, !insn.addr !8455
  %209 = icmp eq i1 %208, false, !insn.addr !8456
  %210 = select i1 %209, i8 %207, i8 ptrtoint (i32* @global_var_1 to i8), !insn.addr !8457
  %211 = add i64 %arg1, ptrtoint (i8** @global_var_30da3 to i64), !insn.addr !8457
  %212 = inttoptr i64 %211 to i8*, !insn.addr !8457
  store i8 %210, i8* %212, align 1, !insn.addr !8457
  br label %dec_label_pc_136ec, !insn.addr !8458

dec_label_pc_13614:                               ; preds = %dec_label_pc_1352f, %dec_label_pc_135ca, %dec_label_pc_1358f, %dec_label_pc_13501, %dec_label_pc_134dc
  %.reload87 = load i8, i8* %.reg2mem86
  %213 = add nuw nsw i64 %r12.1.reload, zext (i32 ptrtoint (i32* @global_var_1 to i32) to i64), !insn.addr !8459
  %214 = and i64 %213, 4294967295, !insn.addr !8459
  %215 = add i64 %r13.0.reload, ptrtoint (i32* @global_var_1 to i64), !insn.addr !8460
  %216 = add i64 %r14.1.reload, ptrtoint (i8* @global_var_10 to i64), !insn.addr !8461
  %217 = trunc i64 %213 to i32, !insn.addr !8462
  %218 = icmp eq i32 %217, 64, !insn.addr !8462
  %219 = icmp eq i1 %218, false, !insn.addr !8463
  store i8 %.reload87, i8* %.reg2mem84, !insn.addr !8463
  store i64 %214, i64* %r12.1.reg2mem, !insn.addr !8463
  store i64 %215, i64* %r13.0.reg2mem, !insn.addr !8463
  store i64 %216, i64* %r14.1.reg2mem, !insn.addr !8463
  store i64 4294967293, i64* %rax.6.reg2mem, !insn.addr !8463
  br i1 %219, label %dec_label_pc_134dc, label %dec_label_pc_136db, !insn.addr !8463

dec_label_pc_136db:                               ; preds = %dec_label_pc_13614, %38, %57, %75, %dec_label_pc_130c2
  %rax.6.reload = load i64, i64* %rax.6.reg2mem
  %220 = call i64 @__readgsqword(i64 40), !insn.addr !8464
  ret i64 %rax.6.reload, !insn.addr !8465

dec_label_pc_136ec:                               ; preds = %dec_label_pc_135ec, %dec_label_pc_13427
  %221 = add i64 %arg1, ptrtoint (i32** @global_var_1c70 to i64), !insn.addr !8466
  %222 = inttoptr i64 %221 to i32*, !insn.addr !8466
  store i32 ptrtoint (i32* @global_var_1 to i32), i32* %222, align 4, !insn.addr !8466
  ret i64 0, !insn.addr !8467
}

define void @DTV_PollingThread(i8* %Context) local_unnamed_addr {
dec_label_pc_13712:
  %0 = call i1 @__decompiler_undefined_function_2()
  %1 = ptrtoint i8* %Context to i64
  %2 = bitcast i8* %Context to i64*, !insn.addr !8468
  %3 = select i1 %0, i64 -8, i64 ptrtoint (i8* @global_var_8 to i64), !insn.addr !8468
  %4 = add i64 %3, %1, !insn.addr !8468
  %5 = inttoptr i64 %4 to i16*, !insn.addr !8469
  store i16 0, i16* %5, align 2, !insn.addr !8469
  ret void, !insn.addr !8470
}

define i64 @DTV_PollingThread.169(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4) local_unnamed_addr {
dec_label_pc_13742:
  %rcx.15.reg2mem = alloca i64, !insn.addr !8471
  %r15.4.reg2mem = alloca i64, !insn.addr !8471
  %r14.8.reg2mem = alloca i64, !insn.addr !8471
  %r9.8.reg2mem = alloca i64, !insn.addr !8471
  %r8.8.reg2mem = alloca i64, !insn.addr !8471
  %rcx.13.reg2mem = alloca i64, !insn.addr !8471
  %stack_var_-520.2.reg2mem = alloca i8*, !insn.addr !8471
  %stack_var_-529.4.reg2mem = alloca i32, !insn.addr !8471
  %r15.3.reg2mem = alloca i64, !insn.addr !8471
  %r14.7.reg2mem = alloca i64, !insn.addr !8471
  %r9.7.reg2mem = alloca i64, !insn.addr !8471
  %r8.7.reg2mem = alloca i64, !insn.addr !8471
  %rbx.6.reg2mem = alloca i64, !insn.addr !8471
  %rcx.12.reg2mem = alloca i64, !insn.addr !8471
  %stack_var_-520.1.reg2mem = alloca i8*, !insn.addr !8471
  %stack_var_-529.3.reg2mem = alloca i32, !insn.addr !8471
  %r15.2.reg2mem = alloca i64, !insn.addr !8471
  %r14.6.reg2mem = alloca i64, !insn.addr !8471
  %rcx.11.reg2mem = alloca i64, !insn.addr !8471
  %r13.3.reg2mem = alloca i64, !insn.addr !8471
  %rbx.4.reg2mem = alloca i64, !insn.addr !8471
  %.pre-phi67.reg2mem = alloca i32*, !insn.addr !8471
  %r9.6.reg2mem = alloca i64, !insn.addr !8471
  %r8.6.reg2mem = alloca i64, !insn.addr !8471
  %rcx.10.reg2mem = alloca i64, !insn.addr !8471
  %stack_var_-529.2.reg2mem = alloca i32, !insn.addr !8471
  %storemerge.reg2mem = alloca i8, !insn.addr !8471
  %rcx.9.reg2mem = alloca i64, !insn.addr !8471
  %rax.5.reg2mem = alloca i64, !insn.addr !8471
  %stack_var_-529.1.reg2mem = alloca i32, !insn.addr !8471
  %rax.4.reg2mem = alloca i64, !insn.addr !8471
  %rcx.8.reg2mem = alloca i64, !insn.addr !8471
  %rdx.4.reg2mem = alloca i64, !insn.addr !8471
  %rax.3.reg2mem = alloca i64, !insn.addr !8471
  %.pre-phi75.reg2mem = alloca i32*, !insn.addr !8471
  %.reg2mem95 = alloca i32, !insn.addr !8471
  %rdi.4.reg2mem = alloca i64, !insn.addr !8471
  %rdi.3.reg2mem = alloca i64, !insn.addr !8471
  %rdi.2.reg2mem = alloca i64, !insn.addr !8471
  %rdx.3.reg2mem = alloca i64, !insn.addr !8471
  %rdi.1.reg2mem = alloca i64, !insn.addr !8471
  %rdx.2.reg2mem = alloca i64, !insn.addr !8471
  %rdi.0.reg2mem = alloca i64, !insn.addr !8471
  %rdx.1.reg2mem = alloca i64, !insn.addr !8471
  %r14.5.reg2mem = alloca i64, !insn.addr !8471
  %rbx.3.reg2mem = alloca i64, !insn.addr !8471
  %r13.2.reg2mem = alloca i64, !insn.addr !8471
  %merge.reg2mem = alloca i64, !insn.addr !8471
  %rdx.0.reg2mem = alloca i64, !insn.addr !8471
  %rax.2.reg2mem = alloca i64, !insn.addr !8471
  %rax.1.reg2mem = alloca i64, !insn.addr !8471
  %.reg2mem93 = alloca i8, !insn.addr !8471
  %r14.4.reg2mem = alloca i64, !insn.addr !8471
  %rbx.2.reg2mem = alloca i64, !insn.addr !8471
  %.pre-phi55.reg2mem = alloca i8*, !insn.addr !8471
  %.pre-phi59.reg2mem = alloca i8*, !insn.addr !8471
  %rbx.1.reg2mem = alloca i64, !insn.addr !8471
  %r14.3.reg2mem = alloca i64, !insn.addr !8471
  %rcx.7.reg2mem = alloca i64, !insn.addr !8471
  %r13.1.reg2mem = alloca i64, !insn.addr !8471
  %r8.5.reg2mem = alloca i64, !insn.addr !8471
  %rcx.6.reg2mem = alloca i64, !insn.addr !8471
  %r15.1.reg2mem = alloca i64, !insn.addr !8471
  %r14.2.reg2mem = alloca i64, !insn.addr !8471
  %r9.4.reg2mem = alloca i64, !insn.addr !8471
  %r8.4.reg2mem = alloca i64, !insn.addr !8471
  %rcx.5.reg2mem = alloca i64, !insn.addr !8471
  %r9.3.reg2mem = alloca i64, !insn.addr !8471
  %r8.3.reg2mem = alloca i64, !insn.addr !8471
  %rcx.4.reg2mem = alloca i64, !insn.addr !8471
  %r9.2.reg2mem = alloca i64, !insn.addr !8471
  %r8.2.reg2mem = alloca i64, !insn.addr !8471
  %rcx.3.reg2mem = alloca i64, !insn.addr !8471
  %.reg2mem = alloca i64, !insn.addr !8471
  %r14.1.reg2mem = alloca i64, !insn.addr !8471
  %r13.0.reg2mem = alloca i64, !insn.addr !8471
  %r9.1.reg2mem = alloca i64, !insn.addr !8471
  %r8.1.reg2mem = alloca i64, !insn.addr !8471
  %rbx.0.reg2mem = alloca i64, !insn.addr !8471
  %rcx.2.reg2mem = alloca i64, !insn.addr !8471
  %rax.0.reg2mem = alloca i64, !insn.addr !8471
  %r15.0.reg2mem = alloca i64, !insn.addr !8471
  %r14.0.reg2mem = alloca i64, !insn.addr !8471
  %r9.0.reg2mem = alloca i64, !insn.addr !8471
  %r8.0.reg2mem = alloca i64, !insn.addr !8471
  %rcx.0.reg2mem = alloca i64, !insn.addr !8471
  %stack_var_-520.0.reg2mem = alloca i8*, !insn.addr !8471
  %stack_var_-529.0.reg2mem = alloca i32, !insn.addr !8471
  %0 = call i1 @__decompiler_undefined_function_2()
  %stack_var_-440 = alloca i8, align 1
  %stack_var_-70 = alloca i64, align 8
  %stack_var_-136 = alloca i8, align 1
  %stack_var_-424 = alloca i8, align 1
  %stack_var_-408 = alloca i32, align 4
  %stack_var_-392 = alloca i64, align 8
  %stack_var_-456 = alloca i128, align 8
  %stack_var_-448 = alloca i128, align 8
  %stack_var_-71 = alloca i8, align 1
  %stack_var_-64 = alloca i64, align 8
  %1 = call i64 @mcount(), !insn.addr !8472
  %2 = call i64 @__readgsqword(i64 40), !insn.addr !8473
  store i64 %2, i64* %stack_var_-64, align 8, !insn.addr !8474
  %3 = call i64 @Tnim_PollingThreadDelayTime.171(), !insn.addr !8475
  %4 = add i64 %arg1, 22880, !insn.addr !8476
  %5 = add i64 %arg1, 21466, !insn.addr !8477
  %6 = ptrtoint i8* %stack_var_-71 to i64, !insn.addr !8478
  %7 = add i64 %arg1, 22424
  %8 = inttoptr i64 %7 to i8*
  %9 = add i64 %arg1, 1312
  %10 = inttoptr i64 %9 to i64*
  %11 = add i64 %arg1, 21468
  %12 = inttoptr i64 %11 to i8*
  %13 = add i64 %arg1, 23064
  %14 = inttoptr i64 %13 to i64*
  %15 = add i64 %arg1, 21469
  %16 = inttoptr i64 %15 to i8*
  %17 = add i64 %arg1, 23144
  %18 = inttoptr i64 %17 to i64*
  %19 = add i64 %arg1, sext (i32 ptrtoint (i8* @global_var_8 to i32) to i64)
  %20 = ptrtoint i128* %stack_var_-448 to i64
  %21 = ptrtoint i128* %stack_var_-456 to i64
  %22 = ptrtoint i64* %stack_var_-392 to i64
  %sext19 = mul i64 %19, 4294967296
  %23 = sdiv i64 %sext19, 4294967296
  %24 = add i64 %arg1, ptrtoint (i64* @global_var_4e0 to i64)
  %25 = inttoptr i64 %24 to i64*
  %26 = add i64 %arg1, 21776
  %27 = inttoptr i64 %26 to i8*
  %28 = bitcast i32* %stack_var_-408 to i8*
  %29 = ptrtoint i8* %stack_var_-424 to i64
  %30 = add i64 %arg1, 21464
  %31 = inttoptr i64 %30 to i8*
  %32 = ptrtoint i32* %stack_var_-408 to i64
  %33 = select i1 %0, i64 -1, i64 1
  %34 = select i1 %0, i64 -2, i64 2
  %35 = select i1 %0, i64 -4, i64 4
  %36 = select i1 %0, i64 -8, i64 ptrtoint (i8* @global_var_8 to i64)
  %37 = select i1 %0, i64 -4, i64 ptrtoint (i16* @global_var_4 to i64)
  %38 = select i1 %0, i64 -2, i64 ptrtoint (i32* @global_var_2 to i64)
  %39 = ptrtoint i64* %stack_var_-64 to i64
  %40 = ptrtoint i64* %stack_var_-70 to i64
  store i32 0, i32* %stack_var_-529.0.reg2mem, !insn.addr !8479
  store i64 -6640827866535438581, i64* %rcx.0.reg2mem, !insn.addr !8479
  store i64 0, i64* %r14.0.reg2mem, !insn.addr !8479
  store i64 0, i64* %r15.0.reg2mem, !insn.addr !8479
  br label %dec_label_pc_137ef, !insn.addr !8479

dec_label_pc_137ef:                               ; preds = %dec_label_pc_13742, %dec_label_pc_149e9
  %r15.0.reload = load i64, i64* %r15.0.reg2mem
  %r14.0.reload = load i64, i64* %r14.0.reg2mem
  %r9.0.reload = load i64, i64* %r9.0.reg2mem
  %r8.0.reload = load i64, i64* %r8.0.reg2mem
  %rcx.0.reload = load i64, i64* %rcx.0.reg2mem
  %stack_var_-520.0.reload = load i8*, i8** %stack_var_-520.0.reg2mem
  %stack_var_-529.0.reload = load i32, i32* %stack_var_-529.0.reg2mem
  store i64 %rcx.0.reload, i64* %rcx.5.reg2mem, !insn.addr !8480
  store i64 %r8.0.reload, i64* %r8.4.reg2mem, !insn.addr !8480
  store i64 %r9.0.reload, i64* %r9.4.reg2mem, !insn.addr !8480
  store i64 %r14.0.reload, i64* %r14.2.reg2mem, !insn.addr !8480
  store i64 %r15.0.reload, i64* %r15.1.reg2mem, !insn.addr !8480
  br i1 false, label %dec_label_pc_13c4c, label %dec_label_pc_137fc, !insn.addr !8480

dec_label_pc_137fc:                               ; preds = %dec_label_pc_137ef
  %41 = load i8, i8* %8, align 1, !insn.addr !8481
  %42 = icmp eq i8 %41, 0, !insn.addr !8481
  %43 = icmp eq i1 %42, false, !insn.addr !8482
  store i64 %rcx.0.reload, i64* %rcx.5.reg2mem, !insn.addr !8482
  store i64 %r8.0.reload, i64* %r8.4.reg2mem, !insn.addr !8482
  store i64 %r9.0.reload, i64* %r9.4.reg2mem, !insn.addr !8482
  store i64 0, i64* %r14.2.reg2mem, !insn.addr !8482
  store i64 %r15.0.reload, i64* %r15.1.reg2mem, !insn.addr !8482
  br i1 %43, label %dec_label_pc_13c4c, label %dec_label_pc_1380b, !insn.addr !8482

dec_label_pc_1380b:                               ; preds = %dec_label_pc_137fc
  %44 = call i64 @TC_SetLNB.173(i64 %arg1, i64 0), !insn.addr !8483
  store i64 0, i64* %rax.0.reg2mem, !insn.addr !8484
  br label %dec_label_pc_13829, !insn.addr !8484

dec_label_pc_13829:                               ; preds = %dec_label_pc_13829, %dec_label_pc_1380b
  %rax.0.reload = load i64, i64* %rax.0.reg2mem
  %45 = add i64 %rax.0.reload, %arg1
  %46 = add i64 %45, 22888, !insn.addr !8485
  %47 = inttoptr i64 %46 to i64*, !insn.addr !8485
  store i64 ptrtoint (i32* @global_var_1 to i64), i64* %47, align 8, !insn.addr !8485
  %48 = add i64 %45, 22896, !insn.addr !8486
  %49 = inttoptr i64 %48 to i64*, !insn.addr !8486
  store i64 0, i64* %49, align 8, !insn.addr !8486
  %50 = add i64 %45, 22904, !insn.addr !8487
  %51 = inttoptr i64 %50 to i64*, !insn.addr !8487
  store i64 ptrtoint (i8** @global_var_17 to i64), i64* %51, align 8, !insn.addr !8487
  %52 = add nuw nsw i64 %rax.0.reload, 80, !insn.addr !8488
  %53 = icmp eq i64 %rax.0.reload, 560, !insn.addr !8489
  %54 = icmp eq i1 %53, false, !insn.addr !8490
  store i64 %52, i64* %rax.0.reg2mem, !insn.addr !8490
  br i1 %54, label %dec_label_pc_13829, label %dec_label_pc_13859, !insn.addr !8490

dec_label_pc_13859:                               ; preds = %dec_label_pc_13829
  %55 = load i64, i64* %10, align 8, !insn.addr !8491
  %56 = icmp ult i64 %55, -72057594021150720
  %57 = add i64 %55, 72057594021150720
  %58 = select i1 %56, i64 %55, i64 %57, !insn.addr !8491
  %59 = icmp eq i64 %58, 0, !insn.addr !8491
  %60 = icmp eq i1 %59, false, !insn.addr !8492
  br i1 %60, label %dec_label_pc_13888, label %dec_label_pc_1386d, !insn.addr !8492

dec_label_pc_1386d:                               ; preds = %dec_label_pc_13859
  %61 = call i64 @Tnim_PollingThreadOnlyCallOnce.191(i64 %arg1, i64 %5, i64* bitcast (i8* @global_var_8 to i64*), i64 %4), !insn.addr !8493
  br label %dec_label_pc_13888, !insn.addr !8493

dec_label_pc_13888:                               ; preds = %dec_label_pc_1386d, %dec_label_pc_13859
  %62 = load i8, i8* %12, align 1, !insn.addr !8494
  %63 = icmp eq i8 %62, 0, !insn.addr !8494
  %64 = icmp eq i1 %63, false, !insn.addr !8495
  br i1 %64, label %dec_label_pc_1389f, label %dec_label_pc_13893, !insn.addr !8495

dec_label_pc_13893:                               ; preds = %dec_label_pc_13888
  store i64 255, i64* %14, align 8, !insn.addr !8496
  br label %dec_label_pc_1389f, !insn.addr !8496

dec_label_pc_1389f:                               ; preds = %dec_label_pc_13893, %dec_label_pc_13888
  %65 = load i8, i8* %16, align 1, !insn.addr !8497
  %66 = icmp eq i8 %65, 0, !insn.addr !8497
  %67 = icmp eq i1 %66, false, !insn.addr !8498
  br i1 %67, label %dec_label_pc_138b6, label %dec_label_pc_138aa, !insn.addr !8498

dec_label_pc_138aa:                               ; preds = %dec_label_pc_1389f
  store i64 255, i64* %18, align 8, !insn.addr !8499
  br label %dec_label_pc_138b6, !insn.addr !8499

dec_label_pc_138b6:                               ; preds = %dec_label_pc_138aa, %dec_label_pc_1389f
  store i64 %4, i64* %rcx.2.reg2mem, !insn.addr !8500
  store i64 %arg1, i64* %rbx.0.reg2mem, !insn.addr !8500
  store i64 %r8.0.reload, i64* %r8.1.reg2mem, !insn.addr !8500
  store i64 %r9.0.reload, i64* %r9.1.reg2mem, !insn.addr !8500
  store i64 %arg1, i64* %r13.0.reg2mem, !insn.addr !8500
  store i64 %4, i64* %r14.1.reg2mem, !insn.addr !8500
  br label %dec_label_pc_138e0, !insn.addr !8500

dec_label_pc_138e0:                               ; preds = %dec_label_pc_13c24, %dec_label_pc_138b6
  %r14.1.reload = load i64, i64* %r14.1.reg2mem
  %r13.0.reload = load i64, i64* %r13.0.reg2mem
  %r9.1.reload = load i64, i64* %r9.1.reg2mem
  %r8.1.reload = load i64, i64* %r8.1.reg2mem
  %rbx.0.reload = load i64, i64* %rbx.0.reg2mem
  %rcx.2.reload = load i64, i64* %rcx.2.reg2mem
  %68 = add i64 %rbx.0.reload, 21466, !insn.addr !8501
  %69 = inttoptr i64 %68 to i8*, !insn.addr !8501
  %70 = load i8, i8* %69, align 1, !insn.addr !8501
  %71 = icmp eq i8 %70, 1, !insn.addr !8501
  %72 = icmp eq i1 %71, false, !insn.addr !8502
  store i64 %rcx.2.reload, i64* %rcx.4.reg2mem, !insn.addr !8502
  store i64 %r8.1.reload, i64* %r8.3.reg2mem, !insn.addr !8502
  store i64 %r9.1.reload, i64* %r9.3.reg2mem, !insn.addr !8502
  br i1 %72, label %dec_label_pc_13c24, label %dec_label_pc_138f7, !insn.addr !8502

dec_label_pc_138f7:                               ; preds = %dec_label_pc_138e0
  %73 = sub i64 %rbx.0.reload, %arg1, !insn.addr !8503
  %74 = and i64 %73, 4294967295, !insn.addr !8503
  %75 = add i64 %r13.0.reload, 21488, !insn.addr !8504
  %76 = inttoptr i64 %75 to i64*, !insn.addr !8504
  %77 = load i64, i64* %76, align 8, !insn.addr !8504
  %78 = icmp eq i64 %77, 1, !insn.addr !8504
  %79 = icmp eq i1 %78, false, !insn.addr !8505
  br i1 %79, label %dec_label_pc_13917, label %dec_label_pc_13901, !insn.addr !8505

dec_label_pc_13901:                               ; preds = %dec_label_pc_138f7
  %80 = call i64 @FUSB_RstBulkPipe.452(i64 %arg1, i64 %74), !insn.addr !8506
  store i64 0, i64* %76, align 8, !insn.addr !8507
  br label %dec_label_pc_13917, !insn.addr !8507

dec_label_pc_13917:                               ; preds = %dec_label_pc_13901, %dec_label_pc_138f7
  %81 = call i64 @TC_ReadSNR.608(i64 %arg1, i64 %74, i64 %r14.1.reload), !insn.addr !8508
  %82 = call i64 @TC_GetSignaLevel.245(i64 %arg1, i64 %74, i64 %r14.1.reload), !insn.addr !8509
  %83 = add i64 %r13.0.reload, ptrtoint (i64* @global_var_4e0 to i64), !insn.addr !8510
  %84 = inttoptr i64 %83 to i64*, !insn.addr !8510
  %85 = load i64, i64* %84, align 8, !insn.addr !8510
  %86 = add i64 %85, 600488
  %87 = inttoptr i64 %86 to i64*
  %88 = load i64, i64* %87, align 8
  %89 = add i64 %88, -1, !insn.addr !8511
  %90 = icmp ult i64 %89, 999999
  store i64 %88, i64* %.reg2mem, !insn.addr !8512
  store i64 %rcx.2.reload, i64* %rcx.3.reg2mem, !insn.addr !8512
  store i64 %r8.1.reload, i64* %r8.2.reg2mem, !insn.addr !8512
  store i64 %r9.1.reload, i64* %r9.2.reg2mem, !insn.addr !8512
  br i1 %90, label %dec_label_pc_13958, label %dec_label_pc_13a42, !insn.addr !8512

dec_label_pc_13958:                               ; preds = %dec_label_pc_13917
  %91 = add i64 %rbx.0.reload, 888, !insn.addr !8513
  %92 = inttoptr i64 %91 to i8*, !insn.addr !8513
  %93 = load i8, i8* %92, align 1, !insn.addr !8513
  %94 = icmp eq i8 %93, 1, !insn.addr !8513
  %95 = icmp eq i1 %94, false, !insn.addr !8514
  store i64 %rcx.2.reload, i64* %rcx.4.reg2mem, !insn.addr !8514
  store i64 %r8.1.reload, i64* %r8.3.reg2mem, !insn.addr !8514
  store i64 %r9.1.reload, i64* %r9.3.reg2mem, !insn.addr !8514
  br i1 %95, label %dec_label_pc_13c24, label %dec_label_pc_13965, !insn.addr !8514

dec_label_pc_13965:                               ; preds = %dec_label_pc_13958
  %sext28 = mul i64 %r14.1.reload, 4294967296
  %96 = sdiv i64 %sext28, 4294967296, !insn.addr !8515
  %97 = call i64 @TC_GetBER.396(i64 %arg1, i64 %74, i64 %21, i64 %20, i64 %96), !insn.addr !8516
  %98 = call i64 @TC_GetCN.149(i64 %arg1, i64 %74, i64 %96), !insn.addr !8517
  %99 = load i128, i128* %stack_var_-456, align 8, !insn.addr !8518
  %100 = and i128 %99, 18446744073709551615, !insn.addr !8519
  %101 = mul nuw i128 %100, 12379400392853802749, !insn.addr !8519
  %102 = udiv i128 %101, 9223372036854775808, !insn.addr !8519
  %103 = trunc i128 %102 to i64, !insn.addr !8520
  %104 = load i64, i64* %84, align 8, !insn.addr !8521
  %105 = add i64 %104, 600488, !insn.addr !8522
  %106 = inttoptr i64 %105 to i64*, !insn.addr !8522
  %107 = load i64, i64* %106, align 8, !insn.addr !8522
  %108 = call i64 @sprintf(i64 %22, i64 0, i64 %107, i8 0, i64 %98, i64 %103), !insn.addr !8523
  %.pre = load i64, i64* %84, align 8
  %.pre60 = add i64 %.pre, 600488, !insn.addr !8524
  %.pre62 = inttoptr i64 %.pre60 to i64*, !insn.addr !8524
  %.pr.pre = load i64, i64* %.pre62, align 8
  store i64 %.pr.pre, i64* %.reg2mem, !insn.addr !8523
  store i64 0, i64* %rcx.3.reg2mem, !insn.addr !8523
  store i64 %98, i64* %r8.2.reg2mem, !insn.addr !8523
  store i64 %103, i64* %r9.2.reg2mem, !insn.addr !8523
  br label %dec_label_pc_13a42, !insn.addr !8523

dec_label_pc_13a42:                               ; preds = %dec_label_pc_13965, %dec_label_pc_13917
  %r9.2.reload = load i64, i64* %r9.2.reg2mem
  %r8.2.reload = load i64, i64* %r8.2.reg2mem
  %rcx.3.reload = load i64, i64* %rcx.3.reg2mem
  %.reload = load i64, i64* %.reg2mem, !insn.addr !8524
  %109 = icmp ult i64 %.reload, 1000001
  store i64 %rcx.3.reload, i64* %rcx.4.reg2mem, !insn.addr !8525
  store i64 %r8.2.reload, i64* %r8.3.reg2mem, !insn.addr !8525
  store i64 %r9.2.reload, i64* %r9.3.reg2mem, !insn.addr !8525
  br i1 %109, label %dec_label_pc_13c24, label %dec_label_pc_13a5a, !insn.addr !8525

dec_label_pc_13a5a:                               ; preds = %dec_label_pc_13a42
  %110 = add i64 %rbx.0.reload, 888, !insn.addr !8526
  %111 = inttoptr i64 %110 to i8*, !insn.addr !8526
  %112 = load i8, i8* %111, align 1, !insn.addr !8526
  %113 = icmp eq i8 %112, 1, !insn.addr !8526
  %114 = icmp eq i1 %113, false, !insn.addr !8527
  store i64 %rcx.3.reload, i64* %rcx.4.reg2mem, !insn.addr !8527
  store i64 %r8.2.reload, i64* %r8.3.reg2mem, !insn.addr !8527
  store i64 %r9.2.reload, i64* %r9.3.reg2mem, !insn.addr !8527
  br i1 %114, label %dec_label_pc_13c24, label %dec_label_pc_13a67, !insn.addr !8527

dec_label_pc_13a67:                               ; preds = %dec_label_pc_13a5a
  %sext16 = mul i64 %r14.1.reload, 4294967296
  %115 = sdiv i64 %sext16, 4294967296, !insn.addr !8528
  %116 = call i64 @TC_GetBER.396(i64 %arg1, i64 %74, i64 %21, i64 %20, i64 %115), !insn.addr !8529
  %117 = call i64 @TC_GetCN.149(i64 %arg1, i64 %74, i64 %115), !insn.addr !8530
  %118 = load i64, i64* %84, align 8, !insn.addr !8531
  %119 = add i64 %118, 600488, !insn.addr !8532
  %120 = inttoptr i64 %119 to i64*, !insn.addr !8532
  %121 = load i64, i64* %120, align 8, !insn.addr !8532
  %122 = call i64 @sprintf(i64 %22, i64 0, i64 %121, i8 0, i64 %117, i64 %r9.2.reload), !insn.addr !8533
  %123 = load i64, i64* %84, align 8, !insn.addr !8534
  %124 = add i64 %123, 600488, !insn.addr !8535
  %125 = inttoptr i64 %124 to i64*, !insn.addr !8535
  %126 = load i64, i64* %125, align 8, !insn.addr !8535
  %127 = load i128, i128* %stack_var_-448, align 8
  %128 = and i128 %127, 18446744073709551615
  %129 = mul nuw i128 %128, 12379400392853802749
  %130 = udiv i128 %129, 9223372036854775808
  %131 = trunc i128 %130 to i64
  %132 = call i64 @sprintf(i64 %22, i64 0, i64 %126, i8 0, i64 %117, i64 %131)
  store i64 0, i64* %rcx.4.reg2mem, !insn.addr !8536
  store i64 %117, i64* %r8.3.reg2mem, !insn.addr !8536
  store i64 %131, i64* %r9.3.reg2mem, !insn.addr !8536
  br label %dec_label_pc_13c24, !insn.addr !8536

dec_label_pc_13c24:                               ; preds = %dec_label_pc_13958, %dec_label_pc_13a67, %dec_label_pc_13a5a, %dec_label_pc_13a42, %dec_label_pc_138e0
  %r9.3.reload = load i64, i64* %r9.3.reg2mem
  %r8.3.reload = load i64, i64* %r8.3.reg2mem
  %rcx.4.reload = load i64, i64* %rcx.4.reg2mem
  %133 = add i64 %rbx.0.reload, ptrtoint (i32* @global_var_1 to i64), !insn.addr !8537
  %134 = add i64 %r13.0.reload, ptrtoint (i8* @global_var_8 to i64), !insn.addr !8538
  %135 = add i64 %r14.1.reload, 80, !insn.addr !8539
  %136 = icmp eq i64 %133, %23, !insn.addr !8540
  %137 = icmp eq i1 %136, false, !insn.addr !8541
  store i64 %rcx.4.reload, i64* %rcx.2.reg2mem, !insn.addr !8541
  store i64 %133, i64* %rbx.0.reg2mem, !insn.addr !8541
  store i64 %r8.3.reload, i64* %r8.1.reg2mem, !insn.addr !8541
  store i64 %r9.3.reload, i64* %r9.1.reg2mem, !insn.addr !8541
  store i64 %134, i64* %r13.0.reg2mem, !insn.addr !8541
  store i64 %135, i64* %r14.1.reg2mem, !insn.addr !8541
  br i1 %137, label %dec_label_pc_138e0, label %dec_label_pc_13c3d, !insn.addr !8541

dec_label_pc_13c3d:                               ; preds = %dec_label_pc_13c24
  %sext20 = mul i64 %r15.0.reload, 4294967296
  %138 = sdiv i64 %sext20, 4294967296, !insn.addr !8542
  store i64 %rcx.4.reload, i64* %rcx.5.reg2mem, !insn.addr !8543
  store i64 %r8.3.reload, i64* %r8.4.reg2mem, !insn.addr !8543
  store i64 %r9.3.reload, i64* %r9.4.reg2mem, !insn.addr !8543
  store i64 0, i64* %r14.2.reg2mem, !insn.addr !8543
  store i64 %138, i64* %r15.1.reg2mem, !insn.addr !8543
  br label %dec_label_pc_13c4c, !insn.addr !8543

dec_label_pc_13c4c:                               ; preds = %dec_label_pc_137fc, %dec_label_pc_13c3d, %dec_label_pc_137ef
  %r15.1.reload = load i64, i64* %r15.1.reg2mem
  %r14.2.reload = load i64, i64* %r14.2.reg2mem
  %r9.4.reload = load i64, i64* %r9.4.reg2mem
  %r8.4.reload = load i64, i64* %r8.4.reg2mem
  %rcx.5.reload = load i64, i64* %rcx.5.reg2mem
  %139 = load i64, i64* %25, align 8, !insn.addr !8544
  %140 = icmp eq i64 %139, 0, !insn.addr !8545
  store i32 %stack_var_-529.0.reload, i32* %stack_var_-529.4.reg2mem, !insn.addr !8546
  store i8* %stack_var_-520.0.reload, i8** %stack_var_-520.2.reg2mem, !insn.addr !8546
  store i64 %rcx.5.reload, i64* %rcx.13.reg2mem, !insn.addr !8546
  store i64 %r8.4.reload, i64* %r8.8.reg2mem, !insn.addr !8546
  store i64 %r9.4.reload, i64* %r9.8.reg2mem, !insn.addr !8546
  store i64 %r14.2.reload, i64* %r14.8.reg2mem, !insn.addr !8546
  store i64 %r15.1.reload, i64* %r15.4.reg2mem, !insn.addr !8546
  br i1 %140, label %dec_label_pc_149d4, label %dec_label_pc_13c5d, !insn.addr !8546

dec_label_pc_13c5d:                               ; preds = %dec_label_pc_13c4c
  %141 = add i64 %139, 5592, !insn.addr !8547
  %142 = inttoptr i64 %141 to i8*, !insn.addr !8547
  %143 = load i8, i8* %142, align 1, !insn.addr !8547
  %144 = icmp eq i8 %143, 1, !insn.addr !8547
  %145 = icmp eq i1 %144, false, !insn.addr !8548
  store i32 %stack_var_-529.0.reload, i32* %stack_var_-529.4.reg2mem, !insn.addr !8548
  store i8* %stack_var_-520.0.reload, i8** %stack_var_-520.2.reg2mem, !insn.addr !8548
  store i64 %rcx.5.reload, i64* %rcx.13.reg2mem, !insn.addr !8548
  store i64 %r8.4.reload, i64* %r8.8.reg2mem, !insn.addr !8548
  store i64 %r9.4.reload, i64* %r9.8.reg2mem, !insn.addr !8548
  store i64 %r14.2.reload, i64* %r14.8.reg2mem, !insn.addr !8548
  store i64 %r15.1.reload, i64* %r15.4.reg2mem, !insn.addr !8548
  br i1 %145, label %dec_label_pc_149d4, label %dec_label_pc_13c6a, !insn.addr !8548

dec_label_pc_13c6a:                               ; preds = %dec_label_pc_13c5d
  %146 = add i64 %139, 5261, !insn.addr !8549
  %147 = inttoptr i64 %146 to i8*, !insn.addr !8549
  %148 = load i8, i8* %147, align 1, !insn.addr !8549
  %149 = zext i8 %148 to i64, !insn.addr !8549
  %150 = load i8, i8* %27, align 1, !insn.addr !8550
  %151 = icmp eq i8 %150, 1, !insn.addr !8550
  store i32 %stack_var_-529.0.reload, i32* %stack_var_-529.4.reg2mem, !insn.addr !8551
  store i8* %stack_var_-520.0.reload, i8** %stack_var_-520.2.reg2mem, !insn.addr !8551
  store i64 %rcx.5.reload, i64* %rcx.13.reg2mem, !insn.addr !8551
  store i64 %r8.4.reload, i64* %r8.8.reg2mem, !insn.addr !8551
  store i64 %149, i64* %r9.8.reg2mem, !insn.addr !8551
  store i64 %r14.2.reload, i64* %r14.8.reg2mem, !insn.addr !8551
  store i64 %r15.1.reload, i64* %r15.4.reg2mem, !insn.addr !8551
  br i1 %151, label %dec_label_pc_149d4, label %dec_label_pc_13c93, !insn.addr !8551

dec_label_pc_13c93:                               ; preds = %dec_label_pc_13c6a
  %152 = icmp eq i8 %148, 0, !insn.addr !8552
  %153 = select i1 %152, i64 64, i64 320, !insn.addr !8553
  %154 = add i64 %139, 4928, !insn.addr !8554
  %155 = inttoptr i64 %154 to i8*, !insn.addr !8554
  %156 = load i8, i8* %155, align 1, !insn.addr !8554
  %157 = icmp eq i8 %156, 0, !insn.addr !8555
  %158 = icmp eq i1 %157, false, !insn.addr !8556
  br i1 %158, label %dec_label_pc_14021, label %dec_label_pc_13ca2, !insn.addr !8556

dec_label_pc_13ca2:                               ; preds = %dec_label_pc_13c93
  %159 = add i64 %139, 5584, !insn.addr !8557
  %160 = inttoptr i64 %159 to i32*, !insn.addr !8557
  store i32 0, i32* %160, align 4, !insn.addr !8557
  %161 = add i64 %139, 589264, !insn.addr !8558
  %162 = inttoptr i64 %161 to i64*, !insn.addr !8558
  store i64 0, i64* %162, align 8, !insn.addr !8558
  %163 = add i64 %139, 589248, !insn.addr !8559
  %164 = inttoptr i64 %163 to i64*, !insn.addr !8559
  store i64 0, i64* %164, align 8, !insn.addr !8559
  %165 = add i64 %139, 589256, !insn.addr !8560
  %166 = inttoptr i64 %165 to i64*, !insn.addr !8560
  store i64 0, i64* %166, align 8, !insn.addr !8560
  %167 = add i64 %139, 589272, !insn.addr !8561
  %168 = inttoptr i64 %167 to i8*, !insn.addr !8561
  store i8 0, i8* %168, align 1, !insn.addr !8561
  store i32 -128, i32* %stack_var_-408, align 4, !insn.addr !8562
  %169 = add i64 %139, 588972, !insn.addr !8563
  %170 = inttoptr i64 %169 to i8*, !insn.addr !8563
  %171 = load i8, i8* %170, align 1, !insn.addr !8563
  %172 = call i64 @DTV_DecEncChip_I2C_Write.354(i64 %139, i8 %171, i64* null, i8* nonnull %28, i64* bitcast (i32* @global_var_1 to i64*)), !insn.addr !8564
  %173 = call i64 @TLIB_Delay.388(i64* bitcast (i8* @global_var_a to i64*)), !insn.addr !8565
  store i32 0, i32* %stack_var_-408, align 4, !insn.addr !8566
  %174 = load i8, i8* %170, align 1, !insn.addr !8567
  %175 = call i64 @DTV_DecEncChip_I2C_Write.354(i64 %139, i8 %174, i64* null, i8* nonnull %28, i64* bitcast (i32* @global_var_1 to i64*)), !insn.addr !8568
  store i32 0, i32* %stack_var_-408, align 4, !insn.addr !8569
  %176 = load i8, i8* %170, align 1, !insn.addr !8570
  %177 = call i64 @DTV_DecEncChip_I2C_Write.354(i64 %139, i8 %176, i64* bitcast (i16* @global_var_4 to i64*), i8* nonnull %28, i64* bitcast (i32* @global_var_1 to i64*)), !insn.addr !8571
  store i32 0, i32* %stack_var_-408, align 4, !insn.addr !8572
  %178 = load i8, i8* %170, align 1, !insn.addr !8573
  %179 = call i64 @DTV_DecEncChip_I2C_Write.354(i64 %139, i8 %178, i64* null, i8* nonnull %28, i64* bitcast (i32* @global_var_1 to i64*)), !insn.addr !8574
  %180 = add i64 %139, 4936, !insn.addr !8575
  %181 = inttoptr i64 %180 to i8*, !insn.addr !8576
  call void @__asm_rep_stosq_memset(i8* %181, i64 0, i64 40), !insn.addr !8576
  %182 = call i64 @TLIB_Delay.388(i64* inttoptr (i64 100 to i64*)), !insn.addr !8577
  %183 = load i8, i8* %170, align 1, !insn.addr !8578
  %184 = zext i8 %183 to i64, !insn.addr !8578
  %185 = call i64 @DTV_DecEncChip_I2C_Read.612(i64 %139, i64 %184, i64 ptrtoint (i16* @global_var_4 to i64), i64 %29, i64 ptrtoint (i32* @global_var_1 to i64)), !insn.addr !8579
  %186 = load i8, i8* %stack_var_-424, align 1, !insn.addr !8580
  %187 = and i8 %186, ptrtoint (i32* @global_var_1 to i8), !insn.addr !8580
  %188 = icmp eq i8 %187, 0, !insn.addr !8580
  br i1 %188, label %dec_label_pc_14006, label %dec_label_pc_13deb, !insn.addr !8581

dec_label_pc_13deb:                               ; preds = %dec_label_pc_13ca2
  %189 = load i8, i8* %31, align 1, !insn.addr !8582
  %190 = icmp eq i8 %189, 0, !insn.addr !8582
  %191 = icmp eq i1 %190, false, !insn.addr !8583
  br i1 %191, label %dec_label_pc_14006, label %dec_label_pc_13dfa, !insn.addr !8583

dec_label_pc_13dfa:                               ; preds = %dec_label_pc_13deb
  %192 = call i64 @TLIB_SetGPIO.391(i64 %arg1, i64* inttoptr (i64 255 to i64*), i64* bitcast (i32* @global_var_1 to i64*)), !insn.addr !8584
  %193 = call i64 @TLIB_Delay.388(i64* inttoptr (i64 50 to i64*)), !insn.addr !8585
  store i32 sext (i8 ptrtoint (i8* @global_var_8 to i8) to i32), i32* %stack_var_-408, align 4, !insn.addr !8586
  %194 = load i8, i8* %170, align 1, !insn.addr !8587
  %195 = call i64 @DTV_DecEncChip_I2C_Write.354(i64 %139, i8 %194, i64* null, i8* nonnull %28, i64* bitcast (i32* @global_var_1 to i64*)), !insn.addr !8588
  store i32 -128, i32* %stack_var_-408, align 4, !insn.addr !8589
  %196 = load i8, i8* %170, align 1, !insn.addr !8590
  %197 = call i64 @DTV_DecEncChip_I2C_Write.354(i64 %139, i8 %196, i64* bitcast (i16* @global_var_4 to i64*), i8* nonnull %28, i64* bitcast (i32* @global_var_1 to i64*)), !insn.addr !8591
  %198 = call i64 @TLIB_Delay.388(i64* inttoptr (i64 200 to i64*)), !insn.addr !8592
  %199 = load i8, i8* %31, align 1, !insn.addr !8593
  %200 = icmp eq i8 %199, 0, !insn.addr !8593
  %201 = icmp eq i1 %200, false, !insn.addr !8594
  store i32 %stack_var_-529.0.reload, i32* %stack_var_-529.3.reg2mem, !insn.addr !8594
  store i8* %stack_var_-520.0.reload, i8** %stack_var_-520.1.reg2mem, !insn.addr !8594
  store i64 %32, i64* %rcx.12.reg2mem, !insn.addr !8594
  store i64 %139, i64* %rbx.6.reg2mem, !insn.addr !8594
  store i64 ptrtoint (i32* @global_var_1 to i64), i64* %r8.7.reg2mem, !insn.addr !8594
  store i64 0, i64* %r9.7.reg2mem, !insn.addr !8594
  store i64 %r14.2.reload, i64* %r14.7.reg2mem, !insn.addr !8594
  store i64 %r15.1.reload, i64* %r15.3.reg2mem, !insn.addr !8594
  br i1 %201, label %dec_label_pc_14962, label %dec_label_pc_13e8f, !insn.addr !8594

dec_label_pc_13e8f:                               ; preds = %dec_label_pc_13dfa
  store i32 sext (i8 ptrtoint (i8** @global_var_9 to i8) to i32), i32* %stack_var_-408, align 4, !insn.addr !8595
  %202 = load i8, i8* %170, align 1, !insn.addr !8596
  %203 = call i64 @DTV_DecEncChip_I2C_Write.354(i64 %139, i8 %202, i64* null, i8* nonnull %28, i64* bitcast (i32* @global_var_1 to i64*)), !insn.addr !8597
  %204 = add i64 %139, 4932, !insn.addr !8598
  %205 = load i8, i8* %147, align 1, !insn.addr !8599
  %206 = inttoptr i64 %180 to i64*, !insn.addr !8600
  %207 = inttoptr i64 %204 to i64*, !insn.addr !8600
  %208 = call i64 @bReadBCAS_Data.551(i64 %arg1, i64* %206, i64* %207, i64 ptrtoint (i32* @global_var_1 to i64), i64 %153, i8 %205), !insn.addr !8600
  store i32 sext (i8 ptrtoint (i32* @global_var_1 to i8) to i32), i32* %stack_var_-408, align 4, !insn.addr !8601
  %209 = load i8, i8* %170, align 1, !insn.addr !8602
  %210 = call i64 @DTV_DecEncChip_I2C_Write.354(i64 %139, i8 %209, i64* bitcast (i32* @global_var_1 to i64*), i8* nonnull %28, i64* bitcast (i32* @global_var_1 to i64*)), !insn.addr !8603
  %211 = add i64 %139, 5256, !insn.addr !8604
  %212 = inttoptr i64 %211 to i8*, !insn.addr !8604
  store i8 ptrtoint (i32* @global_var_1 to i8), i8* %212, align 1, !insn.addr !8604
  %213 = add i64 %139, ptrtoint (i8** @global_var_148b to i64), !insn.addr !8605
  %214 = inttoptr i64 %213 to i8*, !insn.addr !8605
  store i8 0, i8* %214, align 1, !insn.addr !8605
  %215 = add i64 %139, 5258, !insn.addr !8606
  %216 = inttoptr i64 %215 to i8*, !insn.addr !8606
  store i8 0, i8* %216, align 1, !insn.addr !8606
  %217 = add i64 %139, 5260, !insn.addr !8607
  %218 = inttoptr i64 %217 to i8*, !insn.addr !8607
  store i8 0, i8* %218, align 1, !insn.addr !8607
  %219 = load i8, i8* %147, align 1, !insn.addr !8608
  %220 = icmp eq i8 %219, 0, !insn.addr !8608
  store i64 %32, i64* %rcx.6.reg2mem, !insn.addr !8609
  store i64 ptrtoint (i32* @global_var_1 to i64), i64* %r8.5.reg2mem, !insn.addr !8609
  br i1 %220, label %dec_label_pc_13fdd, label %dec_label_pc_13f3e, !insn.addr !8609

dec_label_pc_13f3e:                               ; preds = %dec_label_pc_13e8f
  store i8 0, i8* %stack_var_-136, align 1, !insn.addr !8610
  %221 = load i8, i8* %212, align 1, !insn.addr !8611
  %222 = icmp eq i8 %221, 0, !insn.addr !8611
  br i1 %222, label %dec_label_pc_13f87, label %dec_label_pc_13f57, !insn.addr !8612

dec_label_pc_13f57:                               ; preds = %dec_label_pc_13f3e
  %223 = call i64 @ChangeEndian.223(i64 0), !insn.addr !8613
  %224 = trunc i64 %223 to i8, !insn.addr !8614
  store i8 %224, i8* %stack_var_-136, align 1, !insn.addr !8614
  %225 = call i64 @ChangeEndian.223(i64 193), !insn.addr !8615
  %226 = call i64 @ChangeEndian.223(i64 zext (i32 and (i32 sext (i8 ptrtoint (i32* @global_var_1 to i8) to i32), i32 255) to i64)), !insn.addr !8616
  %227 = call i64 @ChangeEndian.223(i64 254), !insn.addr !8617
  br label %dec_label_pc_13f87, !insn.addr !8618

dec_label_pc_13f87:                               ; preds = %dec_label_pc_13f57, %dec_label_pc_13f3e
  %228 = load i8, i8* %147, align 1, !insn.addr !8619
  %229 = add i64 %139, 72, !insn.addr !8620
  %230 = inttoptr i64 %229 to i64*, !insn.addr !8620
  %231 = load i64, i64* %230, align 8, !insn.addr !8620
  %232 = call i64 @bWtBCAS_Data.188(i64 %231, i8* nonnull %stack_var_-136, i64* bitcast (i8* @global_var_5 to i64*), i8 %228), !insn.addr !8621
  store i32 sext (i8 ptrtoint ([4 x i8]* @global_var_c to i8) to i32), i32* %stack_var_-408, align 4, !insn.addr !8622
  %233 = load i8, i8* %170, align 1, !insn.addr !8623
  %234 = zext i8 %233 to i64, !insn.addr !8623
  %235 = call i64 @DTV_WriteI2CEncData.517(i64 %139, i64 %234, i64 0, i64* bitcast (i32* @global_var_1 to i64*), i8* nonnull %28), !insn.addr !8624
  store i64 ptrtoint (i32* @global_var_1 to i64), i64* %rcx.6.reg2mem, !insn.addr !8624
  store i64 %32, i64* %r8.5.reg2mem, !insn.addr !8624
  br label %dec_label_pc_13fdd, !insn.addr !8624

dec_label_pc_13fdd:                               ; preds = %dec_label_pc_13f87, %dec_label_pc_13e8f
  %r8.5.reload = load i64, i64* %r8.5.reg2mem
  %rcx.6.reload = load i64, i64* %rcx.6.reg2mem
  %236 = add i64 %139, ptrtoint (i8* @global_var_8 to i64), !insn.addr !8625
  %237 = call i64 @Get_BCAS_INFO.250(i64 %236), !insn.addr !8626
  %238 = add i64 %139, 732, !insn.addr !8627
  %239 = inttoptr i64 %238 to i32*, !insn.addr !8627
  store i32 0, i32* %239, align 4, !insn.addr !8627
  %240 = add i64 %139, 408, !insn.addr !8628
  %241 = inttoptr i64 %240 to i32*, !insn.addr !8628
  store i32 0, i32* %241, align 4, !insn.addr !8628
  store i8 ptrtoint (i32* @global_var_1 to i8), i8* %155, align 1, !insn.addr !8629
  store i32 %stack_var_-529.0.reload, i32* %stack_var_-529.3.reg2mem, !insn.addr !8630
  store i8* %stack_var_-520.0.reload, i8** %stack_var_-520.1.reg2mem, !insn.addr !8630
  store i64 %rcx.6.reload, i64* %rcx.12.reg2mem, !insn.addr !8630
  store i64 %139, i64* %rbx.6.reg2mem, !insn.addr !8630
  store i64 %r8.5.reload, i64* %r8.7.reg2mem, !insn.addr !8630
  store i64 0, i64* %r9.7.reg2mem, !insn.addr !8630
  store i64 %r14.2.reload, i64* %r14.7.reg2mem, !insn.addr !8630
  store i64 %r15.1.reload, i64* %r15.3.reg2mem, !insn.addr !8630
  br label %dec_label_pc_14962, !insn.addr !8630

dec_label_pc_14006:                               ; preds = %dec_label_pc_13deb, %dec_label_pc_13ca2
  %242 = call i64 @TLIB_SetGPIO.391(i64 %arg1, i64* null, i64* bitcast (i32* @global_var_1 to i64*)), !insn.addr !8631
  store i32 %stack_var_-529.0.reload, i32* %stack_var_-529.3.reg2mem, !insn.addr !8632
  store i8* %stack_var_-520.0.reload, i8** %stack_var_-520.1.reg2mem, !insn.addr !8632
  store i64 %29, i64* %rcx.12.reg2mem, !insn.addr !8632
  store i64 %139, i64* %rbx.6.reg2mem, !insn.addr !8632
  store i64 ptrtoint (i32* @global_var_1 to i64), i64* %r8.7.reg2mem, !insn.addr !8632
  store i64 0, i64* %r9.7.reg2mem, !insn.addr !8632
  store i64 %r14.2.reload, i64* %r14.7.reg2mem, !insn.addr !8632
  store i64 %r15.1.reload, i64* %r15.3.reg2mem, !insn.addr !8632
  br label %dec_label_pc_14962, !insn.addr !8632

dec_label_pc_14021:                               ; preds = %dec_label_pc_13c93
  %243 = icmp eq i8 %156, 2, !insn.addr !8633
  %244 = icmp eq i1 %243, false, !insn.addr !8634
  br i1 %244, label %dec_label_pc_14244, label %dec_label_pc_14029, !insn.addr !8634

dec_label_pc_14029:                               ; preds = %dec_label_pc_14021
  %245 = add i64 %139, 408, !insn.addr !8635
  %246 = inttoptr i64 %245 to i32*, !insn.addr !8635
  %247 = load i32, i32* %246, align 4, !insn.addr !8635
  %248 = mul i32 %247, 2, !insn.addr !8636
  %249 = add i32 %247, 1, !insn.addr !8636
  %250 = add i32 %249, %248, !insn.addr !8636
  %251 = sext i32 %250 to i64, !insn.addr !8637
  %252 = call i64 @FUSB_ExAllocatePool.203(i64 0, i64 %251), !insn.addr !8638
  %253 = load i32, i32* %246, align 4, !insn.addr !8639
  %254 = mul i32 %253, 2, !insn.addr !8640
  %255 = add i32 %253, 1, !insn.addr !8640
  %256 = add i32 %255, %254, !insn.addr !8640
  %257 = sext i32 %256 to i64, !insn.addr !8641
  %258 = call i64 @memset(i64 %252, i64 0, i64 %257), !insn.addr !8642
  %259 = load i32, i32* %246, align 4, !insn.addr !8643
  %260 = icmp slt i32 %259, 1, !insn.addr !8644
  store i64 %rcx.5.reload, i64* %rcx.7.reg2mem, !insn.addr !8644
  store i64 %r14.2.reload, i64* %r14.3.reg2mem, !insn.addr !8644
  br i1 %260, label %dec_label_pc_140e0, label %dec_label_pc_14093, !insn.addr !8644

dec_label_pc_14093:                               ; preds = %dec_label_pc_14029
  %sext = mul i64 %252, 4294967296
  %261 = sdiv i64 %sext, 4294967296, !insn.addr !8645
  %262 = add i64 %139, 88, !insn.addr !8646
  store i64 0, i64* %r13.1.reg2mem, !insn.addr !8645
  br label %dec_label_pc_140aa, !insn.addr !8645

dec_label_pc_140aa:                               ; preds = %dec_label_pc_140aa, %dec_label_pc_14093
  %r13.1.reload = load i64, i64* %r13.1.reg2mem
  %sext12 = mul i64 %r13.1.reload, 4294967296
  %263 = sdiv i64 %sext12, 4294967296, !insn.addr !8647
  %264 = add i64 %262, %263, !insn.addr !8646
  %265 = inttoptr i64 %264 to i8*, !insn.addr !8646
  %266 = load i8, i8* %265, align 1, !insn.addr !8646
  %267 = call i64 @sprintf(i64 %261, i64 0, i64 %261, i8 %266, i64 %r8.4.reload, i64 %149), !insn.addr !8648
  %268 = add nuw nsw i64 %r13.1.reload, zext (i32 ptrtoint (i32* @global_var_1 to i32) to i64), !insn.addr !8649
  %269 = and i64 %268, 4294967295, !insn.addr !8649
  %270 = load i32, i32* %246, align 4, !insn.addr !8650
  %271 = sext i32 %270 to i64, !insn.addr !8651
  %272 = icmp slt i64 %269, %271, !insn.addr !8651
  store i64 %269, i64* %r13.1.reg2mem, !insn.addr !8651
  br i1 %272, label %dec_label_pc_140aa, label %dec_label_pc_140d6, !insn.addr !8651

dec_label_pc_140d6:                               ; preds = %dec_label_pc_140aa
  %273 = zext i8 %266 to i64, !insn.addr !8646
  %sext21 = mul i64 %r14.2.reload, 4294967296
  %274 = sdiv i64 %sext21, 4294967296, !insn.addr !8652
  store i64 %273, i64* %rcx.7.reg2mem, !insn.addr !8652
  store i64 %274, i64* %r14.3.reg2mem, !insn.addr !8652
  br label %dec_label_pc_140e0, !insn.addr !8652

dec_label_pc_140e0:                               ; preds = %dec_label_pc_140d6, %dec_label_pc_14029
  %275 = sext i32 %247 to i64, !insn.addr !8653
  %276 = add i64 %139, 736
  %277 = inttoptr i64 %276 to i8*
  %278 = trunc i64 %252 to i32, !insn.addr !8654
  %r14.3.reload = load i64, i64* %r14.3.reg2mem
  %rcx.7.reload = load i64, i64* %rcx.7.reg2mem
  %279 = call i64 @FUSB_ExFreePool.600(i32 %278, i64 0), !insn.addr !8655
  %280 = add i64 %139, 599776, !insn.addr !8656
  %281 = load i32, i32* %246, align 4, !insn.addr !8657
  %282 = sext i32 %281 to i64, !insn.addr !8657
  %283 = mul i64 %139, 4294967296
  %sext33 = add i64 %283, 377957122048
  %284 = sdiv i64 %sext33, 4294967296, !insn.addr !8658
  %285 = call i64 @memcpy(i64 %280, i64 %284, i64 %282, i64 %rcx.7.reload), !insn.addr !8659
  %286 = load i32, i32* %246, align 4, !insn.addr !8660
  %287 = add i64 %139, 600096, !insn.addr !8661
  %288 = inttoptr i64 %287 to i32*, !insn.addr !8661
  store i32 %286, i32* %288, align 4, !insn.addr !8661
  store i8 0, i8* %277, align 1, !insn.addr !8662
  %289 = add i64 %139, 5258, !insn.addr !8663
  %290 = inttoptr i64 %289 to i8*, !insn.addr !8663
  %291 = load i8, i8* %290, align 1, !insn.addr !8663
  %292 = icmp eq i8 %291, 0, !insn.addr !8663
  %293 = select i1 %292, i8 0, i8 64, !insn.addr !8664
  %294 = add i64 %139, 737, !insn.addr !8664
  %295 = inttoptr i64 %294 to i8*, !insn.addr !8664
  store i8 %293, i8* %295, align 1, !insn.addr !8664
  %296 = trunc i32 %247 to i8, !insn.addr !8665
  %297 = add i64 %139, 738, !insn.addr !8666
  %298 = inttoptr i64 %297 to i8*, !insn.addr !8666
  store i8 %296, i8* %298, align 1, !insn.addr !8666
  %299 = add i64 %139, 739, !insn.addr !8667
  %300 = call i64 @memcpy(i64 %299, i64 %284, i64 %275, i64 %rcx.7.reload), !insn.addr !8668
  %301 = add nsw i64 %275, 3, !insn.addr !8669
  %302 = add i64 %301, %276
  %303 = inttoptr i64 %302 to i8*
  store i8 0, i8* %303, align 1, !insn.addr !8670
  %304 = add i64 %139, 5256, !insn.addr !8671
  %305 = inttoptr i64 %304 to i8*, !insn.addr !8671
  %306 = load i8, i8* %305, align 1, !insn.addr !8671
  %307 = icmp eq i8 %306, 0, !insn.addr !8671
  %308 = add i32 %247, 4, !insn.addr !8672
  %309 = icmp slt i32 %308, 1
  %or.cond = or i1 %309, %307
  store i8* %303, i8** %.pre-phi59.reg2mem, !insn.addr !8673
  store i8* %277, i8** %.pre-phi55.reg2mem, !insn.addr !8673
  store i64 %139, i64* %rbx.2.reg2mem, !insn.addr !8673
  store i64 %r14.3.reload, i64* %r14.4.reg2mem, !insn.addr !8673
  br i1 %or.cond, label %dec_label_pc_141c9, label %dec_label_pc_1417b, !insn.addr !8673

dec_label_pc_1417b:                               ; preds = %dec_label_pc_140e0
  %310 = add nsw i64 %275, zext (i32 ptrtoint (i8** @global_var_3 to i32) to i64), !insn.addr !8674
  %311 = and i64 %310, 4294967295, !insn.addr !8674
  %312 = mul i64 %311, ptrtoint (i32* @global_var_1 to i64), !insn.addr !8675
  %313 = add i64 %139, ptrtoint (i32* @global_var_1 to i64), !insn.addr !8675
  %314 = add i64 %313, %312, !insn.addr !8675
  store i64 %139, i64* %rbx.1.reg2mem, !insn.addr !8676
  br label %dec_label_pc_1419d, !insn.addr !8676

dec_label_pc_1419d:                               ; preds = %dec_label_pc_1419d, %dec_label_pc_1417b
  %rbx.1.reload = load i64, i64* %rbx.1.reg2mem
  %315 = add i64 %rbx.1.reload, 736, !insn.addr !8677
  %316 = inttoptr i64 %315 to i8*, !insn.addr !8677
  %317 = load i8, i8* %316, align 1, !insn.addr !8677
  %318 = zext i8 %317 to i64, !insn.addr !8677
  %319 = call i64 @ChangeEndian.223(i64 %318), !insn.addr !8678
  %320 = trunc i64 %319 to i8, !insn.addr !8679
  store i8 %320, i8* %316, align 1, !insn.addr !8679
  %321 = add i64 %rbx.1.reload, ptrtoint (i32* @global_var_1 to i64), !insn.addr !8680
  %322 = icmp eq i64 %321, %314, !insn.addr !8681
  %323 = icmp eq i1 %322, false, !insn.addr !8682
  store i64 %321, i64* %rbx.1.reg2mem, !insn.addr !8682
  br i1 %323, label %dec_label_pc_1419d, label %dec_label_pc_141b8, !insn.addr !8682

dec_label_pc_141b8:                               ; preds = %dec_label_pc_1419d
  %324 = sdiv i64 %283, 4294967296, !insn.addr !8683
  %sext23 = mul i64 %r14.3.reload, 4294967296
  %325 = sdiv i64 %sext23, 4294967296, !insn.addr !8684
  %.pre53 = add nsw i64 %324, 736, !insn.addr !8685
  %.pre54 = inttoptr i64 %.pre53 to i8*, !insn.addr !8685
  %.pre56 = add nsw i64 %301, %.pre53, !insn.addr !8686
  %.pre58 = inttoptr i64 %.pre56 to i8*, !insn.addr !8686
  store i8* %.pre58, i8** %.pre-phi59.reg2mem, !insn.addr !8684
  store i8* %.pre54, i8** %.pre-phi55.reg2mem, !insn.addr !8684
  store i64 %324, i64* %rbx.2.reg2mem, !insn.addr !8684
  store i64 %325, i64* %r14.4.reg2mem, !insn.addr !8684
  br label %dec_label_pc_141c9, !insn.addr !8684

dec_label_pc_141c9:                               ; preds = %dec_label_pc_141b8, %dec_label_pc_140e0
  %r14.4.reload = load i64, i64* %r14.4.reg2mem
  %rbx.2.reload = load i64, i64* %rbx.2.reg2mem
  %.pre-phi55.reload = load i8*, i8** %.pre-phi55.reg2mem
  %.pre-phi59.reload = load i8*, i8** %.pre-phi59.reg2mem
  %326 = load i8, i8* %.pre-phi55.reload, align 1, !insn.addr !8685
  store i8 %326, i8* %.pre-phi59.reload, align 1, !insn.addr !8686
  %327 = add i32 %247, 3, !insn.addr !8687
  %328 = icmp sgt i32 %327, ptrtoint (i32* @global_var_1 to i32), !insn.addr !8688
  br i1 %328, label %dec_label_pc_141e6, label %dec_label_pc_1420f, !insn.addr !8688

dec_label_pc_141e6:                               ; preds = %dec_label_pc_141c9
  %329 = add nsw i64 %275, zext (i32 ptrtoint (i32* @global_var_1 to i32) to i64), !insn.addr !8689
  %330 = and i64 %329, 4294967295, !insn.addr !8689
  %331 = mul i64 %330, ptrtoint (i32* @global_var_1 to i64), !insn.addr !8690
  %332 = add i64 %331, ptrtoint (i32* @global_var_1 to i64), !insn.addr !8690
  %333 = add i64 %332, %rbx.2.reload, !insn.addr !8690
  store i8 %326, i8* %.reg2mem93, !insn.addr !8690
  store i64 %rbx.2.reload, i64* %rax.1.reg2mem, !insn.addr !8690
  br label %dec_label_pc_141f7, !insn.addr !8690

dec_label_pc_141f7:                               ; preds = %dec_label_pc_141f7, %dec_label_pc_141e6
  %rax.1.reload = load i64, i64* %rax.1.reg2mem
  %.reload94 = load i8, i8* %.reg2mem93, !insn.addr !8691
  %334 = add i64 %rax.1.reload, 737, !insn.addr !8692
  %335 = inttoptr i64 %334 to i8*, !insn.addr !8692
  %336 = load i8, i8* %335, align 1, !insn.addr !8692
  %337 = xor i8 %336, %.reload94, !insn.addr !8691
  store i8 %337, i8* %.pre-phi59.reload, align 1, !insn.addr !8691
  %338 = add i64 %rax.1.reload, ptrtoint (i32* @global_var_1 to i64), !insn.addr !8693
  %339 = icmp eq i64 %338, %333, !insn.addr !8694
  %340 = icmp eq i1 %339, false, !insn.addr !8695
  store i8 %337, i8* %.reg2mem93, !insn.addr !8695
  store i64 %338, i64* %rax.1.reg2mem, !insn.addr !8695
  br i1 %340, label %dec_label_pc_141f7, label %dec_label_pc_1420f, !insn.addr !8695

dec_label_pc_1420f:                               ; preds = %dec_label_pc_141f7, %dec_label_pc_141c9
  %341 = add nsw i64 %275, 4, !insn.addr !8696
  %342 = and i64 %341, 4294967295, !insn.addr !8696
  %343 = trunc i64 %341 to i32, !insn.addr !8697
  %344 = add i64 %rbx.2.reload, 1056, !insn.addr !8697
  %345 = inttoptr i64 %344 to i32*, !insn.addr !8697
  store i32 %343, i32* %345, align 4, !insn.addr !8697
  %346 = add i64 %rbx.2.reload, 5261, !insn.addr !8698
  %347 = inttoptr i64 %346 to i8*, !insn.addr !8698
  %348 = load i8, i8* %347, align 1, !insn.addr !8698
  %349 = zext i8 %348 to i64, !insn.addr !8698
  %350 = inttoptr i64 %342 to i64*, !insn.addr !8699
  %351 = call i64 @bWtBCAS_Data.188(i64 %arg1, i8* %277, i64* %350, i8 %348), !insn.addr !8699
  %352 = add i64 %rbx.2.reload, 4928, !insn.addr !8700
  %353 = inttoptr i64 %352 to i8*, !insn.addr !8700
  store i8 ptrtoint (i8** @global_var_3 to i8), i8* %353, align 1, !insn.addr !8700
  store i32 %stack_var_-529.0.reload, i32* %stack_var_-529.3.reg2mem, !insn.addr !8701
  store i8* %277, i8** %stack_var_-520.1.reg2mem, !insn.addr !8701
  store i64 %349, i64* %rcx.12.reg2mem, !insn.addr !8701
  store i64 %rbx.2.reload, i64* %rbx.6.reg2mem, !insn.addr !8701
  store i64 %r8.4.reload, i64* %r8.7.reg2mem, !insn.addr !8701
  store i64 %149, i64* %r9.7.reg2mem, !insn.addr !8701
  store i64 %r14.4.reload, i64* %r14.7.reg2mem, !insn.addr !8701
  store i64 %r15.1.reload, i64* %r15.3.reg2mem, !insn.addr !8701
  br label %dec_label_pc_14962, !insn.addr !8701

dec_label_pc_14244:                               ; preds = %dec_label_pc_14021
  %354 = icmp eq i8 %156, 4, !insn.addr !8702
  %355 = icmp eq i1 %354, false, !insn.addr !8703
  br i1 %355, label %dec_label_pc_142a8, label %dec_label_pc_14248, !insn.addr !8703

dec_label_pc_14248:                               ; preds = %dec_label_pc_14244
  %356 = ptrtoint i8* %stack_var_-520.0.reload to i64, !insn.addr !8704
  store i8 0, i8* %stack_var_-520.0.reload, align 1, !insn.addr !8705
  %357 = add i64 %139, ptrtoint (i8** @global_var_148b to i64), !insn.addr !8706
  %358 = inttoptr i64 %357 to i8*, !insn.addr !8706
  %359 = load i8, i8* %358, align 1, !insn.addr !8706
  %360 = icmp eq i8 %359, 0, !insn.addr !8706
  %361 = icmp eq i1 %360, false, !insn.addr !8707
  %362 = add i64 %356, 3
  %363 = inttoptr i64 %362 to i8*
  br i1 %361, label %dec_label_pc_14265, label %dec_label_pc_1425b, !insn.addr !8707

dec_label_pc_1425b:                               ; preds = %dec_label_pc_14248
  store i8 ptrtoint (i8** @global_var_9 to i8), i8* %363, align 1, !insn.addr !8708
  %364 = add i64 %356, 1, !insn.addr !8709
  %365 = inttoptr i64 %364 to i8*, !insn.addr !8709
  store i8 ptrtoint (i8** @global_var_9 to i8), i8* %365, align 1, !insn.addr !8709
  br label %dec_label_pc_14274, !insn.addr !8710

dec_label_pc_14265:                               ; preds = %dec_label_pc_14248
  store i8 ptrtoint (i32* @global_var_1 to i8), i8* %363, align 1, !insn.addr !8711
  %366 = add i64 %356, 1, !insn.addr !8712
  %367 = inttoptr i64 %366 to i8*, !insn.addr !8712
  store i8 ptrtoint (i32* @global_var_1 to i8), i8* %367, align 1, !insn.addr !8712
  br label %dec_label_pc_14274, !insn.addr !8712

dec_label_pc_14274:                               ; preds = %dec_label_pc_14265, %dec_label_pc_1425b
  %368 = add i64 %356, 2, !insn.addr !8713
  %369 = inttoptr i64 %368 to i8*, !insn.addr !8713
  store i8 0, i8* %369, align 1, !insn.addr !8713
  %370 = load i8, i8* %147, align 1, !insn.addr !8714
  %371 = zext i8 %370 to i64, !insn.addr !8714
  %372 = add i64 %139, 1056, !insn.addr !8715
  %373 = inttoptr i64 %372 to i32*, !insn.addr !8715
  %374 = load i32, i32* %373, align 4, !insn.addr !8715
  %375 = zext i32 %374 to i64, !insn.addr !8715
  %376 = add i64 %139, 736, !insn.addr !8716
  %377 = add i64 %139, 72, !insn.addr !8717
  %378 = inttoptr i64 %377 to i64*, !insn.addr !8717
  %379 = load i64, i64* %378, align 8, !insn.addr !8717
  %380 = inttoptr i64 %376 to i8*, !insn.addr !8718
  %381 = inttoptr i64 %375 to i64*, !insn.addr !8718
  %382 = call i64 @bWtBCAS_Data.188(i64 %379, i8* %380, i64* %381, i8 %370), !insn.addr !8718
  store i8 ptrtoint (i8** @global_var_3 to i8), i8* %155, align 1, !insn.addr !8719
  store i32 %stack_var_-529.0.reload, i32* %stack_var_-529.3.reg2mem, !insn.addr !8720
  store i8* %stack_var_-520.0.reload, i8** %stack_var_-520.1.reg2mem, !insn.addr !8720
  store i64 %371, i64* %rcx.12.reg2mem, !insn.addr !8720
  store i64 %139, i64* %rbx.6.reg2mem, !insn.addr !8720
  store i64 %r8.4.reload, i64* %r8.7.reg2mem, !insn.addr !8720
  store i64 %149, i64* %r9.7.reg2mem, !insn.addr !8720
  store i64 %r14.2.reload, i64* %r14.7.reg2mem, !insn.addr !8720
  store i64 %r15.1.reload, i64* %r15.3.reg2mem, !insn.addr !8720
  br label %dec_label_pc_14962, !insn.addr !8720

dec_label_pc_142a8:                               ; preds = %dec_label_pc_14244
  %383 = icmp eq i8 %156, 3, !insn.addr !8721
  %384 = icmp eq i1 %383, false, !insn.addr !8722
  store i32 %stack_var_-529.0.reload, i32* %stack_var_-529.3.reg2mem, !insn.addr !8722
  store i8* %stack_var_-520.0.reload, i8** %stack_var_-520.1.reg2mem, !insn.addr !8722
  store i64 %rcx.5.reload, i64* %rcx.12.reg2mem, !insn.addr !8722
  store i64 %139, i64* %rbx.6.reg2mem, !insn.addr !8722
  store i64 %r8.4.reload, i64* %r8.7.reg2mem, !insn.addr !8722
  store i64 %149, i64* %r9.7.reg2mem, !insn.addr !8722
  store i64 %r14.2.reload, i64* %r14.7.reg2mem, !insn.addr !8722
  store i64 %r15.1.reload, i64* %r15.3.reg2mem, !insn.addr !8722
  br i1 %384, label %dec_label_pc_14962, label %dec_label_pc_142b0, !insn.addr !8722

dec_label_pc_142b0:                               ; preds = %dec_label_pc_142a8
  %385 = add i64 %139, 1072, !insn.addr !8723
  %386 = add i64 %139, 1076, !insn.addr !8724
  %387 = inttoptr i64 %386 to i64*, !insn.addr !8725
  %388 = inttoptr i64 %385 to i64*, !insn.addr !8725
  %389 = call i64 @bReadBCAS_Data.551(i64 %arg1, i64* %387, i64* %388, i64 0, i64 %153, i8 %148), !insn.addr !8725
  %390 = inttoptr i64 %385 to i32*, !insn.addr !8726
  %391 = load i32, i32* %390, align 4, !insn.addr !8726
  %392 = zext i32 %391 to i64, !insn.addr !8726
  %393 = inttoptr i64 %386 to i8*, !insn.addr !8727
  %394 = load i8, i8* %393, align 1, !insn.addr !8727
  %395 = icmp eq i8 %394, 0, !insn.addr !8728
  store i64 0, i64* %rax.2.reg2mem, !insn.addr !8729
  store i64 %139, i64* %rdx.0.reg2mem, !insn.addr !8729
  store i64 0, i64* %rcx.15.reg2mem, !insn.addr !8729
  br i1 %395, label %dec_label_pc_14318, label %dec_label_pc_14a45, !insn.addr !8729

dec_label_pc_14305:                               ; preds = %dec_label_pc_14318
  %rdx.0.reload = load i64, i64* %rdx.0.reg2mem
  %396 = add i64 %rdx.0.reload, 1077, !insn.addr !8730
  %397 = inttoptr i64 %396 to i8*, !insn.addr !8730
  %398 = load i8, i8* %397, align 1, !insn.addr !8730
  %399 = add i64 %rdx.0.reload, ptrtoint (i32* @global_var_1 to i64), !insn.addr !8731
  %400 = icmp eq i8 %398, 0, !insn.addr !8732
  %401 = icmp eq i1 %400, false, !insn.addr !8733
  store i64 %403, i64* %rax.2.reg2mem, !insn.addr !8733
  store i64 %399, i64* %rdx.0.reg2mem, !insn.addr !8733
  br i1 %401, label %dec_label_pc_14a45.loopexit, label %dec_label_pc_14318, !insn.addr !8733

dec_label_pc_14318:                               ; preds = %dec_label_pc_142b0, %dec_label_pc_14305
  %rax.2.reload = load i64, i64* %rax.2.reg2mem
  %402 = add nuw nsw i64 %rax.2.reload, zext (i32 ptrtoint (i32* @global_var_1 to i32) to i64), !insn.addr !8734
  %403 = and i64 %402, 4294967295, !insn.addr !8734
  %404 = icmp ult i64 %403, %392, !insn.addr !8735
  store i64 %403, i64* %merge.reg2mem, !insn.addr !8735
  br i1 %404, label %dec_label_pc_14305, label %dec_label_pc_1431f, !insn.addr !8735

dec_label_pc_1431f:                               ; preds = %dec_label_pc_14a45, %dec_label_pc_14318
  %merge.reload = load i64, i64* %merge.reg2mem
  ret i64 %merge.reload, !insn.addr !8736

dec_label_pc_14342:                               ; preds = %dec_label_pc_14a45
  %405 = add i64 %139, 5256, !insn.addr !8737
  %406 = inttoptr i64 %405 to i8*, !insn.addr !8737
  %407 = load i8, i8* %406, align 1, !insn.addr !8737
  %408 = icmp eq i8 %407, 0, !insn.addr !8737
  store i64 %139, i64* %rbx.3.reg2mem, !insn.addr !8738
  store i64 %r14.2.reload, i64* %r14.5.reg2mem, !insn.addr !8738
  br i1 %408, label %dec_label_pc_143c1, label %dec_label_pc_14367, !insn.addr !8738

dec_label_pc_14367:                               ; preds = %dec_label_pc_14342
  %409 = load i32, i32* %390, align 4, !insn.addr !8739
  %410 = icmp slt i32 %409, 1
  store i64 %139, i64* %rbx.3.reg2mem, !insn.addr !8740
  store i64 %r14.2.reload, i64* %r14.5.reg2mem, !insn.addr !8740
  br i1 %410, label %dec_label_pc_143c1, label %dec_label_pc_14377, !insn.addr !8740

dec_label_pc_14377:                               ; preds = %dec_label_pc_14367
  %411 = zext i32 %409 to i64, !insn.addr !8739
  store i64 %139, i64* %r13.2.reg2mem, !insn.addr !8741
  br label %dec_label_pc_1438e, !insn.addr !8741

dec_label_pc_1438e:                               ; preds = %dec_label_pc_1438e, %dec_label_pc_14377
  %r13.2.reload = load i64, i64* %r13.2.reg2mem
  %412 = add i64 %r13.2.reload, 1076, !insn.addr !8742
  %413 = inttoptr i64 %412 to i8*, !insn.addr !8742
  %414 = load i8, i8* %413, align 1, !insn.addr !8742
  %415 = zext i8 %414 to i64, !insn.addr !8742
  %416 = call i64 @ChangeEndian.223(i64 %415), !insn.addr !8743
  %417 = trunc i64 %416 to i8, !insn.addr !8744
  store i8 %417, i8* %413, align 1, !insn.addr !8744
  %418 = add i64 %r13.2.reload, ptrtoint (i32* @global_var_1 to i64), !insn.addr !8745
  %419 = sub i64 %418, %139, !insn.addr !8746
  %420 = and i64 %419, 4294967295, !insn.addr !8746
  %421 = icmp ult i64 %420, %411, !insn.addr !8747
  store i64 %418, i64* %r13.2.reg2mem, !insn.addr !8747
  br i1 %421, label %dec_label_pc_1438e, label %dec_label_pc_143b0, !insn.addr !8747

dec_label_pc_143b0:                               ; preds = %dec_label_pc_1438e
  %sext24 = mul i64 %139, 4294967296
  %422 = sdiv i64 %sext24, 4294967296, !insn.addr !8748
  %sext25 = mul i64 %r14.2.reload, 4294967296
  %423 = sdiv i64 %sext25, 4294967296, !insn.addr !8749
  store i64 %422, i64* %rbx.3.reg2mem, !insn.addr !8749
  store i64 %423, i64* %r14.5.reg2mem, !insn.addr !8749
  br label %dec_label_pc_143c1, !insn.addr !8749

dec_label_pc_143c1:                               ; preds = %dec_label_pc_143b0, %dec_label_pc_14367, %dec_label_pc_14342
  %424 = sext i32 %739 to i64, !insn.addr !8750
  %r14.5.reload = load i64, i64* %r14.5.reg2mem
  %rbx.3.reload = load i64, i64* %rbx.3.reg2mem
  %425 = add i64 %rbx.3.reload, 1077, !insn.addr !8751
  %426 = inttoptr i64 %425 to i8*, !insn.addr !8751
  %427 = load i8, i8* %426, align 1, !insn.addr !8751
  %428 = and i8 %427, 32, !insn.addr !8751
  %429 = icmp eq i8 %428, 0, !insn.addr !8751
  br i1 %429, label %dec_label_pc_144b2, label %dec_label_pc_143ce, !insn.addr !8752

dec_label_pc_143ce:                               ; preds = %dec_label_pc_143c1
  %430 = add i64 %rbx.3.reload, 4928, !insn.addr !8753
  %431 = inttoptr i64 %430 to i8*, !insn.addr !8753
  store i8 ptrtoint (i16* @global_var_4 to i8), i8* %431, align 1, !insn.addr !8753
  %432 = add i64 %rbx.3.reload, 5260, !insn.addr !8754
  %433 = inttoptr i64 %432 to i8*, !insn.addr !8754
  %434 = load i8, i8* %433, align 1, !insn.addr !8754
  %435 = icmp eq i8 %434, 0, !insn.addr !8754
  %436 = icmp eq i1 %435, false, !insn.addr !8755
  br i1 %436, label %dec_label_pc_1446a, label %dec_label_pc_143e2, !insn.addr !8755

dec_label_pc_143e2:                               ; preds = %dec_label_pc_143ce
  store i8 ptrtoint (i32* @global_var_1 to i8), i8* %433, align 1, !insn.addr !8756
  %437 = add i64 %rbx.3.reload, ptrtoint (i8** @global_var_148b to i64), !insn.addr !8757
  %438 = inttoptr i64 %437 to i8*, !insn.addr !8757
  store i8 0, i8* %438, align 1, !insn.addr !8757
  %439 = add i64 %rbx.3.reload, 1072, !insn.addr !8758
  %440 = inttoptr i64 %439 to i32*, !insn.addr !8758
  %441 = load i32, i32* %440, align 4, !insn.addr !8758
  %442 = add i64 %rbx.3.reload, 3964, !insn.addr !8759
  %443 = inttoptr i64 %442 to i32*, !insn.addr !8759
  store i32 %441, i32* %443, align 4, !insn.addr !8759
  %444 = add i64 %rbx.3.reload, 3968, !insn.addr !8760
  %445 = urem i64 %444, 2
  %446 = icmp eq i64 %445, 0, !insn.addr !8761
  store i64 960, i64* %rdx.1.reg2mem, !insn.addr !8762
  store i64 %444, i64* %rdi.0.reg2mem, !insn.addr !8762
  br i1 %446, label %dec_label_pc_1441d, label %dec_label_pc_14416, !insn.addr !8762

dec_label_pc_14416:                               ; preds = %dec_label_pc_143e2
  %447 = inttoptr i64 %444 to i8*, !insn.addr !8763
  store i8 0, i8* %447, align 1, !insn.addr !8763
  %448 = add i64 %444, %33, !insn.addr !8763
  store i64 959, i64* %rdx.1.reg2mem, !insn.addr !8764
  store i64 %448, i64* %rdi.0.reg2mem, !insn.addr !8764
  br label %dec_label_pc_1441d, !insn.addr !8764

dec_label_pc_1441d:                               ; preds = %dec_label_pc_14416, %dec_label_pc_143e2
  %rdi.0.reload = load i64, i64* %rdi.0.reg2mem
  %rdx.1.reload = load i64, i64* %rdx.1.reg2mem
  %449 = and i64 %rdi.0.reload, 2
  %450 = icmp eq i64 %449, 0, !insn.addr !8765
  store i64 %rdx.1.reload, i64* %rdx.2.reg2mem, !insn.addr !8766
  store i64 %rdi.0.reload, i64* %rdi.1.reg2mem, !insn.addr !8766
  br i1 %450, label %dec_label_pc_14428, label %dec_label_pc_14423, !insn.addr !8766

dec_label_pc_14423:                               ; preds = %dec_label_pc_1441d
  %451 = inttoptr i64 %rdi.0.reload to i16*, !insn.addr !8767
  store i16 0, i16* %451, align 2, !insn.addr !8767
  %452 = add i64 %rdi.0.reload, %34, !insn.addr !8767
  %453 = add nuw nsw i64 %rdx.1.reload, 1022, !insn.addr !8768
  %454 = urem i64 %453, 1024, !insn.addr !8768
  store i64 %454, i64* %rdx.2.reg2mem, !insn.addr !8768
  store i64 %452, i64* %rdi.1.reg2mem, !insn.addr !8768
  br label %dec_label_pc_14428, !insn.addr !8768

dec_label_pc_14428:                               ; preds = %dec_label_pc_14423, %dec_label_pc_1441d
  %rdi.1.reload = load i64, i64* %rdi.1.reg2mem
  %rdx.2.reload = load i64, i64* %rdx.2.reg2mem
  %455 = and i64 %rdi.1.reload, 4
  %456 = icmp eq i64 %455, 0, !insn.addr !8769
  store i64 %rdx.2.reload, i64* %rdx.3.reg2mem, !insn.addr !8770
  store i64 %rdi.1.reload, i64* %rdi.2.reg2mem, !insn.addr !8770
  br i1 %456, label %dec_label_pc_14432, label %dec_label_pc_1442e, !insn.addr !8770

dec_label_pc_1442e:                               ; preds = %dec_label_pc_14428
  %457 = inttoptr i64 %rdi.1.reload to i32*, !insn.addr !8771
  store i32 0, i32* %457, align 4, !insn.addr !8771
  %458 = add i64 %rdi.1.reload, %35, !insn.addr !8771
  %459 = add nsw i64 %rdx.2.reload, 4294967292, !insn.addr !8772
  %460 = and i64 %459, 4294967295, !insn.addr !8772
  store i64 %460, i64* %rdx.3.reg2mem, !insn.addr !8772
  store i64 %458, i64* %rdi.2.reg2mem, !insn.addr !8772
  br label %dec_label_pc_14432, !insn.addr !8772

dec_label_pc_14432:                               ; preds = %dec_label_pc_1442e, %dec_label_pc_14428
  %rdi.2.reload = load i64, i64* %rdi.2.reg2mem
  %rdx.3.reload = load i64, i64* %rdx.3.reg2mem
  %461 = trunc i64 %rdx.3.reload to i32, !insn.addr !8773
  %462 = lshr i32 %461, ptrtoint (i8** @global_var_3 to i32), !insn.addr !8774
  %463 = zext i32 %462 to i64, !insn.addr !8775
  %464 = inttoptr i64 %rdi.2.reload to i8*, !insn.addr !8776
  call void @__asm_rep_stosq_memset(i8* %464, i64 0, i64 %463), !insn.addr !8776
  %465 = mul i64 %36, %463, !insn.addr !8776
  %466 = add i64 %465, %rdi.2.reload, !insn.addr !8776
  %467 = trunc i64 %rdx.3.reload to i8, !insn.addr !8777
  %468 = and i8 %467, ptrtoint (i16* @global_var_4 to i8), !insn.addr !8777
  %469 = icmp eq i8 %468, 0, !insn.addr !8777
  store i64 %466, i64* %rdi.3.reg2mem, !insn.addr !8778
  br i1 %469, label %dec_label_pc_14442, label %dec_label_pc_14441, !insn.addr !8778

dec_label_pc_14441:                               ; preds = %dec_label_pc_14432
  %470 = inttoptr i64 %466 to i32*, !insn.addr !8779
  store i32 0, i32* %470, align 4, !insn.addr !8779
  %471 = add i64 %466, %37, !insn.addr !8779
  store i64 %471, i64* %rdi.3.reg2mem, !insn.addr !8779
  br label %dec_label_pc_14442, !insn.addr !8779

dec_label_pc_14442:                               ; preds = %dec_label_pc_14441, %dec_label_pc_14432
  %rdi.3.reload = load i64, i64* %rdi.3.reg2mem
  %472 = and i8 %467, ptrtoint (i32* @global_var_2 to i8), !insn.addr !8780
  %473 = icmp eq i8 %472, 0, !insn.addr !8780
  store i64 %rdi.3.reload, i64* %rdi.4.reg2mem, !insn.addr !8781
  br i1 %473, label %dec_label_pc_14449, label %dec_label_pc_14447, !insn.addr !8781

dec_label_pc_14447:                               ; preds = %dec_label_pc_14442
  %474 = inttoptr i64 %rdi.3.reload to i16*, !insn.addr !8782
  store i16 0, i16* %474, align 2, !insn.addr !8782
  %475 = add i64 %rdi.3.reload, %38, !insn.addr !8782
  store i64 %475, i64* %rdi.4.reg2mem, !insn.addr !8782
  br label %dec_label_pc_14449, !insn.addr !8782

dec_label_pc_14449:                               ; preds = %dec_label_pc_14447, %dec_label_pc_14442
  %476 = and i8 %467, ptrtoint (i32* @global_var_1 to i8), !insn.addr !8783
  %477 = icmp eq i8 %476, 0, !insn.addr !8783
  br i1 %477, label %dec_label_pc_1444f, label %dec_label_pc_1444e, !insn.addr !8784

dec_label_pc_1444e:                               ; preds = %dec_label_pc_14449
  %rdi.4.reload = load i64, i64* %rdi.4.reg2mem
  %478 = inttoptr i64 %rdi.4.reload to i8*, !insn.addr !8785
  store i8 0, i8* %478, align 1, !insn.addr !8785
  br label %dec_label_pc_1444f, !insn.addr !8785

dec_label_pc_1444f:                               ; preds = %dec_label_pc_1444e, %dec_label_pc_14449
  %479 = load i32, i32* %440, align 4, !insn.addr !8786
  %480 = sext i32 %479 to i64, !insn.addr !8786
  %481 = add i64 %rbx.3.reload, 1076, !insn.addr !8787
  %482 = call i64 @memcpy(i64 %444, i64 %481, i64 %480, i64 0), !insn.addr !8788
  store i32 %stack_var_-529.0.reload, i32* %stack_var_-529.3.reg2mem, !insn.addr !8789
  store i8* %stack_var_-520.0.reload, i8** %stack_var_-520.1.reg2mem, !insn.addr !8789
  store i64 0, i64* %rcx.12.reg2mem, !insn.addr !8789
  store i64 %rbx.3.reload, i64* %rbx.6.reg2mem, !insn.addr !8789
  store i64 %444, i64* %r8.7.reg2mem, !insn.addr !8789
  store i64 %149, i64* %r9.7.reg2mem, !insn.addr !8789
  store i64 %r14.5.reload, i64* %r14.7.reg2mem, !insn.addr !8789
  store i64 %r15.1.reload, i64* %r15.3.reg2mem, !insn.addr !8789
  br label %dec_label_pc_14962, !insn.addr !8789

dec_label_pc_1446a:                               ; preds = %dec_label_pc_143ce
  %483 = add i64 %rbx.3.reload, ptrtoint (i8** @global_var_148b to i64), !insn.addr !8790
  %484 = inttoptr i64 %483 to i8*, !insn.addr !8790
  store i8 0, i8* %484, align 1, !insn.addr !8790
  %485 = add i64 %rbx.3.reload, 3964, !insn.addr !8791
  %486 = inttoptr i64 %485 to i32*, !insn.addr !8791
  %487 = load i32, i32* %486, align 4, !insn.addr !8791
  %488 = sext i32 %487 to i64, !insn.addr !8791
  %489 = add i64 %rbx.3.reload, 3967, !insn.addr !8792
  %490 = add i64 %489, %488, !insn.addr !8792
  %491 = add i64 %rbx.3.reload, 1072, !insn.addr !8793
  %492 = inttoptr i64 %491 to i32*, !insn.addr !8793
  %493 = load i32, i32* %492, align 4, !insn.addr !8793
  %494 = add i32 %493, -3, !insn.addr !8794
  %495 = sext i32 %494 to i64, !insn.addr !8795
  %496 = add i64 %rbx.3.reload, 1079, !insn.addr !8796
  %497 = call i64 @memcpy(i64 %490, i64 %496, i64 %495, i64 %rcx.15.reload), !insn.addr !8797
  %498 = load i32, i32* %486, align 4, !insn.addr !8798
  %499 = load i32, i32* %492, align 4, !insn.addr !8799
  %500 = add i32 %498, -4, !insn.addr !8799
  %501 = add i32 %500, %499, !insn.addr !8800
  store i32 %501, i32* %486, align 4, !insn.addr !8801
  store i32 %stack_var_-529.0.reload, i32* %stack_var_-529.3.reg2mem, !insn.addr !8802
  store i8* %stack_var_-520.0.reload, i8** %stack_var_-520.1.reg2mem, !insn.addr !8802
  store i64 %rcx.15.reload, i64* %rcx.12.reg2mem, !insn.addr !8802
  store i64 %rbx.3.reload, i64* %rbx.6.reg2mem, !insn.addr !8802
  store i64 %424, i64* %r8.7.reg2mem, !insn.addr !8802
  store i64 %149, i64* %r9.7.reg2mem, !insn.addr !8802
  store i64 %r14.5.reload, i64* %r14.7.reg2mem, !insn.addr !8802
  store i64 %r15.1.reload, i64* %r15.3.reg2mem, !insn.addr !8802
  br label %dec_label_pc_14962, !insn.addr !8802

dec_label_pc_144b2:                               ; preds = %dec_label_pc_143c1
  %502 = add i64 %rbx.3.reload, 5258, !insn.addr !8803
  %503 = inttoptr i64 %502 to i8*, !insn.addr !8803
  %504 = load i8, i8* %503, align 1, !insn.addr !8803
  %505 = icmp eq i8 %504, 0, !insn.addr !8803
  %506 = zext i1 %505 to i8, !insn.addr !8804
  store i8 %506, i8* %503, align 1, !insn.addr !8804
  %507 = load i8, i8* %426, align 1, !insn.addr !8805
  %508 = and i8 %507, -126
  %509 = icmp eq i8 %508, -126, !insn.addr !8806
  %510 = add i64 %rbx.3.reload, 5260, !insn.addr !8807
  %511 = inttoptr i64 %510 to i8*, !insn.addr !8807
  %512 = load i8, i8* %511, align 1, !insn.addr !8807
  %513 = icmp eq i8 %512, 0, !insn.addr !8807
  br i1 %513, label %dec_label_pc_14548, label %dec_label_pc_144e6, !insn.addr !8808

dec_label_pc_144e6:                               ; preds = %dec_label_pc_144b2
  %514 = icmp eq i1 %509, false, !insn.addr !8809
  %515 = icmp eq i1 %514, false, !insn.addr !8810
  %.pre68 = add i64 %rbx.3.reload, 3964
  %.pre70 = inttoptr i64 %.pre68 to i32*
  br i1 %515, label %dec_label_pc_144e6.dec_label_pc_14526_crit_edge, label %dec_label_pc_144ea, !insn.addr !8810

dec_label_pc_144e6.dec_label_pc_14526_crit_edge:  ; preds = %dec_label_pc_144e6
  %.pre72 = add i64 %rbx.3.reload, 1072, !insn.addr !8811
  %.pre74 = inttoptr i64 %.pre72 to i32*, !insn.addr !8811
  %.pre92 = load i32, i32* %.pre70, align 4
  store i32 %.pre92, i32* %.reg2mem95
  store i32* %.pre74, i32** %.pre-phi75.reg2mem
  br label %dec_label_pc_14526

dec_label_pc_144ea:                               ; preds = %dec_label_pc_144e6
  %516 = load i32, i32* %.pre70, align 4, !insn.addr !8812
  %517 = sext i32 %516 to i64, !insn.addr !8812
  %518 = add i64 %rbx.3.reload, 3967, !insn.addr !8813
  %519 = add i64 %518, %517, !insn.addr !8813
  %520 = add i64 %rbx.3.reload, 1072
  %521 = inttoptr i64 %520 to i32*
  %522 = load i32, i32* %521, align 4, !insn.addr !8814
  %523 = add i32 %522, -3, !insn.addr !8815
  %524 = sext i32 %523 to i64, !insn.addr !8816
  %525 = add i64 %rbx.3.reload, 1079, !insn.addr !8817
  %526 = call i64 @memcpy(i64 %519, i64 %525, i64 %524, i64 %rcx.15.reload), !insn.addr !8818
  %527 = load i32, i32* %.pre70, align 4, !insn.addr !8819
  %528 = load i32, i32* %521, align 4, !insn.addr !8820
  %529 = add i32 %527, -4, !insn.addr !8820
  %530 = add i32 %529, %528, !insn.addr !8821
  store i32 %530, i32* %.pre70, align 4, !insn.addr !8822
  store i32 %530, i32* %.reg2mem95, !insn.addr !8822
  store i32* %521, i32** %.pre-phi75.reg2mem, !insn.addr !8822
  br label %dec_label_pc_14526, !insn.addr !8822

dec_label_pc_14526:                               ; preds = %dec_label_pc_144e6.dec_label_pc_14526_crit_edge, %dec_label_pc_144ea
  %.pre-phi75.reload = load i32*, i32** %.pre-phi75.reg2mem
  %.reload96 = load i32, i32* %.reg2mem95, !insn.addr !8823
  store i32 %.reload96, i32* %.pre-phi75.reload, align 4, !insn.addr !8811
  %531 = add i64 %rbx.3.reload, 1076, !insn.addr !8824
  %532 = sext i32 %.reload96 to i64, !insn.addr !8825
  %533 = add i64 %rbx.3.reload, 3968, !insn.addr !8826
  %534 = call i64 @memcpy(i64 %531, i64 %533, i64 %532, i64 %rcx.15.reload), !insn.addr !8827
  br label %dec_label_pc_14548, !insn.addr !8827

dec_label_pc_14548:                               ; preds = %dec_label_pc_14526, %dec_label_pc_144b2
  store i64 %6, i64* %rax.3.reg2mem, !insn.addr !8828
  store i64 %arg1, i64* %rdx.4.reg2mem, !insn.addr !8828
  br label %dec_label_pc_1455a, !insn.addr !8828

dec_label_pc_1455a:                               ; preds = %dec_label_pc_14572, %dec_label_pc_14548
  %rdx.4.reload = load i64, i64* %rdx.4.reg2mem
  %rax.3.reload = load i64, i64* %rax.3.reg2mem
  %535 = inttoptr i64 %rax.3.reload to i8*, !insn.addr !8829
  store i8 0, i8* %535, align 1, !insn.addr !8829
  %536 = add i64 %rdx.4.reload, 1256, !insn.addr !8830
  %537 = inttoptr i64 %536 to i64*, !insn.addr !8830
  %538 = load i64, i64* %537, align 8, !insn.addr !8830
  %539 = icmp eq i64 %538, 0, !insn.addr !8831
  store i64 0, i64* %rcx.8.reg2mem, !insn.addr !8832
  br i1 %539, label %dec_label_pc_14572, label %dec_label_pc_14569, !insn.addr !8832

dec_label_pc_14569:                               ; preds = %dec_label_pc_1455a
  %540 = add i64 %538, 588476, !insn.addr !8833
  %541 = inttoptr i64 %540 to i8*, !insn.addr !8833
  %542 = load i8, i8* %541, align 1, !insn.addr !8833
  %543 = zext i8 %542 to i64, !insn.addr !8833
  store i8 %542, i8* %535, align 1, !insn.addr !8834
  store i64 %543, i64* %rcx.8.reg2mem, !insn.addr !8834
  br label %dec_label_pc_14572, !insn.addr !8834

dec_label_pc_14572:                               ; preds = %dec_label_pc_14569, %dec_label_pc_1455a
  %544 = add i64 %rax.3.reload, ptrtoint (i32* @global_var_1 to i64), !insn.addr !8835
  %545 = add i64 %rdx.4.reload, ptrtoint (i8* @global_var_8 to i64), !insn.addr !8836
  %546 = icmp eq i64 %544, %39, !insn.addr !8837
  %547 = icmp eq i1 %546, false, !insn.addr !8838
  store i64 %544, i64* %rax.3.reg2mem, !insn.addr !8838
  store i64 %545, i64* %rdx.4.reg2mem, !insn.addr !8838
  br i1 %547, label %dec_label_pc_1455a, label %dec_label_pc_1457f, !insn.addr !8838

dec_label_pc_1457f:                               ; preds = %dec_label_pc_14572
  %rcx.8.reload = load i64, i64* %rcx.8.reg2mem
  %548 = load i8, i8* %stack_var_-71, align 1, !insn.addr !8839
  %549 = icmp eq i8 %548, ptrtoint (i32* @global_var_1 to i8), !insn.addr !8839
  store i64 %40, i64* %rax.4.reg2mem, !insn.addr !8840
  store i32 sext (i8 ptrtoint (i32* @global_var_1 to i8) to i32), i32* %stack_var_-529.1.reg2mem, !insn.addr !8840
  br i1 %549, label %dec_label_pc_145ba, label %dec_label_pc_1458d, !insn.addr !8840

dec_label_pc_1458d:                               ; preds = %dec_label_pc_1457f, %dec_label_pc_14592
  %rax.4.reload = load i64, i64* %rax.4.reg2mem
  %550 = inttoptr i64 %rax.4.reload to i8*, !insn.addr !8841
  %551 = load i8, i8* %550, align 4, !insn.addr !8841
  %552 = icmp eq i8 %551, ptrtoint (i32* @global_var_1 to i8), !insn.addr !8841
  store i32 sext (i8 ptrtoint (i32* @global_var_1 to i8) to i32), i32* %stack_var_-529.1.reg2mem, !insn.addr !8842
  br i1 %552, label %dec_label_pc_145ba, label %dec_label_pc_14592, !insn.addr !8842

dec_label_pc_14592:                               ; preds = %dec_label_pc_1458d
  %553 = add i64 %rax.4.reload, ptrtoint (i32* @global_var_1 to i64), !insn.addr !8843
  %554 = icmp eq i64 %553, %39, !insn.addr !8844
  %555 = icmp eq i1 %554, false, !insn.addr !8845
  store i64 %553, i64* %rax.4.reg2mem, !insn.addr !8845
  br i1 %555, label %dec_label_pc_1458d, label %dec_label_pc_1459b, !insn.addr !8845

dec_label_pc_1459b:                               ; preds = %dec_label_pc_14592
  %556 = add i64 %rbx.3.reload, 588476, !insn.addr !8846
  %557 = inttoptr i64 %556 to i8*, !insn.addr !8846
  %558 = load i8, i8* %557, align 1, !insn.addr !8846
  %559 = icmp eq i8 %558, 1, !insn.addr !8846
  store i32 %stack_var_-529.0.reload, i32* %stack_var_-529.1.reg2mem, !insn.addr !8847
  br i1 %559, label %dec_label_pc_145ba, label %dec_label_pc_145a4, !insn.addr !8847

dec_label_pc_145a4:                               ; preds = %dec_label_pc_1459b
  %560 = trunc i32 %stack_var_-529.0.reload to i8, !insn.addr !8848
  %561 = icmp eq i8 %560, ptrtoint (i32* @global_var_1 to i8), !insn.addr !8848
  %562 = icmp eq i1 %561, false, !insn.addr !8849
  store i32 %stack_var_-529.0.reload, i32* %stack_var_-529.1.reg2mem, !insn.addr !8849
  store i32 %stack_var_-529.0.reload, i32* %stack_var_-529.2.reg2mem, !insn.addr !8849
  store i64 %rcx.8.reload, i64* %rcx.10.reg2mem, !insn.addr !8849
  store i64 %424, i64* %r8.6.reg2mem, !insn.addr !8849
  store i64 %149, i64* %r9.6.reg2mem, !insn.addr !8849
  br i1 %562, label %dec_label_pc_1474e, label %dec_label_pc_145ba, !insn.addr !8849

dec_label_pc_145ba:                               ; preds = %dec_label_pc_1458d, %dec_label_pc_1457f, %dec_label_pc_145a4, %dec_label_pc_1459b
  %stack_var_-529.1.reload = load i32, i32* %stack_var_-529.1.reg2mem
  %563 = add i64 %rbx.3.reload, 1064, !insn.addr !8850
  %564 = inttoptr i64 %563 to i64*, !insn.addr !8850
  %565 = load i64, i64* %564, align 8, !insn.addr !8850
  %566 = icmp eq i64 %565, 0, !insn.addr !8850
  store i32 %stack_var_-529.1.reload, i32* %stack_var_-529.2.reg2mem, !insn.addr !8851
  store i64 %rcx.8.reload, i64* %rcx.10.reg2mem, !insn.addr !8851
  store i64 %424, i64* %r8.6.reg2mem, !insn.addr !8851
  store i64 %149, i64* %r9.6.reg2mem, !insn.addr !8851
  br i1 %566, label %dec_label_pc_1474e, label %dec_label_pc_145c8, !insn.addr !8851

dec_label_pc_145c8:                               ; preds = %dec_label_pc_145ba
  %567 = add i64 %rbx.3.reload, 588972, !insn.addr !8852
  %568 = inttoptr i64 %567 to i8*, !insn.addr !8852
  %569 = load i8, i8* %568, align 1, !insn.addr !8852
  %570 = zext i8 %569 to i64, !insn.addr !8852
  %571 = call i64 @DTV_DecEncChip_I2C_Read.612(i64 %rbx.3.reload, i64 %570, i64 ptrtoint (i16* @global_var_4 to i64), i64 %29, i64 ptrtoint (i32* @global_var_1 to i64)), !insn.addr !8853
  %572 = add i64 %rbx.3.reload, 1060, !insn.addr !8854
  %573 = inttoptr i64 %572 to i8*, !insn.addr !8854
  %574 = load i8, i8* %573, align 1, !insn.addr !8854
  %575 = udiv i8 %574, 2
  %576 = zext i8 %575 to i64, !insn.addr !8855
  %577 = and i64 %576, zext (i32 ptrtoint (i8** @global_var_7 to i32) to i64), !insn.addr !8855
  %578 = mul i64 %577, ptrtoint (i8* @global_var_8 to i64), !insn.addr !8856
  %579 = add i64 %578, %24, !insn.addr !8856
  %580 = inttoptr i64 %579 to i64*, !insn.addr !8856
  %581 = load i64, i64* %580, align 8, !insn.addr !8856
  %582 = icmp eq i64 %581, 0, !insn.addr !8857
  store i64 %29, i64* %rcx.9.reg2mem, !insn.addr !8858
  br i1 %582, label %dec_label_pc_14663, label %dec_label_pc_14609, !insn.addr !8858

dec_label_pc_14609:                               ; preds = %dec_label_pc_145c8
  %583 = add i64 %581, 588476, !insn.addr !8859
  %584 = inttoptr i64 %583 to i8*, !insn.addr !8859
  %585 = load i8, i8* %584, align 1, !insn.addr !8859
  %586 = icmp eq i8 %585, 0, !insn.addr !8860
  store i64 %29, i64* %rcx.9.reg2mem, !insn.addr !8861
  br i1 %586, label %dec_label_pc_14663, label %dec_label_pc_14616, !insn.addr !8861

dec_label_pc_14616:                               ; preds = %dec_label_pc_14609
  %587 = add i64 %581, 588464, !insn.addr !8862
  %588 = inttoptr i64 %587 to i64*, !insn.addr !8862
  %589 = load i64, i64* %588, align 8, !insn.addr !8862
  %590 = icmp eq i64 %589, 0, !insn.addr !8863
  store i64 0, i64* %rax.5.reg2mem, !insn.addr !8864
  br i1 %590, label %dec_label_pc_1462c, label %dec_label_pc_14627, !insn.addr !8864

dec_label_pc_14627:                               ; preds = %dec_label_pc_14616
  %591 = call i64 @TS_GetBcasPtr.152(i64 %589), !insn.addr !8865
  store i64 %591, i64* %rax.5.reg2mem, !insn.addr !8865
  br label %dec_label_pc_1462c, !insn.addr !8865

dec_label_pc_1462c:                               ; preds = %dec_label_pc_14627, %dec_label_pc_14616
  %592 = load i8, i8* %stack_var_-424, align 1, !insn.addr !8866
  %593 = and i8 %592, ptrtoint (i32* @global_var_1 to i8), !insn.addr !8866
  %594 = icmp eq i8 %593, 0, !insn.addr !8866
  %595 = icmp eq i8 %585, 1, !insn.addr !8867
  %596 = icmp eq i1 %595, false, !insn.addr !8868
  %or.cond32 = or i1 %596, %594
  store i64 %29, i64* %rcx.9.reg2mem, !insn.addr !8869
  br i1 %or.cond32, label %dec_label_pc_14663, label %dec_label_pc_1463b, !insn.addr !8869

dec_label_pc_1463b:                               ; preds = %dec_label_pc_1462c
  %rax.5.reload = load i64, i64* %rax.5.reg2mem
  %597 = load i64, i64* %564, align 8, !insn.addr !8870
  %598 = icmp eq i64 %597, %rax.5.reload, !insn.addr !8871
  %599 = icmp eq i1 %598, false, !insn.addr !8872
  store i64 %597, i64* %rcx.9.reg2mem, !insn.addr !8872
  br i1 %599, label %dec_label_pc_14663, label %dec_label_pc_14647, !insn.addr !8872

dec_label_pc_14647:                               ; preds = %dec_label_pc_1463b
  %600 = load i8, i8* %573, align 1, !insn.addr !8873
  %601 = add i64 %rbx.3.reload, 1072, !insn.addr !8874
  %602 = inttoptr i64 %601 to i32*, !insn.addr !8874
  %603 = load i32, i32* %602, align 4, !insn.addr !8874
  %604 = add i32 %603, -4, !insn.addr !8875
  %605 = add i64 %rbx.3.reload, 1079, !insn.addr !8876
  %606 = call i64 @TS_SetBCASResponse.389(i64 %605, i32 %604, i8 %600, i64 %597), !insn.addr !8877
  store i64 %597, i64* %rcx.9.reg2mem, !insn.addr !8877
  br label %dec_label_pc_14663, !insn.addr !8877

dec_label_pc_14663:                               ; preds = %dec_label_pc_14647, %dec_label_pc_1463b, %dec_label_pc_1462c, %dec_label_pc_14609, %dec_label_pc_145c8
  %rcx.9.reload = load i64, i64* %rcx.9.reg2mem
  %607 = add i64 %rbx.3.reload, 1072, !insn.addr !8878
  %608 = inttoptr i64 %607 to i32*, !insn.addr !8878
  %609 = load i32, i32* %608, align 4, !insn.addr !8878
  %610 = icmp sgt i32 %609, ptrtoint (i8** @global_var_7 to i32), !insn.addr !8879
  br i1 %610, label %dec_label_pc_14672, label %dec_label_pc_14743, !insn.addr !8879

dec_label_pc_14672:                               ; preds = %dec_label_pc_14663
  %611 = add i64 %rbx.3.reload, 1080, !insn.addr !8880
  %612 = inttoptr i64 %611 to i8*, !insn.addr !8880
  %613 = load i8, i8* %612, align 1, !insn.addr !8880
  %614 = icmp ult i8 %613, 2
  store i8 0, i8* %storemerge.reg2mem, !insn.addr !8881
  br i1 %614, label %dec_label_pc_146d1, label %dec_label_pc_146a7, !insn.addr !8881

dec_label_pc_146a7:                               ; preds = %dec_label_pc_14672
  %615 = add i64 %rbx.3.reload, 1083, !insn.addr !8882
  %616 = inttoptr i64 %615 to i8*, !insn.addr !8882
  %617 = load i8, i8* %616, align 1, !insn.addr !8882
  store i8 %617, i8* %storemerge.reg2mem, !insn.addr !8883
  br label %dec_label_pc_146d1, !insn.addr !8883

dec_label_pc_146d1:                               ; preds = %dec_label_pc_14672, %dec_label_pc_146a7
  %storemerge.reload = load i8, i8* %storemerge.reg2mem
  store i8 %storemerge.reload, i8* %stack_var_-440, align 1
  %618 = add i64 %rbx.3.reload, 600100, !insn.addr !8884
  %619 = sext i32 %609 to i64, !insn.addr !8885
  %620 = add i64 %rbx.3.reload, 1076, !insn.addr !8886
  %621 = call i64 @memcpy(i64 %618, i64 %620, i64 %619, i64 %rcx.9.reload), !insn.addr !8887
  %622 = load i32, i32* %608, align 4, !insn.addr !8888
  %623 = add i64 %rbx.3.reload, 600420, !insn.addr !8889
  %624 = inttoptr i64 %623 to i32*, !insn.addr !8889
  store i32 %622, i32* %624, align 4, !insn.addr !8889
  %625 = load i8, i8* %573, align 1, !insn.addr !8890
  %626 = udiv i8 %625, 2
  %627 = zext i8 %626 to i64, !insn.addr !8891
  %628 = and i64 %627, zext (i32 ptrtoint (i8** @global_var_7 to i32) to i64), !insn.addr !8891
  %629 = mul i64 %628, ptrtoint (i8* @global_var_8 to i64), !insn.addr !8892
  %630 = add i64 %629, %24, !insn.addr !8892
  %631 = inttoptr i64 %630 to i64*, !insn.addr !8892
  %632 = load i64, i64* %631, align 8, !insn.addr !8892
  %633 = icmp eq i64 %632, 0, !insn.addr !8893
  br i1 %633, label %dec_label_pc_14743, label %dec_label_pc_14711, !insn.addr !8894

dec_label_pc_14711:                               ; preds = %dec_label_pc_146d1
  %634 = add i64 %rbx.3.reload, 599776, !insn.addr !8895
  %635 = call i64 @DTV_SaveBCASCommand.370(i64 %632, i64 %634), !insn.addr !8896
  %636 = load i8, i8* %573, align 1, !insn.addr !8897
  %637 = udiv i8 %636, 2
  %638 = zext i8 %637 to i64, !insn.addr !8898
  %639 = and i64 %638, zext (i32 ptrtoint (i8** @global_var_7 to i32) to i64), !insn.addr !8898
  %640 = mul i64 %639, ptrtoint (i8* @global_var_8 to i64), !insn.addr !8899
  %641 = add i64 %640, %24, !insn.addr !8899
  %642 = inttoptr i64 %641 to i64*, !insn.addr !8899
  %643 = load i64, i64* %642, align 8, !insn.addr !8899
  %644 = icmp eq i64 %643, 0, !insn.addr !8900
  br i1 %644, label %dec_label_pc_14743, label %dec_label_pc_14737, !insn.addr !8901

dec_label_pc_14737:                               ; preds = %dec_label_pc_14711
  %645 = call i64 @DTV_SaveBcasReturnCode.593(i64 %643, i8* nonnull %stack_var_-440), !insn.addr !8902
  br label %dec_label_pc_14743, !insn.addr !8902

dec_label_pc_14743:                               ; preds = %dec_label_pc_14663, %dec_label_pc_14737, %dec_label_pc_14711, %dec_label_pc_146d1
  store i64 0, i64* %564, align 8, !insn.addr !8903
  store i32 %stack_var_-529.1.reload, i32* %stack_var_-529.2.reg2mem, !insn.addr !8903
  store i64 %rcx.9.reload, i64* %rcx.10.reg2mem, !insn.addr !8903
  store i64 ptrtoint (i32* @global_var_1 to i64), i64* %r8.6.reg2mem, !insn.addr !8903
  store i64 0, i64* %r9.6.reg2mem, !insn.addr !8903
  br label %dec_label_pc_1474e, !insn.addr !8903

dec_label_pc_1474e:                               ; preds = %dec_label_pc_14743, %dec_label_pc_145ba, %dec_label_pc_145a4
  %r9.6.reload = load i64, i64* %r9.6.reg2mem
  %r8.6.reload = load i64, i64* %r8.6.reg2mem
  %rcx.10.reload = load i64, i64* %rcx.10.reg2mem
  %stack_var_-529.2.reload = load i32, i32* %stack_var_-529.2.reg2mem
  %646 = add i64 %rbx.3.reload, 5588, !insn.addr !8904
  %647 = inttoptr i64 %646 to i8*, !insn.addr !8904
  %648 = load i8, i8* %647, align 1, !insn.addr !8904
  %649 = icmp eq i8 %648, 1, !insn.addr !8904
  %650 = icmp eq i1 %649, false, !insn.addr !8905
  br i1 %650, label %dec_label_pc_1474e.dec_label_pc_147a6_crit_edge, label %dec_label_pc_14757, !insn.addr !8905

dec_label_pc_1474e.dec_label_pc_147a6_crit_edge:  ; preds = %dec_label_pc_1474e
  %.pre64 = add i64 %rbx.3.reload, 1072, !insn.addr !8906
  %.pre66 = inttoptr i64 %.pre64 to i32*, !insn.addr !8906
  store i32* %.pre66, i32** %.pre-phi67.reg2mem
  br label %dec_label_pc_147a6

dec_label_pc_14757:                               ; preds = %dec_label_pc_1474e
  %651 = add i64 %rbx.3.reload, 5589, !insn.addr !8907
  %652 = inttoptr i64 %651 to i8*, !insn.addr !8907
  %653 = load i8, i8* %652, align 1, !insn.addr !8907
  %654 = icmp eq i8 %653, 0, !insn.addr !8907
  %655 = icmp eq i1 %654, false, !insn.addr !8908
  %656 = add i64 %rbx.3.reload, 1072
  %657 = inttoptr i64 %656 to i32*
  %658 = load i32, i32* %657, align 4
  br i1 %655, label %dec_label_pc_14784, label %dec_label_pc_14760, !insn.addr !8908

dec_label_pc_14760:                               ; preds = %dec_label_pc_14757
  %659 = add i64 %rbx.3.reload, 2036, !insn.addr !8909
  %660 = inttoptr i64 %659 to i32*, !insn.addr !8909
  store i32 %658, i32* %660, align 4, !insn.addr !8909
  %661 = add i64 %rbx.3.reload, 2040, !insn.addr !8910
  %662 = sext i32 %658 to i64, !insn.addr !8911
  %663 = add i64 %rbx.3.reload, 1076, !insn.addr !8912
  %664 = call i64 @memcpy(i64 %661, i64 %663, i64 %662, i64 %rcx.10.reload), !insn.addr !8913
  store i32* %657, i32** %.pre-phi67.reg2mem, !insn.addr !8914
  br label %dec_label_pc_147a6, !insn.addr !8914

dec_label_pc_14784:                               ; preds = %dec_label_pc_14757
  %665 = add i64 %rbx.3.reload, 3000, !insn.addr !8915
  %666 = inttoptr i64 %665 to i32*, !insn.addr !8915
  store i32 %658, i32* %666, align 4, !insn.addr !8915
  %667 = add i64 %rbx.3.reload, 3004, !insn.addr !8916
  %668 = sext i32 %658 to i64, !insn.addr !8917
  %669 = add i64 %rbx.3.reload, 1076, !insn.addr !8918
  %670 = call i64 @memcpy(i64 %667, i64 %669, i64 %668, i64 %rcx.10.reload), !insn.addr !8919
  store i32* %657, i32** %.pre-phi67.reg2mem, !insn.addr !8919
  br label %dec_label_pc_147a6, !insn.addr !8919

dec_label_pc_147a6:                               ; preds = %dec_label_pc_1474e.dec_label_pc_147a6_crit_edge, %dec_label_pc_14784, %dec_label_pc_14760
  %.pre-phi67.reload = load i32*, i32** %.pre-phi67.reg2mem
  %671 = load i32, i32* %.pre-phi67.reload, align 4, !insn.addr !8906
  %672 = mul i32 %671, 2, !insn.addr !8920
  %673 = add i32 %671, 1, !insn.addr !8920
  %674 = add i32 %673, %672, !insn.addr !8920
  %675 = sext i32 %674 to i64, !insn.addr !8921
  %676 = call i64 @FUSB_ExAllocatePool.203(i64 0, i64 %675), !insn.addr !8922
  %677 = load i32, i32* %.pre-phi67.reload, align 4, !insn.addr !8923
  %678 = mul i32 %677, 2, !insn.addr !8924
  %679 = add i32 %677, 1, !insn.addr !8924
  %680 = add i32 %679, %678, !insn.addr !8924
  %681 = sext i32 %680 to i64, !insn.addr !8925
  %682 = call i64 @memset(i64 %676, i64 0, i64 %681), !insn.addr !8926
  %683 = load i32, i32* %.pre-phi67.reload, align 4, !insn.addr !8927
  %684 = icmp slt i32 %683, 1, !insn.addr !8928
  store i64 0, i64* %rbx.4.reg2mem, !insn.addr !8928
  store i64 %rbx.3.reload, i64* %r13.3.reg2mem, !insn.addr !8928
  store i64 %rcx.10.reload, i64* %rcx.11.reg2mem, !insn.addr !8928
  store i64 %r14.5.reload, i64* %r14.6.reg2mem, !insn.addr !8928
  store i64 %r15.1.reload, i64* %r15.2.reg2mem, !insn.addr !8928
  br i1 %684, label %dec_label_pc_14851, label %dec_label_pc_1480e, !insn.addr !8928

dec_label_pc_1480e:                               ; preds = %dec_label_pc_147a6, %dec_label_pc_1480e
  %r13.3.reload = load i64, i64* %r13.3.reg2mem
  %rbx.4.reload = load i64, i64* %rbx.4.reg2mem
  %685 = add i64 %r13.3.reload, 1076, !insn.addr !8929
  %686 = inttoptr i64 %685 to i8*, !insn.addr !8929
  %687 = load i8, i8* %686, align 1, !insn.addr !8929
  %688 = call i64 @sprintf(i64 %676, i64 0, i64 %676, i8 %687, i64 %r8.6.reload, i64 %r9.6.reload), !insn.addr !8930
  %689 = add nuw nsw i64 %rbx.4.reload, zext (i32 ptrtoint (i32* @global_var_1 to i32) to i64), !insn.addr !8931
  %690 = and i64 %689, 4294967295, !insn.addr !8931
  %691 = add i64 %r13.3.reload, ptrtoint (i32* @global_var_1 to i64), !insn.addr !8932
  %692 = load i32, i32* %.pre-phi67.reload, align 4, !insn.addr !8933
  %693 = sext i32 %692 to i64, !insn.addr !8934
  %694 = icmp slt i64 %690, %693, !insn.addr !8934
  store i64 %690, i64* %rbx.4.reg2mem, !insn.addr !8934
  store i64 %691, i64* %r13.3.reg2mem, !insn.addr !8934
  br i1 %694, label %dec_label_pc_1480e, label %dec_label_pc_1483d, !insn.addr !8934

dec_label_pc_1483d:                               ; preds = %dec_label_pc_1480e
  %695 = zext i8 %687 to i64, !insn.addr !8929
  %sext26 = mul i64 %r14.5.reload, 4294967296
  %696 = sdiv i64 %sext26, 4294967296, !insn.addr !8935
  %sext27 = mul i64 %r15.1.reload, 4294967296
  %697 = sdiv i64 %sext27, 4294967296, !insn.addr !8936
  store i64 %695, i64* %rcx.11.reg2mem, !insn.addr !8936
  store i64 %696, i64* %r14.6.reg2mem, !insn.addr !8936
  store i64 %697, i64* %r15.2.reg2mem, !insn.addr !8936
  br label %dec_label_pc_14851, !insn.addr !8936

dec_label_pc_14851:                               ; preds = %dec_label_pc_1483d, %dec_label_pc_147a6
  %r15.2.reload = load i64, i64* %r15.2.reg2mem
  %r14.6.reload = load i64, i64* %r14.6.reg2mem
  %rcx.11.reload = load i64, i64* %rcx.11.reg2mem
  %698 = trunc i64 %676 to i32, !insn.addr !8937
  %699 = call i64 @FUSB_ExFreePool.600(i32 %698, i64 0), !insn.addr !8937
  %700 = icmp eq i1 %509, false, !insn.addr !8938
  %701 = zext i1 %700 to i8, !insn.addr !8939
  %702 = add i64 %rbx.3.reload, 4928, !insn.addr !8939
  %703 = inttoptr i64 %702 to i8*, !insn.addr !8939
  store i8 %701, i8* %703, align 1, !insn.addr !8939
  store i8 0, i8* %511, align 1, !insn.addr !8940
  store i32 %stack_var_-529.2.reload, i32* %stack_var_-529.3.reg2mem, !insn.addr !8941
  store i8* %stack_var_-520.0.reload, i8** %stack_var_-520.1.reg2mem, !insn.addr !8941
  store i64 %rcx.11.reload, i64* %rcx.12.reg2mem, !insn.addr !8941
  store i64 %rbx.3.reload, i64* %rbx.6.reg2mem, !insn.addr !8941
  store i64 %r8.6.reload, i64* %r8.7.reg2mem, !insn.addr !8941
  store i64 %r9.6.reload, i64* %r9.7.reg2mem, !insn.addr !8941
  store i64 %r14.6.reload, i64* %r14.7.reg2mem, !insn.addr !8941
  store i64 %r15.2.reload, i64* %r15.3.reg2mem, !insn.addr !8941
  br label %dec_label_pc_14962, !insn.addr !8941

dec_label_pc_14962:                               ; preds = %dec_label_pc_142a8, %dec_label_pc_14274, %dec_label_pc_1420f, %dec_label_pc_14006, %dec_label_pc_13fdd, %dec_label_pc_13dfa, %dec_label_pc_14851, %dec_label_pc_1446a, %dec_label_pc_1444f
  %r15.3.reload = load i64, i64* %r15.3.reg2mem
  %r14.7.reload = load i64, i64* %r14.7.reg2mem
  %r9.7.reload = load i64, i64* %r9.7.reg2mem
  %r8.7.reload = load i64, i64* %r8.7.reg2mem
  %rcx.12.reload = load i64, i64* %rcx.12.reg2mem
  %stack_var_-520.1.reload = load i8*, i8** %stack_var_-520.1.reg2mem
  %stack_var_-529.3.reload = load i32, i32* %stack_var_-529.3.reg2mem
  %704 = load i8, i8* %27, align 1, !insn.addr !8942
  %705 = icmp eq i8 %704, 0, !insn.addr !8942
  %706 = icmp eq i1 %705, false, !insn.addr !8943
  store i32 %stack_var_-529.3.reload, i32* %stack_var_-529.4.reg2mem, !insn.addr !8943
  store i8* %stack_var_-520.1.reload, i8** %stack_var_-520.2.reg2mem, !insn.addr !8943
  store i64 %rcx.12.reload, i64* %rcx.13.reg2mem, !insn.addr !8943
  store i64 %r8.7.reload, i64* %r8.8.reg2mem, !insn.addr !8943
  store i64 %r9.7.reload, i64* %r9.8.reg2mem, !insn.addr !8943
  store i64 %r14.7.reload, i64* %r14.8.reg2mem, !insn.addr !8943
  store i64 %r15.3.reload, i64* %r15.4.reg2mem, !insn.addr !8943
  br i1 %706, label %dec_label_pc_149d4, label %dec_label_pc_1496d, !insn.addr !8943

dec_label_pc_1496d:                               ; preds = %dec_label_pc_14962
  %707 = icmp eq i64 %r15.3.reload, 0, !insn.addr !8944
  %708 = icmp eq i1 %707, false, !insn.addr !8945
  store i32 %stack_var_-529.3.reload, i32* %stack_var_-529.4.reg2mem, !insn.addr !8945
  store i8* %stack_var_-520.1.reload, i8** %stack_var_-520.2.reg2mem, !insn.addr !8945
  store i64 %rcx.12.reload, i64* %rcx.13.reg2mem, !insn.addr !8945
  store i64 %r8.7.reload, i64* %r8.8.reg2mem, !insn.addr !8945
  store i64 %r9.7.reload, i64* %r9.8.reg2mem, !insn.addr !8945
  store i64 %r14.7.reload, i64* %r14.8.reg2mem, !insn.addr !8945
  store i64 %r15.3.reload, i64* %r15.4.reg2mem, !insn.addr !8945
  br i1 %708, label %dec_label_pc_149d4, label %dec_label_pc_1499d, !insn.addr !8945

dec_label_pc_1499d:                               ; preds = %dec_label_pc_1496d
  %rbx.6.reload = load i64, i64* %rbx.6.reg2mem
  %709 = add i64 %rbx.6.reload, 588972, !insn.addr !8946
  %710 = inttoptr i64 %709 to i8*, !insn.addr !8946
  %711 = load i8, i8* %710, align 1, !insn.addr !8946
  %712 = zext i8 %711 to i64, !insn.addr !8946
  %713 = call i64 @DTV_DecEncChip_I2C_Read.612(i64 %rbx.6.reload, i64 %712, i64 ptrtoint (i16* @global_var_4 to i64), i64 %29, i64 ptrtoint (i32* @global_var_1 to i64)), !insn.addr !8947
  %714 = load i8, i8* %stack_var_-424, align 1, !insn.addr !8948
  %715 = and i8 %714, ptrtoint (i32* @global_var_1 to i8), !insn.addr !8948
  %716 = icmp eq i8 %715, 0, !insn.addr !8948
  %717 = icmp eq i1 %716, false, !insn.addr !8949
  store i32 %stack_var_-529.3.reload, i32* %stack_var_-529.4.reg2mem, !insn.addr !8949
  store i8* %stack_var_-520.1.reload, i8** %stack_var_-520.2.reg2mem, !insn.addr !8949
  store i64 %29, i64* %rcx.13.reg2mem, !insn.addr !8949
  store i64 ptrtoint (i32* @global_var_1 to i64), i64* %r8.8.reg2mem, !insn.addr !8949
  store i64 0, i64* %r9.8.reg2mem, !insn.addr !8949
  store i64 %r14.7.reload, i64* %r14.8.reg2mem, !insn.addr !8949
  store i64 %r15.3.reload, i64* %r15.4.reg2mem, !insn.addr !8949
  br i1 %717, label %dec_label_pc_149d4, label %dec_label_pc_149cd, !insn.addr !8949

dec_label_pc_149cd:                               ; preds = %dec_label_pc_1499d
  %718 = add i64 %rbx.6.reload, 4928, !insn.addr !8950
  %719 = inttoptr i64 %718 to i8*, !insn.addr !8950
  store i8 0, i8* %719, align 1, !insn.addr !8950
  store i32 %stack_var_-529.3.reload, i32* %stack_var_-529.4.reg2mem, !insn.addr !8950
  store i8* %stack_var_-520.1.reload, i8** %stack_var_-520.2.reg2mem, !insn.addr !8950
  store i64 %29, i64* %rcx.13.reg2mem, !insn.addr !8950
  store i64 ptrtoint (i32* @global_var_1 to i64), i64* %r8.8.reg2mem, !insn.addr !8950
  store i64 0, i64* %r9.8.reg2mem, !insn.addr !8950
  store i64 %r14.7.reload, i64* %r14.8.reg2mem, !insn.addr !8950
  store i64 %r15.3.reload, i64* %r15.4.reg2mem, !insn.addr !8950
  br label %dec_label_pc_149d4, !insn.addr !8950

dec_label_pc_149d4:                               ; preds = %dec_label_pc_13c6a, %dec_label_pc_13c5d, %dec_label_pc_13c4c, %dec_label_pc_149cd, %dec_label_pc_1499d, %dec_label_pc_1496d, %dec_label_pc_14962
  %720 = call i64 @vUSB_Wait.362(i64 50), !insn.addr !8951
  %721 = load i8, i8* %31, align 1, !insn.addr !8952
  %722 = icmp eq i8 %721, 0, !insn.addr !8952
  %723 = icmp eq i1 %722, false, !insn.addr !8953
  br i1 %723, label %dec_label_pc_149f6, label %dec_label_pc_149e9, !insn.addr !8953

dec_label_pc_149e9:                               ; preds = %dec_label_pc_149d4
  %r15.4.reload = load i64, i64* %r15.4.reg2mem
  %r14.8.reload = load i64, i64* %r14.8.reg2mem
  %r9.8.reload = load i64, i64* %r9.8.reg2mem
  %r8.8.reload = load i64, i64* %r8.8.reg2mem
  %rcx.13.reload = load i64, i64* %rcx.13.reg2mem
  %stack_var_-520.2.reload = load i8*, i8** %stack_var_-520.2.reg2mem
  %stack_var_-529.4.reload = load i32, i32* %stack_var_-529.4.reg2mem
  %724 = add i64 %r15.4.reload, ptrtoint (i32* @global_var_1 to i64), !insn.addr !8954
  %725 = add i64 %r14.8.reload, ptrtoint (i32* @global_var_1 to i64), !insn.addr !8955
  store i32 %stack_var_-529.4.reload, i32* %stack_var_-529.0.reg2mem, !insn.addr !8956
  store i8* %stack_var_-520.2.reload, i8** %stack_var_-520.0.reg2mem, !insn.addr !8956
  store i64 %rcx.13.reload, i64* %rcx.0.reg2mem, !insn.addr !8956
  store i64 %r8.8.reload, i64* %r8.0.reg2mem, !insn.addr !8956
  store i64 %r9.8.reload, i64* %r9.0.reg2mem, !insn.addr !8956
  store i64 %725, i64* %r14.0.reg2mem, !insn.addr !8956
  store i64 %724, i64* %r15.0.reg2mem, !insn.addr !8956
  br label %dec_label_pc_137ef, !insn.addr !8956

dec_label_pc_149f6:                               ; preds = %dec_label_pc_149d4
  %726 = add i64 %arg1, 21465, !insn.addr !8957
  %727 = inttoptr i64 %726 to i8*, !insn.addr !8957
  store i8 0, i8* %727, align 1, !insn.addr !8957
  store i8 ptrtoint (i32* @global_var_1 to i8), i8* %31, align 1, !insn.addr !8958
  %728 = add i64 %arg1, 21552, !insn.addr !8959
  %729 = inttoptr i64 %728 to i8*, !insn.addr !8959
  store i8 0, i8* %729, align 1, !insn.addr !8959
  %730 = add i64 %arg1, ptrtoint (i8** @global_var_5431 to i64), !insn.addr !8960
  %731 = inttoptr i64 %730 to i8*, !insn.addr !8960
  store i8 ptrtoint (i32* @global_var_1 to i8), i8* %731, align 1, !insn.addr !8960
  %732 = add i64 %arg1, 21432, !insn.addr !8961
  %733 = call i64 @complete(i64 %732), !insn.addr !8962
  %734 = call i64 @__readgsqword(i64 40), !insn.addr !8963
  ret i64 %733, !insn.addr !8964

dec_label_pc_14a45.loopexit:                      ; preds = %dec_label_pc_14305
  %735 = zext i8 %398 to i64, !insn.addr !8730
  store i64 %735, i64* %rcx.15.reg2mem
  br label %dec_label_pc_14a45

dec_label_pc_14a45:                               ; preds = %dec_label_pc_14a45.loopexit, %dec_label_pc_142b0
  %rcx.15.reload = load i64, i64* %rcx.15.reg2mem
  %736 = sext i32 %391 to i64, !insn.addr !8965
  %737 = add i64 %386, %736, !insn.addr !8966
  %738 = inttoptr i64 %737 to i8*, !insn.addr !8966
  store i8 %394, i8* %738, align 1, !insn.addr !8966
  %739 = add i32 %391, -1, !insn.addr !8967
  %740 = icmp sgt i32 %739, ptrtoint (i32* @global_var_1 to i32), !insn.addr !8968
  store i64 %139, i64* %merge.reg2mem, !insn.addr !8968
  br i1 %740, label %dec_label_pc_1431f, label %dec_label_pc_14342, !insn.addr !8968
}

define i8 @bWritePcieReg(i16 %RegOffset, i16 %u16WriteLen, i8* %pDataBuf, i64 %hCtrlTransfer) local_unnamed_addr {
dec_label_pc_14a6a:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = trunc i64 %0 to i8, !insn.addr !8969
  ret i8 %1, !insn.addr !8969
}

define i8 @bReadPcieReg(i16 %RegOffset, i16 %u16ReadLen, i8* %pDataBuf, i64 %hCtrlTransfer) local_unnamed_addr {
dec_label_pc_14a9a:
  %0 = call i64 @mcount(), !insn.addr !8970
  %1 = zext i16 %u16ReadLen to i64, !insn.addr !8971
  %2 = zext i16 %RegOffset to i64, !insn.addr !8972
  %3 = inttoptr i64 %1 to i64*, !insn.addr !8973
  %4 = bitcast i8* %pDataBuf to i64*, !insn.addr !8973
  %5 = call i64 @cfg_access.209(i64* null, i64 %hCtrlTransfer, i64 %2, i64* %3, i64* %4), !insn.addr !8973
  %6 = urem i64 %5, 256, !insn.addr !8974
  %7 = call i64 @NT_SUCCESS.556(i64 %6), !insn.addr !8975
  %8 = trunc i64 %7 to i8, !insn.addr !8976
  %9 = icmp eq i8 %8, 0, !insn.addr !8976
  %10 = icmp eq i1 %9, false, !insn.addr !8977
  %11 = zext i1 %10 to i8, !insn.addr !8977
  ret i8 %11, !insn.addr !8978
}

define i8 @bTunerReset(i8 %u8ChanNum, i8 %ResetPin, i8* %hCtrlTransfer) local_unnamed_addr {
dec_label_pc_14aca:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = call i64 @mcount(), !insn.addr !8979
  %2 = sext i8 %ResetPin to i64, !insn.addr !8980
  %3 = urem i64 %2, 65536, !insn.addr !8980
  %4 = sext i8 %u8ChanNum to i64, !insn.addr !8981
  %5 = urem i64 %4, 65536, !insn.addr !8981
  %6 = inttoptr i64 %3 to i64*, !insn.addr !8982
  %7 = bitcast i8* %hCtrlTransfer to i64*, !insn.addr !8982
  %8 = call i64 @cfg_access.209(i64* bitcast (i32* @global_var_1 to i64*), i64 %0, i64 %5, i64* %6, i64* %7), !insn.addr !8982
  %9 = urem i64 %8, 256, !insn.addr !8983
  %10 = call i64 @NT_SUCCESS.556(i64 %9), !insn.addr !8984
  %11 = trunc i64 %10 to i8, !insn.addr !8985
  %12 = icmp eq i8 %11, 0, !insn.addr !8985
  %13 = icmp eq i1 %12, false, !insn.addr !8986
  %14 = zext i1 %13 to i8, !insn.addr !8986
  ret i8 %14, !insn.addr !8987
}

define i64 @bTunerReset.562(i64 %arg1, i64 %arg2, i64 %arg3) local_unnamed_addr {
dec_label_pc_14afa:
  %stack_var_-48 = alloca i64, align 8
  %0 = call i64 @mcount(), !insn.addr !8988
  %1 = bitcast i64* %stack_var_-48 to i8*, !insn.addr !8989
  %2 = call i8 @bTunerReset(i8 -120, i8 ptrtoint (i16* @global_var_4 to i8), i8* nonnull %1), !insn.addr !8989
  %3 = trunc i64 %arg1 to i8, !insn.addr !8990
  %4 = icmp eq i8 %3, ptrtoint (i32* @global_var_1 to i8), !insn.addr !8990
  %5 = select i1 %4, i64 ptrtoint (i32* @global_var_1 to i64), i64 256, !insn.addr !8991
  ret i64 %5, !insn.addr !8992
}

define i8 @bReadPcieCfgReg(i16 %RegOffset, i16 %u16ReadLen, i8* %pDataBuf, i64 %hCtrlTransfer) local_unnamed_addr {
dec_label_pc_14b54:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = call i64 @__decompiler_undefined_function_0()
  %2 = inttoptr i64 %0 to i8*, !insn.addr !8993
  %3 = call i8 @bReadPcieReg(i16 2184, i16 ptrtoint (i16* @global_var_4 to i16), i8* %2, i64 %1), !insn.addr !8993
  ret i8 %3, !insn.addr !8994
}

define i64 @bReadPcieCfgReg.477(i64 %arg1, i64* %arg2, i64* %arg3, i64 %arg4) local_unnamed_addr {
dec_label_pc_14b84:
  %0 = ptrtoint i64* %arg3 to i64
  %1 = ptrtoint i64* %arg2 to i64
  %stack_var_-48 = alloca i8, align 1
  %2 = call i64 @mcount(), !insn.addr !8995
  %3 = trunc i64 %arg1 to i8, !insn.addr !8996
  store i8 %3, i8* %stack_var_-48, align 1, !insn.addr !8996
  %4 = call i8 @bReadPcieReg(i16 2212, i16 ptrtoint (i16* @global_var_4 to i16), i8* nonnull %stack_var_-48, i64 %arg4), !insn.addr !8997
  store i8 ptrtoint (i8* @global_var_10 to i8), i8* %stack_var_-48, align 1, !insn.addr !8998
  %5 = call i8 @bReadPcieReg(i16 2208, i16 ptrtoint (i16* @global_var_4 to i16), i8* nonnull %stack_var_-48, i64 %arg4), !insn.addr !8999
  store i8 0, i8* %stack_var_-48, align 1, !insn.addr !9000
  %6 = call i8 @bTunerReset(i8 -96, i8 ptrtoint (i16* @global_var_4 to i8), i8* nonnull %stack_var_-48), !insn.addr !9001
  %7 = call i8 @bTunerReset(i8 -88, i8 ptrtoint (i16* @global_var_4 to i8), i8* nonnull %stack_var_-48), !insn.addr !9002
  %8 = urem i64 %1, 65536, !insn.addr !9003
  %9 = ptrtoint i8* %stack_var_-48 to i64, !insn.addr !9004
  %10 = call i64 @memcpy(i64 %0, i64 %9, i64 %8, i64 %arg4), !insn.addr !9005
  ret i64 %10, !insn.addr !9006
}

define i32 @USB_IsHighSpeed(i64 %deviceExtension) local_unnamed_addr {
dec_label_pc_14c60:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = call i64 @__decompiler_undefined_function_0()
  %2 = call i64 @__decompiler_undefined_function_0()
  %3 = call i64 @__decompiler_undefined_function_0()
  %4 = add i64 %deviceExtension, 2208, !insn.addr !9007
  %5 = inttoptr i64 %4 to i8*, !insn.addr !9007
  %6 = load i8, i8* %5, align 1, !insn.addr !9007
  %7 = udiv i64 %1, 256, !insn.addr !9007
  %8 = trunc i64 %7 to i8, !insn.addr !9007
  %9 = add i8 %6, %8, !insn.addr !9007
  store i8 %9, i8* %5, align 1, !insn.addr !9007
  %10 = trunc i64 %deviceExtension to i16, !insn.addr !9008
  %11 = trunc i64 %0 to i16, !insn.addr !9008
  %12 = inttoptr i64 %2 to i8*, !insn.addr !9008
  %13 = call i8 @bReadPcieReg(i16 %10, i16 %11, i8* %12, i64 %3), !insn.addr !9008
  %14 = sext i8 %13 to i32, !insn.addr !9009
  ret i32 %14, !insn.addr !9009
}

define i32 @USB_IsPidNeedToKeep(i64 %deviceExtension, i8 %CF_Num, i32 %pid) local_unnamed_addr {
dec_label_pc_14c70:
  %0 = sext i8 %CF_Num to i32, !insn.addr !9010
  ret i32 %0, !insn.addr !9011
}

define i64 @USB_IsHighSpeed.476(i64 %arg1) local_unnamed_addr {
dec_label_pc_14c90:
  %0 = call i64 @mcount(), !insn.addr !9012
  ret i64 ptrtoint (i32* @global_var_1 to i64), !insn.addr !9013
}

define i64 @USB_IsPidNeedToKeep.196(i64 %arg1, i64 %arg2, i64 %arg3) local_unnamed_addr {
dec_label_pc_14ca0:
  %0 = call i64 @mcount(), !insn.addr !9014
  ret i64 0, !insn.addr !9015
}

define i32 @USB_SetPidTable(i64 %deviceExtension, i8 %CF_Num, i32* %PID_TABLE, i8 %Num) local_unnamed_addr {
dec_label_pc_14d55:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = sext i8 %Num to i64
  %2 = add i64 %0, -125, !insn.addr !9016
  %3 = inttoptr i64 %2 to i32*, !insn.addr !9016
  %4 = load i32, i32* %3, align 4, !insn.addr !9016
  %5 = sext i8 %Num to i32, !insn.addr !9016
  %6 = xor i32 %4, %5, !insn.addr !9016
  %7 = icmp eq i32 %6, 0, !insn.addr !9016
  store i32 %6, i32* %3, align 4, !insn.addr !9016
  %8 = mul i64 %deviceExtension, ptrtoint (i32* @global_var_1 to i64), !insn.addr !9017
  %9 = add i64 %8, %1, !insn.addr !9017
  %10 = inttoptr i64 %9 to i32*, !insn.addr !9017
  %11 = load i32, i32* %10, align 4, !insn.addr !9017
  %12 = shl i32 %11, ptrtoint (i32** @global_var_16 to i32), !insn.addr !9017
  %13 = lshr i32 %11, ptrtoint (i8* @global_var_a to i32), !insn.addr !9017
  %14 = or i32 %13, %12, !insn.addr !9017
  store i32 %14, i32* %10, align 4, !insn.addr !9017
  %15 = icmp eq i1 %7, icmp eq (i32 ptrtoint (i32* @global_var_2 to i32), i32 0), !insn.addr !9018
  %not. = icmp ne i1 %7, true
  %16 = or i1 %not., icmp slt (i32 ptrtoint (i32* @global_var_2 to i32), i32 0), !insn.addr !9018
  %17 = icmp eq i1 %16, false, !insn.addr !9019
  %18 = icmp eq i1 %15, false, !insn.addr !9019
  %19 = icmp eq i1 %17, %18, !insn.addr !9019
  %20 = zext i1 %19 to i32, !insn.addr !9020
  ret i32 %20, !insn.addr !9020
}

define i64 @USB_SetPidTable.178(i64 %arg1, i64 %arg2, i64 %arg3, i64* %arg4) local_unnamed_addr {
dec_label_pc_14d85:
  %rax.0.reg2mem = alloca i64, !insn.addr !9021
  %0 = ptrtoint i64* %arg4 to i64
  %1 = call i64 @mcount(), !insn.addr !9022
  %2 = urem i64 %arg2, 256, !insn.addr !9023
  %3 = urem i64 %0, 256, !insn.addr !9024
  %4 = trunc i64 %arg3 to i32
  %5 = icmp ult i32 %4, 8192
  store i64 0, i64* %rax.0.reg2mem, !insn.addr !9025
  br i1 %5, label %dec_label_pc_14dd7, label %dec_label_pc_14dc4, !insn.addr !9025

dec_label_pc_14dc4:                               ; preds = %dec_label_pc_14d85
  ret i64 0, !insn.addr !9026

dec_label_pc_14dd7:                               ; preds = %dec_label_pc_14d85, %dec_label_pc_14dd7
  %rax.0.reload = load i64, i64* %rax.0.reg2mem
  %6 = add nuw nsw i64 %rax.0.reload, zext (i32 ptrtoint (i32* @global_var_1 to i32) to i64), !insn.addr !9027
  %7 = and i64 %6, 4294967295, !insn.addr !9027
  %8 = icmp ult i64 %7, %3, !insn.addr !9028
  store i64 %7, i64* %rax.0.reg2mem, !insn.addr !9028
  br i1 %8, label %dec_label_pc_14dd7, label %dec_label_pc_14ddf, !insn.addr !9028

dec_label_pc_14ddf:                               ; preds = %dec_label_pc_14dd7
  %9 = trunc i64 %0 to i32, !insn.addr !9029
  %10 = mul i64 %2, shl (i64 add (i64 ptrtoint (i8* @global_var_8 to i64), i64 ptrtoint (i32* @global_var_1 to i64)), i64 ptrtoint (i16* @global_var_4 to i64)), !insn.addr !9030
  %11 = urem i32 %9, 256, !insn.addr !9031
  %12 = add i64 %10, %arg1
  %13 = add i64 %12, 23660, !insn.addr !9031
  %14 = inttoptr i64 %13 to i32*, !insn.addr !9031
  store i32 %11, i32* %14, align 4, !insn.addr !9031
  %15 = add i64 %12, 23532, !insn.addr !9032
  %16 = inttoptr i64 %arg3 to i32*, !insn.addr !9033
  %17 = load i32, i32* %16, align 4, !insn.addr !9033
  %18 = inttoptr i64 %15 to i32*, !insn.addr !9034
  store i32 %17, i32* %18, align 4, !insn.addr !9034
  ret i64 ptrtoint (i16* @global_var_4 to i64), !insn.addr !9035
}

define i32 @USB_FilterReset(i64 %deviceExtension, i8 %CF_Num, i8 %bRestoreCFReg, i8 %bCFSerialMode) local_unnamed_addr {
dec_label_pc_14e1b:
  ret i32 ptrtoint (i32* @global_var_1 to i32), !insn.addr !9036
}

define i64 @USB_FilterReset.459(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_14e4b:
  %0 = call i64 @mcount(), !insn.addr !9037
  %1 = urem i64 %arg2, 256, !insn.addr !9038
  %2 = mul i64 %1, ptrtoint (i8* @global_var_8 to i64), !insn.addr !9039
  %3 = mul i64 %1, mul (i64 shl (i64 add (i64 ptrtoint (i8* @global_var_8 to i64), i64 ptrtoint (i32* @global_var_1 to i64)), i64 ptrtoint (i16* @global_var_4 to i64)), i64 ptrtoint (i32* @global_var_1 to i64)), !insn.addr !9040
  %4 = add i64 %3, %arg1, !insn.addr !9040
  %5 = add i64 %4, 23528, !insn.addr !9041
  %6 = inttoptr i64 %5 to i32*, !insn.addr !9041
  store i32 0, i32* %6, align 4, !insn.addr !9041
  %7 = add i64 %4, 23524, !insn.addr !9042
  %8 = inttoptr i64 %7 to i32*, !insn.addr !9042
  store i32 0, i32* %8, align 4, !insn.addr !9042
  ret i64 %2, !insn.addr !9042
}

define i32 @USB_FilterStart_Stop(i64 %deviceExtension, i8 %CF_Num, i8 %ONOFF) local_unnamed_addr {
dec_label_pc_14e9f:
  %rdx.0.reg2mem = alloca i64, !insn.addr !9043
  %rax = alloca i64, align 8
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = sext i8 %CF_Num to i64
  %2 = bitcast i64* %rax to i8*
  %3 = trunc i64 %0 to i8
  %4 = mul i8 %3, 2, !insn.addr !9043
  %5 = inttoptr i64 %0 to i8*, !insn.addr !9043
  store i8 %4, i8* %5, align 1, !insn.addr !9043
  %6 = load i8, i8* %2, align 8, !insn.addr !9044
  %7 = load i64, i64* %rax, align 8
  %8 = trunc i64 %7 to i8, !insn.addr !9044
  %9 = add i8 %6, %8, !insn.addr !9044
  %10 = inttoptr i64 %7 to i8*, !insn.addr !9044
  store i8 %9, i8* %10, align 1, !insn.addr !9044
  %11 = load i8, i8* %2, align 8, !insn.addr !9045
  %12 = load i64, i64* %rax, align 8
  %13 = trunc i64 %12 to i8, !insn.addr !9045
  %14 = add i8 %11, %13, !insn.addr !9045
  %15 = inttoptr i64 %12 to i8*, !insn.addr !9045
  store i8 %14, i8* %15, align 1, !insn.addr !9045
  %16 = load i64, i64* %rax, align 8, !insn.addr !9046
  %17 = add i64 %16, %1, !insn.addr !9046
  %18 = shl i64 %17, ptrtoint (i16* @global_var_4 to i64), !insn.addr !9047
  %19 = add i64 %deviceExtension, 23532, !insn.addr !9048
  %20 = add i64 %19, %18, !insn.addr !9048
  store i64 0, i64* %rax, align 8, !insn.addr !9049
  store i64 %20, i64* %rdx.0.reg2mem, !insn.addr !9049
  br label %dec_label_pc_14eb9, !insn.addr !9049

dec_label_pc_14eb9:                               ; preds = %dec_label_pc_14eb9, %dec_label_pc_14e9f
  %rdx.0.reload = load i64, i64* %rdx.0.reg2mem
  %21 = inttoptr i64 %rdx.0.reload to i32*, !insn.addr !9050
  store i32 0, i32* %21, align 4, !insn.addr !9050
  %22 = load i64, i64* %rax, align 8, !insn.addr !9051
  %23 = add i64 %22, zext (i32 ptrtoint (i32* @global_var_1 to i32) to i64), !insn.addr !9051
  %24 = and i64 %23, 4294967295, !insn.addr !9051
  store i64 %24, i64* %rax, align 8, !insn.addr !9051
  %25 = add i64 %rdx.0.reload, 4, !insn.addr !9052
  %26 = trunc i64 %23 to i32
  %27 = icmp eq i32 %26, ptrtoint (i32** @global_var_20 to i32), !insn.addr !9053
  %28 = icmp eq i1 %27, false, !insn.addr !9054
  store i64 %25, i64* %rdx.0.reg2mem, !insn.addr !9054
  br i1 %28, label %dec_label_pc_14eb9, label %dec_label_pc_14ecb, !insn.addr !9054

dec_label_pc_14ecb:                               ; preds = %dec_label_pc_14eb9
  %29 = and i32 %26, -256
  %30 = or i32 %29, ptrtoint (i32* @global_var_1 to i32), !insn.addr !9055
  ret i32 %30, !insn.addr !9055
}

define i64 @USB_FilterStart_Stop.481(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_14ecf:
  %0 = call i64 @mcount(), !insn.addr !9056
  ret i64 %0, !insn.addr !9057
}

define i32 @USB_FilterONOFF(i64 %deviceExtension, i8 %CF_Num, i8 %ONOFF) local_unnamed_addr {
dec_label_pc_14edc:
  %rax.0.reg2mem = alloca i32, !insn.addr !9058
  %0 = sext i8 %CF_Num to i64
  %1 = mul i64 %0, shl (i64 add (i64 ptrtoint (i8* @global_var_8 to i64), i64 1), i64 ptrtoint (i16* @global_var_4 to i64)), !insn.addr !9059
  %2 = add i64 %deviceExtension, 23520, !insn.addr !9060
  %3 = sub i64 0, %1, !insn.addr !9060
  %4 = icmp eq i64 %2, %3, !insn.addr !9061
  store i32 0, i32* %rax.0.reg2mem, !insn.addr !9062
  br i1 %4, label %dec_label_pc_14f0a, label %dec_label_pc_14ef6, !insn.addr !9062

dec_label_pc_14ef6:                               ; preds = %dec_label_pc_14edc
  %5 = add i64 %1, %2, !insn.addr !9063
  %6 = inttoptr i64 %5 to i8*, !insn.addr !9063
  store i8 %ONOFF, i8* %6, align 1, !insn.addr !9063
  store i32 ptrtoint (i32* @global_var_1 to i32), i32* %rax.0.reg2mem, !insn.addr !9064
  br label %dec_label_pc_14f0a, !insn.addr !9064

dec_label_pc_14f0a:                               ; preds = %dec_label_pc_14ef6, %dec_label_pc_14edc
  %rax.0.reload = load i32, i32* %rax.0.reg2mem
  ret i32 %rax.0.reload, !insn.addr !9065
}

define i64 @USB_FilterONOFF.458(i64 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_14f0c:
  %0 = call i64 @mcount(), !insn.addr !9066
  ret i64 %0, !insn.addr !9067
}

define i32 @USB_FilterON_and_Start(i64 %deviceExtension, i8 %CF_Num) local_unnamed_addr {
dec_label_pc_14f19:
  %rax.0.reg2mem = alloca i32, !insn.addr !9068
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = sext i8 %CF_Num to i64
  %2 = mul i64 %1, shl (i64 add (i64 ptrtoint (i8* @global_var_8 to i64), i64 1), i64 ptrtoint (i16* @global_var_4 to i64)), !insn.addr !9069
  %3 = add i64 %deviceExtension, 23520, !insn.addr !9070
  %4 = sub i64 0, %2, !insn.addr !9070
  %5 = icmp eq i64 %3, %4, !insn.addr !9071
  store i32 0, i32* %rax.0.reg2mem, !insn.addr !9072
  br i1 %5, label %dec_label_pc_14f47, label %dec_label_pc_14f33, !insn.addr !9072

dec_label_pc_14f33:                               ; preds = %dec_label_pc_14f19
  %6 = trunc i64 %0 to i8, !insn.addr !9073
  %7 = add i64 %2, %3, !insn.addr !9073
  %8 = inttoptr i64 %7 to i8*, !insn.addr !9073
  store i8 %6, i8* %8, align 1, !insn.addr !9073
  store i32 ptrtoint (i32* @global_var_1 to i32), i32* %rax.0.reg2mem, !insn.addr !9074
  br label %dec_label_pc_14f47, !insn.addr !9074

dec_label_pc_14f47:                               ; preds = %dec_label_pc_14f33, %dec_label_pc_14f19
  %rax.0.reload = load i32, i32* %rax.0.reg2mem
  ret i32 %rax.0.reload, !insn.addr !9075
}

define i64 @USB_FilterON_and_Start.567(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_14f49:
  %0 = call i64 @mcount(), !insn.addr !9076
  ret i64 %0, !insn.addr !9077
}

define i32 @USB_BulkStreamRead(i64 %deviceExtension, i8 %Channel_Num, i8* %Buffer, i64 %ReadLen) local_unnamed_addr {
dec_label_pc_14f57:
  ret i32 0, !insn.addr !9078
}

define i32 @USB_BulkStreamStop(i64 %deviceExtension, i8 %Channel_Num) local_unnamed_addr {
dec_label_pc_14f6b:
  %rax.0.reg2mem = alloca i64, !insn.addr !9079
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = icmp eq i64 %0, 0, !insn.addr !9079
  br i1 %1, label %dec_label_pc_14f85, label %dec_label_pc_14f70, !insn.addr !9080

dec_label_pc_14f70:                               ; preds = %dec_label_pc_14f6b
  %2 = sext i8 %Channel_Num to i64
  %3 = mul i64 %2, shl (i64 add (i64 ptrtoint (i8* @global_var_8 to i64), i64 1), i64 ptrtoint (i16* @global_var_4 to i64)), !insn.addr !9081
  %4 = add i64 %deviceExtension, 23520, !insn.addr !9082
  %5 = add i64 %4, %3, !insn.addr !9082
  %6 = inttoptr i64 %5 to i8*, !insn.addr !9082
  store i8 ptrtoint (i32* @global_var_1 to i8), i8* %6, align 1, !insn.addr !9082
  store i64 ptrtoint (i32* @global_var_1 to i64), i64* %rax.0.reg2mem, !insn.addr !9083
  br label %dec_label_pc_14f85, !insn.addr !9083

dec_label_pc_14f85:                               ; preds = %dec_label_pc_14f70, %dec_label_pc_14f6b
  %rax.0.reload = load i64, i64* %rax.0.reg2mem
  %7 = trunc i64 %rax.0.reload to i32, !insn.addr !9084
  ret i32 %7, !insn.addr !9084
}

define i64 @USB_BulkStreamRead.537(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_14f87:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = call i64 @__decompiler_undefined_function_0()
  %2 = call i64 @mcount(), !insn.addr !9085
  %3 = urem i64 %arg2, 256, !insn.addr !9086
  %4 = call i64 @iGetStreamData.515(i64 %arg1, i64 %3, i64 %0, i64 %1), !insn.addr !9087
  ret i64 %4, !insn.addr !9088
}

define i64 @USB_BulkStreamStop.313(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_14f9b:
  %0 = call i64 @__decompiler_undefined_function_0()
  ret i64 %0, !insn.addr !9089
}

define i32 @USB_BulkStreamStart(i64 %deviceExtension, i8 %Channel_Num, i8* %Contex, i64 %TransferObjBufSize, i64 %StreamBufSize) local_unnamed_addr {
dec_label_pc_14fae:
  %0 = ptrtoint i8* %Contex to i64
  %1 = trunc i64 %0 to i16, !insn.addr !9090
  %2 = inttoptr i64 %TransferObjBufSize to i8*, !insn.addr !9090
  %3 = call i64 @FUSBDTV_Cmd_I2CRead_NoWt(i64 %deviceExtension, i8 %Channel_Num, i16 %1, i8* %2), !insn.addr !9090
  %4 = zext i8 %Channel_Num to i64, !insn.addr !9091
  %5 = call i64 @FUSBDTV_StopBulkStream.338(i64 %deviceExtension, i64 %4), !insn.addr !9092
  %6 = icmp eq i64 %5, ptrtoint (i32* @global_var_1 to i64), !insn.addr !9093
  %7 = zext i1 %6 to i32, !insn.addr !9094
  ret i32 %7, !insn.addr !9094
}

define i64 @USB_BulkStreamStart.377(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4, i64 %arg5) local_unnamed_addr {
dec_label_pc_14fde:
  %0 = call i64 @mcount(), !insn.addr !9095
  %1 = urem i64 %arg2, 256, !insn.addr !9096
  %2 = call i64 @FUSBDTV_StartBulkStream.453(i64 %arg1, i64 %1, i64 %arg4, i64 %arg5, i64 %arg3), !insn.addr !9097
  ret i64 0, !insn.addr !9098
}

define i32 @USB_GetFilterStat(i64 %deviceExtension, i8 %CF_Num) local_unnamed_addr {
dec_label_pc_1501e:
  %rax.0.reg2mem = alloca i32, !insn.addr !9099
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = call i64 @__decompiler_undefined_function_0()
  %2 = sext i8 %CF_Num to i64
  %3 = inttoptr i64 %2 to i8*, !insn.addr !9100
  %4 = call i64 @FUSBDTV_Cmd_GetDev_Speed(i64 %0, i8* %3), !insn.addr !9100
  %5 = icmp eq i64 %4, ptrtoint (i32* @global_var_1 to i64), !insn.addr !9101
  store i32 ptrtoint (i32* @global_var_1 to i32), i32* %rax.0.reg2mem, !insn.addr !9102
  br i1 %5, label %dec_label_pc_15043, label %dec_label_pc_15034, !insn.addr !9102

dec_label_pc_15034:                               ; preds = %dec_label_pc_1501e
  %6 = and i64 %1, 4294967295, !insn.addr !9103
  %7 = call i64 @FUSBDTV_StopBulkStream.338(i64 %0, i64 %6), !insn.addr !9104
  store i32 0, i32* %rax.0.reg2mem, !insn.addr !9105
  br label %dec_label_pc_15043, !insn.addr !9105

dec_label_pc_15043:                               ; preds = %dec_label_pc_15034, %dec_label_pc_1501e
  %rax.0.reload = load i32, i32* %rax.0.reg2mem
  ret i32 %rax.0.reload, !insn.addr !9106
}

define i8 @USB_CF_Read(i64 %deviceExtension, i8 %CF_Num, i8 %byReg, i8 %byCount, i8* %pBuffer) local_unnamed_addr {
dec_label_pc_1504c:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = trunc i64 %0 to i8, !insn.addr !9107
  ret i8 %1, !insn.addr !9107
}

define i64 @USB_GetFilterStat.583(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_1504e:
  %stack_var_-9 = alloca i8, align 1
  %0 = call i64 @mcount(), !insn.addr !9108
  store i8 0, i8* %stack_var_-9, align 1, !insn.addr !9109
  %1 = trunc i64 %arg2 to i8, !insn.addr !9110
  %2 = call i64 @FUSBDTV_Cmd_EncWrite(i64 %arg1, i8 %1, i8 64, i16 ptrtoint (i32* @global_var_1 to i16), i8* nonnull %stack_var_-9), !insn.addr !9111
  %3 = load i8, i8* %stack_var_-9, align 1, !insn.addr !9112
  %4 = zext i8 %3 to i64, !insn.addr !9112
  ret i64 %4, !insn.addr !9113
}

define i64 @USB_CF_Read.226(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4, i64 %arg5) local_unnamed_addr {
dec_label_pc_1507c:
  %0 = call i64 @mcount(), !insn.addr !9114
  ret i64 0, !insn.addr !9115
}

define i8 @USB_I2C_Write(i64 %deviceExtension, i8 %byID, i8 %byReg, i8* %pBuffer, i8 %byCount, i8 %byI2CFlag) local_unnamed_addr {
dec_label_pc_150d9:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = trunc i64 %0 to i8
  ret i8 %1
}

define i64 @function_150db(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4) local_unnamed_addr {
dec_label_pc_150db:
  %rax = alloca i64, align 8
  %0 = call x86_fp80 @__decompiler_undefined_function_6()
  %1 = add i64 %arg4, ptrtoint (i32* @global_var_1 to i64), !insn.addr !9116
  %2 = inttoptr i64 %1 to i32*, !insn.addr !9116
  %3 = load i32, i32* %2, align 4, !insn.addr !9116
  %4 = add i32 %3, ptrtoint (i32* @global_var_1 to i32), !insn.addr !9116
  store i32 %4, i32* %2, align 4, !insn.addr !9116
  %5 = inttoptr i64 %1 to i16*, !insn.addr !9117
  %6 = load i16, i16* %5, align 2, !insn.addr !9117
  %7 = sitofp i16 %6 to x86_fp80, !insn.addr !9117
  %8 = fadd x86_fp80 %0, %7, !insn.addr !9117
  %9 = fptosi x86_fp80 %8 to i64, !insn.addr !9118
  %10 = load i64, i64* %rax, align 8, !insn.addr !9118
  %11 = add i64 %10, -125, !insn.addr !9118
  %12 = inttoptr i64 %11 to i64*, !insn.addr !9118
  store i64 %9, i64* %12, align 8, !insn.addr !9118
  %13 = load i64, i64* %rax, align 8, !insn.addr !9119
  %14 = mul i64 %13, ptrtoint (i32* @global_var_1 to i64), !insn.addr !9119
  %15 = add i64 %arg1, -72, !insn.addr !9119
  %16 = add i64 %15, %14, !insn.addr !9119
  %17 = inttoptr i64 %16 to i32*, !insn.addr !9119
  %18 = load i32, i32* %17, align 4, !insn.addr !9119
  %19 = trunc i64 %arg2 to i32, !insn.addr !9119
  %20 = add i32 %18, %19, !insn.addr !9119
  store i32 %20, i32* %17, align 4, !insn.addr !9119
  %21 = bitcast i64* %rax to i8*
  %22 = load i8, i8* %21, align 8, !insn.addr !9120
  %23 = load i64, i64* %rax, align 8
  %24 = trunc i64 %23 to i8, !insn.addr !9120
  %25 = add i8 %22, %24, !insn.addr !9120
  %26 = inttoptr i64 %23 to i8*, !insn.addr !9120
  store i8 %25, i8* %26, align 1, !insn.addr !9120
  %27 = load i8, i8* %21, align 8, !insn.addr !9121
  %28 = load i64, i64* %rax, align 8
  %29 = trunc i64 %28 to i8, !insn.addr !9121
  %30 = add i8 %27, %29, !insn.addr !9121
  %31 = inttoptr i64 %28 to i8*, !insn.addr !9121
  store i8 %30, i8* %31, align 1, !insn.addr !9121
  %32 = load i64, i64* %rax, align 8, !insn.addr !9122
  ret i64 %32, !insn.addr !9122
}

define i64 @function_150ef() local_unnamed_addr {
dec_label_pc_150ef:
  %0 = call i64 @__decompiler_undefined_function_0()
  ret i64 %0, !insn.addr !9123
}

define i64 @USB_I2C_Write.590(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4, i64 %arg5, i64* %arg6) local_unnamed_addr {
dec_label_pc_15109:
  %0 = ptrtoint i64* %arg6 to i64
  %1 = call i64 @mcount(), !insn.addr !9124
  %2 = trunc i64 %0 to i8, !insn.addr !9125
  %3 = icmp eq i8 %2, ptrtoint (i8** @global_var_3 to i8), !insn.addr !9125
  %4 = icmp eq i1 %3, false, !insn.addr !9126
  br i1 %4, label %dec_label_pc_15137, label %dec_label_pc_15118, !insn.addr !9126

dec_label_pc_15118:                               ; preds = %dec_label_pc_15109
  %5 = urem i64 %arg2, 256, !insn.addr !9127
  %6 = urem i64 %arg5, 256, !insn.addr !9128
  %7 = call i64 @FPCIEDTV_Cmd_I2CWrite.305(i64 %arg1, i64 %5, i64 255, i64 %6, i64 %arg4, i64* bitcast (i8* @global_var_5 to i64*)), !insn.addr !9129
  ret i64 %7, !insn.addr !9130

dec_label_pc_15137:                               ; preds = %dec_label_pc_15109
  %8 = icmp eq i8 %2, ptrtoint (i16* @global_var_4 to i8), !insn.addr !9131
  %9 = icmp eq i1 %8, false, !insn.addr !9132
  br i1 %9, label %dec_label_pc_1515a, label %dec_label_pc_1513d, !insn.addr !9132

dec_label_pc_1513d:                               ; preds = %dec_label_pc_15137
  %10 = urem i64 %arg3, 256, !insn.addr !9133
  %11 = urem i64 %arg2, 256, !insn.addr !9134
  %12 = urem i64 %arg5, 256, !insn.addr !9135
  %13 = call i64 @FPCIEDTV_Cmd_I2CWrite.305(i64 %arg1, i64 %11, i64 %10, i64 %12, i64 %arg4, i64* bitcast (i16* @global_var_4 to i64*)), !insn.addr !9136
  ret i64 %13, !insn.addr !9137

dec_label_pc_1515a:                               ; preds = %dec_label_pc_15137
  %14 = urem i64 %arg5, 256, !insn.addr !9138
  ret i64 %14, !insn.addr !9139
}

define i8 @USB_I2C_Read(i64 %deviceExtension, i8 %byID, i8 %byReg, i8* %pBuffer, i8 %byCount, i8 %byI2CFlag) local_unnamed_addr {
dec_label_pc_15178:
  %0 = sext i8 %byI2CFlag to i64
  %1 = sext i8 %byCount to i64
  %2 = ptrtoint i8* %pBuffer to i64
  %3 = sext i8 %byReg to i64
  %4 = sext i8 %byID to i64
  %5 = inttoptr i64 %0 to i64*, !insn.addr !9140
  %6 = call i64 @FPCIEDTV_Cmd_I2CWrite.305(i64 %deviceExtension, i64 %4, i64 %3, i64 %2, i64 %1, i64* %5), !insn.addr !9140
  %7 = icmp eq i64 %6, ptrtoint (i32* @global_var_1 to i64), !insn.addr !9141
  %8 = zext i1 %7 to i8, !insn.addr !9142
  ret i8 %8, !insn.addr !9143
}

define i64 @USB_I2C_Read.565(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4, i64 %arg5, i64* %arg6) local_unnamed_addr {
dec_label_pc_151a8:
  %0 = ptrtoint i64* %arg6 to i64
  %1 = call i64 @mcount(), !insn.addr !9144
  %2 = trunc i64 %0 to i8, !insn.addr !9145
  %3 = icmp eq i8 %2, ptrtoint (i32* @global_var_1 to i8), !insn.addr !9145
  br i1 %3, label %dec_label_pc_151e2, label %dec_label_pc_151b7, !insn.addr !9146

dec_label_pc_151b7:                               ; preds = %dec_label_pc_151a8
  %4 = icmp ult i8 %2, ptrtoint (i32* @global_var_1 to i8), !insn.addr !9147
  br i1 %4, label %dec_label_pc_151c5, label %dec_label_pc_151bd, !insn.addr !9148

dec_label_pc_151bd:                               ; preds = %dec_label_pc_151b7
  ret i64 %1, !insn.addr !9149

dec_label_pc_151c5:                               ; preds = %dec_label_pc_151b7
  %5 = urem i64 %arg3, 256, !insn.addr !9150
  %6 = urem i64 %arg2, 256, !insn.addr !9151
  %7 = urem i64 %arg5, 256, !insn.addr !9152
  %8 = call i64 @FPCIEDTV_Cmd_I2CRead.212(i64 %arg1, i64 %6, i64 %5, i64 %7, i64 %arg4, i64* bitcast (i8** @global_var_3 to i64*)), !insn.addr !9153
  ret i64 %8, !insn.addr !9154

dec_label_pc_151e2:                               ; preds = %dec_label_pc_151a8
  %9 = urem i64 %arg5, 256, !insn.addr !9155
  ret i64 %9, !insn.addr !9156
}

define i8 @USB_I2C_WriteAndRead(i64 %deviceExtension, i8 %slave_addr, i8* %Write_buffer, i8 %Write_size, i8* %Read_buffer, i8 %Read_size, i8 %mode) local_unnamed_addr {
dec_label_pc_151f3:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = sext i8 %Read_size to i64
  %2 = sext i8 %Write_size to i64
  %3 = ptrtoint i8* %Write_buffer to i64
  %4 = sext i8 %slave_addr to i64
  %5 = and i64 %0, 4294967295, !insn.addr !9157
  %6 = inttoptr i64 %1 to i64*, !insn.addr !9158
  %7 = call i64 @FPCIEDTV_Cmd_I2CRead.212(i64 %deviceExtension, i64 %4, i64 %3, i64 %5, i64 %2, i64* %6), !insn.addr !9158
  %8 = icmp eq i64 %7, ptrtoint (i32* @global_var_1 to i64), !insn.addr !9159
  %9 = zext i1 %8 to i8, !insn.addr !9160
  ret i8 %9, !insn.addr !9161
}

define i64 @USB_I2C_WriteAndRead.160(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4, i64 %arg5, i64 %arg6, i8 %arg7) local_unnamed_addr {
dec_label_pc_15223:
  %0 = call i64 @mcount(), !insn.addr !9162
  %1 = icmp eq i8 %arg7, 0, !insn.addr !9163
  %2 = icmp eq i1 %1, false, !insn.addr !9164
  br i1 %2, label %dec_label_pc_1529d, label %dec_label_pc_15258, !insn.addr !9164

dec_label_pc_15258:                               ; preds = %dec_label_pc_15223
  %3 = urem i64 %arg2, 256, !insn.addr !9165
  %4 = urem i64 %arg4, 256, !insn.addr !9166
  %5 = call i64 @USB_I2C_Write.590(i64 %arg1, i64 %3, i64 0, i64 %arg3, i64 %4, i64* bitcast (i8** @global_var_3 to i64*)), !insn.addr !9167
  %6 = urem i64 %arg6, 256, !insn.addr !9168
  %7 = call i64 @USB_I2C_Read.565(i64 %arg1, i64 %3, i64 0, i64 %arg5, i64 %6, i64* bitcast (i32* @global_var_2 to i64*)), !insn.addr !9169
  ret i64 %7, !insn.addr !9170

dec_label_pc_1529d:                               ; preds = %dec_label_pc_15223
  %8 = zext i8 %arg7 to i64
  %9 = add i64 %arg3, ptrtoint (i32* @global_var_1 to i64), !insn.addr !9171
  %10 = urem i64 %arg2, 256, !insn.addr !9172
  %11 = call i64 @USB_I2C_Write.590(i64 %arg1, i64 %10, i64 %8, i64 %9, i64 ptrtoint (i32* @global_var_2 to i64), i64* null), !insn.addr !9173
  %12 = inttoptr i64 %9 to i8*, !insn.addr !9174
  %13 = load i8, i8* %12, align 1, !insn.addr !9174
  %14 = or i8 %13, ptrtoint (i32* @global_var_1 to i8), !insn.addr !9174
  store i8 %14, i8* %12, align 1, !insn.addr !9174
  %15 = call i64 @USB_I2C_Write.590(i64 %arg1, i64 %10, i64 0, i64 %arg3, i64 ptrtoint (i32* @global_var_2 to i64), i64* bitcast (i8** @global_var_3 to i64*)), !insn.addr !9175
  ret i64 %15, !insn.addr !9176
}

define i32 @USB_CleanStreamBuffer(i64 %deviceExtension, i8 %Channel_Num) local_unnamed_addr {
dec_label_pc_152f7:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = call i64 @__decompiler_undefined_function_0()
  %2 = trunc i64 %1 to i8
  %3 = mul i8 %2, 2, !insn.addr !9177
  %4 = inttoptr i64 %1 to i8*, !insn.addr !9177
  store i8 %3, i8* %4, align 1, !insn.addr !9177
  %5 = add i64 %0, ptrtoint (i8* @global_var_f to i64), !insn.addr !9178
  %6 = inttoptr i64 %5 to i8*, !insn.addr !9178
  %7 = load i8, i8* %6, align 1, !insn.addr !9178
  %8 = add i8 %7, %2, !insn.addr !9178
  store i8 %8, i8* %6, align 1, !insn.addr !9178
  %9 = trunc i64 %1 to i32, !insn.addr !9179
  ret i32 %9, !insn.addr !9179
}

define i8 @USB_CF_Write(i64 %deviceExtension, i8 %CF_Num, i8 %byReg, i8* %pBuffer, i8 %byCount, i8 %bZeroNoSend) local_unnamed_addr {
dec_label_pc_15310:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = add i64 %0, -117, !insn.addr !9180
  %2 = inttoptr i64 %1 to i32*, !insn.addr !9180
  %3 = load i32, i32* %2, align 4, !insn.addr !9180
  %4 = sub i32 %3, ptrtoint (i32* @global_var_1 to i32), !insn.addr !9180
  store i32 %4, i32* %2, align 4, !insn.addr !9180
  %5 = trunc i64 %0 to i8, !insn.addr !9181
  ret i8 %5, !insn.addr !9181
}

define i64 @USB_CleanStreamBuffer.596(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_15327:
  %0 = call i64 @mcount(), !insn.addr !9182
  %1 = trunc i64 %arg2 to i8, !insn.addr !9183
  %2 = call i64 @vCleanStreamBuffer.619(i64 %arg1, i8 %1), !insn.addr !9184
  ret i64 ptrtoint (i32* @global_var_1 to i64), !insn.addr !9185
}

define i64 @USB_CF_Write.378(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4, i64 %arg5, i64 %arg6) local_unnamed_addr {
dec_label_pc_15340:
  %0 = call i64 @mcount(), !insn.addr !9186
  ret i64 %0, !insn.addr !9187
}

define void @DelayMilliseconds_i2c(i32 %ms) local_unnamed_addr {
dec_label_pc_1540e:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = call i64 @__decompiler_undefined_function_0()
  %2 = call i64 @__decompiler_undefined_function_0()
  %3 = add i64 %2, ptrtoint (i32** @global_var_12 to i64), !insn.addr !9188
  %4 = inttoptr i64 %3 to i32*, !insn.addr !9188
  %5 = load i32, i32* %4, align 4, !insn.addr !9188
  %6 = trunc i64 %1 to i32, !insn.addr !9188
  %7 = add i32 %5, %6, !insn.addr !9188
  store i32 %7, i32* %4, align 4, !insn.addr !9188
  %8 = add i64 %2, -49, !insn.addr !9189
  %9 = inttoptr i64 %8 to i8*, !insn.addr !9189
  %10 = load i8, i8* %9, align 1, !insn.addr !9189
  %11 = trunc i64 %0 to i8, !insn.addr !9189
  %12 = add i8 %10, %11, !insn.addr !9189
  store i8 %12, i8* %9, align 1, !insn.addr !9189
  ret void, !insn.addr !9190
}

define void @DelayMilliseconds(i32 %ms) local_unnamed_addr {
dec_label_pc_15425:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = trunc i64 %0 to i8
  %2 = mul i8 %1, 2, !insn.addr !9191
  %3 = inttoptr i64 %0 to i8*, !insn.addr !9191
  store i8 %2, i8* %3, align 1, !insn.addr !9191
  ret void, !insn.addr !9192
}

define void @vUSB_Wait(i64 %dwMilliseconds) local_unnamed_addr {
dec_label_pc_15435:
  ret void, !insn.addr !9193
}

define i64 @DelayMilliseconds_i2c.249(i64* %arg1) local_unnamed_addr {
dec_label_pc_1543e:
  %0 = call i64 @mcount(), !insn.addr !9194
  ret i64 %0, !insn.addr !9194
}

define i64 @private_data(i8* %m2) local_unnamed_addr {
dec_label_pc_15448:
  %0 = ptrtoint i8* %m2 to i64
  %1 = mul i64 %0, 2, !insn.addr !9195
  %2 = and i64 %1, 4294967294, !insn.addr !9196
  %3 = call i64 @__udelay(i64 %2), !insn.addr !9197
  ret i64 %3, !insn.addr !9198
}

define i64 @DelayMilliseconds.518(i64* %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_15455:
  %0 = call i64 @mcount(), !insn.addr !9199
  %1 = call i64 @msleep_interruptible(), !insn.addr !9200
  ret i64 %1, !insn.addr !9201
}

define i64 @vUSB_Wait.362(i64 %arg1) local_unnamed_addr {
dec_label_pc_15465:
  %0 = call i64 @__decompiler_undefined_function_0()
  ret i64 %0, !insn.addr !9202
}

define i32 @set_init_cbc_multi2(i8* %m2, i8* %val) local_unnamed_addr {
dec_label_pc_1546c:
  %0 = ptrtoint i8* %val to i64
  %1 = bitcast i8* %m2 to i64*, !insn.addr !9203
  %2 = call i64 @DelayMilliseconds.518(i64* %1, i64 %0), !insn.addr !9203
  %3 = trunc i64 %2 to i32, !insn.addr !9204
  ret i32 %3, !insn.addr !9204
}

define i64 @private_data.10(i64 %arg1) local_unnamed_addr {
dec_label_pc_15478:
  %0 = call i64 @mcount(), !insn.addr !9205
  ret i64 0, !insn.addr !9206
}

define i64 @set_init_cbc_multi2.11(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_1549c:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = call i64 @mcount(), !insn.addr !9207
  %2 = call i64 @private_data.10(i64 %arg1), !insn.addr !9208
  %3 = icmp ne i64 %2, 0, !insn.addr !9209
  %4 = icmp eq i64 %arg2, 0, !insn.addr !9210
  %5 = icmp eq i1 %4, false, !insn.addr !9211
  %or.cond = icmp eq i1 %5, %3
  br i1 %or.cond, label %dec_label_pc_154bf, label %dec_label_pc_154b8, !insn.addr !9212

dec_label_pc_154b8:                               ; preds = %dec_label_pc_1549c
  ret i64 4294967295, !insn.addr !9213

dec_label_pc_154bf:                               ; preds = %dec_label_pc_1549c
  %6 = trunc i64 %0 to i32
  %7 = add i64 %arg2, ptrtoint (i8** @global_var_3 to i64), !insn.addr !9214
  %8 = inttoptr i64 %7 to i8*, !insn.addr !9214
  %9 = load i8, i8* %8, align 1, !insn.addr !9214
  %10 = urem i32 %6, 256, !insn.addr !9215
  %11 = shl i32 %10, ptrtoint (i32** @global_var_18 to i32), !insn.addr !9215
  %12 = zext i8 %9 to i32, !insn.addr !9216
  %13 = or i32 %11, %12, !insn.addr !9216
  %14 = add i64 %arg2, ptrtoint (i32* @global_var_1 to i64), !insn.addr !9217
  %15 = inttoptr i64 %14 to i8*, !insn.addr !9217
  %16 = load i8, i8* %15, align 1, !insn.addr !9217
  %17 = zext i8 %16 to i32, !insn.addr !9218
  %18 = shl i32 %17, ptrtoint (i8* @global_var_10 to i32), !insn.addr !9218
  %19 = or i32 %13, %18, !insn.addr !9219
  %20 = add i64 %arg2, ptrtoint (i32* @global_var_2 to i64), !insn.addr !9220
  %21 = inttoptr i64 %20 to i8*, !insn.addr !9220
  %22 = load i8, i8* %21, align 1, !insn.addr !9220
  %23 = zext i8 %22 to i32, !insn.addr !9221
  %24 = shl i32 %23, ptrtoint (i8* @global_var_8 to i32), !insn.addr !9221
  %25 = or i32 %19, %24, !insn.addr !9222
  %26 = add i64 %2, ptrtoint (i16* @global_var_4 to i64), !insn.addr !9223
  %27 = inttoptr i64 %26 to i32*, !insn.addr !9223
  store i32 %25, i32* %27, align 4, !insn.addr !9223
  ret i64 %2, !insn.addr !9224
}

define i32 @set_system_key_multi2(i8* %m2, i8* %val) local_unnamed_addr {
dec_label_pc_154e4:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = call i64 @__decompiler_undefined_function_0()
  %2 = add i64 %0, ptrtoint (i8** @global_var_3 to i64), !insn.addr !9225
  %3 = inttoptr i64 %2 to i8*, !insn.addr !9225
  %4 = load i8, i8* %3, align 1, !insn.addr !9225
  %5 = trunc i64 %0 to i32
  %6 = urem i32 %5, 256, !insn.addr !9226
  %7 = shl i32 %6, ptrtoint (i32** @global_var_18 to i32), !insn.addr !9226
  %8 = zext i8 %4 to i32, !insn.addr !9227
  %9 = or i32 %7, %8, !insn.addr !9227
  %10 = add i64 %0, ptrtoint (i32* @global_var_1 to i64), !insn.addr !9228
  %11 = inttoptr i64 %10 to i8*, !insn.addr !9228
  %12 = load i8, i8* %11, align 1, !insn.addr !9228
  %13 = zext i8 %12 to i32, !insn.addr !9229
  %14 = shl i32 %13, ptrtoint (i8* @global_var_10 to i32), !insn.addr !9229
  %15 = or i32 %9, %14, !insn.addr !9230
  %16 = add i64 %0, ptrtoint (i32* @global_var_2 to i64), !insn.addr !9231
  %17 = inttoptr i64 %16 to i8*, !insn.addr !9231
  %18 = load i8, i8* %17, align 1, !insn.addr !9231
  %19 = zext i8 %18 to i32, !insn.addr !9232
  %20 = shl i32 %19, ptrtoint (i8* @global_var_8 to i32), !insn.addr !9232
  %21 = or i32 %15, %20, !insn.addr !9233
  %22 = add i64 %1, ptrtoint (i8* @global_var_8 to i64), !insn.addr !9234
  %23 = inttoptr i64 %22 to i32*, !insn.addr !9234
  store i32 %21, i32* %23, align 4, !insn.addr !9234
  %24 = add i64 %1, 128, !insn.addr !9235
  %25 = inttoptr i64 %24 to i32*, !insn.addr !9235
  %26 = load i32, i32* %25, align 4, !insn.addr !9235
  %27 = or i32 %26, 1, !insn.addr !9235
  store i32 %27, i32* %25, align 4, !insn.addr !9235
  ret i32 0, !insn.addr !9236
}

define i64 @set_system_key_multi2.12(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_15514:
  %0 = call i64 @mcount(), !insn.addr !9237
  %1 = call i64 @private_data.10(i64 %arg1), !insn.addr !9238
  %2 = icmp ne i64 %1, 0, !insn.addr !9239
  %3 = icmp eq i64 %arg2, 0, !insn.addr !9240
  %4 = icmp eq i1 %3, false, !insn.addr !9241
  %or.cond = icmp eq i1 %4, %2
  %merge = select i1 %or.cond, i64 %1, i64 4294967295
  ret i64 %merge, !insn.addr !9242
}

define i32 @set_round_multi2(i8* %m2, i32 %val) local_unnamed_addr {
dec_label_pc_1554b:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = call i64 @__decompiler_undefined_function_0()
  %2 = call i64 @__decompiler_undefined_function_0()
  %3 = call i64 @__decompiler_undefined_function_0()
  %4 = trunc i64 %2 to i32, !insn.addr !9243
  %5 = or i32 %4, %val, !insn.addr !9243
  %6 = mul i64 %1, ptrtoint (i32* @global_var_1 to i64), !insn.addr !9244
  %7 = add i64 %6, %0
  %8 = add i64 %7, ptrtoint (i8** @global_var_3 to i64), !insn.addr !9244
  %9 = inttoptr i64 %8 to i8*, !insn.addr !9244
  %10 = load i8, i8* %9, align 1, !insn.addr !9244
  %11 = zext i8 %10 to i32, !insn.addr !9245
  %12 = or i32 %5, %11, !insn.addr !9245
  %13 = add i64 %7, ptrtoint (i32* @global_var_2 to i64), !insn.addr !9246
  %14 = inttoptr i64 %13 to i8*, !insn.addr !9246
  %15 = load i8, i8* %14, align 1, !insn.addr !9246
  %16 = zext i8 %15 to i32, !insn.addr !9247
  %17 = shl i32 %16, ptrtoint (i8* @global_var_8 to i32), !insn.addr !9247
  %18 = or i32 %12, %17, !insn.addr !9248
  %19 = add i64 %1, ptrtoint ([4 x i8]* @global_var_c to i64), !insn.addr !9249
  %20 = add i64 %19, %3, !insn.addr !9249
  %21 = inttoptr i64 %20 to i32*, !insn.addr !9249
  store i32 %18, i32* %21, align 4, !insn.addr !9249
  %22 = add i64 %3, 128, !insn.addr !9250
  %23 = inttoptr i64 %22 to i32*, !insn.addr !9250
  %24 = load i32, i32* %23, align 4, !insn.addr !9250
  %25 = or i32 %24, 2, !insn.addr !9250
  store i32 %25, i32* %23, align 4, !insn.addr !9250
  %26 = trunc i64 %3 to i32, !insn.addr !9250
  ret i32 %26, !insn.addr !9250
}

define i32 @add_ref_multi2(i8* %m2) local_unnamed_addr {
dec_label_pc_15574:
  %rax = alloca i64, align 8
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = bitcast i64* %rax to i8*
  %2 = trunc i64 %0 to i8
  %3 = mul i8 %2, 2, !insn.addr !9251
  %4 = inttoptr i64 %0 to i8*, !insn.addr !9251
  store i8 %3, i8* %4, align 1, !insn.addr !9251
  %5 = load i8, i8* %1, align 8, !insn.addr !9252
  %6 = load i64, i64* %rax, align 8
  %7 = trunc i64 %6 to i8, !insn.addr !9252
  %8 = add i8 %5, %7, !insn.addr !9252
  %9 = inttoptr i64 %6 to i8*, !insn.addr !9252
  store i8 %8, i8* %9, align 1, !insn.addr !9252
  %10 = load i64, i64* %rax, align 8, !insn.addr !9253
  %11 = trunc i64 %10 to i32, !insn.addr !9253
  ret i32 %11, !insn.addr !9253
}

define i64 @set_round_multi2.13(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_1557b:
  %0 = call i64 @mcount(), !insn.addr !9254
  %1 = call i64 @private_data.10(i64 %arg1), !insn.addr !9255
  ret i64 4294967295, !insn.addr !9256
}

define void @core_pi1(i64 %dst, i64 %src) local_unnamed_addr {
dec_label_pc_15598:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = call i64 @__decompiler_undefined_function_0()
  %rax = alloca i64, align 8
  %2 = add i64 %1, 12090458, !insn.addr !9257
  %3 = inttoptr i64 %2 to i8*, !insn.addr !9257
  %4 = load i8, i8* %3, align 1, !insn.addr !9257
  %5 = trunc i64 %1 to i8, !insn.addr !9257
  %6 = or i8 %4, %5, !insn.addr !9257
  store i8 %6, i8* %3, align 1, !insn.addr !9257
  %7 = bitcast i64* %rax to i8*
  %8 = load i8, i8* %7, align 8, !insn.addr !9258
  %9 = load i64, i64* %rax, align 8
  %10 = trunc i64 %9 to i8, !insn.addr !9258
  %11 = add i8 %8, %10, !insn.addr !9258
  %12 = inttoptr i64 %9 to i8*, !insn.addr !9258
  store i8 %11, i8* %12, align 1, !insn.addr !9258
  %13 = add i64 %0, -55, !insn.addr !9259
  %14 = inttoptr i64 %13 to i8*, !insn.addr !9259
  %15 = load i8, i8* %14, align 1, !insn.addr !9259
  %16 = trunc i64 %0 to i8, !insn.addr !9259
  %17 = add i8 %15, %16, !insn.addr !9259
  store i8 %17, i8* %14, align 1, !insn.addr !9259
  ret void, !insn.addr !9260
}

define i64 @add_ref_multi2.14() local_unnamed_addr {
dec_label_pc_155a4:
  %0 = call i64 @mcount(), !insn.addr !9261
  ret i64 %0, !insn.addr !9261
}

define void @core_pi2(i64 %dst, i64 %src, i32 %a) local_unnamed_addr {
dec_label_pc_155af:
  ret void
}

define i64 @function_155b2() local_unnamed_addr {
dec_label_pc_155b2:
  %rdx.0.reg2mem = alloca i64, !insn.addr !9262
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = icmp eq i64 %0, 0, !insn.addr !9263
  store i64 4294967295, i64* %rdx.0.reg2mem, !insn.addr !9264
  br i1 %1, label %dec_label_pc_155c4, label %dec_label_pc_155bc, !insn.addr !9264

dec_label_pc_155bc:                               ; preds = %dec_label_pc_155b2
  %2 = trunc i64 %0 to i32
  %3 = add i32 %2, ptrtoint (i32* @global_var_1 to i32), !insn.addr !9265
  %4 = inttoptr i64 %0 to i32*, !insn.addr !9265
  store i32 %3, i32* %4, align 4, !insn.addr !9265
  store i64 0, i64* %rdx.0.reg2mem, !insn.addr !9266
  br label %dec_label_pc_155c4, !insn.addr !9266

dec_label_pc_155c4:                               ; preds = %dec_label_pc_155bc, %dec_label_pc_155b2
  %rdx.0.reload = load i64, i64* %rdx.0.reg2mem
  ret i64 %rdx.0.reload, !insn.addr !9267
}

define i64 @core_pi1.15(i64* %arg1) local_unnamed_addr {
dec_label_pc_155c8:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = call i64 @mcount(), !insn.addr !9268
  %2 = trunc i64 %0 to i32
  %3 = bitcast i64* %arg1 to i32*, !insn.addr !9269
  store i32 %2, i32* %3, align 4, !insn.addr !9269
  %4 = and i64 %0, 4294967295, !insn.addr !9270
  ret i64 %4, !insn.addr !9270
}

define void @core_pi3(i64 %dst, i64 %src, i32 %a, i32 %b) local_unnamed_addr {
dec_label_pc_155d7:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = trunc i64 %0 to i32, !insn.addr !9271
  %2 = add i64 %src, ptrtoint (i16* @global_var_4 to i64), !insn.addr !9271
  %3 = inttoptr i64 %2 to i32*, !insn.addr !9271
  %4 = load i32, i32* %3, align 4, !insn.addr !9271
  %5 = xor i32 %4, %1, !insn.addr !9271
  %6 = add i64 %dst, ptrtoint (i16* @global_var_4 to i64), !insn.addr !9272
  %7 = inttoptr i64 %6 to i32*, !insn.addr !9272
  store i32 %5, i32* %7, align 4, !insn.addr !9272
  ret void, !insn.addr !9273
}

define i64 @core_pi2.16(i64* %arg1, i64* %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_155df:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = ptrtoint i64* %arg2 to i64
  %2 = ptrtoint i64* %arg1 to i64
  %3 = call i64 @mcount(), !insn.addr !9274
  %4 = add i64 %1, ptrtoint (i16* @global_var_4 to i64), !insn.addr !9275
  %5 = inttoptr i64 %4 to i32*, !insn.addr !9275
  %6 = load i32, i32* %5, align 4, !insn.addr !9275
  %7 = add i32 %6, %arg3, !insn.addr !9275
  %8 = lshr i32 %7, ptrtoint (i8** @global_var_1f to i32), !insn.addr !9276
  %9 = shl i32 %7, ptrtoint (i32* @global_var_1 to i32), !insn.addr !9276
  %10 = or i32 %8, %9, !insn.addr !9276
  %11 = mul i32 %10, ptrtoint (i32* @global_var_1 to i32), !insn.addr !9277
  %12 = add i32 %7, -1, !insn.addr !9277
  %13 = add i32 %12, %11, !insn.addr !9277
  %14 = trunc i64 %0 to i32
  %15 = xor i32 %13, %14, !insn.addr !9278
  %16 = lshr i32 %13, ptrtoint (i32** @global_var_1c to i32), !insn.addr !9279
  %17 = shl i32 %13, ptrtoint (i16* @global_var_4 to i32), !insn.addr !9279
  %18 = or i32 %16, %17, !insn.addr !9279
  %19 = xor i32 %15, %18, !insn.addr !9280
  %20 = bitcast i64* %arg1 to i32*, !insn.addr !9281
  store i32 %19, i32* %20, align 4, !insn.addr !9281
  %21 = load i32, i32* %5, align 4, !insn.addr !9282
  %22 = zext i32 %21 to i64, !insn.addr !9282
  %23 = add i64 %2, ptrtoint (i16* @global_var_4 to i64), !insn.addr !9283
  %24 = inttoptr i64 %23 to i32*, !insn.addr !9283
  store i32 %21, i32* %24, align 4, !insn.addr !9283
  ret i64 %22, !insn.addr !9284
}

define i64 @core_pi3.17(i64 %arg1, i64 %arg2, i64 %arg3) local_unnamed_addr {
dec_label_pc_15607:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = call i64 @mcount(), !insn.addr !9285
  %2 = and i64 %0, 4294967295, !insn.addr !9286
  ret i64 %2, !insn.addr !9287
}

define void @core_pi4(i64 %dst, i64 %src, i32 %a) local_unnamed_addr {
dec_label_pc_15615:
  %0 = inttoptr i64 %dst to i32*, !insn.addr !9288
  store i32 %a, i32* %0, align 4, !insn.addr !9288
  ret void, !insn.addr !9288
}

define void @core_encrypt(i64 %dst, i64 %src, i64 %w, i32 %round) local_unnamed_addr {
dec_label_pc_15636:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = or i64 %0, %w
  %2 = trunc i64 %1 to i32, !insn.addr !9289
  %3 = trunc i64 %w to i32, !insn.addr !9290
  %4 = lshr i32 %3, ptrtoint (i8* @global_var_10 to i32), !insn.addr !9290
  %5 = shl i32 %3, ptrtoint (i8* @global_var_10 to i32), !insn.addr !9290
  %6 = or i32 %4, %5, !insn.addr !9290
  %7 = add i64 %src, ptrtoint (i16* @global_var_4 to i64), !insn.addr !9291
  %8 = inttoptr i64 %7 to i32*, !insn.addr !9291
  %9 = load i32, i32* %8, align 4, !insn.addr !9291
  %10 = xor i32 %9, %6, !insn.addr !9292
  %11 = xor i32 %10, %2, !insn.addr !9291
  %12 = add i64 %dst, ptrtoint (i16* @global_var_4 to i64), !insn.addr !9293
  %13 = inttoptr i64 %12 to i32*, !insn.addr !9293
  store i32 %11, i32* %13, align 4, !insn.addr !9293
  ret void, !insn.addr !9294
}

define i64 @core_pi4.18(i64 %arg1, i64 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_15645:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = call i64 @mcount(), !insn.addr !9295
  %2 = add i64 %arg2, ptrtoint (i16* @global_var_4 to i64), !insn.addr !9296
  %3 = inttoptr i64 %2 to i32*, !insn.addr !9296
  %4 = load i32, i32* %3, align 4, !insn.addr !9296
  %5 = add i32 %4, %arg3, !insn.addr !9296
  %6 = lshr i32 %5, ptrtoint (i8** @global_var_1e to i32), !insn.addr !9297
  %7 = shl i32 %5, ptrtoint (i32* @global_var_2 to i32), !insn.addr !9297
  %8 = or i32 %6, %7, !insn.addr !9297
  %9 = mul i32 %8, ptrtoint (i32* @global_var_1 to i32), !insn.addr !9298
  %10 = add i32 %5, ptrtoint (i32* @global_var_1 to i32), !insn.addr !9298
  %11 = add i32 %10, %9, !insn.addr !9298
  %12 = trunc i64 %0 to i32
  %13 = xor i32 %11, %12, !insn.addr !9299
  %14 = inttoptr i64 %arg1 to i32*, !insn.addr !9300
  store i32 %13, i32* %14, align 4, !insn.addr !9300
  %15 = load i32, i32* %3, align 4, !insn.addr !9301
  %16 = zext i32 %15 to i64, !insn.addr !9301
  %17 = add i64 %arg1, ptrtoint (i16* @global_var_4 to i64), !insn.addr !9302
  %18 = inttoptr i64 %17 to i32*, !insn.addr !9302
  store i32 %15, i32* %18, align 4, !insn.addr !9302
  ret i64 %16, !insn.addr !9303
}

define i64 @core_encrypt.19(i32* %arg1, i32* %arg2, i64 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_15666:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = ptrtoint i32* %arg2 to i64
  %2 = ptrtoint i32* %arg1 to i64
  %3 = call i64 @mcount(), !insn.addr !9304
  %4 = trunc i64 %0 to i32
  store i32 %4, i32* %arg1, align 4, !insn.addr !9305
  %5 = add i64 %1, ptrtoint (i16* @global_var_4 to i64), !insn.addr !9306
  %6 = inttoptr i64 %5 to i32*, !insn.addr !9306
  %7 = load i32, i32* %6, align 4, !insn.addr !9306
  %8 = zext i32 %7 to i64, !insn.addr !9306
  %9 = add i64 %2, ptrtoint (i16* @global_var_4 to i64), !insn.addr !9307
  %10 = inttoptr i64 %9 to i32*, !insn.addr !9307
  store i32 %7, i32* %10, align 4, !insn.addr !9307
  ret i64 %8, !insn.addr !9308
}

define i32 @decrypt_multi2(i8* %m2, i32 %type, i8* %buf, i32 %size) local_unnamed_addr {
dec_label_pc_156f8:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = call i64 @__decompiler_undefined_function_0()
  %2 = call i64 @__decompiler_undefined_function_0()
  %3 = call i64 @__decompiler_undefined_function_0()
  %4 = ptrtoint i8* %buf to i64
  %5 = and i64 %2, 4294967295, !insn.addr !9309
  %6 = call i64 @core_pi3.17(i64 %1, i64 %5, i64 %4), !insn.addr !9310
  %7 = add i64 %3, ptrtoint (i32** @global_var_1c to i64), !insn.addr !9311
  %8 = inttoptr i64 %7 to i32*, !insn.addr !9311
  %9 = load i32, i32* %8, align 4, !insn.addr !9311
  %10 = call i64 @core_pi4.18(i64 %0, i64 %1, i32 %9), !insn.addr !9312
  %11 = trunc i64 %10 to i32, !insn.addr !9313
  ret i32 %11, !insn.addr !9313
}

define i64 @decrypt_multi2.20(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4) local_unnamed_addr {
dec_label_pc_15728:
  %merge.reg2mem = alloca i64, !insn.addr !9314
  %rdx.1.reg2mem = alloca i64, !insn.addr !9314
  %rax.2.reg2mem = alloca i64, !insn.addr !9314
  %rbx.0.reg2mem = alloca i64, !insn.addr !9314
  %stack_var_-108.0.reg2mem = alloca i64, !insn.addr !9314
  %.reg2mem48 = alloca i32, !insn.addr !9314
  %rsi.1.reg2mem = alloca i64, !insn.addr !9314
  %stack_var_-84.0.reg2mem = alloca i32, !insn.addr !9314
  %.reg2mem = alloca i32, !insn.addr !9314
  %.pre-phi.reg2mem = alloca i8*, !insn.addr !9314
  %.pre-phi19.reg2mem = alloca i8*, !insn.addr !9314
  %.pre-phi23.reg2mem = alloca i8*, !insn.addr !9314
  %.pre-phi27.reg2mem = alloca i8*, !insn.addr !9314
  %.pre-phi31.reg2mem = alloca i8*, !insn.addr !9314
  %.pre-phi35.reg2mem = alloca i8*, !insn.addr !9314
  %.pre-phi39.reg2mem = alloca i8*, !insn.addr !9314
  %.pre-phi43.reg2mem = alloca i8*, !insn.addr !9314
  %rdx.0.in.reg2mem = alloca i32, !insn.addr !9314
  %rcx.0.reg2mem = alloca i64, !insn.addr !9314
  %rax.0.in.reg2mem = alloca i32, !insn.addr !9314
  %rsi.0.reg2mem = alloca i64, !insn.addr !9314
  %stack_var_-100.0.reg2mem = alloca i32, !insn.addr !9314
  %stack_var_-72 = alloca i32*, align 8
  %0 = call i16 @__decompiler_undefined_function_4()
  %1 = call i16 @__decompiler_undefined_function_4()
  %stack_var_-88 = alloca i32, align 4
  %stack_var_-104 = alloca i32, align 4
  %2 = call i64 @mcount(), !insn.addr !9315
  %sext = mul i64 %arg4, 4294967296
  %3 = sdiv i64 %sext, 4294967296, !insn.addr !9316
  %4 = call i64 @__readgsqword(i64 40), !insn.addr !9317
  %5 = call i64 @private_data.10(i64 %arg1), !insn.addr !9318
  %6 = icmp eq i64 %5, 0, !insn.addr !9319
  %7 = icmp eq i64 %arg3, 0, !insn.addr !9320
  %or.cond = or i1 %7, %6
  %8 = trunc i64 %3 to i32, !insn.addr !9321
  %9 = icmp slt i32 %8, 1, !insn.addr !9322
  %or.cond10 = or i1 %9, %or.cond
  store i64 %5, i64* %merge.reg2mem, !insn.addr !9323
  br i1 %or.cond10, label %dec_label_pc_15a89, label %dec_label_pc_1577c, !insn.addr !9323

dec_label_pc_1577c:                               ; preds = %dec_label_pc_15728
  %10 = trunc i64 %arg2 to i32, !insn.addr !9324
  %11 = icmp eq i32 %10, ptrtoint (i32* @global_var_2 to i32), !insn.addr !9324
  %12 = icmp eq i1 %11, false, !insn.addr !9325
  %.v = select i1 %12, i64 60, i64 92
  %13 = add i64 %5, %.v, !insn.addr !9325
  %14 = add i64 %5, ptrtoint (i16* @global_var_4 to i64), !insn.addr !9326
  %15 = inttoptr i64 %14 to i32*, !insn.addr !9326
  %16 = load i32, i32* %15, align 4, !insn.addr !9326
  store i32 %16, i32* %stack_var_-104, align 4, !insn.addr !9327
  %17 = add i64 %13, ptrtoint (i32** @global_var_18 to i64), !insn.addr !9328
  %18 = inttoptr i64 %17 to i32*, !insn.addr !9328
  %19 = load i32, i32* %18, align 4, !insn.addr !9328
  %20 = add i64 %13, ptrtoint (i32** @global_var_1c to i64), !insn.addr !9329
  %21 = inttoptr i64 %20 to i32*, !insn.addr !9329
  %22 = load i32, i32* %21, align 4, !insn.addr !9329
  %23 = add i64 %5, 124, !insn.addr !9330
  %24 = inttoptr i64 %23 to i32*, !insn.addr !9330
  %25 = load i32, i32* %24, align 4, !insn.addr !9330
  %26 = icmp sgt i32 %8, ptrtoint (i8** @global_var_7 to i32), !insn.addr !9331
  store i32 %25, i32* %.reg2mem48, !insn.addr !9331
  store i64 %3, i64* %stack_var_-108.0.reg2mem, !insn.addr !9331
  store i64 %arg3, i64* %rbx.0.reg2mem, !insn.addr !9331
  br i1 %26, label %dec_label_pc_1580b, label %dec_label_pc_15a17, !insn.addr !9331

dec_label_pc_1580b:                               ; preds = %dec_label_pc_1577c
  %27 = zext i32 %22 to i64, !insn.addr !9329
  %28 = add i64 %13, ptrtoint (i32** @global_var_14 to i64), !insn.addr !9332
  %29 = inttoptr i64 %28 to i32*, !insn.addr !9332
  %30 = load i32, i32* %29, align 4, !insn.addr !9332
  %31 = zext i32 %30 to i64, !insn.addr !9332
  %32 = add i64 %13, ptrtoint (i8* @global_var_10 to i64), !insn.addr !9333
  %33 = inttoptr i64 %32 to i32*, !insn.addr !9333
  %34 = load i32, i32* %33, align 4, !insn.addr !9333
  %35 = add i64 %13, ptrtoint ([4 x i8]* @global_var_c to i64), !insn.addr !9334
  %36 = inttoptr i64 %35 to i32*, !insn.addr !9334
  %37 = load i32, i32* %36, align 4, !insn.addr !9334
  %38 = add i64 %13, ptrtoint (i16* @global_var_4 to i64), !insn.addr !9335
  %39 = inttoptr i64 %38 to i32*, !insn.addr !9335
  %40 = load i32, i32* %39, align 4, !insn.addr !9335
  %41 = inttoptr i64 %13 to i32*, !insn.addr !9336
  %42 = load i32, i32* %41, align 4, !insn.addr !9336
  %43 = add i64 %13, ptrtoint (i8* @global_var_8 to i64), !insn.addr !9337
  %44 = inttoptr i64 %43 to i32*, !insn.addr !9337
  %45 = load i32, i32* %44, align 4, !insn.addr !9337
  %46 = add i64 %5, ptrtoint (i8* @global_var_8 to i64), !insn.addr !9338
  %47 = inttoptr i64 %46 to i32*, !insn.addr !9338
  %48 = load i32, i32* %47, align 4, !insn.addr !9338
  %49 = sub i32 %8, ptrtoint (i8* @global_var_8 to i32), !insn.addr !9339
  %50 = lshr i32 %49, ptrtoint (i8** @global_var_3 to i32), !insn.addr !9340
  %51 = zext i32 %50 to i64
  %52 = mul i64 %51, ptrtoint (i8* @global_var_8 to i64), !insn.addr !9341
  %53 = add i64 %arg3, ptrtoint (i8* @global_var_8 to i64), !insn.addr !9341
  %54 = add i64 %53, %52, !insn.addr !9341
  %55 = icmp eq i32 %25, 0, !insn.addr !9342
  %56 = mul i64 %31, ptrtoint (i32* @global_var_1 to i64)
  %57 = mul i32 %34, ptrtoint (i32* @global_var_1 to i32)
  %58 = mul i32 %37, ptrtoint (i32* @global_var_1 to i32)
  %59 = mul i32 %40, ptrtoint (i32* @global_var_1 to i32)
  %60 = mul i32 %42, ptrtoint (i32* @global_var_1 to i32)
  %61 = trunc i16 %1 to i8, !insn.addr !9343
  %62 = trunc i16 %0 to i8, !insn.addr !9344
  store i32 %48, i32* %stack_var_-100.0.reg2mem, !insn.addr !9345
  store i64 %arg3, i64* %rsi.0.reg2mem, !insn.addr !9345
  br label %dec_label_pc_1583c, !insn.addr !9345

dec_label_pc_1583c:                               ; preds = %dec_label_pc_15981, %dec_label_pc_1580b
  %rsi.0.reload = load i64, i64* %rsi.0.reg2mem
  %stack_var_-100.0.reload = load i32, i32* %stack_var_-100.0.reg2mem
  %63 = inttoptr i64 %rsi.0.reload to i8*
  %64 = load i8, i8* %63, align 1, !insn.addr !9346
  %65 = zext i8 %64 to i32, !insn.addr !9347
  %66 = shl i32 %65, ptrtoint (i32** @global_var_18 to i32), !insn.addr !9347
  %67 = add i64 %rsi.0.reload, ptrtoint (i32* @global_var_1 to i64)
  %68 = inttoptr i64 %67 to i8*
  %69 = load i8, i8* %68, align 1, !insn.addr !9348
  %70 = zext i8 %69 to i32, !insn.addr !9349
  %71 = shl i32 %70, ptrtoint (i8* @global_var_10 to i32), !insn.addr !9349
  %72 = or i32 %71, %66, !insn.addr !9350
  %73 = add i64 %rsi.0.reload, ptrtoint (i8** @global_var_3 to i64)
  %74 = inttoptr i64 %73 to i8*
  %75 = load i8, i8* %74, align 1, !insn.addr !9351
  %76 = zext i8 %75 to i32, !insn.addr !9352
  %77 = or i32 %72, %76, !insn.addr !9352
  %78 = add i64 %rsi.0.reload, ptrtoint (i32* @global_var_2 to i64)
  %79 = inttoptr i64 %78 to i8*
  %80 = load i8, i8* %79, align 1, !insn.addr !9353
  %81 = zext i8 %80 to i32, !insn.addr !9354
  %82 = shl i32 %81, ptrtoint (i8* @global_var_8 to i32), !insn.addr !9354
  %83 = or i32 %77, %82, !insn.addr !9355
  %84 = add i64 %rsi.0.reload, ptrtoint (i16* @global_var_4 to i64)
  %85 = inttoptr i64 %84 to i8*
  %86 = load i8, i8* %85, align 1, !insn.addr !9356
  %87 = zext i8 %86 to i32, !insn.addr !9357
  %88 = shl i32 %87, ptrtoint (i32** @global_var_18 to i32), !insn.addr !9357
  %89 = add i64 %rsi.0.reload, ptrtoint (i8* @global_var_5 to i64)
  %90 = inttoptr i64 %89 to i8*
  %91 = load i8, i8* %90, align 1, !insn.addr !9358
  %92 = zext i8 %91 to i32, !insn.addr !9359
  %93 = shl i32 %92, ptrtoint (i8* @global_var_10 to i32), !insn.addr !9359
  %94 = or i32 %93, %88, !insn.addr !9360
  %95 = add i64 %rsi.0.reload, ptrtoint (i8** @global_var_7 to i64)
  %96 = inttoptr i64 %95 to i8*
  %97 = load i8, i8* %96, align 1, !insn.addr !9361
  %98 = zext i8 %97 to i32, !insn.addr !9362
  %99 = or i32 %94, %98, !insn.addr !9362
  %100 = add i64 %rsi.0.reload, ptrtoint (i8* @global_var_6 to i64)
  %101 = inttoptr i64 %100 to i8*
  %102 = load i8, i8* %101, align 1, !insn.addr !9363
  %103 = zext i8 %102 to i32, !insn.addr !9364
  %104 = shl i32 %103, ptrtoint (i8* @global_var_8 to i32), !insn.addr !9364
  %105 = or i32 %99, %104, !insn.addr !9365
  store i32 %83, i32* %stack_var_-88, align 4, !insn.addr !9366
  store i32 %83, i32* %rax.0.in.reg2mem, !insn.addr !9367
  store i64 0, i64* %rcx.0.reg2mem, !insn.addr !9367
  store i32 %105, i32* %rdx.0.in.reg2mem, !insn.addr !9367
  store i8* %96, i8** %.pre-phi43.reg2mem, !insn.addr !9367
  store i8* %101, i8** %.pre-phi39.reg2mem, !insn.addr !9367
  store i8* %90, i8** %.pre-phi35.reg2mem, !insn.addr !9367
  store i8* %85, i8** %.pre-phi31.reg2mem, !insn.addr !9367
  store i8* %74, i8** %.pre-phi27.reg2mem, !insn.addr !9367
  store i8* %79, i8** %.pre-phi23.reg2mem, !insn.addr !9367
  store i8* %68, i8** %.pre-phi19.reg2mem, !insn.addr !9367
  store i8* %63, i8** %.pre-phi.reg2mem, !insn.addr !9367
  store i32 %83, i32* %.reg2mem, !insn.addr !9367
  store i32 %105, i32* %stack_var_-84.0.reg2mem, !insn.addr !9367
  store i64 %rsi.0.reload, i64* %rsi.1.reg2mem, !insn.addr !9367
  br i1 %55, label %dec_label_pc_15981, label %dec_label_pc_1589f, !insn.addr !9367

dec_label_pc_1589f:                               ; preds = %dec_label_pc_1583c, %dec_label_pc_1589f
  %rdx.0.in.reload = load i32, i32* %rdx.0.in.reg2mem
  %rcx.0.reload = load i64, i64* %rcx.0.reg2mem
  %rax.0.in.reload = load i32, i32* %rax.0.in.reg2mem
  %rdx.0 = zext i32 %rdx.0.in.reload to i64
  %rax.0 = zext i32 %rax.0.in.reload to i64
  %106 = mul i64 %rdx.0, ptrtoint (i32* @global_var_1 to i64), !insn.addr !9368
  %107 = add i64 %106, %27, !insn.addr !9368
  %108 = trunc i64 %107 to i32, !insn.addr !9369
  %109 = lshr i32 %108, ptrtoint (i8** @global_var_1e to i32), !insn.addr !9370
  %110 = shl i32 %108, ptrtoint (i32* @global_var_2 to i32), !insn.addr !9370
  %111 = or i32 %109, %110, !insn.addr !9370
  %112 = zext i32 %111 to i64, !insn.addr !9370
  %113 = mul i64 %112, ptrtoint (i32* @global_var_1 to i64), !insn.addr !9371
  %114 = add i64 %107, ptrtoint (i32* @global_var_1 to i64), !insn.addr !9371
  %115 = add i64 %114, %113, !insn.addr !9371
  %116 = xor i64 %115, %rax.0
  %117 = add i64 %116, %56, !insn.addr !9372
  %118 = trunc i64 %117 to i32, !insn.addr !9373
  %119 = lshr i32 %118, ptrtoint (i8** @global_var_1e to i32), !insn.addr !9374
  %120 = shl i32 %118, ptrtoint (i32* @global_var_2 to i32), !insn.addr !9374
  %121 = or i32 %119, %120, !insn.addr !9374
  %122 = zext i32 %121 to i64, !insn.addr !9374
  %123 = mul i64 %122, ptrtoint (i32* @global_var_1 to i64), !insn.addr !9375
  %124 = add i64 %117, ptrtoint (i32* @global_var_1 to i64), !insn.addr !9375
  %125 = add i64 %124, %123, !insn.addr !9375
  %126 = trunc i64 %125 to i32, !insn.addr !9376
  %127 = lshr i32 %126, ptrtoint (i32** @global_var_18 to i32), !insn.addr !9377
  %128 = shl i32 %126, ptrtoint (i8* @global_var_8 to i32), !insn.addr !9377
  %129 = or i32 %127, %128, !insn.addr !9377
  %130 = xor i32 %129, %126, !insn.addr !9378
  %131 = add i32 %130, %19, !insn.addr !9379
  %132 = lshr i32 %131, ptrtoint (i8** @global_var_1f to i32), !insn.addr !9380
  %133 = shl i32 %131, ptrtoint (i32* @global_var_1 to i32), !insn.addr !9380
  %134 = or i32 %132, %133, !insn.addr !9380
  %135 = sub i32 %134, %131, !insn.addr !9381
  %136 = lshr i32 %135, ptrtoint (i8* @global_var_10 to i32), !insn.addr !9382
  %137 = shl i32 %135, ptrtoint (i8* @global_var_10 to i32), !insn.addr !9382
  %138 = or i32 %136, %137, !insn.addr !9382
  %139 = trunc i64 %116 to i32, !insn.addr !9383
  %140 = or i32 %135, %139, !insn.addr !9383
  %141 = xor i32 %140, %rdx.0.in.reload, !insn.addr !9384
  %142 = xor i32 %141, %138, !insn.addr !9385
  %143 = add i32 %142, %57, !insn.addr !9386
  %144 = lshr i32 %143, ptrtoint (i8** @global_var_1f to i32), !insn.addr !9387
  %145 = shl i32 %143, ptrtoint (i32* @global_var_1 to i32), !insn.addr !9387
  %146 = or i32 %144, %145, !insn.addr !9387
  %147 = mul i32 %146, ptrtoint (i32* @global_var_1 to i32), !insn.addr !9388
  %148 = add i32 %143, -1, !insn.addr !9388
  %149 = add i32 %148, %147, !insn.addr !9388
  %150 = xor i32 %149, %139, !insn.addr !9389
  %151 = lshr i32 %149, ptrtoint (i32** @global_var_1c to i32), !insn.addr !9390
  %152 = shl i32 %149, ptrtoint (i16* @global_var_4 to i32), !insn.addr !9390
  %153 = or i32 %151, %152, !insn.addr !9390
  %154 = xor i32 %150, %153, !insn.addr !9391
  %155 = xor i32 %154, %142, !insn.addr !9392
  %156 = add i32 %155, %58, !insn.addr !9393
  %157 = lshr i32 %156, ptrtoint (i8** @global_var_1e to i32), !insn.addr !9394
  %158 = shl i32 %156, ptrtoint (i32* @global_var_2 to i32), !insn.addr !9394
  %159 = or i32 %157, %158, !insn.addr !9394
  %160 = mul i32 %159, ptrtoint (i32* @global_var_1 to i32), !insn.addr !9395
  %161 = add i32 %156, ptrtoint (i32* @global_var_1 to i32), !insn.addr !9395
  %162 = add i32 %161, %160, !insn.addr !9395
  %163 = xor i32 %162, %154, !insn.addr !9396
  %164 = add i32 %163, %59, !insn.addr !9397
  %165 = lshr i32 %164, ptrtoint (i8** @global_var_1e to i32), !insn.addr !9398
  %166 = shl i32 %164, ptrtoint (i32* @global_var_2 to i32), !insn.addr !9398
  %167 = or i32 %165, %166, !insn.addr !9398
  %168 = mul i32 %167, ptrtoint (i32* @global_var_1 to i32), !insn.addr !9399
  %169 = add i32 %164, ptrtoint (i32* @global_var_1 to i32), !insn.addr !9399
  %170 = add i32 %169, %168, !insn.addr !9399
  %171 = lshr i32 %170, ptrtoint (i32** @global_var_18 to i32), !insn.addr !9400
  %172 = shl i32 %170, ptrtoint (i8* @global_var_8 to i32), !insn.addr !9400
  %173 = or i32 %171, %172, !insn.addr !9400
  %174 = xor i32 %173, %170, !insn.addr !9401
  %175 = add i32 %174, %45, !insn.addr !9402
  %176 = lshr i32 %175, ptrtoint (i8** @global_var_1f to i32), !insn.addr !9403
  %177 = shl i32 %175, ptrtoint (i32* @global_var_1 to i32), !insn.addr !9403
  %178 = or i32 %176, %177, !insn.addr !9403
  %179 = sub i32 %178, %175, !insn.addr !9404
  %180 = lshr i32 %179, ptrtoint (i8* @global_var_10 to i32), !insn.addr !9405
  %181 = shl i32 %179, ptrtoint (i8* @global_var_10 to i32), !insn.addr !9405
  %182 = or i32 %180, %181, !insn.addr !9405
  %183 = or i32 %179, %163, !insn.addr !9406
  %184 = xor i32 %183, %155, !insn.addr !9407
  %185 = xor i32 %184, %182, !insn.addr !9408
  %186 = add i32 %185, %60, !insn.addr !9409
  %187 = lshr i32 %186, ptrtoint (i8** @global_var_1f to i32), !insn.addr !9410
  %188 = shl i32 %186, ptrtoint (i32* @global_var_1 to i32), !insn.addr !9410
  %189 = or i32 %187, %188, !insn.addr !9410
  %190 = mul i32 %189, ptrtoint (i32* @global_var_1 to i32), !insn.addr !9411
  %191 = add i32 %186, -1, !insn.addr !9411
  %192 = add i32 %191, %190, !insn.addr !9411
  %193 = xor i32 %192, %163, !insn.addr !9412
  %194 = lshr i32 %192, ptrtoint (i32** @global_var_1c to i32), !insn.addr !9413
  %195 = shl i32 %192, ptrtoint (i16* @global_var_4 to i32), !insn.addr !9413
  %196 = or i32 %194, %195, !insn.addr !9413
  %197 = xor i32 %193, %196, !insn.addr !9414
  %198 = xor i32 %197, %185, !insn.addr !9415
  %199 = add nuw nsw i64 %rcx.0.reload, zext (i32 ptrtoint (i32* @global_var_1 to i32) to i64), !insn.addr !9416
  %200 = and i64 %199, 4294967295, !insn.addr !9416
  %201 = trunc i64 %199 to i32, !insn.addr !9417
  %202 = icmp ugt i32 %25, %201
  store i32 %197, i32* %rax.0.in.reg2mem, !insn.addr !9418
  store i64 %200, i64* %rcx.0.reg2mem, !insn.addr !9418
  store i32 %198, i32* %rdx.0.in.reg2mem, !insn.addr !9418
  br i1 %202, label %dec_label_pc_1589f, label %dec_label_pc_15977, !insn.addr !9418

dec_label_pc_15977:                               ; preds = %dec_label_pc_1589f
  %sext8 = mul i64 %rsi.0.reload, 72057594037927936
  %203 = sdiv i64 %sext8, 72057594037927936, !insn.addr !9419
  store i32 %197, i32* %stack_var_-88, align 4, !insn.addr !9420
  %.pre15 = inttoptr i64 %203 to i8*, !insn.addr !9421
  %.pre16 = add i64 %203, ptrtoint (i32* @global_var_1 to i64), !insn.addr !9343
  %.pre18 = inttoptr i64 %.pre16 to i8*, !insn.addr !9343
  %.pre20 = add i64 %203, ptrtoint (i32* @global_var_2 to i64), !insn.addr !9422
  %.pre22 = inttoptr i64 %.pre20 to i8*, !insn.addr !9422
  %.pre24 = add i64 %203, ptrtoint (i8** @global_var_3 to i64), !insn.addr !9423
  %.pre26 = inttoptr i64 %.pre24 to i8*, !insn.addr !9423
  %.pre28 = add i64 %203, ptrtoint (i16* @global_var_4 to i64), !insn.addr !9424
  %.pre30 = inttoptr i64 %.pre28 to i8*, !insn.addr !9424
  %.pre32 = add i64 %203, ptrtoint (i8* @global_var_5 to i64), !insn.addr !9344
  %.pre34 = inttoptr i64 %.pre32 to i8*, !insn.addr !9344
  %.pre36 = add i64 %203, ptrtoint (i8* @global_var_6 to i64), !insn.addr !9425
  %.pre38 = inttoptr i64 %.pre36 to i8*, !insn.addr !9425
  %.pre40 = add i64 %203, ptrtoint (i8** @global_var_7 to i64), !insn.addr !9426
  %.pre42 = inttoptr i64 %.pre40 to i8*, !insn.addr !9426
  store i8* %.pre42, i8** %.pre-phi43.reg2mem, !insn.addr !9427
  store i8* %.pre38, i8** %.pre-phi39.reg2mem, !insn.addr !9427
  store i8* %.pre34, i8** %.pre-phi35.reg2mem, !insn.addr !9427
  store i8* %.pre30, i8** %.pre-phi31.reg2mem, !insn.addr !9427
  store i8* %.pre26, i8** %.pre-phi27.reg2mem, !insn.addr !9427
  store i8* %.pre22, i8** %.pre-phi23.reg2mem, !insn.addr !9427
  store i8* %.pre18, i8** %.pre-phi19.reg2mem, !insn.addr !9427
  store i8* %.pre15, i8** %.pre-phi.reg2mem, !insn.addr !9427
  store i32 %197, i32* %.reg2mem, !insn.addr !9427
  store i32 %198, i32* %stack_var_-84.0.reg2mem, !insn.addr !9427
  store i64 %203, i64* %rsi.1.reg2mem, !insn.addr !9427
  br label %dec_label_pc_15981, !insn.addr !9427

dec_label_pc_15981:                               ; preds = %dec_label_pc_15977, %dec_label_pc_1583c
  %rsi.1.reload = load i64, i64* %rsi.1.reg2mem
  %stack_var_-84.0.reload = load i32, i32* %stack_var_-84.0.reg2mem
  %.reload = load i32, i32* %.reg2mem, !insn.addr !9428
  %.pre-phi.reload = load i8*, i8** %.pre-phi.reg2mem
  %.pre-phi19.reload = load i8*, i8** %.pre-phi19.reg2mem
  %.pre-phi23.reload = load i8*, i8** %.pre-phi23.reg2mem
  %.pre-phi27.reload = load i8*, i8** %.pre-phi27.reg2mem
  %.pre-phi35.reload = load i8*, i8** %.pre-phi35.reg2mem
  %.pre-phi39.reload = load i8*, i8** %.pre-phi39.reg2mem
  %.pre-phi43.reload = load i8*, i8** %.pre-phi43.reg2mem
  %204 = load i32, i32* %stack_var_-104, align 4, !insn.addr !9429
  %205 = xor i32 %204, %.reload, !insn.addr !9428
  store i32 %205, i32* %stack_var_-88, align 4, !insn.addr !9430
  %206 = xor i32 %stack_var_-84.0.reload, %stack_var_-100.0.reload, !insn.addr !9431
  store i32 %83, i32* %stack_var_-104, align 4, !insn.addr !9432
  %207 = lshr i32 %205, ptrtoint (i32** @global_var_18 to i32), !insn.addr !9433
  %208 = trunc i32 %207 to i8, !insn.addr !9421
  store i8 %208, i8* %.pre-phi.reload, align 1, !insn.addr !9421
  store i8 %61, i8* %.pre-phi19.reload, align 1, !insn.addr !9343
  %209 = load i32, i32* %stack_var_-88, align 4, !insn.addr !9434
  %210 = lshr i32 %209, ptrtoint (i8* @global_var_8 to i32), !insn.addr !9435
  %211 = trunc i32 %210 to i8, !insn.addr !9422
  store i8 %211, i8* %.pre-phi23.reload, align 1, !insn.addr !9422
  %212 = load i32, i32* %stack_var_-88, align 4, !insn.addr !9436
  %213 = trunc i32 %212 to i8, !insn.addr !9423
  store i8 %213, i8* %.pre-phi27.reload, align 1, !insn.addr !9423
  store i8 %62, i8* %.pre-phi35.reload, align 1, !insn.addr !9344
  %214 = lshr i32 %206, ptrtoint (i8* @global_var_8 to i32), !insn.addr !9437
  %215 = trunc i32 %214 to i8, !insn.addr !9425
  store i8 %215, i8* %.pre-phi39.reload, align 1, !insn.addr !9425
  %216 = trunc i32 %206 to i8, !insn.addr !9426
  store i8 %216, i8* %.pre-phi43.reload, align 1, !insn.addr !9426
  %217 = add i64 %rsi.1.reload, ptrtoint (i8* @global_var_8 to i64), !insn.addr !9438
  %218 = icmp eq i64 %54, %217, !insn.addr !9439
  %219 = icmp eq i1 %218, false, !insn.addr !9440
  store i32 %105, i32* %stack_var_-100.0.reg2mem, !insn.addr !9440
  store i64 %217, i64* %rsi.0.reg2mem, !insn.addr !9440
  br i1 %219, label %dec_label_pc_1583c, label %dec_label_pc_159e5, !insn.addr !9440

dec_label_pc_159e5:                               ; preds = %dec_label_pc_15981
  %.pre-phi31.reload = load i8*, i8** %.pre-phi31.reg2mem
  %220 = shl i32 %50, ptrtoint (i8** @global_var_3 to i32), !insn.addr !9441
  %221 = sub i32 0, %220, !insn.addr !9442
  %222 = zext i32 %221 to i64, !insn.addr !9442
  %223 = mul i64 %222, ptrtoint (i32* @global_var_1 to i64), !insn.addr !9443
  %224 = add nsw i64 %3, 4294967288, !insn.addr !9443
  %225 = add i64 %224, %223, !insn.addr !9443
  %sext6 = mul i64 %225, 4294967296
  %226 = sdiv i64 %sext6, 4294967296, !insn.addr !9444
  %.pre = load i32, i32* %24, align 4
  store i32 %.pre, i32* %.reg2mem48, !insn.addr !9445
  store i64 %226, i64* %stack_var_-108.0.reg2mem, !insn.addr !9445
  store i64 %54, i64* %rbx.0.reg2mem, !insn.addr !9445
  br label %dec_label_pc_15a17, !insn.addr !9445

dec_label_pc_15a17:                               ; preds = %dec_label_pc_1577c, %dec_label_pc_159e5
  %rbx.0.reload = load i64, i64* %rbx.0.reg2mem
  %stack_var_-108.0.reload = load i64, i64* %stack_var_-108.0.reg2mem
  %.reload49 = load i32, i32* %.reg2mem48, !insn.addr !9446
  %227 = call i64 @core_encrypt.19(i32* nonnull %stack_var_-88, i32* nonnull %stack_var_-104, i64 %13, i32 %.reload49), !insn.addr !9447
  %228 = load i32, i32* %stack_var_-88, align 4, !insn.addr !9448
  %229 = lshr i32 %228, ptrtoint (i32** @global_var_18 to i32), !insn.addr !9449
  %230 = urem i32 %229, 256
  %231 = zext i32 %230 to i64
  %232 = inttoptr i64 %231 to i32*, !insn.addr !9450
  store i32* %232, i32** %stack_var_-72, align 8, !insn.addr !9450
  %233 = ptrtoint i32** %stack_var_-72 to i64, !insn.addr !9451
  %234 = and i64 %stack_var_-108.0.reload, 4294967295, !insn.addr !9452
  store i64 %rbx.0.reload, i64* %rax.2.reg2mem, !insn.addr !9452
  store i64 %233, i64* %rdx.1.reg2mem, !insn.addr !9452
  br label %dec_label_pc_15a74, !insn.addr !9452

dec_label_pc_15a74:                               ; preds = %dec_label_pc_15a74, %dec_label_pc_15a17
  %rdx.1.reload = load i64, i64* %rdx.1.reg2mem
  %rax.2.reload = load i64, i64* %rax.2.reg2mem
  %235 = inttoptr i64 %rdx.1.reload to i8*, !insn.addr !9453
  %236 = load i8, i8* %235, align 4, !insn.addr !9453
  %237 = inttoptr i64 %rax.2.reload to i8*, !insn.addr !9454
  %238 = load i8, i8* %237, align 1, !insn.addr !9454
  %239 = xor i8 %238, %236, !insn.addr !9454
  store i8 %239, i8* %237, align 1, !insn.addr !9454
  %240 = add i64 %rax.2.reload, ptrtoint (i32* @global_var_1 to i64), !insn.addr !9455
  %241 = add i64 %rdx.1.reload, ptrtoint (i32* @global_var_1 to i64), !insn.addr !9456
  %242 = sub i64 %240, %rbx.0.reload, !insn.addr !9457
  %243 = and i64 %242, 4294967295, !insn.addr !9457
  %244 = icmp ugt i64 %234, %243, !insn.addr !9458
  store i64 %240, i64* %rax.2.reg2mem, !insn.addr !9458
  store i64 %241, i64* %rdx.1.reg2mem, !insn.addr !9458
  store i64 %240, i64* %merge.reg2mem, !insn.addr !9458
  br i1 %244, label %dec_label_pc_15a74, label %dec_label_pc_15a89, !insn.addr !9458

dec_label_pc_15a89:                               ; preds = %dec_label_pc_15a74, %dec_label_pc_15728
  %merge.reload = load i64, i64* %merge.reg2mem
  ret i64 %merge.reload, !insn.addr !9459
}

define i32 @encrypt_multi2(i8* %m2, i32 %type, i8* %buf, i32 %size) local_unnamed_addr {
dec_label_pc_15a8f:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = trunc i64 %0 to i32
  ret i32 %1
}

define i64 @encrypt_multi2.21(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4) local_unnamed_addr {
dec_label_pc_15abf:
  %merge.reg2mem = alloca i64, !insn.addr !9460
  %rdx.0.reg2mem = alloca i64, !insn.addr !9460
  %rax.0.reg2mem = alloca i64, !insn.addr !9460
  %r13.0.reg2mem = alloca i64, !insn.addr !9460
  %stack_var_-120.0.reg2mem = alloca i64, !insn.addr !9460
  %.reg2mem9 = alloca i32, !insn.addr !9460
  %r15.0.reg2mem = alloca i64, !insn.addr !9460
  %rbx.0.reg2mem = alloca i64, !insn.addr !9460
  %.reg2mem = alloca i32, !insn.addr !9460
  %stack_var_-72 = alloca i32*, align 8
  %stack_var_-88 = alloca i32, align 4
  %stack_var_-104 = alloca i32, align 4
  %0 = call i64 @mcount(), !insn.addr !9461
  %1 = call i64 @__readgsqword(i64 40), !insn.addr !9462
  %2 = call i64 @private_data.10(i64 %arg1), !insn.addr !9463
  %3 = icmp eq i64 %2, 0, !insn.addr !9464
  %4 = icmp eq i64 %arg3, 0, !insn.addr !9465
  %or.cond = or i1 %4, %3
  %5 = trunc i64 %arg4 to i32, !insn.addr !9466
  %6 = icmp slt i32 %5, 1
  %or.cond4 = or i1 %6, %or.cond
  store i64 4294967295, i64* %merge.reg2mem, !insn.addr !9467
  br i1 %or.cond4, label %dec_label_pc_15cd4, label %dec_label_pc_15b1a, !insn.addr !9467

dec_label_pc_15b1a:                               ; preds = %dec_label_pc_15abf
  %7 = and i64 %arg4, 4294967295, !insn.addr !9468
  %8 = trunc i64 %arg2 to i32, !insn.addr !9469
  %9 = icmp eq i32 %8, ptrtoint (i32* @global_var_2 to i32), !insn.addr !9469
  %10 = icmp eq i1 %9, false, !insn.addr !9470
  %.v = select i1 %10, i64 60, i64 92
  %11 = add i64 %2, %.v, !insn.addr !9470
  %12 = add i64 %2, ptrtoint (i16* @global_var_4 to i64), !insn.addr !9471
  %13 = inttoptr i64 %12 to i32*, !insn.addr !9471
  %14 = load i32, i32* %13, align 4, !insn.addr !9471
  store i32 %14, i32* %stack_var_-104, align 4, !insn.addr !9472
  %15 = add i64 %2, ptrtoint (i8* @global_var_8 to i64), !insn.addr !9473
  %16 = inttoptr i64 %15 to i32*, !insn.addr !9473
  %17 = load i32, i32* %16, align 4, !insn.addr !9473
  %18 = icmp sgt i32 %5, ptrtoint (i8** @global_var_7 to i32), !insn.addr !9474
  %19 = add i64 %2, 124
  %20 = inttoptr i64 %19 to i32*
  store i32 %14, i32* %.reg2mem9, !insn.addr !9474
  store i64 %arg3, i64* %stack_var_-120.0.reg2mem, !insn.addr !9474
  store i64 %7, i64* %r13.0.reg2mem, !insn.addr !9474
  br i1 %18, label %dec_label_pc_15b85.preheader, label %dec_label_pc_15c55, !insn.addr !9474

dec_label_pc_15b85.preheader:                     ; preds = %dec_label_pc_15b1a
  %21 = lshr i32 %17, ptrtoint (i32** @global_var_18 to i32)
  %22 = trunc i32 %21 to i8
  %23 = lshr i32 %17, ptrtoint (i8* @global_var_10 to i32)
  %24 = trunc i32 %23 to i8
  %25 = lshr i32 %17, ptrtoint (i8* @global_var_8 to i32)
  %26 = trunc i32 %25 to i8
  %27 = trunc i32 %17 to i8
  store i32 %14, i32* %.reg2mem
  store i64 %arg3, i64* %rbx.0.reg2mem
  store i64 %7, i64* %r15.0.reg2mem
  br label %dec_label_pc_15b85

dec_label_pc_15b85:                               ; preds = %dec_label_pc_15b85.dec_label_pc_15b85_crit_edge, %dec_label_pc_15b85.preheader
  %r15.0.reload = load i64, i64* %r15.0.reg2mem
  %rbx.0.reload = load i64, i64* %rbx.0.reg2mem
  %.reload = load i32, i32* %.reg2mem, !insn.addr !9475
  %28 = inttoptr i64 %rbx.0.reload to i8*, !insn.addr !9476
  %29 = load i8, i8* %28, align 1, !insn.addr !9476
  %30 = zext i8 %29 to i32, !insn.addr !9477
  %31 = shl i32 %30, ptrtoint (i32** @global_var_18 to i32), !insn.addr !9477
  %32 = add i64 %rbx.0.reload, ptrtoint (i32* @global_var_1 to i64), !insn.addr !9478
  %33 = inttoptr i64 %32 to i8*, !insn.addr !9478
  %34 = load i8, i8* %33, align 1, !insn.addr !9478
  %35 = zext i8 %34 to i32, !insn.addr !9479
  %36 = shl i32 %35, ptrtoint (i8* @global_var_10 to i32), !insn.addr !9479
  %37 = or i32 %36, %31, !insn.addr !9480
  %38 = add i64 %rbx.0.reload, ptrtoint (i8** @global_var_3 to i64), !insn.addr !9481
  %39 = inttoptr i64 %38 to i8*, !insn.addr !9481
  %40 = load i8, i8* %39, align 1, !insn.addr !9481
  %41 = zext i8 %40 to i32, !insn.addr !9482
  %42 = or i32 %37, %41, !insn.addr !9482
  %43 = add i64 %rbx.0.reload, ptrtoint (i32* @global_var_2 to i64), !insn.addr !9483
  %44 = inttoptr i64 %43 to i8*, !insn.addr !9483
  %45 = load i8, i8* %44, align 1, !insn.addr !9483
  %46 = zext i8 %45 to i32, !insn.addr !9484
  %47 = shl i32 %46, ptrtoint (i8* @global_var_8 to i32), !insn.addr !9484
  %48 = or i32 %42, %47, !insn.addr !9485
  %49 = xor i32 %48, %.reload, !insn.addr !9475
  store i32 %49, i32* %stack_var_-88, align 4, !insn.addr !9486
  %50 = load i32, i32* %20, align 4, !insn.addr !9487
  %51 = call i64 @core_encrypt.19(i32* nonnull %stack_var_-104, i32* nonnull %stack_var_-88, i64 %11, i32 %50), !insn.addr !9488
  %52 = load i32, i32* %stack_var_-104, align 4, !insn.addr !9489
  %53 = lshr i32 %52, ptrtoint (i32** @global_var_18 to i32), !insn.addr !9490
  %54 = trunc i32 %53 to i8, !insn.addr !9491
  store i8 %54, i8* %28, align 1, !insn.addr !9491
  %55 = lshr i32 %52, ptrtoint (i8* @global_var_10 to i32), !insn.addr !9492
  %56 = trunc i32 %55 to i8, !insn.addr !9493
  store i8 %56, i8* %33, align 1, !insn.addr !9493
  %57 = lshr i32 %52, ptrtoint (i8* @global_var_8 to i32), !insn.addr !9494
  %58 = trunc i32 %57 to i8, !insn.addr !9495
  store i8 %58, i8* %44, align 1, !insn.addr !9495
  %59 = trunc i32 %52 to i8, !insn.addr !9496
  store i8 %59, i8* %39, align 1, !insn.addr !9496
  %60 = add i64 %rbx.0.reload, ptrtoint (i16* @global_var_4 to i64), !insn.addr !9497
  %61 = inttoptr i64 %60 to i8*, !insn.addr !9497
  store i8 %22, i8* %61, align 1, !insn.addr !9497
  %62 = add i64 %rbx.0.reload, ptrtoint (i8* @global_var_5 to i64), !insn.addr !9498
  %63 = inttoptr i64 %62 to i8*, !insn.addr !9498
  store i8 %24, i8* %63, align 1, !insn.addr !9498
  %64 = add i64 %rbx.0.reload, ptrtoint (i8* @global_var_6 to i64), !insn.addr !9499
  %65 = inttoptr i64 %64 to i8*, !insn.addr !9499
  store i8 %26, i8* %65, align 1, !insn.addr !9499
  %66 = add i64 %rbx.0.reload, ptrtoint (i8** @global_var_7 to i64), !insn.addr !9500
  %67 = inttoptr i64 %66 to i8*, !insn.addr !9500
  store i8 %27, i8* %67, align 1, !insn.addr !9500
  %68 = sub nsw i64 %r15.0.reload, zext (i32 ptrtoint (i8* @global_var_8 to i32) to i64), !insn.addr !9501
  %69 = trunc i64 %68 to i32, !insn.addr !9502
  %70 = icmp sgt i32 %69, ptrtoint (i8** @global_var_7 to i32), !insn.addr !9502
  br i1 %70, label %dec_label_pc_15b85.dec_label_pc_15b85_crit_edge, label %dec_label_pc_15c36, !insn.addr !9502

dec_label_pc_15b85.dec_label_pc_15b85_crit_edge:  ; preds = %dec_label_pc_15b85
  %71 = and i64 %68, 4294967295, !insn.addr !9501
  %72 = add i64 %rbx.0.reload, ptrtoint (i8* @global_var_8 to i64), !insn.addr !9503
  %.pre = load i32, i32* %stack_var_-104, align 4
  store i32 %.pre, i32* %.reg2mem
  store i64 %72, i64* %rbx.0.reg2mem
  store i64 %71, i64* %r15.0.reg2mem
  br label %dec_label_pc_15b85

dec_label_pc_15c36:                               ; preds = %dec_label_pc_15b85
  %73 = sub nsw i64 %7, zext (i32 ptrtoint (i8* @global_var_8 to i32) to i64), !insn.addr !9504
  %74 = trunc i64 %73 to i32, !insn.addr !9505
  %75 = lshr i32 %74, ptrtoint (i8** @global_var_3 to i32), !insn.addr !9506
  %76 = zext i32 %75 to i64, !insn.addr !9507
  %77 = mul i64 %76, ptrtoint (i8* @global_var_8 to i64), !insn.addr !9508
  %78 = add i64 %arg3, ptrtoint (i8* @global_var_8 to i64), !insn.addr !9508
  %79 = add i64 %78, %77, !insn.addr !9508
  %80 = and i64 %73, zext (i32 ptrtoint (i8** @global_var_7 to i32) to i64), !insn.addr !9509
  %.pre5 = load i32, i32* %stack_var_-104, align 4
  store i32 %.pre5, i32* %.reg2mem9, !insn.addr !9510
  store i64 %79, i64* %stack_var_-120.0.reg2mem, !insn.addr !9510
  store i64 %80, i64* %r13.0.reg2mem, !insn.addr !9510
  br label %dec_label_pc_15c55, !insn.addr !9510

dec_label_pc_15c55:                               ; preds = %dec_label_pc_15b1a, %dec_label_pc_15c36
  %r13.0.reload = load i64, i64* %r13.0.reg2mem
  %stack_var_-120.0.reload = load i64, i64* %stack_var_-120.0.reg2mem
  %.reload10 = load i32, i32* %.reg2mem9, !insn.addr !9511
  store i32 %.reload10, i32* %stack_var_-88, align 4, !insn.addr !9512
  %81 = load i32, i32* %20, align 4, !insn.addr !9513
  %82 = call i64 @core_encrypt.19(i32* nonnull %stack_var_-104, i32* nonnull %stack_var_-88, i64 %11, i32 %81), !insn.addr !9514
  %83 = load i32, i32* %stack_var_-104, align 4, !insn.addr !9515
  %84 = lshr i32 %83, ptrtoint (i32** @global_var_18 to i32), !insn.addr !9516
  %85 = urem i32 %84, 256
  %86 = zext i32 %85 to i64
  %87 = inttoptr i64 %86 to i32*, !insn.addr !9517
  store i32* %87, i32** %stack_var_-72, align 8, !insn.addr !9517
  %88 = ptrtoint i32** %stack_var_-72 to i64, !insn.addr !9518
  store i64 %stack_var_-120.0.reload, i64* %rax.0.reg2mem, !insn.addr !9519
  store i64 %88, i64* %rdx.0.reg2mem, !insn.addr !9519
  br label %dec_label_pc_15cbe, !insn.addr !9519

dec_label_pc_15cbe:                               ; preds = %dec_label_pc_15cbe, %dec_label_pc_15c55
  %rdx.0.reload = load i64, i64* %rdx.0.reg2mem
  %rax.0.reload = load i64, i64* %rax.0.reg2mem
  %89 = inttoptr i64 %rdx.0.reload to i8*, !insn.addr !9520
  %90 = load i8, i8* %89, align 4, !insn.addr !9520
  %91 = inttoptr i64 %rax.0.reload to i8*, !insn.addr !9521
  %92 = load i8, i8* %91, align 1, !insn.addr !9521
  %93 = xor i8 %92, %90, !insn.addr !9521
  store i8 %93, i8* %91, align 1, !insn.addr !9521
  %94 = add i64 %rax.0.reload, ptrtoint (i32* @global_var_1 to i64), !insn.addr !9522
  %95 = add i64 %rdx.0.reload, ptrtoint (i32* @global_var_1 to i64), !insn.addr !9523
  %96 = sub i64 %94, %stack_var_-120.0.reload, !insn.addr !9524
  %97 = and i64 %96, 4294967295, !insn.addr !9524
  %98 = icmp sgt i64 %r13.0.reload, %97, !insn.addr !9525
  store i64 %94, i64* %rax.0.reg2mem, !insn.addr !9525
  store i64 %95, i64* %rdx.0.reg2mem, !insn.addr !9525
  store i64 %94, i64* %merge.reg2mem, !insn.addr !9525
  br i1 %98, label %dec_label_pc_15cbe, label %dec_label_pc_15cd4, !insn.addr !9525

dec_label_pc_15cd4:                               ; preds = %dec_label_pc_15cbe, %dec_label_pc_15abf
  %merge.reload = load i64, i64* %merge.reg2mem
  ret i64 %merge.reload, !insn.addr !9526
}

define void @core_schedule(i64 %work, i64 %skey, i64 %dkey) local_unnamed_addr {
dec_label_pc_15cdc:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = call i64 @__decompiler_undefined_function_0()
  %2 = add i64 %1, 184, !insn.addr !9527
  %3 = and i64 %2, 4294967295, !insn.addr !9527
  %4 = add nsw i64 %3, -117, !insn.addr !9528
  %5 = inttoptr i64 %4 to i8*, !insn.addr !9528
  %6 = load i8, i8* %5, align 1, !insn.addr !9528
  %7 = trunc i64 %0 to i8, !insn.addr !9528
  %8 = add i8 %6, %7, !insn.addr !9528
  %9 = icmp ult i8 %8, %6, !insn.addr !9528
  store i8 %8, i8* %5, align 1, !insn.addr !9528
  %10 = zext i1 %9 to i64, !insn.addr !9529
  %11 = add i64 %1, 221, !insn.addr !9529
  %12 = add i64 %11, %10, !insn.addr !9529
  %13 = urem i64 %12, 256, !insn.addr !9529
  %14 = and i64 %2, 4294967040, !insn.addr !9529
  %15 = or i64 %13, %14, !insn.addr !9529
  %16 = inttoptr i64 %15 to i8*, !insn.addr !9530
  %17 = load i8, i8* %16, align 1, !insn.addr !9530
  %18 = icmp eq i8 %17, 0, !insn.addr !9531
  br i1 %18, label %dec_label_pc_15cf6, label %dec_label_pc_15cf1, !insn.addr !9532

dec_label_pc_15cf1:                               ; preds = %dec_label_pc_15cdc
  %19 = call i64 @__stack_chk_fail(), !insn.addr !9533
  br label %dec_label_pc_15cf6, !insn.addr !9533

dec_label_pc_15cf6:                               ; preds = %dec_label_pc_15cf1, %dec_label_pc_15cdc
  ret void, !insn.addr !9534
}

define i64 @core_schedule.22(i64 %arg1, i64 %arg2, i64 %arg3) local_unnamed_addr {
dec_label_pc_15d0c:
  %0 = call i64 @__decompiler_undefined_function_0()
  %stack_var_-184 = alloca i32, align 4
  %stack_var_-168 = alloca i64, align 8
  %stack_var_-152 = alloca i32, align 4
  %stack_var_-136 = alloca i64, align 8
  %stack_var_-120 = alloca i32, align 4
  %stack_var_-104 = alloca i64, align 8
  %stack_var_-88 = alloca i32, align 4
  %stack_var_-72 = alloca i64, align 8
  %1 = call i64 @mcount(), !insn.addr !9535
  %2 = call i64 @core_pi1.15(i64* nonnull %stack_var_-72), !insn.addr !9536
  %3 = trunc i64 %0 to i32
  %4 = bitcast i32* %stack_var_-88 to i64*, !insn.addr !9537
  %5 = call i64 @core_pi2.16(i64* nonnull %4, i64* nonnull %stack_var_-72, i32 %3), !insn.addr !9537
  %6 = load i32, i32* %stack_var_-88, align 4, !insn.addr !9538
  %7 = inttoptr i64 %arg1 to i32*, !insn.addr !9539
  store i32 %6, i32* %7, align 4, !insn.addr !9539
  %8 = add i64 %arg2, ptrtoint (i16* @global_var_4 to i64), !insn.addr !9540
  %9 = inttoptr i64 %8 to i32*, !insn.addr !9540
  %10 = load i32, i32* %9, align 4, !insn.addr !9540
  %11 = zext i32 %10 to i64, !insn.addr !9540
  %12 = ptrtoint i32* %stack_var_-88 to i64, !insn.addr !9541
  %13 = ptrtoint i64* %stack_var_-104 to i64, !insn.addr !9542
  %14 = call i64 @core_pi3.17(i64 %13, i64 %12, i64 %11), !insn.addr !9543
  %15 = add i64 %arg1, ptrtoint (i16* @global_var_4 to i64), !insn.addr !9544
  %16 = inttoptr i64 %15 to i32*, !insn.addr !9544
  %17 = add i64 %arg2, ptrtoint ([4 x i8]* @global_var_c to i64), !insn.addr !9545
  %18 = inttoptr i64 %17 to i32*, !insn.addr !9545
  %19 = load i32, i32* %18, align 4, !insn.addr !9545
  %20 = ptrtoint i32* %stack_var_-120 to i64, !insn.addr !9546
  %21 = call i64 @core_pi4.18(i64 %20, i64 %13, i32 %19), !insn.addr !9547
  %22 = load i32, i32* %stack_var_-120, align 4, !insn.addr !9548
  %23 = add i64 %arg1, ptrtoint (i8* @global_var_8 to i64), !insn.addr !9549
  %24 = inttoptr i64 %23 to i32*, !insn.addr !9549
  store i32 %22, i32* %24, align 4, !insn.addr !9549
  %25 = call i64 @core_pi1.15(i64* nonnull %stack_var_-136), !insn.addr !9550
  %26 = add i64 %arg1, ptrtoint ([4 x i8]* @global_var_c to i64), !insn.addr !9551
  %27 = inttoptr i64 %26 to i32*, !insn.addr !9551
  %28 = add i64 %arg2, ptrtoint (i8* @global_var_10 to i64), !insn.addr !9552
  %29 = inttoptr i64 %28 to i32*, !insn.addr !9552
  %30 = load i32, i32* %29, align 4, !insn.addr !9552
  %31 = bitcast i32* %stack_var_-152 to i64*, !insn.addr !9553
  %32 = call i64 @core_pi2.16(i64* nonnull %31, i64* nonnull %stack_var_-136, i32 %30), !insn.addr !9553
  %33 = load i32, i32* %stack_var_-152, align 4, !insn.addr !9554
  %34 = add i64 %arg1, ptrtoint (i8* @global_var_10 to i64), !insn.addr !9555
  %35 = inttoptr i64 %34 to i32*, !insn.addr !9555
  store i32 %33, i32* %35, align 4, !insn.addr !9555
  %36 = add i64 %arg2, ptrtoint (i32** @global_var_14 to i64), !insn.addr !9556
  %37 = inttoptr i64 %36 to i32*, !insn.addr !9556
  %38 = load i32, i32* %37, align 4, !insn.addr !9556
  %39 = zext i32 %38 to i64, !insn.addr !9556
  %40 = ptrtoint i32* %stack_var_-152 to i64, !insn.addr !9557
  %41 = ptrtoint i64* %stack_var_-168 to i64, !insn.addr !9558
  %42 = call i64 @core_pi3.17(i64 %41, i64 %40, i64 %39), !insn.addr !9559
  %43 = add i64 %arg1, ptrtoint (i32** @global_var_14 to i64), !insn.addr !9560
  %44 = inttoptr i64 %43 to i32*, !insn.addr !9560
  %45 = add i64 %arg2, ptrtoint (i32** @global_var_1c to i64), !insn.addr !9561
  %46 = inttoptr i64 %45 to i32*, !insn.addr !9561
  %47 = load i32, i32* %46, align 4, !insn.addr !9561
  %48 = ptrtoint i32* %stack_var_-184 to i64, !insn.addr !9562
  %49 = call i64 @core_pi4.18(i64 %48, i64 %41, i32 %47), !insn.addr !9563
  %50 = load i32, i32* %stack_var_-184, align 4, !insn.addr !9564
  %51 = zext i32 %50 to i64, !insn.addr !9564
  %52 = add i64 %arg1, ptrtoint (i32** @global_var_18 to i64), !insn.addr !9565
  %53 = inttoptr i64 %52 to i32*, !insn.addr !9565
  store i32 %50, i32* %53, align 4, !insn.addr !9565
  ret i64 %51, !insn.addr !9565
}

define i32 @set_scramble_key_multi2(i8* %m2, i8* %val) local_unnamed_addr {
dec_label_pc_15e0e:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = call i64 @__decompiler_undefined_function_0()
  %2 = add i64 %1, -192, !insn.addr !9566
  %3 = inttoptr i64 %2 to i64*, !insn.addr !9567
  %4 = call i64 @core_pi1.15(i64* %3), !insn.addr !9567
  %5 = add i64 %1, -188, !insn.addr !9568
  %6 = inttoptr i64 %5 to i32*, !insn.addr !9568
  %7 = load i32, i32* %6, align 4, !insn.addr !9568
  %8 = add i64 %0, ptrtoint (i32** @global_var_1c to i64), !insn.addr !9569
  %9 = inttoptr i64 %8 to i32*, !insn.addr !9569
  store i32 %7, i32* %9, align 4, !insn.addr !9569
  ret i32 %7, !insn.addr !9570
}

define i64 @set_scramble_key_multi2.23(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_15e3e:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = call i64 @mcount(), !insn.addr !9571
  %2 = call i64 @private_data.10(i64 %arg1), !insn.addr !9572
  %3 = icmp ne i64 %2, 0, !insn.addr !9573
  %4 = icmp eq i64 %arg2, 0, !insn.addr !9574
  %5 = icmp eq i1 %4, false, !insn.addr !9575
  %or.cond = icmp eq i1 %5, %3
  br i1 %or.cond, label %dec_label_pc_15e69, label %dec_label_pc_15e5f, !insn.addr !9576

dec_label_pc_15e5f:                               ; preds = %dec_label_pc_15e3e
  ret i64 4294967295, !insn.addr !9577

dec_label_pc_15e69:                               ; preds = %dec_label_pc_15e3e
  %6 = trunc i64 %0 to i32
  %7 = add i64 %arg2, ptrtoint (i8** @global_var_3 to i64), !insn.addr !9578
  %8 = inttoptr i64 %7 to i8*, !insn.addr !9578
  %9 = load i8, i8* %8, align 1, !insn.addr !9578
  %10 = urem i32 %6, 256, !insn.addr !9579
  %11 = shl i32 %10, ptrtoint (i32** @global_var_18 to i32), !insn.addr !9579
  %12 = zext i8 %9 to i32, !insn.addr !9580
  %13 = or i32 %11, %12, !insn.addr !9580
  %14 = add i64 %arg2, ptrtoint (i32* @global_var_1 to i64), !insn.addr !9581
  %15 = inttoptr i64 %14 to i8*, !insn.addr !9581
  %16 = load i8, i8* %15, align 1, !insn.addr !9581
  %17 = zext i8 %16 to i32, !insn.addr !9582
  %18 = shl i32 %17, ptrtoint (i8* @global_var_10 to i32), !insn.addr !9582
  %19 = or i32 %13, %18, !insn.addr !9583
  %20 = add i64 %arg2, ptrtoint (i32* @global_var_2 to i64), !insn.addr !9584
  %21 = inttoptr i64 %20 to i8*, !insn.addr !9584
  %22 = load i8, i8* %21, align 1, !insn.addr !9584
  %23 = zext i8 %22 to i32, !insn.addr !9585
  %24 = shl i32 %23, ptrtoint (i8* @global_var_8 to i32), !insn.addr !9585
  %25 = or i32 %19, %24, !insn.addr !9586
  %26 = add i64 %2, 44, !insn.addr !9587
  %27 = inttoptr i64 %26 to i32*, !insn.addr !9587
  store i32 %25, i32* %27, align 4, !insn.addr !9587
  %28 = add i64 %arg2, ptrtoint (i16* @global_var_4 to i64), !insn.addr !9588
  %29 = add i64 %arg2, add (i64 ptrtoint (i16* @global_var_4 to i64), i64 ptrtoint (i8** @global_var_3 to i64)), !insn.addr !9589
  %30 = inttoptr i64 %29 to i8*, !insn.addr !9589
  %31 = load i8, i8* %30, align 1, !insn.addr !9589
  %32 = inttoptr i64 %28 to i8*, !insn.addr !9590
  %33 = load i8, i8* %32, align 1, !insn.addr !9590
  %34 = zext i8 %33 to i32, !insn.addr !9591
  %35 = shl i32 %34, ptrtoint (i32** @global_var_18 to i32), !insn.addr !9591
  %36 = zext i8 %31 to i32, !insn.addr !9592
  %37 = or i32 %35, %36, !insn.addr !9592
  %38 = add i64 %arg2, add (i64 ptrtoint (i16* @global_var_4 to i64), i64 ptrtoint (i32* @global_var_1 to i64)), !insn.addr !9593
  %39 = inttoptr i64 %38 to i8*, !insn.addr !9593
  %40 = load i8, i8* %39, align 1, !insn.addr !9593
  %41 = zext i8 %40 to i32, !insn.addr !9594
  %42 = shl i32 %41, ptrtoint (i8* @global_var_10 to i32), !insn.addr !9594
  %43 = or i32 %37, %42, !insn.addr !9595
  %44 = add i64 %arg2, add (i64 ptrtoint (i16* @global_var_4 to i64), i64 ptrtoint (i32* @global_var_2 to i64)), !insn.addr !9596
  %45 = inttoptr i64 %44 to i8*, !insn.addr !9596
  %46 = load i8, i8* %45, align 1, !insn.addr !9596
  %47 = zext i8 %46 to i32, !insn.addr !9597
  %48 = shl i32 %47, ptrtoint (i8* @global_var_8 to i32), !insn.addr !9597
  %49 = or i32 %43, %48, !insn.addr !9598
  %50 = add i64 %2, 48, !insn.addr !9599
  %51 = inttoptr i64 %50 to i32*, !insn.addr !9599
  store i32 %49, i32* %51, align 4, !insn.addr !9599
  %52 = add i64 %arg2, ptrtoint (i8* @global_var_8 to i64), !insn.addr !9600
  %53 = add i64 %arg2, add (i64 ptrtoint (i8* @global_var_8 to i64), i64 ptrtoint (i8** @global_var_3 to i64)), !insn.addr !9601
  %54 = inttoptr i64 %53 to i8*, !insn.addr !9601
  %55 = load i8, i8* %54, align 1, !insn.addr !9601
  %56 = inttoptr i64 %52 to i8*, !insn.addr !9602
  %57 = load i8, i8* %56, align 1, !insn.addr !9602
  %58 = zext i8 %57 to i32, !insn.addr !9603
  %59 = shl i32 %58, ptrtoint (i32** @global_var_18 to i32), !insn.addr !9603
  %60 = zext i8 %55 to i32, !insn.addr !9604
  %61 = or i32 %59, %60, !insn.addr !9604
  %62 = add i64 %arg2, add (i64 ptrtoint (i8* @global_var_8 to i64), i64 ptrtoint (i32* @global_var_1 to i64)), !insn.addr !9605
  %63 = inttoptr i64 %62 to i8*, !insn.addr !9605
  %64 = load i8, i8* %63, align 1, !insn.addr !9605
  %65 = zext i8 %64 to i32, !insn.addr !9606
  %66 = shl i32 %65, ptrtoint (i8* @global_var_10 to i32), !insn.addr !9606
  %67 = or i32 %61, %66, !insn.addr !9607
  %68 = add i64 %arg2, add (i64 ptrtoint (i8* @global_var_8 to i64), i64 ptrtoint (i32* @global_var_2 to i64)), !insn.addr !9608
  %69 = inttoptr i64 %68 to i8*, !insn.addr !9608
  %70 = load i8, i8* %69, align 1, !insn.addr !9608
  %71 = zext i8 %70 to i32, !insn.addr !9609
  %72 = shl i32 %71, ptrtoint (i8* @global_var_8 to i32), !insn.addr !9609
  %73 = or i32 %67, %72, !insn.addr !9610
  %74 = add i64 %2, 52, !insn.addr !9611
  %75 = inttoptr i64 %74 to i32*, !insn.addr !9611
  store i32 %73, i32* %75, align 4, !insn.addr !9611
  %76 = add i64 %arg2, ptrtoint ([4 x i8]* @global_var_c to i64), !insn.addr !9612
  %77 = add i64 %arg2, add (i64 ptrtoint ([4 x i8]* @global_var_c to i64), i64 ptrtoint (i8** @global_var_3 to i64)), !insn.addr !9613
  %78 = inttoptr i64 %77 to i8*, !insn.addr !9613
  %79 = load i8, i8* %78, align 1, !insn.addr !9613
  %80 = inttoptr i64 %76 to i8*, !insn.addr !9614
  %81 = load i8, i8* %80, align 1, !insn.addr !9614
  %82 = zext i8 %81 to i32, !insn.addr !9615
  %83 = shl i32 %82, ptrtoint (i32** @global_var_18 to i32), !insn.addr !9615
  %84 = zext i8 %79 to i32, !insn.addr !9616
  %85 = or i32 %83, %84, !insn.addr !9616
  %86 = add i64 %arg2, add (i64 ptrtoint ([4 x i8]* @global_var_c to i64), i64 ptrtoint (i32* @global_var_1 to i64)), !insn.addr !9617
  %87 = inttoptr i64 %86 to i8*, !insn.addr !9617
  %88 = load i8, i8* %87, align 1, !insn.addr !9617
  %89 = zext i8 %88 to i32, !insn.addr !9618
  %90 = shl i32 %89, ptrtoint (i8* @global_var_10 to i32), !insn.addr !9618
  %91 = or i32 %85, %90, !insn.addr !9619
  %92 = add i64 %arg2, add (i64 ptrtoint ([4 x i8]* @global_var_c to i64), i64 ptrtoint (i32* @global_var_2 to i64)), !insn.addr !9620
  %93 = inttoptr i64 %92 to i8*, !insn.addr !9620
  %94 = load i8, i8* %93, align 1, !insn.addr !9620
  %95 = zext i8 %94 to i32, !insn.addr !9621
  %96 = shl i32 %95, ptrtoint (i8* @global_var_8 to i32), !insn.addr !9621
  %97 = or i32 %91, %96, !insn.addr !9622
  %98 = zext i32 %97 to i64, !insn.addr !9622
  %99 = add i64 %2, 56, !insn.addr !9623
  %100 = inttoptr i64 %99 to i32*, !insn.addr !9623
  store i32 %97, i32* %100, align 4, !insn.addr !9623
  ret i64 %98, !insn.addr !9624
}

define i32 @clear_scramble_key_multi2(i8* %m2) local_unnamed_addr {
dec_label_pc_15f14:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = call i64 @__decompiler_undefined_function_0()
  %2 = add i64 %1, 44, !insn.addr !9625
  %3 = and i64 %2, 4294967295, !insn.addr !9625
  %4 = add i64 %1, 60, !insn.addr !9626
  %5 = call i64 @core_schedule.22(i64 %4, i64 %0, i64 %3), !insn.addr !9627
  %6 = add i64 %1, 52, !insn.addr !9628
  %7 = add i64 %1, 92, !insn.addr !9629
  %8 = call i64 @core_schedule.22(i64 %7, i64 %0, i64 %6), !insn.addr !9630
  %9 = add i64 %1, 128, !insn.addr !9631
  %10 = inttoptr i64 %9 to i32*, !insn.addr !9631
  %11 = load i32, i32* %10, align 4, !insn.addr !9631
  %12 = or i32 %11, 4, !insn.addr !9631
  store i32 %12, i32* %10, align 4, !insn.addr !9631
  ret i32 0, !insn.addr !9632
}

define i64 @clear_scramble_key_multi2.24() local_unnamed_addr {
dec_label_pc_15f44:
  %rdi.0.reg2mem = alloca i64, !insn.addr !9633
  %rsi.0.reg2mem = alloca i64, !insn.addr !9633
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = call i64 @mcount(), !insn.addr !9634
  %2 = call i64 @private_data.10(i64 %0), !insn.addr !9635
  %3 = add i64 %2, 44, !insn.addr !9636
  %4 = inttoptr i64 %3 to i64*, !insn.addr !9637
  store i64 0, i64* %4, align 8, !insn.addr !9637
  %5 = add i64 %2, 52, !insn.addr !9638
  %6 = inttoptr i64 %5 to i64*, !insn.addr !9638
  store i64 0, i64* %6, align 8, !insn.addr !9638
  %7 = add i64 %2, 60, !insn.addr !9639
  %8 = and i64 %7, 4
  %9 = icmp eq i64 %8, 0, !insn.addr !9640
  store i64 8, i64* %rsi.0.reg2mem, !insn.addr !9641
  store i64 %7, i64* %rdi.0.reg2mem, !insn.addr !9641
  br i1 %9, label %dec_label_pc_15f8f, label %dec_label_pc_15f86, !insn.addr !9641

dec_label_pc_15f86:                               ; preds = %dec_label_pc_15f44
  %10 = inttoptr i64 %7 to i32*, !insn.addr !9642
  store i32 0, i32* %10, align 4, !insn.addr !9642
  %11 = add i64 %2, 64, !insn.addr !9643
  store i64 7, i64* %rsi.0.reg2mem, !insn.addr !9644
  store i64 %11, i64* %rdi.0.reg2mem, !insn.addr !9644
  br label %dec_label_pc_15f8f, !insn.addr !9644

dec_label_pc_15f8f:                               ; preds = %dec_label_pc_15f86, %dec_label_pc_15f44
  %rdi.0.reload = load i64, i64* %rdi.0.reg2mem
  %rsi.0.reload = load i64, i64* %rsi.0.reg2mem
  %12 = inttoptr i64 %rdi.0.reload to i8*, !insn.addr !9645
  call void @__asm_rep_stosq_memset(i8* %12, i64 0, i64 %rsi.0.reload), !insn.addr !9645
  ret i64 0, !insn.addr !9645
}

define i64 @create_multi2() local_unnamed_addr {
dec_label_pc_15f9c:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = add i64 %0, 116, !insn.addr !9646
  %2 = urem i64 %1, 256, !insn.addr !9646
  %3 = and i64 %0, -256, !insn.addr !9646
  %4 = or i64 %2, %3, !insn.addr !9646
  ret i64 %4, !insn.addr !9646
}

define i64 @function_15f9f(i64 %arg1, i64 %arg2, i64 %arg3) local_unnamed_addr {
dec_label_pc_15f9f:
  %rdi.0.reg2mem = alloca i64, !insn.addr !9647
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = trunc i64 %0 to i32, !insn.addr !9647
  %2 = inttoptr i64 %arg1 to i32*, !insn.addr !9647
  store i32 %1, i32* %2, align 4, !insn.addr !9647
  %3 = add i64 %arg1, ptrtoint (i16* @global_var_4 to i64), !insn.addr !9648
  %4 = trunc i64 %arg2 to i32
  %5 = and i32 %4, ptrtoint (i32* @global_var_2 to i32), !insn.addr !9649
  %6 = icmp eq i32 %5, 0, !insn.addr !9649
  store i64 %3, i64* %rdi.0.reg2mem, !insn.addr !9650
  br i1 %6, label %dec_label_pc_15fb5, label %dec_label_pc_15fae, !insn.addr !9650

dec_label_pc_15fae:                               ; preds = %dec_label_pc_15f9f
  %7 = trunc i64 %0 to i16, !insn.addr !9651
  %8 = inttoptr i64 %3 to i16*, !insn.addr !9651
  store i16 %7, i16* %8, align 2, !insn.addr !9651
  %9 = add i64 %arg1, add (i64 ptrtoint (i16* @global_var_4 to i64), i64 ptrtoint (i32* @global_var_2 to i64)), !insn.addr !9652
  store i64 %9, i64* %rdi.0.reg2mem, !insn.addr !9652
  br label %dec_label_pc_15fb5, !insn.addr !9652

dec_label_pc_15fb5:                               ; preds = %dec_label_pc_15fae, %dec_label_pc_15f9f
  %10 = and i32 %4, ptrtoint (i32* @global_var_1 to i32), !insn.addr !9653
  %11 = icmp eq i32 %10, 0, !insn.addr !9653
  br i1 %11, label %dec_label_pc_15fbe, label %dec_label_pc_15fbc, !insn.addr !9654

dec_label_pc_15fbc:                               ; preds = %dec_label_pc_15fb5
  %rdi.0.reload = load i64, i64* %rdi.0.reg2mem
  %12 = trunc i64 %0 to i8, !insn.addr !9655
  %13 = inttoptr i64 %rdi.0.reload to i8*, !insn.addr !9655
  store i8 %12, i8* %13, align 1, !insn.addr !9655
  br label %dec_label_pc_15fbe, !insn.addr !9655

dec_label_pc_15fbe:                               ; preds = %dec_label_pc_15fbc, %dec_label_pc_15fb5
  %14 = add i64 %arg3, 128, !insn.addr !9656
  %15 = inttoptr i64 %14 to i32*, !insn.addr !9656
  %16 = load i32, i32* %15, align 4, !insn.addr !9656
  %17 = and i32 %16, -5, !insn.addr !9656
  store i32 %17, i32* %15, align 4, !insn.addr !9656
  ret i64 0, !insn.addr !9657
}

define i64 @create_multi2.302() local_unnamed_addr {
dec_label_pc_15fcc:
  %rdi.0.reg2mem = alloca i64, !insn.addr !9658
  %rdx.0.reg2mem = alloca i64, !insn.addr !9658
  %r14.0.reg2mem = alloca i64, !insn.addr !9658
  %0 = call i1 @__decompiler_undefined_function_2()
  %1 = call i64 @mcount(), !insn.addr !9659
  %2 = load i64, i64* inttoptr (i64 257320 to i64*), align 8, !insn.addr !9660
  %3 = call i64 @kmem_cache_alloc_notrace(i64 %2, i64* bitcast (i32** @global_var_20 to i64*)), !insn.addr !9661
  %4 = call i64 @slab_buffer_size(i64 %2), !insn.addr !9662
  %5 = load i32, i32* @global_var_3ecb0, align 4, !insn.addr !9663
  %6 = icmp eq i32 %5, 0, !insn.addr !9663
  br i1 %6, label %dec_label_pc_1604b, label %dec_label_pc_1601e, !insn.addr !9664

dec_label_pc_1601e:                               ; preds = %dec_label_pc_15fcc
  %7 = load i64, i64* @global_var_3ecc8, align 8, !insn.addr !9665
  %8 = icmp eq i64 %7, 0, !insn.addr !9666
  store i64 %7, i64* %r14.0.reg2mem, !insn.addr !9667
  br i1 %8, label %dec_label_pc_1604b, label %dec_label_pc_1602a, !insn.addr !9667

dec_label_pc_1602a:                               ; preds = %dec_label_pc_1601e, %dec_label_pc_1602a
  %r14.0.reload = load i64, i64* %r14.0.reg2mem
  %9 = add i64 %r14.0.reload, ptrtoint (i8* @global_var_8 to i64), !insn.addr !9668
  %10 = inttoptr i64 %9 to i64*, !insn.addr !9669
  %11 = load i64, i64* %10, align 8, !insn.addr !9669
  %12 = icmp eq i64 %11, 0, !insn.addr !9669
  %13 = icmp eq i1 %12, false, !insn.addr !9670
  store i64 %9, i64* %r14.0.reg2mem, !insn.addr !9670
  br i1 %13, label %dec_label_pc_1602a, label %dec_label_pc_1604b, !insn.addr !9670

dec_label_pc_1604b:                               ; preds = %dec_label_pc_1602a, %dec_label_pc_1601e, %dec_label_pc_15fcc
  %14 = trunc i64 %3 to i8, !insn.addr !9671
  %15 = and i8 %14, ptrtoint (i16* @global_var_4 to i8), !insn.addr !9671
  %16 = icmp eq i8 %15, 0, !insn.addr !9671
  store i64 212, i64* %rdx.0.reg2mem, !insn.addr !9672
  store i64 %3, i64* %rdi.0.reg2mem, !insn.addr !9672
  br i1 %16, label %dec_label_pc_16072, label %dec_label_pc_16067, !insn.addr !9672

dec_label_pc_16067:                               ; preds = %dec_label_pc_1604b
  %17 = inttoptr i64 %3 to i32*, !insn.addr !9673
  store i32 0, i32* %17, align 4, !insn.addr !9673
  %18 = add i64 %3, ptrtoint (i16* @global_var_4 to i64), !insn.addr !9674
  store i64 208, i64* %rdx.0.reg2mem, !insn.addr !9675
  store i64 %18, i64* %rdi.0.reg2mem, !insn.addr !9675
  br label %dec_label_pc_16072, !insn.addr !9675

dec_label_pc_16072:                               ; preds = %dec_label_pc_16067, %dec_label_pc_1604b
  %rdi.0.reload = load i64, i64* %rdi.0.reg2mem
  %rdx.0.reload = load i64, i64* %rdx.0.reg2mem
  %19 = trunc i64 %rdx.0.reload to i32, !insn.addr !9676
  %20 = lshr i32 %19, ptrtoint (i8** @global_var_3 to i32), !insn.addr !9677
  %21 = zext i32 %20 to i64, !insn.addr !9678
  %22 = inttoptr i64 %rdi.0.reload to i8*, !insn.addr !9679
  call void @__asm_rep_stosq_memset(i8* %22, i64 0, i64 %21), !insn.addr !9679
  %23 = and i64 %rdx.0.reload, 4
  %24 = icmp eq i64 %23, 0, !insn.addr !9680
  br i1 %24, label %dec_label_pc_160a0, label %dec_label_pc_16081, !insn.addr !9681

dec_label_pc_16081:                               ; preds = %dec_label_pc_16072
  %25 = select i1 %0, i64 -8, i64 ptrtoint (i8* @global_var_8 to i64), !insn.addr !9679
  %26 = mul i64 %25, %21, !insn.addr !9679
  %27 = add i64 %26, %rdi.0.reload, !insn.addr !9679
  %28 = inttoptr i64 %27 to i32*, !insn.addr !9682
  store i32 0, i32* %28, align 4, !insn.addr !9682
  br label %dec_label_pc_160a0, !insn.addr !9683

dec_label_pc_160a0:                               ; preds = %dec_label_pc_16081, %dec_label_pc_16072
  %29 = add i64 %3, 132, !insn.addr !9684
  %30 = inttoptr i64 %29 to i64*, !insn.addr !9685
  store i64 %3, i64* %30, align 8, !insn.addr !9685
  %31 = inttoptr i64 %3 to i32*, !insn.addr !9686
  store i32 ptrtoint (i32* @global_var_1 to i32), i32* %31, align 4, !insn.addr !9686
  %32 = add i64 %3, 124, !insn.addr !9687
  %33 = inttoptr i64 %32 to i32*, !insn.addr !9687
  store i32 ptrtoint (i16* @global_var_4 to i32), i32* %33, align 4, !insn.addr !9687
  %34 = add i64 %3, 140, !insn.addr !9688
  %35 = inttoptr i64 %34 to i64*, !insn.addr !9688
  store i64 0, i64* %35, align 8, !insn.addr !9688
  %36 = add i64 %3, 148, !insn.addr !9689
  %37 = inttoptr i64 %36 to i64*, !insn.addr !9689
  store i64 0, i64* %37, align 8, !insn.addr !9689
  %38 = add i64 %3, 156, !insn.addr !9690
  %39 = inttoptr i64 %38 to i64*, !insn.addr !9690
  store i64 0, i64* %39, align 8, !insn.addr !9690
  %40 = add i64 %3, 164, !insn.addr !9691
  %41 = inttoptr i64 %40 to i64*, !insn.addr !9691
  store i64 0, i64* %41, align 8, !insn.addr !9691
  %42 = add i64 %3, 172, !insn.addr !9692
  %43 = inttoptr i64 %42 to i64*, !insn.addr !9692
  store i64 0, i64* %43, align 8, !insn.addr !9692
  ret i64 %29, !insn.addr !9692
}

define void @release_multi2(i8* %m2) local_unnamed_addr {
dec_label_pc_160e9:
  %0 = call i64 @__decompiler_undefined_function_0()
  %rax = alloca i64, align 8
  %1 = call i64 @__decompiler_undefined_function_0()
  %2 = bitcast i64* %rax to i8*
  %3 = trunc i64 %1 to i8
  %4 = mul i8 %3, 2, !insn.addr !9693
  %5 = inttoptr i64 %1 to i8*, !insn.addr !9693
  store i8 %4, i8* %5, align 1, !insn.addr !9693
  %6 = load i64, i64* %rax, align 8, !insn.addr !9694
  %7 = add i64 %6, -57, !insn.addr !9694
  %8 = inttoptr i64 %7 to i8*, !insn.addr !9694
  %9 = load i8, i8* %8, align 1, !insn.addr !9694
  %10 = trunc i64 %0 to i8, !insn.addr !9694
  %11 = add i8 %9, %10, !insn.addr !9694
  store i8 %11, i8* %8, align 1, !insn.addr !9694
  %12 = load i8, i8* %2, align 8, !insn.addr !9695
  %13 = load i64, i64* %rax, align 8
  %14 = trunc i64 %13 to i8, !insn.addr !9695
  %15 = add i8 %12, %14, !insn.addr !9695
  %16 = inttoptr i64 %13 to i8*, !insn.addr !9695
  store i8 %15, i8* %16, align 1, !insn.addr !9695
  %17 = load i64, i64* %rax, align 8, !insn.addr !9696
  %18 = add i64 %17, -57, !insn.addr !9696
  %19 = inttoptr i64 %18 to i8*, !insn.addr !9696
  %20 = load i8, i8* %19, align 1, !insn.addr !9696
  %21 = add i8 %20, %10, !insn.addr !9696
  store i8 %21, i8* %19, align 1, !insn.addr !9696
  %22 = load i8, i8* %2, align 8, !insn.addr !9697
  %23 = load i64, i64* %rax, align 8
  %24 = trunc i64 %23 to i8, !insn.addr !9697
  %25 = add i8 %22, %24, !insn.addr !9697
  %26 = inttoptr i64 %23 to i8*, !insn.addr !9697
  store i8 %25, i8* %26, align 1, !insn.addr !9697
  %27 = load i8, i8* %2, align 8, !insn.addr !9698
  %28 = load i64, i64* %rax, align 8
  %29 = trunc i64 %28 to i8, !insn.addr !9698
  %30 = add i8 %27, %29, !insn.addr !9698
  %31 = inttoptr i64 %28 to i8*, !insn.addr !9698
  store i8 %30, i8* %31, align 1, !insn.addr !9698
  %32 = load i64, i64* %rax, align 8, !insn.addr !9699
  %33 = add i64 %32, 72, !insn.addr !9699
  %34 = inttoptr i64 %33 to i64*, !insn.addr !9699
  store i64 0, i64* %34, align 8, !insn.addr !9699
  ret void, !insn.addr !9700
}

define i64 @function_1610d(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_1610d:
  %0 = call i64 @__decompiler_undefined_function_0()
  ret i64 %0, !insn.addr !9701
}

define i64 @release_multi2.25() local_unnamed_addr {
dec_label_pc_16119:
  %0 = call i64 @__decompiler_undefined_function_0()
  ret i64 %0, !insn.addr !9702
}

define void @TS_Reset(i8* %Multi2_Lib) local_unnamed_addr {
dec_label_pc_16120:
  %0 = ptrtoint i8* %Multi2_Lib to i64
  %1 = call i64 @private_data.10(i64 %0), !insn.addr !9703
  %2 = icmp eq i64 %1, 0, !insn.addr !9704
  br i1 %2, label %dec_label_pc_1613f, label %dec_label_pc_1612c, !insn.addr !9705

dec_label_pc_1612c:                               ; preds = %dec_label_pc_16120
  %3 = inttoptr i64 %1 to i32*, !insn.addr !9706
  %4 = load i32, i32* %3, align 4, !insn.addr !9706
  %5 = sub i32 %4, ptrtoint (i32* @global_var_1 to i32), !insn.addr !9707
  store i32 %5, i32* %3, align 4, !insn.addr !9708
  %6 = icmp eq i32 %5, 0, !insn.addr !9709
  %7 = icmp eq i1 %6, false, !insn.addr !9710
  br i1 %7, label %dec_label_pc_1613f, label %dec_label_pc_16137, !insn.addr !9710

dec_label_pc_16137:                               ; preds = %dec_label_pc_1612c
  %8 = call i64 @kfree(i64 %1), !insn.addr !9711
  br label %dec_label_pc_1613f, !insn.addr !9711

dec_label_pc_1613f:                               ; preds = %dec_label_pc_16137, %dec_label_pc_1612c, %dec_label_pc_16120
  ret void, !insn.addr !9712
}

define void @TS_Destroy(i8* %Multi2_Lib) local_unnamed_addr {
dec_label_pc_1614e:
  ret void, !insn.addr !9713
}

define i64 @TS_Reset.339(i64 %arg1) local_unnamed_addr {
dec_label_pc_16150:
  %0 = call i64 @mcount(), !insn.addr !9714
  %1 = icmp eq i64 %arg1, 0, !insn.addr !9715
  br i1 %1, label %dec_label_pc_16177, label %dec_label_pc_16163, !insn.addr !9716

dec_label_pc_16163:                               ; preds = %dec_label_pc_16150
  %2 = add i64 %arg1, ptrtoint (i8* @global_var_8 to i64), !insn.addr !9717
  %3 = inttoptr i64 %2 to i8*, !insn.addr !9717
  %4 = load i8, i8* %3, align 1, !insn.addr !9717
  %5 = icmp eq i8 %4, 0, !insn.addr !9717
  %6 = icmp eq i1 %5, false, !insn.addr !9718
  br i1 %6, label %dec_label_pc_16177, label %dec_label_pc_1616c, !insn.addr !9718

dec_label_pc_1616c:                               ; preds = %dec_label_pc_16163
  store i8 0, i8* %3, align 1, !insn.addr !9719
  br label %dec_label_pc_16177, !insn.addr !9719

dec_label_pc_16177:                               ; preds = %dec_label_pc_1616c, %dec_label_pc_16163, %dec_label_pc_16150
  ret i64 %0, !insn.addr !9720
}

define i64 @TS_Destroy.387(i64 %arg1) local_unnamed_addr {
dec_label_pc_1617e:
  %0 = call i64 @__decompiler_undefined_function_0()
  ret i64 %0, !insn.addr !9721
}

define i8* @TS_GetBcasPtr(i8* %Multi2_Lib) local_unnamed_addr {
dec_label_pc_16184:
  %0 = call i64 @mcount(), !insn.addr !9722
  %1 = inttoptr i64 %0 to i8*, !insn.addr !9723
  ret i8* %1, !insn.addr !9723
}

define void @TS_SetBcasCardID(i8* %Multi2_Lib, i8* %buffer, i32 %size) local_unnamed_addr {
dec_label_pc_1619f:
  ret void, !insn.addr !9724
}

define i64 @TS_GetBcasPtr.152(i64 %arg1) local_unnamed_addr {
dec_label_pc_161b4:
  %0 = call i64 @__decompiler_undefined_function_0()
  ret i64 %0, !insn.addr !9725
}

define void @TS_EnableProcProgramID(i8* %Multi2_Lib, i8 %enable) local_unnamed_addr {
dec_label_pc_161b5:
  %0 = call i64 @mcount(), !insn.addr !9726
  ret void, !insn.addr !9727
}

define i64 @TS_SetBcasCardID.521(i64 %arg1) local_unnamed_addr {
dec_label_pc_161cf:
  %0 = call i64 @mcount(), !insn.addr !9728
  ret i64 %arg1, !insn.addr !9729
}

define void @TS_SetProgramID(i8* %Multi2_Lib, i16 %program_id) local_unnamed_addr {
dec_label_pc_161e1:
  ret void, !insn.addr !9730
}

define i64 @TS_EnableProcProgramID.349(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_161e5:
  %0 = call i64 @mcount(), !insn.addr !9731
  ret i64 %arg1, !insn.addr !9732
}

define void @TS_GetTsProgramID(i8* %Multi2_Lib, i8 %index, i16* %program_id) local_unnamed_addr {
dec_label_pc_161fa:
  ret void, !insn.addr !9733
}

define i64 @TS_SetProgramID.507(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_16211:
  %0 = call i64 @mcount(), !insn.addr !9734
  ret i64 %arg1, !insn.addr !9735
}

define i64 @TS_GetTsProgramID.314() local_unnamed_addr {
dec_label_pc_1622a:
  %0 = call i64 @__decompiler_undefined_function_0()
  ret i64 %0, !insn.addr !9736
}

define i8 @TS_GetTsProgramID_Ex(i8* %Multi2_Lib, i8* %program_id) local_unnamed_addr {
dec_label_pc_16231:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = call i64 @__decompiler_undefined_function_0()
  %2 = trunc i64 %1 to i16, !insn.addr !9737
  %3 = call i8 @__asm_in(i16 %2), !insn.addr !9737
  %4 = add i64 %0, -18, !insn.addr !9738
  %5 = inttoptr i64 %4 to i16*, !insn.addr !9738
  %6 = load i16, i16* %5, align 2, !insn.addr !9738
  %7 = trunc i16 %6 to i8, !insn.addr !9738
  ret i8 %7, !insn.addr !9738
}

define void @TS_SetIsStreamScramble(i8* %Multi2_Lib, i8 %isStreamScramble) local_unnamed_addr {
dec_label_pc_16259:
  ret void
}

define i64 @TS_GetTsProgramID_Ex.220(i64 %arg1) local_unnamed_addr {
dec_label_pc_16261:
  %0 = call i64 @mcount(), !insn.addr !9739
  ret i64 %arg1, !insn.addr !9740
}

define void @TS_GetIsStreamScramble(i8* %Multi2_Lib, i8* %isStreamScramble) local_unnamed_addr {
dec_label_pc_16273:
  ret void, !insn.addr !9741
}

define i64 @TS_SetIsStreamScramble.576(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_16289:
  %0 = call i64 @__decompiler_undefined_function_0()
  ret i64 %0, !insn.addr !9742
}

define void @TS_SetBCASCardExist(i8* %Multi2_Lib, i8 %isExist) local_unnamed_addr {
dec_label_pc_1628c:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = call i64 @__decompiler_undefined_function_0()
  %2 = call i32 @__asm_in.624(i32 232), !insn.addr !9743
  %3 = sext i32 %2 to i64, !insn.addr !9743
  %4 = inttoptr i64 %0 to i32*, !insn.addr !9744
  store i32 %2, i32* %4, align 4, !insn.addr !9744
  %5 = add nsw i64 %3, -119, !insn.addr !9745
  %6 = inttoptr i64 %5 to i8*, !insn.addr !9745
  %7 = load i8, i8* %6, align 1, !insn.addr !9745
  %8 = trunc i64 %1 to i8, !insn.addr !9745
  %9 = add i8 %7, %8, !insn.addr !9745
  store i8 %9, i8* %6, align 1, !insn.addr !9745
  ret void, !insn.addr !9746
}

define i64 @TS_GetIsStreamScramble.145(i64 %arg1) local_unnamed_addr {
dec_label_pc_162a3:
  %0 = call i64 @__decompiler_undefined_function_0()
  ret i64 %0, !insn.addr !9747
}

define void @TS_GetResetMulti2LibFlag(i8* %Multi2_Lib, i8* %isNeedResetMulti2Lib) local_unnamed_addr {
dec_label_pc_162a9:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = call i64 @__decompiler_undefined_function_0()
  %2 = call i64 @__decompiler_undefined_function_0()
  %3 = trunc i64 %2 to i32, !insn.addr !9748
  %4 = inttoptr i64 %0 to i32*, !insn.addr !9748
  store i32 %3, i32* %4, align 4, !insn.addr !9748
  %5 = add i64 %2, -119, !insn.addr !9749
  %6 = inttoptr i64 %5 to i8*, !insn.addr !9749
  %7 = load i8, i8* %6, align 1, !insn.addr !9749
  %8 = trunc i64 %1 to i8, !insn.addr !9749
  %9 = add i8 %7, %8, !insn.addr !9749
  store i8 %9, i8* %6, align 1, !insn.addr !9749
  ret void, !insn.addr !9750
}

define i64 @TS_SetBCASCardExist.306(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_162bc:
  %0 = call i64 @__decompiler_undefined_function_0()
  ret i64 %0, !insn.addr !9751
}

define i8 @TS_GetDigitalCopyControlDescriptor(i8* %Multi2_Lib, i16 %pid, i8* %dataBuffer, i16* %length) local_unnamed_addr {
dec_label_pc_162c2:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = ptrtoint i16* %length to i64
  %2 = trunc i64 %0 to i32, !insn.addr !9752
  %3 = bitcast i8* %dataBuffer to i32*, !insn.addr !9752
  store i32 %2, i32* %3, align 4, !insn.addr !9752
  %4 = add i64 %0, -119, !insn.addr !9753
  %5 = inttoptr i64 %4 to i8*, !insn.addr !9753
  %6 = load i8, i8* %5, align 1, !insn.addr !9753
  %7 = trunc i64 %1 to i8, !insn.addr !9753
  %8 = add i8 %6, %7, !insn.addr !9753
  store i8 %8, i8* %5, align 1, !insn.addr !9753
  %9 = trunc i64 %0 to i8, !insn.addr !9754
  ret i8 %9, !insn.addr !9754
}

define i64 @TS_GetResetMulti2LibFlag.575(i64 %arg1) local_unnamed_addr {
dec_label_pc_162d9:
  %0 = call i64 @mcount(), !insn.addr !9755
  ret i64 %arg1, !insn.addr !9756
}

define i64 @TS_GetDigitalCopyControlDescriptor.424(i64 %arg1) local_unnamed_addr {
dec_label_pc_162f2:
  %0 = call i64 @mcount(), !insn.addr !9757
  ret i64 %arg1, !insn.addr !9758
}

define i8 @TS_GetContentAvailabilityDescriptor(i8* %Multi2_Lib, i16 %pid, i8* %dataBuffer, i16* %length) local_unnamed_addr {
dec_label_pc_16303:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = icmp eq i8* %Multi2_Lib, null, !insn.addr !9759
  %2 = trunc i64 %0 to i32, !insn.addr !9760
  %3 = icmp slt i32 %2, 0, !insn.addr !9760
  %or.cond = or i1 %1, %3
  %4 = trunc i64 %0 to i16
  %storemerge2 = select i1 %or.cond, i16 0, i16 %4
  %storemerge = select i1 %or.cond, i8 0, i8 ptrtoint (i32* @global_var_1 to i8)
  store i16 %storemerge2, i16* %length, align 2
  ret i8 %storemerge, !insn.addr !9761
}

define i64 @TS_GetContentAvailabilityDescriptor.549(i64 %arg1) local_unnamed_addr {
dec_label_pc_16333:
  %0 = call i64 @mcount(), !insn.addr !9762
  ret i64 %arg1, !insn.addr !9763
}

define i8 @TS_GetProgramNumber_ByPID(i8* %Multi2_Lib, i16 %pid, i32* %program_number) local_unnamed_addr {
dec_label_pc_16344:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = call i64 @__decompiler_undefined_function_0()
  %2 = inttoptr i64 %0 to i16*, !insn.addr !9764
  %3 = icmp eq i8* %Multi2_Lib, null, !insn.addr !9765
  %4 = trunc i64 %1 to i32, !insn.addr !9766
  %5 = icmp slt i32 %4, 0, !insn.addr !9766
  %or.cond = or i1 %3, %5
  %6 = trunc i64 %1 to i16
  %storemerge2 = select i1 %or.cond, i16 0, i16 %6
  %storemerge = select i1 %or.cond, i8 0, i8 ptrtoint (i32* @global_var_1 to i8)
  store i16 %storemerge2, i16* %2, align 2
  ret i8 %storemerge, !insn.addr !9767
}

define void @TS_SetBCASResponse(i8* %buffer, i32 %size, i8 %bInitCmd, i8* %bcas) local_unnamed_addr {
dec_label_pc_16370:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = add i64 %0, -55, !insn.addr !9768
  %2 = inttoptr i64 %1 to i8*, !insn.addr !9768
  %3 = load i8, i8* %2, align 1, !insn.addr !9768
  %4 = trunc i64 %0 to i8, !insn.addr !9768
  %5 = or i8 %3, %4, !insn.addr !9768
  store i8 %5, i8* %2, align 1, !insn.addr !9768
  ret void, !insn.addr !9769
}

define i64 @TS_GetProgramNumber_ByPID.279(i64 %arg1, i64 %arg2, i64 %arg3) local_unnamed_addr {
dec_label_pc_16374:
  %0 = call i64 @mcount(), !insn.addr !9770
  %1 = inttoptr i64 %arg3 to i32*, !insn.addr !9771
  store i32 0, i32* %1, align 4, !insn.addr !9771
  ret i64 0, !insn.addr !9772
}

define i64 @TS_SetBCASResponse.389(i64 %arg1, i32 %arg2, i8 %arg3, i64 %arg4) local_unnamed_addr {
dec_label_pc_163a0:
  %0 = sext i32 %arg2 to i64
  %1 = call i64 @mcount(), !insn.addr !9773
  %2 = and i8 %arg3, ptrtoint (i32* @global_var_1 to i8), !insn.addr !9774
  %3 = icmp eq i8 %2, 0, !insn.addr !9774
  %4 = icmp eq i1 %3, false, !insn.addr !9775
  br i1 %4, label %dec_label_pc_16467, label %dec_label_pc_163d9, !insn.addr !9775

dec_label_pc_163d9:                               ; preds = %dec_label_pc_163a0
  %5 = add i64 %arg4, 606, !insn.addr !9776
  %6 = and i64 %0, 4294967295, !insn.addr !9777
  %7 = call i64 @memcpy(i64 %5, i64 %arg1, i64 %6, i64 %arg4), !insn.addr !9778
  %8 = add i64 %arg4, 1120, !insn.addr !9779
  %9 = inttoptr i64 %8 to i32*, !insn.addr !9779
  store i32 %arg2, i32* %9, align 4, !insn.addr !9779
  %10 = add i64 %arg4, 610, !insn.addr !9780
  %11 = inttoptr i64 %10 to i8*, !insn.addr !9780
  %12 = load i8, i8* %11, align 1, !insn.addr !9780
  %13 = zext i8 %12 to i64, !insn.addr !9781
  %14 = mul i64 %13, 256, !insn.addr !9781
  %15 = add i64 %arg4, 611, !insn.addr !9782
  %16 = inttoptr i64 %15 to i8*, !insn.addr !9782
  %17 = load i8, i8* %16, align 1, !insn.addr !9782
  %18 = zext i8 %17 to i64, !insn.addr !9783
  %19 = or i64 %14, %18, !insn.addr !9783
  %20 = icmp eq i64 %19, 8448, !insn.addr !9784
  br i1 %20, label %dec_label_pc_16430, label %dec_label_pc_16424, !insn.addr !9785

dec_label_pc_16424:                               ; preds = %dec_label_pc_163d9
  %21 = trunc i64 %19 to i16, !insn.addr !9786
  %22 = icmp ne i16 %21, -24318, !insn.addr !9786
  %23 = icmp eq i16 %21, -24313, !insn.addr !9787
  %24 = icmp eq i1 %23, false, !insn.addr !9788
  %or.cond = icmp eq i1 %22, %24
  br i1 %or.cond, label %dec_label_pc_1643c, label %dec_label_pc_16430, !insn.addr !9789

dec_label_pc_16430:                               ; preds = %dec_label_pc_16424, %dec_label_pc_163d9
  %25 = add i64 %arg4, 604, !insn.addr !9790
  %26 = inttoptr i64 %25 to i8*, !insn.addr !9790
  store i8 0, i8* %26, align 1, !insn.addr !9790
  ret i64 %19, !insn.addr !9791

dec_label_pc_1643c:                               ; preds = %dec_label_pc_16424
  switch i16 %21, label %dec_label_pc_1644e [
    i16 2048, label %dec_label_pc_16457
    i16 1024, label %dec_label_pc_16457
    i16 512, label %dec_label_pc_16457
  ]

dec_label_pc_1644e:                               ; preds = %dec_label_pc_1643c
  %27 = add i64 %arg4, 605, !insn.addr !9792
  %28 = inttoptr i64 %27 to i8*, !insn.addr !9792
  store i8 0, i8* %28, align 1, !insn.addr !9792
  br label %dec_label_pc_1645e, !insn.addr !9793

dec_label_pc_16457:                               ; preds = %dec_label_pc_1643c, %dec_label_pc_1643c, %dec_label_pc_1643c
  %29 = add i64 %arg4, 605, !insn.addr !9794
  %30 = inttoptr i64 %29 to i8*, !insn.addr !9794
  store i8 ptrtoint (i32* @global_var_1 to i8), i8* %30, align 1, !insn.addr !9794
  br label %dec_label_pc_1645e, !insn.addr !9794

dec_label_pc_1645e:                               ; preds = %dec_label_pc_16457, %dec_label_pc_1644e
  %31 = add i64 %arg4, 604, !insn.addr !9795
  %32 = inttoptr i64 %31 to i8*, !insn.addr !9795
  store i8 ptrtoint (i32* @global_var_1 to i8), i8* %32, align 1, !insn.addr !9795
  ret i64 %19, !insn.addr !9796

dec_label_pc_16467:                               ; preds = %dec_label_pc_163a0
  %33 = add i64 %arg4, 86, !insn.addr !9797
  %34 = and i64 %0, 4294967295, !insn.addr !9798
  %35 = call i64 @memcpy(i64 %33, i64 %arg1, i64 %34, i64 %arg4), !insn.addr !9799
  %36 = add i64 %arg4, 600, !insn.addr !9800
  %37 = inttoptr i64 %36 to i32*, !insn.addr !9800
  store i32 %arg2, i32* %37, align 4, !insn.addr !9800
  %38 = add i64 %arg4, 40, !insn.addr !9801
  %39 = add i64 %arg4, 102, !insn.addr !9802
  %40 = inttoptr i64 %39 to i64*, !insn.addr !9803
  %41 = load i64, i64* %40, align 8, !insn.addr !9803
  %42 = inttoptr i64 %38 to i64*, !insn.addr !9804
  store i64 %41, i64* %42, align 8, !insn.addr !9804
  %43 = add i64 %arg4, 110, !insn.addr !9805
  %44 = inttoptr i64 %43 to i64*, !insn.addr !9805
  %45 = load i64, i64* %44, align 8, !insn.addr !9805
  %46 = add i64 %arg4, 48, !insn.addr !9806
  %47 = inttoptr i64 %46 to i64*, !insn.addr !9806
  store i64 %45, i64* %47, align 8, !insn.addr !9806
  ret i64 %38, !insn.addr !9807
}

define i32 @TS_Process(i8* %Multi2_Lib, i8* %pbuf, i32 %size) local_unnamed_addr {
dec_label_pc_16499:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = call i64 @__decompiler_undefined_function_0()
  %2 = sext i32 %size to i64
  %3 = add i64 %1, ptrtoint (i8* @global_var_10 to i64), !insn.addr !9808
  %4 = inttoptr i64 %3 to i64*, !insn.addr !9808
  %5 = add i64 %2, ptrtoint (i32** @global_var_18 to i64), !insn.addr !9809
  %6 = inttoptr i64 %5 to i64*, !insn.addr !9809
  %7 = load i64, i64* %6, align 8, !insn.addr !9809
  %8 = add i64 %1, ptrtoint (i32** @global_var_18 to i64), !insn.addr !9810
  %9 = inttoptr i64 %8 to i64*, !insn.addr !9810
  store i64 %7, i64* %9, align 8, !insn.addr !9810
  %10 = add i64 %0, 134, !insn.addr !9811
  %11 = inttoptr i64 %10 to i64*, !insn.addr !9811
  %12 = load i64, i64* %11, align 8, !insn.addr !9811
  %13 = add i64 %0, 72, !insn.addr !9812
  %14 = inttoptr i64 %13 to i64*, !insn.addr !9812
  store i64 %12, i64* %14, align 8, !insn.addr !9812
  %15 = add i64 %0, 89, !insn.addr !9813
  %16 = inttoptr i64 %15 to i8*, !insn.addr !9813
  %17 = load i8, i8* %16, align 1, !insn.addr !9813
  %18 = add i64 %0, 88, !insn.addr !9814
  %19 = inttoptr i64 %18 to i8*, !insn.addr !9814
  %20 = load i8, i8* %19, align 1, !insn.addr !9814
  %21 = zext i8 %20 to i32, !insn.addr !9815
  %22 = mul i32 %21, 256, !insn.addr !9815
  %23 = zext i8 %17 to i32, !insn.addr !9816
  %24 = or i32 %22, %23, !insn.addr !9816
  %25 = add i64 %0, 80, !insn.addr !9817
  %26 = inttoptr i64 %25 to i32*, !insn.addr !9817
  store i32 %24, i32* %26, align 4, !insn.addr !9817
  %27 = add i64 %0, 84, !insn.addr !9818
  %28 = inttoptr i64 %27 to i8*, !insn.addr !9818
  store i8 ptrtoint (i32* @global_var_1 to i8), i8* %28, align 1, !insn.addr !9818
  ret i32 %24, !insn.addr !9819
}

define i64 @TS_Process.545(i64 %arg1, i64 %arg2, i64 %arg3) local_unnamed_addr {
dec_label_pc_164c9:
  %0 = call i64 @mcount(), !insn.addr !9820
  %1 = and i64 %arg3, 4294967295, !insn.addr !9821
  %2 = add i64 %arg1, ptrtoint (i8* @global_var_8 to i64), !insn.addr !9822
  %3 = inttoptr i64 %2 to i8*, !insn.addr !9822
  store i8 ptrtoint (i32* @global_var_1 to i8), i8* %3, align 1, !insn.addr !9822
  ret i64 %1, !insn.addr !9823
}

define i8* @TS_Init(i8* %DevExt, i32 (i8*, i8*, i32, i8, i8*)* %bcas_callback, i8 %ucTunerNum) local_unnamed_addr {
dec_label_pc_16513:
  %.reg2mem = alloca i32, !insn.addr !9824
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = call i64 @__decompiler_undefined_function_0()
  %2 = call i64 @__decompiler_undefined_function_0()
  %3 = call i64 @__decompiler_undefined_function_0()
  %4 = call i64 @__decompiler_undefined_function_0()
  %5 = add i64 %3, ptrtoint (i8* @global_var_8 to i64), !insn.addr !9824
  %6 = inttoptr i64 %5 to i8*, !insn.addr !9824
  store i8 0, i8* %6, align 1, !insn.addr !9824
  %7 = add i64 %2, -56, !insn.addr !9825
  %8 = inttoptr i64 %7 to i32*, !insn.addr !9825
  %9 = load i32, i32* %8, align 4, !insn.addr !9825
  %10 = trunc i64 %0 to i32, !insn.addr !9826
  %11 = icmp sgt i32 %9, %10, !insn.addr !9826
  store i32 %9, i32* %.reg2mem, !insn.addr !9826
  br i1 %11, label %dec_label_pc_1651e, label %dec_label_pc_16522, !insn.addr !9826

dec_label_pc_1651e:                               ; preds = %dec_label_pc_16513
  store i32 %10, i32* %8, align 4, !insn.addr !9827
  store i32 %10, i32* %.reg2mem, !insn.addr !9827
  br label %dec_label_pc_16522, !insn.addr !9827

dec_label_pc_16522:                               ; preds = %dec_label_pc_16513, %dec_label_pc_1651e
  %.reload = load i32, i32* %.reg2mem, !insn.addr !9828
  %12 = sext i32 %.reload to i64, !insn.addr !9828
  %13 = add i64 %2, -64, !insn.addr !9829
  %14 = inttoptr i64 %13 to i64*, !insn.addr !9829
  %15 = load i64, i64* %14, align 8, !insn.addr !9829
  %16 = call i64 @memcpy(i64 %1, i64 %15, i64 %12, i64 %4), !insn.addr !9830
  %17 = load i32, i32* %8, align 4, !insn.addr !9831
  %18 = zext i32 %17 to i64, !insn.addr !9831
  %19 = inttoptr i64 %18 to i8*, !insn.addr !9832
  ret i8* %19, !insn.addr !9832
}

define i64 @TS_Init.333(i64 %arg1, i64 %arg2, i64 %arg3) local_unnamed_addr {
dec_label_pc_16543:
  %rax.0.reg2mem = alloca i64, !insn.addr !9833
  %0 = call i64 @mcount(), !insn.addr !9834
  %1 = call i64 @create_arib_std_b25.568(), !insn.addr !9835
  %2 = icmp eq i64 %1, 0, !insn.addr !9836
  %3 = trunc i64 %1 to i32, !insn.addr !9837
  %4 = icmp slt i32 %3, 0, !insn.addr !9837
  %or.cond = or i1 %2, %4
  store i64 %1, i64* %rax.0.reg2mem, !insn.addr !9838
  br i1 %or.cond, label %dec_label_pc_165ce, label %dec_label_pc_1658d, !insn.addr !9838

dec_label_pc_1658d:                               ; preds = %dec_label_pc_16543
  %5 = call i64 @create_b_cas_card.211(i64 %arg1, i64 %arg2), !insn.addr !9839
  %6 = icmp eq i64 %5, 0, !insn.addr !9840
  store i64 0, i64* %rax.0.reg2mem, !insn.addr !9841
  br i1 %6, label %dec_label_pc_165ce, label %dec_label_pc_165a0, !insn.addr !9841

dec_label_pc_165a0:                               ; preds = %dec_label_pc_1658d
  %7 = trunc i64 %arg3 to i32, !insn.addr !9842
  %8 = urem i32 %7, 256, !insn.addr !9843
  %9 = add i64 %5, 380, !insn.addr !9843
  %10 = inttoptr i64 %9 to i32*, !insn.addr !9843
  store i32 %8, i32* %10, align 4, !insn.addr !9843
  ret i64 %1, !insn.addr !9844

dec_label_pc_165ce:                               ; preds = %dec_label_pc_16543, %dec_label_pc_1658d
  %rax.0.reload = load i64, i64* %rax.0.reg2mem
  ret i64 %rax.0.reload, !insn.addr !9845
}

define i32 @rijndaelKeySetupEnc(i32* %rk, i8* %cipherKey, i32 %keyBits, i64 %pTable) local_unnamed_addr {
dec_label_pc_165d0:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = trunc i64 %0 to i8
  %2 = mul i8 %1, 2, !insn.addr !9846
  %3 = inttoptr i64 %0 to i8*, !insn.addr !9846
  store i8 %2, i8* %3, align 1, !insn.addr !9846
  %4 = trunc i64 %0 to i32, !insn.addr !9847
  ret i32 %4, !insn.addr !9847
}

define i64 @rijndaelKeySetupEnc.430(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4) local_unnamed_addr {
dec_label_pc_16600:
  %merge.reg2mem = alloca i64, !insn.addr !9848
  %rdi.1.reg2mem = alloca i64, !insn.addr !9848
  %rdx.1.reg2mem = alloca i64, !insn.addr !9848
  %rdi.0.reg2mem = alloca i64, !insn.addr !9848
  %rdx.0.reg2mem = alloca i64, !insn.addr !9848
  %0 = call i64 @mcount(), !insn.addr !9849
  %1 = add i64 %arg2, ptrtoint (i8** @global_var_3 to i64), !insn.addr !9850
  %2 = inttoptr i64 %1 to i8*, !insn.addr !9850
  %3 = load i8, i8* %2, align 1, !insn.addr !9850
  %4 = trunc i64 %arg2 to i32
  %5 = urem i32 %4, 256, !insn.addr !9851
  %6 = shl i32 %5, ptrtoint (i32** @global_var_18 to i32), !insn.addr !9851
  %7 = zext i8 %3 to i32, !insn.addr !9852
  %8 = xor i32 %6, %7, !insn.addr !9852
  %9 = add i64 %arg2, ptrtoint (i32* @global_var_1 to i64), !insn.addr !9853
  %10 = inttoptr i64 %9 to i8*, !insn.addr !9853
  %11 = load i8, i8* %10, align 1, !insn.addr !9853
  %12 = zext i8 %11 to i32, !insn.addr !9854
  %13 = shl i32 %12, ptrtoint (i8* @global_var_10 to i32), !insn.addr !9854
  %14 = xor i32 %8, %13, !insn.addr !9855
  %15 = add i64 %arg2, ptrtoint (i32* @global_var_2 to i64), !insn.addr !9856
  %16 = inttoptr i64 %15 to i8*, !insn.addr !9856
  %17 = load i8, i8* %16, align 1, !insn.addr !9856
  %18 = zext i8 %17 to i32, !insn.addr !9857
  %19 = shl i32 %18, ptrtoint (i8* @global_var_8 to i32), !insn.addr !9857
  %20 = xor i32 %14, %19, !insn.addr !9858
  %21 = inttoptr i64 %arg1 to i32*, !insn.addr !9859
  store i32 %20, i32* %21, align 4, !insn.addr !9859
  %22 = add i64 %arg2, ptrtoint (i16* @global_var_4 to i64), !insn.addr !9860
  %23 = inttoptr i64 %22 to i8*, !insn.addr !9860
  %24 = load i8, i8* %23, align 1, !insn.addr !9860
  %25 = zext i8 %24 to i32, !insn.addr !9861
  %26 = shl i32 %25, ptrtoint (i32** @global_var_18 to i32), !insn.addr !9861
  %27 = add i64 %arg2, ptrtoint (i8* @global_var_5 to i64), !insn.addr !9862
  %28 = inttoptr i64 %27 to i8*, !insn.addr !9862
  %29 = load i8, i8* %28, align 1, !insn.addr !9862
  %30 = zext i8 %29 to i32, !insn.addr !9863
  %31 = shl i32 %30, ptrtoint (i8* @global_var_10 to i32), !insn.addr !9863
  %32 = xor i32 %31, %26, !insn.addr !9864
  %33 = add i64 %arg2, ptrtoint (i8** @global_var_7 to i64), !insn.addr !9865
  %34 = inttoptr i64 %33 to i8*, !insn.addr !9865
  %35 = load i8, i8* %34, align 1, !insn.addr !9865
  %36 = zext i8 %35 to i32, !insn.addr !9866
  %37 = xor i32 %32, %36, !insn.addr !9866
  %38 = add i64 %arg2, ptrtoint (i8* @global_var_6 to i64), !insn.addr !9867
  %39 = inttoptr i64 %38 to i8*, !insn.addr !9867
  %40 = load i8, i8* %39, align 1, !insn.addr !9867
  %41 = zext i8 %40 to i32, !insn.addr !9868
  %42 = shl i32 %41, ptrtoint (i8* @global_var_8 to i32), !insn.addr !9868
  %43 = xor i32 %37, %42, !insn.addr !9869
  %44 = add i64 %arg1, ptrtoint (i16* @global_var_4 to i64), !insn.addr !9870
  %45 = inttoptr i64 %44 to i32*, !insn.addr !9870
  store i32 %43, i32* %45, align 4, !insn.addr !9870
  %46 = add i64 %arg2, ptrtoint (i8* @global_var_8 to i64), !insn.addr !9871
  %47 = inttoptr i64 %46 to i8*, !insn.addr !9871
  %48 = load i8, i8* %47, align 1, !insn.addr !9871
  %49 = zext i8 %48 to i32, !insn.addr !9872
  %50 = shl i32 %49, ptrtoint (i32** @global_var_18 to i32), !insn.addr !9872
  %51 = add i64 %arg2, ptrtoint (i8** @global_var_9 to i64), !insn.addr !9873
  %52 = inttoptr i64 %51 to i8*, !insn.addr !9873
  %53 = load i8, i8* %52, align 1, !insn.addr !9873
  %54 = zext i8 %53 to i32, !insn.addr !9874
  %55 = shl i32 %54, ptrtoint (i8* @global_var_10 to i32), !insn.addr !9874
  %56 = xor i32 %55, %50, !insn.addr !9875
  %57 = add i64 %arg2, ptrtoint (i8** @global_var_b to i64), !insn.addr !9876
  %58 = inttoptr i64 %57 to i8*, !insn.addr !9876
  %59 = load i8, i8* %58, align 1, !insn.addr !9876
  %60 = zext i8 %59 to i32, !insn.addr !9877
  %61 = xor i32 %56, %60, !insn.addr !9877
  %62 = add i64 %arg2, ptrtoint (i8* @global_var_a to i64), !insn.addr !9878
  %63 = inttoptr i64 %62 to i8*, !insn.addr !9878
  %64 = load i8, i8* %63, align 1, !insn.addr !9878
  %65 = zext i8 %64 to i32, !insn.addr !9879
  %66 = shl i32 %65, ptrtoint (i8* @global_var_8 to i32), !insn.addr !9879
  %67 = xor i32 %61, %66, !insn.addr !9880
  %68 = add i64 %arg1, ptrtoint (i8* @global_var_8 to i64), !insn.addr !9881
  %69 = inttoptr i64 %68 to i32*, !insn.addr !9881
  store i32 %67, i32* %69, align 4, !insn.addr !9881
  %70 = add i64 %arg2, ptrtoint ([4 x i8]* @global_var_c to i64), !insn.addr !9882
  %71 = inttoptr i64 %70 to i8*, !insn.addr !9882
  %72 = load i8, i8* %71, align 1, !insn.addr !9882
  %73 = zext i8 %72 to i32, !insn.addr !9883
  %74 = shl i32 %73, ptrtoint (i32** @global_var_18 to i32), !insn.addr !9883
  %75 = add i64 %arg2, ptrtoint ([3 x i8]* @global_var_d to i64), !insn.addr !9884
  %76 = inttoptr i64 %75 to i8*, !insn.addr !9884
  %77 = load i8, i8* %76, align 1, !insn.addr !9884
  %78 = zext i8 %77 to i32, !insn.addr !9885
  %79 = shl i32 %78, ptrtoint (i8* @global_var_10 to i32), !insn.addr !9885
  %80 = xor i32 %79, %74, !insn.addr !9886
  %81 = add i64 %arg2, ptrtoint (i8* @global_var_f to i64), !insn.addr !9887
  %82 = inttoptr i64 %81 to i8*, !insn.addr !9887
  %83 = load i8, i8* %82, align 1, !insn.addr !9887
  %84 = zext i8 %83 to i32, !insn.addr !9888
  %85 = xor i32 %80, %84, !insn.addr !9888
  %86 = add i64 %arg2, ptrtoint (i16** @global_var_e to i64), !insn.addr !9889
  %87 = inttoptr i64 %86 to i8*, !insn.addr !9889
  %88 = load i8, i8* %87, align 1, !insn.addr !9889
  %89 = zext i8 %88 to i32, !insn.addr !9890
  %90 = shl i32 %89, ptrtoint (i8* @global_var_8 to i32), !insn.addr !9890
  %91 = xor i32 %85, %90, !insn.addr !9891
  %92 = add i64 %arg1, ptrtoint ([4 x i8]* @global_var_c to i64), !insn.addr !9892
  %93 = inttoptr i64 %92 to i32*, !insn.addr !9892
  store i32 %91, i32* %93, align 4, !insn.addr !9892
  %94 = trunc i64 %arg3 to i32, !insn.addr !9893
  %95 = icmp eq i32 %94, 128, !insn.addr !9893
  %96 = icmp eq i1 %95, false, !insn.addr !9894
  br i1 %96, label %dec_label_pc_1674d, label %dec_label_pc_166bb, !insn.addr !9894

dec_label_pc_166bb:                               ; preds = %dec_label_pc_16600
  %97 = add i64 %arg4, 40, !insn.addr !9895
  %98 = add i64 %arg4, 4096, !insn.addr !9896
  store i64 %arg4, i64* %rdx.0.reg2mem, !insn.addr !9895
  store i64 %arg1, i64* %rdi.0.reg2mem, !insn.addr !9895
  br label %dec_label_pc_166c2, !insn.addr !9895

dec_label_pc_166c2:                               ; preds = %dec_label_pc_166c2, %dec_label_pc_166bb
  %rdi.0.reload = load i64, i64* %rdi.0.reg2mem
  %rdx.0.reload = load i64, i64* %rdx.0.reg2mem
  %99 = add i64 %rdi.0.reload, 12, !insn.addr !9897
  %100 = inttoptr i64 %99 to i32*, !insn.addr !9897
  %101 = load i32, i32* %100, align 4, !insn.addr !9897
  %102 = add i64 %rdi.0.reload, 16, !insn.addr !9898
  %103 = add i64 %rdx.0.reload, 10240, !insn.addr !9899
  %104 = inttoptr i64 %103 to i32*, !insn.addr !9899
  %105 = load i32, i32* %104, align 4, !insn.addr !9899
  %106 = inttoptr i64 %rdi.0.reload to i32*, !insn.addr !9900
  %107 = load i32, i32* %106, align 4, !insn.addr !9900
  %108 = xor i32 %107, %105, !insn.addr !9900
  %109 = mul i32 %101, 4
  %110 = and i32 %109, 1020
  %111 = zext i32 %110 to i64, !insn.addr !9896
  %112 = add i64 %98, %111, !insn.addr !9896
  %113 = inttoptr i64 %112 to i32*, !insn.addr !9896
  %114 = load i32, i32* %113, align 4, !insn.addr !9896
  %115 = and i32 %114, 65280, !insn.addr !9901
  %116 = xor i32 %108, %115, !insn.addr !9902
  %117 = udiv i32 %101, 16777216, !insn.addr !9903
  %118 = mul i32 %117, 4
  %119 = zext i32 %118 to i64, !insn.addr !9904
  %120 = add i64 %98, %119, !insn.addr !9904
  %121 = inttoptr i64 %120 to i8*, !insn.addr !9904
  %122 = load i8, i8* %121, align 1, !insn.addr !9904
  %123 = zext i8 %122 to i32, !insn.addr !9905
  %124 = xor i32 %116, %123, !insn.addr !9905
  %125 = udiv i32 %101, 16384
  %126 = and i32 %125, 1020
  %127 = zext i32 %126 to i64, !insn.addr !9906
  %128 = add i64 %98, %127, !insn.addr !9906
  %129 = inttoptr i64 %128 to i32*, !insn.addr !9906
  %130 = load i32, i32* %129, align 4, !insn.addr !9906
  %131 = and i32 %130, -16777216, !insn.addr !9907
  %132 = xor i32 %124, %131, !insn.addr !9908
  %133 = udiv i32 %101, 64
  %134 = and i32 %133, 1020
  %135 = zext i32 %134 to i64, !insn.addr !9909
  %136 = add i64 %98, %135, !insn.addr !9909
  %137 = inttoptr i64 %136 to i32*, !insn.addr !9909
  %138 = load i32, i32* %137, align 4, !insn.addr !9909
  %139 = and i32 %138, 16711680, !insn.addr !9910
  %140 = xor i32 %132, %139, !insn.addr !9911
  %141 = inttoptr i64 %102 to i32*, !insn.addr !9912
  store i32 %140, i32* %141, align 4, !insn.addr !9912
  %142 = add i64 %rdi.0.reload, 4, !insn.addr !9913
  %143 = inttoptr i64 %142 to i32*, !insn.addr !9913
  %144 = load i32, i32* %143, align 4, !insn.addr !9913
  %145 = xor i32 %140, %144, !insn.addr !9913
  %146 = add i64 %rdi.0.reload, 20, !insn.addr !9914
  %147 = inttoptr i64 %146 to i32*, !insn.addr !9914
  store i32 %145, i32* %147, align 4, !insn.addr !9914
  %148 = add i64 %rdi.0.reload, 8, !insn.addr !9915
  %149 = inttoptr i64 %148 to i32*, !insn.addr !9915
  %150 = load i32, i32* %149, align 4, !insn.addr !9915
  %151 = xor i32 %150, %145, !insn.addr !9915
  %152 = add i64 %rdi.0.reload, 24, !insn.addr !9916
  %153 = inttoptr i64 %152 to i32*, !insn.addr !9916
  store i32 %151, i32* %153, align 4, !insn.addr !9916
  %154 = load i32, i32* %100, align 4, !insn.addr !9917
  %155 = xor i32 %154, %151, !insn.addr !9917
  %156 = add i64 %rdi.0.reload, 28, !insn.addr !9918
  %157 = inttoptr i64 %156 to i32*, !insn.addr !9918
  store i32 %155, i32* %157, align 4, !insn.addr !9918
  %158 = add i64 %rdx.0.reload, ptrtoint (i16* @global_var_4 to i64), !insn.addr !9919
  %159 = icmp eq i64 %158, %97, !insn.addr !9920
  %160 = icmp eq i1 %159, false, !insn.addr !9921
  store i64 %158, i64* %rdx.0.reg2mem, !insn.addr !9921
  store i64 %102, i64* %rdi.0.reg2mem, !insn.addr !9921
  br i1 %160, label %dec_label_pc_166c2, label %dec_label_pc_16748, !insn.addr !9921

dec_label_pc_16748:                               ; preds = %dec_label_pc_166c2
  %161 = zext i32 %155 to i64, !insn.addr !9917
  ret i64 %161, !insn.addr !9922

dec_label_pc_1674d:                               ; preds = %dec_label_pc_16600
  %162 = add i64 %arg2, ptrtoint (i8* @global_var_10 to i64), !insn.addr !9923
  %163 = inttoptr i64 %162 to i8*, !insn.addr !9923
  %164 = load i8, i8* %163, align 1, !insn.addr !9923
  %165 = zext i8 %164 to i32, !insn.addr !9924
  %166 = shl i32 %165, ptrtoint (i32** @global_var_18 to i32), !insn.addr !9924
  %167 = add i64 %arg2, ptrtoint (i8** @global_var_11 to i64), !insn.addr !9925
  %168 = inttoptr i64 %167 to i8*, !insn.addr !9925
  %169 = load i8, i8* %168, align 1, !insn.addr !9925
  %170 = zext i8 %169 to i32, !insn.addr !9926
  %171 = shl i32 %170, ptrtoint (i8* @global_var_10 to i32), !insn.addr !9926
  %172 = xor i32 %171, %166, !insn.addr !9927
  %173 = add i64 %arg2, ptrtoint (i32** @global_var_13 to i64), !insn.addr !9928
  %174 = inttoptr i64 %173 to i8*, !insn.addr !9928
  %175 = load i8, i8* %174, align 1, !insn.addr !9928
  %176 = zext i8 %175 to i32, !insn.addr !9929
  %177 = xor i32 %172, %176, !insn.addr !9929
  %178 = add i64 %arg2, ptrtoint (i32** @global_var_12 to i64), !insn.addr !9930
  %179 = inttoptr i64 %178 to i8*, !insn.addr !9930
  %180 = load i8, i8* %179, align 1, !insn.addr !9930
  %181 = zext i8 %180 to i32, !insn.addr !9931
  %182 = shl i32 %181, ptrtoint (i8* @global_var_8 to i32), !insn.addr !9931
  %183 = xor i32 %177, %182, !insn.addr !9932
  %184 = add i64 %arg1, ptrtoint (i8* @global_var_10 to i64), !insn.addr !9933
  %185 = inttoptr i64 %184 to i32*, !insn.addr !9933
  store i32 %183, i32* %185, align 4, !insn.addr !9933
  %186 = add i64 %arg2, ptrtoint (i32** @global_var_14 to i64), !insn.addr !9934
  %187 = inttoptr i64 %186 to i8*, !insn.addr !9934
  %188 = load i8, i8* %187, align 1, !insn.addr !9934
  %189 = zext i8 %188 to i32, !insn.addr !9935
  %190 = shl i32 %189, ptrtoint (i32** @global_var_18 to i32), !insn.addr !9935
  %191 = add i64 %arg2, ptrtoint (i8** @global_var_15 to i64), !insn.addr !9936
  %192 = inttoptr i64 %191 to i8*, !insn.addr !9936
  %193 = load i8, i8* %192, align 1, !insn.addr !9936
  %194 = zext i8 %193 to i32, !insn.addr !9937
  %195 = shl i32 %194, ptrtoint (i8* @global_var_10 to i32), !insn.addr !9937
  %196 = xor i32 %195, %190, !insn.addr !9938
  %197 = add i64 %arg2, ptrtoint (i8** @global_var_17 to i64), !insn.addr !9939
  %198 = inttoptr i64 %197 to i8*, !insn.addr !9939
  %199 = load i8, i8* %198, align 1, !insn.addr !9939
  %200 = zext i8 %199 to i32, !insn.addr !9940
  %201 = xor i32 %196, %200, !insn.addr !9940
  %202 = add i64 %arg2, ptrtoint (i32** @global_var_16 to i64), !insn.addr !9941
  %203 = inttoptr i64 %202 to i8*, !insn.addr !9941
  %204 = load i8, i8* %203, align 1, !insn.addr !9941
  %205 = zext i8 %204 to i32, !insn.addr !9942
  %206 = shl i32 %205, ptrtoint (i8* @global_var_8 to i32), !insn.addr !9942
  %207 = xor i32 %201, %206, !insn.addr !9943
  %208 = add i64 %arg1, ptrtoint (i32** @global_var_14 to i64), !insn.addr !9944
  %209 = inttoptr i64 %208 to i32*, !insn.addr !9944
  store i32 %207, i32* %209, align 4, !insn.addr !9944
  %210 = icmp eq i32 %94, 192, !insn.addr !9945
  %211 = icmp eq i1 %210, false, !insn.addr !9946
  br i1 %211, label %dec_label_pc_16851, label %dec_label_pc_167b2.preheader, !insn.addr !9946

dec_label_pc_167b2.preheader:                     ; preds = %dec_label_pc_1674d
  %212 = add i64 %arg4, 10240, !insn.addr !9947
  %213 = add i64 %arg4, 4096, !insn.addr !9948
  store i64 0, i64* %rdx.1.reg2mem
  store i64 %arg1, i64* %rdi.1.reg2mem
  br label %dec_label_pc_167b2

dec_label_pc_167b2:                               ; preds = %dec_label_pc_167b2.preheader, %dec_label_pc_16840
  %rdi.1.reload = load i64, i64* %rdi.1.reg2mem
  %rdx.1.reload = load i64, i64* %rdx.1.reg2mem
  %214 = add i64 %rdi.1.reload, 20, !insn.addr !9949
  %215 = inttoptr i64 %214 to i32*, !insn.addr !9949
  %216 = load i32, i32* %215, align 4, !insn.addr !9949
  %217 = add i64 %rdi.1.reload, 24, !insn.addr !9950
  %218 = add i64 %212, %rdx.1.reload, !insn.addr !9947
  %219 = inttoptr i64 %218 to i32*, !insn.addr !9947
  %220 = load i32, i32* %219, align 4, !insn.addr !9947
  %221 = inttoptr i64 %rdi.1.reload to i32*, !insn.addr !9951
  %222 = load i32, i32* %221, align 4, !insn.addr !9951
  %223 = xor i32 %222, %220, !insn.addr !9951
  %224 = mul i32 %216, 4
  %225 = and i32 %224, 1020
  %226 = zext i32 %225 to i64, !insn.addr !9948
  %227 = add i64 %213, %226, !insn.addr !9948
  %228 = inttoptr i64 %227 to i32*, !insn.addr !9948
  %229 = load i32, i32* %228, align 4, !insn.addr !9948
  %230 = and i32 %229, 65280, !insn.addr !9952
  %231 = xor i32 %223, %230, !insn.addr !9953
  %232 = udiv i32 %216, 16777216, !insn.addr !9954
  %233 = mul i32 %232, 4
  %234 = zext i32 %233 to i64, !insn.addr !9955
  %235 = add i64 %213, %234, !insn.addr !9955
  %236 = inttoptr i64 %235 to i8*, !insn.addr !9955
  %237 = load i8, i8* %236, align 1, !insn.addr !9955
  %238 = zext i8 %237 to i32, !insn.addr !9956
  %239 = xor i32 %231, %238, !insn.addr !9956
  %240 = udiv i32 %216, 16384
  %241 = and i32 %240, 1020
  %242 = zext i32 %241 to i64, !insn.addr !9957
  %243 = add i64 %213, %242, !insn.addr !9957
  %244 = inttoptr i64 %243 to i32*, !insn.addr !9957
  %245 = load i32, i32* %244, align 4, !insn.addr !9957
  %246 = and i32 %245, -16777216, !insn.addr !9958
  %247 = xor i32 %239, %246, !insn.addr !9959
  %248 = udiv i32 %216, 64
  %249 = and i32 %248, 1020
  %250 = zext i32 %249 to i64, !insn.addr !9960
  %251 = add i64 %213, %250, !insn.addr !9960
  %252 = inttoptr i64 %251 to i32*, !insn.addr !9960
  %253 = load i32, i32* %252, align 4, !insn.addr !9960
  %254 = and i32 %253, 16711680, !insn.addr !9961
  %255 = xor i32 %247, %254, !insn.addr !9962
  %256 = inttoptr i64 %217 to i32*, !insn.addr !9963
  store i32 %255, i32* %256, align 4, !insn.addr !9963
  %257 = add i64 %rdi.1.reload, 4, !insn.addr !9964
  %258 = inttoptr i64 %257 to i32*, !insn.addr !9964
  %259 = load i32, i32* %258, align 4, !insn.addr !9964
  %260 = xor i32 %255, %259, !insn.addr !9964
  %261 = add i64 %rdi.1.reload, 28, !insn.addr !9965
  %262 = inttoptr i64 %261 to i32*, !insn.addr !9965
  store i32 %260, i32* %262, align 4, !insn.addr !9965
  %263 = add i64 %rdi.1.reload, 8, !insn.addr !9966
  %264 = inttoptr i64 %263 to i32*, !insn.addr !9966
  %265 = load i32, i32* %264, align 4, !insn.addr !9966
  %266 = xor i32 %265, %260, !insn.addr !9966
  %267 = add i64 %rdi.1.reload, 32, !insn.addr !9967
  %268 = inttoptr i64 %267 to i32*, !insn.addr !9967
  store i32 %266, i32* %268, align 4, !insn.addr !9967
  %269 = add i64 %rdi.1.reload, 12, !insn.addr !9968
  %270 = inttoptr i64 %269 to i32*, !insn.addr !9968
  %271 = load i32, i32* %270, align 4, !insn.addr !9968
  %272 = xor i32 %271, %266, !insn.addr !9968
  %273 = add i64 %rdi.1.reload, 36, !insn.addr !9969
  %274 = inttoptr i64 %273 to i32*, !insn.addr !9969
  store i32 %272, i32* %274, align 4, !insn.addr !9969
  %275 = add i64 %rdx.1.reload, ptrtoint (i16* @global_var_4 to i64), !insn.addr !9970
  %276 = icmp eq i64 %275, ptrtoint (i32** @global_var_20 to i64), !insn.addr !9971
  %277 = icmp eq i1 %276, false, !insn.addr !9972
  store i64 ptrtoint ([4 x i8]* @global_var_c to i64), i64* %merge.reg2mem, !insn.addr !9972
  br i1 %277, label %dec_label_pc_16840, label %dec_label_pc_16836, !insn.addr !9972

dec_label_pc_16836:                               ; preds = %dec_label_pc_167b2, %dec_label_pc_16851
  %merge.reload = load i64, i64* %merge.reg2mem
  ret i64 %merge.reload, !insn.addr !9973

dec_label_pc_16840:                               ; preds = %dec_label_pc_167b2
  %278 = add i64 %rdi.1.reload, 16, !insn.addr !9974
  %279 = inttoptr i64 %278 to i32*, !insn.addr !9974
  %280 = load i32, i32* %279, align 4, !insn.addr !9974
  %281 = xor i32 %280, %272, !insn.addr !9974
  %282 = add i64 %rdi.1.reload, 40, !insn.addr !9975
  %283 = inttoptr i64 %282 to i32*, !insn.addr !9975
  store i32 %281, i32* %283, align 4, !insn.addr !9975
  %284 = load i32, i32* %215, align 4, !insn.addr !9976
  %285 = xor i32 %284, %281, !insn.addr !9976
  %286 = add i64 %rdi.1.reload, 44, !insn.addr !9977
  %287 = inttoptr i64 %286 to i32*, !insn.addr !9977
  store i32 %285, i32* %287, align 4, !insn.addr !9977
  store i64 %275, i64* %rdx.1.reg2mem, !insn.addr !9978
  store i64 %217, i64* %rdi.1.reg2mem, !insn.addr !9978
  br label %dec_label_pc_167b2, !insn.addr !9978

dec_label_pc_16851:                               ; preds = %dec_label_pc_1674d
  %288 = add i64 %arg2, ptrtoint (i32** @global_var_18 to i64), !insn.addr !9979
  %289 = inttoptr i64 %288 to i8*, !insn.addr !9979
  %290 = load i8, i8* %289, align 1, !insn.addr !9979
  %291 = zext i8 %290 to i32, !insn.addr !9980
  %292 = shl i32 %291, ptrtoint (i32** @global_var_18 to i32), !insn.addr !9980
  %293 = add i64 %arg2, ptrtoint (i8** @global_var_19 to i64), !insn.addr !9981
  %294 = inttoptr i64 %293 to i8*, !insn.addr !9981
  %295 = load i8, i8* %294, align 1, !insn.addr !9981
  %296 = zext i8 %295 to i32, !insn.addr !9982
  %297 = shl i32 %296, ptrtoint (i8* @global_var_10 to i32), !insn.addr !9982
  %298 = xor i32 %297, %292, !insn.addr !9983
  %299 = add i64 %arg2, ptrtoint (i8** @global_var_1b to i64), !insn.addr !9984
  %300 = inttoptr i64 %299 to i8*, !insn.addr !9984
  %301 = load i8, i8* %300, align 1, !insn.addr !9984
  %302 = zext i8 %301 to i32, !insn.addr !9985
  %303 = xor i32 %298, %302, !insn.addr !9985
  %304 = add i64 %arg2, ptrtoint (i8** @global_var_1a to i64), !insn.addr !9986
  %305 = inttoptr i64 %304 to i8*, !insn.addr !9986
  %306 = load i8, i8* %305, align 1, !insn.addr !9986
  %307 = zext i8 %306 to i32, !insn.addr !9987
  %308 = shl i32 %307, ptrtoint (i8* @global_var_8 to i32), !insn.addr !9987
  %309 = xor i32 %303, %308, !insn.addr !9988
  %310 = add i64 %arg1, ptrtoint (i32** @global_var_18 to i64), !insn.addr !9989
  %311 = inttoptr i64 %310 to i32*, !insn.addr !9989
  store i32 %309, i32* %311, align 4, !insn.addr !9989
  %312 = add i64 %arg2, ptrtoint (i32** @global_var_1c to i64), !insn.addr !9990
  %313 = inttoptr i64 %312 to i8*, !insn.addr !9990
  %314 = load i8, i8* %313, align 1, !insn.addr !9990
  %315 = zext i8 %314 to i32, !insn.addr !9991
  %316 = shl i32 %315, ptrtoint (i32** @global_var_18 to i32), !insn.addr !9991
  %317 = add i64 %arg2, ptrtoint (i32** @global_var_1d to i64), !insn.addr !9992
  %318 = inttoptr i64 %317 to i8*, !insn.addr !9992
  %319 = load i8, i8* %318, align 1, !insn.addr !9992
  %320 = zext i8 %319 to i32, !insn.addr !9993
  %321 = shl i32 %320, ptrtoint (i8* @global_var_10 to i32), !insn.addr !9993
  %322 = xor i32 %321, %316, !insn.addr !9994
  %323 = add i64 %arg2, ptrtoint (i8** @global_var_1f to i64), !insn.addr !9995
  %324 = inttoptr i64 %323 to i8*, !insn.addr !9995
  %325 = load i8, i8* %324, align 1, !insn.addr !9995
  %326 = zext i8 %325 to i32, !insn.addr !9996
  %327 = xor i32 %322, %326, !insn.addr !9996
  %328 = add i64 %arg2, ptrtoint (i8** @global_var_1e to i64), !insn.addr !9997
  %329 = inttoptr i64 %328 to i8*, !insn.addr !9997
  %330 = load i8, i8* %329, align 1, !insn.addr !9997
  %331 = zext i8 %330 to i32, !insn.addr !9998
  %332 = shl i32 %331, ptrtoint (i8* @global_var_8 to i32), !insn.addr !9998
  %333 = xor i32 %327, %332, !insn.addr !9999
  %334 = add i64 %arg1, ptrtoint (i32** @global_var_1c to i64), !insn.addr !10000
  %335 = inttoptr i64 %334 to i32*, !insn.addr !10000
  store i32 %333, i32* %335, align 4, !insn.addr !10000
  %336 = zext i32 %333 to i64, !insn.addr !10001
  %337 = add i64 %arg1, ptrtoint (i32** @global_var_20 to i64), !insn.addr !10002
  %338 = add i64 %arg4, 10240, !insn.addr !10003
  %339 = inttoptr i64 %338 to i32*, !insn.addr !10003
  %340 = load i32, i32* %339, align 4, !insn.addr !10003
  %341 = add i64 %arg1, add (i64 ptrtoint (i32** @global_var_20 to i64), i64 -32), !insn.addr !10004
  %342 = inttoptr i64 %341 to i32*, !insn.addr !10004
  %343 = load i32, i32* %342, align 4, !insn.addr !10004
  %344 = xor i32 %343, %340, !insn.addr !10004
  %345 = mul i32 %333, 4
  %346 = and i32 %345, 1020
  %347 = zext i32 %346 to i64, !insn.addr !10005
  %348 = add i64 %arg4, 4096, !insn.addr !10005
  %349 = add i64 %348, %347, !insn.addr !10005
  %350 = inttoptr i64 %349 to i32*, !insn.addr !10005
  %351 = load i32, i32* %350, align 4, !insn.addr !10005
  %352 = and i32 %351, 65280, !insn.addr !10006
  %353 = xor i32 %344, %352, !insn.addr !10007
  %354 = lshr i32 %333, ptrtoint (i32** @global_var_18 to i32), !insn.addr !10008
  %355 = zext i32 %354 to i64, !insn.addr !10009
  %356 = mul i64 %355, 4, !insn.addr !10010
  %357 = add i64 %356, %348, !insn.addr !10010
  %358 = inttoptr i64 %357 to i8*, !insn.addr !10010
  %359 = load i8, i8* %358, align 1, !insn.addr !10010
  %360 = zext i8 %359 to i32, !insn.addr !10011
  %361 = xor i32 %353, %360, !insn.addr !10011
  %362 = lshr i32 %333, ptrtoint (i8* @global_var_10 to i32), !insn.addr !10012
  %363 = mul i32 %362, 4
  %364 = and i32 %363, 1020
  %365 = zext i32 %364 to i64, !insn.addr !10013
  %366 = add i64 %348, %365, !insn.addr !10013
  %367 = inttoptr i64 %366 to i32*, !insn.addr !10013
  %368 = load i32, i32* %367, align 4, !insn.addr !10013
  %369 = and i32 %368, -16777216, !insn.addr !10014
  %370 = xor i32 %361, %369, !insn.addr !10015
  %371 = lshr i64 %336, ptrtoint (i8* @global_var_8 to i64), !insn.addr !10016
  %372 = mul i64 %371, 4, !insn.addr !10016
  %373 = and i64 %372, 1020, !insn.addr !10017
  %374 = add i64 %373, %348, !insn.addr !10017
  %375 = inttoptr i64 %374 to i32*, !insn.addr !10017
  %376 = load i32, i32* %375, align 4, !insn.addr !10017
  %377 = and i32 %376, 16711680, !insn.addr !10018
  %378 = xor i32 %370, %377, !insn.addr !10019
  %379 = inttoptr i64 %337 to i32*, !insn.addr !10020
  store i32 %378, i32* %379, align 4, !insn.addr !10020
  %380 = add i64 %arg1, add (i64 ptrtoint (i32** @global_var_20 to i64), i64 -28), !insn.addr !10021
  %381 = inttoptr i64 %380 to i32*, !insn.addr !10021
  %382 = load i32, i32* %381, align 4, !insn.addr !10021
  %383 = xor i32 %378, %382, !insn.addr !10021
  %384 = add i64 %arg1, add (i64 ptrtoint (i32** @global_var_20 to i64), i64 ptrtoint (i16* @global_var_4 to i64)), !insn.addr !10022
  %385 = inttoptr i64 %384 to i32*, !insn.addr !10022
  store i32 %383, i32* %385, align 4, !insn.addr !10022
  %386 = add i64 %arg1, add (i64 ptrtoint (i32** @global_var_20 to i64), i64 -24), !insn.addr !10023
  %387 = inttoptr i64 %386 to i32*, !insn.addr !10023
  %388 = load i32, i32* %387, align 4, !insn.addr !10023
  %389 = xor i32 %388, %383, !insn.addr !10023
  %390 = add i64 %arg1, add (i64 ptrtoint (i32** @global_var_20 to i64), i64 ptrtoint (i8* @global_var_8 to i64)), !insn.addr !10024
  %391 = inttoptr i64 %390 to i32*, !insn.addr !10024
  store i32 %389, i32* %391, align 4, !insn.addr !10024
  %392 = add i64 %arg1, add (i64 ptrtoint (i32** @global_var_20 to i64), i64 -20), !insn.addr !10025
  %393 = inttoptr i64 %392 to i32*, !insn.addr !10025
  %394 = load i32, i32* %393, align 4, !insn.addr !10025
  %395 = xor i32 %394, %389, !insn.addr !10025
  %396 = add i64 %arg1, add (i64 ptrtoint (i32** @global_var_20 to i64), i64 ptrtoint ([4 x i8]* @global_var_c to i64)), !insn.addr !10026
  %397 = inttoptr i64 %396 to i32*, !insn.addr !10026
  store i32 %395, i32* %397, align 4, !insn.addr !10026
  store i64 ptrtoint (i16** @global_var_e to i64), i64* %merge.reg2mem, !insn.addr !10027
  br i1 icmp ne (i64 sub (i64 ptrtoint (i16* @global_var_4 to i64), i64 ptrtoint (i32** @global_var_1c to i64)), i64 0), label %dec_label_pc_16949, label %dec_label_pc_16836, !insn.addr !10027

dec_label_pc_16949:                               ; preds = %dec_label_pc_16851
  %398 = zext i32 %395 to i64, !insn.addr !10025
  %399 = lshr i64 %398, ptrtoint (i8* @global_var_8 to i64), !insn.addr !10028
  %400 = urem i64 %399, 256, !insn.addr !10028
  ret i64 %400, !insn.addr !10028
}

define i32 @rijndaelKeySetupDec(i32* %rk, i8* %cipherKey, i32 %keyBits, i64 %pTable) local_unnamed_addr {
dec_label_pc_1698f:
  %0 = call i64 @__decompiler_undefined_function_0()
  %rax = alloca i64, align 8
  %1 = call i64 @__decompiler_undefined_function_0()
  %2 = ptrtoint i32* %rk to i64
  %3 = bitcast i64* %rax to i8*
  %4 = trunc i64 %1 to i8
  %5 = trunc i32 %keyBits to i8, !insn.addr !10029
  %6 = add i8 %4, %5, !insn.addr !10029
  %7 = inttoptr i64 %1 to i8*, !insn.addr !10029
  store i8 %6, i8* %7, align 1, !insn.addr !10029
  %8 = load i8, i8* %3, align 8, !insn.addr !10030
  %9 = load i64, i64* %rax, align 8
  %10 = trunc i64 %9 to i8, !insn.addr !10030
  %11 = add i8 %8, %10, !insn.addr !10030
  %12 = inttoptr i64 %9 to i8*, !insn.addr !10030
  store i8 %11, i8* %12, align 1, !insn.addr !10030
  %13 = and i32 %keyBits, 65280, !insn.addr !10031
  %14 = trunc i64 %0 to i32, !insn.addr !10032
  %15 = xor i32 %13, %14, !insn.addr !10033
  %16 = add i64 %2, ptrtoint (i8* @global_var_10 to i64), !insn.addr !10034
  %17 = inttoptr i64 %16 to i32*, !insn.addr !10034
  store i32 %15, i32* %17, align 4, !insn.addr !10034
  %18 = add i64 %2, -12, !insn.addr !10035
  %19 = inttoptr i64 %18 to i32*, !insn.addr !10035
  %20 = load i32, i32* %19, align 4, !insn.addr !10035
  %21 = xor i32 %20, %15, !insn.addr !10035
  %22 = add i64 %2, ptrtoint (i32** @global_var_14 to i64), !insn.addr !10036
  %23 = inttoptr i64 %22 to i32*, !insn.addr !10036
  store i32 %21, i32* %23, align 4, !insn.addr !10036
  %24 = add i64 %2, -8, !insn.addr !10037
  %25 = inttoptr i64 %24 to i32*, !insn.addr !10037
  %26 = load i32, i32* %25, align 4, !insn.addr !10037
  %27 = xor i32 %26, %21, !insn.addr !10037
  %28 = add i64 %2, ptrtoint (i32** @global_var_18 to i64), !insn.addr !10038
  %29 = inttoptr i64 %28 to i32*, !insn.addr !10038
  store i32 %27, i32* %29, align 4, !insn.addr !10038
  %30 = add i64 %2, -4, !insn.addr !10039
  %31 = inttoptr i64 %30 to i32*, !insn.addr !10039
  %32 = load i32, i32* %31, align 4, !insn.addr !10039
  %33 = xor i32 %32, %27, !insn.addr !10039
  %34 = add i64 %2, ptrtoint (i32** @global_var_1c to i64), !insn.addr !10040
  %35 = inttoptr i64 %34 to i32*, !insn.addr !10040
  store i32 %33, i32* %35, align 4, !insn.addr !10040
  ret i32 %33, !insn.addr !10041
}

define i64 @rijndaelKeySetupDec.465(i64 %arg1, i64* %arg2, i64 %arg3, i64 %arg4) local_unnamed_addr {
dec_label_pc_169bf:
  %rdi.0.reg2mem = alloca i64, !insn.addr !10042
  %rsi.0.reg2mem = alloca i64, !insn.addr !10042
  %0 = ptrtoint i64* %arg2 to i64
  %1 = call i64 @mcount(), !insn.addr !10043
  %2 = call i64 @rijndaelKeySetupEnc.430(i64 %arg1, i64 %0, i64 %arg3, i64 %arg4), !insn.addr !10044
  %3 = mul i64 %2, zext (i32 ptrtoint (i16* @global_var_4 to i32) to i64), !insn.addr !10045
  %4 = trunc i64 %3 to i32, !insn.addr !10046
  %5 = icmp slt i32 %4, 1
  br i1 %5, label %dec_label_pc_16a4c, label %dec_label_pc_169e1, !insn.addr !10047

dec_label_pc_169e1:                               ; preds = %dec_label_pc_169bf
  %6 = and i64 %3, 4294967294, !insn.addr !10045
  %7 = add i64 %arg1, ptrtoint (i16* @global_var_4 to i64), !insn.addr !10048
  %8 = add i64 %arg1, ptrtoint (i8* @global_var_8 to i64), !insn.addr !10049
  %9 = add i64 %arg1, ptrtoint ([4 x i8]* @global_var_c to i64), !insn.addr !10050
  store i64 %6, i64* %rsi.0.reg2mem, !insn.addr !10051
  store i64 0, i64* %rdi.0.reg2mem, !insn.addr !10051
  br label %dec_label_pc_169e6, !insn.addr !10051

dec_label_pc_169e6:                               ; preds = %dec_label_pc_169e6, %dec_label_pc_169e1
  %rdi.0.reload = load i64, i64* %rdi.0.reg2mem
  %rsi.0.reload = load i64, i64* %rsi.0.reg2mem
  %sext = mul i64 %rdi.0.reload, 4294967296
  %10 = sdiv i64 %sext, 4294967296, !insn.addr !10052
  %11 = mul i64 %10, ptrtoint (i16* @global_var_4 to i64), !insn.addr !10053
  %12 = add i64 %11, %arg1, !insn.addr !10053
  %13 = inttoptr i64 %12 to i32*, !insn.addr !10054
  %14 = load i32, i32* %13, align 4, !insn.addr !10054
  %sext1 = mul i64 %rsi.0.reload, 4294967296
  %15 = sdiv i64 %sext1, 4294967296, !insn.addr !10055
  %16 = mul i64 %15, ptrtoint (i16* @global_var_4 to i64), !insn.addr !10056
  %17 = add i64 %16, %arg1, !insn.addr !10056
  %18 = inttoptr i64 %17 to i32*, !insn.addr !10057
  %19 = load i32, i32* %18, align 4, !insn.addr !10057
  store i32 %19, i32* %13, align 4, !insn.addr !10058
  store i32 %14, i32* %18, align 4, !insn.addr !10059
  %20 = add i64 %11, %7, !insn.addr !10048
  %21 = inttoptr i64 %20 to i32*, !insn.addr !10060
  %22 = load i32, i32* %21, align 4, !insn.addr !10060
  %23 = add i64 %16, %7, !insn.addr !10061
  %24 = inttoptr i64 %23 to i32*, !insn.addr !10062
  %25 = load i32, i32* %24, align 4, !insn.addr !10062
  store i32 %25, i32* %21, align 4, !insn.addr !10063
  store i32 %22, i32* %24, align 4, !insn.addr !10064
  %26 = add i64 %11, %8, !insn.addr !10049
  %27 = inttoptr i64 %26 to i32*, !insn.addr !10065
  %28 = load i32, i32* %27, align 4, !insn.addr !10065
  %29 = add i64 %16, %8, !insn.addr !10066
  %30 = inttoptr i64 %29 to i32*, !insn.addr !10067
  %31 = load i32, i32* %30, align 4, !insn.addr !10067
  store i32 %31, i32* %27, align 4, !insn.addr !10068
  store i32 %28, i32* %30, align 4, !insn.addr !10069
  %32 = add i64 %11, %9, !insn.addr !10050
  %33 = inttoptr i64 %32 to i32*, !insn.addr !10070
  %34 = load i32, i32* %33, align 4, !insn.addr !10070
  %35 = add i64 %16, %9, !insn.addr !10071
  %36 = inttoptr i64 %35 to i32*, !insn.addr !10072
  %37 = load i32, i32* %36, align 4, !insn.addr !10072
  store i32 %37, i32* %33, align 4, !insn.addr !10073
  store i32 %34, i32* %36, align 4, !insn.addr !10074
  %38 = add nuw nsw i64 %rdi.0.reload, zext (i32 ptrtoint (i16* @global_var_4 to i32) to i64), !insn.addr !10075
  %39 = and i64 %38, 4294967295, !insn.addr !10075
  %40 = sub nsw i64 %rsi.0.reload, zext (i32 ptrtoint (i16* @global_var_4 to i32) to i64), !insn.addr !10076
  %41 = and i64 %40, 4294967295, !insn.addr !10076
  %42 = icmp ult i64 %39, %41, !insn.addr !10077
  store i64 %41, i64* %rsi.0.reg2mem, !insn.addr !10077
  store i64 %39, i64* %rdi.0.reg2mem, !insn.addr !10077
  br i1 %42, label %dec_label_pc_169e6, label %dec_label_pc_16a4c, !insn.addr !10077

dec_label_pc_16a4c:                               ; preds = %dec_label_pc_169e6, %dec_label_pc_169bf
  %43 = add i64 %arg1, ptrtoint (i8* @global_var_10 to i64), !insn.addr !10078
  %44 = inttoptr i64 %43 to i32*, !insn.addr !10079
  %45 = load i32, i32* %44, align 4, !insn.addr !10079
  %46 = zext i32 %45 to i64, !insn.addr !10079
  %47 = mul i32 %45, 4
  %48 = and i32 %47, 1020
  %49 = zext i32 %48 to i64, !insn.addr !10080
  %50 = add i64 %arg4, 4096, !insn.addr !10080
  %51 = add i64 %50, %49, !insn.addr !10080
  %52 = inttoptr i64 %51 to i8*, !insn.addr !10080
  %53 = load i8, i8* %52, align 1, !insn.addr !10080
  %54 = zext i8 %53 to i64, !insn.addr !10080
  %55 = lshr i32 %45, ptrtoint (i32** @global_var_18 to i32), !insn.addr !10081
  %56 = zext i32 %55 to i64, !insn.addr !10082
  %57 = mul i64 %56, 4, !insn.addr !10083
  %58 = add i64 %57, %50, !insn.addr !10083
  %59 = inttoptr i64 %58 to i8*, !insn.addr !10083
  %60 = load i8, i8* %59, align 1, !insn.addr !10083
  %61 = zext i8 %60 to i64, !insn.addr !10083
  %62 = mul i64 %54, 4, !insn.addr !10084
  %63 = add i64 %arg4, 8192, !insn.addr !10084
  %64 = add i64 %62, %63, !insn.addr !10084
  %65 = inttoptr i64 %64 to i32*, !insn.addr !10084
  %66 = load i32, i32* %65, align 4, !insn.addr !10084
  %67 = mul i64 %61, 4, !insn.addr !10085
  %68 = add i64 %arg4, 5120, !insn.addr !10085
  %69 = add i64 %67, %68, !insn.addr !10085
  %70 = inttoptr i64 %69 to i32*, !insn.addr !10085
  %71 = load i32, i32* %70, align 4, !insn.addr !10085
  %72 = xor i32 %71, %66, !insn.addr !10085
  %73 = lshr i32 %45, ptrtoint (i8* @global_var_10 to i32), !insn.addr !10086
  %74 = mul i32 %73, 4
  %75 = and i32 %74, 1020
  %76 = zext i32 %75 to i64, !insn.addr !10087
  %77 = add i64 %50, %76, !insn.addr !10087
  %78 = inttoptr i64 %77 to i8*, !insn.addr !10087
  %79 = load i8, i8* %78, align 1, !insn.addr !10087
  %80 = zext i8 %79 to i64, !insn.addr !10087
  %81 = mul i64 %80, 4, !insn.addr !10088
  %82 = add i64 %arg4, ptrtoint (i64* @global_var_1800 to i64), !insn.addr !10088
  %83 = add i64 %81, %82, !insn.addr !10088
  %84 = inttoptr i64 %83 to i32*, !insn.addr !10088
  %85 = load i32, i32* %84, align 4, !insn.addr !10088
  %86 = xor i32 %72, %85, !insn.addr !10088
  %87 = lshr i64 %46, ptrtoint (i8* @global_var_8 to i64), !insn.addr !10089
  %88 = mul i64 %87, 4, !insn.addr !10089
  %89 = and i64 %88, 1020, !insn.addr !10090
  %90 = add i64 %89, %50, !insn.addr !10090
  %91 = inttoptr i64 %90 to i8*, !insn.addr !10090
  %92 = load i8, i8* %91, align 1, !insn.addr !10090
  %93 = zext i8 %92 to i64, !insn.addr !10090
  %94 = mul i64 %93, 4, !insn.addr !10091
  %95 = add i64 %arg4, 7168, !insn.addr !10091
  %96 = add i64 %94, %95, !insn.addr !10091
  %97 = inttoptr i64 %96 to i32*, !insn.addr !10091
  %98 = load i32, i32* %97, align 4, !insn.addr !10091
  %99 = xor i32 %86, %98, !insn.addr !10091
  store i32 %99, i32* %44, align 4, !insn.addr !10092
  %100 = add i64 %arg1, add (i64 ptrtoint (i8* @global_var_10 to i64), i64 ptrtoint (i16* @global_var_4 to i64)), !insn.addr !10093
  %101 = inttoptr i64 %100 to i32*, !insn.addr !10093
  %102 = load i32, i32* %101, align 4, !insn.addr !10093
  %103 = zext i32 %102 to i64, !insn.addr !10093
  %104 = mul i32 %102, 4
  %105 = and i32 %104, 1020
  %106 = zext i32 %105 to i64, !insn.addr !10094
  %107 = add i64 %50, %106, !insn.addr !10094
  %108 = inttoptr i64 %107 to i8*, !insn.addr !10094
  %109 = load i8, i8* %108, align 1, !insn.addr !10094
  %110 = zext i8 %109 to i64, !insn.addr !10094
  %111 = lshr i32 %102, ptrtoint (i32** @global_var_18 to i32), !insn.addr !10095
  %112 = zext i32 %111 to i64, !insn.addr !10096
  %113 = mul i64 %112, 4, !insn.addr !10097
  %114 = add i64 %113, %50, !insn.addr !10097
  %115 = inttoptr i64 %114 to i8*, !insn.addr !10097
  %116 = load i8, i8* %115, align 1, !insn.addr !10097
  %117 = zext i8 %116 to i64, !insn.addr !10097
  %118 = mul i64 %110, 4, !insn.addr !10098
  %119 = add i64 %118, %63, !insn.addr !10098
  %120 = inttoptr i64 %119 to i32*, !insn.addr !10098
  %121 = load i32, i32* %120, align 4, !insn.addr !10098
  %122 = mul i64 %117, 4, !insn.addr !10099
  %123 = add i64 %122, %68, !insn.addr !10099
  %124 = inttoptr i64 %123 to i32*, !insn.addr !10099
  %125 = load i32, i32* %124, align 4, !insn.addr !10099
  %126 = xor i32 %125, %121, !insn.addr !10099
  %127 = lshr i32 %102, ptrtoint (i8* @global_var_10 to i32), !insn.addr !10100
  %128 = mul i32 %127, 4
  %129 = and i32 %128, 1020
  %130 = zext i32 %129 to i64, !insn.addr !10101
  %131 = add i64 %50, %130, !insn.addr !10101
  %132 = inttoptr i64 %131 to i8*, !insn.addr !10101
  %133 = load i8, i8* %132, align 1, !insn.addr !10101
  %134 = zext i8 %133 to i64, !insn.addr !10101
  %135 = mul i64 %134, 4, !insn.addr !10102
  %136 = add i64 %135, %82, !insn.addr !10102
  %137 = inttoptr i64 %136 to i32*, !insn.addr !10102
  %138 = load i32, i32* %137, align 4, !insn.addr !10102
  %139 = xor i32 %126, %138, !insn.addr !10102
  %140 = lshr i64 %103, ptrtoint (i8* @global_var_8 to i64), !insn.addr !10103
  %141 = mul i64 %140, 4, !insn.addr !10103
  %142 = and i64 %141, 1020, !insn.addr !10104
  %143 = add i64 %142, %50, !insn.addr !10104
  %144 = inttoptr i64 %143 to i8*, !insn.addr !10104
  %145 = load i8, i8* %144, align 1, !insn.addr !10104
  %146 = zext i8 %145 to i64, !insn.addr !10104
  %147 = mul i64 %146, 4, !insn.addr !10105
  %148 = add i64 %147, %95, !insn.addr !10105
  %149 = inttoptr i64 %148 to i32*, !insn.addr !10105
  %150 = load i32, i32* %149, align 4, !insn.addr !10105
  %151 = xor i32 %139, %150, !insn.addr !10105
  store i32 %151, i32* %101, align 4, !insn.addr !10106
  %152 = add i64 %arg1, add (i64 ptrtoint (i8* @global_var_10 to i64), i64 ptrtoint (i8* @global_var_8 to i64)), !insn.addr !10107
  %153 = inttoptr i64 %152 to i32*, !insn.addr !10107
  %154 = load i32, i32* %153, align 4, !insn.addr !10107
  %155 = zext i32 %154 to i64, !insn.addr !10107
  %156 = mul i32 %154, 4
  %157 = and i32 %156, 1020
  %158 = zext i32 %157 to i64, !insn.addr !10108
  %159 = add i64 %50, %158, !insn.addr !10108
  %160 = inttoptr i64 %159 to i8*, !insn.addr !10108
  %161 = load i8, i8* %160, align 1, !insn.addr !10108
  %162 = zext i8 %161 to i64, !insn.addr !10108
  %163 = lshr i32 %154, ptrtoint (i32** @global_var_18 to i32), !insn.addr !10109
  %164 = zext i32 %163 to i64, !insn.addr !10110
  %165 = mul i64 %164, 4, !insn.addr !10111
  %166 = add i64 %165, %50, !insn.addr !10111
  %167 = inttoptr i64 %166 to i8*, !insn.addr !10111
  %168 = load i8, i8* %167, align 1, !insn.addr !10111
  %169 = zext i8 %168 to i64, !insn.addr !10111
  %170 = mul i64 %162, 4, !insn.addr !10112
  %171 = add i64 %170, %63, !insn.addr !10112
  %172 = inttoptr i64 %171 to i32*, !insn.addr !10112
  %173 = load i32, i32* %172, align 4, !insn.addr !10112
  %174 = mul i64 %169, 4, !insn.addr !10113
  %175 = add i64 %174, %68, !insn.addr !10113
  %176 = inttoptr i64 %175 to i32*, !insn.addr !10113
  %177 = load i32, i32* %176, align 4, !insn.addr !10113
  %178 = xor i32 %177, %173, !insn.addr !10113
  %179 = lshr i32 %154, ptrtoint (i8* @global_var_10 to i32), !insn.addr !10114
  %180 = mul i32 %179, 4
  %181 = and i32 %180, 1020
  %182 = zext i32 %181 to i64, !insn.addr !10115
  %183 = add i64 %50, %182, !insn.addr !10115
  %184 = inttoptr i64 %183 to i8*, !insn.addr !10115
  %185 = load i8, i8* %184, align 1, !insn.addr !10115
  %186 = zext i8 %185 to i64, !insn.addr !10115
  %187 = mul i64 %186, 4, !insn.addr !10116
  %188 = add i64 %187, %82, !insn.addr !10116
  %189 = inttoptr i64 %188 to i32*, !insn.addr !10116
  %190 = load i32, i32* %189, align 4, !insn.addr !10116
  %191 = xor i32 %178, %190, !insn.addr !10116
  %192 = lshr i64 %155, ptrtoint (i8* @global_var_8 to i64), !insn.addr !10117
  %193 = mul i64 %192, 4, !insn.addr !10117
  %194 = and i64 %193, 1020, !insn.addr !10118
  %195 = add i64 %194, %50, !insn.addr !10118
  %196 = inttoptr i64 %195 to i8*, !insn.addr !10118
  %197 = load i8, i8* %196, align 1, !insn.addr !10118
  %198 = zext i8 %197 to i64, !insn.addr !10118
  %199 = mul i64 %198, 4, !insn.addr !10119
  %200 = add i64 %199, %95, !insn.addr !10119
  %201 = inttoptr i64 %200 to i32*, !insn.addr !10119
  %202 = load i32, i32* %201, align 4, !insn.addr !10119
  %203 = xor i32 %191, %202, !insn.addr !10119
  store i32 %203, i32* %153, align 4, !insn.addr !10120
  ret i64 %2, !insn.addr !10121
}

define void @rijndaelEncryptRound(i32* %rk, i32 %Nr, i8* %block, i32 %rounds, i64 %pTable) local_unnamed_addr {
dec_label_pc_16bb5:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = call i64 @__decompiler_undefined_function_0()
  %2 = call i64 @__decompiler_undefined_function_0()
  %3 = sext i32 %rounds to i64
  %4 = ptrtoint i8* %block to i64
  %5 = trunc i64 %2 to i8
  %6 = mul i8 %5, 2, !insn.addr !10122
  %7 = inttoptr i64 %2 to i8*, !insn.addr !10122
  store i8 %6, i8* %7, align 1, !insn.addr !10122
  %8 = mul i64 %3, ptrtoint (i16* @global_var_4 to i64), !insn.addr !10123
  %9 = add i64 %8, ptrtoint (i64* @global_var_1800 to i64), !insn.addr !10123
  %10 = add i64 %9, %1, !insn.addr !10123
  %11 = inttoptr i64 %10 to i32*, !insn.addr !10123
  %12 = load i32, i32* %11, align 4, !insn.addr !10123
  %13 = xor i32 %12, %Nr, !insn.addr !10123
  %14 = lshr i64 %4, ptrtoint (i8* @global_var_8 to i64), !insn.addr !10124
  %15 = mul i64 %14, 4, !insn.addr !10124
  %16 = and i64 %15, 1020, !insn.addr !10125
  %17 = or i64 %16, 4096, !insn.addr !10125
  %18 = add i64 %1, %17, !insn.addr !10125
  %19 = inttoptr i64 %18 to i8*, !insn.addr !10125
  %20 = load i8, i8* %19, align 1, !insn.addr !10125
  %21 = zext i8 %20 to i64, !insn.addr !10125
  %22 = mul i64 %21, 4, !insn.addr !10126
  %23 = add i64 %1, 7168, !insn.addr !10126
  %24 = add i64 %23, %22, !insn.addr !10126
  %25 = inttoptr i64 %24 to i32*, !insn.addr !10126
  %26 = load i32, i32* %25, align 4, !insn.addr !10126
  %27 = xor i32 %13, %26, !insn.addr !10126
  %28 = add i64 %0, ptrtoint ([4 x i8]* @global_var_c to i64), !insn.addr !10127
  %29 = inttoptr i64 %28 to i32*, !insn.addr !10127
  store i32 %27, i32* %29, align 4, !insn.addr !10127
  ret void, !insn.addr !10128
}

define i64 @rijndaelEncryptRound.353(i64 %arg1, i32 %arg2, i64* %arg3, i64 %arg4, i64 %arg5) local_unnamed_addr {
dec_label_pc_16be5:
  %r10.2.reg2mem = alloca i64, !insn.addr !10129
  %r9.1.reg2mem = alloca i64, !insn.addr !10129
  %rsi.1.reg2mem = alloca i64, !insn.addr !10129
  %rbx.2.reg2mem = alloca i64, !insn.addr !10129
  %r14.0.reg2mem = alloca i64, !insn.addr !10129
  %r10.1.reg2mem = alloca i64, !insn.addr !10129
  %r9.0.in.reg2mem = alloca i32, !insn.addr !10129
  %rsi.0.reg2mem = alloca i64, !insn.addr !10129
  %rbx.1.reg2mem = alloca i64, !insn.addr !10129
  %r10.0.reg2mem = alloca i64, !insn.addr !10129
  %rbx.0.reg2mem = alloca i64, !insn.addr !10129
  %rax.0.reg2mem = alloca i64, !insn.addr !10129
  %stack_var_-192.0.reg2mem = alloca i32, !insn.addr !10129
  %.reg2mem = alloca i64, !insn.addr !10129
  %0 = ptrtoint i64* %arg3 to i64
  %1 = call i64 @mcount(), !insn.addr !10130
  %2 = add i64 %0, ptrtoint (i32* @global_var_1 to i64), !insn.addr !10131
  %3 = add i64 %0, ptrtoint (i32* @global_var_2 to i64), !insn.addr !10132
  %4 = add i64 %0, ptrtoint (i8** @global_var_3 to i64), !insn.addr !10133
  %5 = inttoptr i64 %4 to i8*, !insn.addr !10134
  %6 = trunc i64 %0 to i32
  %7 = urem i32 %6, 256, !insn.addr !10135
  %8 = shl i32 %7, ptrtoint (i32** @global_var_18 to i32), !insn.addr !10135
  %9 = load i8, i8* %5, align 1, !insn.addr !10136
  %10 = zext i8 %9 to i32, !insn.addr !10137
  %11 = trunc i64 %arg1 to i32
  %12 = inttoptr i64 %2 to i8*, !insn.addr !10138
  %13 = load i8, i8* %12, align 1, !insn.addr !10138
  %14 = zext i8 %13 to i32, !insn.addr !10139
  %15 = shl i32 %14, ptrtoint (i8* @global_var_10 to i32), !insn.addr !10139
  %16 = inttoptr i64 %3 to i8*, !insn.addr !10140
  %17 = load i8, i8* %16, align 1, !insn.addr !10140
  %18 = zext i8 %17 to i32, !insn.addr !10141
  %19 = shl i32 %18, ptrtoint (i8* @global_var_8 to i32), !insn.addr !10141
  %20 = xor i32 %8, %11, !insn.addr !10137
  %21 = xor i32 %20, %10, !insn.addr !10142
  %22 = xor i32 %21, %15, !insn.addr !10143
  %23 = xor i32 %22, %19, !insn.addr !10144
  %24 = zext i32 %23 to i64, !insn.addr !10144
  %25 = add i64 %0, ptrtoint (i16* @global_var_4 to i64), !insn.addr !10145
  %26 = add i64 %0, ptrtoint (i8* @global_var_5 to i64), !insn.addr !10146
  %27 = add i64 %0, ptrtoint (i8* @global_var_6 to i64), !insn.addr !10147
  %28 = add i64 %0, ptrtoint (i8** @global_var_7 to i64), !insn.addr !10148
  %29 = inttoptr i64 %28 to i8*, !insn.addr !10149
  %30 = load i8, i8* %29, align 1, !insn.addr !10150
  %31 = zext i8 %30 to i32, !insn.addr !10151
  %32 = add i64 %arg1, ptrtoint (i16* @global_var_4 to i64), !insn.addr !10151
  %33 = inttoptr i64 %32 to i32*, !insn.addr !10151
  %34 = load i32, i32* %33, align 4, !insn.addr !10151
  %35 = xor i32 %34, %31, !insn.addr !10151
  %36 = inttoptr i64 %25 to i8*, !insn.addr !10152
  %37 = load i8, i8* %36, align 1, !insn.addr !10152
  %38 = zext i8 %37 to i32, !insn.addr !10153
  %39 = shl i32 %38, ptrtoint (i32** @global_var_18 to i32), !insn.addr !10153
  %40 = xor i32 %35, %39, !insn.addr !10154
  %41 = inttoptr i64 %26 to i8*, !insn.addr !10155
  %42 = load i8, i8* %41, align 1, !insn.addr !10155
  %43 = zext i8 %42 to i32, !insn.addr !10156
  %44 = shl i32 %43, ptrtoint (i8* @global_var_10 to i32), !insn.addr !10156
  %45 = xor i32 %40, %44, !insn.addr !10157
  %46 = inttoptr i64 %27 to i8*, !insn.addr !10158
  %47 = load i8, i8* %46, align 1, !insn.addr !10158
  %48 = zext i8 %47 to i32, !insn.addr !10159
  %49 = shl i32 %48, ptrtoint (i8* @global_var_8 to i32), !insn.addr !10159
  %50 = xor i32 %45, %49, !insn.addr !10160
  %51 = add i64 %0, ptrtoint (i8* @global_var_8 to i64), !insn.addr !10161
  %52 = add i64 %0, ptrtoint (i8** @global_var_9 to i64), !insn.addr !10162
  %53 = inttoptr i64 %52 to i8*, !insn.addr !10163
  %54 = add i64 %0, ptrtoint (i8* @global_var_a to i64), !insn.addr !10164
  %55 = add i64 %0, ptrtoint (i8** @global_var_b to i64), !insn.addr !10165
  %56 = inttoptr i64 %55 to i8*, !insn.addr !10166
  %57 = load i8, i8* %56, align 1, !insn.addr !10167
  %58 = zext i8 %57 to i32, !insn.addr !10168
  %59 = add i64 %arg1, ptrtoint (i8* @global_var_8 to i64), !insn.addr !10168
  %60 = inttoptr i64 %59 to i32*, !insn.addr !10168
  %61 = load i32, i32* %60, align 4, !insn.addr !10168
  %62 = xor i32 %61, %58, !insn.addr !10168
  %63 = inttoptr i64 %51 to i8*, !insn.addr !10169
  %64 = load i8, i8* %63, align 1, !insn.addr !10169
  %65 = zext i8 %64 to i32, !insn.addr !10170
  %66 = shl i32 %65, ptrtoint (i32** @global_var_18 to i32), !insn.addr !10170
  %67 = xor i32 %62, %66, !insn.addr !10171
  %68 = load i8, i8* %53, align 1, !insn.addr !10172
  %69 = zext i8 %68 to i32, !insn.addr !10173
  %70 = shl i32 %69, ptrtoint (i8* @global_var_10 to i32), !insn.addr !10173
  %71 = xor i32 %67, %70, !insn.addr !10174
  %72 = inttoptr i64 %54 to i8*, !insn.addr !10175
  %73 = load i8, i8* %72, align 1, !insn.addr !10175
  %74 = zext i8 %73 to i32, !insn.addr !10176
  %75 = shl i32 %74, ptrtoint (i8* @global_var_8 to i32), !insn.addr !10176
  %76 = xor i32 %71, %75, !insn.addr !10177
  %77 = zext i32 %76 to i64, !insn.addr !10177
  %78 = add i64 %0, ptrtoint ([4 x i8]* @global_var_c to i64), !insn.addr !10178
  %79 = add i64 %0, ptrtoint ([3 x i8]* @global_var_d to i64), !insn.addr !10179
  %80 = add i64 %0, ptrtoint (i16** @global_var_e to i64), !insn.addr !10180
  %81 = add i64 %0, ptrtoint (i8* @global_var_f to i64), !insn.addr !10181
  %82 = inttoptr i64 %81 to i8*, !insn.addr !10182
  %83 = load i8, i8* %82, align 1, !insn.addr !10182
  %84 = zext i8 %83 to i32, !insn.addr !10183
  %85 = add i64 %arg1, ptrtoint ([4 x i8]* @global_var_c to i64), !insn.addr !10183
  %86 = inttoptr i64 %85 to i32*, !insn.addr !10183
  %87 = load i32, i32* %86, align 4, !insn.addr !10183
  %88 = xor i32 %87, %84, !insn.addr !10183
  %89 = inttoptr i64 %78 to i8*, !insn.addr !10184
  %90 = load i8, i8* %89, align 1, !insn.addr !10184
  %91 = zext i8 %90 to i32, !insn.addr !10185
  %92 = shl i32 %91, ptrtoint (i32** @global_var_18 to i32), !insn.addr !10185
  %93 = xor i32 %88, %92, !insn.addr !10186
  %94 = inttoptr i64 %79 to i8*, !insn.addr !10187
  %95 = load i8, i8* %94, align 1, !insn.addr !10187
  %96 = zext i8 %95 to i32, !insn.addr !10188
  %97 = shl i32 %96, ptrtoint (i8* @global_var_10 to i32), !insn.addr !10188
  %98 = xor i32 %93, %97, !insn.addr !10189
  %99 = inttoptr i64 %80 to i8*, !insn.addr !10190
  %100 = load i8, i8* %99, align 1, !insn.addr !10190
  %101 = zext i8 %100 to i32, !insn.addr !10191
  %102 = shl i32 %101, ptrtoint (i8* @global_var_8 to i32), !insn.addr !10191
  %103 = xor i32 %98, %102, !insn.addr !10192
  %104 = zext i32 %103 to i64, !insn.addr !10192
  %105 = add i64 %arg1, ptrtoint (i8* @global_var_10 to i64), !insn.addr !10193
  %106 = sub i32 %arg2, ptrtoint (i32* @global_var_1 to i32), !insn.addr !10194
  %107 = trunc i64 %arg4 to i32
  %108 = sub i32 %107, %arg2, !insn.addr !10195
  %109 = xor i32 %107, %arg2, !insn.addr !10195
  %110 = xor i32 %108, %107, !insn.addr !10195
  %111 = and i32 %110, %109, !insn.addr !10195
  %112 = icmp slt i32 %111, 0, !insn.addr !10195
  %113 = icmp slt i32 %108, 0, !insn.addr !10195
  %114 = icmp eq i1 %113, %112, !insn.addr !10196
  %115 = select i1 %114, i32 %106, i32 %107, !insn.addr !10196
  %116 = icmp slt i32 %115, 1
  store i64 %104, i64* %rbx.1.reg2mem, !insn.addr !10197
  store i64 %77, i64* %rsi.0.reg2mem, !insn.addr !10197
  store i32 %50, i32* %r9.0.in.reg2mem, !insn.addr !10197
  store i64 %24, i64* %r10.1.reg2mem, !insn.addr !10197
  store i64 %105, i64* %r14.0.reg2mem, !insn.addr !10197
  br i1 %116, label %dec_label_pc_16eaf, label %dec_label_pc_16d66, !insn.addr !10197

dec_label_pc_16d66:                               ; preds = %dec_label_pc_16be5
  %117 = zext i32 %115 to i64, !insn.addr !10196
  %118 = sub nsw i64 %117, zext (i32 ptrtoint (i32* @global_var_1 to i32) to i64), !insn.addr !10198
  %119 = and i64 %118, 4294967295, !insn.addr !10198
  %120 = shl i64 %119, ptrtoint (i16* @global_var_4 to i64), !insn.addr !10199
  %121 = mul i64 %120, ptrtoint (i32* @global_var_1 to i64), !insn.addr !10200
  %122 = add i64 %arg1, ptrtoint (i32** @global_var_20 to i64), !insn.addr !10200
  %123 = add i64 %122, %121, !insn.addr !10200
  %124 = add i64 %arg5, 3072, !insn.addr !10201
  %125 = add i64 %arg5, 1024, !insn.addr !10202
  %126 = add i64 %arg5, 2048, !insn.addr !10203
  store i64 %77, i64* %.reg2mem, !insn.addr !10204
  store i32 %50, i32* %stack_var_-192.0.reg2mem, !insn.addr !10204
  store i64 %105, i64* %rax.0.reg2mem, !insn.addr !10204
  store i64 %104, i64* %rbx.0.reg2mem, !insn.addr !10204
  store i64 %24, i64* %r10.0.reg2mem, !insn.addr !10204
  br label %dec_label_pc_16d84, !insn.addr !10204

dec_label_pc_16d84:                               ; preds = %dec_label_pc_16d84, %dec_label_pc_16d66
  %r10.0.reload = load i64, i64* %r10.0.reg2mem
  %rbx.0.reload = load i64, i64* %rbx.0.reg2mem
  %rax.0.reload = load i64, i64* %rax.0.reg2mem
  %stack_var_-192.0.reload = load i32, i32* %stack_var_-192.0.reg2mem
  %.reload = load i64, i64* %.reg2mem, !insn.addr !10205
  %127 = trunc i64 %r10.0.reload to i32, !insn.addr !10206
  %128 = lshr i32 %127, ptrtoint (i32** @global_var_18 to i32), !insn.addr !10207
  %129 = zext i32 %128 to i64, !insn.addr !10208
  %130 = mul i64 %129, ptrtoint (i16* @global_var_4 to i64), !insn.addr !10209
  %131 = add i64 %130, %arg5, !insn.addr !10209
  %132 = inttoptr i64 %131 to i32*, !insn.addr !10209
  %133 = load i32, i32* %132, align 4, !insn.addr !10209
  %134 = mul i64 %rbx.0.reload, 4, !insn.addr !10210
  %135 = and i64 %134, 1020, !insn.addr !10201
  %136 = add i64 %135, %124, !insn.addr !10201
  %137 = inttoptr i64 %136 to i32*, !insn.addr !10201
  %138 = load i32, i32* %137, align 4, !insn.addr !10201
  %139 = xor i32 %138, %133, !insn.addr !10201
  %140 = inttoptr i64 %rax.0.reload to i32*, !insn.addr !10211
  %141 = load i32, i32* %140, align 4, !insn.addr !10211
  %142 = xor i32 %139, %141, !insn.addr !10211
  %143 = udiv i32 %stack_var_-192.0.reload, 16384
  %144 = and i32 %143, 1020
  %145 = zext i32 %144 to i64, !insn.addr !10202
  %146 = add i64 %125, %145, !insn.addr !10202
  %147 = inttoptr i64 %146 to i32*, !insn.addr !10202
  %148 = load i32, i32* %147, align 4, !insn.addr !10202
  %149 = xor i32 %142, %148, !insn.addr !10202
  %150 = udiv i64 %.reload, 64
  %151 = and i64 %150, 1020, !insn.addr !10203
  %152 = add i64 %151, %126, !insn.addr !10203
  %153 = inttoptr i64 %152 to i32*, !insn.addr !10203
  %154 = load i32, i32* %153, align 4, !insn.addr !10203
  %155 = xor i32 %149, %154, !insn.addr !10203
  %156 = zext i32 %155 to i64, !insn.addr !10203
  %157 = lshr i32 %stack_var_-192.0.reload, ptrtoint (i32** @global_var_18 to i32), !insn.addr !10212
  %158 = zext i32 %157 to i64, !insn.addr !10213
  %159 = mul i64 %158, ptrtoint (i16* @global_var_4 to i64), !insn.addr !10214
  %160 = add i64 %159, %arg5, !insn.addr !10214
  %161 = inttoptr i64 %160 to i32*, !insn.addr !10214
  %162 = load i32, i32* %161, align 4, !insn.addr !10214
  %163 = mul i64 %r10.0.reload, 4, !insn.addr !10215
  %164 = and i64 %163, 1020, !insn.addr !10216
  %165 = add i64 %164, %124, !insn.addr !10216
  %166 = inttoptr i64 %165 to i32*, !insn.addr !10216
  %167 = load i32, i32* %166, align 4, !insn.addr !10216
  %168 = xor i32 %167, %162, !insn.addr !10216
  %169 = add i64 %rax.0.reload, ptrtoint (i16* @global_var_4 to i64), !insn.addr !10217
  %170 = inttoptr i64 %169 to i32*, !insn.addr !10217
  %171 = load i32, i32* %170, align 4, !insn.addr !10217
  %172 = xor i32 %168, %171, !insn.addr !10217
  %173 = udiv i64 %.reload, 16384
  %174 = and i64 %173, 1020, !insn.addr !10218
  %175 = add i64 %174, %125, !insn.addr !10218
  %176 = inttoptr i64 %175 to i32*, !insn.addr !10218
  %177 = load i32, i32* %176, align 4, !insn.addr !10218
  %178 = xor i32 %172, %177, !insn.addr !10218
  %179 = udiv i64 %rbx.0.reload, 64
  %180 = and i64 %179, 1020, !insn.addr !10219
  %181 = add i64 %180, %126, !insn.addr !10219
  %182 = inttoptr i64 %181 to i32*, !insn.addr !10219
  %183 = load i32, i32* %182, align 4, !insn.addr !10219
  %184 = xor i32 %178, %183, !insn.addr !10219
  %185 = trunc i64 %.reload to i32, !insn.addr !10220
  %186 = lshr i32 %185, ptrtoint (i32** @global_var_18 to i32), !insn.addr !10221
  %187 = zext i32 %186 to i64, !insn.addr !10222
  %188 = mul i64 %187, ptrtoint (i16* @global_var_4 to i64), !insn.addr !10223
  %189 = add i64 %188, %arg5, !insn.addr !10223
  %190 = inttoptr i64 %189 to i32*, !insn.addr !10223
  %191 = load i32, i32* %190, align 4, !insn.addr !10223
  %192 = mul i32 %stack_var_-192.0.reload, 4
  %193 = and i32 %192, 1020
  %194 = zext i32 %193 to i64, !insn.addr !10224
  %195 = add i64 %124, %194, !insn.addr !10224
  %196 = inttoptr i64 %195 to i32*, !insn.addr !10224
  %197 = load i32, i32* %196, align 4, !insn.addr !10224
  %198 = xor i32 %197, %191, !insn.addr !10224
  %199 = add i64 %rax.0.reload, ptrtoint (i8* @global_var_8 to i64), !insn.addr !10225
  %200 = inttoptr i64 %199 to i32*, !insn.addr !10225
  %201 = load i32, i32* %200, align 4, !insn.addr !10225
  %202 = xor i32 %198, %201, !insn.addr !10225
  %203 = udiv i64 %rbx.0.reload, 16384
  %204 = and i64 %203, 1020, !insn.addr !10226
  %205 = add i64 %204, %125, !insn.addr !10226
  %206 = inttoptr i64 %205 to i32*, !insn.addr !10226
  %207 = load i32, i32* %206, align 4, !insn.addr !10226
  %208 = xor i32 %202, %207, !insn.addr !10226
  %209 = udiv i64 %r10.0.reload, 64
  %210 = and i64 %209, 1020, !insn.addr !10227
  %211 = add i64 %210, %126, !insn.addr !10227
  %212 = inttoptr i64 %211 to i32*, !insn.addr !10227
  %213 = load i32, i32* %212, align 4, !insn.addr !10227
  %214 = xor i32 %208, %213, !insn.addr !10227
  %215 = zext i32 %214 to i64, !insn.addr !10227
  %216 = trunc i64 %rbx.0.reload to i32, !insn.addr !10228
  %217 = lshr i32 %216, ptrtoint (i32** @global_var_18 to i32), !insn.addr !10228
  %218 = zext i32 %217 to i64, !insn.addr !10229
  %219 = mul i64 %218, 4, !insn.addr !10230
  %220 = add i64 %219, %arg5, !insn.addr !10230
  %221 = inttoptr i64 %220 to i32*, !insn.addr !10230
  %222 = load i32, i32* %221, align 4, !insn.addr !10230
  %223 = mul i64 %.reload, 4, !insn.addr !10231
  %224 = and i64 %223, 1020, !insn.addr !10232
  %225 = add i64 %224, %124, !insn.addr !10232
  %226 = inttoptr i64 %225 to i32*, !insn.addr !10232
  %227 = load i32, i32* %226, align 4, !insn.addr !10232
  %228 = xor i32 %227, %222, !insn.addr !10232
  %229 = add i64 %rax.0.reload, ptrtoint ([4 x i8]* @global_var_c to i64), !insn.addr !10233
  %230 = inttoptr i64 %229 to i32*, !insn.addr !10233
  %231 = load i32, i32* %230, align 4, !insn.addr !10233
  %232 = xor i32 %228, %231, !insn.addr !10233
  %233 = udiv i64 %r10.0.reload, 16384
  %234 = and i64 %233, 1020, !insn.addr !10234
  %235 = add i64 %234, %125, !insn.addr !10234
  %236 = inttoptr i64 %235 to i32*, !insn.addr !10234
  %237 = load i32, i32* %236, align 4, !insn.addr !10234
  %238 = xor i32 %232, %237, !insn.addr !10234
  %239 = udiv i32 %stack_var_-192.0.reload, 64
  %240 = and i32 %239, 1020
  %241 = zext i32 %240 to i64, !insn.addr !10235
  %242 = add i64 %126, %241, !insn.addr !10235
  %243 = inttoptr i64 %242 to i32*, !insn.addr !10235
  %244 = load i32, i32* %243, align 4, !insn.addr !10235
  %245 = xor i32 %238, %244, !insn.addr !10235
  %246 = zext i32 %245 to i64, !insn.addr !10235
  %247 = add i64 %rax.0.reload, ptrtoint (i8* @global_var_10 to i64), !insn.addr !10236
  %248 = icmp eq i64 %247, %123, !insn.addr !10237
  store i64 %215, i64* %.reg2mem, !insn.addr !10238
  store i32 %184, i32* %stack_var_-192.0.reg2mem, !insn.addr !10238
  store i64 %247, i64* %rax.0.reg2mem, !insn.addr !10238
  store i64 %246, i64* %rbx.0.reg2mem, !insn.addr !10238
  store i64 %156, i64* %r10.0.reg2mem, !insn.addr !10238
  br i1 %248, label %dec_label_pc_16e91, label %dec_label_pc_16d84, !insn.addr !10238

dec_label_pc_16e91:                               ; preds = %dec_label_pc_16d84
  %249 = sub i32 %115, ptrtoint (i32* @global_var_1 to i32), !insn.addr !10239
  %250 = zext i32 %249 to i64, !insn.addr !10239
  %251 = shl i64 %250, ptrtoint (i16* @global_var_4 to i64), !insn.addr !10240
  %252 = mul i64 %105, ptrtoint (i32* @global_var_1 to i64), !insn.addr !10241
  %253 = add i64 %252, ptrtoint (i8* @global_var_10 to i64), !insn.addr !10241
  %254 = add i64 %253, %251, !insn.addr !10241
  store i64 %246, i64* %rbx.1.reg2mem, !insn.addr !10242
  store i64 %215, i64* %rsi.0.reg2mem, !insn.addr !10242
  store i32 %184, i32* %r9.0.in.reg2mem, !insn.addr !10242
  store i64 %156, i64* %r10.1.reg2mem, !insn.addr !10242
  store i64 %254, i64* %r14.0.reg2mem, !insn.addr !10242
  br label %dec_label_pc_16eaf, !insn.addr !10242

dec_label_pc_16eaf:                               ; preds = %dec_label_pc_16e91, %dec_label_pc_16be5
  %r10.1.reload = load i64, i64* %r10.1.reg2mem
  %r9.0.in.reload = load i32, i32* %r9.0.in.reg2mem
  %rsi.0.reload = load i64, i64* %rsi.0.reg2mem
  %rbx.1.reload = load i64, i64* %rbx.1.reg2mem
  %r9.0 = zext i32 %r9.0.in.reload to i64
  %255 = icmp eq i32 %107, %arg2, !insn.addr !10243
  %256 = icmp eq i1 %255, false, !insn.addr !10244
  store i64 %rbx.1.reload, i64* %rbx.2.reg2mem, !insn.addr !10244
  store i64 %rsi.0.reload, i64* %rsi.1.reg2mem, !insn.addr !10244
  store i64 %r9.0, i64* %r9.1.reg2mem, !insn.addr !10244
  store i64 %r10.1.reload, i64* %r10.2.reg2mem, !insn.addr !10244
  br i1 %256, label %dec_label_pc_17025, label %dec_label_pc_16eb8, !insn.addr !10244

dec_label_pc_16eb8:                               ; preds = %dec_label_pc_16eaf
  %r14.0.reload = load i64, i64* %r14.0.reg2mem
  %257 = udiv i64 %r10.1.reload, 4194304
  %258 = and i64 %257, 1020, !insn.addr !10245
  %259 = add i64 %arg5, 4096, !insn.addr !10245
  %260 = add i64 %258, %259, !insn.addr !10245
  %261 = inttoptr i64 %260 to i32*, !insn.addr !10245
  %262 = load i32, i32* %261, align 4, !insn.addr !10245
  %263 = and i32 %262, -16777216, !insn.addr !10246
  %264 = mul i64 %rbx.1.reload, 4, !insn.addr !10247
  %265 = and i64 %264, 1020, !insn.addr !10248
  %266 = add i64 %265, %259, !insn.addr !10248
  %267 = inttoptr i64 %266 to i8*, !insn.addr !10248
  %268 = load i8, i8* %267, align 1, !insn.addr !10248
  %269 = zext i8 %268 to i32, !insn.addr !10249
  %270 = or i32 %263, %269
  %271 = inttoptr i64 %r14.0.reload to i32*, !insn.addr !10250
  %272 = load i32, i32* %271, align 4, !insn.addr !10250
  %273 = xor i32 %270, %272, !insn.addr !10250
  %274 = udiv i64 %r9.0, 16384
  %275 = and i64 %274, 1020, !insn.addr !10251
  %276 = add i64 %275, %259, !insn.addr !10251
  %277 = inttoptr i64 %276 to i32*, !insn.addr !10251
  %278 = load i32, i32* %277, align 4, !insn.addr !10251
  %279 = and i32 %278, 16711680, !insn.addr !10252
  %280 = xor i32 %273, %279, !insn.addr !10253
  %281 = udiv i64 %rsi.0.reload, 64
  %282 = and i64 %281, 1020, !insn.addr !10254
  %283 = add i64 %282, %259, !insn.addr !10254
  %284 = inttoptr i64 %283 to i32*, !insn.addr !10254
  %285 = load i32, i32* %284, align 4, !insn.addr !10254
  %286 = and i32 %285, 65280, !insn.addr !10255
  %287 = udiv i64 %r9.0, 4194304
  %288 = and i64 %287, 1020, !insn.addr !10256
  %289 = add i64 %288, %259, !insn.addr !10256
  %290 = inttoptr i64 %289 to i32*, !insn.addr !10256
  %291 = load i32, i32* %290, align 4, !insn.addr !10256
  %292 = and i32 %291, -16777216, !insn.addr !10257
  %293 = mul i64 %r10.1.reload, 4, !insn.addr !10258
  %294 = and i64 %293, 1020, !insn.addr !10259
  %295 = add i64 %294, %259, !insn.addr !10259
  %296 = inttoptr i64 %295 to i8*, !insn.addr !10259
  %297 = load i8, i8* %296, align 1, !insn.addr !10259
  %298 = zext i8 %297 to i32, !insn.addr !10260
  %299 = or i32 %292, %298
  %300 = add i64 %r14.0.reload, ptrtoint (i16* @global_var_4 to i64), !insn.addr !10261
  %301 = inttoptr i64 %300 to i32*, !insn.addr !10261
  %302 = load i32, i32* %301, align 4, !insn.addr !10261
  %303 = xor i32 %299, %302, !insn.addr !10261
  %304 = udiv i64 %rsi.0.reload, 16384
  %305 = and i64 %304, 1020, !insn.addr !10262
  %306 = add i64 %305, %259, !insn.addr !10262
  %307 = inttoptr i64 %306 to i32*, !insn.addr !10262
  %308 = load i32, i32* %307, align 4, !insn.addr !10262
  %309 = and i32 %308, 16711680, !insn.addr !10263
  %310 = xor i32 %303, %309, !insn.addr !10264
  %311 = udiv i64 %rbx.1.reload, 64
  %312 = and i64 %311, 1020, !insn.addr !10265
  %313 = add i64 %312, %259, !insn.addr !10265
  %314 = inttoptr i64 %313 to i32*, !insn.addr !10265
  %315 = load i32, i32* %314, align 4, !insn.addr !10265
  %316 = and i32 %315, 65280, !insn.addr !10266
  %317 = udiv i64 %rsi.0.reload, 4194304
  %318 = and i64 %317, 1020, !insn.addr !10267
  %319 = add i64 %318, %259, !insn.addr !10267
  %320 = inttoptr i64 %319 to i32*, !insn.addr !10267
  %321 = load i32, i32* %320, align 4, !insn.addr !10267
  %322 = and i32 %321, -16777216, !insn.addr !10268
  %323 = mul i64 %r9.0, 4, !insn.addr !10269
  %324 = and i64 %323, 1020, !insn.addr !10270
  %325 = add i64 %324, %259, !insn.addr !10270
  %326 = inttoptr i64 %325 to i8*, !insn.addr !10270
  %327 = load i8, i8* %326, align 1, !insn.addr !10270
  %328 = zext i8 %327 to i32, !insn.addr !10271
  %329 = or i32 %322, %328
  %330 = add i64 %r14.0.reload, ptrtoint (i8* @global_var_8 to i64), !insn.addr !10272
  %331 = inttoptr i64 %330 to i32*, !insn.addr !10272
  %332 = load i32, i32* %331, align 4, !insn.addr !10272
  %333 = xor i32 %329, %332, !insn.addr !10272
  %334 = udiv i64 %rbx.1.reload, 16384
  %335 = and i64 %334, 1020, !insn.addr !10273
  %336 = add i64 %335, %259, !insn.addr !10273
  %337 = inttoptr i64 %336 to i32*, !insn.addr !10273
  %338 = load i32, i32* %337, align 4, !insn.addr !10273
  %339 = and i32 %338, 16711680, !insn.addr !10274
  %340 = xor i32 %333, %339, !insn.addr !10275
  %341 = udiv i64 %r10.1.reload, 64
  %342 = and i64 %341, 1020, !insn.addr !10276
  %343 = add i64 %342, %259, !insn.addr !10276
  %344 = inttoptr i64 %343 to i32*, !insn.addr !10276
  %345 = load i32, i32* %344, align 4, !insn.addr !10276
  %346 = and i32 %345, 65280, !insn.addr !10277
  %347 = udiv i64 %rbx.1.reload, 4194304
  %348 = and i64 %347, 1020, !insn.addr !10278
  %349 = add i64 %348, %259, !insn.addr !10278
  %350 = inttoptr i64 %349 to i32*, !insn.addr !10278
  %351 = load i32, i32* %350, align 4, !insn.addr !10278
  %352 = and i32 %351, -16777216, !insn.addr !10279
  %353 = add i64 %r14.0.reload, ptrtoint ([4 x i8]* @global_var_c to i64), !insn.addr !10280
  %354 = inttoptr i64 %353 to i32*, !insn.addr !10280
  %355 = load i32, i32* %354, align 4, !insn.addr !10280
  %356 = xor i32 %352, %355, !insn.addr !10280
  %357 = zext i32 %356 to i64, !insn.addr !10281
  %358 = xor i32 %340, %346, !insn.addr !10282
  %359 = zext i32 %358 to i64, !insn.addr !10282
  %360 = xor i32 %310, %316, !insn.addr !10283
  %361 = zext i32 %360 to i64, !insn.addr !10283
  %362 = xor i32 %280, %286, !insn.addr !10284
  %363 = zext i32 %362 to i64, !insn.addr !10284
  store i64 %357, i64* %rbx.2.reg2mem, !insn.addr !10284
  store i64 %359, i64* %rsi.1.reg2mem, !insn.addr !10284
  store i64 %361, i64* %r9.1.reg2mem, !insn.addr !10284
  store i64 %363, i64* %r10.2.reg2mem, !insn.addr !10284
  br label %dec_label_pc_17025, !insn.addr !10284

dec_label_pc_17025:                               ; preds = %dec_label_pc_16eb8, %dec_label_pc_16eaf
  %r10.2.reload = load i64, i64* %r10.2.reg2mem
  %r9.1.reload = load i64, i64* %r9.1.reg2mem
  %rsi.1.reload = load i64, i64* %rsi.1.reg2mem
  %rbx.2.reload = load i64, i64* %rbx.2.reg2mem
  %364 = trunc i64 %r10.2.reload to i32, !insn.addr !10285
  %365 = udiv i32 %364, 16777216, !insn.addr !10286
  %366 = trunc i32 %365 to i8, !insn.addr !10287
  %367 = bitcast i64* %arg3 to i8*, !insn.addr !10287
  store i8 %366, i8* %367, align 1, !insn.addr !10287
  %368 = udiv i32 %364, 65536, !insn.addr !10288
  %sext = mul i64 %2, 4294967296
  %369 = sdiv i64 %sext, 4294967296, !insn.addr !10289
  %370 = trunc i32 %368 to i8, !insn.addr !10290
  %371 = inttoptr i64 %369 to i8*, !insn.addr !10290
  store i8 %370, i8* %371, align 1, !insn.addr !10290
  %372 = udiv i32 %364, 256, !insn.addr !10291
  %sext14 = mul i64 %3, 4294967296
  %373 = sdiv i64 %sext14, 4294967296, !insn.addr !10292
  %374 = trunc i32 %372 to i8, !insn.addr !10293
  %375 = inttoptr i64 %373 to i8*, !insn.addr !10293
  store i8 %374, i8* %375, align 1, !insn.addr !10293
  %376 = trunc i64 %r10.2.reload to i8, !insn.addr !10294
  store i8 %376, i8* %5, align 1, !insn.addr !10294
  %377 = trunc i64 %r9.1.reload to i32, !insn.addr !10295
  %378 = udiv i32 %377, 16777216, !insn.addr !10296
  %sext15 = mul i64 %25, 281474976710656
  %379 = sdiv i64 %sext15, 281474976710656, !insn.addr !10297
  %380 = trunc i32 %378 to i8, !insn.addr !10298
  %381 = inttoptr i64 %379 to i8*, !insn.addr !10298
  store i8 %380, i8* %381, align 1, !insn.addr !10298
  %382 = udiv i32 %377, 65536, !insn.addr !10299
  %sext16 = mul i64 %26, 72057594037927936
  %383 = sdiv i64 %sext16, 72057594037927936, !insn.addr !10300
  %384 = trunc i32 %382 to i8, !insn.addr !10301
  %385 = inttoptr i64 %383 to i8*, !insn.addr !10301
  store i8 %384, i8* %385, align 1, !insn.addr !10301
  %386 = udiv i32 %377, 256, !insn.addr !10302
  %sext17 = mul i64 %27, 72057594037927936
  %387 = sdiv i64 %sext17, 72057594037927936, !insn.addr !10303
  %388 = trunc i32 %386 to i8, !insn.addr !10304
  %389 = inttoptr i64 %387 to i8*, !insn.addr !10304
  store i8 %388, i8* %389, align 1, !insn.addr !10304
  %390 = trunc i64 %r9.1.reload to i8, !insn.addr !10305
  store i8 %390, i8* %29, align 1, !insn.addr !10305
  %391 = trunc i64 %rsi.1.reload to i32, !insn.addr !10306
  %392 = udiv i32 %391, 16777216, !insn.addr !10307
  %sext18 = mul i64 %51, 72057594037927936
  %393 = sdiv i64 %sext18, 72057594037927936, !insn.addr !10308
  %394 = trunc i32 %392 to i8, !insn.addr !10309
  %395 = inttoptr i64 %393 to i8*, !insn.addr !10309
  store i8 %394, i8* %395, align 1, !insn.addr !10309
  %396 = udiv i32 %391, 65536, !insn.addr !10310
  %397 = trunc i32 %396 to i8, !insn.addr !10311
  store i8 %397, i8* %53, align 1, !insn.addr !10311
  %398 = udiv i32 %391, 256, !insn.addr !10312
  %sext19 = mul i64 %54, 72057594037927936
  %399 = sdiv i64 %sext19, 72057594037927936, !insn.addr !10313
  %400 = trunc i32 %398 to i8, !insn.addr !10314
  %401 = inttoptr i64 %399 to i8*, !insn.addr !10314
  store i8 %400, i8* %401, align 1, !insn.addr !10314
  %402 = trunc i64 %rsi.1.reload to i8, !insn.addr !10315
  store i8 %402, i8* %56, align 1, !insn.addr !10315
  %403 = udiv i64 %rbx.2.reload, 16777216, !insn.addr !10316
  %404 = urem i64 %403, 256, !insn.addr !10316
  ret i64 %404, !insn.addr !10317
}

define void @rijndaelDecryptRound(i32* %rk, i32 %Nr, i8* %block, i32 %rounds, i64 %pTable) local_unnamed_addr {
dec_label_pc_170bb:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = call i64 @__decompiler_undefined_function_0()
  %2 = call i64 @__decompiler_undefined_function_0()
  %3 = add i64 %0, -72, !insn.addr !10318
  %4 = inttoptr i64 %3 to i64*, !insn.addr !10318
  %5 = load i64, i64* %4, align 8, !insn.addr !10318
  %6 = trunc i64 %2 to i8, !insn.addr !10319
  %7 = inttoptr i64 %5 to i8*, !insn.addr !10319
  store i8 %6, i8* %7, align 1, !insn.addr !10319
  %8 = trunc i64 %1 to i32, !insn.addr !10320
  %9 = lshr i32 %8, ptrtoint (i8* @global_var_8 to i32), !insn.addr !10321
  %10 = add i64 %0, -64, !insn.addr !10322
  %11 = inttoptr i64 %10 to i64*, !insn.addr !10322
  %12 = load i64, i64* %11, align 8, !insn.addr !10322
  %13 = trunc i32 %9 to i8, !insn.addr !10323
  %14 = inttoptr i64 %12 to i8*, !insn.addr !10323
  store i8 %13, i8* %14, align 1, !insn.addr !10323
  %15 = add i64 %0, -56, !insn.addr !10324
  %16 = inttoptr i64 %15 to i64*, !insn.addr !10324
  %17 = load i64, i64* %16, align 8, !insn.addr !10324
  %18 = trunc i64 %1 to i8, !insn.addr !10325
  %19 = inttoptr i64 %17 to i8*, !insn.addr !10325
  store i8 %18, i8* %19, align 1, !insn.addr !10325
  ret void, !insn.addr !10326
}

define i64 @rijndaelDecryptRound.371(i64 %arg1, i32 %arg2, i64* %arg3, i64 %arg4, i64 %arg5) local_unnamed_addr {
dec_label_pc_170eb:
  %r13.0.in.reg2mem = alloca i32, !insn.addr !10327
  %r11.0.in.reg2mem = alloca i32, !insn.addr !10327
  %r10.2.in.reg2mem = alloca i32, !insn.addr !10327
  %rdi.0.in.reg2mem = alloca i32, !insn.addr !10327
  %r14.0.reg2mem = alloca i64, !insn.addr !10327
  %r10.1.reg2mem = alloca i64, !insn.addr !10327
  %r9.0.reg2mem = alloca i64, !insn.addr !10327
  %rsi.0.reg2mem = alloca i64, !insn.addr !10327
  %rbx.1.in.reg2mem = alloca i32, !insn.addr !10327
  %r10.0.reg2mem = alloca i64, !insn.addr !10327
  %rbx.0.reg2mem = alloca i64, !insn.addr !10327
  %rax.0.reg2mem = alloca i64, !insn.addr !10327
  %stack_var_-192.0.reg2mem = alloca i32, !insn.addr !10327
  %.reg2mem = alloca i64, !insn.addr !10327
  %0 = ptrtoint i64* %arg3 to i64
  %1 = call i64 @mcount(), !insn.addr !10328
  %2 = add i64 %0, ptrtoint (i32* @global_var_1 to i64), !insn.addr !10329
  %3 = add i64 %0, ptrtoint (i32* @global_var_2 to i64), !insn.addr !10330
  %4 = add i64 %0, ptrtoint (i8** @global_var_3 to i64), !insn.addr !10331
  %5 = inttoptr i64 %4 to i8*, !insn.addr !10332
  %6 = trunc i64 %0 to i32
  %7 = urem i32 %6, 256, !insn.addr !10333
  %8 = shl i32 %7, ptrtoint (i32** @global_var_18 to i32), !insn.addr !10333
  %9 = load i8, i8* %5, align 1, !insn.addr !10334
  %10 = zext i8 %9 to i32, !insn.addr !10335
  %11 = trunc i64 %arg1 to i32
  %12 = inttoptr i64 %2 to i8*, !insn.addr !10336
  %13 = load i8, i8* %12, align 1, !insn.addr !10336
  %14 = zext i8 %13 to i32, !insn.addr !10337
  %15 = shl i32 %14, ptrtoint (i8* @global_var_10 to i32), !insn.addr !10337
  %16 = inttoptr i64 %3 to i8*, !insn.addr !10338
  %17 = load i8, i8* %16, align 1, !insn.addr !10338
  %18 = zext i8 %17 to i32, !insn.addr !10339
  %19 = shl i32 %18, ptrtoint (i8* @global_var_8 to i32), !insn.addr !10339
  %20 = xor i32 %8, %11, !insn.addr !10335
  %21 = xor i32 %20, %10, !insn.addr !10340
  %22 = xor i32 %21, %15, !insn.addr !10341
  %23 = xor i32 %22, %19, !insn.addr !10342
  %24 = zext i32 %23 to i64, !insn.addr !10342
  %25 = add i64 %0, ptrtoint (i16* @global_var_4 to i64), !insn.addr !10343
  %26 = add i64 %0, ptrtoint (i8* @global_var_5 to i64), !insn.addr !10344
  %27 = add i64 %0, ptrtoint (i8* @global_var_6 to i64), !insn.addr !10345
  %28 = add i64 %0, ptrtoint (i8** @global_var_7 to i64), !insn.addr !10346
  %29 = inttoptr i64 %28 to i8*, !insn.addr !10347
  %30 = load i8, i8* %29, align 1, !insn.addr !10348
  %31 = zext i8 %30 to i32, !insn.addr !10349
  %32 = add i64 %arg1, ptrtoint (i16* @global_var_4 to i64), !insn.addr !10349
  %33 = inttoptr i64 %32 to i32*, !insn.addr !10349
  %34 = load i32, i32* %33, align 4, !insn.addr !10349
  %35 = xor i32 %34, %31, !insn.addr !10349
  %36 = inttoptr i64 %25 to i8*, !insn.addr !10350
  %37 = load i8, i8* %36, align 1, !insn.addr !10350
  %38 = zext i8 %37 to i32, !insn.addr !10351
  %39 = shl i32 %38, ptrtoint (i32** @global_var_18 to i32), !insn.addr !10351
  %40 = xor i32 %35, %39, !insn.addr !10352
  %41 = inttoptr i64 %26 to i8*, !insn.addr !10353
  %42 = load i8, i8* %41, align 1, !insn.addr !10353
  %43 = zext i8 %42 to i32, !insn.addr !10354
  %44 = shl i32 %43, ptrtoint (i8* @global_var_10 to i32), !insn.addr !10354
  %45 = xor i32 %40, %44, !insn.addr !10355
  %46 = inttoptr i64 %27 to i8*, !insn.addr !10356
  %47 = load i8, i8* %46, align 1, !insn.addr !10356
  %48 = zext i8 %47 to i32, !insn.addr !10357
  %49 = shl i32 %48, ptrtoint (i8* @global_var_8 to i32), !insn.addr !10357
  %50 = xor i32 %45, %49, !insn.addr !10358
  %51 = add i64 %0, ptrtoint (i8* @global_var_8 to i64), !insn.addr !10359
  %52 = add i64 %0, ptrtoint (i8** @global_var_9 to i64), !insn.addr !10360
  %53 = inttoptr i64 %52 to i8*, !insn.addr !10361
  %54 = add i64 %0, ptrtoint (i8* @global_var_a to i64), !insn.addr !10362
  %55 = add i64 %0, ptrtoint (i8** @global_var_b to i64), !insn.addr !10363
  %56 = inttoptr i64 %55 to i8*, !insn.addr !10364
  %57 = load i8, i8* %56, align 1, !insn.addr !10365
  %58 = zext i8 %57 to i32, !insn.addr !10366
  %59 = add i64 %arg1, ptrtoint (i8* @global_var_8 to i64), !insn.addr !10366
  %60 = inttoptr i64 %59 to i32*, !insn.addr !10366
  %61 = load i32, i32* %60, align 4, !insn.addr !10366
  %62 = xor i32 %61, %58, !insn.addr !10366
  %63 = inttoptr i64 %51 to i8*, !insn.addr !10367
  %64 = load i8, i8* %63, align 1, !insn.addr !10367
  %65 = zext i8 %64 to i32, !insn.addr !10368
  %66 = shl i32 %65, ptrtoint (i32** @global_var_18 to i32), !insn.addr !10368
  %67 = xor i32 %62, %66, !insn.addr !10369
  %68 = load i8, i8* %53, align 1, !insn.addr !10370
  %69 = zext i8 %68 to i32, !insn.addr !10371
  %70 = shl i32 %69, ptrtoint (i8* @global_var_10 to i32), !insn.addr !10371
  %71 = xor i32 %67, %70, !insn.addr !10372
  %72 = inttoptr i64 %54 to i8*, !insn.addr !10373
  %73 = load i8, i8* %72, align 1, !insn.addr !10373
  %74 = zext i8 %73 to i32, !insn.addr !10374
  %75 = shl i32 %74, ptrtoint (i8* @global_var_8 to i32), !insn.addr !10374
  %76 = xor i32 %71, %75, !insn.addr !10375
  %77 = zext i32 %76 to i64, !insn.addr !10375
  %78 = add i64 %0, ptrtoint ([4 x i8]* @global_var_c to i64), !insn.addr !10376
  %79 = add i64 %0, ptrtoint ([3 x i8]* @global_var_d to i64), !insn.addr !10377
  %80 = add i64 %0, ptrtoint (i16** @global_var_e to i64), !insn.addr !10378
  %81 = add i64 %0, ptrtoint (i8* @global_var_f to i64), !insn.addr !10379
  %82 = inttoptr i64 %81 to i8*, !insn.addr !10380
  %83 = load i8, i8* %82, align 1, !insn.addr !10380
  %84 = zext i8 %83 to i32, !insn.addr !10381
  %85 = add i64 %arg1, ptrtoint ([4 x i8]* @global_var_c to i64), !insn.addr !10381
  %86 = inttoptr i64 %85 to i32*, !insn.addr !10381
  %87 = load i32, i32* %86, align 4, !insn.addr !10381
  %88 = xor i32 %87, %84, !insn.addr !10381
  %89 = inttoptr i64 %78 to i8*, !insn.addr !10382
  %90 = load i8, i8* %89, align 1, !insn.addr !10382
  %91 = zext i8 %90 to i32, !insn.addr !10383
  %92 = shl i32 %91, ptrtoint (i32** @global_var_18 to i32), !insn.addr !10383
  %93 = xor i32 %88, %92, !insn.addr !10384
  %94 = inttoptr i64 %79 to i8*, !insn.addr !10385
  %95 = load i8, i8* %94, align 1, !insn.addr !10385
  %96 = zext i8 %95 to i32, !insn.addr !10386
  %97 = shl i32 %96, ptrtoint (i8* @global_var_10 to i32), !insn.addr !10386
  %98 = xor i32 %93, %97, !insn.addr !10387
  %99 = inttoptr i64 %80 to i8*, !insn.addr !10388
  %100 = load i8, i8* %99, align 1, !insn.addr !10388
  %101 = zext i8 %100 to i32, !insn.addr !10389
  %102 = shl i32 %101, ptrtoint (i8* @global_var_8 to i32), !insn.addr !10389
  %103 = xor i32 %98, %102, !insn.addr !10390
  %104 = zext i32 %103 to i64, !insn.addr !10390
  %105 = add i64 %arg1, ptrtoint (i8* @global_var_10 to i64), !insn.addr !10391
  %106 = trunc i64 %arg4 to i32
  %107 = sub i32 %106, %arg2, !insn.addr !10392
  %108 = xor i32 %106, %arg2, !insn.addr !10392
  %109 = xor i32 %107, %106, !insn.addr !10392
  %110 = and i32 %109, %108, !insn.addr !10392
  %111 = icmp slt i32 %110, 0, !insn.addr !10392
  %112 = icmp eq i32 %107, 0, !insn.addr !10392
  %113 = icmp slt i32 %107, 0, !insn.addr !10392
  %114 = icmp ne i1 %113, %111, !insn.addr !10393
  %115 = or i1 %112, %114, !insn.addr !10393
  %116 = select i1 %115, i32 %106, i32 %arg2, !insn.addr !10393
  %117 = sub i32 %116, ptrtoint (i32* @global_var_1 to i32), !insn.addr !10394
  %118 = icmp slt i32 %117, 1
  store i32 %50, i32* %rbx.1.in.reg2mem, !insn.addr !10395
  store i64 %77, i64* %rsi.0.reg2mem, !insn.addr !10395
  store i64 %104, i64* %r9.0.reg2mem, !insn.addr !10395
  store i64 %24, i64* %r10.1.reg2mem, !insn.addr !10395
  store i64 %105, i64* %r14.0.reg2mem, !insn.addr !10395
  br i1 %118, label %dec_label_pc_173bb, label %dec_label_pc_1725b, !insn.addr !10395

dec_label_pc_1725b:                               ; preds = %dec_label_pc_170eb
  %119 = sub i32 %116, ptrtoint (i32* @global_var_2 to i32), !insn.addr !10396
  %120 = zext i32 %119 to i64, !insn.addr !10396
  %121 = shl i64 %120, ptrtoint (i16* @global_var_4 to i64), !insn.addr !10397
  %122 = mul i64 %121, ptrtoint (i32* @global_var_1 to i64), !insn.addr !10398
  %123 = add i64 %arg1, ptrtoint (i32** @global_var_20 to i64), !insn.addr !10398
  %124 = add i64 %123, %122, !insn.addr !10398
  %125 = add i64 %arg5, 5120, !insn.addr !10399
  %126 = add i64 %arg5, 8192, !insn.addr !10400
  %127 = add i64 %arg5, ptrtoint (i64* @global_var_1800 to i64), !insn.addr !10401
  %128 = add i64 %arg5, 7168, !insn.addr !10402
  store i64 %77, i64* %.reg2mem, !insn.addr !10403
  store i32 %50, i32* %stack_var_-192.0.reg2mem, !insn.addr !10403
  store i64 %105, i64* %rax.0.reg2mem, !insn.addr !10403
  store i64 %104, i64* %rbx.0.reg2mem, !insn.addr !10403
  store i64 %24, i64* %r10.0.reg2mem, !insn.addr !10403
  br label %dec_label_pc_1727e, !insn.addr !10403

dec_label_pc_1727e:                               ; preds = %dec_label_pc_1727e, %dec_label_pc_1725b
  %r10.0.reload = load i64, i64* %r10.0.reg2mem
  %rbx.0.reload = load i64, i64* %rbx.0.reg2mem
  %rax.0.reload = load i64, i64* %rax.0.reg2mem
  %stack_var_-192.0.reload = load i32, i32* %stack_var_-192.0.reg2mem
  %.reload = load i64, i64* %.reg2mem, !insn.addr !10404
  %129 = udiv i64 %r10.0.reload, 4194304
  %130 = and i64 %129, 1020, !insn.addr !10399
  %131 = add i64 %130, %125, !insn.addr !10399
  %132 = inttoptr i64 %131 to i32*, !insn.addr !10399
  %133 = load i32, i32* %132, align 4, !insn.addr !10399
  %134 = mul i32 %stack_var_-192.0.reload, 4
  %135 = and i32 %134, 1020
  %136 = zext i32 %135 to i64, !insn.addr !10400
  %137 = add i64 %126, %136, !insn.addr !10400
  %138 = inttoptr i64 %137 to i32*, !insn.addr !10400
  %139 = load i32, i32* %138, align 4, !insn.addr !10400
  %140 = xor i32 %139, %133, !insn.addr !10400
  %141 = inttoptr i64 %rax.0.reload to i32*, !insn.addr !10405
  %142 = load i32, i32* %141, align 4, !insn.addr !10405
  %143 = xor i32 %140, %142, !insn.addr !10405
  %144 = udiv i64 %rbx.0.reload, 16384
  %145 = and i64 %144, 1020, !insn.addr !10401
  %146 = add i64 %145, %127, !insn.addr !10401
  %147 = inttoptr i64 %146 to i32*, !insn.addr !10401
  %148 = load i32, i32* %147, align 4, !insn.addr !10401
  %149 = xor i32 %143, %148, !insn.addr !10401
  %150 = udiv i64 %.reload, 64
  %151 = and i64 %150, 1020, !insn.addr !10402
  %152 = add i64 %151, %128, !insn.addr !10402
  %153 = inttoptr i64 %152 to i32*, !insn.addr !10402
  %154 = load i32, i32* %153, align 4, !insn.addr !10402
  %155 = xor i32 %149, %154, !insn.addr !10402
  %156 = zext i32 %155 to i64, !insn.addr !10402
  %157 = udiv i32 %stack_var_-192.0.reload, 16777216, !insn.addr !10406
  %158 = mul i32 %157, 4
  %159 = zext i32 %158 to i64, !insn.addr !10407
  %160 = add i64 %125, %159, !insn.addr !10407
  %161 = inttoptr i64 %160 to i32*, !insn.addr !10407
  %162 = load i32, i32* %161, align 4, !insn.addr !10407
  %163 = mul i64 %.reload, 4, !insn.addr !10408
  %164 = and i64 %163, 1020, !insn.addr !10409
  %165 = add i64 %164, %126, !insn.addr !10409
  %166 = inttoptr i64 %165 to i32*, !insn.addr !10409
  %167 = load i32, i32* %166, align 4, !insn.addr !10409
  %168 = xor i32 %167, %162, !insn.addr !10409
  %169 = add i64 %rax.0.reload, ptrtoint (i16* @global_var_4 to i64), !insn.addr !10410
  %170 = inttoptr i64 %169 to i32*, !insn.addr !10410
  %171 = load i32, i32* %170, align 4, !insn.addr !10410
  %172 = xor i32 %168, %171, !insn.addr !10410
  %173 = udiv i64 %r10.0.reload, 16384
  %174 = and i64 %173, 1020, !insn.addr !10411
  %175 = add i64 %174, %127, !insn.addr !10411
  %176 = inttoptr i64 %175 to i32*, !insn.addr !10411
  %177 = load i32, i32* %176, align 4, !insn.addr !10411
  %178 = xor i32 %172, %177, !insn.addr !10411
  %179 = udiv i64 %rbx.0.reload, 64
  %180 = and i64 %179, 1020, !insn.addr !10412
  %181 = add i64 %180, %128, !insn.addr !10412
  %182 = inttoptr i64 %181 to i32*, !insn.addr !10412
  %183 = load i32, i32* %182, align 4, !insn.addr !10412
  %184 = xor i32 %178, %183, !insn.addr !10412
  %185 = udiv i64 %.reload, 4194304
  %186 = and i64 %185, 1020, !insn.addr !10413
  %187 = add i64 %186, %125, !insn.addr !10413
  %188 = inttoptr i64 %187 to i32*, !insn.addr !10413
  %189 = load i32, i32* %188, align 4, !insn.addr !10413
  %190 = mul i64 %rbx.0.reload, 4, !insn.addr !10414
  %191 = and i64 %190, 1020, !insn.addr !10415
  %192 = add i64 %191, %126, !insn.addr !10415
  %193 = inttoptr i64 %192 to i32*, !insn.addr !10415
  %194 = load i32, i32* %193, align 4, !insn.addr !10415
  %195 = xor i32 %194, %189, !insn.addr !10415
  %196 = add i64 %rax.0.reload, ptrtoint (i8* @global_var_8 to i64), !insn.addr !10416
  %197 = inttoptr i64 %196 to i32*, !insn.addr !10416
  %198 = load i32, i32* %197, align 4, !insn.addr !10416
  %199 = xor i32 %195, %198, !insn.addr !10416
  %200 = udiv i32 %stack_var_-192.0.reload, 16384
  %201 = and i32 %200, 1020
  %202 = zext i32 %201 to i64, !insn.addr !10417
  %203 = add i64 %127, %202, !insn.addr !10417
  %204 = inttoptr i64 %203 to i32*, !insn.addr !10417
  %205 = load i32, i32* %204, align 4, !insn.addr !10417
  %206 = xor i32 %199, %205, !insn.addr !10417
  %207 = udiv i64 %r10.0.reload, 64
  %208 = and i64 %207, 1020, !insn.addr !10418
  %209 = add i64 %208, %128, !insn.addr !10418
  %210 = inttoptr i64 %209 to i32*, !insn.addr !10418
  %211 = load i32, i32* %210, align 4, !insn.addr !10418
  %212 = xor i32 %206, %211, !insn.addr !10418
  %213 = zext i32 %212 to i64, !insn.addr !10418
  %214 = udiv i64 %rbx.0.reload, 4194304
  %215 = and i64 %214, 1020, !insn.addr !10419
  %216 = add i64 %215, %125, !insn.addr !10419
  %217 = inttoptr i64 %216 to i32*, !insn.addr !10419
  %218 = load i32, i32* %217, align 4, !insn.addr !10419
  %219 = mul i64 %r10.0.reload, 4, !insn.addr !10420
  %220 = and i64 %219, 1020, !insn.addr !10421
  %221 = add i64 %220, %126, !insn.addr !10421
  %222 = inttoptr i64 %221 to i32*, !insn.addr !10421
  %223 = load i32, i32* %222, align 4, !insn.addr !10421
  %224 = xor i32 %223, %218, !insn.addr !10421
  %225 = add i64 %rax.0.reload, ptrtoint ([4 x i8]* @global_var_c to i64), !insn.addr !10422
  %226 = inttoptr i64 %225 to i32*, !insn.addr !10422
  %227 = load i32, i32* %226, align 4, !insn.addr !10422
  %228 = xor i32 %224, %227, !insn.addr !10422
  %229 = udiv i64 %.reload, 16384
  %230 = and i64 %229, 1020, !insn.addr !10423
  %231 = add i64 %230, %127, !insn.addr !10423
  %232 = inttoptr i64 %231 to i32*, !insn.addr !10423
  %233 = load i32, i32* %232, align 4, !insn.addr !10423
  %234 = xor i32 %228, %233, !insn.addr !10423
  %235 = udiv i32 %stack_var_-192.0.reload, 64
  %236 = and i32 %235, 1020
  %237 = zext i32 %236 to i64, !insn.addr !10424
  %238 = add i64 %128, %237, !insn.addr !10424
  %239 = inttoptr i64 %238 to i32*, !insn.addr !10424
  %240 = load i32, i32* %239, align 4, !insn.addr !10424
  %241 = xor i32 %234, %240, !insn.addr !10424
  %242 = zext i32 %241 to i64, !insn.addr !10424
  %243 = add i64 %rax.0.reload, ptrtoint (i8* @global_var_10 to i64), !insn.addr !10425
  %244 = icmp eq i64 %243, %124, !insn.addr !10426
  store i64 %213, i64* %.reg2mem, !insn.addr !10427
  store i32 %184, i32* %stack_var_-192.0.reg2mem, !insn.addr !10427
  store i64 %243, i64* %rax.0.reg2mem, !insn.addr !10427
  store i64 %242, i64* %rbx.0.reg2mem, !insn.addr !10427
  store i64 %156, i64* %r10.0.reg2mem, !insn.addr !10427
  br i1 %244, label %dec_label_pc_1739a, label %dec_label_pc_1727e, !insn.addr !10427

dec_label_pc_1739a:                               ; preds = %dec_label_pc_1727e
  %245 = mul i64 %105, ptrtoint (i32* @global_var_1 to i64), !insn.addr !10428
  %246 = add i64 %245, ptrtoint (i8* @global_var_10 to i64), !insn.addr !10428
  %247 = add i64 %246, %121, !insn.addr !10428
  store i32 %184, i32* %rbx.1.in.reg2mem, !insn.addr !10429
  store i64 %213, i64* %rsi.0.reg2mem, !insn.addr !10429
  store i64 %242, i64* %r9.0.reg2mem, !insn.addr !10429
  store i64 %156, i64* %r10.1.reg2mem, !insn.addr !10429
  store i64 %247, i64* %r14.0.reg2mem, !insn.addr !10429
  br label %dec_label_pc_173bb, !insn.addr !10429

dec_label_pc_173bb:                               ; preds = %dec_label_pc_1739a, %dec_label_pc_170eb
  %r10.1.reload = load i64, i64* %r10.1.reg2mem
  %r9.0.reload = load i64, i64* %r9.0.reg2mem
  %rsi.0.reload = load i64, i64* %rsi.0.reg2mem
  %rbx.1.in.reload = load i32, i32* %rbx.1.in.reg2mem
  %rbx.1 = zext i32 %rbx.1.in.reload to i64
  %248 = mul i64 %rbx.1, 4, !insn.addr !10430
  %249 = and i64 %248, 1020, !insn.addr !10431
  %250 = add i64 %arg5, 9216, !insn.addr !10431
  %251 = add i64 %249, %250, !insn.addr !10431
  %252 = inttoptr i64 %251 to i8*, !insn.addr !10431
  %253 = load i8, i8* %252, align 1, !insn.addr !10431
  %254 = udiv i64 %r10.1.reload, 4194304
  %255 = and i64 %254, 1020, !insn.addr !10432
  %256 = add i64 %255, %250, !insn.addr !10432
  %257 = inttoptr i64 %256 to i32*, !insn.addr !10432
  %258 = load i32, i32* %257, align 4, !insn.addr !10432
  %259 = and i32 %258, -16777216, !insn.addr !10433
  %260 = zext i8 %253 to i32, !insn.addr !10434
  %261 = or i32 %259, %260
  %262 = udiv i64 %r9.0.reload, 16384
  %263 = and i64 %262, 1020, !insn.addr !10435
  %264 = add i64 %263, %250, !insn.addr !10435
  %265 = inttoptr i64 %264 to i32*, !insn.addr !10435
  %266 = load i32, i32* %265, align 4, !insn.addr !10435
  %267 = and i32 %266, 16711680, !insn.addr !10436
  %268 = or i32 %261, %267
  %269 = udiv i64 %rsi.0.reload, 64
  %270 = and i64 %269, 1020, !insn.addr !10437
  %271 = add i64 %270, %250, !insn.addr !10437
  %272 = inttoptr i64 %271 to i32*, !insn.addr !10437
  %273 = load i32, i32* %272, align 4, !insn.addr !10437
  %274 = and i32 %273, 65280, !insn.addr !10438
  %275 = or i32 %268, %274
  %276 = mul i64 %rsi.0.reload, 4, !insn.addr !10439
  %277 = and i64 %276, 1020, !insn.addr !10440
  %278 = add i64 %277, %250, !insn.addr !10440
  %279 = inttoptr i64 %278 to i8*, !insn.addr !10440
  %280 = load i8, i8* %279, align 1, !insn.addr !10440
  %281 = udiv i64 %rbx.1, 4194304
  %282 = and i64 %281, 1020, !insn.addr !10441
  %283 = add i64 %282, %250, !insn.addr !10441
  %284 = inttoptr i64 %283 to i32*, !insn.addr !10441
  %285 = load i32, i32* %284, align 4, !insn.addr !10441
  %286 = and i32 %285, -16777216, !insn.addr !10442
  %287 = zext i8 %280 to i32, !insn.addr !10443
  %288 = or i32 %286, %287
  %289 = udiv i64 %r10.1.reload, 16384
  %290 = and i64 %289, 1020, !insn.addr !10444
  %291 = add i64 %290, %250, !insn.addr !10444
  %292 = inttoptr i64 %291 to i32*, !insn.addr !10444
  %293 = load i32, i32* %292, align 4, !insn.addr !10444
  %294 = and i32 %293, 16711680, !insn.addr !10445
  %295 = or i32 %288, %294
  %296 = udiv i64 %r9.0.reload, 64
  %297 = and i64 %296, 1020, !insn.addr !10446
  %298 = add i64 %297, %250, !insn.addr !10446
  %299 = inttoptr i64 %298 to i32*, !insn.addr !10446
  %300 = load i32, i32* %299, align 4, !insn.addr !10446
  %301 = and i32 %300, 65280, !insn.addr !10447
  %302 = or i32 %295, %301
  %303 = mul i64 %r9.0.reload, 4, !insn.addr !10448
  %304 = and i64 %303, 1020, !insn.addr !10449
  %305 = add i64 %304, %250, !insn.addr !10449
  %306 = inttoptr i64 %305 to i8*, !insn.addr !10449
  %307 = load i8, i8* %306, align 1, !insn.addr !10449
  %308 = udiv i64 %rsi.0.reload, 4194304
  %309 = and i64 %308, 1020, !insn.addr !10450
  %310 = add i64 %309, %250, !insn.addr !10450
  %311 = inttoptr i64 %310 to i32*, !insn.addr !10450
  %312 = load i32, i32* %311, align 4, !insn.addr !10450
  %313 = and i32 %312, -16777216, !insn.addr !10451
  %314 = zext i8 %307 to i32, !insn.addr !10452
  %315 = or i32 %313, %314
  %316 = udiv i64 %rbx.1, 16384
  %317 = and i64 %316, 1020, !insn.addr !10453
  %318 = add i64 %317, %250, !insn.addr !10453
  %319 = inttoptr i64 %318 to i32*, !insn.addr !10453
  %320 = load i32, i32* %319, align 4, !insn.addr !10453
  %321 = and i32 %320, 16711680, !insn.addr !10454
  %322 = or i32 %315, %321
  %323 = udiv i64 %r10.1.reload, 64
  %324 = and i64 %323, 1020, !insn.addr !10455
  %325 = add i64 %324, %250, !insn.addr !10455
  %326 = inttoptr i64 %325 to i32*, !insn.addr !10455
  %327 = load i32, i32* %326, align 4, !insn.addr !10455
  %328 = and i32 %327, 65280, !insn.addr !10456
  %329 = or i32 %322, %328
  %330 = udiv i64 %r9.0.reload, 4194304
  %331 = and i64 %330, 1020, !insn.addr !10457
  %332 = add i64 %331, %250, !insn.addr !10457
  %333 = inttoptr i64 %332 to i32*, !insn.addr !10457
  %334 = load i32, i32* %333, align 4, !insn.addr !10457
  %335 = and i32 %334, -16777216, !insn.addr !10458
  %336 = icmp eq i32 %106, %arg2, !insn.addr !10459
  %337 = icmp eq i1 %336, false, !insn.addr !10460
  store i32 %275, i32* %rdi.0.in.reg2mem, !insn.addr !10460
  store i32 %335, i32* %r10.2.in.reg2mem, !insn.addr !10460
  store i32 %329, i32* %r11.0.in.reg2mem, !insn.addr !10460
  store i32 %302, i32* %r13.0.in.reg2mem, !insn.addr !10460
  br i1 %337, label %dec_label_pc_1752e, label %dec_label_pc_1751f, !insn.addr !10460

dec_label_pc_1751f:                               ; preds = %dec_label_pc_173bb
  %r14.0.reload = load i64, i64* %r14.0.reg2mem
  %338 = inttoptr i64 %r14.0.reload to i32*, !insn.addr !10461
  %339 = load i32, i32* %338, align 4, !insn.addr !10461
  %340 = xor i32 %339, %275, !insn.addr !10461
  %341 = add i64 %r14.0.reload, ptrtoint (i16* @global_var_4 to i64), !insn.addr !10462
  %342 = inttoptr i64 %341 to i32*, !insn.addr !10462
  %343 = load i32, i32* %342, align 4, !insn.addr !10462
  %344 = xor i32 %343, %302, !insn.addr !10462
  %345 = add i64 %r14.0.reload, ptrtoint (i8* @global_var_8 to i64), !insn.addr !10463
  %346 = inttoptr i64 %345 to i32*, !insn.addr !10463
  %347 = load i32, i32* %346, align 4, !insn.addr !10463
  %348 = xor i32 %347, %329, !insn.addr !10463
  %349 = add i64 %r14.0.reload, ptrtoint ([4 x i8]* @global_var_c to i64), !insn.addr !10464
  %350 = inttoptr i64 %349 to i32*, !insn.addr !10464
  %351 = load i32, i32* %350, align 4, !insn.addr !10464
  %352 = xor i32 %351, %335, !insn.addr !10464
  store i32 %340, i32* %rdi.0.in.reg2mem, !insn.addr !10464
  store i32 %352, i32* %r10.2.in.reg2mem, !insn.addr !10464
  store i32 %348, i32* %r11.0.in.reg2mem, !insn.addr !10464
  store i32 %344, i32* %r13.0.in.reg2mem, !insn.addr !10464
  br label %dec_label_pc_1752e, !insn.addr !10464

dec_label_pc_1752e:                               ; preds = %dec_label_pc_1751f, %dec_label_pc_173bb
  %r13.0.in.reload = load i32, i32* %r13.0.in.reg2mem
  %r11.0.in.reload = load i32, i32* %r11.0.in.reg2mem
  %r10.2.in.reload = load i32, i32* %r10.2.in.reg2mem
  %rdi.0.in.reload = load i32, i32* %rdi.0.in.reg2mem
  %353 = udiv i32 %rdi.0.in.reload, 16777216, !insn.addr !10465
  %354 = trunc i32 %353 to i8, !insn.addr !10466
  %355 = bitcast i64* %arg3 to i8*, !insn.addr !10466
  store i8 %354, i8* %355, align 1, !insn.addr !10466
  %356 = udiv i32 %rdi.0.in.reload, 65536, !insn.addr !10467
  %sext = mul i64 %2, 4294967296
  %357 = sdiv i64 %sext, 4294967296, !insn.addr !10468
  %358 = trunc i32 %356 to i8, !insn.addr !10469
  %359 = inttoptr i64 %357 to i8*, !insn.addr !10469
  store i8 %358, i8* %359, align 1, !insn.addr !10469
  %360 = udiv i32 %rdi.0.in.reload, 256, !insn.addr !10470
  %sext14 = mul i64 %3, 4294967296
  %361 = sdiv i64 %sext14, 4294967296, !insn.addr !10471
  %362 = trunc i32 %360 to i8, !insn.addr !10472
  %363 = inttoptr i64 %361 to i8*, !insn.addr !10472
  store i8 %362, i8* %363, align 1, !insn.addr !10472
  %364 = trunc i32 %rdi.0.in.reload to i8, !insn.addr !10473
  store i8 %364, i8* %5, align 1, !insn.addr !10473
  %365 = udiv i32 %r13.0.in.reload, 16777216, !insn.addr !10474
  %sext15 = mul i64 %25, 281474976710656
  %366 = sdiv i64 %sext15, 281474976710656, !insn.addr !10475
  %367 = trunc i32 %365 to i8, !insn.addr !10476
  %368 = inttoptr i64 %366 to i8*, !insn.addr !10476
  store i8 %367, i8* %368, align 1, !insn.addr !10476
  %369 = udiv i32 %r13.0.in.reload, 65536, !insn.addr !10477
  %sext16 = mul i64 %26, 72057594037927936
  %370 = sdiv i64 %sext16, 72057594037927936, !insn.addr !10478
  %371 = trunc i32 %369 to i8, !insn.addr !10479
  %372 = inttoptr i64 %370 to i8*, !insn.addr !10479
  store i8 %371, i8* %372, align 1, !insn.addr !10479
  %373 = udiv i32 %r13.0.in.reload, 256, !insn.addr !10480
  %sext17 = mul i64 %27, 72057594037927936
  %374 = sdiv i64 %sext17, 72057594037927936, !insn.addr !10481
  %375 = trunc i32 %373 to i8, !insn.addr !10482
  %376 = inttoptr i64 %374 to i8*, !insn.addr !10482
  store i8 %375, i8* %376, align 1, !insn.addr !10482
  %377 = trunc i32 %r13.0.in.reload to i8, !insn.addr !10483
  store i8 %377, i8* %29, align 1, !insn.addr !10483
  %378 = udiv i32 %r11.0.in.reload, 16777216, !insn.addr !10484
  %sext18 = mul i64 %51, 72057594037927936
  %379 = sdiv i64 %sext18, 72057594037927936, !insn.addr !10485
  %380 = trunc i32 %378 to i8, !insn.addr !10486
  %381 = inttoptr i64 %379 to i8*, !insn.addr !10486
  store i8 %380, i8* %381, align 1, !insn.addr !10486
  %382 = udiv i32 %r11.0.in.reload, 65536, !insn.addr !10487
  %383 = trunc i32 %382 to i8, !insn.addr !10488
  store i8 %383, i8* %53, align 1, !insn.addr !10488
  %384 = udiv i32 %r11.0.in.reload, 256, !insn.addr !10489
  %sext19 = mul i64 %54, 72057594037927936
  %385 = sdiv i64 %sext19, 72057594037927936, !insn.addr !10490
  %386 = trunc i32 %384 to i8, !insn.addr !10491
  %387 = inttoptr i64 %385 to i8*, !insn.addr !10491
  store i8 %386, i8* %387, align 1, !insn.addr !10491
  %388 = trunc i32 %r11.0.in.reload to i8, !insn.addr !10492
  store i8 %388, i8* %56, align 1, !insn.addr !10492
  %389 = udiv i32 %r10.2.in.reload, 16777216
  %390 = zext i32 %389 to i64, !insn.addr !10493
  %391 = trunc i32 %389 to i8, !insn.addr !10494
  store i8 %391, i8* %89, align 1, !insn.addr !10494
  ret i64 %390, !insn.addr !10494
}

define i32 @cipherUpdateRounds(i64 %cipher, i64 %key, i8* %input, i32 %inputLen, i8* %outBuffer, i32 %rounds, i64 %pTable) local_unnamed_addr {
dec_label_pc_175c7:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = call i64 @__decompiler_undefined_function_0()
  %2 = trunc i32 %inputLen to i8, !insn.addr !10495
  %3 = shl i8 %2, ptrtoint (i32* @global_var_1 to i8), !insn.addr !10495
  %4 = or i8 %3, %2, !insn.addr !10495
  %5 = call i64 @unknown_758cbdde(), !insn.addr !10496
  %6 = shl i8 %4, ptrtoint (i32* @global_var_1 to i8), !insn.addr !10497
  %7 = or i8 %6, %4, !insn.addr !10497
  %8 = zext i8 %7 to i64, !insn.addr !10497
  %9 = and i32 %inputLen, -256
  %10 = sext i32 %9 to i64, !insn.addr !10497
  %11 = or i64 %8, %10, !insn.addr !10497
  %12 = call i64 @unknown_4d8cc1e2(), !insn.addr !10498
  %13 = add nsw i64 %11, -120, !insn.addr !10499
  %14 = inttoptr i64 %13 to i8*, !insn.addr !10499
  %15 = load i8, i8* %14, align 1, !insn.addr !10499
  %16 = shl i8 %15, ptrtoint (i32* @global_var_1 to i8), !insn.addr !10499
  %17 = or i8 %16, %15, !insn.addr !10499
  store i8 %17, i8* %14, align 1, !insn.addr !10499
  %18 = add i64 %1, -56, !insn.addr !10500
  %19 = inttoptr i64 %18 to i64*, !insn.addr !10500
  %20 = load i64, i64* %19, align 8, !insn.addr !10500
  %21 = trunc i64 %0 to i8, !insn.addr !10501
  %22 = inttoptr i64 %20 to i8*, !insn.addr !10501
  store i8 %21, i8* %22, align 1, !insn.addr !10501
  %23 = trunc i64 %12 to i32, !insn.addr !10502
  ret i32 %23, !insn.addr !10502
}

define i64 @cipherUpdateRounds.321(i64 %arg1, i64 %arg2, i64 %arg3, i64* %arg4, i64 %arg5, i32 %arg6, i64 %arg7) local_unnamed_addr {
dec_label_pc_175f7:
  %rbx.0.reg2mem = alloca i64, !insn.addr !10503
  %merge.reg2mem = alloca i64, !insn.addr !10503
  %stack_var_-248 = alloca i64, align 8
  %0 = call i64 @mcount(), !insn.addr !10504
  %1 = call i64 @__readgsqword(i64 40), !insn.addr !10505
  %2 = icmp ne i64 %arg1, 0, !insn.addr !10506
  %3 = icmp eq i64 %arg2, 0, !insn.addr !10507
  %4 = icmp eq i1 %3, false, !insn.addr !10508
  %or.cond = icmp eq i1 %2, %4
  store i64 4294967291, i64* %merge.reg2mem, !insn.addr !10509
  br i1 %or.cond, label %dec_label_pc_1764c, label %dec_label_pc_17642, !insn.addr !10509

dec_label_pc_17642:                               ; preds = %dec_label_pc_176a3, %dec_label_pc_175f7, %dec_label_pc_17653
  %merge.reload = load i64, i64* %merge.reg2mem
  ret i64 %merge.reload, !insn.addr !10510

dec_label_pc_1764c:                               ; preds = %dec_label_pc_175f7
  %5 = sext i32 %arg6 to i64
  %6 = ptrtoint i64* %arg4 to i64
  %7 = trunc i64 %arg2 to i8
  %8 = icmp eq i8 %7, 0, !insn.addr !10511
  br i1 %8, label %dec_label_pc_1766e, label %dec_label_pc_17653, !insn.addr !10512

dec_label_pc_17653:                               ; preds = %dec_label_pc_1764c
  %9 = trunc i64 %6 to i32, !insn.addr !10513
  %10 = icmp eq i32 %9, 0, !insn.addr !10513
  %11 = icmp slt i32 %9, 0, !insn.addr !10513
  %12 = icmp eq i1 %11, false, !insn.addr !10514
  %13 = icmp eq i1 %10, false, !insn.addr !10514
  %14 = icmp eq i1 %12, %13, !insn.addr !10514
  store i64 4294967295, i64* %merge.reg2mem, !insn.addr !10514
  br i1 %14, label %dec_label_pc_1770e, label %dec_label_pc_17642, !insn.addr !10514

dec_label_pc_1766e:                               ; preds = %dec_label_pc_1764c
  %15 = add i64 %arg2, 80, !insn.addr !10515
  %16 = and i64 %5, 4294967295, !insn.addr !10516
  %17 = add i64 %arg2, 76, !insn.addr !10517
  %18 = inttoptr i64 %17 to i32*, !insn.addr !10517
  %sext2 = mul i64 %6, 4294967296
  %19 = sdiv i64 %sext2, 4294967296
  store i64 0, i64* %rbx.0.reg2mem, !insn.addr !10516
  br label %dec_label_pc_176a3, !insn.addr !10516

dec_label_pc_176a3:                               ; preds = %dec_label_pc_176a3, %dec_label_pc_1766e
  %rbx.0.reload = load i64, i64* %rbx.0.reg2mem
  %sext = mul i64 %rbx.0.reload, 4294967296
  %20 = sdiv i64 %sext, 4294967296, !insn.addr !10518
  %21 = mul i64 %20, ptrtoint (i32* @global_var_1 to i64), !insn.addr !10519
  %22 = add i64 %21, %arg3, !insn.addr !10519
  %23 = inttoptr i64 %22 to i64*, !insn.addr !10520
  %24 = load i64, i64* %23, align 8, !insn.addr !10520
  store i64 %24, i64* %stack_var_-248, align 8, !insn.addr !10521
  %25 = add i64 %22, ptrtoint (i8* @global_var_8 to i64), !insn.addr !10522
  %26 = inttoptr i64 %25 to i64*, !insn.addr !10522
  %27 = load i64, i64* %26, align 8, !insn.addr !10522
  %28 = load i32, i32* %18, align 4, !insn.addr !10517
  %29 = call i64 @rijndaelEncryptRound.353(i64 %15, i32 %28, i64* nonnull %stack_var_-248, i64 %16, i64 %arg7), !insn.addr !10523
  %30 = add i64 %20, %arg5, !insn.addr !10524
  %31 = load i64, i64* %stack_var_-248, align 8, !insn.addr !10525
  %32 = inttoptr i64 %30 to i64*, !insn.addr !10526
  store i64 %31, i64* %32, align 8, !insn.addr !10526
  %33 = add i64 %30, ptrtoint (i8* @global_var_8 to i64), !insn.addr !10527
  %34 = inttoptr i64 %33 to i64*, !insn.addr !10527
  store i64 %27, i64* %34, align 8, !insn.addr !10527
  %35 = add nuw nsw i64 %rbx.0.reload, zext (i32 ptrtoint (i8* @global_var_10 to i32) to i64), !insn.addr !10528
  %36 = and i64 %35, 4294967295, !insn.addr !10528
  %37 = icmp sgt i64 %19, %36, !insn.addr !10529
  store i64 %27, i64* %merge.reg2mem, !insn.addr !10529
  store i64 %36, i64* %rbx.0.reg2mem, !insn.addr !10529
  br i1 %37, label %dec_label_pc_176a3, label %dec_label_pc_17642, !insn.addr !10529

dec_label_pc_1770e:                               ; preds = %dec_label_pc_17653
  %38 = add i64 %arg2, 80, !insn.addr !10530
  %39 = inttoptr i64 %arg3 to i64*, !insn.addr !10531
  %40 = load i64, i64* %39, align 8, !insn.addr !10531
  store i64 %40, i64* %stack_var_-248, align 8, !insn.addr !10532
  %41 = add i64 %arg3, ptrtoint (i8* @global_var_8 to i64), !insn.addr !10533
  %42 = inttoptr i64 %41 to i64*, !insn.addr !10533
  %43 = load i64, i64* %42, align 8, !insn.addr !10533
  %44 = add i64 %arg2, 76, !insn.addr !10534
  %45 = inttoptr i64 %44 to i32*, !insn.addr !10534
  %46 = load i32, i32* %45, align 4, !insn.addr !10534
  %47 = and i64 %5, 4294967295, !insn.addr !10535
  %48 = call i64 @rijndaelDecryptRound.371(i64 %38, i32 %46, i64* nonnull %stack_var_-248, i64 %47, i64 %arg7), !insn.addr !10536
  %49 = load i64, i64* %stack_var_-248, align 8, !insn.addr !10537
  %50 = inttoptr i64 %arg5 to i64*, !insn.addr !10538
  store i64 %49, i64* %50, align 8, !insn.addr !10538
  %51 = add i64 %arg5, ptrtoint (i8* @global_var_8 to i64), !insn.addr !10539
  %52 = inttoptr i64 %51 to i64*, !insn.addr !10539
  store i64 %43, i64* %52, align 8, !insn.addr !10539
  ret i64 %43, !insn.addr !10540
}

define i32 @cipherInit(i64 %cipher, i8 %mode, i8* %IV) local_unnamed_addr {
dec_label_pc_177a0:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = trunc i64 %0 to i32
  ret i32 %1
}

define i64 @cipherInit.466(i64 %arg1, i64* %arg2, i64 %arg3) local_unnamed_addr {
dec_label_pc_177d0:
  %.masked2.pn.in.reg2mem = alloca i64, !insn.addr !10541
  %rcx.0.reg2mem = alloca i64, !insn.addr !10541
  %0 = ptrtoint i64* %arg2 to i64
  %1 = call i64 @mcount(), !insn.addr !10542
  %2 = trunc i64 %0 to i8, !insn.addr !10543
  %3 = inttoptr i64 %arg1 to i8*, !insn.addr !10543
  store i8 %2, i8* %3, align 1, !insn.addr !10543
  %4 = inttoptr i64 %arg3 to i8*, !insn.addr !10544
  %5 = load i8, i8* %4, align 1, !insn.addr !10544
  %6 = sext i8 %5 to i32
  %7 = add nsw i32 %6, -48, !insn.addr !10545
  %8 = icmp ugt i32 %7, ptrtoint (i8** @global_var_9 to i32)
  br i1 %8, label %dec_label_pc_17811, label %dec_label_pc_1780a, !insn.addr !10546

dec_label_pc_1780a:                               ; preds = %dec_label_pc_177d0
  %9 = shl i32 %7, ptrtoint (i16* @global_var_4 to i32), !insn.addr !10547
  %10 = zext i32 %9 to i64, !insn.addr !10547
  store i64 %10, i64* %rcx.0.reg2mem, !insn.addr !10548
  br label %dec_label_pc_17832, !insn.addr !10548

dec_label_pc_17811:                               ; preds = %dec_label_pc_177d0
  %11 = sext i8 %5 to i64, !insn.addr !10544
  %12 = add nsw i32 %6, -97, !insn.addr !10549
  %13 = icmp ugt i32 %12, ptrtoint (i8* @global_var_5 to i32)
  %14 = mul i64 %11, 16
  br i1 %13, label %dec_label_pc_17822, label %dec_label_pc_1781a, !insn.addr !10550

dec_label_pc_1781a:                               ; preds = %dec_label_pc_17811
  %15 = add nsw i64 %14, 4294965904, !insn.addr !10551
  %16 = and i64 %15, 4294967280, !insn.addr !10551
  store i64 %16, i64* %rcx.0.reg2mem, !insn.addr !10552
  br label %dec_label_pc_17832, !insn.addr !10552

dec_label_pc_17822:                               ; preds = %dec_label_pc_17811
  %17 = add nsw i64 %14, 4294966416, !insn.addr !10553
  %18 = and i64 %17, 4294967280, !insn.addr !10553
  store i64 %18, i64* %rcx.0.reg2mem, !insn.addr !10553
  br label %dec_label_pc_17832, !insn.addr !10553

dec_label_pc_17832:                               ; preds = %dec_label_pc_17822, %dec_label_pc_1781a, %dec_label_pc_1780a
  %rcx.0.reload = load i64, i64* %rcx.0.reg2mem
  %19 = add i64 %arg3, ptrtoint (i32* @global_var_1 to i64), !insn.addr !10554
  %20 = inttoptr i64 %19 to i8*, !insn.addr !10554
  %21 = load i8, i8* %20, align 1, !insn.addr !10554
  %22 = sext i8 %21 to i64, !insn.addr !10554
  %23 = add nsw i64 %22, 4294967248, !insn.addr !10555
  %24 = trunc i64 %23 to i32, !insn.addr !10556
  %25 = icmp ugt i32 %24, ptrtoint (i8** @global_var_9 to i32)
  store i64 %23, i64* %.masked2.pn.in.reg2mem, !insn.addr !10557
  br i1 %25, label %dec_label_pc_1784b, label %dec_label_pc_1786b, !insn.addr !10557

dec_label_pc_1784b:                               ; preds = %dec_label_pc_17832
  %26 = sext i8 %21 to i32
  %27 = add nsw i32 %26, -97, !insn.addr !10558
  %28 = icmp ugt i32 %27, ptrtoint (i8* @global_var_5 to i32)
  br i1 %28, label %dec_label_pc_1785c, label %dec_label_pc_17855, !insn.addr !10559

dec_label_pc_17855:                               ; preds = %dec_label_pc_1784b
  %29 = add nsw i64 %22, 4294967209, !insn.addr !10560
  store i64 %29, i64* %.masked2.pn.in.reg2mem, !insn.addr !10561
  br label %dec_label_pc_1786b, !insn.addr !10561

dec_label_pc_1785c:                               ; preds = %dec_label_pc_1784b
  %30 = add nsw i64 %22, 4294967241, !insn.addr !10562
  store i64 %30, i64* %.masked2.pn.in.reg2mem, !insn.addr !10563
  br label %dec_label_pc_1786b, !insn.addr !10563

dec_label_pc_1786b:                               ; preds = %dec_label_pc_17832, %dec_label_pc_1785c, %dec_label_pc_17855
  %.masked2.pn.in.reload = load i64, i64* %.masked2.pn.in.reg2mem
  %rsi.0 = xor i64 %.masked2.pn.in.reload, %rcx.0.reload
  %31 = trunc i64 %rsi.0 to i8, !insn.addr !10564
  %32 = add i64 %arg1, ptrtoint (i32* @global_var_1 to i64), !insn.addr !10564
  %33 = inttoptr i64 %32 to i8*, !insn.addr !10564
  store i8 %31, i8* %33, align 1, !insn.addr !10564
  ret i64 ptrtoint (i32* @global_var_2 to i64), !insn.addr !10565
}

define i32 @makeKey(i64 %key, i8 %direction, i32 %keyLen, i8* %keyMaterial, i64 %pTable) local_unnamed_addr {
dec_label_pc_17876:
  %rdi = alloca i64, align 8
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = ptrtoint i8* %keyMaterial to i64
  %2 = add i64 %0, -125, !insn.addr !10566
  %3 = inttoptr i64 %2 to i32*, !insn.addr !10566
  %4 = load i32, i32* %3, align 4, !insn.addr !10566
  %5 = trunc i64 %1 to i32, !insn.addr !10566
  %6 = add i32 %4, %5, !insn.addr !10566
  store i32 %6, i32* %3, align 4, !insn.addr !10566
  %7 = bitcast i64* %rdi to i8*
  %8 = load i8, i8* %7, align 8, !insn.addr !10567
  %9 = trunc i64 %1 to i8, !insn.addr !10567
  %10 = and i8 %8, %9, !insn.addr !10567
  %11 = inttoptr i64 %key to i8*, !insn.addr !10567
  store i8 %10, i8* %11, align 1, !insn.addr !10567
  %12 = trunc i64 %0 to i32, !insn.addr !10568
  ret i32 %12, !insn.addr !10568
}

define i64 @function_17881() local_unnamed_addr {
dec_label_pc_17881:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = and i64 %0, -256, !insn.addr !10569
  %2 = or i64 %1, ptrtoint (i32* @global_var_1 to i64), !insn.addr !10569
  ret i64 %2, !insn.addr !10570
}

define i64 @makeKey.363(i64* %arg1, i64 %arg2, i64 %arg3, i64* %arg4, i64 %arg5) local_unnamed_addr {
dec_label_pc_178a6:
  %.pre-phi.reg2mem = alloca i64, !insn.addr !10571
  %.masked2.pn.in.reg2mem = alloca i64, !insn.addr !10571
  %rax.0.reg2mem = alloca i64, !insn.addr !10571
  %rdi.0.reg2mem = alloca i64, !insn.addr !10571
  %rsi.0.reg2mem = alloca i64, !insn.addr !10571
  %rcx.0.reg2mem = alloca i64, !insn.addr !10571
  %.reg2mem = alloca i32, !insn.addr !10571
  %0 = ptrtoint i64* %arg1 to i64
  %stack_var_-88 = alloca i64, align 8
  %1 = call i64 @mcount(), !insn.addr !10572
  %2 = call i64 @__readgsqword(i64 40), !insn.addr !10573
  %3 = trunc i64 %arg2 to i8, !insn.addr !10574
  %4 = bitcast i64* %arg1 to i8*, !insn.addr !10574
  store i8 %3, i8* %4, align 1, !insn.addr !10574
  %5 = trunc i64 %arg3 to i32, !insn.addr !10575
  %6 = add i64 %0, ptrtoint (i16* @global_var_4 to i64), !insn.addr !10575
  %7 = inttoptr i64 %6 to i32*, !insn.addr !10575
  store i32 %5, i32* %7, align 4, !insn.addr !10575
  %8 = icmp eq i64* %arg4, null, !insn.addr !10576
  store i32 %5, i32* %.reg2mem, !insn.addr !10577
  br i1 %8, label %dec_label_pc_17938, label %dec_label_pc_1791a, !insn.addr !10577

dec_label_pc_1791a:                               ; preds = %dec_label_pc_178a6
  %9 = ptrtoint i64* %arg4 to i64
  %10 = add i32 %5, ptrtoint (i8** @global_var_3 to i32), !insn.addr !10578
  %11 = icmp slt i32 %5, 0, !insn.addr !10579
  %12 = icmp eq i1 %11, false, !insn.addr !10580
  %13 = select i1 %12, i32 %5, i32 %10, !insn.addr !10580
  %14 = ashr i32 %13, ptrtoint (i32* @global_var_2 to i32), !insn.addr !10581
  %15 = sext i32 %14 to i64, !insn.addr !10582
  %16 = add i64 %0, ptrtoint (i8* @global_var_8 to i64), !insn.addr !10583
  %17 = call i64 @strncpy(i64 %16, i64 %9, i64 %15), !insn.addr !10584
  %.pr = load i32, i32* %7, align 4
  store i32 %.pr, i32* %.reg2mem, !insn.addr !10584
  br label %dec_label_pc_17938, !insn.addr !10584

dec_label_pc_17938:                               ; preds = %dec_label_pc_1791a, %dec_label_pc_178a6
  %.reload = load i32, i32* %.reg2mem, !insn.addr !10585
  %18 = icmp sgt i32 %.reload, ptrtoint (i8** @global_var_7 to i32), !insn.addr !10586
  br i1 %18, label %dec_label_pc_17942, label %dec_label_pc_179e5, !insn.addr !10586

dec_label_pc_17942:                               ; preds = %dec_label_pc_17938
  %19 = add i64 %0, ptrtoint (i8* @global_var_8 to i64), !insn.addr !10587
  %20 = ptrtoint i64* %stack_var_-88 to i64, !insn.addr !10588
  store i64 %19, i64* %rcx.0.reg2mem, !insn.addr !10589
  store i64 0, i64* %rsi.0.reg2mem, !insn.addr !10589
  store i64 %20, i64* %rdi.0.reg2mem, !insn.addr !10589
  br label %dec_label_pc_1794f, !insn.addr !10589

dec_label_pc_1794f:                               ; preds = %dec_label_pc_179dc, %dec_label_pc_17942
  %rdi.0.reload = load i64, i64* %rdi.0.reg2mem
  %rsi.0.reload = load i64, i64* %rsi.0.reg2mem
  %rcx.0.reload = load i64, i64* %rcx.0.reg2mem
  %21 = inttoptr i64 %rcx.0.reload to i8*, !insn.addr !10590
  %22 = load i8, i8* %21, align 1, !insn.addr !10590
  %23 = sext i8 %22 to i32
  %24 = add nsw i32 %23, -48, !insn.addr !10591
  %25 = icmp ugt i32 %24, ptrtoint (i8** @global_var_9 to i32)
  br i1 %25, label %dec_label_pc_17964, label %dec_label_pc_1795d, !insn.addr !10592

dec_label_pc_1795d:                               ; preds = %dec_label_pc_1794f
  %26 = shl i32 %24, ptrtoint (i16* @global_var_4 to i32), !insn.addr !10593
  %27 = zext i32 %26 to i64, !insn.addr !10593
  store i64 %27, i64* %rax.0.reg2mem, !insn.addr !10594
  br label %dec_label_pc_17989, !insn.addr !10594

dec_label_pc_17964:                               ; preds = %dec_label_pc_1794f
  %28 = sext i8 %22 to i64, !insn.addr !10590
  %29 = add nsw i32 %23, -97, !insn.addr !10595
  %30 = icmp ugt i32 %29, ptrtoint (i8* @global_var_5 to i32)
  %31 = mul i64 %28, 16
  br i1 %30, label %dec_label_pc_17975, label %dec_label_pc_1796d, !insn.addr !10596

dec_label_pc_1796d:                               ; preds = %dec_label_pc_17964
  %32 = add nsw i64 %31, 4294965904, !insn.addr !10597
  %33 = and i64 %32, 4294967280, !insn.addr !10597
  store i64 %33, i64* %rax.0.reg2mem, !insn.addr !10598
  br label %dec_label_pc_17989, !insn.addr !10598

dec_label_pc_17975:                               ; preds = %dec_label_pc_17964
  %34 = add nsw i64 %31, 4294966416, !insn.addr !10599
  %35 = and i64 %34, 4294967280, !insn.addr !10599
  store i64 %35, i64* %rax.0.reg2mem, !insn.addr !10599
  br label %dec_label_pc_17989, !insn.addr !10599

dec_label_pc_17989:                               ; preds = %dec_label_pc_17975, %dec_label_pc_1796d, %dec_label_pc_1795d
  %rax.0.reload = load i64, i64* %rax.0.reg2mem
  %36 = add i64 %rcx.0.reload, ptrtoint (i32* @global_var_1 to i64), !insn.addr !10600
  %37 = inttoptr i64 %36 to i8*, !insn.addr !10600
  %38 = load i8, i8* %37, align 1, !insn.addr !10600
  %39 = sext i8 %38 to i64, !insn.addr !10600
  %40 = add nsw i64 %39, 4294967248, !insn.addr !10601
  %41 = trunc i64 %40 to i32, !insn.addr !10602
  %42 = icmp ugt i32 %41, ptrtoint (i8** @global_var_9 to i32)
  store i64 %40, i64* %.masked2.pn.in.reg2mem, !insn.addr !10603
  br i1 %42, label %dec_label_pc_179a1, label %dec_label_pc_179c1, !insn.addr !10603

dec_label_pc_179a1:                               ; preds = %dec_label_pc_17989
  %43 = sext i8 %38 to i32
  %44 = add nsw i32 %43, -97, !insn.addr !10604
  %45 = icmp ugt i32 %44, ptrtoint (i8* @global_var_5 to i32)
  br i1 %45, label %dec_label_pc_179b2, label %dec_label_pc_179ab, !insn.addr !10605

dec_label_pc_179ab:                               ; preds = %dec_label_pc_179a1
  %46 = add nsw i64 %39, 4294967209, !insn.addr !10606
  store i64 %46, i64* %.masked2.pn.in.reg2mem, !insn.addr !10607
  br label %dec_label_pc_179c1, !insn.addr !10607

dec_label_pc_179b2:                               ; preds = %dec_label_pc_179a1
  %47 = add nsw i64 %39, 4294967241, !insn.addr !10608
  store i64 %47, i64* %.masked2.pn.in.reg2mem, !insn.addr !10609
  br label %dec_label_pc_179c1, !insn.addr !10609

dec_label_pc_179c1:                               ; preds = %dec_label_pc_17989, %dec_label_pc_179b2, %dec_label_pc_179ab
  %.masked2.pn.in.reload = load i64, i64* %.masked2.pn.in.reg2mem
  %rdx.0 = xor i64 %.masked2.pn.in.reload, %rax.0.reload
  %48 = trunc i64 %rdx.0 to i8, !insn.addr !10610
  %49 = inttoptr i64 %rdi.0.reload to i8*, !insn.addr !10610
  store i8 %48, i8* %49, align 4, !insn.addr !10610
  %50 = add nuw nsw i64 %rsi.0.reload, zext (i32 ptrtoint (i32* @global_var_1 to i32) to i64), !insn.addr !10611
  %51 = and i64 %50, 4294967295, !insn.addr !10611
  %52 = load i32, i32* %7, align 4, !insn.addr !10612
  %53 = add i32 %52, ptrtoint (i8** @global_var_7 to i32), !insn.addr !10613
  %54 = icmp slt i32 %52, 0, !insn.addr !10614
  %55 = select i1 %54, i32 %53, i32 %52, !insn.addr !10615
  %56 = ashr i32 %55, ptrtoint (i8** @global_var_3 to i32), !insn.addr !10616
  %57 = zext i32 %56 to i64, !insn.addr !10616
  %58 = icmp ult i64 %51, %57, !insn.addr !10617
  br i1 %58, label %dec_label_pc_179dc, label %dec_label_pc_179e5, !insn.addr !10617

dec_label_pc_179dc:                               ; preds = %dec_label_pc_179c1
  %59 = add i64 %rdi.0.reload, ptrtoint (i32* @global_var_1 to i64), !insn.addr !10618
  %60 = add i64 %rcx.0.reload, ptrtoint (i32* @global_var_2 to i64), !insn.addr !10619
  store i64 %60, i64* %rcx.0.reg2mem, !insn.addr !10620
  store i64 %51, i64* %rsi.0.reg2mem, !insn.addr !10620
  store i64 %59, i64* %rdi.0.reg2mem, !insn.addr !10620
  br label %dec_label_pc_1794f, !insn.addr !10620

dec_label_pc_179e5:                               ; preds = %dec_label_pc_179c1, %dec_label_pc_17938
  %61 = and i64 %arg3, 4294967295, !insn.addr !10621
  %62 = icmp eq i8 %3, 0, !insn.addr !10622
  %63 = icmp eq i1 %62, false, !insn.addr !10623
  br i1 %63, label %dec_label_pc_17a02, label %dec_label_pc_179ea, !insn.addr !10623

dec_label_pc_179ea:                               ; preds = %dec_label_pc_179e5
  %64 = ptrtoint i64* %stack_var_-88 to i64
  %65 = add i64 %0, 80, !insn.addr !10624
  %66 = call i64 @rijndaelKeySetupEnc.430(i64 %65, i64 %64, i64 %61, i64 %arg5), !insn.addr !10625
  %67 = trunc i64 %66 to i32, !insn.addr !10626
  %68 = add i64 %0, 76, !insn.addr !10626
  %69 = inttoptr i64 %68 to i32*, !insn.addr !10626
  store i32 %67, i32* %69, align 4, !insn.addr !10626
  store i64 %64, i64* %.pre-phi.reg2mem, !insn.addr !10627
  br label %dec_label_pc_17a18, !insn.addr !10627

dec_label_pc_17a02:                               ; preds = %dec_label_pc_179e5
  %70 = add i64 %0, 80, !insn.addr !10628
  %71 = call i64 @rijndaelKeySetupDec.465(i64 %70, i64* nonnull %stack_var_-88, i64 %61, i64 %arg5), !insn.addr !10629
  %72 = trunc i64 %71 to i32, !insn.addr !10630
  %73 = add i64 %0, 76, !insn.addr !10630
  %74 = inttoptr i64 %73 to i32*, !insn.addr !10630
  store i32 %72, i32* %74, align 4, !insn.addr !10630
  %.pre = ptrtoint i64* %stack_var_-88 to i64, !insn.addr !10631
  store i64 %.pre, i64* %.pre-phi.reg2mem, !insn.addr !10630
  br label %dec_label_pc_17a18, !insn.addr !10630

dec_label_pc_17a18:                               ; preds = %dec_label_pc_17a02, %dec_label_pc_179ea
  %.pre-phi.reload = load i64, i64* %.pre-phi.reg2mem
  %75 = add i64 %0, 320, !insn.addr !10632
  %76 = call i64 @rijndaelKeySetupEnc.430(i64 %75, i64 %.pre-phi.reload, i64 %61, i64 %arg5), !insn.addr !10633
  ret i64 %76, !insn.addr !10633
}

define i64 @private_data.1(i8* %std_b25) local_unnamed_addr {
dec_label_pc_17a30:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = trunc i64 %0 to i8
  %2 = mul i8 %1, 2, !insn.addr !10634
  %3 = inttoptr i64 %0 to i8*, !insn.addr !10634
  store i8 %2, i8* %3, align 1, !insn.addr !10634
  ret i64 %0, !insn.addr !10635
}

define i32 @get_reset_multi2_lib_flag(i8* %std_b25, i8* %isNeedResetMulti2Lib) local_unnamed_addr {
dec_label_pc_17a54:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = trunc i64 %0 to i32, !insn.addr !10636
  ret i32 %1, !insn.addr !10636
}

define i64 @private_data.26(i64 %arg1) local_unnamed_addr {
dec_label_pc_17a60:
  %0 = call i64 @mcount(), !insn.addr !10637
  ret i64 %arg1, !insn.addr !10638
}

define i32 @get_ProgramNumberByPid(i8* %std_b25, i16 %pid, i32* %program_number) local_unnamed_addr {
dec_label_pc_17a77:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = call i64 @__decompiler_undefined_function_0()
  %2 = call i64 @__decompiler_undefined_function_0()
  %3 = add i64 %2, 57, !insn.addr !10639
  %4 = inttoptr i64 %3 to i8*, !insn.addr !10639
  %5 = load i8, i8* %4, align 1, !insn.addr !10639
  %6 = trunc i64 %1 to i8, !insn.addr !10639
  %7 = add i8 %5, %6, !insn.addr !10639
  %8 = icmp eq i8 %7, 0, !insn.addr !10639
  store i8 %7, i8* %4, align 1, !insn.addr !10639
  %9 = urem i64 %2, 256, !insn.addr !10640
  %10 = add i64 %9, %0, !insn.addr !10640
  %11 = inttoptr i64 %10 to i8*, !insn.addr !10640
  %12 = load i8, i8* %11, align 1, !insn.addr !10640
  %13 = zext i8 %12 to i64, !insn.addr !10640
  %14 = and i64 %2, 4294967040, !insn.addr !10640
  %15 = or i64 %14, %13, !insn.addr !10640
  %16 = trunc i64 %15 to i32
  %17 = select i1 %8, i32 %16, i32 0, !insn.addr !10641
  ret i32 %17, !insn.addr !10641
}

define i64 @get_reset_multi2_lib_flag.27(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_17a84:
  %0 = call i64 @mcount(), !insn.addr !10642
  %1 = call i64 @private_data.26(i64 %arg1), !insn.addr !10643
  %2 = add i64 %1, 67186, !insn.addr !10644
  %3 = inttoptr i64 %2 to i8*, !insn.addr !10644
  %4 = load i8, i8* %3, align 1, !insn.addr !10644
  %5 = inttoptr i64 %arg2 to i8*, !insn.addr !10645
  store i8 %4, i8* %5, align 1, !insn.addr !10645
  ret i64 0, !insn.addr !10646
}

define i64 @get_ProgramNumberByPid.28(i64 %arg1, i64 %arg2, i64 %arg3) local_unnamed_addr {
dec_label_pc_17aa7:
  %0 = call i64 @mcount(), !insn.addr !10647
  %1 = call i64 @private_data.26(i64 %arg1), !insn.addr !10648
  ret i64 %1, !insn.addr !10649
}

define i64 @function_17afc(i64 %arg1, i64 %arg2, i64 %arg3) local_unnamed_addr {
dec_label_pc_17afc:
  %0 = call i64 @__decompiler_undefined_function_0()
  ret i64 %0, !insn.addr !10650
}

define i32 @set_bcas_card_exist(i8* %std_b25, i8 %isExist) local_unnamed_addr {
dec_label_pc_17b0c:
  %0 = call i64 @__decompiler_undefined_function_0()
  %rax = alloca i64, align 8
  %1 = call i64 @__decompiler_undefined_function_0()
  %2 = bitcast i64* %rax to i8*
  %3 = trunc i64 %1 to i8
  %4 = mul i8 %3, 2, !insn.addr !10651
  %5 = inttoptr i64 %1 to i8*, !insn.addr !10651
  store i8 %4, i8* %5, align 1, !insn.addr !10651
  %6 = add i64 %0, 112643, !insn.addr !10652
  %7 = inttoptr i64 %6 to i8*, !insn.addr !10652
  %8 = load i8, i8* %7, align 1, !insn.addr !10652
  %9 = trunc i64 %0 to i8, !insn.addr !10652
  %10 = add i8 %8, %9, !insn.addr !10652
  store i8 %10, i8* %7, align 1, !insn.addr !10652
  %11 = load i8, i8* %2, align 8, !insn.addr !10653
  %12 = load i64, i64* %rax, align 8
  %13 = trunc i64 %12 to i8, !insn.addr !10653
  %14 = add i8 %11, %13, !insn.addr !10653
  %15 = inttoptr i64 %12 to i8*, !insn.addr !10653
  store i8 %14, i8* %15, align 1, !insn.addr !10653
  %16 = load i64, i64* %rax, align 8, !insn.addr !10654
  %17 = trunc i64 %16 to i32, !insn.addr !10654
  ret i32 %17, !insn.addr !10654
}

define i32 @get_is_streamscramble(i8* %std_b25, i8* %isScramble) local_unnamed_addr {
dec_label_pc_17b2b:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = trunc i64 %0 to i8
  %2 = mul i8 %1, 2, !insn.addr !10655
  %3 = inttoptr i64 %0 to i8*, !insn.addr !10655
  store i8 %2, i8* %3, align 1, !insn.addr !10655
  ret i32 -1, !insn.addr !10656
}

define i64 @set_bcas_card_exist.29(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_17b3c:
  %0 = call i64 @mcount(), !insn.addr !10657
  %1 = call i64 @private_data.26(i64 %arg1), !insn.addr !10658
  ret i64 %1, !insn.addr !10658
}

define i32 @set_is_streamscramble(i8* %std_b25, i8 %isScramble) local_unnamed_addr {
dec_label_pc_17b4e:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = call i64 @__decompiler_undefined_function_0()
  %2 = call i1 @__decompiler_undefined_function_2()
  %3 = trunc i64 %1 to i32, !insn.addr !10659
  %sext = mul i32 %3, 65536
  %4 = sdiv i32 %sext, 65536, !insn.addr !10659
  %5 = icmp eq i1 %2, false, !insn.addr !10660
  br i1 %5, label %dec_label_pc_17b57, label %dec_label_pc_17b51, !insn.addr !10660

dec_label_pc_17b51:                               ; preds = %dec_label_pc_17b4e
  %6 = zext i32 %4 to i64, !insn.addr !10659
  %7 = sdiv i32 %sext, 32768, !insn.addr !10661
  %8 = inttoptr i64 %6 to i32*, !insn.addr !10661
  store i32 %7, i32* %8, align 4, !insn.addr !10661
  ret i32 %4, !insn.addr !10661

dec_label_pc_17b57:                               ; preds = %dec_label_pc_17b4e
  %9 = add i64 %0, -55, !insn.addr !10662
  %10 = inttoptr i64 %9 to i8*, !insn.addr !10662
  %11 = load i8, i8* %10, align 1, !insn.addr !10662
  %12 = trunc i64 %0 to i8, !insn.addr !10662
  %13 = add i8 %11, %12, !insn.addr !10662
  store i8 %13, i8* %10, align 1, !insn.addr !10662
  ret i32 %4, !insn.addr !10663
}

define i64 @get_is_streamscramble.30(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_17b5b:
  %0 = call i64 @mcount(), !insn.addr !10664
  %1 = call i64 @private_data.26(i64 %arg1), !insn.addr !10665
  ret i64 %1, !insn.addr !10665
}

define i32 @get_prognum(i8* %std_b25, i8 %index, i16* %prognum) local_unnamed_addr {
dec_label_pc_17b6d:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = call i64 @__decompiler_undefined_function_0()
  %2 = add i64 %1, 67184, !insn.addr !10666
  %3 = inttoptr i64 %2 to i8*, !insn.addr !10666
  %4 = load i8, i8* %3, align 1, !insn.addr !10666
  %5 = inttoptr i64 %0 to i8*, !insn.addr !10667
  store i8 %4, i8* %5, align 1, !insn.addr !10667
  ret i32 0, !insn.addr !10668
}

define i64 @set_is_streamscramble.31(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_17b7e:
  %0 = call i64 @mcount(), !insn.addr !10669
  %1 = call i64 @private_data.26(i64 %arg1), !insn.addr !10670
  %2 = trunc i64 %arg2 to i8, !insn.addr !10671
  %3 = add i64 %1, 67184, !insn.addr !10671
  %4 = inttoptr i64 %3 to i8*, !insn.addr !10671
  store i8 %2, i8* %4, align 1, !insn.addr !10671
  ret i64 0, !insn.addr !10672
}

define i64 @get_prognum.32() local_unnamed_addr {
dec_label_pc_17b9d:
  %0 = call i64 @__decompiler_undefined_function_0()
  ret i64 %0, !insn.addr !10673
}

define i32 @enable_prognum_proc(i8* %std_b25, i8 %enable) local_unnamed_addr {
dec_label_pc_17bae:
  %0 = ptrtoint i8* %std_b25 to i64
  %1 = call i64 @mcount(), !insn.addr !10674
  %2 = call i64 @private_data.26(i64 %0), !insn.addr !10675
  %3 = zext i8 %enable to i64, !insn.addr !10676
  %4 = mul i64 %3, 2, !insn.addr !10677
  %5 = add nuw nsw i64 %4, 66576, !insn.addr !10677
  %6 = add i64 %5, %2, !insn.addr !10677
  %7 = inttoptr i64 %6 to i16*, !insn.addr !10677
  %8 = load i16, i16* %7, align 2, !insn.addr !10677
  %9 = zext i16 %8 to i32, !insn.addr !10677
  ret i32 %9, !insn.addr !10677
}

define i32 @set_prognum(i8* %std_b25, i16 %prog_num) local_unnamed_addr {
dec_label_pc_17bcd:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = trunc i64 %0 to i32, !insn.addr !10678
  ret i32 %1, !insn.addr !10678
}

define i64 @enable_prognum_proc.33(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_17bde:
  %0 = call i64 @mcount(), !insn.addr !10679
  ret i64 %0, !insn.addr !10680
}

define i32 @set_bcas_id(i8* %std_b25, i8* %card_info, i32 %info_len) local_unnamed_addr {
dec_label_pc_17bed:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = trunc i64 %0 to i32
  ret i32 %1
}

define i64 @function_17bee(i64 %arg1) local_unnamed_addr {
dec_label_pc_17bee:
  %0 = call i64 @__decompiler_undefined_function_0()
  %rax = alloca i64, align 8
  %1 = call i64 @__decompiler_undefined_function_0()
  %2 = add i64 %1, 17198232, !insn.addr !10681
  %3 = inttoptr i64 %2 to i32*, !insn.addr !10681
  %4 = load i32, i32* %3, align 4, !insn.addr !10681
  %5 = add i32 %4, -1, !insn.addr !10681
  store i32 %5, i32* %3, align 4, !insn.addr !10681
  %6 = bitcast i64* %rax to i8*
  %7 = load i8, i8* %6, align 8, !insn.addr !10682
  %8 = lshr i64 %0, ptrtoint (i8* @global_var_8 to i64), !insn.addr !10682
  %9 = trunc i64 %8 to i8, !insn.addr !10682
  %10 = add i8 %7, %9, !insn.addr !10682
  %11 = load i64, i64* %rax, align 8, !insn.addr !10682
  %12 = inttoptr i64 %11 to i8*, !insn.addr !10682
  store i8 %10, i8* %12, align 1, !insn.addr !10682
  %13 = load i64, i64* %rax, align 8, !insn.addr !10683
  ret i64 %13, !insn.addr !10683
}

define i64 @set_prognum.34(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_17bfd:
  %0 = call i64 @mcount(), !insn.addr !10684
  %1 = call i64 @private_data.26(i64 %arg1), !insn.addr !10685
  %2 = trunc i64 %arg2 to i16, !insn.addr !10686
  %3 = add i64 %1, 67182, !insn.addr !10686
  %4 = inttoptr i64 %3 to i16*, !insn.addr !10686
  store i16 %2, i16* %4, align 2, !insn.addr !10686
  ret i64 0, !insn.addr !10687
}

define i64 @set_bcas_id.35(i64 %arg1, i64 %arg2, i64 %arg3) local_unnamed_addr {
dec_label_pc_17c1d:
  %0 = call i64 @mcount(), !insn.addr !10688
  %1 = call i64 @private_data.26(i64 %arg1), !insn.addr !10689
  %2 = icmp ne i64 %1, 0, !insn.addr !10690
  %3 = trunc i64 %arg3 to i32, !insn.addr !10691
  %4 = icmp sgt i32 %3, ptrtoint (i8** @global_var_9 to i32), !insn.addr !10691
  %or.cond = icmp eq i1 %4, %2
  br i1 %or.cond, label %dec_label_pc_17c46, label %dec_label_pc_17c3f, !insn.addr !10692

dec_label_pc_17c3f:                               ; preds = %dec_label_pc_17c1d
  ret i64 4294967295, !insn.addr !10693

dec_label_pc_17c46:                               ; preds = %dec_label_pc_17c1d
  %5 = add i64 %1, 67108, !insn.addr !10694
  %6 = inttoptr i64 %5 to i32*, !insn.addr !10694
  store i32 0, i32* %6, align 4, !insn.addr !10694
  %7 = add i64 %arg2, ptrtoint (i32* @global_var_2 to i64), !insn.addr !10695
  %8 = inttoptr i64 %7 to i8*, !insn.addr !10695
  %9 = load i8, i8* %8, align 1, !insn.addr !10695
  %10 = zext i8 %9 to i32, !insn.addr !10696
  store i32 %10, i32* %6, align 4, !insn.addr !10696
  %11 = add i64 %arg2, ptrtoint (i8** @global_var_3 to i64), !insn.addr !10697
  %12 = inttoptr i64 %11 to i8*, !insn.addr !10697
  %13 = load i8, i8* %12, align 1, !insn.addr !10697
  %14 = shl i32 %10, ptrtoint (i8* @global_var_8 to i32), !insn.addr !10698
  %15 = zext i8 %13 to i32, !insn.addr !10699
  %16 = or i32 %14, %15, !insn.addr !10699
  store i32 %16, i32* %6, align 4, !insn.addr !10700
  ret i64 %1, !insn.addr !10700
}

define i64 @get_b_cas_card_arib_std_b25(i8* %std_b25) local_unnamed_addr {
dec_label_pc_17c6f:
  %0 = call i64 @__decompiler_undefined_function_0()
  %rax = alloca i64, align 8
  %1 = call i64 @__decompiler_undefined_function_0()
  %2 = bitcast i64* %rax to i8*
  %3 = trunc i64 %1 to i8
  %4 = mul i8 %3, 2, !insn.addr !10701
  %5 = inttoptr i64 %1 to i8*, !insn.addr !10701
  store i8 %4, i8* %5, align 1, !insn.addr !10701
  %6 = load i8, i8* %2, align 8, !insn.addr !10702
  %7 = load i64, i64* %rax, align 8
  %8 = trunc i64 %7 to i8, !insn.addr !10702
  %9 = add i8 %6, %8, !insn.addr !10702
  %10 = inttoptr i64 %7 to i8*, !insn.addr !10702
  store i8 %9, i8* %10, align 1, !insn.addr !10702
  %11 = add i64 %0, ptrtoint (i16* @global_var_4 to i64), !insn.addr !10703
  %12 = inttoptr i64 %11 to i8*, !insn.addr !10703
  %13 = load i8, i8* %12, align 1, !insn.addr !10703
  %14 = load i64, i64* %rax, align 8, !insn.addr !10704
  %15 = add i64 %14, 67104, !insn.addr !10704
  %16 = inttoptr i64 %15 to i32*, !insn.addr !10704
  %17 = load i32, i32* %16, align 4, !insn.addr !10704
  %18 = mul i32 %17, 256, !insn.addr !10705
  %19 = zext i8 %13 to i32, !insn.addr !10706
  %20 = or i32 %18, %19, !insn.addr !10706
  store i32 %20, i32* %16, align 4, !insn.addr !10707
  %21 = load i64, i64* %rax, align 8, !insn.addr !10708
  ret i64 %21, !insn.addr !10708
}

define i32 @set_b_cas_card_arib_std_b25(i8* %std_b25, i64 %bcas) local_unnamed_addr {
dec_label_pc_17c93:
  ret i32 0, !insn.addr !10709
}

define i64 @get_b_cas_card_arib_std_b25.36() local_unnamed_addr {
dec_label_pc_17c9f:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = call i64 @__decompiler_undefined_function_0()
  %2 = call i64 @mcount(), !insn.addr !10710
  %3 = call i64 @private_data.26(i64 %0), !insn.addr !10711
  %4 = icmp eq i64 %3, 0, !insn.addr !10712
  br i1 %4, label %5, label %dec_label_pc_17cba, !insn.addr !10713

; <label>:5:                                      ; preds = %dec_label_pc_17c9f
  %6 = inttoptr i64 %0 to i8*, !insn.addr !10713
  %7 = trunc i64 %1 to i32, !insn.addr !10713
  %8 = call i32 @set_multi2_round_arib_std_b25(i8* %6, i32 %7), !insn.addr !10713
  br label %dec_label_pc_17cba, !insn.addr !10713

dec_label_pc_17cba:                               ; preds = %5, %dec_label_pc_17c9f
  %9 = add i64 %3, 67096, !insn.addr !10714
  %10 = inttoptr i64 %9 to i64*, !insn.addr !10714
  %11 = load i64, i64* %10, align 8, !insn.addr !10714
  ret i64 %11, !insn.addr !10714
}

define i32 @set_multi2_round_arib_std_b25(i8* %std_b25, i32 %round) local_unnamed_addr {
dec_label_pc_17cc1:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = trunc i64 %0 to i32, !insn.addr !10715
  ret i32 %1, !insn.addr !10715
}

define i64 @set_b_cas_card_arib_std_b25.37(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_17cc3:
  %0 = call i64 @mcount(), !insn.addr !10716
  %1 = call i64 @private_data.26(i64 %arg1), !insn.addr !10717
  %2 = add i64 %1, 67096, !insn.addr !10718
  %3 = inttoptr i64 %2 to i64*, !insn.addr !10718
  store i64 %arg2, i64* %3, align 8, !insn.addr !10718
  ret i64 4294967295, !insn.addr !10718
}

define i32 @proc_cat(i64 %prv) local_unnamed_addr {
dec_label_pc_17ce9:
  ret i32 0, !insn.addr !10719
}

define i64 @set_multi2_round_arib_std_b25.38(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_17cf1:
  %rax.0.reg2mem = alloca i64, !insn.addr !10720
  %0 = call i64 @mcount(), !insn.addr !10721
  %1 = call i64 @private_data.26(i64 %arg1), !insn.addr !10722
  %2 = icmp eq i64 %1, 0, !insn.addr !10723
  store i64 4294967295, i64* %rax.0.reg2mem, !insn.addr !10724
  br i1 %2, label %dec_label_pc_17d16, label %dec_label_pc_17d0f, !insn.addr !10724

dec_label_pc_17d0f:                               ; preds = %dec_label_pc_17cf1
  %3 = trunc i64 %arg2 to i32, !insn.addr !10725
  %4 = inttoptr i64 %1 to i32*, !insn.addr !10725
  store i32 %3, i32* %4, align 4, !insn.addr !10725
  store i64 0, i64* %rax.0.reg2mem, !insn.addr !10726
  br label %dec_label_pc_17d16, !insn.addr !10726

dec_label_pc_17d16:                               ; preds = %dec_label_pc_17d0f, %dec_label_pc_17cf1
  %rax.0.reload = load i64, i64* %rax.0.reg2mem
  ret i64 %rax.0.reload, !insn.addr !10727
}

define i64 @proc_cat.39(i64 %arg1) local_unnamed_addr {
dec_label_pc_17d19:
  %0 = call i64 @mcount(), !insn.addr !10728
  %1 = add i64 %arg1, 176, !insn.addr !10729
  %2 = inttoptr i64 %1 to i64*, !insn.addr !10729
  %3 = load i64, i64* %2, align 8, !insn.addr !10729
  %4 = add i64 %3, 8, !insn.addr !10730
  ret i64 %4, !insn.addr !10731
}

define i32 @get_arib_std_b25(i8* %std_b25, i64 %buf) local_unnamed_addr {
dec_label_pc_17d6c:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = ptrtoint i8* %std_b25 to i64
  %2 = add i64 %0, ptrtoint (i32* @global_var_2 to i64), !insn.addr !10732
  %3 = inttoptr i64 %2 to i8*, !insn.addr !10732
  %4 = load i8, i8* %3, align 1, !insn.addr !10732
  %5 = zext i8 %4 to i32, !insn.addr !10733
  %6 = shl i32 %5, ptrtoint (i8* @global_var_8 to i32), !insn.addr !10733
  %7 = add i64 %0, ptrtoint (i8** @global_var_3 to i64), !insn.addr !10734
  %8 = inttoptr i64 %7 to i8*, !insn.addr !10734
  %9 = load i8, i8* %8, align 1, !insn.addr !10734
  %10 = zext i8 %9 to i32, !insn.addr !10735
  %.masked = urem i32 %6, 8192
  %11 = or i32 %.masked, %10, !insn.addr !10736
  %12 = add i64 %1, 600, !insn.addr !10737
  %13 = inttoptr i64 %12 to i32*, !insn.addr !10737
  store i32 %11, i32* %13, align 4, !insn.addr !10737
  ret i32 0, !insn.addr !10738
}

define i64 @get_arib_std_b25.40(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_17d9c:
  %0 = call i64 @mcount(), !insn.addr !10739
  %1 = call i64 @private_data.26(i64 %arg1), !insn.addr !10740
  %2 = icmp ne i64 %1, 0, !insn.addr !10741
  %3 = icmp eq i64 %arg2, 0, !insn.addr !10742
  %4 = icmp eq i1 %3, false, !insn.addr !10743
  %or.cond = icmp eq i1 %4, %2
  %merge = select i1 %or.cond, i64 %1, i64 4294967295
  ret i64 %merge, !insn.addr !10744
}

define i32 @check_ts_section(i64 %sect) local_unnamed_addr {
dec_label_pc_17dc6:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = call i64 @__decompiler_undefined_function_0()
  %2 = inttoptr i64 %0 to i64*, !insn.addr !10745
  %3 = add i64 %1, 67160, !insn.addr !10746
  %4 = inttoptr i64 %3 to i64*, !insn.addr !10746
  %5 = load i64, i64* %4, align 8, !insn.addr !10746
  %6 = trunc i64 %5 to i32, !insn.addr !10747
  %7 = add i64 %1, 67152, !insn.addr !10747
  %8 = inttoptr i64 %7 to i32*, !insn.addr !10747
  %9 = load i32, i32* %8, align 4, !insn.addr !10747
  %10 = sub i32 %6, %9, !insn.addr !10747
  %11 = add i64 %0, ptrtoint (i8* @global_var_8 to i64), !insn.addr !10748
  %12 = inttoptr i64 %11 to i32*, !insn.addr !10748
  store i32 %10, i32* %12, align 4, !insn.addr !10748
  %13 = add i64 %1, 67144, !insn.addr !10749
  %14 = inttoptr i64 %13 to i64*, !insn.addr !10749
  %15 = load i64, i64* %14, align 8, !insn.addr !10749
  %16 = inttoptr i64 %7 to i64*, !insn.addr !10750
  store i64 %15, i64* %16, align 8, !insn.addr !10750
  store i64 %15, i64* %4, align 8, !insn.addr !10751
  %17 = trunc i64 %1 to i32, !insn.addr !10751
  ret i32 %17, !insn.addr !10751
}

define i32 @check_pmt_complete(i64 %prv) local_unnamed_addr {
dec_label_pc_17def:
  %rax = alloca i64, align 8
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = bitcast i64* %rax to i8*
  %2 = trunc i64 %0 to i8
  %3 = mul i8 %2, 2, !insn.addr !10752
  %4 = inttoptr i64 %0 to i8*, !insn.addr !10752
  store i8 %3, i8* %4, align 1, !insn.addr !10752
  %5 = load i8, i8* %1, align 8, !insn.addr !10753
  %6 = load i64, i64* %rax, align 8
  %7 = trunc i64 %6 to i8, !insn.addr !10753
  %8 = add i8 %5, %7, !insn.addr !10753
  %9 = inttoptr i64 %6 to i8*, !insn.addr !10753
  store i8 %8, i8* %9, align 1, !insn.addr !10753
  %10 = load i64, i64* %rax, align 8, !insn.addr !10754
  %11 = trunc i64 %10 to i32, !insn.addr !10754
  ret i32 %11, !insn.addr !10754
}

define i64 @check_ts_section.41(i64 %arg1) local_unnamed_addr {
dec_label_pc_17df6:
  %rax.0.reg2mem = alloca i64, !insn.addr !10755
  %0 = call i64 @mcount(), !insn.addr !10756
  %1 = add i64 %arg1, 44, !insn.addr !10757
  %2 = inttoptr i64 %1 to i32*, !insn.addr !10757
  %3 = load i32, i32* %2, align 4, !insn.addr !10757
  %4 = icmp slt i32 %3, 1
  store i64 0, i64* %rax.0.reg2mem, !insn.addr !10758
  br i1 %4, label %dec_label_pc_17e1d, label %dec_label_pc_17e0b, !insn.addr !10758

dec_label_pc_17e0b:                               ; preds = %dec_label_pc_17df6
  %5 = add i32 %3, 3, !insn.addr !10759
  %6 = add i64 %arg1, ptrtoint (i8* @global_var_10 to i64), !insn.addr !10760
  %7 = inttoptr i64 %6 to i64*, !insn.addr !10760
  %8 = load i64, i64* %7, align 8, !insn.addr !10760
  %9 = trunc i64 %8 to i32, !insn.addr !10761
  %10 = add i64 %arg1, ptrtoint (i8* @global_var_8 to i64), !insn.addr !10761
  %11 = inttoptr i64 %10 to i32*, !insn.addr !10761
  %12 = load i32, i32* %11, align 4, !insn.addr !10761
  %13 = sub i32 %9, %12, !insn.addr !10761
  %14 = sub i32 %5, %13, !insn.addr !10762
  %15 = xor i32 %13, %5, !insn.addr !10762
  %16 = xor i32 %14, %5, !insn.addr !10762
  %17 = and i32 %16, %15, !insn.addr !10762
  %18 = icmp slt i32 %17, 0, !insn.addr !10762
  %19 = icmp eq i32 %14, 0, !insn.addr !10762
  %20 = icmp slt i32 %14, 0, !insn.addr !10762
  %21 = icmp ne i1 %20, %18, !insn.addr !10763
  %22 = or i1 %19, %21, !insn.addr !10763
  %23 = zext i1 %22 to i64, !insn.addr !10764
  store i64 %23, i64* %rax.0.reg2mem, !insn.addr !10764
  br label %dec_label_pc_17e1d, !insn.addr !10764

dec_label_pc_17e1d:                               ; preds = %dec_label_pc_17e0b, %dec_label_pc_17df6
  %rax.0.reload = load i64, i64* %rax.0.reg2mem
  ret i64 %rax.0.reload, !insn.addr !10765
}

define i64 @check_pmt_complete.42(i64 %arg1) local_unnamed_addr {
dec_label_pc_17e1f:
  %0 = call i64 @mcount(), !insn.addr !10766
  ret i64 %0, !insn.addr !10767
}

define i32 @check_ecm_complete(i64 %prv) local_unnamed_addr {
dec_label_pc_17e4e:
  %0 = add i64 %prv, ptrtoint (i8* @global_var_8 to i64), !insn.addr !10768
  %1 = call i64 @check_ts_section.41(i64 %0), !insn.addr !10769
  %2 = trunc i64 %1 to i32, !insn.addr !10770
  %3 = icmp eq i32 %2, 0, !insn.addr !10770
  %4 = select i1 %3, i32 0, i32 ptrtoint (i32* @global_var_1 to i32), !insn.addr !10771
  ret i32 %4, !insn.addr !10771
}

define i64 @check_ecm_complete.43(i64 %arg1) local_unnamed_addr {
dec_label_pc_17e7e:
  %0 = call i64 @mcount(), !insn.addr !10772
  ret i64 %0, !insn.addr !10773
}

define void @extract_ts_header(i64 %dst, i8* %src) local_unnamed_addr {
dec_label_pc_17ec6:
  %0 = call i1 @__decompiler_undefined_function_2()
  %1 = icmp eq i1 %0, false, !insn.addr !10774
  br i1 %1, label %dec_label_pc_17eed, label %dec_label_pc_17ec8, !insn.addr !10774

dec_label_pc_17ec8:                               ; preds = %dec_label_pc_17ec6
  %2 = add i64 %dst, 168, !insn.addr !10775
  %3 = call i64 @check_ts_section.41(i64 %2), !insn.addr !10776
  ret void

dec_label_pc_17eed:                               ; preds = %dec_label_pc_17ec6
  ret void, !insn.addr !10777
}

define i64 @extract_ts_header.44(i64* %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_17ef6:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = ptrtoint i64* %arg1 to i64
  %2 = call i64 @mcount(), !insn.addr !10778
  %3 = trunc i64 %0 to i32
  %4 = urem i32 %3, 256, !insn.addr !10779
  %5 = bitcast i64* %arg1 to i32*, !insn.addr !10779
  store i32 %4, i32* %5, align 4, !insn.addr !10779
  %6 = add i64 %arg2, ptrtoint (i32* @global_var_1 to i64), !insn.addr !10780
  %7 = inttoptr i64 %6 to i8*, !insn.addr !10781
  %8 = load i8, i8* %7, align 1, !insn.addr !10781
  %9 = zext i8 %8 to i32, !insn.addr !10782
  %10 = add i64 %1, ptrtoint (i16* @global_var_4 to i64), !insn.addr !10782
  %11 = inttoptr i64 %10 to i32*, !insn.addr !10782
  store i32 %9, i32* %11, align 4, !insn.addr !10782
  %12 = load i8, i8* %7, align 1, !insn.addr !10783
  %13 = lshr i8 %12, ptrtoint (i8* @global_var_6 to i8), !insn.addr !10784
  %14 = zext i8 %13 to i32, !insn.addr !10785
  %15 = and i32 %14, ptrtoint (i32* @global_var_1 to i32), !insn.addr !10785
  %16 = add i64 %1, ptrtoint (i8* @global_var_8 to i64), !insn.addr !10786
  %17 = inttoptr i64 %16 to i32*, !insn.addr !10786
  store i32 %15, i32* %17, align 4, !insn.addr !10786
  %18 = load i8, i8* %7, align 1, !insn.addr !10787
  %19 = lshr i8 %18, ptrtoint (i8* @global_var_5 to i8), !insn.addr !10788
  %20 = zext i8 %19 to i32, !insn.addr !10789
  %21 = and i32 %20, ptrtoint (i32* @global_var_1 to i32), !insn.addr !10789
  %22 = add i64 %1, ptrtoint ([4 x i8]* @global_var_c to i64), !insn.addr !10790
  %23 = inttoptr i64 %22 to i32*, !insn.addr !10790
  store i32 %21, i32* %23, align 4, !insn.addr !10790
  %24 = load i8, i8* %7, align 1, !insn.addr !10791
  %25 = zext i8 %24 to i32, !insn.addr !10792
  %26 = and i32 %25, ptrtoint (i8** @global_var_1f to i32), !insn.addr !10792
  %27 = shl i32 %26, ptrtoint (i8* @global_var_8 to i32), !insn.addr !10793
  %28 = zext i32 %27 to i64, !insn.addr !10793
  ret i64 %28, !insn.addr !10793
}

define void @extract_ts_section_header(i64 %dst, i8* %src) local_unnamed_addr {
dec_label_pc_17f35:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = ptrtoint i8* %src to i64
  %2 = add i64 %1, ptrtoint (i32* @global_var_2 to i64), !insn.addr !10794
  %3 = inttoptr i64 %2 to i8*, !insn.addr !10794
  %4 = load i8, i8* %3, align 1, !insn.addr !10794
  %5 = trunc i64 %0 to i32, !insn.addr !10795
  %6 = zext i8 %4 to i32, !insn.addr !10795
  %7 = or i32 %6, %5, !insn.addr !10795
  %8 = add i64 %dst, ptrtoint (i8* @global_var_10 to i64), !insn.addr !10796
  %9 = inttoptr i64 %8 to i32*, !insn.addr !10796
  store i32 %7, i32* %9, align 4, !insn.addr !10796
  %10 = add i64 %1, ptrtoint (i8** @global_var_3 to i64), !insn.addr !10797
  %11 = inttoptr i64 %10 to i8*, !insn.addr !10798
  %12 = load i8, i8* %11, align 1, !insn.addr !10798
  %13 = lshr i8 %12, ptrtoint (i8* @global_var_6 to i8), !insn.addr !10799
  %14 = zext i8 %13 to i32, !insn.addr !10800
  %15 = add i64 %dst, ptrtoint (i32** @global_var_14 to i64), !insn.addr !10800
  %16 = inttoptr i64 %15 to i32*, !insn.addr !10800
  store i32 %14, i32* %16, align 4, !insn.addr !10800
  %17 = load i8, i8* %11, align 1, !insn.addr !10801
  %18 = lshr i8 %17, ptrtoint (i16* @global_var_4 to i8), !insn.addr !10802
  %19 = zext i8 %18 to i32, !insn.addr !10803
  %20 = and i32 %19, ptrtoint (i8** @global_var_3 to i32), !insn.addr !10803
  %21 = add i64 %dst, ptrtoint (i32** @global_var_18 to i64), !insn.addr !10804
  %22 = inttoptr i64 %21 to i32*, !insn.addr !10804
  store i32 %20, i32* %22, align 4, !insn.addr !10804
  %23 = load i8, i8* %11, align 1, !insn.addr !10805
  %24 = zext i8 %23 to i32, !insn.addr !10806
  %25 = and i32 %24, ptrtoint (i8* @global_var_f to i32), !insn.addr !10806
  %26 = add i64 %dst, ptrtoint (i32** @global_var_1c to i64), !insn.addr !10807
  %27 = inttoptr i64 %26 to i32*, !insn.addr !10807
  store i32 %25, i32* %27, align 4, !insn.addr !10807
  ret void, !insn.addr !10808
}

define i64 @extract_ts_section_header.45(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_17f65:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = call i64 @mcount(), !insn.addr !10809
  %2 = trunc i64 %0 to i32
  %3 = urem i32 %2, 256, !insn.addr !10810
  %4 = inttoptr i64 %arg1 to i32*, !insn.addr !10810
  store i32 %3, i32* %4, align 4, !insn.addr !10810
  %5 = add i64 %arg2, ptrtoint (i32* @global_var_1 to i64), !insn.addr !10811
  %6 = inttoptr i64 %5 to i8*, !insn.addr !10812
  %7 = load i8, i8* %6, align 1, !insn.addr !10812
  %8 = zext i8 %7 to i32, !insn.addr !10813
  %9 = add i64 %arg1, ptrtoint (i16* @global_var_4 to i64), !insn.addr !10813
  %10 = inttoptr i64 %9 to i32*, !insn.addr !10813
  store i32 %8, i32* %10, align 4, !insn.addr !10813
  %11 = load i8, i8* %6, align 1, !insn.addr !10814
  %12 = lshr i8 %11, ptrtoint (i8* @global_var_6 to i8), !insn.addr !10815
  %13 = zext i8 %12 to i32, !insn.addr !10816
  %14 = and i32 %13, ptrtoint (i32* @global_var_1 to i32), !insn.addr !10816
  %15 = add i64 %arg1, ptrtoint (i8* @global_var_8 to i64), !insn.addr !10817
  %16 = inttoptr i64 %15 to i32*, !insn.addr !10817
  store i32 %14, i32* %16, align 4, !insn.addr !10817
  %17 = load i8, i8* %6, align 1, !insn.addr !10818
  %18 = zext i8 %17 to i32, !insn.addr !10819
  %19 = shl i32 %18, ptrtoint (i8* @global_var_8 to i32), !insn.addr !10819
  %20 = add i64 %arg2, ptrtoint (i32* @global_var_2 to i64), !insn.addr !10820
  %21 = inttoptr i64 %20 to i8*, !insn.addr !10820
  %22 = load i8, i8* %21, align 1, !insn.addr !10820
  %23 = zext i8 %22 to i32, !insn.addr !10821
  %24 = or i32 %19, %23, !insn.addr !10821
  %25 = and i32 %24, ptrtoint (i32* @global_var_fff to i32), !insn.addr !10822
  %26 = add i64 %arg1, ptrtoint ([4 x i8]* @global_var_c to i64), !insn.addr !10823
  %27 = inttoptr i64 %26 to i32*, !insn.addr !10823
  store i32 %25, i32* %27, align 4, !insn.addr !10823
  %28 = add i64 %arg2, ptrtoint (i8** @global_var_3 to i64), !insn.addr !10824
  %29 = inttoptr i64 %28 to i8*, !insn.addr !10824
  %30 = load i8, i8* %29, align 1, !insn.addr !10824
  %31 = zext i8 %30 to i32, !insn.addr !10825
  %32 = shl i32 %31, ptrtoint (i8* @global_var_8 to i32), !insn.addr !10825
  %33 = add i64 %arg2, ptrtoint (i16* @global_var_4 to i64), !insn.addr !10826
  %34 = inttoptr i64 %33 to i8*, !insn.addr !10826
  %35 = load i8, i8* %34, align 1, !insn.addr !10826
  %36 = zext i8 %35 to i32, !insn.addr !10827
  %37 = or i32 %32, %36, !insn.addr !10827
  %38 = add i64 %arg1, ptrtoint (i8* @global_var_10 to i64), !insn.addr !10828
  %39 = inttoptr i64 %38 to i32*, !insn.addr !10828
  store i32 %37, i32* %39, align 4, !insn.addr !10828
  %40 = add i64 %arg2, ptrtoint (i8* @global_var_5 to i64), !insn.addr !10829
  %41 = inttoptr i64 %40 to i8*, !insn.addr !10830
  %42 = load i8, i8* %41, align 1, !insn.addr !10830
  %43 = lshr i8 %42, ptrtoint (i32* @global_var_1 to i8), !insn.addr !10831
  %44 = zext i8 %43 to i32, !insn.addr !10832
  %45 = and i32 %44, ptrtoint (i8** @global_var_1f to i32), !insn.addr !10832
  %46 = add i64 %arg1, ptrtoint (i32** @global_var_14 to i64), !insn.addr !10833
  %47 = inttoptr i64 %46 to i32*, !insn.addr !10833
  store i32 %45, i32* %47, align 4, !insn.addr !10833
  %48 = load i8, i8* %41, align 1, !insn.addr !10834
  %49 = zext i8 %48 to i32, !insn.addr !10835
  %50 = and i32 %49, ptrtoint (i32* @global_var_1 to i32), !insn.addr !10835
  %51 = add i64 %arg1, ptrtoint (i32** @global_var_18 to i64), !insn.addr !10836
  %52 = inttoptr i64 %51 to i32*, !insn.addr !10836
  store i32 %50, i32* %52, align 4, !insn.addr !10836
  %53 = add i64 %arg2, ptrtoint (i8* @global_var_6 to i64), !insn.addr !10837
  %54 = inttoptr i64 %53 to i8*, !insn.addr !10837
  %55 = load i8, i8* %54, align 1, !insn.addr !10837
  %56 = zext i8 %55 to i64, !insn.addr !10837
  ret i64 %56, !insn.addr !10837
}

define i8* @resync(i8* %head, i8* %tail, i32 %unit_size) local_unnamed_addr {
dec_label_pc_17fd4:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = call i1 @__decompiler_undefined_function_2()
  %2 = select i1 %1, i64 zext (i8 add (i8 ptrtoint (i8* @global_var_f to i8), i8 1) to i64), i64 zext (i8 ptrtoint (i8* @global_var_f to i8) to i64), !insn.addr !10838
  %3 = sub i64 %0, %2, !insn.addr !10838
  %4 = urem i64 %3, 256, !insn.addr !10838
  %5 = and i64 %0, -256, !insn.addr !10838
  %6 = or i64 %4, %5, !insn.addr !10838
  %7 = inttoptr i64 %6 to i8*, !insn.addr !10839
  ret i8* %7, !insn.addr !10839
}

define i64 @function_17fda(i64 %arg1) local_unnamed_addr {
dec_label_pc_17fda:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = trunc i64 %0 to i32, !insn.addr !10840
  %2 = add i64 %arg1, ptrtoint (i32** @global_var_20 to i64), !insn.addr !10840
  %3 = inttoptr i64 %2 to i32*, !insn.addr !10840
  store i32 %1, i32* %3, align 4, !insn.addr !10840
  ret i64 %0, !insn.addr !10841
}

define i64 @resync.46(i64 %arg1, i64 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_18004:
  %0 = call i64 @mcount(), !insn.addr !10842
  ret i64 %arg1, !insn.addr !10843
}

define i32 @check_ts_section_crc(i64 %sect) local_unnamed_addr {
dec_label_pc_18045:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = call i64 @__decompiler_undefined_function_0()
  %2 = add i64 %1, 99, !insn.addr !10844
  %3 = inttoptr i64 %2 to i32*, !insn.addr !10844
  %4 = load i32, i32* %3, align 4, !insn.addr !10844
  %5 = udiv i32 %4, 2, !insn.addr !10844
  %6 = shl i32 %4, 31, !insn.addr !10844
  %7 = or i32 %5, %6, !insn.addr !10844
  store i32 %7, i32* %3, align 4, !insn.addr !10844
  %8 = mul i64 %sect, ptrtoint (i32* @global_var_1 to i64), !insn.addr !10845
  %9 = add i64 %1, %8, !insn.addr !10845
  %10 = inttoptr i64 %9 to i8*, !insn.addr !10845
  %11 = load i8, i8* %10, align 1, !insn.addr !10845
  %12 = icmp eq i8 %11, 71, !insn.addr !10845
  %13 = trunc i64 %0 to i32, !insn.addr !10846
  %14 = icmp eq i32 %13, ptrtoint (i8* @global_var_8 to i32), !insn.addr !10846
  %or.cond = or i1 %14, %12
  %15 = trunc i64 %1 to i32
  %16 = select i1 %or.cond, i32 %15, i32 0, !insn.addr !10847
  ret i32 %16, !insn.addr !10847
}

define i64 @check_ts_section_crc.47(i64 %arg1) local_unnamed_addr {
dec_label_pc_18075:
  %0 = call i64 @mcount(), !insn.addr !10848
  %1 = add i64 %arg1, ptrtoint (i8* @global_var_8 to i64), !insn.addr !10849
  %2 = inttoptr i64 %1 to i64*, !insn.addr !10849
  %3 = load i64, i64* %2, align 8, !insn.addr !10849
  ret i64 %3, !insn.addr !10850
}

define i32 @select_unit_size(i64 %prv) local_unnamed_addr {
dec_label_pc_1809e:
  %rdx.1.reg2mem = alloca i64, !insn.addr !10851
  %rax.0.reg2mem = alloca i64, !insn.addr !10851
  %rdx.0.reg2mem = alloca i64, !insn.addr !10851
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = call i64 @__decompiler_undefined_function_0()
  %2 = icmp ult i64 %1, %0, !insn.addr !10852
  %3 = icmp eq i1 %2, false, !insn.addr !10853
  br i1 %3, label %dec_label_pc_180c4, label %dec_label_pc_180a9, !insn.addr !10853

dec_label_pc_180a9:                               ; preds = %dec_label_pc_1809e, %dec_label_pc_180a9
  %rax.0.reload = load i64, i64* %rax.0.reg2mem
  %rdx.0.reload = load i64, i64* %rdx.0.reg2mem
  %4 = trunc i64 %rdx.0.reload to i32, !insn.addr !10854
  %5 = shl i32 %4, ptrtoint (i8* @global_var_8 to i32), !insn.addr !10855
  %6 = lshr i32 %4, ptrtoint (i32** @global_var_18 to i32), !insn.addr !10856
  %7 = trunc i32 %6 to i8, !insn.addr !10857
  %8 = inttoptr i64 %rax.0.reload to i8*, !insn.addr !10857
  %9 = load i8, i8* %8, align 1, !insn.addr !10857
  %10 = xor i8 %9, %7, !insn.addr !10857
  %11 = zext i8 %10 to i64, !insn.addr !10858
  %12 = mul i64 %11, ptrtoint (i16* @global_var_4 to i64), !insn.addr !10859
  %13 = inttoptr i64 %12 to i32*, !insn.addr !10859
  %14 = load i32, i32* %13, align 4, !insn.addr !10859
  %15 = xor i32 %14, %5, !insn.addr !10860
  %16 = zext i32 %15 to i64, !insn.addr !10860
  %17 = add i64 %rax.0.reload, ptrtoint (i32* @global_var_1 to i64), !insn.addr !10861
  %18 = icmp ugt i64 %0, %17
  store i64 %16, i64* %rdx.0.reg2mem, !insn.addr !10862
  store i64 %17, i64* %rax.0.reg2mem, !insn.addr !10862
  store i64 %16, i64* %rdx.1.reg2mem, !insn.addr !10862
  br i1 %18, label %dec_label_pc_180a9, label %dec_label_pc_180c4, !insn.addr !10862

dec_label_pc_180c4:                               ; preds = %dec_label_pc_180a9, %dec_label_pc_1809e
  %rdx.1.reload = load i64, i64* %rdx.1.reg2mem
  %19 = trunc i64 %rdx.1.reload to i32, !insn.addr !10863
  %20 = icmp eq i32 %19, 0, !insn.addr !10863
  %21 = zext i1 %20 to i32, !insn.addr !10864
  ret i32 %21, !insn.addr !10864
}

define i64 @select_unit_size.48(i64 %arg1) local_unnamed_addr {
dec_label_pc_180ce:
  %r9.38.reg2mem = alloca i64, !insn.addr !10865
  %rax.2.rcx.29.reg2mem = alloca i64, !insn.addr !10865
  %.r10.010.reg2mem = alloca i64, !insn.addr !10865
  %.reg2mem18 = alloca i64, !insn.addr !10865
  %.reg2mem = alloca i32, !insn.addr !10865
  %r9.2.reg2mem = alloca i64, !insn.addr !10865
  %rcx.1.reg2mem = alloca i64, !insn.addr !10865
  %rcx.0.reg2mem = alloca i64, !insn.addr !10865
  %r9.1.reg2mem = alloca i64, !insn.addr !10865
  %rdi.0.reg2mem = alloca i64, !insn.addr !10865
  %rax.1.reg2mem = alloca i64, !insn.addr !10865
  %r9.0.reg2mem = alloca i64, !insn.addr !10865
  %rax.0.reg2mem = alloca i64, !insn.addr !10865
  %stack_var_-536 = alloca i64, align 8
  %0 = call i64 @__decompiler_undefined_function_0()
  %stack_var_-1288 = alloca i64, align 8
  %stack_var_-8 = alloca i64, align 8
  %1 = call i64 @mcount(), !insn.addr !10866
  %2 = add i64 %arg1, 67120, !insn.addr !10867
  %3 = inttoptr i64 %2 to i64*, !insn.addr !10867
  %4 = load i64, i64* %3, align 8, !insn.addr !10867
  %5 = add i64 %arg1, 67128, !insn.addr !10868
  %6 = inttoptr i64 %5 to i64*, !insn.addr !10868
  %7 = load i64, i64* %6, align 8, !insn.addr !10868
  %8 = bitcast i64* %stack_var_-1288 to i8*, !insn.addr !10869
  call void @__asm_rep_stosq_memset(i8* nonnull %8, i64 0, i64 160), !insn.addr !10869
  %9 = inttoptr i64 %4 to i8*, !insn.addr !10870
  %10 = load i8, i8* %9, align 1, !insn.addr !10870
  %11 = icmp eq i8 %10, 71, !insn.addr !10870
  %12 = icmp eq i1 %11, false, !insn.addr !10871
  store i64 %4, i64* %rax.0.reg2mem, !insn.addr !10871
  store i64 %4, i64* %r9.0.reg2mem, !insn.addr !10871
  br i1 %12, label %dec_label_pc_18122, label %dec_label_pc_18133, !insn.addr !10871

dec_label_pc_1811d:                               ; preds = %dec_label_pc_18122
  %13 = inttoptr i64 %16 to i8*, !insn.addr !10872
  %14 = load i8, i8* %13, align 1, !insn.addr !10872
  %15 = icmp eq i8 %14, 71, !insn.addr !10872
  store i64 %16, i64* %rax.0.reg2mem, !insn.addr !10873
  store i64 %16, i64* %r9.0.reg2mem, !insn.addr !10873
  br i1 %15, label %dec_label_pc_18133, label %dec_label_pc_18122, !insn.addr !10873

dec_label_pc_18122:                               ; preds = %dec_label_pc_180ce, %dec_label_pc_1811d
  %rax.0.reload = load i64, i64* %rax.0.reg2mem
  %16 = add i64 %rax.0.reload, 1, !insn.addr !10874
  %17 = icmp ugt i64 %7, %16
  br i1 %17, label %dec_label_pc_1811d, label %dec_label_pc_1812b, !insn.addr !10875

dec_label_pc_1812b:                               ; preds = %dec_label_pc_18122
  ret i64 %16, !insn.addr !10876

dec_label_pc_18133:                               ; preds = %dec_label_pc_1811d, %dec_label_pc_180ce
  %18 = trunc i64 %0 to i32
  %r9.0.reload = load i64, i64* %r9.0.reg2mem
  %19 = add i64 %r9.0.reload, ptrtoint (i32* @global_var_1 to i64), !insn.addr !10877
  %20 = icmp ugt i64 %7, %19
  store i32 %18, i32* %.reg2mem, !insn.addr !10878
  br i1 %20, label %dec_label_pc_18149, label %dec_label_pc_181cf, !insn.addr !10878

dec_label_pc_18149:                               ; preds = %dec_label_pc_18133
  %21 = ptrtoint i64* %stack_var_-8 to i64, !insn.addr !10879
  %22 = add i64 %r9.0.reload, -187, !insn.addr !10880
  %23 = add i64 %21, -1280
  store i64 %19, i64* %rax.1.reg2mem, !insn.addr !10880
  store i64 %22, i64* %rdi.0.reg2mem, !insn.addr !10880
  store i64 %r9.0.reload, i64* %r9.1.reg2mem, !insn.addr !10880
  br label %dec_label_pc_18150, !insn.addr !10880

dec_label_pc_18150:                               ; preds = %dec_label_pc_181c2, %dec_label_pc_18149
  %r9.1.reload = load i64, i64* %r9.1.reg2mem
  %rdi.0.reload = load i64, i64* %rdi.0.reg2mem
  %rax.1.reload = load i64, i64* %rax.1.reg2mem
  %24 = inttoptr i64 %rax.1.reload to i8*, !insn.addr !10881
  %25 = load i8, i8* %24, align 1, !insn.addr !10881
  %26 = icmp eq i8 %25, 71, !insn.addr !10881
  %27 = icmp eq i1 %26, false, !insn.addr !10882
  store i64 %r9.1.reload, i64* %r9.2.reg2mem, !insn.addr !10882
  br i1 %27, label %dec_label_pc_181c2, label %dec_label_pc_18155, !insn.addr !10882

dec_label_pc_18155:                               ; preds = %dec_label_pc_18150
  %28 = sub i64 %rax.1.reload, %r9.1.reload, !insn.addr !10883
  %29 = trunc i64 %28 to i32, !insn.addr !10884
  %30 = icmp sgt i32 %29, 187, !insn.addr !10884
  br i1 %30, label %dec_label_pc_181aa, label %dec_label_pc_18167, !insn.addr !10884

dec_label_pc_18167:                               ; preds = %dec_label_pc_18155
  %31 = icmp ugt i64 %4, %rdi.0.reload
  store i64 %r9.1.reload, i64* %r9.2.reg2mem, !insn.addr !10885
  br i1 %31, label %dec_label_pc_181c2, label %dec_label_pc_1816f, !insn.addr !10885

dec_label_pc_1816f:                               ; preds = %dec_label_pc_18167
  %32 = inttoptr i64 %rdi.0.reload to i8*, !insn.addr !10886
  %33 = load i8, i8* %32, align 1, !insn.addr !10886
  %34 = icmp eq i8 %33, 71, !insn.addr !10886
  %35 = icmp eq i1 %34, false, !insn.addr !10887
  store i64 %rdi.0.reload, i64* %rcx.0.reg2mem, !insn.addr !10887
  store i64 %rdi.0.reload, i64* %rcx.1.reg2mem, !insn.addr !10887
  br i1 %35, label %dec_label_pc_1818f, label %dec_label_pc_1817b, !insn.addr !10887

dec_label_pc_18176:                               ; preds = %dec_label_pc_1818f
  %36 = inttoptr i64 %45 to i8*, !insn.addr !10888
  %37 = load i8, i8* %36, align 1, !insn.addr !10888
  %38 = icmp eq i8 %37, 71, !insn.addr !10888
  %39 = icmp eq i1 %38, false, !insn.addr !10889
  store i64 %45, i64* %rcx.0.reg2mem, !insn.addr !10889
  store i64 %45, i64* %rcx.1.reg2mem, !insn.addr !10889
  br i1 %39, label %dec_label_pc_1818f, label %dec_label_pc_1817b, !insn.addr !10889

dec_label_pc_1817b:                               ; preds = %dec_label_pc_18176, %dec_label_pc_1816f
  %40 = and i64 %rax.1.reload, 4294967295, !insn.addr !10890
  %rcx.0.reload = load i64, i64* %rcx.0.reg2mem
  %41 = sub i64 %40, %rcx.0.reload, !insn.addr !10891
  %42 = trunc i64 %41 to i32
  %43 = add i32 %42, -188, !insn.addr !10892
  %44 = icmp ult i32 %43, 132
  store i64 %r9.1.reload, i64* %r9.2.reg2mem, !insn.addr !10893
  br i1 %44, label %dec_label_pc_1819a, label %dec_label_pc_181c2, !insn.addr !10893

dec_label_pc_1818f:                               ; preds = %dec_label_pc_1816f, %dec_label_pc_18176
  %rcx.1.reload = load i64, i64* %rcx.1.reg2mem
  %45 = sub i64 %rcx.1.reload, ptrtoint (i32* @global_var_1 to i64), !insn.addr !10894
  %46 = icmp ugt i64 %4, %45
  store i64 %r9.1.reload, i64* %r9.2.reg2mem, !insn.addr !10895
  br i1 %46, label %dec_label_pc_181c2, label %dec_label_pc_18176, !insn.addr !10895

dec_label_pc_1819a:                               ; preds = %dec_label_pc_1817b
  %sext2 = mul i64 %41, 4294967296
  %47 = sdiv i64 %sext2, 4294967296, !insn.addr !10896
  %48 = mul i64 %47, ptrtoint (i16* @global_var_4 to i64), !insn.addr !10897
  %49 = add i64 %48, %23, !insn.addr !10897
  %50 = inttoptr i64 %49 to i32*, !insn.addr !10897
  %51 = load i32, i32* %50, align 4, !insn.addr !10897
  %52 = add i32 %51, ptrtoint (i32* @global_var_1 to i32), !insn.addr !10897
  store i32 %52, i32* %50, align 4, !insn.addr !10897
  store i64 %rax.1.reload, i64* %r9.2.reg2mem, !insn.addr !10898
  br label %dec_label_pc_181c2, !insn.addr !10898

dec_label_pc_181aa:                               ; preds = %dec_label_pc_18155
  %53 = icmp sgt i32 %29, 319, !insn.addr !10899
  store i64 %rax.1.reload, i64* %r9.2.reg2mem, !insn.addr !10899
  br i1 %53, label %dec_label_pc_181c2, label %dec_label_pc_181b6, !insn.addr !10899

dec_label_pc_181b6:                               ; preds = %dec_label_pc_181aa
  %sext3 = mul i64 %28, 4294967296
  %54 = sdiv i64 %sext3, 4294967296, !insn.addr !10900
  %55 = mul i64 %54, ptrtoint (i16* @global_var_4 to i64), !insn.addr !10901
  %56 = add i64 %55, %23, !insn.addr !10901
  %57 = inttoptr i64 %56 to i32*, !insn.addr !10901
  %58 = load i32, i32* %57, align 4, !insn.addr !10901
  %59 = add i32 %58, ptrtoint (i32* @global_var_1 to i32), !insn.addr !10901
  store i32 %59, i32* %57, align 4, !insn.addr !10901
  store i64 %rax.1.reload, i64* %r9.2.reg2mem, !insn.addr !10901
  br label %dec_label_pc_181c2, !insn.addr !10901

dec_label_pc_181c2:                               ; preds = %dec_label_pc_1818f, %dec_label_pc_1817b, %dec_label_pc_18167, %dec_label_pc_181b6, %dec_label_pc_181aa, %dec_label_pc_1819a, %dec_label_pc_18150
  %r9.2.reload = load i64, i64* %r9.2.reg2mem
  %60 = add i64 %rax.1.reload, ptrtoint (i32* @global_var_1 to i64), !insn.addr !10902
  %61 = add i64 %rdi.0.reload, 1, !insn.addr !10903
  %62 = icmp eq i64 %60, %7, !insn.addr !10904
  %63 = icmp eq i1 %62, false, !insn.addr !10905
  store i64 %60, i64* %rax.1.reg2mem, !insn.addr !10905
  store i64 %61, i64* %rdi.0.reg2mem, !insn.addr !10905
  store i64 %r9.2.reload, i64* %r9.1.reg2mem, !insn.addr !10905
  br i1 %63, label %dec_label_pc_18150, label %dec_label_pc_181cf.loopexit, !insn.addr !10905

dec_label_pc_181cf.loopexit:                      ; preds = %dec_label_pc_181c2
  %.phi.trans.insert = bitcast i64* %stack_var_-536 to i32*
  %.pre = load i32, i32* %.phi.trans.insert, align 8
  store i32 %.pre, i32* %.reg2mem
  br label %dec_label_pc_181cf

dec_label_pc_181cf:                               ; preds = %dec_label_pc_18133, %dec_label_pc_181cf.loopexit
  %.reload = load i32, i32* %.reg2mem, !insn.addr !10906
  %64 = ptrtoint i64* %stack_var_-536 to i64, !insn.addr !10907
  %65 = zext i32 %.reload to i64, !insn.addr !10906
  %66 = icmp eq i32 %.reload, 0, !insn.addr !10908
  %rax.2.rcx.26 = select i1 %66, i64 0, i64 188
  store i64 189, i64* %.reg2mem18
  store i64 %65, i64* %.r10.010.reg2mem
  store i64 %rax.2.rcx.26, i64* %rax.2.rcx.29.reg2mem
  store i64 %64, i64* %r9.38.reg2mem
  br label %dec_label_pc_18203

dec_label_pc_18203:                               ; preds = %dec_label_pc_181cf, %dec_label_pc_18203
  %r9.38.reload = load i64, i64* %r9.38.reg2mem
  %rax.2.rcx.29.reload = load i64, i64* %rax.2.rcx.29.reg2mem
  %.r10.010.reload = load i64, i64* %.r10.010.reg2mem
  %.reload19 = load i64, i64* %.reg2mem18
  %67 = add i64 %r9.38.reload, ptrtoint (i16* @global_var_4 to i64), !insn.addr !10909
  %68 = and i64 %.reload19, 4294967295, !insn.addr !10910
  %69 = inttoptr i64 %67 to i32*, !insn.addr !10906
  %70 = load i32, i32* %69, align 4, !insn.addr !10906
  %71 = zext i32 %70 to i64, !insn.addr !10906
  %72 = icmp ult i64 %.r10.010.reload, %71, !insn.addr !10908
  %rax.2.rcx.2 = select i1 %72, i64 %68, i64 %rax.2.rcx.29.reload
  %.r10.0 = select i1 %72, i64 %71, i64 %.r10.010.reload
  %73 = add nuw nsw i64 %68, 1, !insn.addr !10910
  %74 = trunc i64 %73 to i32, !insn.addr !10911
  %75 = icmp eq i32 %74, 320, !insn.addr !10911
  store i64 %73, i64* %.reg2mem18, !insn.addr !10912
  store i64 %.r10.0, i64* %.r10.010.reg2mem, !insn.addr !10912
  store i64 %rax.2.rcx.2, i64* %rax.2.rcx.29.reg2mem, !insn.addr !10912
  store i64 %67, i64* %r9.38.reg2mem, !insn.addr !10912
  br i1 %75, label %dec_label_pc_18208, label %dec_label_pc_18203, !insn.addr !10912

dec_label_pc_18208:                               ; preds = %dec_label_pc_18203
  %sext = mul i64 %rax.2.rcx.2, 4294967296
  %76 = sdiv i64 %sext, 4294967296, !insn.addr !10913
  %sext1 = mul i64 %.r10.0, 4294967296
  %77 = sdiv i64 %sext1, 4294967296, !insn.addr !10913
  %78 = mul nsw i64 %76, %77, !insn.addr !10913
  %79 = and i64 %78, 4294967295, !insn.addr !10913
  ret i64 %79, !insn.addr !10913
}

define void @reset_ts_section(i64 %sect) local_unnamed_addr {
dec_label_pc_18214:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = call i64 @__decompiler_undefined_function_0()
  %2 = call i64 @__decompiler_undefined_function_0()
  %3 = call i64 @__decompiler_undefined_function_0()
  %4 = call i64 @__decompiler_undefined_function_0()
  %5 = sub i64 %2, %0, !insn.addr !10914
  %6 = trunc i64 %4 to i32, !insn.addr !10915
  %7 = ashr i32 %6, ptrtoint (i8** @global_var_1f to i32), !insn.addr !10916
  %8 = and i64 %4, 4294967295, !insn.addr !10917
  %9 = zext i32 %7 to i64, !insn.addr !10917
  %10 = shl i64 %9, ptrtoint (i32** @global_var_20 to i64), !insn.addr !10917
  %11 = or i64 %10, %8, !insn.addr !10917
  %12 = sdiv i64 %11, zext (i32 ptrtoint (i8* @global_var_8 to i32) to i64), !insn.addr !10917
  %sext = mul i64 %12, 4294967296
  %13 = sdiv i64 %sext, 4294967296, !insn.addr !10918
  %14 = sub i64 %5, %13, !insn.addr !10919
  %15 = icmp sgt i64 %14, %sect, !insn.addr !10920
  br i1 %15, label %dec_label_pc_18242, label %dec_label_pc_18233, !insn.addr !10920

dec_label_pc_18233:                               ; preds = %dec_label_pc_18214
  %16 = trunc i64 %3 to i32, !insn.addr !10921
  %17 = add i64 %1, ptrtoint (i16* @global_var_4 to i64), !insn.addr !10921
  %18 = inttoptr i64 %17 to i32*, !insn.addr !10921
  store i32 %16, i32* %18, align 4, !insn.addr !10921
  br label %dec_label_pc_18242, !insn.addr !10922

dec_label_pc_18242:                               ; preds = %dec_label_pc_18214, %dec_label_pc_18233
  ret void, !insn.addr !10923
}

define i64 @reset_ts_section.49(i64 %arg1) local_unnamed_addr {
dec_label_pc_18244:
  %0 = call i64 @mcount(), !insn.addr !10924
  %1 = add i64 %arg1, ptrtoint (i8* @global_var_8 to i64), !insn.addr !10925
  %2 = inttoptr i64 %1 to i64*, !insn.addr !10925
  store i64 %arg1, i64* %2, align 8, !insn.addr !10925
  ret i64 %arg1, !insn.addr !10925
}

define void @setup_pid_map(i64 %prv) local_unnamed_addr {
dec_label_pc_18254:
  %0 = add i64 %prv, ptrtoint (i8* @global_var_10 to i64), !insn.addr !10926
  %1 = inttoptr i64 %0 to i64*, !insn.addr !10926
  %2 = add i64 %prv, ptrtoint (i32** @global_var_20 to i64), !insn.addr !10927
  %3 = inttoptr i64 %2 to i64*, !insn.addr !10928
  store i64 0, i64* %3, align 8, !insn.addr !10928
  %4 = add i64 %prv, add (i64 ptrtoint (i32** @global_var_20 to i64), i64 ptrtoint (i8* @global_var_8 to i64)), !insn.addr !10929
  %5 = inttoptr i64 %4 to i64*, !insn.addr !10929
  store i64 0, i64* %5, align 8, !insn.addr !10929
  %6 = add i64 %prv, add (i64 ptrtoint (i32** @global_var_20 to i64), i64 ptrtoint (i8* @global_var_10 to i64)), !insn.addr !10930
  %7 = inttoptr i64 %6 to i64*, !insn.addr !10930
  store i64 0, i64* %7, align 8, !insn.addr !10930
  %8 = add i64 %prv, add (i64 ptrtoint (i32** @global_var_20 to i64), i64 ptrtoint (i32** @global_var_18 to i64)), !insn.addr !10931
  %9 = inttoptr i64 %8 to i64*, !insn.addr !10931
  store i64 0, i64* %9, align 8, !insn.addr !10931
  %10 = add i64 %prv, add (i64 ptrtoint (i32** @global_var_20 to i64), i64 ptrtoint (i32** @global_var_20 to i64)), !insn.addr !10932
  %11 = inttoptr i64 %10 to i32*, !insn.addr !10932
  store i32 0, i32* %11, align 4, !insn.addr !10932
  ret void, !insn.addr !10933
}

define i64 @setup_pid_map.50(i64 %arg1) local_unnamed_addr {
dec_label_pc_18284:
  %0 = call i64 @mcount(), !insn.addr !10934
  %1 = add i64 %arg1, 1040, !insn.addr !10935
  %2 = call i64 @memset(i64 %1, i64 0, i64 65536), !insn.addr !10936
  %3 = add i64 %arg1, 67188, !insn.addr !10937
  %4 = call i64 @memset(i64 %3, i64 0, i64 529408), !insn.addr !10938
  %5 = add i64 %arg1, 596596, !insn.addr !10939
  %6 = inttoptr i64 %5 to i8*, !insn.addr !10939
  store i8 0, i8* %6, align 1, !insn.addr !10939
  ret i64 %4, !insn.addr !10940
}

define i64 @function_182f9(i64 %arg1) local_unnamed_addr {
dec_label_pc_182f9:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = call i64 @__decompiler_undefined_function_0()
  %2 = trunc i64 %1 to i8, !insn.addr !10941
  %3 = add i64 %0, -1994951488, !insn.addr !10941
  %4 = inttoptr i64 %3 to i8*, !insn.addr !10941
  %5 = load i8, i8* %4, align 1, !insn.addr !10941
  %6 = add i8 %5, %2, !insn.addr !10941
  %7 = zext i8 %6 to i64, !insn.addr !10941
  %8 = and i64 %1, -256, !insn.addr !10941
  %9 = or i64 %8, %7, !insn.addr !10941
  %10 = add i64 %9, -125, !insn.addr !10942
  %11 = inttoptr i64 %10 to i32*, !insn.addr !10942
  %12 = load i32, i32* %11, align 4, !insn.addr !10942
  %13 = lshr i32 %12, ptrtoint (i32** @global_var_1c to i32), !insn.addr !10942
  %14 = mul i32 %12, 16, !insn.addr !10942
  %15 = or i32 %13, %14, !insn.addr !10942
  store i32 %15, i32* %11, align 4, !insn.addr !10942
  ret i64 %9, !insn.addr !10943
}

define i64 @function_1830a(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4) local_unnamed_addr {
dec_label_pc_1830a:
  %0 = call i64 @__decompiler_undefined_function_0()
  ret i64 %0, !insn.addr !10944
}

define i64 @function_18311(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4, i64 %arg5) local_unnamed_addr {
dec_label_pc_18311:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = call i64 @__decompiler_undefined_function_0()
  %2 = call i64 @__decompiler_undefined_function_0()
  %3 = call i1 @__decompiler_undefined_function_2()
  %4 = mul i64 %2, add (i64 ptrtoint (i32* @global_var_1 to i64), i64 1), !insn.addr !10945
  %5 = inttoptr i64 %4 to i8*, !insn.addr !10945
  %6 = load i8, i8* %5, align 1, !insn.addr !10945
  %7 = trunc i64 %2 to i8, !insn.addr !10945
  %8 = zext i1 %3 to i8, !insn.addr !10945
  %9 = add i8 %6, %7, !insn.addr !10945
  %10 = add i8 %9, %8, !insn.addr !10945
  store i8 %10, i8* %5, align 1, !insn.addr !10945
  %11 = add i64 %1, 40066, !insn.addr !10946
  %12 = inttoptr i64 %11 to i8*, !insn.addr !10946
  %13 = load i8, i8* %12, align 1, !insn.addr !10946
  %14 = trunc i64 %arg4 to i8, !insn.addr !10946
  %15 = add i8 %13, %14, !insn.addr !10946
  store i8 %15, i8* %12, align 1, !insn.addr !10946
  %16 = add i64 %0, -1994951488, !insn.addr !10947
  %17 = inttoptr i64 %16 to i8*, !insn.addr !10947
  %18 = load i8, i8* %17, align 1, !insn.addr !10947
  %19 = add i8 %18, %7, !insn.addr !10947
  store i8 %19, i8* %17, align 1, !insn.addr !10947
  %20 = add i64 %2, -125, !insn.addr !10948
  %21 = inttoptr i64 %20 to i32*, !insn.addr !10948
  %22 = load i32, i32* %21, align 4, !insn.addr !10948
  %23 = lshr i32 %22, ptrtoint (i32** @global_var_1c to i32), !insn.addr !10948
  %24 = mul i32 %22, 16, !insn.addr !10948
  %25 = or i32 %23, %24, !insn.addr !10948
  store i32 %25, i32* %21, align 4, !insn.addr !10948
  ret i64 %2, !insn.addr !10949
}

define i64 @function_1832b(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4) local_unnamed_addr {
dec_label_pc_1832b:
  %0 = call i64 @__decompiler_undefined_function_0()
  ret i64 %0, !insn.addr !10950
}

define i64 @function_18332(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4, i64 %arg5) local_unnamed_addr {
dec_label_pc_18332:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = call i64 @__decompiler_undefined_function_0()
  %2 = call i64 @__decompiler_undefined_function_0()
  %3 = call i1 @__decompiler_undefined_function_2()
  %4 = mul i64 %2, add (i64 ptrtoint (i32* @global_var_1 to i64), i64 1), !insn.addr !10951
  %5 = inttoptr i64 %4 to i8*, !insn.addr !10951
  %6 = load i8, i8* %5, align 1, !insn.addr !10951
  %7 = trunc i64 %2 to i8, !insn.addr !10951
  %8 = zext i1 %3 to i8, !insn.addr !10951
  %9 = add i8 %6, %7, !insn.addr !10951
  %10 = add i8 %9, %8, !insn.addr !10951
  store i8 %10, i8* %5, align 1, !insn.addr !10951
  %11 = add i64 %1, 41090, !insn.addr !10952
  %12 = inttoptr i64 %11 to i8*, !insn.addr !10952
  %13 = load i8, i8* %12, align 1, !insn.addr !10952
  %14 = trunc i64 %arg4 to i8, !insn.addr !10952
  %15 = add i8 %13, %14, !insn.addr !10952
  store i8 %15, i8* %12, align 1, !insn.addr !10952
  %16 = add i64 %0, -1994951488, !insn.addr !10953
  %17 = inttoptr i64 %16 to i8*, !insn.addr !10953
  %18 = load i8, i8* %17, align 1, !insn.addr !10953
  %19 = add i8 %18, %7, !insn.addr !10953
  store i8 %19, i8* %17, align 1, !insn.addr !10953
  %20 = add i64 %2, -125, !insn.addr !10954
  %21 = inttoptr i64 %20 to i32*, !insn.addr !10954
  %22 = load i32, i32* %21, align 4, !insn.addr !10954
  %23 = lshr i32 %22, ptrtoint (i32** @global_var_1c to i32), !insn.addr !10954
  %24 = mul i32 %22, 16, !insn.addr !10954
  %25 = or i32 %23, %24, !insn.addr !10954
  store i32 %25, i32* %21, align 4, !insn.addr !10954
  ret i64 %2, !insn.addr !10955
}

define i64 @function_1834c(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4) local_unnamed_addr {
dec_label_pc_1834c:
  %0 = call i64 @__decompiler_undefined_function_0()
  ret i64 %0, !insn.addr !10956
}

define i64 @function_1839f() local_unnamed_addr {
dec_label_pc_1839f:
  %0 = call i64 @__decompiler_undefined_function_0()
  ret i64 %0, !insn.addr !10957
}

define i64 @function_183b5() local_unnamed_addr {
dec_label_pc_183b5:
  %0 = call i64 @__decompiler_undefined_function_0()
  ret i64 %0
}

define i64 @function_183c9() local_unnamed_addr {
dec_label_pc_183c9:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = call i64 @__decompiler_undefined_function_0()
  %2 = call i64 @__decompiler_undefined_function_0()
  %3 = call i64 @__decompiler_undefined_function_0()
  %4 = call i64 @function_183db(i64 %0, i64 %1, i64 %2, i64 %3), !insn.addr !10958
  ret i64 %4, !insn.addr !10958
}

define i64 @function_183cb(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4, i64 %arg5) local_unnamed_addr {
dec_label_pc_183cb:
  %rax.0.reg2mem = alloca i64, !insn.addr !10959
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = call i64 @__decompiler_undefined_function_0()
  %2 = inttoptr i64 %1 to i8*, !insn.addr !10960
  %3 = load i8, i8* %2, align 1, !insn.addr !10960
  %4 = trunc i64 %1 to i8, !insn.addr !10960
  %5 = add i8 %3, %4, !insn.addr !10960
  %6 = icmp eq i8 %5, 0, !insn.addr !10960
  store i8 %5, i8* %2, align 1, !insn.addr !10960
  %7 = icmp eq i1 %6, false, !insn.addr !10961
  br i1 %7, label %8, label %dec_label_pc_183d1, !insn.addr !10961

; <label>:8:                                      ; preds = %dec_label_pc_183cb
  %9 = call i64 @function_183db(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4), !insn.addr !10961
  store i64 %9, i64* %rax.0.reg2mem, !insn.addr !10961
  br label %dec_label_pc_183d1, !insn.addr !10961

dec_label_pc_183d1:                               ; preds = %8, %dec_label_pc_183cb
  %rax.0.reload = load i64, i64* %rax.0.reg2mem
  %10 = mul i64 %arg1, 8, !insn.addr !10962
  %11 = and i64 %10, 34359738360, !insn.addr !10963
  %12 = add nuw nsw i64 %11, 1040, !insn.addr !10963
  %13 = add i64 %12, %0, !insn.addr !10963
  %14 = inttoptr i64 %13 to i64*, !insn.addr !10963
  store i64 %arg5, i64* %14, align 8, !insn.addr !10963
  ret i64 %rax.0.reload, !insn.addr !10963
}

define i64 @function_183db(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4) local_unnamed_addr {
dec_label_pc_183db:
  %rax.0.reg2mem = alloca i64, !insn.addr !10964
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = add i64 %arg3, 312, !insn.addr !10964
  %2 = inttoptr i64 %1 to i64*, !insn.addr !10964
  %3 = load i64, i64* %2, align 8, !insn.addr !10964
  %4 = add i64 %3, %0, !insn.addr !10965
  %5 = inttoptr i64 %4 to i32*, !insn.addr !10965
  %6 = load i32, i32* %5, align 4, !insn.addr !10965
  %7 = inttoptr i64 %arg4 to i32*, !insn.addr !10966
  store i32 %6, i32* %7, align 4, !insn.addr !10966
  %8 = load i64, i64* %2, align 8, !insn.addr !10967
  %9 = add i64 %0, 4, !insn.addr !10968
  %10 = add i64 %9, %8, !insn.addr !10968
  %11 = inttoptr i64 %10 to i32*, !insn.addr !10968
  %12 = load i32, i32* %11, align 4, !insn.addr !10968
  %13 = add i64 %arg4, ptrtoint (i16* @global_var_4 to i64), !insn.addr !10969
  %14 = inttoptr i64 %13 to i32*, !insn.addr !10969
  store i32 %12, i32* %14, align 4, !insn.addr !10969
  %15 = add i64 %arg2, zext (i32 ptrtoint (i32* @global_var_1 to i32) to i64), !insn.addr !10970
  %16 = and i64 %15, 4294967295, !insn.addr !10970
  %17 = add i64 %0, ptrtoint (i8* @global_var_8 to i64), !insn.addr !10971
  %18 = add i64 %arg3, 320, !insn.addr !10972
  %19 = inttoptr i64 %18 to i32*, !insn.addr !10972
  %20 = load i32, i32* %19, align 4, !insn.addr !10972
  %21 = sext i32 %20 to i64, !insn.addr !10973
  %22 = icmp slt i64 %16, %21, !insn.addr !10973
  store i64 %17, i64* %rax.0.reg2mem, !insn.addr !10973
  br i1 %22, label %23, label %dec_label_pc_18408, !insn.addr !10973

; <label>:23:                                     ; preds = %dec_label_pc_183db
  %24 = call i64 @function_183b5(), !insn.addr !10973
  store i64 %24, i64* %rax.0.reg2mem, !insn.addr !10973
  br label %dec_label_pc_18408, !insn.addr !10973

dec_label_pc_18408:                               ; preds = %23, %dec_label_pc_183db
  %rax.0.reload = load i64, i64* %rax.0.reg2mem
  ret i64 %rax.0.reload, !insn.addr !10973
}

define i32 @get_ContentAvailabilityDescriptor(i8* %std_b25, i16 %pid, i8* %databuffer) local_unnamed_addr {
dec_label_pc_18409:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = call i64 @__decompiler_undefined_function_0()
  %2 = add i64 %0, 596596, !insn.addr !10974
  %3 = inttoptr i64 %2 to i8*, !insn.addr !10974
  store i8 ptrtoint (i32* @global_var_1 to i8), i8* %3, align 1, !insn.addr !10974
  %4 = trunc i64 %1 to i32, !insn.addr !10975
  ret i32 %4, !insn.addr !10975
}

define i64 @get_ContentAvailabilityDescriptor.51(i64 %arg1, i64 %arg2, i64 %arg3) local_unnamed_addr {
dec_label_pc_18439:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = call i64 @mcount(), !insn.addr !10976
  %2 = call i64 @private_data.26(i64 %arg1), !insn.addr !10977
  %3 = add i64 %2, 1024, !insn.addr !10978
  %4 = inttoptr i64 %3 to i64*, !insn.addr !10978
  %5 = load i64, i64* %4, align 8, !insn.addr !10978
  %6 = add i64 %5, 860, !insn.addr !10979
  %7 = inttoptr i64 %6 to i32*, !insn.addr !10979
  %8 = load i32, i32* %7, align 4, !insn.addr !10979
  %9 = icmp eq i32 %8, 0, !insn.addr !10980
  br i1 %9, label %dec_label_pc_184c2, label %dec_label_pc_184a9, !insn.addr !10981

dec_label_pc_184a9:                               ; preds = %dec_label_pc_18439
  %10 = zext i32 %8 to i64, !insn.addr !10979
  %11 = add i64 %5, 600, !insn.addr !10982
  %12 = call i64 @memcpy(i64 %arg3, i64 %11, i64 %10, i64 %0), !insn.addr !10983
  %13 = load i32, i32* %7, align 4, !insn.addr !10984
  %14 = zext i32 %13 to i64, !insn.addr !10984
  ret i64 %14, !insn.addr !10985

dec_label_pc_184c2:                               ; preds = %dec_label_pc_18439
  %15 = add i64 %5, 1388, !insn.addr !10986
  %16 = inttoptr i64 %15 to i32*, !insn.addr !10986
  %17 = load i32, i32* %16, align 4, !insn.addr !10986
  %18 = icmp eq i32 %17, 0, !insn.addr !10987
  br i1 %18, label %dec_label_pc_184e5, label %dec_label_pc_184cc, !insn.addr !10988

dec_label_pc_184cc:                               ; preds = %dec_label_pc_184c2
  %19 = zext i32 %17 to i64, !insn.addr !10986
  %20 = add i64 %5, 1128, !insn.addr !10989
  %21 = call i64 @memcpy(i64 %arg3, i64 %20, i64 %19, i64 %0), !insn.addr !10990
  %22 = load i32, i32* %16, align 4, !insn.addr !10991
  %23 = zext i32 %22 to i64, !insn.addr !10991
  ret i64 %23, !insn.addr !10992

dec_label_pc_184e5:                               ; preds = %dec_label_pc_184c2
  %24 = add i64 %5, 1916, !insn.addr !10993
  %25 = inttoptr i64 %24 to i32*, !insn.addr !10993
  %26 = load i32, i32* %25, align 4, !insn.addr !10993
  %27 = zext i32 %26 to i64, !insn.addr !10994
  %28 = add i64 %5, 1656, !insn.addr !10995
  %29 = call i64 @memcpy(i64 %arg3, i64 %28, i64 %27, i64 %0), !insn.addr !10996
  ret i64 %29, !insn.addr !10996
}

define i32 @get_DigitalCopyControlDescriptor(i8* %std_b25, i16 %pid, i8* %databuffer) local_unnamed_addr {
dec_label_pc_18500:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = add i64 %0, 1916, !insn.addr !10997
  %2 = inttoptr i64 %1 to i32*, !insn.addr !10997
  %3 = load i32, i32* %2, align 4, !insn.addr !10997
  ret i32 %3, !insn.addr !10998
}

define i64 @get_DigitalCopyControlDescriptor.52(i64 %arg1, i64 %arg2, i64 %arg3) local_unnamed_addr {
dec_label_pc_18530:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = call i64 @mcount(), !insn.addr !10999
  %2 = call i64 @private_data.26(i64 %arg1), !insn.addr !11000
  %3 = add i64 %2, 1024, !insn.addr !11001
  %4 = inttoptr i64 %3 to i64*, !insn.addr !11001
  %5 = load i64, i64* %4, align 8, !insn.addr !11001
  %6 = add i64 %5, 596, !insn.addr !11002
  %7 = inttoptr i64 %6 to i32*, !insn.addr !11002
  %8 = load i32, i32* %7, align 4, !insn.addr !11002
  %9 = icmp eq i32 %8, 0, !insn.addr !11003
  br i1 %9, label %dec_label_pc_185b9, label %dec_label_pc_185a0, !insn.addr !11004

dec_label_pc_185a0:                               ; preds = %dec_label_pc_18530
  %10 = zext i32 %8 to i64, !insn.addr !11002
  %11 = add i64 %5, 336, !insn.addr !11005
  %12 = call i64 @memcpy(i64 %arg3, i64 %11, i64 %10, i64 %0), !insn.addr !11006
  %13 = load i32, i32* %7, align 4, !insn.addr !11007
  %14 = zext i32 %13 to i64, !insn.addr !11007
  ret i64 %14, !insn.addr !11008

dec_label_pc_185b9:                               ; preds = %dec_label_pc_18530
  %15 = add i64 %5, 1124, !insn.addr !11009
  %16 = inttoptr i64 %15 to i32*, !insn.addr !11009
  %17 = load i32, i32* %16, align 4, !insn.addr !11009
  %18 = icmp eq i32 %17, 0, !insn.addr !11010
  br i1 %18, label %dec_label_pc_185dc, label %dec_label_pc_185c3, !insn.addr !11011

dec_label_pc_185c3:                               ; preds = %dec_label_pc_185b9
  %19 = zext i32 %17 to i64, !insn.addr !11009
  %20 = add i64 %5, 864, !insn.addr !11012
  %21 = call i64 @memcpy(i64 %arg3, i64 %20, i64 %19, i64 %0), !insn.addr !11013
  %22 = load i32, i32* %16, align 4, !insn.addr !11014
  %23 = zext i32 %22 to i64, !insn.addr !11014
  ret i64 %23, !insn.addr !11015

dec_label_pc_185dc:                               ; preds = %dec_label_pc_185b9
  %24 = add i64 %5, 1652, !insn.addr !11016
  %25 = inttoptr i64 %24 to i32*, !insn.addr !11016
  %26 = load i32, i32* %25, align 4, !insn.addr !11016
  %27 = zext i32 %26 to i64, !insn.addr !11017
  %28 = add i64 %5, 1392, !insn.addr !11018
  %29 = call i64 @memcpy(i64 %arg3, i64 %28, i64 %27, i64 %0), !insn.addr !11019
  ret i64 %29, !insn.addr !11019
}

define i32 @get_prognum_ex(i8* %std_b25, i8* %prognum) local_unnamed_addr {
dec_label_pc_185f7:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = add i64 %0, 1652, !insn.addr !11020
  %2 = inttoptr i64 %1 to i32*, !insn.addr !11020
  %3 = load i32, i32* %2, align 4, !insn.addr !11020
  ret i32 %3, !insn.addr !11021
}

define i64 @get_prognum_ex.53(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_18627:
  %0 = call i64 @mcount(), !insn.addr !11022
  %1 = call i64 @private_data.26(i64 %arg1), !insn.addr !11023
  ret i64 %1, !insn.addr !11024
}

define void @swap_ts_section(i64 %curr, i64 %next) local_unnamed_addr {
dec_label_pc_1864b:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = call i64 @__decompiler_undefined_function_0()
  %2 = call i64 @__decompiler_undefined_function_0()
  %3 = call i64 @__decompiler_undefined_function_0()
  %4 = trunc i64 %3 to i8
  %5 = mul i8 %4, 2, !insn.addr !11025
  %6 = inttoptr i64 %3 to i8*, !insn.addr !11025
  store i8 %5, i8* %6, align 1, !insn.addr !11025
  %7 = add i64 %1, 596596, !insn.addr !11026
  %8 = inttoptr i64 %7 to i8*, !insn.addr !11026
  %9 = load i8, i8* %8, align 1, !insn.addr !11026
  %10 = icmp eq i8 %9, 0, !insn.addr !11026
  br i1 %10, label %dec_label_pc_18670, label %dec_label_pc_18656, !insn.addr !11027

dec_label_pc_18656:                               ; preds = %dec_label_pc_1864b
  %11 = add i64 %1, 67188, !insn.addr !11028
  %12 = call i64 @memcpy(i64 %0, i64 %11, i64 529408, i64 %2), !insn.addr !11029
  br label %dec_label_pc_18670, !insn.addr !11030

dec_label_pc_18670:                               ; preds = %dec_label_pc_18656, %dec_label_pc_1864b
  ret void, !insn.addr !11031
}

define i64 @swap_ts_section.54(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_1867b:
  %0 = call i64 @mcount(), !insn.addr !11032
  %1 = add i64 %arg1, 64, !insn.addr !11033
  %2 = inttoptr i64 %1 to i32*, !insn.addr !11033
  %3 = load i32, i32* %2, align 4, !insn.addr !11033
  %4 = add i64 %arg1, 60, !insn.addr !11034
  %5 = inttoptr i64 %4 to i32*, !insn.addr !11034
  %6 = load i32, i32* %5, align 4, !insn.addr !11034
  %7 = add i64 %arg1, 56, !insn.addr !11035
  %8 = inttoptr i64 %7 to i32*, !insn.addr !11035
  %9 = load i32, i32* %8, align 4, !insn.addr !11035
  %10 = add i64 %arg1, 52, !insn.addr !11036
  %11 = inttoptr i64 %10 to i32*, !insn.addr !11036
  %12 = load i32, i32* %11, align 4, !insn.addr !11036
  %13 = add i64 %arg1, 48, !insn.addr !11037
  %14 = inttoptr i64 %13 to i32*, !insn.addr !11037
  %15 = load i32, i32* %14, align 4, !insn.addr !11037
  %16 = add i64 %arg1, 44, !insn.addr !11038
  %17 = inttoptr i64 %16 to i32*, !insn.addr !11038
  %18 = load i32, i32* %17, align 4, !insn.addr !11038
  %19 = add i64 %arg1, 40, !insn.addr !11039
  %20 = inttoptr i64 %19 to i32*, !insn.addr !11039
  %21 = load i32, i32* %20, align 4, !insn.addr !11039
  %22 = add i64 %arg1, 36, !insn.addr !11040
  %23 = inttoptr i64 %22 to i32*, !insn.addr !11040
  %24 = load i32, i32* %23, align 4, !insn.addr !11040
  %25 = inttoptr i64 %arg1 to i64*, !insn.addr !11041
  store i64 %arg2, i64* %25, align 8, !insn.addr !11041
  %26 = add i64 %arg2, ptrtoint (i8* @global_var_8 to i64), !insn.addr !11042
  %27 = inttoptr i64 %26 to i64*, !insn.addr !11042
  %28 = load i64, i64* %27, align 8, !insn.addr !11042
  %29 = add i64 %arg1, ptrtoint (i8* @global_var_8 to i64), !insn.addr !11043
  %30 = inttoptr i64 %29 to i64*, !insn.addr !11043
  store i64 %28, i64* %30, align 8, !insn.addr !11043
  %31 = add i64 %arg2, ptrtoint (i8* @global_var_10 to i64), !insn.addr !11044
  %32 = inttoptr i64 %31 to i64*, !insn.addr !11044
  %33 = load i64, i64* %32, align 8, !insn.addr !11044
  %34 = add i64 %arg1, ptrtoint (i8* @global_var_10 to i64), !insn.addr !11045
  %35 = inttoptr i64 %34 to i64*, !insn.addr !11045
  store i64 %33, i64* %35, align 8, !insn.addr !11045
  %36 = add i64 %arg2, ptrtoint (i32** @global_var_18 to i64), !insn.addr !11046
  %37 = inttoptr i64 %36 to i64*, !insn.addr !11046
  %38 = load i64, i64* %37, align 8, !insn.addr !11046
  %39 = add i64 %arg1, ptrtoint (i32** @global_var_18 to i64), !insn.addr !11047
  %40 = inttoptr i64 %39 to i64*, !insn.addr !11047
  store i64 %38, i64* %40, align 8, !insn.addr !11047
  %41 = add i64 %arg2, ptrtoint (i32** @global_var_20 to i64), !insn.addr !11048
  %42 = inttoptr i64 %41 to i64*, !insn.addr !11048
  %43 = load i64, i64* %42, align 8, !insn.addr !11048
  %44 = add i64 %arg1, ptrtoint (i32** @global_var_20 to i64), !insn.addr !11049
  %45 = inttoptr i64 %44 to i64*, !insn.addr !11049
  store i64 %43, i64* %45, align 8, !insn.addr !11049
  %46 = add i64 %arg2, 40, !insn.addr !11050
  %47 = inttoptr i64 %46 to i64*, !insn.addr !11050
  %48 = load i64, i64* %47, align 8, !insn.addr !11050
  %49 = inttoptr i64 %19 to i64*, !insn.addr !11051
  store i64 %48, i64* %49, align 8, !insn.addr !11051
  %50 = add i64 %arg2, 48, !insn.addr !11052
  %51 = inttoptr i64 %50 to i64*, !insn.addr !11052
  %52 = load i64, i64* %51, align 8, !insn.addr !11052
  %53 = inttoptr i64 %13 to i64*, !insn.addr !11053
  store i64 %52, i64* %53, align 8, !insn.addr !11053
  %54 = add i64 %arg2, 56, !insn.addr !11054
  %55 = inttoptr i64 %54 to i64*, !insn.addr !11054
  %56 = load i64, i64* %55, align 8, !insn.addr !11054
  %57 = inttoptr i64 %7 to i64*, !insn.addr !11055
  store i64 %56, i64* %57, align 8, !insn.addr !11055
  %58 = add i64 %arg2, 64, !insn.addr !11056
  %59 = inttoptr i64 %58 to i64*, !insn.addr !11056
  %60 = load i64, i64* %59, align 8, !insn.addr !11056
  %61 = inttoptr i64 %1 to i64*, !insn.addr !11057
  store i64 %60, i64* %61, align 8, !insn.addr !11057
  %62 = inttoptr i64 %58 to i32*, !insn.addr !11058
  store i32 %3, i32* %62, align 4, !insn.addr !11058
  %63 = add i64 %arg2, 60, !insn.addr !11059
  %64 = inttoptr i64 %63 to i32*, !insn.addr !11059
  store i32 %6, i32* %64, align 4, !insn.addr !11059
  %65 = inttoptr i64 %54 to i32*, !insn.addr !11060
  store i32 %9, i32* %65, align 4, !insn.addr !11060
  %66 = add i64 %arg2, 52, !insn.addr !11061
  %67 = inttoptr i64 %66 to i32*, !insn.addr !11061
  store i32 %12, i32* %67, align 4, !insn.addr !11061
  %68 = inttoptr i64 %50 to i32*, !insn.addr !11062
  store i32 %15, i32* %68, align 4, !insn.addr !11062
  %69 = add i64 %arg2, 44, !insn.addr !11063
  %70 = inttoptr i64 %69 to i32*, !insn.addr !11063
  store i32 %18, i32* %70, align 4, !insn.addr !11063
  %71 = inttoptr i64 %46 to i32*, !insn.addr !11064
  store i32 %21, i32* %71, align 4, !insn.addr !11064
  %72 = add i64 %arg2, 36, !insn.addr !11065
  %73 = inttoptr i64 %72 to i32*, !insn.addr !11065
  store i32 %24, i32* %73, align 4, !insn.addr !11065
  ret i64 %60, !insn.addr !11065
}

define i32 @proc_emm(i64 %prv) local_unnamed_addr {
dec_label_pc_1873a:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = call i64 @__decompiler_undefined_function_0()
  %2 = call i64 @__decompiler_undefined_function_0()
  %3 = call i64 @__decompiler_undefined_function_0()
  %4 = trunc i64 %0 to i32, !insn.addr !11066
  %5 = add i64 %1, ptrtoint (i32** @global_var_20 to i64), !insn.addr !11066
  %6 = inttoptr i64 %5 to i32*, !insn.addr !11066
  store i32 %4, i32* %6, align 4, !insn.addr !11066
  %7 = trunc i64 %3 to i32, !insn.addr !11067
  %8 = add i64 %1, ptrtoint (i32** @global_var_18 to i64), !insn.addr !11067
  %9 = inttoptr i64 %8 to i32*, !insn.addr !11067
  store i32 %7, i32* %9, align 4, !insn.addr !11067
  %10 = add i64 %1, ptrtoint (i8* @global_var_10 to i64), !insn.addr !11068
  %11 = inttoptr i64 %10 to i64*, !insn.addr !11068
  %12 = add i64 %2, -56, !insn.addr !11069
  %13 = inttoptr i64 %12 to i64*, !insn.addr !11069
  %14 = load i64, i64* %13, align 8, !insn.addr !11069
  %15 = add i64 %1, ptrtoint (i8* @global_var_8 to i64), !insn.addr !11070
  %16 = inttoptr i64 %15 to i64*, !insn.addr !11070
  store i64 %14, i64* %16, align 8, !insn.addr !11070
  %17 = add i64 %2, -48, !insn.addr !11071
  %18 = inttoptr i64 %17 to i64*, !insn.addr !11071
  %19 = load i64, i64* %18, align 8, !insn.addr !11071
  %20 = inttoptr i64 %1 to i64*, !insn.addr !11072
  store i64 %19, i64* %20, align 8, !insn.addr !11072
  %21 = trunc i64 %19 to i32, !insn.addr !11073
  ret i32 %21, !insn.addr !11073
}

define i64 @proc_emm.55(i64 %arg1) local_unnamed_addr {
dec_label_pc_1876a:
  %0 = call i64 @mcount(), !insn.addr !11074
  %1 = add i64 %arg1, 616, !insn.addr !11075
  %2 = inttoptr i64 %1 to i64*, !insn.addr !11075
  %3 = load i64, i64* %2, align 8, !insn.addr !11075
  %4 = add i64 %3, 10, !insn.addr !11076
  %5 = inttoptr i64 %4 to i8*, !insn.addr !11076
  %6 = load i8, i8* %5, align 1, !insn.addr !11076
  %7 = zext i8 %6 to i64, !insn.addr !11077
  %8 = mul i64 %7, 256, !insn.addr !11077
  %9 = add i64 %3, 11, !insn.addr !11078
  %10 = inttoptr i64 %9 to i8*, !insn.addr !11078
  %11 = load i8, i8* %10, align 1, !insn.addr !11078
  %12 = zext i8 %11 to i64, !insn.addr !11079
  %13 = or i64 %8, %12, !insn.addr !11079
  %14 = mul i64 %13, 256, !insn.addr !11080
  %15 = add i64 %3, 12, !insn.addr !11081
  %16 = inttoptr i64 %15 to i8*, !insn.addr !11081
  %17 = load i8, i8* %16, align 1, !insn.addr !11081
  %18 = zext i8 %17 to i64, !insn.addr !11082
  %19 = or i64 %14, %18, !insn.addr !11082
  %20 = mul i64 %19, 256, !insn.addr !11083
  %21 = add i64 %3, 13, !insn.addr !11084
  %22 = inttoptr i64 %21 to i8*, !insn.addr !11084
  %23 = load i8, i8* %22, align 1, !insn.addr !11084
  %24 = zext i8 %23 to i64, !insn.addr !11085
  %25 = or i64 %20, %24, !insn.addr !11085
  %26 = add i64 %arg1, 67104, !insn.addr !11086
  %27 = inttoptr i64 %26 to i32*, !insn.addr !11086
  %28 = load i32, i32* %27, align 4, !insn.addr !11086
  %29 = trunc i64 %25 to i32, !insn.addr !11086
  %30 = icmp eq i32 %28, %29, !insn.addr !11086
  %31 = icmp eq i1 %30, false, !insn.addr !11087
  br i1 %31, label %dec_label_pc_1884a, label %dec_label_pc_18803, !insn.addr !11087

dec_label_pc_18803:                               ; preds = %dec_label_pc_1876a
  %32 = add i64 %3, 8, !insn.addr !11088
  %33 = inttoptr i64 %32 to i8*, !insn.addr !11089
  %34 = load i8, i8* %33, align 1, !insn.addr !11089
  %35 = zext i8 %34 to i64, !insn.addr !11090
  %36 = mul i64 %35, 256, !insn.addr !11090
  %37 = add i64 %3, 9, !insn.addr !11091
  %38 = inttoptr i64 %37 to i8*, !insn.addr !11091
  %39 = load i8, i8* %38, align 1, !insn.addr !11091
  %40 = zext i8 %39 to i64, !insn.addr !11092
  %41 = or i64 %36, %40, !insn.addr !11092
  %42 = add i64 %arg1, 67108, !insn.addr !11093
  %43 = inttoptr i64 %42 to i32*, !insn.addr !11093
  %44 = load i32, i32* %43, align 4, !insn.addr !11093
  %45 = trunc i64 %41 to i32, !insn.addr !11093
  %46 = icmp eq i32 %44, %45, !insn.addr !11093
  %47 = icmp eq i1 %46, false, !insn.addr !11094
  br i1 %47, label %dec_label_pc_1884a, label %dec_label_pc_1880d, !insn.addr !11094

dec_label_pc_1880d:                               ; preds = %dec_label_pc_18803
  %48 = add i64 %arg1, 756, !insn.addr !11095
  %49 = add i64 %3, 14, !insn.addr !11096
  %50 = inttoptr i64 %49 to i8*, !insn.addr !11096
  %51 = load i8, i8* %50, align 1, !insn.addr !11096
  %52 = zext i8 %51 to i64, !insn.addr !11097
  %53 = add nuw nsw i64 %52, 7, !insn.addr !11097
  %54 = call i64 @memcpy(i64 %48, i64 %32, i64 %53, i64 %41), !insn.addr !11098
  %55 = trunc i64 %53 to i32, !insn.addr !11099
  %56 = add i64 %arg1, 1012, !insn.addr !11099
  %57 = inttoptr i64 %56 to i32*, !insn.addr !11099
  store i32 %55, i32* %57, align 4, !insn.addr !11099
  %58 = add i64 %arg1, 752, !insn.addr !11100
  %59 = inttoptr i64 %58 to i32*, !insn.addr !11100
  store i32 ptrtoint (i32* @global_var_1 to i32), i32* %59, align 4, !insn.addr !11100
  %60 = add i64 %arg1, 67096, !insn.addr !11101
  %61 = inttoptr i64 %60 to i64*, !insn.addr !11101
  %62 = load i64, i64* %61, align 8, !insn.addr !11101
  %63 = trunc i64 %62 to i32, !insn.addr !11102
  %64 = icmp slt i32 %63, 0, !insn.addr !11102
  %65 = icmp eq i1 %64, false, !insn.addr !11103
  %brmerge = or i1 %65, icmp sge (i32 ptrtoint (i32* @global_var_1 to i32), i32 101)
  br i1 %brmerge, label %dec_label_pc_18865, label %dec_label_pc_1886c, !insn.addr !11103

dec_label_pc_1884a:                               ; preds = %dec_label_pc_18803, %dec_label_pc_1876a
  %66 = add i64 %arg1, 752, !insn.addr !11104
  %67 = inttoptr i64 %66 to i32*, !insn.addr !11104
  store i32 0, i32* %67, align 4, !insn.addr !11104
  ret i64 %25, !insn.addr !11105

dec_label_pc_18865:                               ; preds = %dec_label_pc_1880d
  %.mux = select i1 %65, i64 %62, i64 4294967285
  ret i64 %.mux, !insn.addr !11106

dec_label_pc_1886c:                               ; preds = %dec_label_pc_1880d
  store i32 add (i32 ptrtoint (i32* @global_var_1 to i32), i32 1), i32* %59, align 4, !insn.addr !11107
  ret i64 zext (i32 add (i32 ptrtoint (i32* @global_var_1 to i32), i32 1) to i64), !insn.addr !11108
}

define i32 @proc_sdt(i64 %prv) local_unnamed_addr {
dec_label_pc_1887c:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = call i64 @__decompiler_undefined_function_0()
  %2 = call i64 @__decompiler_undefined_function_0()
  %3 = call i64 @__decompiler_undefined_function_0()
  %4 = and i64 %3, -16, !insn.addr !11109
  %5 = trunc i64 %4 to i8, !insn.addr !11110
  %6 = inttoptr i64 %4 to i8*, !insn.addr !11110
  %7 = load i8, i8* %6, align 16, !insn.addr !11110
  %8 = add i8 %7, %5, !insn.addr !11110
  %9 = zext i8 %8 to i64, !insn.addr !11110
  %10 = and i64 %3, -256, !insn.addr !11110
  %11 = or i64 %10, %9, !insn.addr !11110
  %12 = inttoptr i64 %11 to i8*, !insn.addr !11111
  %13 = load i8, i8* %12, align 1, !insn.addr !11111
  %factor = mul i8 %8, 2
  %14 = add i8 %factor, %13, !insn.addr !11112
  store i8 %14, i8* %12, align 1, !insn.addr !11112
  %15 = add i64 %0, 99, !insn.addr !11113
  %16 = inttoptr i64 %15 to i8*, !insn.addr !11113
  %17 = load i8, i8* %16, align 1, !insn.addr !11113
  %18 = trunc i64 %2 to i8, !insn.addr !11113
  %19 = add i8 %17, %18, !insn.addr !11113
  store i8 %19, i8* %16, align 1, !insn.addr !11113
  %20 = trunc i64 %1 to i16, !insn.addr !11114
  %21 = call i32 @__asm_in.623(i16 %20), !insn.addr !11114
  ret i32 0, !insn.addr !11115
}

define i64 @proc_sdt.56(i64 %arg1, i64 %arg2, i64 %arg3) local_unnamed_addr {
dec_label_pc_188ac:
  %0 = call i64 @mcount(), !insn.addr !11116
  %1 = add i64 %arg1, 320, !insn.addr !11117
  %2 = inttoptr i64 %1 to i64*, !insn.addr !11117
  %3 = load i64, i64* %2, align 8, !insn.addr !11117
  %4 = add i64 %3, 11, !insn.addr !11118
  ret i64 %4, !insn.addr !11119
}

define i32 @proc_eit(i64 %prv) local_unnamed_addr {
dec_label_pc_18a54:
  ret i32 0, !insn.addr !11120
}

define i64 @proc_eit.57(i64 %arg1, i64 %arg2, i64 %arg3) local_unnamed_addr {
dec_label_pc_18a84:
  %0 = call i64 @mcount(), !insn.addr !11121
  %1 = add i64 %arg1, 464, !insn.addr !11122
  %2 = inttoptr i64 %1 to i64*, !insn.addr !11122
  %3 = load i64, i64* %2, align 8, !insn.addr !11122
  %4 = add i64 %3, 14, !insn.addr !11123
  ret i64 %4, !insn.addr !11124
}

define void @release_work_buffer(i64 %buf) local_unnamed_addr {
dec_label_pc_18c28:
  ret void, !insn.addr !11125
}

define i64 @release_work_buffer.58(i64 %arg1) local_unnamed_addr {
dec_label_pc_18c58:
  %0 = call i64 @mcount(), !insn.addr !11126
  ret i64 %0, !insn.addr !11127
}

define void @release_ts_section(i64 %sect) local_unnamed_addr {
dec_label_pc_18c6b:
  ret void
}

define i64 @function_18c6c(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_18c6c:
  %rax.0.reg2mem = alloca i64, !insn.addr !11128
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = icmp eq i64 %arg1, 0, !insn.addr !11128
  br i1 %1, label %dec_label_pc_18c76, label %dec_label_pc_18c71, !insn.addr !11129

dec_label_pc_18c71:                               ; preds = %dec_label_pc_18c6c
  %2 = call i64 @kfree(i64 %arg1), !insn.addr !11130
  store i64 %2, i64* %rax.0.reg2mem, !insn.addr !11130
  br label %dec_label_pc_18c76, !insn.addr !11130

dec_label_pc_18c76:                               ; preds = %dec_label_pc_18c71, %dec_label_pc_18c6c
  %rax.0.reload = load i64, i64* %rax.0.reg2mem
  %3 = inttoptr i64 %0 to i64*, !insn.addr !11131
  store i64 0, i64* %3, align 8, !insn.addr !11131
  %4 = add i64 %0, ptrtoint (i8* @global_var_8 to i64), !insn.addr !11132
  %5 = inttoptr i64 %4 to i64*, !insn.addr !11132
  store i64 0, i64* %5, align 8, !insn.addr !11132
  %6 = add i64 %0, ptrtoint (i8* @global_var_10 to i64), !insn.addr !11133
  %7 = inttoptr i64 %6 to i64*, !insn.addr !11133
  store i64 0, i64* %7, align 8, !insn.addr !11133
  %8 = add i64 %0, ptrtoint (i32** @global_var_18 to i64), !insn.addr !11134
  %9 = inttoptr i64 %8 to i32*, !insn.addr !11134
  store i32 0, i32* %9, align 4, !insn.addr !11134
  ret i64 %rax.0.reload, !insn.addr !11135
}

define i64 @release_ts_section.59(i64 %arg1) local_unnamed_addr {
dec_label_pc_18c9b:
  %0 = call i64 @mcount(), !insn.addr !11136
  %1 = call i64 @release_work_buffer.58(i64 %arg1), !insn.addr !11137
  ret i64 %1, !insn.addr !11137
}

define void @release_program(i64 %pgrm) local_unnamed_addr {
dec_label_pc_18cb2:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = add i64 %0, zext (i32 ptrtoint (i32** @global_var_20 to i32) to i64), !insn.addr !11138
  %2 = and i64 %1, 4294967295, !insn.addr !11138
  %3 = inttoptr i64 %2 to i64*, !insn.addr !11139
  store i64 0, i64* %3, align 8, !insn.addr !11139
  %4 = add i64 %2, ptrtoint (i8* @global_var_8 to i64), !insn.addr !11140
  %5 = inttoptr i64 %4 to i64*, !insn.addr !11140
  store i64 0, i64* %5, align 8, !insn.addr !11140
  %6 = add i64 %2, ptrtoint (i8* @global_var_10 to i64), !insn.addr !11141
  %7 = inttoptr i64 %6 to i64*, !insn.addr !11141
  store i64 0, i64* %7, align 8, !insn.addr !11141
  %8 = add i64 %2, ptrtoint (i32** @global_var_18 to i64), !insn.addr !11142
  %9 = inttoptr i64 %8 to i64*, !insn.addr !11142
  store i64 0, i64* %9, align 8, !insn.addr !11142
  %10 = add i64 %2, ptrtoint (i32** @global_var_20 to i64), !insn.addr !11143
  %11 = inttoptr i64 %10 to i32*, !insn.addr !11143
  store i32 0, i32* %11, align 4, !insn.addr !11143
  ret void, !insn.addr !11144
}

define i64 @release_program.60(i64 %arg1) local_unnamed_addr {
dec_label_pc_18ce2:
  %0 = call i64 @mcount(), !insn.addr !11145
  %1 = add i64 %arg1, ptrtoint (i8* @global_var_8 to i64), !insn.addr !11146
  %2 = call i64 @release_ts_section.59(i64 %1), !insn.addr !11147
  %3 = add i64 %arg1, 80, !insn.addr !11148
  %4 = call i64 @release_ts_section.59(i64 %3), !insn.addr !11149
  %5 = add i64 %arg1, 168, !insn.addr !11150
  %6 = call i64 @release_ts_section.59(i64 %5), !insn.addr !11151
  %7 = add i64 %arg1, 240, !insn.addr !11152
  %8 = call i64 @release_ts_section.59(i64 %7), !insn.addr !11153
  ret i64 %8, !insn.addr !11154
}

define i32 @proc_pmt(i64 %pgrm) local_unnamed_addr {
dec_label_pc_18d2d:
  %.reg2mem = alloca i32, !insn.addr !11155
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = call i64 @__decompiler_undefined_function_0()
  %rax = alloca i64, align 8
  %2 = call i64 @__decompiler_undefined_function_0()
  %3 = add i64 %2, -57, !insn.addr !11155
  %4 = inttoptr i64 %3 to i8*, !insn.addr !11155
  %5 = load i8, i8* %4, align 1, !insn.addr !11155
  %6 = trunc i64 %1 to i8, !insn.addr !11155
  %7 = add i8 %5, %6, !insn.addr !11155
  store i8 %7, i8* %4, align 1, !insn.addr !11155
  %8 = bitcast i64* %rax to i8*
  %9 = load i8, i8* %8, align 8, !insn.addr !11156
  %10 = load i64, i64* %rax, align 8
  %11 = trunc i64 %10 to i8, !insn.addr !11156
  %12 = add i8 %9, %11, !insn.addr !11156
  %13 = inttoptr i64 %10 to i8*, !insn.addr !11156
  store i8 %12, i8* %13, align 1, !insn.addr !11156
  %14 = load i8, i8* %8, align 8, !insn.addr !11157
  %15 = load i64, i64* %rax, align 8
  %16 = trunc i64 %15 to i8, !insn.addr !11157
  %17 = add i8 %14, %16, !insn.addr !11157
  %18 = inttoptr i64 %15 to i8*, !insn.addr !11157
  store i8 %17, i8* %18, align 1, !insn.addr !11157
  %19 = load i8, i8* %8, align 8, !insn.addr !11158
  %20 = load i64, i64* %rax, align 8
  %21 = trunc i64 %20 to i8, !insn.addr !11158
  %22 = add i8 %19, %21, !insn.addr !11158
  %23 = inttoptr i64 %20 to i8*, !insn.addr !11158
  store i8 %22, i8* %23, align 1, !insn.addr !11158
  %24 = add i64 %0, 328, !insn.addr !11159
  %25 = inttoptr i64 %24 to i64*, !insn.addr !11159
  %26 = load i64, i64* %25, align 8, !insn.addr !11159
  store i64 %26, i64* %rax, align 8, !insn.addr !11159
  %27 = icmp eq i64 %26, 0, !insn.addr !11160
  store i32 0, i32* %.reg2mem, !insn.addr !11161
  br i1 %27, label %dec_label_pc_18d56, label %dec_label_pc_18d45, !insn.addr !11161

dec_label_pc_18d45:                               ; preds = %dec_label_pc_18d2d
  store i64 0, i64* %25, align 8, !insn.addr !11162
  %.pre = load i64, i64* %rax, align 8
  %phitmp = trunc i64 %.pre to i32
  store i32 %phitmp, i32* %.reg2mem, !insn.addr !11162
  br label %dec_label_pc_18d56, !insn.addr !11162

dec_label_pc_18d56:                               ; preds = %dec_label_pc_18d45, %dec_label_pc_18d2d
  %.reload = load i32, i32* %.reg2mem, !insn.addr !11163
  ret i32 %.reload, !insn.addr !11163
}

define i64 @proc_pmt.61(i32 %arg1) local_unnamed_addr {
dec_label_pc_18d5d:
  %.reg2mem = alloca i32, !insn.addr !11164
  %rdx.6.reg2mem = alloca i64, !insn.addr !11164
  %rcx.1.reg2mem = alloca i32, !insn.addr !11164
  %rdx.5.reg2mem = alloca i64, !insn.addr !11164
  %rcx.0.reg2mem = alloca i64, !insn.addr !11164
  %rax.1.reg2mem = alloca i64, !insn.addr !11164
  %rdx.4.reg2mem = alloca i64, !insn.addr !11164
  %rdx.3.reg2mem = alloca i64, !insn.addr !11164
  %.pre-phi11.reg2mem = alloca i64, !insn.addr !11164
  %rdx.1.reg2mem = alloca i64, !insn.addr !11164
  %r13.0.reg2mem = alloca i64, !insn.addr !11164
  %rdx.0.reg2mem = alloca i64, !insn.addr !11164
  %rax.0.reg2mem = alloca i64, !insn.addr !11164
  %0 = sext i32 %arg1 to i64
  %1 = call i64 @mcount(), !insn.addr !11165
  %2 = add i64 %0, ptrtoint (i8* @global_var_10 to i64), !insn.addr !11166
  %3 = inttoptr i64 %2 to i64*, !insn.addr !11166
  %4 = load i64, i64* %3, align 8, !insn.addr !11166
  %5 = add i64 %4, ptrtoint (i8* @global_var_8 to i64), !insn.addr !11167
  %6 = add nsw i64 %0, 52, !insn.addr !11168
  %7 = inttoptr i64 %6 to i32*, !insn.addr !11168
  %8 = load i32, i32* %7, align 4, !insn.addr !11168
  %9 = add i64 %4, add (i64 ptrtoint (i8* @global_var_8 to i64), i64 ptrtoint (i32* @global_var_1 to i64)), !insn.addr !11169
  %10 = inttoptr i64 %9 to i8*, !insn.addr !11169
  %11 = load i8, i8* %10, align 1, !insn.addr !11169
  %12 = inttoptr i64 %5 to i8*, !insn.addr !11170
  %13 = load i8, i8* %12, align 1, !insn.addr !11170
  %14 = zext i8 %13 to i32, !insn.addr !11171
  %15 = shl i32 %14, ptrtoint (i8* @global_var_8 to i32), !insn.addr !11171
  %16 = zext i8 %11 to i32, !insn.addr !11172
  %.masked = urem i32 %15, 8192
  %17 = or i32 %.masked, %16, !insn.addr !11173
  %18 = zext i32 %17 to i64, !insn.addr !11173
  %19 = add nsw i64 %0, 156, !insn.addr !11174
  %20 = inttoptr i64 %19 to i32*, !insn.addr !11174
  store i32 %17, i32* %20, align 4, !insn.addr !11174
  %21 = add i64 %4, ptrtoint ([4 x i8]* @global_var_c to i64), !insn.addr !11175
  %22 = add i64 %4, add (i64 ptrtoint (i8* @global_var_8 to i64), i64 ptrtoint (i32* @global_var_2 to i64)), !insn.addr !11176
  %23 = inttoptr i64 %22 to i8*, !insn.addr !11176
  %24 = load i8, i8* %23, align 1, !insn.addr !11176
  %25 = zext i8 %24 to i32, !insn.addr !11177
  %26 = shl i32 %25, ptrtoint (i8* @global_var_8 to i32), !insn.addr !11177
  %27 = add i64 %4, add (i64 ptrtoint (i8* @global_var_8 to i64), i64 ptrtoint (i8** @global_var_3 to i64)), !insn.addr !11178
  %28 = inttoptr i64 %27 to i8*, !insn.addr !11178
  %29 = load i8, i8* %28, align 1, !insn.addr !11178
  %30 = zext i8 %29 to i32, !insn.addr !11179
  %31 = or i32 %26, %30, !insn.addr !11179
  %32 = and i32 %31, ptrtoint (i32* @global_var_fff to i32), !insn.addr !11180
  %33 = zext i32 %32 to i64, !insn.addr !11180
  %34 = mul i64 %33, ptrtoint (i32* @global_var_1 to i64), !insn.addr !11181
  %35 = add i64 %34, %21, !insn.addr !11181
  %36 = add i64 %4, add (i64 ptrtoint ([4 x i8]* @global_var_c to i64), i64 ptrtoint (i32* @global_var_1 to i64)), !insn.addr !11182
  %37 = icmp ugt i64 %35, %36
  store i64 %18, i64* %rdx.4.reg2mem, !insn.addr !11183
  br i1 %37, label %dec_label_pc_18de6, label %dec_label_pc_18f1e, !insn.addr !11183

dec_label_pc_18de6:                               ; preds = %dec_label_pc_18d5d
  %38 = zext i8 %11 to i64, !insn.addr !11169
  %39 = add nsw i64 %0, 168, !insn.addr !11184
  %40 = add nsw i64 %0, 240, !insn.addr !11185
  %41 = add nsw i64 %0, 336, !insn.addr !11186
  %42 = add nsw i64 %0, 600, !insn.addr !11187
  %43 = add nsw i64 %0, 160
  %44 = inttoptr i64 %43 to i32*
  %45 = add nsw i64 %0, 596
  %46 = inttoptr i64 %45 to i32*
  %47 = add nsw i64 %0, 860
  %48 = inttoptr i64 %47 to i32*
  store i64 %36, i64* %rax.0.reg2mem, !insn.addr !11188
  store i64 %42, i64* %rdx.0.reg2mem, !insn.addr !11188
  store i64 %21, i64* %r13.0.reg2mem, !insn.addr !11188
  br label %dec_label_pc_18e1e, !insn.addr !11188

dec_label_pc_18e1e:                               ; preds = %dec_label_pc_18efe, %dec_label_pc_18de6
  %r13.0.reload = load i64, i64* %r13.0.reg2mem
  %rdx.0.reload = load i64, i64* %rdx.0.reg2mem
  %rax.0.reload = load i64, i64* %rax.0.reg2mem
  %49 = inttoptr i64 %r13.0.reload to i8*, !insn.addr !11189
  %50 = load i8, i8* %49, align 1, !insn.addr !11189
  %51 = inttoptr i64 %rax.0.reload to i8*, !insn.addr !11190
  %52 = load i8, i8* %51, align 1, !insn.addr !11190
  %53 = zext i8 %52 to i64, !insn.addr !11190
  %54 = add i64 %r13.0.reload, ptrtoint (i32* @global_var_2 to i64), !insn.addr !11191
  %55 = zext i8 %50 to i32, !insn.addr !11192
  %56 = icmp eq i32 %55, ptrtoint (i8** @global_var_9 to i32), !insn.addr !11192
  %57 = zext i8 %52 to i32, !insn.addr !11193
  %58 = icmp ugt i32 %57, ptrtoint (i8** @global_var_3 to i32)
  %or.cond = icmp eq i1 %56, %58
  store i64 %rdx.0.reload, i64* %rdx.1.reg2mem, !insn.addr !11194
  br i1 %or.cond, label %dec_label_pc_18e35, label %dec_label_pc_18e85, !insn.addr !11194

dec_label_pc_18e35:                               ; preds = %dec_label_pc_18e1e
  %59 = mul i64 %53, ptrtoint (i32* @global_var_1 to i64), !insn.addr !11195
  %60 = add i64 %59, %54, !insn.addr !11195
  %61 = icmp ult i64 %35, %60, !insn.addr !11196
  store i64 %rdx.0.reload, i64* %rdx.1.reg2mem, !insn.addr !11197
  br i1 %61, label %dec_label_pc_18e85, label %dec_label_pc_18e41, !insn.addr !11197

dec_label_pc_18e41:                               ; preds = %dec_label_pc_18e35
  %62 = add i64 %r13.0.reload, add (i64 ptrtoint (i32* @global_var_2 to i64), i64 ptrtoint (i32* @global_var_2 to i64)), !insn.addr !11198
  %63 = inttoptr i64 %62 to i8*, !insn.addr !11198
  %64 = load i8, i8* %63, align 1, !insn.addr !11198
  %65 = zext i8 %64 to i32, !insn.addr !11199
  %66 = shl i32 %65, ptrtoint (i8* @global_var_8 to i32), !insn.addr !11199
  %67 = add i64 %r13.0.reload, add (i64 ptrtoint (i32* @global_var_2 to i64), i64 ptrtoint (i8** @global_var_3 to i64)), !insn.addr !11200
  %68 = inttoptr i64 %67 to i8*, !insn.addr !11200
  %69 = load i8, i8* %68, align 1, !insn.addr !11200
  %70 = zext i8 %69 to i32, !insn.addr !11201
  %.masked2 = urem i32 %66, 8192
  %71 = or i32 %.masked2, %70, !insn.addr !11202
  %72 = load i32, i32* %44, align 4, !insn.addr !11203
  %73 = icmp eq i32 %71, %72, !insn.addr !11203
  br i1 %73, label %dec_label_pc_18e7a, label %dec_label_pc_18e68, !insn.addr !11204

dec_label_pc_18e68:                               ; preds = %dec_label_pc_18e41
  %74 = call i64 @reset_ts_section.49(i64 %39), !insn.addr !11205
  %75 = call i64 @reset_ts_section.49(i64 %40), !insn.addr !11206
  br label %dec_label_pc_18e7a, !insn.addr !11206

dec_label_pc_18e7a:                               ; preds = %dec_label_pc_18e68, %dec_label_pc_18e41
  store i32 %71, i32* %44, align 4, !insn.addr !11207
  store i64 %0, i64* %rdx.1.reg2mem, !insn.addr !11207
  br label %dec_label_pc_18e85, !insn.addr !11207

dec_label_pc_18e85:                               ; preds = %dec_label_pc_18e1e, %dec_label_pc_18e7a, %dec_label_pc_18e35
  %rdx.1.reload = load i64, i64* %rdx.1.reg2mem
  %76 = icmp eq i8 %52, 0, !insn.addr !11208
  %77 = icmp eq i1 %76, false, !insn.addr !11209
  %78 = icmp eq i8 %50, -63, !insn.addr !11210
  %79 = icmp eq i1 %78, %77
  br i1 %79, label %dec_label_pc_18e99, label %dec_label_pc_18ec6, !insn.addr !11211

dec_label_pc_18e99:                               ; preds = %dec_label_pc_18e85
  %80 = mul i64 %53, ptrtoint (i32* @global_var_1 to i64)
  %81 = add i64 %80, %54
  %82 = icmp ult i64 %35, %81, !insn.addr !11212
  store i64 %81, i64* %.pre-phi11.reg2mem, !insn.addr !11213
  store i64 %rdx.1.reload, i64* %rdx.3.reg2mem, !insn.addr !11213
  br i1 %82, label %dec_label_pc_18efe, label %dec_label_pc_18ea5, !insn.addr !11213

dec_label_pc_18ea5:                               ; preds = %dec_label_pc_18e99
  %83 = add nuw nsw i64 %53, zext (i32 ptrtoint (i32* @global_var_2 to i32) to i64), !insn.addr !11214
  %84 = trunc i64 %83 to i32, !insn.addr !11215
  %85 = and i64 %83, 4294967295, !insn.addr !11216
  %86 = call i64 @memcpy(i64 %41, i64 %r13.0.reload, i64 %85, i64 %38), !insn.addr !11217
  store i32 %84, i32* %46, align 4, !insn.addr !11218
  store i64 %81, i64* %.pre-phi11.reg2mem, !insn.addr !11218
  store i64 %0, i64* %rdx.3.reg2mem, !insn.addr !11218
  br label %dec_label_pc_18efe, !insn.addr !11218

dec_label_pc_18ec6:                               ; preds = %dec_label_pc_18e85
  %87 = icmp eq i8 %50, -34, !insn.addr !11219
  %88 = icmp eq i1 %87, %77
  %89 = mul i64 %53, ptrtoint (i32* @global_var_1 to i64)
  %90 = add i64 %89, %54
  %.not = icmp ne i1 %88, true
  %91 = icmp ult i64 %35, %90, !insn.addr !11220
  %or.cond17 = or i1 %91, %.not
  store i64 %90, i64* %.pre-phi11.reg2mem, !insn.addr !11221
  store i64 %rdx.1.reload, i64* %rdx.3.reg2mem, !insn.addr !11221
  br i1 %or.cond17, label %dec_label_pc_18efe, label %dec_label_pc_18ee0, !insn.addr !11221

dec_label_pc_18ee0:                               ; preds = %dec_label_pc_18ec6
  %92 = add nuw nsw i64 %53, zext (i32 ptrtoint (i32* @global_var_2 to i32) to i64), !insn.addr !11222
  %93 = and i64 %92, 4294967295, !insn.addr !11223
  %94 = call i64 @memcpy(i64 %42, i64 %r13.0.reload, i64 %93, i64 %38), !insn.addr !11224
  %95 = trunc i64 %92 to i32, !insn.addr !11225
  store i32 %95, i32* %48, align 4, !insn.addr !11225
  store i64 %90, i64* %.pre-phi11.reg2mem, !insn.addr !11225
  store i64 %0, i64* %rdx.3.reg2mem, !insn.addr !11225
  br label %dec_label_pc_18efe, !insn.addr !11225

dec_label_pc_18efe:                               ; preds = %dec_label_pc_18ec6, %dec_label_pc_18ea5, %dec_label_pc_18e99, %dec_label_pc_18ee0
  %rdx.3.reload = load i64, i64* %rdx.3.reg2mem
  %.pre-phi11.reload = load i64, i64* %.pre-phi11.reg2mem
  %96 = add i64 %.pre-phi11.reload, ptrtoint (i32* @global_var_1 to i64), !insn.addr !11226
  %97 = icmp ugt i64 %35, %96
  store i64 %96, i64* %rax.0.reg2mem, !insn.addr !11227
  store i64 %rdx.3.reload, i64* %rdx.0.reg2mem, !insn.addr !11227
  store i64 %.pre-phi11.reload, i64* %r13.0.reg2mem, !insn.addr !11227
  store i64 %rdx.3.reload, i64* %rdx.4.reg2mem, !insn.addr !11227
  br i1 %97, label %dec_label_pc_18e1e, label %dec_label_pc_18f1e, !insn.addr !11227

dec_label_pc_18f1e:                               ; preds = %dec_label_pc_18efe, %dec_label_pc_18d5d
  %98 = sub i32 %8, ptrtoint (i8** @global_var_9 to i32), !insn.addr !11228
  %99 = sext i32 %98 to i64, !insn.addr !11229
  %100 = mul i64 %99, ptrtoint (i32* @global_var_1 to i64), !insn.addr !11230
  %101 = add i64 %100, %5, !insn.addr !11230
  %rdx.4.reload = load i64, i64* %rdx.4.reg2mem
  %102 = add i64 %35, ptrtoint (i16* @global_var_4 to i64), !insn.addr !11231
  %103 = icmp ugt i64 %101, %102
  store i64 %35, i64* %rax.1.reg2mem, !insn.addr !11232
  store i64 0, i64* %rcx.0.reg2mem, !insn.addr !11232
  store i64 %102, i64* %rdx.5.reg2mem, !insn.addr !11232
  store i32 0, i32* %rcx.1.reg2mem, !insn.addr !11232
  store i64 %rdx.4.reload, i64* %rdx.6.reg2mem, !insn.addr !11232
  br i1 %103, label %dec_label_pc_18f33, label %dec_label_pc_18f58, !insn.addr !11232

dec_label_pc_18f33:                               ; preds = %dec_label_pc_18f1e, %dec_label_pc_18f33
  %rdx.5.reload = load i64, i64* %rdx.5.reg2mem
  %rcx.0.reload = load i64, i64* %rcx.0.reg2mem
  %rax.1.reload = load i64, i64* %rax.1.reg2mem
  %104 = add nuw nsw i64 %rcx.0.reload, zext (i32 ptrtoint (i32* @global_var_1 to i32) to i64), !insn.addr !11233
  %105 = and i64 %104, 4294967295, !insn.addr !11233
  %106 = add i64 %rax.1.reload, ptrtoint (i8** @global_var_3 to i64), !insn.addr !11234
  %107 = inttoptr i64 %106 to i8*, !insn.addr !11234
  %108 = load i8, i8* %107, align 1, !insn.addr !11234
  %109 = zext i8 %108 to i32, !insn.addr !11235
  %110 = shl i32 %109, ptrtoint (i8* @global_var_8 to i32), !insn.addr !11235
  %111 = inttoptr i64 %rdx.5.reload to i8*, !insn.addr !11236
  %112 = load i8, i8* %111, align 1, !insn.addr !11236
  %113 = zext i8 %112 to i32, !insn.addr !11237
  %114 = or i32 %110, %113, !insn.addr !11237
  %115 = and i32 %114, ptrtoint (i32* @global_var_fff to i32), !insn.addr !11238
  %116 = zext i32 %115 to i64, !insn.addr !11238
  %117 = mul i64 %116, ptrtoint (i32* @global_var_1 to i64), !insn.addr !11239
  %118 = add i64 %rax.1.reload, ptrtoint (i8* @global_var_5 to i64), !insn.addr !11239
  %119 = add i64 %118, %117, !insn.addr !11239
  %120 = add i64 %119, ptrtoint (i16* @global_var_4 to i64), !insn.addr !11240
  %121 = icmp ugt i64 %101, %120
  store i64 %119, i64* %rax.1.reg2mem, !insn.addr !11241
  store i64 %105, i64* %rcx.0.reg2mem, !insn.addr !11241
  store i64 %120, i64* %rdx.5.reg2mem, !insn.addr !11241
  br i1 %121, label %dec_label_pc_18f33, label %dec_label_pc_18f58.loopexit, !insn.addr !11241

dec_label_pc_18f58.loopexit:                      ; preds = %dec_label_pc_18f33
  %phitmp = trunc i64 %104 to i32
  store i32 %phitmp, i32* %rcx.1.reg2mem
  store i64 %120, i64* %rdx.6.reg2mem
  br label %dec_label_pc_18f58

dec_label_pc_18f58:                               ; preds = %dec_label_pc_18f58.loopexit, %dec_label_pc_18f1e
  %rdx.6.reload = load i64, i64* %rdx.6.reg2mem
  %rcx.1.reload = load i32, i32* %rcx.1.reg2mem
  %122 = add nsw i64 %0, 320, !insn.addr !11242
  %123 = inttoptr i64 %122 to i32*, !insn.addr !11242
  store i32 %rcx.1.reload, i32* %123, align 4, !insn.addr !11242
  %124 = add nsw i64 %0, 312, !insn.addr !11243
  %125 = inttoptr i64 %124 to i64*, !insn.addr !11243
  %126 = load i64, i64* %125, align 8, !insn.addr !11243
  %127 = icmp eq i64 %126, 0, !insn.addr !11244
  store i32 %rcx.1.reload, i32* %.reg2mem, !insn.addr !11245
  br i1 %127, label %dec_label_pc_18f7a, label %dec_label_pc_18f6a, !insn.addr !11245

dec_label_pc_18f6a:                               ; preds = %dec_label_pc_18f58
  %128 = call i64 @kfree(i64 %126), !insn.addr !11246
  store i64 0, i64* %125, align 8, !insn.addr !11247
  %.pre = load i32, i32* %123, align 4
  store i32 %.pre, i32* %.reg2mem, !insn.addr !11247
  br label %dec_label_pc_18f7a, !insn.addr !11247

dec_label_pc_18f7a:                               ; preds = %dec_label_pc_18f6a, %dec_label_pc_18f58
  %.reload = load i32, i32* %.reg2mem, !insn.addr !11248
  %129 = sext i32 %.reload to i64, !insn.addr !11248
  %130 = mul i64 %129, 8, !insn.addr !11249
  %131 = call i64 @__kmalloc(i64 %130, i64* bitcast (i32** @global_var_20 to i64*), i64 %rdx.6.reload), !insn.addr !11250
  store i64 %131, i64* %125, align 8, !insn.addr !11251
  %132 = load i32, i32* %123, align 4, !insn.addr !11252
  %133 = sext i32 %132 to i64, !insn.addr !11252
  %134 = mul i64 %133, 8, !insn.addr !11253
  %135 = call i64 @memset(i64 %131, i64 0, i64 %134), !insn.addr !11254
  ret i64 0, !insn.addr !11255
}

define void @teardown(i64 %prv) local_unnamed_addr {
dec_label_pc_19011:
  ret void, !insn.addr !11256
}

define i64 @teardown.62(i64 %arg1) local_unnamed_addr {
dec_label_pc_19041:
  %.reg2mem5 = alloca i64, !insn.addr !11257
  %r12.0.reg2mem = alloca i64, !insn.addr !11257
  %.reg2mem = alloca i64, !insn.addr !11257
  %0 = call i64 @mcount(), !insn.addr !11258
  %1 = add i64 %arg1, ptrtoint (i16* @global_var_4 to i64), !insn.addr !11259
  %2 = inttoptr i64 %1 to i32*, !insn.addr !11259
  store i32 0, i32* %2, align 4, !insn.addr !11259
  %3 = add i64 %arg1, ptrtoint (i8* @global_var_8 to i64), !insn.addr !11260
  %4 = inttoptr i64 %3 to i32*, !insn.addr !11260
  store i32 0, i32* %4, align 4, !insn.addr !11260
  %5 = add i64 %arg1, ptrtoint ([4 x i8]* @global_var_c to i64), !insn.addr !11261
  %6 = inttoptr i64 %5 to i32*, !insn.addr !11261
  store i32 0, i32* %6, align 4, !insn.addr !11261
  %7 = add i64 %arg1, ptrtoint (i8* @global_var_10 to i64), !insn.addr !11262
  %8 = inttoptr i64 %7 to i32*, !insn.addr !11262
  store i32 0, i32* %8, align 4, !insn.addr !11262
  %9 = add i64 %arg1, ptrtoint (i32** @global_var_18 to i64), !insn.addr !11263
  %10 = call i64 @release_ts_section.59(i64 %9), !insn.addr !11264
  %11 = add i64 %arg1, 96, !insn.addr !11265
  %12 = call i64 @release_ts_section.59(i64 %11), !insn.addr !11266
  %13 = add i64 %arg1, 168, !insn.addr !11267
  %14 = call i64 @release_ts_section.59(i64 %13), !insn.addr !11268
  %15 = add i64 %arg1, 240, !insn.addr !11269
  %16 = call i64 @release_ts_section.59(i64 %15), !insn.addr !11270
  %17 = add i64 %arg1, 312, !insn.addr !11271
  %18 = call i64 @release_ts_section.59(i64 %17), !insn.addr !11272
  %19 = add i64 %arg1, 384, !insn.addr !11273
  %20 = call i64 @release_ts_section.59(i64 %19), !insn.addr !11274
  %21 = add i64 %arg1, 456, !insn.addr !11275
  %22 = call i64 @release_ts_section.59(i64 %21), !insn.addr !11276
  %23 = add i64 %arg1, 528, !insn.addr !11277
  %24 = call i64 @release_ts_section.59(i64 %23), !insn.addr !11278
  %25 = add i64 %arg1, 752, !insn.addr !11279
  %26 = inttoptr i64 %25 to i32*, !insn.addr !11279
  store i32 0, i32* %26, align 4, !insn.addr !11279
  %27 = add i64 %arg1, 1032, !insn.addr !11280
  %28 = inttoptr i64 %27 to i8*, !insn.addr !11280
  store i8 0, i8* %28, align 1, !insn.addr !11280
  %29 = add i64 %arg1, 67184, !insn.addr !11281
  %30 = inttoptr i64 %29 to i8*, !insn.addr !11281
  store i8 0, i8* %30, align 1, !insn.addr !11281
  %31 = add i64 %arg1, 67185, !insn.addr !11282
  %32 = inttoptr i64 %31 to i8*, !insn.addr !11282
  store i8 0, i8* %32, align 1, !insn.addr !11282
  %33 = add i64 %arg1, 67186, !insn.addr !11283
  %34 = inttoptr i64 %33 to i8*, !insn.addr !11283
  store i8 0, i8* %34, align 1, !insn.addr !11283
  %35 = add i64 %arg1, 608, !insn.addr !11284
  %36 = call i64 @release_ts_section.59(i64 %35), !insn.addr !11285
  %37 = add i64 %arg1, 680, !insn.addr !11286
  %38 = call i64 @release_ts_section.59(i64 %37), !insn.addr !11287
  %39 = add i64 %arg1, 1024, !insn.addr !11288
  %40 = inttoptr i64 %39 to i64*, !insn.addr !11288
  %41 = load i64, i64* %40, align 8, !insn.addr !11288
  %42 = icmp eq i64 %41, 0, !insn.addr !11288
  %.pre2 = add i64 %arg1, 1016
  %.pre3 = inttoptr i64 %.pre2 to i32*
  br i1 %42, label %dec_label_pc_19161, label %dec_label_pc_1910e, !insn.addr !11289

dec_label_pc_1910e:                               ; preds = %dec_label_pc_19041
  %43 = load i32, i32* %.pre3, align 4, !insn.addr !11290
  %44 = icmp slt i32 %43, 1, !insn.addr !11291
  store i64 %41, i64* %.reg2mem, !insn.addr !11291
  store i64 0, i64* %r12.0.reg2mem, !insn.addr !11291
  store i64 %41, i64* %.reg2mem5, !insn.addr !11291
  br i1 %44, label %dec_label_pc_1914a, label %dec_label_pc_1911d, !insn.addr !11291

dec_label_pc_1911d:                               ; preds = %dec_label_pc_1910e, %dec_label_pc_1911d
  %r12.0.reload = load i64, i64* %r12.0.reg2mem
  %.reload = load i64, i64* %.reg2mem, !insn.addr !11292
  %sext = mul i64 %r12.0.reload, 4294967296
  %45 = sdiv i64 %sext, 4294967296, !insn.addr !11293
  %46 = mul i64 %45, sub (i64 shl (i64 1, i64 ptrtoint (i8** @global_var_b to i64)), i64 shl (i64 1, i64 ptrtoint (i8** @global_var_7 to i64))), !insn.addr !11294
  %47 = add i64 %46, %.reload, !insn.addr !11292
  %48 = call i64 @release_program.60(i64 %47), !insn.addr !11295
  %49 = add nuw nsw i64 %r12.0.reload, zext (i32 ptrtoint (i32* @global_var_1 to i32) to i64), !insn.addr !11296
  %50 = and i64 %49, 4294967295, !insn.addr !11296
  %51 = load i32, i32* %.pre3, align 4, !insn.addr !11297
  %52 = sext i32 %51 to i64, !insn.addr !11298
  %53 = icmp slt i64 %50, %52, !insn.addr !11298
  %.pre = load i64, i64* %40, align 8
  store i64 %.pre, i64* %.reg2mem, !insn.addr !11298
  store i64 %50, i64* %r12.0.reg2mem, !insn.addr !11298
  store i64 %.pre, i64* %.reg2mem5, !insn.addr !11298
  br i1 %53, label %dec_label_pc_1911d, label %dec_label_pc_1914a, !insn.addr !11298

dec_label_pc_1914a:                               ; preds = %dec_label_pc_1911d, %dec_label_pc_1910e
  %.reload6 = load i64, i64* %.reg2mem5, !insn.addr !11299
  %54 = call i64 @kfree(i64 %.reload6), !insn.addr !11300
  store i64 0, i64* %40, align 8, !insn.addr !11301
  br label %dec_label_pc_19161, !insn.addr !11301

dec_label_pc_19161:                               ; preds = %dec_label_pc_19041, %dec_label_pc_1914a
  store i32 0, i32* %.pre3, align 4, !insn.addr !11302
  %55 = add i64 %arg1, 1040, !insn.addr !11303
  %56 = call i64 @memset(i64 %55, i64 0, i64 65536), !insn.addr !11304
  ret i64 %56, !insn.addr !11305
}

define i32 @reset_arib_std_b25(i8* %std_b25) local_unnamed_addr {
dec_label_pc_1918b:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = call i64 @__decompiler_undefined_function_0()
  %2 = call i64 @__decompiler_undefined_function_0()
  %3 = ptrtoint i8* %std_b25 to i64
  %4 = trunc i64 %2 to i8
  %5 = inttoptr i64 %2 to i8*, !insn.addr !11306
  store i8 %4, i8* %5, align 1, !insn.addr !11306
  %6 = call i64 @memset(i64 %3, i64 0, i64 %1), !insn.addr !11307
  %7 = add i64 %0, 596596, !insn.addr !11308
  %8 = inttoptr i64 %7 to i8*, !insn.addr !11308
  store i8 0, i8* %8, align 1, !insn.addr !11308
  %9 = add i64 %0, 67112, !insn.addr !11309
  %10 = call i64 @release_work_buffer.58(i64 %9), !insn.addr !11310
  %11 = add i64 %0, 67144, !insn.addr !11311
  %12 = call i64 @release_work_buffer.58(i64 %11), !insn.addr !11312
  %13 = trunc i64 %12 to i32, !insn.addr !11313
  ret i32 %13, !insn.addr !11313
}

define i64 @reset_arib_std_b25.63() local_unnamed_addr {
dec_label_pc_191bb:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = call i64 @mcount(), !insn.addr !11314
  %2 = call i64 @private_data.26(i64 %0), !insn.addr !11315
  ret i64 4294967295, !insn.addr !11316
}

define void @release_arib_std_b25(i8* %std_b25) local_unnamed_addr {
dec_label_pc_191e0:
  ret void
}

define i64 @function_191e2(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_191e2:
  %.reg2mem = alloca i64, !insn.addr !11317
  %0 = call i64 @__decompiler_undefined_function_0()
  %rax = alloca i64, align 8
  %1 = call i64 @__decompiler_undefined_function_0()
  %2 = call i1 @__decompiler_undefined_function_2()
  %3 = bitcast i64* %rax to i32*
  %4 = trunc i64 %1 to i32
  %5 = zext i1 %2 to i32, !insn.addr !11318
  %6 = add i32 %4, ptrtoint (i8* @global_var_6 to i32), !insn.addr !11318
  %7 = add i32 %6, %5, !insn.addr !11318
  %8 = inttoptr i64 %1 to i32*, !insn.addr !11318
  store i32 %7, i32* %8, align 4, !insn.addr !11318
  %9 = load i32, i32* %3, align 8, !insn.addr !11319
  %10 = load i64, i64* %rax, align 8
  %11 = trunc i64 %10 to i32, !insn.addr !11319
  %12 = add i32 %9, %11, !insn.addr !11319
  %13 = inttoptr i64 %10 to i32*, !insn.addr !11319
  store i32 %12, i32* %13, align 4, !insn.addr !11319
  %14 = bitcast i64* %rax to i8*
  %15 = load i8, i8* %14, align 8, !insn.addr !11320
  %16 = lshr i64 %0, ptrtoint (i8* @global_var_8 to i64), !insn.addr !11320
  %17 = trunc i64 %16 to i8, !insn.addr !11320
  %18 = add i8 %15, %17, !insn.addr !11320
  %19 = load i64, i64* %rax, align 8, !insn.addr !11320
  %20 = inttoptr i64 %19 to i8*, !insn.addr !11320
  store i8 %18, i8* %20, align 1, !insn.addr !11320
  %21 = add i64 %0, 66576, !insn.addr !11321
  %.pre = load i64, i64* %rax, align 8
  store i64 %.pre, i64* %.reg2mem, !insn.addr !11320
  br label %dec_label_pc_191ef, !insn.addr !11320

dec_label_pc_191ef:                               ; preds = %dec_label_pc_191ef, %dec_label_pc_191e2
  %.reload = load i64, i64* %.reg2mem, !insn.addr !11321
  %22 = add i64 %21, %.reload, !insn.addr !11321
  %23 = inttoptr i64 %22 to i16*, !insn.addr !11321
  store i16 0, i16* %23, align 2, !insn.addr !11321
  %24 = load i64, i64* %rax, align 8, !insn.addr !11322
  %25 = add i64 %24, 2, !insn.addr !11322
  store i64 %25, i64* %rax, align 8, !insn.addr !11322
  %26 = icmp eq i64 %24, 510, !insn.addr !11323
  %27 = icmp eq i1 %26, false, !insn.addr !11324
  store i64 %25, i64* %.reg2mem, !insn.addr !11324
  br i1 %27, label %dec_label_pc_191ef, label %dec_label_pc_19205, !insn.addr !11324

dec_label_pc_19205:                               ; preds = %dec_label_pc_191ef
  %28 = and i64 %25, -65536, !insn.addr !11325
  ret i64 %28, !insn.addr !11325
}

define i64 @release_arib_std_b25.64() local_unnamed_addr {
dec_label_pc_19210:
  %0 = call i64 @__decompiler_undefined_function_0()
  ret i64 %0, !insn.addr !11326
}

define i32 @setup_multi2(i64 %prv) local_unnamed_addr {
dec_label_pc_19212:
  %rax.0.reg2mem = alloca i32, !insn.addr !11327
  %0 = call i64 @mcount(), !insn.addr !11328
  %1 = call i64 @private_data.26(i64 %prv), !insn.addr !11329
  %2 = icmp eq i64 %1, 0, !insn.addr !11330
  store i32 0, i32* %rax.0.reg2mem, !insn.addr !11331
  br i1 %2, label %dec_label_pc_1923b, label %dec_label_pc_1922b, !insn.addr !11331

dec_label_pc_1922b:                               ; preds = %dec_label_pc_19212
  %3 = call i64 @teardown.62(i64 %1), !insn.addr !11332
  %4 = call i64 @kfree(i64 %1), !insn.addr !11333
  %phitmp = trunc i64 %4 to i32
  store i32 %phitmp, i32* %rax.0.reg2mem, !insn.addr !11333
  br label %dec_label_pc_1923b, !insn.addr !11333

dec_label_pc_1923b:                               ; preds = %dec_label_pc_1922b, %dec_label_pc_19212
  %rax.0.reload = load i32, i32* %rax.0.reg2mem
  ret i32 %rax.0.reload, !insn.addr !11334
}

define i64 @setup_multi2.65(i64 %arg1) local_unnamed_addr {
dec_label_pc_19242:
  %merge.reg2mem = alloca i64, !insn.addr !11335
  %0 = call i64 @mcount(), !insn.addr !11336
  %1 = call i64 @__readgsqword(i64 40), !insn.addr !11337
  %2 = add i64 %arg1, 1024, !insn.addr !11338
  %3 = inttoptr i64 %2 to i64*, !insn.addr !11338
  %4 = load i64, i64* %3, align 8, !insn.addr !11338
  %5 = add i64 %4, 160, !insn.addr !11339
  %6 = inttoptr i64 %5 to i32*, !insn.addr !11339
  %7 = load i32, i32* %6, align 4, !insn.addr !11339
  %8 = icmp eq i32 %7, 0, !insn.addr !11340
  store i64 0, i64* %merge.reg2mem, !insn.addr !11341
  br i1 %8, label %dec_label_pc_19305, label %dec_label_pc_192c2, !insn.addr !11341

dec_label_pc_192c2:                               ; preds = %dec_label_pc_19242
  %9 = zext i32 %7 to i64, !insn.addr !11339
  %10 = mul i64 %9, 8, !insn.addr !11342
  %11 = add i64 %arg1, 1040, !insn.addr !11343
  %12 = add i64 %11, %10, !insn.addr !11343
  %13 = inttoptr i64 %12 to i64*, !insn.addr !11343
  %14 = load i64, i64* %13, align 8, !insn.addr !11343
  %15 = icmp eq i64 %14, 0, !insn.addr !11344
  store i64 0, i64* %merge.reg2mem, !insn.addr !11345
  br i1 %15, label %dec_label_pc_19305, label %dec_label_pc_192d5, !insn.addr !11345

dec_label_pc_192d5:                               ; preds = %dec_label_pc_192c2
  %16 = icmp eq i64 %4, %14, !insn.addr !11346
  br i1 %16, label %dec_label_pc_192fb, label %dec_label_pc_192da, !insn.addr !11347

dec_label_pc_192da:                               ; preds = %dec_label_pc_192d5
  %17 = add i64 %14, 328, !insn.addr !11348
  %18 = inttoptr i64 %17 to i64*, !insn.addr !11348
  %19 = load i64, i64* %18, align 8, !insn.addr !11348
  %20 = add i64 %4, 328, !insn.addr !11349
  %21 = inttoptr i64 %20 to i64*, !insn.addr !11349
  store i64 %19, i64* %21, align 8, !insn.addr !11349
  %22 = load i64, i64* %18, align 8, !insn.addr !11350
  store i64 %22, i64* %merge.reg2mem, !insn.addr !11351
  br label %dec_label_pc_19305, !insn.addr !11351

dec_label_pc_192fb:                               ; preds = %dec_label_pc_192d5
  %23 = add i64 %arg1, 67096, !insn.addr !11352
  %24 = inttoptr i64 %23 to i64*, !insn.addr !11352
  %25 = load i64, i64* %24, align 8, !insn.addr !11352
  %26 = icmp eq i64 %25, 0, !insn.addr !11352
  %27 = icmp eq i1 %26, false, !insn.addr !11353
  store i64 %4, i64* %merge.reg2mem, !insn.addr !11353
  br i1 %27, label %dec_label_pc_19310, label %dec_label_pc_19305, !insn.addr !11353

dec_label_pc_19305:                               ; preds = %dec_label_pc_19242, %dec_label_pc_192c2, %dec_label_pc_192da, %dec_label_pc_19310, %dec_label_pc_19325, %dec_label_pc_192fb
  %merge.reload = load i64, i64* %merge.reg2mem
  ret i64 %merge.reload, !insn.addr !11354

dec_label_pc_19310:                               ; preds = %dec_label_pc_192fb
  %28 = add i64 %4, 328, !insn.addr !11355
  %29 = inttoptr i64 %28 to i64*, !insn.addr !11355
  %30 = load i64, i64* %29, align 8, !insn.addr !11355
  %31 = icmp eq i64 %30, 0, !insn.addr !11356
  store i64 %30, i64* %merge.reg2mem, !insn.addr !11357
  br i1 %31, label %dec_label_pc_19325, label %dec_label_pc_19305, !insn.addr !11357

dec_label_pc_19325:                               ; preds = %dec_label_pc_19310
  %32 = call i64 @create_multi2.302(), !insn.addr !11358
  store i64 %32, i64* %29, align 8, !insn.addr !11359
  %33 = icmp eq i64 %32, 0, !insn.addr !11360
  %34 = icmp eq i1 %33, false, !insn.addr !11361
  store i64 %32, i64* %merge.reg2mem, !insn.addr !11361
  br i1 %34, label %dec_label_pc_19344, label %dec_label_pc_19305, !insn.addr !11361

dec_label_pc_19344:                               ; preds = %dec_label_pc_19325
  %35 = load i64, i64* %24, align 8, !insn.addr !11362
  %36 = trunc i64 %35 to i32, !insn.addr !11363
  %37 = icmp slt i32 %36, 0, !insn.addr !11363
  %38 = icmp eq i1 %37, false, !insn.addr !11364
  %spec.select = select i1 %38, i64 %32, i64 %35
  ret i64 %spec.select
}

define i32 @proc_ecm(i64 %pgrm, i64 %bcas) local_unnamed_addr {
dec_label_pc_193a9:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = call i64 @__decompiler_undefined_function_0()
  %2 = call i64 @__decompiler_undefined_function_0()
  %3 = trunc i64 %0 to i8
  %4 = trunc i64 %1 to i8, !insn.addr !11365
  %5 = add i8 %4, %3, !insn.addr !11365
  %6 = inttoptr i64 %pgrm to i8*, !insn.addr !11365
  store i8 %5, i8* %6, align 1, !insn.addr !11365
  %7 = trunc i64 %2 to i32, !insn.addr !11365
  ret i32 %7, !insn.addr !11365
}

define i64 @proc_ecm.66(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_193d9:
  %rax.0.reg2mem = alloca i64, !insn.addr !11366
  %0 = call i64 @mcount(), !insn.addr !11367
  %1 = call i64 @__readgsqword(i64 40), !insn.addr !11368
  %2 = add i64 %arg1, 328, !insn.addr !11369
  %3 = inttoptr i64 %2 to i64*, !insn.addr !11369
  %4 = load i64, i64* %3, align 8, !insn.addr !11369
  %5 = icmp eq i64 %4, 0, !insn.addr !11369
  %6 = icmp eq i1 %5, false, !insn.addr !11370
  store i64 4294967289, i64* %rax.0.reg2mem, !insn.addr !11370
  br i1 %6, label %dec_label_pc_19482, label %dec_label_pc_19422, !insn.addr !11370

dec_label_pc_19422:                               ; preds = %dec_label_pc_193d9
  %7 = call i64 @create_multi2.302(), !insn.addr !11371
  store i64 %7, i64* %3, align 8, !insn.addr !11372
  store i64 %7, i64* %rax.0.reg2mem, !insn.addr !11373
  br label %dec_label_pc_19482, !insn.addr !11373

dec_label_pc_19482:                               ; preds = %dec_label_pc_19422, %dec_label_pc_193d9
  %rax.0.reload = load i64, i64* %rax.0.reg2mem
  ret i64 %rax.0.reload, !insn.addr !11374
}

define i32 @compare_ts_section(i64 %curr, i64 %next) local_unnamed_addr {
dec_label_pc_19494:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = trunc i64 %0 to i32, !insn.addr !11375
  ret i32 %1, !insn.addr !11375
}

define i64 @function_19497() local_unnamed_addr {
dec_label_pc_19497:
  %0 = call i64 @__decompiler_undefined_function_0()
  ret i64 %0, !insn.addr !11376
}

define i64 @compare_ts_section.67(i64 %arg1) local_unnamed_addr {
dec_label_pc_194c4:
  %0 = call i64 @mcount(), !insn.addr !11377
  ret i64 %0, !insn.addr !11378
}

define i64 @create_arib_std_b25() local_unnamed_addr {
dec_label_pc_194d0:
  %rax.0.reg2mem = alloca i64, !insn.addr !11379
  %cf.1.reg2mem = alloca i1, !insn.addr !11379
  %zf.1.reg2mem = alloca i1, !insn.addr !11379
  %zf.1.ph.reg2mem = alloca i1, !insn.addr !11379
  %.lcssa.reg2mem = alloca i8, !insn.addr !11379
  %rcx.01.reg2mem = alloca i64, !insn.addr !11379
  %rsi.02.reg2mem = alloca i64, !insn.addr !11379
  %rdi.03.reg2mem = alloca i64, !insn.addr !11379
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = call i64 @__decompiler_undefined_function_0()
  %2 = call i64 @__decompiler_undefined_function_0()
  %3 = call i1 @__decompiler_undefined_function_2()
  %4 = trunc i64 %2 to i32, !insn.addr !11380
  %5 = add i64 %1, 44, !insn.addr !11380
  %6 = inttoptr i64 %5 to i32*, !insn.addr !11380
  %7 = load i32, i32* %6, align 4, !insn.addr !11380
  %8 = icmp eq i32 %7, %4, !insn.addr !11380
  %9 = icmp eq i1 %8, false, !insn.addr !11381
  store i64 ptrtoint (i32* @global_var_1 to i64), i64* %rax.0.reg2mem, !insn.addr !11381
  br i1 %9, label %dec_label_pc_194fe, label %dec_label_pc_194da, !insn.addr !11381

dec_label_pc_194da:                               ; preds = %dec_label_pc_194d0
  %10 = add i64 %2, sext (i32 ptrtoint (i8** @global_var_3 to i32) to i64), !insn.addr !11382
  %sext = mul i64 %10, 4294967296
  %11 = icmp eq i64 %sext, 0, !insn.addr !11383
  store i1 true, i1* %zf.1.reg2mem, !insn.addr !11383
  store i1 false, i1* %cf.1.reg2mem, !insn.addr !11383
  br i1 %11, label %._crit_edge, label %.lr.ph, !insn.addr !11383

.lr.ph:                                           ; preds = %dec_label_pc_194da
  %12 = sdiv i64 %sext, 4294967296, !insn.addr !11384
  %13 = add i64 %1, ptrtoint (i8* @global_var_8 to i64), !insn.addr !11385
  %14 = inttoptr i64 %13 to i64*, !insn.addr !11385
  %15 = load i64, i64* %14, align 8, !insn.addr !11385
  %16 = add i64 %0, ptrtoint (i8* @global_var_8 to i64), !insn.addr !11386
  %17 = inttoptr i64 %16 to i64*, !insn.addr !11386
  %18 = load i64, i64* %17, align 8, !insn.addr !11386
  %19 = select i1 %3, i64 -1, i64 ptrtoint (i32* @global_var_1 to i64), !insn.addr !11383
  store i64 %15, i64* %rdi.03.reg2mem
  store i64 %18, i64* %rsi.02.reg2mem
  store i64 %12, i64* %rcx.01.reg2mem
  br label %25

; <label>:20:                                     ; preds = %25
  %rcx.01.reload = load i64, i64* %rcx.01.reg2mem
  %21 = sub i64 %rcx.01.reload, ptrtoint (i32* @global_var_1 to i64), !insn.addr !11383
  %22 = add i64 %rdi.03.reload, %19, !insn.addr !11383
  %23 = add i64 %rsi.02.reload, %19, !insn.addr !11383
  %24 = icmp eq i64 %21, 0, !insn.addr !11383
  store i64 %22, i64* %rdi.03.reg2mem, !insn.addr !11383
  store i64 %23, i64* %rsi.02.reg2mem, !insn.addr !11383
  store i64 %21, i64* %rcx.01.reg2mem, !insn.addr !11383
  store i8 %27, i8* %.lcssa.reg2mem, !insn.addr !11383
  store i1 true, i1* %zf.1.ph.reg2mem, !insn.addr !11383
  br i1 %24, label %._crit_edge.loopexit, label %25, !insn.addr !11383

; <label>:25:                                     ; preds = %.lr.ph, %20
  %rsi.02.reload = load i64, i64* %rsi.02.reg2mem
  %rdi.03.reload = load i64, i64* %rdi.03.reg2mem
  %26 = inttoptr i64 %rsi.02.reload to i8*, !insn.addr !11383
  %27 = load i8, i8* %26, align 1, !insn.addr !11383
  %28 = inttoptr i64 %rdi.03.reload to i8*, !insn.addr !11383
  %29 = load i8, i8* %28, align 1, !insn.addr !11383
  %30 = icmp eq i8 %27, %29, !insn.addr !11383
  store i8 %29, i8* %.lcssa.reg2mem, !insn.addr !11383
  store i1 false, i1* %zf.1.ph.reg2mem, !insn.addr !11383
  br i1 %30, label %20, label %._crit_edge.loopexit, !insn.addr !11383

._crit_edge.loopexit:                             ; preds = %20, %25
  %zf.1.ph.reload = load i1, i1* %zf.1.ph.reg2mem
  %.lcssa.reload = load i8, i8* %.lcssa.reg2mem
  %31 = icmp ult i8 %27, %.lcssa.reload, !insn.addr !11383
  store i1 %zf.1.ph.reload, i1* %zf.1.reg2mem
  store i1 %31, i1* %cf.1.reg2mem
  br label %._crit_edge

._crit_edge:                                      ; preds = %._crit_edge.loopexit, %dec_label_pc_194da
  %cf.1.reload = load i1, i1* %cf.1.reg2mem
  %zf.1.reload = load i1, i1* %zf.1.reg2mem
  %32 = or i1 %zf.1.reload, %cf.1.reload, !insn.addr !11387
  %33 = icmp ne i1 %32, ptrtoint (i32* @global_var_1 to i1), !insn.addr !11387
  %34 = zext i1 %cf.1.reload to i64, !insn.addr !11388
  %35 = zext i1 %33 to i64, !insn.addr !11389
  %36 = sub nsw i64 %35, %34, !insn.addr !11389
  store i64 %36, i64* %rax.0.reg2mem, !insn.addr !11390
  br label %dec_label_pc_194fe, !insn.addr !11390

dec_label_pc_194fe:                               ; preds = %._crit_edge, %dec_label_pc_194d0
  %rax.0.reload = load i64, i64* %rax.0.reg2mem
  ret i64 %rax.0.reload, !insn.addr !11391
}

define i64 @create_arib_std_b25.568() local_unnamed_addr {
dec_label_pc_19500:
  %r14.0.reg2mem = alloca i64, !insn.addr !11392
  %0 = call i64 @mcount(), !insn.addr !11393
  %1 = load i64, i64* inttoptr (i64 257608 to i64*), align 8, !insn.addr !11394
  %2 = call i64 @kmem_cache_alloc_notrace(i64 %1, i64* bitcast (i32** @global_var_20 to i64*)), !insn.addr !11395
  %3 = call i64 @slab_buffer_size(i64 %1), !insn.addr !11396
  %4 = load i32, i32* @global_var_3ecb0, align 4, !insn.addr !11397
  %5 = icmp eq i32 %4, 0, !insn.addr !11397
  br i1 %5, label %dec_label_pc_1957f, label %dec_label_pc_19552, !insn.addr !11398

dec_label_pc_19552:                               ; preds = %dec_label_pc_19500
  %6 = load i64, i64* @global_var_3ecc8, align 8, !insn.addr !11399
  %7 = icmp eq i64 %6, 0, !insn.addr !11400
  store i64 %6, i64* %r14.0.reg2mem, !insn.addr !11401
  br i1 %7, label %dec_label_pc_1957f, label %dec_label_pc_1955e, !insn.addr !11401

dec_label_pc_1955e:                               ; preds = %dec_label_pc_19552, %dec_label_pc_1955e
  %r14.0.reload = load i64, i64* %r14.0.reg2mem
  %8 = add i64 %r14.0.reload, ptrtoint (i8* @global_var_8 to i64), !insn.addr !11402
  %9 = inttoptr i64 %8 to i64*, !insn.addr !11403
  %10 = load i64, i64* %9, align 8, !insn.addr !11403
  %11 = icmp eq i64 %10, 0, !insn.addr !11403
  %12 = icmp eq i1 %11, false, !insn.addr !11404
  store i64 %8, i64* %r14.0.reg2mem, !insn.addr !11404
  br i1 %12, label %dec_label_pc_1955e, label %dec_label_pc_1957f, !insn.addr !11404

dec_label_pc_1957f:                               ; preds = %dec_label_pc_1955e, %dec_label_pc_19552, %dec_label_pc_19500
  %13 = call i64 @memset(i64 %2, i64 0, i64 596776), !insn.addr !11405
  %14 = inttoptr i64 %2 to i32*, !insn.addr !11406
  store i32 ptrtoint (i16* @global_var_4 to i32), i32* %14, align 4, !insn.addr !11406
  %15 = add i64 %2, 67184, !insn.addr !11407
  %16 = inttoptr i64 %15 to i8*, !insn.addr !11407
  store i8 0, i8* %16, align 1, !insn.addr !11407
  %17 = add i64 %2, 67185, !insn.addr !11408
  %18 = inttoptr i64 %17 to i8*, !insn.addr !11408
  store i8 0, i8* %18, align 1, !insn.addr !11408
  %19 = add i64 %2, 67186, !insn.addr !11409
  %20 = inttoptr i64 %19 to i8*, !insn.addr !11409
  store i8 0, i8* %20, align 1, !insn.addr !11409
  %21 = add i64 %2, 596600, !insn.addr !11410
  %22 = inttoptr i64 %21 to i64*, !insn.addr !11411
  store i64 %2, i64* %22, align 8, !insn.addr !11411
  %23 = add i64 %2, 596616, !insn.addr !11412
  %24 = inttoptr i64 %23 to i64*, !insn.addr !11412
  store i64 0, i64* %24, align 8, !insn.addr !11412
  %25 = add i64 %2, 596624, !insn.addr !11413
  %26 = inttoptr i64 %25 to i64*, !insn.addr !11413
  store i64 0, i64* %26, align 8, !insn.addr !11413
  %27 = add i64 %2, 596632, !insn.addr !11414
  %28 = inttoptr i64 %27 to i64*, !insn.addr !11414
  store i64 0, i64* %28, align 8, !insn.addr !11414
  %29 = add i64 %2, 596640, !insn.addr !11415
  %30 = inttoptr i64 %29 to i64*, !insn.addr !11415
  store i64 0, i64* %30, align 8, !insn.addr !11415
  %31 = add i64 %2, 596648, !insn.addr !11416
  %32 = inttoptr i64 %31 to i64*, !insn.addr !11416
  store i64 0, i64* %32, align 8, !insn.addr !11416
  %33 = add i64 %2, 596656, !insn.addr !11417
  %34 = inttoptr i64 %33 to i64*, !insn.addr !11417
  store i64 0, i64* %34, align 8, !insn.addr !11417
  %35 = add i64 %2, 596664, !insn.addr !11418
  %36 = inttoptr i64 %35 to i64*, !insn.addr !11418
  store i64 0, i64* %36, align 8, !insn.addr !11418
  %37 = add i64 %2, 596672, !insn.addr !11419
  %38 = inttoptr i64 %37 to i64*, !insn.addr !11419
  store i64 0, i64* %38, align 8, !insn.addr !11419
  %39 = add i64 %2, 596680, !insn.addr !11420
  %40 = inttoptr i64 %39 to i64*, !insn.addr !11420
  store i64 0, i64* %40, align 8, !insn.addr !11420
  %41 = add i64 %2, 596688, !insn.addr !11421
  %42 = inttoptr i64 %41 to i64*, !insn.addr !11421
  store i64 0, i64* %42, align 8, !insn.addr !11421
  %43 = add i64 %2, 596696, !insn.addr !11422
  %44 = inttoptr i64 %43 to i64*, !insn.addr !11422
  store i64 0, i64* %44, align 8, !insn.addr !11422
  %45 = add i64 %2, 596704, !insn.addr !11423
  %46 = inttoptr i64 %45 to i64*, !insn.addr !11423
  store i64 0, i64* %46, align 8, !insn.addr !11423
  %47 = add i64 %2, 596712, !insn.addr !11424
  %48 = inttoptr i64 %47 to i64*, !insn.addr !11424
  store i64 0, i64* %48, align 8, !insn.addr !11424
  %49 = add i64 %2, 596720, !insn.addr !11425
  %50 = inttoptr i64 %49 to i64*, !insn.addr !11425
  store i64 0, i64* %50, align 8, !insn.addr !11425
  %51 = add i64 %2, 596728, !insn.addr !11426
  %52 = inttoptr i64 %51 to i64*, !insn.addr !11426
  store i64 0, i64* %52, align 8, !insn.addr !11426
  %53 = add i64 %2, 596736, !insn.addr !11427
  %54 = inttoptr i64 %53 to i64*, !insn.addr !11427
  store i64 0, i64* %54, align 8, !insn.addr !11427
  %55 = add i64 %2, 596744, !insn.addr !11428
  %56 = inttoptr i64 %55 to i64*, !insn.addr !11428
  store i64 0, i64* %56, align 8, !insn.addr !11428
  ret i64 %21, !insn.addr !11428
}

define i32 @proc_pat(i64 %prv) local_unnamed_addr {
dec_label_pc_19664:
  %0 = call i64 @__decompiler_undefined_function_0()
  %rax = alloca i64, align 8
  %1 = call i64 @__decompiler_undefined_function_0()
  %2 = bitcast i64* %rax to i8*
  %3 = trunc i64 %1 to i8
  %4 = mul i8 %3, 2, !insn.addr !11429
  %5 = inttoptr i64 %1 to i8*, !insn.addr !11429
  store i8 %4, i8* %5, align 1, !insn.addr !11429
  %6 = load i8, i8* %2, align 8, !insn.addr !11430
  %7 = load i64, i64* %rax, align 8
  %8 = trunc i64 %7 to i8, !insn.addr !11430
  %9 = add i8 %6, %8, !insn.addr !11430
  %10 = inttoptr i64 %7 to i8*, !insn.addr !11430
  store i8 %9, i8* %10, align 1, !insn.addr !11430
  %11 = load i64, i64* %rax, align 8, !insn.addr !11431
  %12 = add i64 %11, -57, !insn.addr !11431
  %13 = inttoptr i64 %12 to i8*, !insn.addr !11431
  %14 = load i8, i8* %13, align 1, !insn.addr !11431
  %15 = trunc i64 %0 to i8, !insn.addr !11431
  %16 = add i8 %14, %15, !insn.addr !11431
  store i8 %16, i8* %13, align 1, !insn.addr !11431
  %17 = load i8, i8* %2, align 8, !insn.addr !11432
  %18 = load i64, i64* %rax, align 8, !insn.addr !11432
  %19 = inttoptr i64 %18 to i8*, !insn.addr !11432
  store i8 %17, i8* %19, align 1, !insn.addr !11432
  %20 = load i8, i8* %2, align 8, !insn.addr !11433
  %21 = load i64, i64* %rax, align 8
  %22 = trunc i64 %21 to i8, !insn.addr !11433
  %23 = add i8 %20, %22, !insn.addr !11433
  %24 = inttoptr i64 %21 to i8*, !insn.addr !11433
  store i8 %23, i8* %24, align 1, !insn.addr !11433
  %25 = load i64, i64* %rax, align 8, !insn.addr !11434
  %26 = add i64 %25, 160, !insn.addr !11434
  %27 = inttoptr i64 %26 to i64*, !insn.addr !11434
  store i64 0, i64* %27, align 8, !insn.addr !11434
  %28 = load i64, i64* %rax, align 8, !insn.addr !11435
  %29 = trunc i64 %28 to i32, !insn.addr !11435
  ret i32 %29, !insn.addr !11435
}

define i64 @proc_pat.70(i64 %arg1) local_unnamed_addr {
dec_label_pc_19694:
  %.reg2mem5 = alloca i64, !insn.addr !11436
  %r12.0.reg2mem = alloca i64, !insn.addr !11436
  %.reg2mem = alloca i64, !insn.addr !11436
  %0 = call i64 @mcount(), !insn.addr !11437
  %1 = add i64 %arg1, 68, !insn.addr !11438
  %2 = inttoptr i64 %1 to i32*, !insn.addr !11438
  %3 = load i32, i32* %2, align 4, !insn.addr !11438
  %4 = sub i32 %3, ptrtoint (i8** @global_var_9 to i32), !insn.addr !11439
  %5 = add i32 %4, ptrtoint (i8** @global_var_3 to i32), !insn.addr !11440
  %6 = icmp slt i32 %4, 0, !insn.addr !11441
  %7 = icmp eq i1 %6, false, !insn.addr !11442
  %8 = select i1 %7, i32 %4, i32 %5, !insn.addr !11442
  %9 = ashr i32 %8, ptrtoint (i32* @global_var_2 to i32), !insn.addr !11443
  %10 = sext i32 %9 to i64, !insn.addr !11444
  %11 = shl i64 %10, ptrtoint (i8** @global_var_7 to i64), !insn.addr !11445
  %12 = mul i64 %10, sub (i64 shl (i64 1, i64 ptrtoint (i8** @global_var_b to i64)), i64 shl (i64 1, i64 ptrtoint (i8** @global_var_7 to i64))), !insn.addr !11446
  %13 = call i64 @__kmalloc(i64 %12, i64* bitcast (i32** @global_var_20 to i64*), i64 %11), !insn.addr !11447
  %14 = call i64 @memset(i64 %13, i64 0, i64 %12), !insn.addr !11448
  %15 = add i64 %arg1, 1024, !insn.addr !11449
  %16 = inttoptr i64 %15 to i64*, !insn.addr !11449
  %17 = load i64, i64* %16, align 8, !insn.addr !11449
  %18 = icmp eq i64 %17, 0, !insn.addr !11449
  %.pre2 = add i64 %arg1, 1016
  %.pre3 = inttoptr i64 %.pre2 to i32*
  br i1 %18, label %dec_label_pc_1975b, label %dec_label_pc_19708, !insn.addr !11450

dec_label_pc_19708:                               ; preds = %dec_label_pc_19694
  %19 = load i32, i32* %.pre3, align 4, !insn.addr !11451
  %20 = icmp slt i32 %19, 1, !insn.addr !11452
  store i64 %17, i64* %.reg2mem, !insn.addr !11452
  store i64 0, i64* %r12.0.reg2mem, !insn.addr !11452
  store i64 %17, i64* %.reg2mem5, !insn.addr !11452
  br i1 %20, label %dec_label_pc_19744, label %dec_label_pc_19717, !insn.addr !11452

dec_label_pc_19717:                               ; preds = %dec_label_pc_19708, %dec_label_pc_19717
  %r12.0.reload = load i64, i64* %r12.0.reg2mem
  %.reload = load i64, i64* %.reg2mem, !insn.addr !11453
  %sext = mul i64 %r12.0.reload, 4294967296
  %21 = sdiv i64 %sext, 4294967296, !insn.addr !11454
  %22 = mul i64 %21, sub (i64 shl (i64 1, i64 ptrtoint (i8** @global_var_b to i64)), i64 shl (i64 1, i64 ptrtoint (i8** @global_var_7 to i64))), !insn.addr !11455
  %23 = add i64 %22, %.reload, !insn.addr !11453
  %24 = call i64 @release_program.60(i64 %23), !insn.addr !11456
  %25 = add nuw nsw i64 %r12.0.reload, zext (i32 ptrtoint (i32* @global_var_1 to i32) to i64), !insn.addr !11457
  %26 = and i64 %25, 4294967295, !insn.addr !11457
  %27 = load i32, i32* %.pre3, align 4, !insn.addr !11458
  %28 = sext i32 %27 to i64, !insn.addr !11459
  %29 = icmp slt i64 %26, %28, !insn.addr !11459
  %.pre = load i64, i64* %16, align 8
  store i64 %.pre, i64* %.reg2mem, !insn.addr !11459
  store i64 %26, i64* %r12.0.reg2mem, !insn.addr !11459
  store i64 %.pre, i64* %.reg2mem5, !insn.addr !11459
  br i1 %29, label %dec_label_pc_19717, label %dec_label_pc_19744, !insn.addr !11459

dec_label_pc_19744:                               ; preds = %dec_label_pc_19717, %dec_label_pc_19708
  %.reload6 = load i64, i64* %.reg2mem5, !insn.addr !11460
  %30 = call i64 @kfree(i64 %.reload6), !insn.addr !11461
  store i64 0, i64* %16, align 8, !insn.addr !11462
  br label %dec_label_pc_1975b, !insn.addr !11462

dec_label_pc_1975b:                               ; preds = %dec_label_pc_19694, %dec_label_pc_19744
  store i32 0, i32* %.pre3, align 4, !insn.addr !11463
  %31 = add i64 %arg1, 1040, !insn.addr !11464
  %32 = call i64 @memset(i64 %31, i64 0, i64 65536), !insn.addr !11465
  %33 = add i64 %arg1, ptrtoint (i32** @global_var_20 to i64), !insn.addr !11466
  %34 = inttoptr i64 %33 to i64*, !insn.addr !11466
  %35 = load i64, i64* %34, align 8, !insn.addr !11466
  %36 = add i64 %35, ptrtoint (i8* @global_var_f to i64), !insn.addr !11467
  ret i64 %36, !insn.addr !11468
}

define i64 @function_197c2(i64 %arg1) local_unnamed_addr {
dec_label_pc_197c2:
  %0 = call i64 @__decompiler_undefined_function_0()
  ret i64 %0, !insn.addr !11469
}

define i64 @function_197df() local_unnamed_addr {
dec_label_pc_197df:
  %0 = call i64 @__decompiler_undefined_function_0()
  ret i64 %0, !insn.addr !11470
}

define i64 @function_197e7(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4) local_unnamed_addr {
dec_label_pc_197e7:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = call i64 @__decompiler_undefined_function_0()
  %2 = add i64 %0, -115, !insn.addr !11471
  %3 = inttoptr i64 %2 to i8*, !insn.addr !11471
  %4 = load i8, i8* %3, align 1, !insn.addr !11471
  %5 = udiv i8 %4, 2, !insn.addr !11471
  %6 = or i8 %5, %4, !insn.addr !11471
  store i8 %6, i8* %3, align 1, !insn.addr !11471
  %7 = add i64 %1, -1223736320, !insn.addr !11472
  ret i64 %7, !insn.addr !11473
}

define i32 @reserve_work_buffer(i64 %buf, i32 %size) local_unnamed_addr {
dec_label_pc_19818:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = call i64 @__decompiler_undefined_function_0()
  %2 = trunc i64 %1 to i32
  %3 = mul i32 %2, 2, !insn.addr !11474
  %4 = inttoptr i64 %1 to i32*, !insn.addr !11474
  store i32 %3, i32* %4, align 4, !insn.addr !11474
  %5 = add i64 %0, 67088, !insn.addr !11475
  %6 = inttoptr i64 %5 to i8*, !insn.addr !11475
  %7 = load i8, i8* %6, align 1, !insn.addr !11475
  %8 = add i8 %7, 1, !insn.addr !11475
  store i8 %8, i8* %6, align 1, !insn.addr !11475
  %9 = add i64 %0, 1024, !insn.addr !11476
  %10 = inttoptr i64 %9 to i64*, !insn.addr !11476
  %11 = trunc i64 %buf to i32, !insn.addr !11477
  %12 = add i64 %0, 1016, !insn.addr !11477
  %13 = inttoptr i64 %12 to i32*, !insn.addr !11477
  store i32 %11, i32* %13, align 4, !insn.addr !11477
  ret i32 0, !insn.addr !11478
}

define i64 @reserve_work_buffer.71(i64 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_19848:
  %rax.0.reg2mem = alloca i64, !insn.addr !11479
  %rbx.1.reg2mem = alloca i64, !insn.addr !11479
  %rbx.0.reg2mem = alloca i64, !insn.addr !11479
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = sext i32 %arg2 to i64
  %2 = call i64 @mcount(), !insn.addr !11480
  %3 = add i64 %arg1, ptrtoint (i32** @global_var_18 to i64), !insn.addr !11481
  %4 = inttoptr i64 %3 to i32*, !insn.addr !11481
  %5 = load i32, i32* %4, align 4, !insn.addr !11481
  %6 = mul i32 %5, trunc (i64 add (i64 ptrtoint (i32* @global_var_1 to i64), i64 1) to i32), !insn.addr !11482
  %7 = add i32 %5, -511, !insn.addr !11483
  %8 = sub i32 510, %5
  %9 = and i32 %8, %5, !insn.addr !11483
  %10 = icmp slt i32 %9, 0, !insn.addr !11483
  %11 = icmp eq i32 %7, 0, !insn.addr !11483
  %12 = icmp slt i32 %7, 0, !insn.addr !11483
  %13 = icmp ne i1 %12, %10, !insn.addr !11484
  %14 = or i1 %11, %13, !insn.addr !11484
  %15 = zext i32 %6 to i64
  %16 = select i1 %14, i64 zext (i32 trunc (i64 or (i64 and (i64 ptrtoint (i32* @global_var_1 to i64), i64 -65536), i64 512) to i32) to i64), i64 %15, !insn.addr !11484
  %17 = icmp slt i64 %16, %1, !insn.addr !11485
  store i64 %16, i64* %rbx.0.reg2mem, !insn.addr !11485
  store i64 %16, i64* %rbx.1.reg2mem, !insn.addr !11485
  br i1 %17, label %dec_label_pc_1988f, label %dec_label_pc_19895, !insn.addr !11485

dec_label_pc_1988f:                               ; preds = %dec_label_pc_19848, %dec_label_pc_1988f
  %rbx.0.reload = load i64, i64* %rbx.0.reg2mem
  %18 = mul i64 %rbx.0.reload, 2, !insn.addr !11486
  %19 = and i64 %18, 4294967294, !insn.addr !11486
  %20 = icmp slt i64 %19, %1, !insn.addr !11487
  store i64 %19, i64* %rbx.0.reg2mem, !insn.addr !11487
  store i64 %19, i64* %rbx.1.reg2mem, !insn.addr !11487
  br i1 %20, label %dec_label_pc_1988f, label %dec_label_pc_19895, !insn.addr !11487

dec_label_pc_19895:                               ; preds = %dec_label_pc_1988f, %dec_label_pc_19848
  %21 = zext i32 %5 to i64, !insn.addr !11481
  %rbx.1.reload = load i64, i64* %rbx.1.reg2mem
  %sext = mul i64 %rbx.1.reload, 4294967296
  %22 = sdiv i64 %sext, 4294967296, !insn.addr !11488
  %23 = call i64 @__kmalloc(i64 %22, i64* bitcast (i32** @global_var_20 to i64*), i64 %21), !insn.addr !11489
  %24 = call i64 @memset(i64 %23, i64 0, i64 %22), !insn.addr !11490
  %25 = icmp eq i64 %23, 0, !insn.addr !11491
  store i64 %24, i64* %rax.0.reg2mem, !insn.addr !11492
  br i1 %25, label %dec_label_pc_198fd, label %dec_label_pc_198cf, !insn.addr !11492

dec_label_pc_198cf:                               ; preds = %dec_label_pc_19895
  %26 = add i64 %arg1, ptrtoint (i8* @global_var_8 to i64), !insn.addr !11493
  %27 = inttoptr i64 %26 to i64*, !insn.addr !11493
  %28 = load i64, i64* %27, align 8, !insn.addr !11493
  %29 = add i64 %arg1, ptrtoint (i8* @global_var_10 to i64), !insn.addr !11494
  %30 = inttoptr i64 %29 to i64*, !insn.addr !11494
  %31 = load i64, i64* %30, align 8, !insn.addr !11494
  %32 = sub i64 %31, %28, !insn.addr !11495
  %33 = trunc i64 %32 to i32, !insn.addr !11496
  %34 = icmp slt i32 %33, 1
  br i1 %34, label %dec_label_pc_198ec, label %dec_label_pc_198e1, !insn.addr !11497

dec_label_pc_198e1:                               ; preds = %dec_label_pc_198cf
  %sext1 = mul i64 %32, 4294967296
  %35 = sdiv i64 %sext1, 4294967296, !insn.addr !11498
  %36 = call i64 @memcpy(i64 %23, i64 %28, i64 %35, i64 %0), !insn.addr !11499
  br label %dec_label_pc_198ec, !insn.addr !11499

dec_label_pc_198ec:                               ; preds = %dec_label_pc_198e1, %dec_label_pc_198cf
  %37 = call i64 @kfree(i64 %23), !insn.addr !11500
  %38 = inttoptr i64 %arg1 to i64*, !insn.addr !11501
  store i64 0, i64* %38, align 8, !insn.addr !11501
  store i64 %37, i64* %rax.0.reg2mem, !insn.addr !11501
  br label %dec_label_pc_198fd, !insn.addr !11501

dec_label_pc_198fd:                               ; preds = %dec_label_pc_198ec, %dec_label_pc_19895
  %rax.0.reload = load i64, i64* %rax.0.reg2mem
  ret i64 %rax.0.reload, !insn.addr !11501
}

define i32 @append_work_buffer(i64 %buf, i8* %data, i32 %size) local_unnamed_addr {
dec_label_pc_19900:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = call i64 @__decompiler_undefined_function_0()
  %2 = call i64 @__decompiler_undefined_function_0()
  %3 = call i64 @__decompiler_undefined_function_0()
  %sext = mul i64 %0, 4294967296
  %4 = sdiv i64 %sext, 4294967296, !insn.addr !11502
  %5 = add i64 %4, %1, !insn.addr !11503
  %6 = add i64 %2, ptrtoint (i8* @global_var_10 to i64), !insn.addr !11504
  %7 = inttoptr i64 %6 to i64*, !insn.addr !11504
  store i64 %5, i64* %7, align 8, !insn.addr !11504
  %8 = trunc i64 %3 to i32, !insn.addr !11505
  %9 = add i64 %2, ptrtoint (i32** @global_var_18 to i64), !insn.addr !11505
  %10 = inttoptr i64 %9 to i32*, !insn.addr !11505
  store i32 %8, i32* %10, align 4, !insn.addr !11505
  ret i32 ptrtoint (i32* @global_var_1 to i32), !insn.addr !11506
}

define i64 @append_work_buffer.72(i64 %arg1, i64 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_19930:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = call i64 @mcount(), !insn.addr !11507
  %2 = add i64 %arg1, ptrtoint (i8* @global_var_10 to i64), !insn.addr !11508
  %3 = inttoptr i64 %2 to i64*, !insn.addr !11508
  %4 = load i64, i64* %3, align 8, !insn.addr !11508
  %5 = trunc i64 %4 to i32, !insn.addr !11509
  %6 = trunc i64 %0 to i32
  %7 = sub i32 %arg3, %6, !insn.addr !11509
  %8 = add i32 %7, %5, !insn.addr !11510
  %9 = call i64 @reserve_work_buffer.71(i64 %arg1, i32 %8), !insn.addr !11511
  ret i64 %9, !insn.addr !11512
}

define i32 @set_ts_section_data(i64 %sect, i64 %hdr, i8* %data, i32 %size) local_unnamed_addr {
dec_label_pc_19971:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = call i64 @__decompiler_undefined_function_0()
  %2 = call i64 @__decompiler_undefined_function_0()
  %3 = call i64 @__decompiler_undefined_function_0()
  %4 = call i64 @__decompiler_undefined_function_0()
  %5 = sext i32 %size to i64
  %6 = trunc i64 %4 to i8
  %7 = mul i8 %6, 2, !insn.addr !11513
  %8 = inttoptr i64 %4 to i8*, !insn.addr !11513
  store i8 %7, i8* %8, align 1, !insn.addr !11513
  %9 = add i64 %2, 1293645010, !insn.addr !11514
  %10 = inttoptr i64 %9 to i8*, !insn.addr !11514
  %11 = load i8, i8* %10, align 1, !insn.addr !11514
  %12 = add i8 %11, %6, !insn.addr !11514
  store i8 %12, i8* %10, align 1, !insn.addr !11514
  %13 = add i64 %3, ptrtoint (i8* @global_var_10 to i64), !insn.addr !11515
  %14 = inttoptr i64 %13 to i64*, !insn.addr !11515
  %15 = load i64, i64* %14, align 8, !insn.addr !11515
  %16 = call i64 @memcpy(i64 %15, i64 %0, i64 %1, i64 %5), !insn.addr !11516
  %17 = load i64, i64* %14, align 8, !insn.addr !11517
  %18 = add i64 %17, %1, !insn.addr !11517
  store i64 %18, i64* %14, align 8, !insn.addr !11517
  ret i32 ptrtoint (i32* @global_var_1 to i32), !insn.addr !11518
}

define i64 @set_ts_section_data.73(i64 %arg1, i64* %arg2, i64 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_199a1:
  %0 = ptrtoint i64* %arg2 to i64
  %1 = call i64 @mcount(), !insn.addr !11519
  %2 = add i64 %arg1, ptrtoint (i8* @global_var_10 to i64), !insn.addr !11520
  %3 = inttoptr i64 %2 to i64*, !insn.addr !11520
  %4 = load i64, i64* %3, align 8, !insn.addr !11520
  %5 = add i64 %0, ptrtoint (i8* @global_var_8 to i64), !insn.addr !11521
  %6 = inttoptr i64 %5 to i32*, !insn.addr !11521
  %7 = load i32, i32* %6, align 4, !insn.addr !11521
  %8 = icmp eq i32 %7, 0, !insn.addr !11521
  br i1 %8, label %dec_label_pc_199f8, label %dec_label_pc_199d1, !insn.addr !11522

dec_label_pc_199d1:                               ; preds = %dec_label_pc_199a1
  %9 = call i64 @reset_ts_section.49(i64 %arg1), !insn.addr !11523
  %10 = urem i64 %4, 256, !insn.addr !11524
  %11 = add nuw nsw i64 %10, zext (i32 ptrtoint (i32* @global_var_1 to i32) to i64), !insn.addr !11524
  %12 = trunc i64 %11 to i32, !insn.addr !11525
  %13 = sub i32 %arg4, %12, !insn.addr !11525
  %sext = mul i64 %11, 4294967296
  %14 = sdiv i64 %sext, 4294967296, !insn.addr !11526
  %15 = mul i64 %14, ptrtoint (i32* @global_var_1 to i64), !insn.addr !11527
  %16 = add i64 %15, %arg3, !insn.addr !11527
  %17 = call i64 @append_work_buffer.72(i64 %arg1, i64 %16, i32 %13), !insn.addr !11528
  %18 = trunc i64 %17 to i32, !insn.addr !11529
  %19 = icmp eq i32 %18, 0, !insn.addr !11529
  %20 = icmp eq i1 %19, false, !insn.addr !11530
  br i1 %20, label %dec_label_pc_19a10, label %dec_label_pc_199f6, !insn.addr !11530

dec_label_pc_199f6:                               ; preds = %dec_label_pc_199d1
  ret i64 %17, !insn.addr !11531

dec_label_pc_199f8:                               ; preds = %dec_label_pc_199a1
  %21 = add i64 %arg1, ptrtoint (i8* @global_var_8 to i64), !insn.addr !11532
  %22 = inttoptr i64 %21 to i64*, !insn.addr !11532
  %23 = load i64, i64* %22, align 8, !insn.addr !11532
  %24 = sub i64 %4, %23, !insn.addr !11533
  %25 = trunc i64 %24 to i32, !insn.addr !11534
  %26 = icmp slt i32 %25, 1
  br i1 %26, label %dec_label_pc_19a10, label %dec_label_pc_19a02, !insn.addr !11535

dec_label_pc_19a02:                               ; preds = %dec_label_pc_199f8
  %27 = call i64 @append_work_buffer.72(i64 %arg1, i64 %arg3, i32 %arg4), !insn.addr !11536
  br label %dec_label_pc_19a10, !insn.addr !11537

dec_label_pc_19a10:                               ; preds = %dec_label_pc_19a02, %dec_label_pc_199f8, %dec_label_pc_199d1
  %28 = load i64, i64* %3, align 8, !insn.addr !11538
  ret i64 %28, !insn.addr !11538
}

define i32 @find_pmt(i64 %prv) local_unnamed_addr {
dec_label_pc_19a1f:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = trunc i64 %0 to i32
  ret i32 %1
}

define i64 @find_pmt.74(i64 %arg1) local_unnamed_addr {
dec_label_pc_19a4f:
  %rbx.2.reg2mem = alloca i64, !insn.addr !11539
  %rdx.0.reg2mem = alloca i64, !insn.addr !11539
  %rbx.0.reg2mem = alloca i64, !insn.addr !11539
  %rbx.11.reg2mem = alloca i64, !insn.addr !11539
  %0 = call i8 @__decompiler_undefined_function_1()
  %1 = call i32 @__decompiler_undefined_function_3()
  %stack_var_-88 = alloca i64, align 8
  %2 = call i64 @mcount(), !insn.addr !11540
  %3 = add i64 %arg1, ptrtoint (i16* @global_var_4 to i64), !insn.addr !11541
  %4 = inttoptr i64 %3 to i32*, !insn.addr !11541
  %5 = load i32, i32* %4, align 4, !insn.addr !11541
  %6 = add i64 %arg1, ptrtoint (i8* @global_var_8 to i64), !insn.addr !11542
  %7 = inttoptr i64 %6 to i32*, !insn.addr !11542
  %8 = load i32, i32* %7, align 4, !insn.addr !11542
  %9 = sext i32 %8 to i64, !insn.addr !11542
  %10 = add i64 %arg1, 67120, !insn.addr !11543
  %11 = inttoptr i64 %10 to i64*, !insn.addr !11543
  %12 = load i64, i64* %11, align 8, !insn.addr !11543
  %13 = add i64 %12, %9, !insn.addr !11543
  %14 = add i64 %arg1, 67128, !insn.addr !11544
  %15 = inttoptr i64 %14 to i64*, !insn.addr !11544
  %16 = load i64, i64* %15, align 8, !insn.addr !11544
  %17 = sext i32 %5 to i64, !insn.addr !11545
  %18 = add i64 %13, %17, !insn.addr !11546
  %19 = icmp ult i64 %16, %18, !insn.addr !11547
  %20 = icmp eq i1 %19, false, !insn.addr !11548
  store i64 %13, i64* %rbx.2.reg2mem, !insn.addr !11548
  br i1 %20, label %dec_label_pc_19a93.lr.ph, label %dec_label_pc_19b95, !insn.addr !11548

dec_label_pc_19a93.lr.ph:                         ; preds = %dec_label_pc_19a4f
  %21 = sext i32 %1 to i64
  %22 = mul i64 %21, 8
  %23 = add i64 %arg1, 1040
  %24 = add i64 %23, %22
  %25 = inttoptr i64 %24 to i64*
  %26 = and i8 %0, ptrtoint (i32* @global_var_2 to i8)
  %27 = icmp eq i8 %26, 0
  store i64 %13, i64* %rbx.11.reg2mem
  br label %dec_label_pc_19a93

dec_label_pc_19a93:                               ; preds = %dec_label_pc_19a93.lr.ph, %dec_label_pc_19b83.backedge
  %rbx.11.reload = load i64, i64* %rbx.11.reg2mem
  %28 = inttoptr i64 %rbx.11.reload to i8*, !insn.addr !11549
  %29 = load i8, i8* %28, align 1, !insn.addr !11549
  %30 = icmp eq i8 %29, 71, !insn.addr !11549
  store i64 %rbx.11.reload, i64* %rbx.0.reg2mem, !insn.addr !11550
  br i1 %30, label %dec_label_pc_19ab3, label %dec_label_pc_19a98, !insn.addr !11550

dec_label_pc_19a98:                               ; preds = %dec_label_pc_19a93
  %31 = call i64 @resync.46(i64 %rbx.11.reload, i64 %16, i32 %5), !insn.addr !11551
  %32 = icmp eq i64 %31, 0, !insn.addr !11552
  store i64 %31, i64* %rbx.0.reg2mem, !insn.addr !11553
  store i64 %rbx.11.reload, i64* %rbx.2.reg2mem, !insn.addr !11553
  br i1 %32, label %dec_label_pc_19b95, label %dec_label_pc_19ab3, !insn.addr !11553

dec_label_pc_19ab3:                               ; preds = %dec_label_pc_19a98, %dec_label_pc_19a93
  %rbx.0.reload = load i64, i64* %rbx.0.reg2mem
  %33 = call i64 @extract_ts_header.44(i64* nonnull %stack_var_-88, i64 %rbx.0.reload), !insn.addr !11554
  %34 = load i64, i64* %25, align 8, !insn.addr !11555
  %35 = icmp eq i64 %34, 0, !insn.addr !11556
  br i1 %35, label %dec_label_pc_19b83.backedge, label %dec_label_pc_19ad4, !insn.addr !11557

dec_label_pc_19ad4:                               ; preds = %dec_label_pc_19ab3
  %36 = add i64 %34, 8, !insn.addr !11558
  %37 = call i64 @check_ts_section.41(i64 %36), !insn.addr !11559
  %38 = trunc i64 %37 to i32, !insn.addr !11560
  %39 = icmp eq i32 %38, 0, !insn.addr !11560
  %40 = icmp eq i1 %39, false, !insn.addr !11561
  br i1 %40, label %dec_label_pc_19b83.backedge, label %dec_label_pc_19aed, !insn.addr !11561

dec_label_pc_19aed:                               ; preds = %dec_label_pc_19ad4
  %41 = add i64 %rbx.0.reload, ptrtoint (i16* @global_var_4 to i64), !insn.addr !11562
  store i64 %41, i64* %rdx.0.reg2mem, !insn.addr !11563
  br i1 %27, label %dec_label_pc_19aff, label %dec_label_pc_19af7, !insn.addr !11563

dec_label_pc_19af7:                               ; preds = %dec_label_pc_19aed
  %42 = inttoptr i64 %41 to i8*, !insn.addr !11564
  %43 = load i8, i8* %42, align 1, !insn.addr !11564
  %44 = zext i8 %43 to i64, !insn.addr !11564
  %45 = mul i64 %44, ptrtoint (i32* @global_var_1 to i64), !insn.addr !11565
  %46 = add i64 %rbx.0.reload, add (i64 ptrtoint (i16* @global_var_4 to i64), i64 ptrtoint (i32* @global_var_1 to i64)), !insn.addr !11565
  %47 = add i64 %46, %45, !insn.addr !11565
  store i64 %47, i64* %rdx.0.reg2mem, !insn.addr !11565
  br label %dec_label_pc_19aff, !insn.addr !11565

dec_label_pc_19aff:                               ; preds = %dec_label_pc_19af7, %dec_label_pc_19aed
  %rdx.0.reload = load i64, i64* %rdx.0.reg2mem
  %48 = add i64 %34, 80, !insn.addr !11566
  %49 = trunc i64 %rbx.0.reload to i32, !insn.addr !11567
  %50 = trunc i64 %rdx.0.reload to i32, !insn.addr !11568
  %51 = add i32 %49, 188, !insn.addr !11568
  %52 = sub i32 %51, %50, !insn.addr !11569
  %53 = call i64 @set_ts_section_data.73(i64 %48, i64* nonnull %stack_var_-88, i64 %rdx.0.reload, i32 %52), !insn.addr !11570
  %54 = trunc i64 %53 to i32, !insn.addr !11571
  %55 = icmp slt i32 %54, 0, !insn.addr !11571
  store i64 %rbx.0.reload, i64* %rbx.2.reg2mem, !insn.addr !11572
  br i1 %55, label %dec_label_pc_19b95, label %dec_label_pc_19b25, !insn.addr !11572

dec_label_pc_19b25:                               ; preds = %dec_label_pc_19aff
  %56 = call i64 @check_ts_section.41(i64 %48), !insn.addr !11573
  %57 = trunc i64 %56 to i32, !insn.addr !11574
  %58 = icmp eq i32 %57, 0, !insn.addr !11574
  br i1 %58, label %dec_label_pc_19b83.backedge, label %dec_label_pc_19b32, !insn.addr !11575

dec_label_pc_19b32:                               ; preds = %dec_label_pc_19b25
  %59 = call i64 @check_ts_section_crc.47(i64 %48), !insn.addr !11576
  %60 = trunc i64 %59 to i32, !insn.addr !11577
  %61 = icmp eq i32 %60, 0, !insn.addr !11577
  br i1 %61, label %dec_label_pc_19b4a, label %dec_label_pc_19b3f, !insn.addr !11578

dec_label_pc_19b3f:                               ; preds = %dec_label_pc_19b32
  %62 = add i64 %34, 136, !insn.addr !11579
  %63 = inttoptr i64 %62 to i32*, !insn.addr !11579
  %64 = load i32, i32* %63, align 4, !insn.addr !11579
  %65 = icmp eq i32 %64, 0, !insn.addr !11579
  %66 = icmp eq i1 %65, false, !insn.addr !11580
  br i1 %66, label %dec_label_pc_19b58, label %dec_label_pc_19b4a, !insn.addr !11580

dec_label_pc_19b4a:                               ; preds = %dec_label_pc_19b3f, %dec_label_pc_19b32
  %67 = call i64 @reset_ts_section.49(i64 %48), !insn.addr !11581
  br label %dec_label_pc_19b83.backedge, !insn.addr !11582

dec_label_pc_19b83.backedge:                      ; preds = %dec_label_pc_19ab3, %dec_label_pc_19ad4, %dec_label_pc_19b25, %dec_label_pc_19b58, %dec_label_pc_19b4a
  %rbx.1.be = add i64 %rbx.0.reload, %17
  %68 = add i64 %rbx.1.be, %17, !insn.addr !11546
  %69 = icmp ult i64 %16, %68, !insn.addr !11547
  %70 = icmp eq i1 %69, false, !insn.addr !11548
  store i64 %rbx.1.be, i64* %rbx.11.reg2mem, !insn.addr !11548
  store i64 %rbx.1.be, i64* %rbx.2.reg2mem, !insn.addr !11548
  br i1 %70, label %dec_label_pc_19a93, label %dec_label_pc_19b95, !insn.addr !11548

dec_label_pc_19b58:                               ; preds = %dec_label_pc_19b3f
  %71 = call i64 @swap_ts_section.54(i64 %36, i64 %48), !insn.addr !11583
  %72 = call i64 @reset_ts_section.49(i64 %48), !insn.addr !11584
  %73 = call i64 @check_pmt_complete.42(i64 %arg1), !insn.addr !11585
  %74 = trunc i64 %73 to i32, !insn.addr !11586
  %75 = icmp eq i32 %74, 0, !insn.addr !11586
  br i1 %75, label %dec_label_pc_19b83.backedge, label %dec_label_pc_19b7a, !insn.addr !11587

dec_label_pc_19b7a:                               ; preds = %dec_label_pc_19b58
  %76 = add i64 %rbx.0.reload, %17, !insn.addr !11588
  store i64 %76, i64* %rbx.2.reg2mem, !insn.addr !11589
  br label %dec_label_pc_19b95, !insn.addr !11589

dec_label_pc_19b95:                               ; preds = %dec_label_pc_19b83.backedge, %dec_label_pc_19a98, %dec_label_pc_19aff, %dec_label_pc_19a4f, %dec_label_pc_19b7a
  %rbx.2.reload = load i64, i64* %rbx.2.reg2mem
  %77 = trunc i64 %rbx.2.reload to i32, !insn.addr !11590
  %78 = inttoptr i64 %10 to i32*, !insn.addr !11590
  %79 = load i32, i32* %78, align 4, !insn.addr !11590
  %80 = sub i32 %77, %79, !insn.addr !11590
  store i32 %80, i32* %7, align 4, !insn.addr !11591
  %81 = call i64 @check_pmt_complete.42(i64 %arg1), !insn.addr !11592
  ret i64 %81, !insn.addr !11593
}

define i64 @function_19bbd() local_unnamed_addr {
dec_label_pc_19bbd:
  %0 = call i64 @__decompiler_undefined_function_0()
  ret i64 %0, !insn.addr !11594
}

define i64 @function_19bc0() local_unnamed_addr {
dec_label_pc_19bc0:
  %0 = call i64 @__decompiler_undefined_function_0()
  ret i64 %0, !insn.addr !11595
}

define i32 @set_ts_section_data_for_remaining_payload_data(i64 %sect, i64 %hdr, i8* %data, i32 %size) local_unnamed_addr {
dec_label_pc_19bd0:
  %0 = trunc i64 %sect to i32, !insn.addr !11596
  %1 = add i64 %hdr, 1024, !insn.addr !11596
  %2 = inttoptr i64 %1 to i32*, !insn.addr !11596
  %3 = load i32, i32* %2, align 4, !insn.addr !11596
  %4 = add i32 %3, %0, !insn.addr !11596
  %5 = call i64 @proc_pmt.61(i32 %4), !insn.addr !11597
  %6 = trunc i64 %5 to i32, !insn.addr !11598
  ret i32 %6, !insn.addr !11599
}

define i64 @set_ts_section_data_for_remaining_payload_data.75(i64 %arg1, i64* %arg2, i64 %arg3) local_unnamed_addr {
dec_label_pc_19c00:
  %rax.0.reg2mem = alloca i64, !insn.addr !11600
  %0 = ptrtoint i64* %arg2 to i64
  %1 = call i64 @mcount(), !insn.addr !11601
  %2 = add i64 %arg1, ptrtoint (i8* @global_var_10 to i64), !insn.addr !11602
  %3 = inttoptr i64 %2 to i64*, !insn.addr !11602
  %4 = load i64, i64* %3, align 8, !insn.addr !11602
  %5 = add i64 %arg1, ptrtoint (i8* @global_var_8 to i64), !insn.addr !11603
  %6 = inttoptr i64 %5 to i64*, !insn.addr !11603
  %7 = load i64, i64* %6, align 8, !insn.addr !11603
  %8 = add i64 %0, ptrtoint (i8* @global_var_8 to i64), !insn.addr !11604
  %9 = inttoptr i64 %8 to i32*, !insn.addr !11604
  %10 = load i32, i32* %9, align 4, !insn.addr !11604
  %11 = icmp eq i32 %10, 0, !insn.addr !11604
  store i64 %7, i64* %rax.0.reg2mem, !insn.addr !11605
  br i1 %11, label %dec_label_pc_19c44, label %dec_label_pc_19c1f, !insn.addr !11605

dec_label_pc_19c1f:                               ; preds = %dec_label_pc_19c00
  %12 = add i64 %0, ptrtoint (i32** @global_var_18 to i64), !insn.addr !11606
  %13 = inttoptr i64 %12 to i8*, !insn.addr !11606
  %14 = load i8, i8* %13, align 1, !insn.addr !11606
  %15 = and i8 %14, ptrtoint (i32* @global_var_1 to i8), !insn.addr !11606
  %16 = icmp eq i8 %15, 0, !insn.addr !11606
  store i64 %7, i64* %rax.0.reg2mem, !insn.addr !11607
  br i1 %16, label %dec_label_pc_19c44, label %dec_label_pc_19c25, !insn.addr !11607

dec_label_pc_19c25:                               ; preds = %dec_label_pc_19c1f
  %17 = sub i64 %4, %7, !insn.addr !11608
  %18 = trunc i64 %17 to i32, !insn.addr !11609
  %19 = icmp slt i32 %18, 1
  store i64 %7, i64* %rax.0.reg2mem, !insn.addr !11610
  br i1 %19, label %dec_label_pc_19c44, label %dec_label_pc_19c2b, !insn.addr !11610

dec_label_pc_19c2b:                               ; preds = %dec_label_pc_19c25
  %20 = trunc i64 %arg3 to i32
  %21 = add i64 %arg3, ptrtoint (i32* @global_var_1 to i64), !insn.addr !11611
  %22 = urem i32 %20, 256, !insn.addr !11612
  %23 = call i64 @append_work_buffer.72(i64 %arg1, i64 %21, i32 %22), !insn.addr !11613
  store i64 4294967294, i64* %rax.0.reg2mem, !insn.addr !11614
  br label %dec_label_pc_19c44, !insn.addr !11614

dec_label_pc_19c44:                               ; preds = %dec_label_pc_19c2b, %dec_label_pc_19c25, %dec_label_pc_19c1f, %dec_label_pc_19c00
  %rax.0.reload = load i64, i64* %rax.0.reg2mem
  ret i64 %rax.0.reload, !insn.addr !11614
}

define i32 @proc_arib_std_b25(i64 %prv, i8* %std_b25) local_unnamed_addr {
dec_label_pc_19c45:
  %rax.0.reg2mem = alloca i64, !insn.addr !11615
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = call i64 @__decompiler_undefined_function_0()
  %2 = call i64 @__decompiler_undefined_function_0()
  %3 = call i1 @__decompiler_undefined_function_2()
  %4 = icmp eq i1 %3, false, !insn.addr !11615
  br i1 %4, label %dec_label_pc_19c73, label %dec_label_pc_19c47, !insn.addr !11615

dec_label_pc_19c47:                               ; preds = %dec_label_pc_19c45
  %5 = add i64 %0, ptrtoint (i8** @global_var_1f to i64), !insn.addr !11616
  %6 = inttoptr i64 %5 to i8*, !insn.addr !11616
  %7 = load i8, i8* %6, align 1, !insn.addr !11616
  %8 = lshr i64 %2, ptrtoint (i8* @global_var_8 to i64), !insn.addr !11616
  %9 = trunc i64 %8 to i8, !insn.addr !11616
  %10 = add i8 %7, %9, !insn.addr !11616
  store i8 %10, i8* %6, align 1, !insn.addr !11616
  %11 = add i64 %1, ptrtoint (i8* @global_var_8 to i64), !insn.addr !11617
  %12 = inttoptr i64 %11 to i64*, !insn.addr !11617
  %13 = load i64, i64* %12, align 8, !insn.addr !11617
  %14 = add i64 %1, ptrtoint (i8* @global_var_10 to i64), !insn.addr !11618
  %15 = inttoptr i64 %14 to i64*, !insn.addr !11618
  %16 = load i64, i64* %15, align 8, !insn.addr !11618
  %17 = trunc i64 %16 to i32, !insn.addr !11619
  %18 = trunc i64 %13 to i32, !insn.addr !11619
  %19 = sub i32 %17, %18, !insn.addr !11619
  %20 = icmp sgt i32 %19, ptrtoint (i8* @global_var_8 to i32), !insn.addr !11620
  store i64 0, i64* %rax.0.reg2mem, !insn.addr !11620
  br i1 %20, label %dec_label_pc_19c59, label %dec_label_pc_19c73, !insn.addr !11620

dec_label_pc_19c59:                               ; preds = %dec_label_pc_19c47
  %21 = add i64 %1, ptrtoint (i32** @global_var_20 to i64), !insn.addr !11621
  %22 = call i64 @extract_ts_section_header.45(i64 %21, i64 %13), !insn.addr !11622
  store i64 0, i64* %rax.0.reg2mem, !insn.addr !11623
  br label %dec_label_pc_19c73, !insn.addr !11623

dec_label_pc_19c73:                               ; preds = %dec_label_pc_19c59, %dec_label_pc_19c47, %dec_label_pc_19c45
  %rax.0.reload = load i64, i64* %rax.0.reg2mem
  %23 = trunc i64 %rax.0.reload to i32, !insn.addr !11624
  ret i32 %23, !insn.addr !11624
}

define i64 @proc_arib_std_b25.76(i64 %arg1) local_unnamed_addr {
dec_label_pc_19c75:
  %.pre-phi90.reg2mem = alloca i16*, !insn.addr !11625
  %stack_var_-1212.4.reg2mem = alloca i32, !insn.addr !11625
  %stack_var_-1212.2.be.reg2mem = alloca i32, !insn.addr !11625
  %stack_var_-1200.1.reg2mem = alloca i16, !insn.addr !11625
  %stack_var_-1240.0.reg2mem = alloca i32, !insn.addr !11625
  %stack_var_-1212.0.reg2mem = alloca i32, !insn.addr !11625
  %stack_var_-1200.0.reg2mem = alloca i16, !insn.addr !11625
  %rax.1.reg2mem = alloca i64, !insn.addr !11625
  %rdx.0.reg2mem = alloca i64, !insn.addr !11625
  %rax.0.reg2mem = alloca i64, !insn.addr !11625
  %r8.0.reg2mem = alloca i64, !insn.addr !11625
  %rcx.0.reg2mem = alloca i64, !insn.addr !11625
  %r13.0.reg2mem = alloca i64, !insn.addr !11625
  %r14.0.reg2mem = alloca i64, !insn.addr !11625
  %stack_var_-1212.211.reg2mem = alloca i32, !insn.addr !11625
  %stack_var_-1240.113.reg2mem = alloca i32, !insn.addr !11625
  %r14.114.reg2mem = alloca i64, !insn.addr !11625
  %0 = call i32 @__decompiler_undefined_function_3()
  %1 = call i32 @__decompiler_undefined_function_3()
  %2 = call i32 @__decompiler_undefined_function_3()
  %3 = call i32 @__decompiler_undefined_function_3()
  %stack_var_-1192 = alloca i64, align 8
  %4 = call i64 @mcount(), !insn.addr !11626
  %5 = call i64 @__readgsqword(i64 40), !insn.addr !11627
  %6 = add i64 %arg1, ptrtoint (i16* @global_var_4 to i64), !insn.addr !11628
  %7 = inttoptr i64 %6 to i32*, !insn.addr !11628
  %8 = load i32, i32* %7, align 4, !insn.addr !11628
  %9 = add i64 %arg1, 67120, !insn.addr !11629
  %10 = inttoptr i64 %9 to i64*, !insn.addr !11629
  %11 = load i64, i64* %10, align 8, !insn.addr !11629
  %12 = add i64 %arg1, 67128, !insn.addr !11630
  %13 = inttoptr i64 %12 to i64*, !insn.addr !11630
  %14 = load i64, i64* %13, align 8, !insn.addr !11630
  %15 = sub i64 %14, %11, !insn.addr !11631
  %16 = trunc i64 %15 to i32, !insn.addr !11632
  %17 = add i64 %arg1, 67144, !insn.addr !11633
  %18 = add i64 %arg1, 67160, !insn.addr !11634
  %19 = inttoptr i64 %18 to i64*, !insn.addr !11634
  %20 = load i64, i64* %19, align 8, !insn.addr !11634
  %21 = trunc i64 %20 to i32, !insn.addr !11635
  %22 = add i64 %arg1, 67152, !insn.addr !11635
  %23 = inttoptr i64 %22 to i32*, !insn.addr !11635
  %24 = load i32, i32* %23, align 4, !insn.addr !11635
  %25 = sub i32 %21, %24, !insn.addr !11635
  %26 = add i32 %25, %16, !insn.addr !11636
  %27 = call i64 @reserve_work_buffer.71(i64 %17, i32 %26), !insn.addr !11637
  %28 = trunc i64 %27 to i32, !insn.addr !11638
  %29 = icmp eq i32 %28, 0, !insn.addr !11638
  store i32 -2, i32* %stack_var_-1212.4.reg2mem, !insn.addr !11639
  br i1 %29, label %dec_label_pc_1a84b, label %dec_label_pc_19cf4, !insn.addr !11639

dec_label_pc_19cf4:                               ; preds = %dec_label_pc_19c75
  %30 = sext i32 %8 to i64, !insn.addr !11640
  %31 = mul i64 %30, ptrtoint (i32* @global_var_1 to i64), !insn.addr !11641
  %32 = add i64 %31, %11, !insn.addr !11641
  %33 = icmp ult i64 %14, %32, !insn.addr !11642
  %34 = icmp eq i1 %33, false, !insn.addr !11643
  store i32 0, i32* %stack_var_-1212.4.reg2mem, !insn.addr !11643
  br i1 %34, label %dec_label_pc_19de0.lr.ph, label %dec_label_pc_1a84b, !insn.addr !11643

dec_label_pc_19de0.lr.ph:                         ; preds = %dec_label_pc_19cf4
  %35 = add i64 %arg1, 96, !insn.addr !11644
  %36 = add i64 %arg1, ptrtoint (i32** @global_var_18 to i64), !insn.addr !11645
  %37 = add i64 %arg1, 680, !insn.addr !11646
  %38 = add i64 %arg1, 608, !insn.addr !11647
  %39 = add i64 %arg1, 240, !insn.addr !11648
  %40 = add i64 %arg1, 168, !insn.addr !11649
  %41 = add i64 %arg1, 384, !insn.addr !11650
  %42 = add i64 %arg1, 312, !insn.addr !11651
  %43 = add i64 %arg1, 528, !insn.addr !11652
  %44 = add i64 %arg1, 456, !insn.addr !11653
  %45 = zext i32 %2 to i64
  %46 = mul i64 %45, 8
  %47 = add i64 %arg1, 1040
  %48 = add i64 %47, %46
  %49 = inttoptr i64 %48 to i64*
  %50 = add i64 %arg1, 1024
  %51 = inttoptr i64 %50 to i64*
  %52 = add i64 %arg1, 67180
  %53 = inttoptr i64 %52 to i8*
  %54 = add i64 %arg1, 67096
  %55 = inttoptr i64 %54 to i64*
  %56 = trunc i32 %1 to i8
  %57 = and i8 %56, ptrtoint (i32* @global_var_1 to i8)
  %58 = icmp eq i8 %57, 0
  %59 = and i8 %56, ptrtoint (i32* @global_var_2 to i8)
  %60 = icmp eq i8 %59, 0
  %61 = icmp eq i32 %3, 0
  %62 = add i64 %arg1, 67184
  %63 = inttoptr i64 %62 to i8*
  %64 = icmp eq i32 %0, ptrtoint (i32* @global_var_1 to i32)
  %65 = icmp eq i1 %64, false
  %66 = icmp eq i32 %2, 0
  %67 = icmp eq i1 %66, false
  %68 = add i64 %arg1, 152
  %69 = inttoptr i64 %68 to i32*
  %70 = add i64 %arg1, 600
  %71 = inttoptr i64 %70 to i32*
  %72 = add i64 %arg1, 736
  %73 = inttoptr i64 %72 to i32*
  %74 = add i64 %arg1, 640
  %75 = inttoptr i64 %74 to i32*
  %76 = icmp eq i32 %2, ptrtoint (i32* @global_var_1 to i32)
  %77 = icmp eq i1 %76, false
  %78 = add i64 %arg1, 296
  %79 = inttoptr i64 %78 to i32*
  %80 = icmp eq i32 %2, ptrtoint (i8** @global_var_11 to i32)
  %81 = icmp eq i1 %80, false
  %82 = add i64 %arg1, 440
  %83 = inttoptr i64 %82 to i32*
  %84 = icmp eq i32 %2, ptrtoint (i32** @global_var_12 to i32)
  %85 = icmp eq i1 %84, false
  %86 = add i64 %arg1, 584
  %87 = inttoptr i64 %86 to i32*
  store i64 %11, i64* %r14.114.reg2mem
  store i32 %16, i32* %stack_var_-1240.113.reg2mem
  store i32 0, i32* %stack_var_-1212.211.reg2mem
  br label %dec_label_pc_19de0

dec_label_pc_19de0:                               ; preds = %dec_label_pc_19de0.lr.ph, %dec_label_pc_1a81b.backedge
  %stack_var_-1212.211.reload = load i32, i32* %stack_var_-1212.211.reg2mem
  %stack_var_-1240.113.reload = load i32, i32* %stack_var_-1240.113.reg2mem
  %r14.114.reload = load i64, i64* %r14.114.reg2mem
  %88 = inttoptr i64 %r14.114.reload to i8*, !insn.addr !11654
  %89 = load i8, i8* %88, align 1, !insn.addr !11654
  %90 = icmp eq i8 %89, 71, !insn.addr !11654
  store i64 %r14.114.reload, i64* %r14.0.reg2mem, !insn.addr !11655
  br i1 %90, label %dec_label_pc_19e07, label %dec_label_pc_19de6, !insn.addr !11655

dec_label_pc_19de6:                               ; preds = %dec_label_pc_19de0
  %91 = call i64 @resync.46(i64 %r14.114.reload, i64 %14, i32 %8), !insn.addr !11656
  %92 = icmp eq i64 %91, 0, !insn.addr !11657
  store i64 %91, i64* %r14.0.reg2mem, !insn.addr !11658
  store i32 %stack_var_-1212.211.reload, i32* %stack_var_-1212.4.reg2mem, !insn.addr !11658
  br i1 %92, label %dec_label_pc_1a84b, label %dec_label_pc_19e07, !insn.addr !11658

dec_label_pc_19e07:                               ; preds = %dec_label_pc_19de6, %dec_label_pc_19de0
  %r14.0.reload = load i64, i64* %r14.0.reg2mem
  %93 = call i64 @extract_ts_header.44(i64* nonnull %stack_var_-1192, i64 %r14.0.reload), !insn.addr !11659
  %94 = load i64, i64* %49, align 8, !insn.addr !11660
  %95 = icmp eq i64 %94, 0, !insn.addr !11661
  %96 = icmp eq i1 %95, false, !insn.addr !11662
  store i64 %94, i64* %r13.0.reg2mem, !insn.addr !11662
  br i1 %96, label %dec_label_pc_19e3f, label %dec_label_pc_19e37, !insn.addr !11662

dec_label_pc_19e37:                               ; preds = %dec_label_pc_19e07
  %97 = load i64, i64* %51, align 8, !insn.addr !11663
  store i64 %97, i64* %r13.0.reg2mem, !insn.addr !11663
  br label %dec_label_pc_19e3f, !insn.addr !11663

dec_label_pc_19e3f:                               ; preds = %dec_label_pc_19e37, %dec_label_pc_19e07
  %98 = load i8, i8* %53, align 1, !insn.addr !11664
  %99 = icmp eq i8 %98, 0, !insn.addr !11664
  br i1 %99, label %dec_label_pc_19ee9, label %dec_label_pc_19e55, !insn.addr !11665

dec_label_pc_19e55:                               ; preds = %dec_label_pc_19e3f
  %100 = add i64 %arg1, 1016, !insn.addr !11666
  %101 = inttoptr i64 %100 to i32*, !insn.addr !11666
  %102 = load i32, i32* %101, align 4, !insn.addr !11666
  %103 = icmp slt i32 %102, 1
  br i1 %103, label %dec_label_pc_19e55.dec_label_pc_1a865_crit_edge, label %dec_label_pc_19e66, !insn.addr !11667

dec_label_pc_19e55.dec_label_pc_1a865_crit_edge:  ; preds = %dec_label_pc_19e55
  %.pre = add i64 %arg1, 67182, !insn.addr !11668
  %.pre89 = inttoptr i64 %.pre to i16*, !insn.addr !11668
  store i16* %.pre89, i16** %.pre-phi90.reg2mem
  br label %dec_label_pc_1a865

dec_label_pc_19e66:                               ; preds = %dec_label_pc_19e55
  %104 = zext i32 %102 to i64, !insn.addr !11666
  %105 = load i64, i64* %51, align 8, !insn.addr !11669
  %106 = add i64 %arg1, 67182
  %107 = inttoptr i64 %106 to i16*
  store i64 %105, i64* %rcx.0.reg2mem, !insn.addr !11670
  store i64 0, i64* %r8.0.reg2mem, !insn.addr !11670
  br label %dec_label_pc_19e74, !insn.addr !11670

dec_label_pc_19e74:                               ; preds = %dec_label_pc_19ed4, %dec_label_pc_19e66
  %r8.0.reload = load i64, i64* %r8.0.reg2mem
  %rcx.0.reload = load i64, i64* %rcx.0.reg2mem
  %108 = icmp eq i64 %rcx.0.reload, 0, !insn.addr !11671
  br i1 %108, label %dec_label_pc_19ed4, label %dec_label_pc_19e7c, !insn.addr !11672

dec_label_pc_19e7c:                               ; preds = %dec_label_pc_19e74
  %109 = load i16, i16* %107, align 2, !insn.addr !11673
  %110 = add i64 %rcx.0.reload, 152, !insn.addr !11674
  %111 = inttoptr i64 %110 to i32*, !insn.addr !11674
  %112 = load i32, i32* %111, align 4, !insn.addr !11674
  %113 = zext i16 %109 to i32, !insn.addr !11674
  %114 = icmp eq i32 %112, %113, !insn.addr !11674
  %115 = icmp eq i1 %114, false, !insn.addr !11675
  br i1 %115, label %dec_label_pc_19ed4, label %dec_label_pc_19e8d, !insn.addr !11675

dec_label_pc_19e8d:                               ; preds = %dec_label_pc_19e7c
  %116 = add i64 %rcx.0.reload, 320, !insn.addr !11676
  %117 = inttoptr i64 %116 to i32*, !insn.addr !11676
  %118 = load i32, i32* %117, align 4, !insn.addr !11676
  %119 = icmp slt i32 %118, 1
  store i64 0, i64* %rax.1.reg2mem, !insn.addr !11677
  br i1 %119, label %dec_label_pc_19ec0, label %dec_label_pc_19e9a, !insn.addr !11677

dec_label_pc_19e9a:                               ; preds = %dec_label_pc_19e8d
  %120 = zext i32 %118 to i64, !insn.addr !11676
  %121 = add i64 %rcx.0.reload, 312, !insn.addr !11678
  %122 = inttoptr i64 %121 to i64*, !insn.addr !11678
  %123 = load i64, i64* %122, align 8, !insn.addr !11678
  %124 = inttoptr i64 %123 to i32*, !insn.addr !11679
  %125 = load i32, i32* %124, align 4, !insn.addr !11679
  %126 = icmp eq i32 %125, %2, !insn.addr !11679
  %127 = icmp eq i1 %126, false, !insn.addr !11680
  store i64 0, i64* %rax.0.reg2mem, !insn.addr !11680
  store i64 %123, i64* %rdx.0.reg2mem, !insn.addr !11680
  store i16* %107, i16** %.pre-phi90.reg2mem, !insn.addr !11680
  br i1 %127, label %dec_label_pc_19eb9, label %dec_label_pc_1a865, !insn.addr !11680

dec_label_pc_19eaa:                               ; preds = %dec_label_pc_19eb9
  %rdx.0.reload = load i64, i64* %rdx.0.reg2mem
  %128 = add i64 %rdx.0.reload, 8, !insn.addr !11681
  %129 = inttoptr i64 %128 to i32*, !insn.addr !11681
  %130 = load i32, i32* %129, align 4, !insn.addr !11681
  %131 = icmp eq i32 %130, %2, !insn.addr !11682
  store i64 %133, i64* %rax.0.reg2mem, !insn.addr !11683
  store i64 %128, i64* %rdx.0.reg2mem, !insn.addr !11683
  store i16* %107, i16** %.pre-phi90.reg2mem, !insn.addr !11683
  br i1 %131, label %dec_label_pc_1a865, label %dec_label_pc_19eb9, !insn.addr !11683

dec_label_pc_19eb9:                               ; preds = %dec_label_pc_19e9a, %dec_label_pc_19eaa
  %rax.0.reload = load i64, i64* %rax.0.reg2mem
  %132 = add nuw nsw i64 %rax.0.reload, zext (i32 ptrtoint (i32* @global_var_1 to i32) to i64), !insn.addr !11684
  %133 = and i64 %132, 4294967295, !insn.addr !11684
  %134 = icmp ult i64 %133, %120, !insn.addr !11685
  store i64 %133, i64* %rax.1.reg2mem, !insn.addr !11685
  br i1 %134, label %dec_label_pc_19eaa, label %dec_label_pc_19ec0, !insn.addr !11685

dec_label_pc_19ec0:                               ; preds = %dec_label_pc_19eb9, %dec_label_pc_19e8d
  %rax.1.reload = load i64, i64* %rax.1.reg2mem
  %135 = trunc i64 %rax.1.reload to i32, !insn.addr !11686
  %136 = icmp eq i32 %118, %135, !insn.addr !11686
  %137 = icmp eq i1 %136, false, !insn.addr !11687
  store i16* %107, i16** %.pre-phi90.reg2mem, !insn.addr !11687
  br i1 %137, label %dec_label_pc_1a865, label %dec_label_pc_19ec8, !insn.addr !11687

dec_label_pc_19ec8:                               ; preds = %dec_label_pc_19ec0
  %138 = add i64 %rcx.0.reload, 160, !insn.addr !11688
  %139 = inttoptr i64 %138 to i32*, !insn.addr !11688
  %140 = load i32, i32* %139, align 4, !insn.addr !11688
  %141 = icmp eq i32 %140, %2, !insn.addr !11688
  store i16* %107, i16** %.pre-phi90.reg2mem, !insn.addr !11689
  br i1 %141, label %dec_label_pc_1a865, label %dec_label_pc_19ed4, !insn.addr !11689

dec_label_pc_19ed4:                               ; preds = %dec_label_pc_19ec8, %dec_label_pc_19e7c, %dec_label_pc_19e74
  %142 = add nuw nsw i64 %r8.0.reload, zext (i32 ptrtoint (i32* @global_var_1 to i32) to i64), !insn.addr !11690
  %143 = and i64 %142, 4294967295, !insn.addr !11690
  %144 = add i64 %rcx.0.reload, 1920, !insn.addr !11691
  %145 = icmp ult i64 %143, %104, !insn.addr !11692
  store i64 %144, i64* %rcx.0.reg2mem, !insn.addr !11692
  store i64 %143, i64* %r8.0.reg2mem, !insn.addr !11692
  store i16* %107, i16** %.pre-phi90.reg2mem, !insn.addr !11692
  br i1 %145, label %dec_label_pc_19e74, label %dec_label_pc_1a865, !insn.addr !11692

dec_label_pc_19ee9:                               ; preds = %dec_label_pc_19e3f
  %r13.0.reload = load i64, i64* %r13.0.reg2mem
  %146 = load i64, i64* %55, align 8, !insn.addr !11693
  %147 = inttoptr i64 %146 to i64*, !insn.addr !11694
  %148 = load i64, i64* %147, align 8, !insn.addr !11694
  %149 = add i64 %148, 84, !insn.addr !11695
  %150 = inttoptr i64 %149 to i8*, !insn.addr !11695
  %151 = load i8, i8* %150, align 1, !insn.addr !11695
  %152 = icmp eq i8 %151, 0, !insn.addr !11695
  br i1 %152, label %dec_label_pc_19f51, label %dec_label_pc_19f01, !insn.addr !11696

dec_label_pc_19f01:                               ; preds = %dec_label_pc_19ee9
  %153 = add i64 %148, 85, !insn.addr !11697
  %154 = inttoptr i64 %153 to i8*, !insn.addr !11697
  %155 = load i8, i8* %154, align 1, !insn.addr !11697
  %156 = icmp eq i8 %155, 0, !insn.addr !11697
  %157 = icmp eq i1 %156, false, !insn.addr !11698
  br i1 %157, label %dec_label_pc_19f51, label %dec_label_pc_19f07, !insn.addr !11698

dec_label_pc_19f07:                               ; preds = %dec_label_pc_19f01
  %158 = add i64 %r13.0.reload, 328, !insn.addr !11699
  %159 = inttoptr i64 %158 to i64*, !insn.addr !11699
  %160 = load i64, i64* %159, align 8, !insn.addr !11699
  %161 = icmp eq i64 %160, 0, !insn.addr !11699
  br i1 %161, label %dec_label_pc_19f51, label %dec_label_pc_19f11, !insn.addr !11700

dec_label_pc_19f11:                               ; preds = %dec_label_pc_19f07
  %sext5 = mul i64 %148, 281474976710656
  %162 = sdiv i64 %sext5, 281474976710656, !insn.addr !11701
  %163 = add nsw i64 %162, 85, !insn.addr !11702
  %164 = inttoptr i64 %163 to i8*, !insn.addr !11702
  store i8 ptrtoint (i32* @global_var_1 to i8), i8* %164, align 1, !insn.addr !11702
  br label %dec_label_pc_19f51, !insn.addr !11702

dec_label_pc_19f51:                               ; preds = %dec_label_pc_19f11, %dec_label_pc_19f07, %dec_label_pc_19f01, %dec_label_pc_19ee9
  %sext6 = mul i64 %148, 281474976710656
  %165 = sdiv i64 %sext6, 281474976710656, !insn.addr !11703
  %166 = add nsw i64 %165, 604, !insn.addr !11704
  %167 = inttoptr i64 %166 to i8*, !insn.addr !11704
  %168 = load i8, i8* %167, align 1, !insn.addr !11704
  %169 = icmp eq i8 %168, 0, !insn.addr !11704
  br i1 %169, label %dec_label_pc_19fb9, label %dec_label_pc_19f61, !insn.addr !11705

dec_label_pc_19f61:                               ; preds = %dec_label_pc_19f51
  %170 = add i64 %r13.0.reload, 328, !insn.addr !11706
  %171 = inttoptr i64 %170 to i64*, !insn.addr !11706
  %172 = load i64, i64* %171, align 8, !insn.addr !11706
  %173 = icmp eq i64 %172, 0, !insn.addr !11707
  br i1 %173, label %dec_label_pc_19fb9, label %dec_label_pc_19f8e, !insn.addr !11708

dec_label_pc_19f8e:                               ; preds = %dec_label_pc_19f61
  store i8 0, i8* %167, align 1, !insn.addr !11709
  br label %dec_label_pc_19fb9, !insn.addr !11709

dec_label_pc_19fb9:                               ; preds = %dec_label_pc_19f51, %dec_label_pc_19f8e, %dec_label_pc_19f61
  %174 = add i64 %r14.0.reload, ptrtoint (i16* @global_var_4 to i64), !insn.addr !11710
  %175 = trunc i64 %174 to i16, !insn.addr !11711
  store i32 %stack_var_-1212.211.reload, i32* %stack_var_-1212.0.reg2mem, !insn.addr !11712
  store i32 %stack_var_-1240.113.reload, i32* %stack_var_-1240.0.reg2mem, !insn.addr !11712
  store i16 %175, i16* %stack_var_-1200.1.reg2mem, !insn.addr !11712
  br i1 %58, label %dec_label_pc_1a067, label %dec_label_pc_19fd2, !insn.addr !11712

dec_label_pc_19fd2:                               ; preds = %dec_label_pc_19fb9
  store i16 %175, i16* %stack_var_-1200.0.reg2mem, !insn.addr !11713
  br i1 %60, label %dec_label_pc_19fe5, label %dec_label_pc_19fd6, !insn.addr !11713

dec_label_pc_19fd6:                               ; preds = %dec_label_pc_19fd2
  %176 = inttoptr i64 %174 to i8*, !insn.addr !11714
  %177 = load i8, i8* %176, align 1, !insn.addr !11714
  %178 = zext i8 %177 to i64, !insn.addr !11714
  %179 = mul i64 %178, ptrtoint (i32* @global_var_1 to i64), !insn.addr !11715
  %180 = add i64 %r14.0.reload, add (i64 ptrtoint (i16* @global_var_4 to i64), i64 ptrtoint (i32* @global_var_1 to i64)), !insn.addr !11715
  %181 = add i64 %180, %179, !insn.addr !11715
  %182 = trunc i64 %181 to i16, !insn.addr !11716
  store i16 %182, i16* %stack_var_-1200.0.reg2mem, !insn.addr !11716
  br label %dec_label_pc_19fe5, !insn.addr !11716

dec_label_pc_19fe5:                               ; preds = %dec_label_pc_19fd6, %dec_label_pc_19fd2
  %stack_var_-1200.0.reload = load i16, i16* %stack_var_-1200.0.reg2mem
  %183 = trunc i64 %r14.0.reload to i32, !insn.addr !11717
  %184 = sext i16 %stack_var_-1200.0.reload to i32, !insn.addr !11718
  %185 = sub i32 %183, %184, !insn.addr !11718
  %186 = add i32 %185, 188, !insn.addr !11719
  store i32 %stack_var_-1212.211.reload, i32* %stack_var_-1212.0.reg2mem, !insn.addr !11720
  store i32 %186, i32* %stack_var_-1240.0.reg2mem, !insn.addr !11720
  store i16 %stack_var_-1200.0.reload, i16* %stack_var_-1200.1.reg2mem, !insn.addr !11720
  br i1 %61, label %dec_label_pc_1a067, label %dec_label_pc_1a002, !insn.addr !11720

dec_label_pc_1a002:                               ; preds = %dec_label_pc_19fe5
  store i8 ptrtoint (i32* @global_var_1 to i8), i8* %63, align 1, !insn.addr !11721
  %187 = add i64 %r13.0.reload, 328, !insn.addr !11722
  %188 = inttoptr i64 %187 to i64*, !insn.addr !11722
  %189 = load i64, i64* %188, align 8, !insn.addr !11722
  %190 = icmp eq i64 %189, 0, !insn.addr !11723
  store i32 %stack_var_-1212.211.reload, i32* %stack_var_-1212.0.reg2mem, !insn.addr !11724
  store i32 %186, i32* %stack_var_-1240.0.reg2mem, !insn.addr !11724
  store i16 %stack_var_-1200.0.reload, i16* %stack_var_-1200.1.reg2mem, !insn.addr !11724
  br i1 %190, label %dec_label_pc_1a067, label %dec_label_pc_1a017, !insn.addr !11724

dec_label_pc_1a017:                               ; preds = %dec_label_pc_1a002
  %191 = trunc i64 %189 to i32, !insn.addr !11725
  %192 = icmp slt i32 %191, 0, !insn.addr !11725
  %193 = icmp eq i1 %192, false, !insn.addr !11726
  store i32 -10, i32* %stack_var_-1212.0.reg2mem, !insn.addr !11726
  store i32 %186, i32* %stack_var_-1240.0.reg2mem, !insn.addr !11726
  store i16 %stack_var_-1200.0.reload, i16* %stack_var_-1200.1.reg2mem, !insn.addr !11726
  br i1 %193, label %dec_label_pc_1a062, label %dec_label_pc_1a067, !insn.addr !11726

dec_label_pc_1a062:                               ; preds = %dec_label_pc_1a017
  %194 = select i1 %65, i32 %stack_var_-1212.211.reload, i32 0, !insn.addr !11727
  %195 = add i64 %r14.0.reload, ptrtoint (i8** @global_var_3 to i64), !insn.addr !11728
  %196 = inttoptr i64 %195 to i8*, !insn.addr !11728
  %197 = load i8, i8* %196, align 1, !insn.addr !11728
  %198 = urem i8 %197, 64, !insn.addr !11728
  store i8 %198, i8* %196, align 1, !insn.addr !11728
  store i32 %194, i32* %stack_var_-1212.0.reg2mem, !insn.addr !11728
  store i32 %186, i32* %stack_var_-1240.0.reg2mem, !insn.addr !11728
  store i16 %stack_var_-1200.0.reload, i16* %stack_var_-1200.1.reg2mem, !insn.addr !11728
  br label %dec_label_pc_1a067, !insn.addr !11728

dec_label_pc_1a067:                               ; preds = %dec_label_pc_1a017, %dec_label_pc_1a062, %dec_label_pc_1a002, %dec_label_pc_19fe5, %dec_label_pc_19fb9
  %199 = call i64 @append_work_buffer.72(i64 %17, i64 %r14.0.reload, i32 188), !insn.addr !11729
  %200 = trunc i64 %199 to i32, !insn.addr !11730
  %201 = icmp eq i32 %200, 0, !insn.addr !11730
  %202 = icmp eq i1 %201, false, !insn.addr !11731
  store i32 -2, i32* %stack_var_-1212.4.reg2mem, !insn.addr !11731
  br i1 %202, label %dec_label_pc_1a08e, label %dec_label_pc_1a84b, !insn.addr !11731

dec_label_pc_1a08e:                               ; preds = %dec_label_pc_1a067
  %stack_var_-1200.1.reload = load i16, i16* %stack_var_-1200.1.reg2mem
  %stack_var_-1240.0.reload = load i32, i32* %stack_var_-1240.0.reg2mem
  br i1 %67, label %dec_label_pc_1a154, label %dec_label_pc_1a096, !insn.addr !11732

dec_label_pc_1a096:                               ; preds = %dec_label_pc_1a08e
  %203 = sext i16 %stack_var_-1200.1.reload to i64, !insn.addr !11733
  %204 = call i64 @set_ts_section_data.73(i64 %35, i64* nonnull %stack_var_-1192, i64 %203, i32 %stack_var_-1240.0.reload), !insn.addr !11734
  %205 = trunc i64 %204 to i32
  %206 = icmp slt i32 %205, 0, !insn.addr !11735
  store i32 %205, i32* %stack_var_-1212.4.reg2mem, !insn.addr !11736
  br i1 %206, label %dec_label_pc_1a84b, label %dec_label_pc_1a0c4, !insn.addr !11736

dec_label_pc_1a0c4:                               ; preds = %dec_label_pc_1a096
  %207 = call i64 @check_ts_section.41(i64 %35), !insn.addr !11737
  %208 = trunc i64 %207 to i32, !insn.addr !11738
  %209 = icmp eq i32 %208, 0, !insn.addr !11738
  store i32 %205, i32* %stack_var_-1212.2.be.reg2mem, !insn.addr !11739
  br i1 %209, label %dec_label_pc_1a81b.backedge, label %dec_label_pc_1a0d8, !insn.addr !11739

dec_label_pc_1a0d8:                               ; preds = %dec_label_pc_1a0c4
  %210 = call i64 @check_ts_section_crc.47(i64 %35), !insn.addr !11740
  %211 = trunc i64 %210 to i32, !insn.addr !11741
  %212 = icmp eq i32 %211, 0, !insn.addr !11741
  br i1 %212, label %dec_label_pc_1a10a, label %dec_label_pc_1a0e8, !insn.addr !11742

dec_label_pc_1a0e8:                               ; preds = %dec_label_pc_1a0d8
  %213 = load i32, i32* %69, align 4, !insn.addr !11743
  %214 = icmp eq i32 %213, 0, !insn.addr !11743
  br i1 %214, label %dec_label_pc_1a10a, label %dec_label_pc_1a0f3, !insn.addr !11744

dec_label_pc_1a0f3:                               ; preds = %dec_label_pc_1a0e8
  %215 = call i64 @compare_ts_section.67(i64 %36), !insn.addr !11745
  %216 = trunc i64 %215 to i32, !insn.addr !11746
  %217 = icmp eq i32 %216, 0, !insn.addr !11746
  %218 = icmp eq i1 %217, false, !insn.addr !11747
  br i1 %218, label %dec_label_pc_1a122, label %dec_label_pc_1a10a, !insn.addr !11747

dec_label_pc_1a10a:                               ; preds = %dec_label_pc_1a0f3, %dec_label_pc_1a0e8, %dec_label_pc_1a0d8
  %219 = call i64 @reset_ts_section.49(i64 %35), !insn.addr !11748
  store i32 %205, i32* %stack_var_-1212.2.be.reg2mem, !insn.addr !11749
  br label %dec_label_pc_1a81b.backedge, !insn.addr !11749

dec_label_pc_1a81b.backedge:                      ; preds = %dec_label_pc_1a0c4, %dec_label_pc_1a19f, %dec_label_pc_1a1d9, %dec_label_pc_1a24b, %dec_label_pc_1a2cc, %dec_label_pc_1a3d1, %dec_label_pc_1a42f, %dec_label_pc_1a460, %dec_label_pc_1a4a4, %dec_label_pc_1a502, %dec_label_pc_1a618, %dec_label_pc_1a676, %dec_label_pc_1a6b0, %dec_label_pc_1a78c, %dec_label_pc_1a7e3, %dec_label_pc_1a10a, %dec_label_pc_1a1c5, %dec_label_pc_1a28b, %dec_label_pc_1a417, %dec_label_pc_1a4ea, %dec_label_pc_1a65e, %dec_label_pc_1a7ce
  %stack_var_-1212.2.be.reload = load i32, i32* %stack_var_-1212.2.be.reg2mem
  %r14.1.be = add i64 %r14.0.reload, %30
  %220 = add i64 %r14.1.be, %31, !insn.addr !11641
  %221 = icmp ult i64 %14, %220, !insn.addr !11642
  %222 = icmp eq i1 %221, false, !insn.addr !11643
  store i64 %r14.1.be, i64* %r14.114.reg2mem, !insn.addr !11643
  store i32 %stack_var_-1240.0.reload, i32* %stack_var_-1240.113.reg2mem, !insn.addr !11643
  store i32 %stack_var_-1212.2.be.reload, i32* %stack_var_-1212.211.reg2mem, !insn.addr !11643
  store i32 %stack_var_-1212.2.be.reload, i32* %stack_var_-1212.4.reg2mem, !insn.addr !11643
  br i1 %222, label %dec_label_pc_19de0, label %dec_label_pc_1a84b, !insn.addr !11643

dec_label_pc_1a122:                               ; preds = %dec_label_pc_1a0f3
  %223 = call i64 @swap_ts_section.54(i64 %36, i64 %35), !insn.addr !11750
  %224 = call i64 @reset_ts_section.49(i64 %35), !insn.addr !11751
  %225 = call i64 @proc_pat.70(i64 %arg1), !insn.addr !11752
  %226 = trunc i64 %225 to i32, !insn.addr !11753
  store i32 %226, i32* %stack_var_-1212.4.reg2mem, !insn.addr !11754
  br label %dec_label_pc_1a84b, !insn.addr !11754

dec_label_pc_1a154:                               ; preds = %dec_label_pc_1a08e
  %227 = add i64 %r13.0.reload, 160, !insn.addr !11755
  %228 = inttoptr i64 %227 to i32*, !insn.addr !11755
  %229 = load i32, i32* %228, align 4, !insn.addr !11755
  %230 = icmp eq i32 %229, %2, !insn.addr !11755
  %231 = icmp eq i1 %230, false, !insn.addr !11756
  br i1 %231, label %dec_label_pc_1a213, label %dec_label_pc_1a16e, !insn.addr !11756

dec_label_pc_1a16e:                               ; preds = %dec_label_pc_1a154
  %232 = add i64 %r13.0.reload, 240, !insn.addr !11757
  %233 = sext i16 %stack_var_-1200.1.reload to i64, !insn.addr !11758
  %234 = call i64 @set_ts_section_data.73(i64 %232, i64* nonnull %stack_var_-1192, i64 %233, i32 %stack_var_-1240.0.reload), !insn.addr !11759
  %235 = trunc i64 %234 to i32
  %236 = icmp slt i32 %235, 0, !insn.addr !11760
  store i32 %235, i32* %stack_var_-1212.4.reg2mem, !insn.addr !11761
  br i1 %236, label %dec_label_pc_1a84b, label %dec_label_pc_1a19f, !insn.addr !11761

dec_label_pc_1a19f:                               ; preds = %dec_label_pc_1a16e
  %237 = call i64 @check_ts_section.41(i64 %232), !insn.addr !11762
  %238 = trunc i64 %237 to i32, !insn.addr !11763
  %239 = icmp eq i32 %238, 0, !insn.addr !11763
  store i32 %235, i32* %stack_var_-1212.2.be.reg2mem, !insn.addr !11764
  br i1 %239, label %dec_label_pc_1a81b.backedge, label %dec_label_pc_1a1af, !insn.addr !11764

dec_label_pc_1a1af:                               ; preds = %dec_label_pc_1a19f
  %240 = call i64 @check_ts_section_crc.47(i64 %232), !insn.addr !11765
  %241 = trunc i64 %240 to i32, !insn.addr !11766
  %242 = icmp eq i32 %241, 0, !insn.addr !11766
  br i1 %242, label %dec_label_pc_1a1c5, label %dec_label_pc_1a1bb, !insn.addr !11767

dec_label_pc_1a1bb:                               ; preds = %dec_label_pc_1a1af
  %243 = add i64 %r13.0.reload, 296, !insn.addr !11768
  %244 = inttoptr i64 %243 to i32*, !insn.addr !11768
  %245 = load i32, i32* %244, align 4, !insn.addr !11768
  %246 = icmp eq i32 %245, 0, !insn.addr !11768
  %247 = icmp eq i1 %246, false, !insn.addr !11769
  br i1 %247, label %dec_label_pc_1a1d9, label %dec_label_pc_1a1c5, !insn.addr !11769

dec_label_pc_1a1c5:                               ; preds = %dec_label_pc_1a1bb, %dec_label_pc_1a1af
  %248 = call i64 @reset_ts_section.49(i64 %232), !insn.addr !11770
  store i32 %235, i32* %stack_var_-1212.2.be.reg2mem, !insn.addr !11771
  br label %dec_label_pc_1a81b.backedge, !insn.addr !11771

dec_label_pc_1a1d9:                               ; preds = %dec_label_pc_1a1bb
  %249 = add i64 %r13.0.reload, 168, !insn.addr !11772
  %250 = call i64 @swap_ts_section.54(i64 %249, i64 %232), !insn.addr !11773
  %251 = call i64 @reset_ts_section.49(i64 %232), !insn.addr !11774
  %252 = load i64, i64* %55, align 8, !insn.addr !11775
  %253 = call i64 @proc_ecm.66(i64 %r13.0.reload, i64 %252), !insn.addr !11776
  %254 = trunc i64 %253 to i32
  %255 = icmp slt i32 %254, 0, !insn.addr !11777
  %256 = icmp eq i1 %255, false, !insn.addr !11778
  store i32 %254, i32* %stack_var_-1212.2.be.reg2mem, !insn.addr !11778
  store i32 %254, i32* %stack_var_-1212.4.reg2mem, !insn.addr !11778
  br i1 %256, label %dec_label_pc_1a81b.backedge, label %dec_label_pc_1a84b, !insn.addr !11778

dec_label_pc_1a213:                               ; preds = %dec_label_pc_1a154
  %257 = inttoptr i64 %r13.0.reload to i32*, !insn.addr !11779
  %258 = load i32, i32* %257, align 4, !insn.addr !11779
  %259 = icmp eq i32 %258, %2, !insn.addr !11779
  %260 = icmp eq i1 %259, false, !insn.addr !11780
  br i1 %260, label %dec_label_pc_1a2d9, label %dec_label_pc_1a21d, !insn.addr !11780

dec_label_pc_1a21d:                               ; preds = %dec_label_pc_1a213
  %261 = add i64 %r13.0.reload, 80, !insn.addr !11781
  %262 = sext i16 %stack_var_-1200.1.reload to i64, !insn.addr !11782
  %263 = call i64 @set_ts_section_data.73(i64 %261, i64* nonnull %stack_var_-1192, i64 %262, i32 %stack_var_-1240.0.reload), !insn.addr !11783
  %264 = trunc i64 %263 to i32
  %265 = icmp slt i32 %264, 0, !insn.addr !11784
  store i32 %264, i32* %stack_var_-1212.4.reg2mem, !insn.addr !11785
  br i1 %265, label %dec_label_pc_1a84b, label %dec_label_pc_1a24b, !insn.addr !11785

dec_label_pc_1a24b:                               ; preds = %dec_label_pc_1a21d
  %266 = call i64 @check_ts_section.41(i64 %261), !insn.addr !11786
  %267 = trunc i64 %266 to i32, !insn.addr !11787
  %268 = icmp eq i32 %267, 0, !insn.addr !11787
  store i32 %264, i32* %stack_var_-1212.2.be.reg2mem, !insn.addr !11788
  br i1 %268, label %dec_label_pc_1a81b.backedge, label %dec_label_pc_1a25b, !insn.addr !11788

dec_label_pc_1a25b:                               ; preds = %dec_label_pc_1a24b
  %269 = call i64 @check_ts_section_crc.47(i64 %261), !insn.addr !11789
  %270 = trunc i64 %269 to i32, !insn.addr !11790
  %271 = icmp eq i32 %270, 0, !insn.addr !11790
  br i1 %271, label %dec_label_pc_1a28b, label %dec_label_pc_1a267, !insn.addr !11791

dec_label_pc_1a267:                               ; preds = %dec_label_pc_1a25b
  %272 = add i64 %r13.0.reload, 136, !insn.addr !11792
  %273 = inttoptr i64 %272 to i32*, !insn.addr !11792
  %274 = load i32, i32* %273, align 4, !insn.addr !11792
  %275 = icmp eq i32 %274, 0, !insn.addr !11792
  br i1 %275, label %dec_label_pc_1a28b, label %dec_label_pc_1a271, !insn.addr !11793

dec_label_pc_1a271:                               ; preds = %dec_label_pc_1a267
  %276 = add i64 %r13.0.reload, 8, !insn.addr !11794
  %277 = call i64 @compare_ts_section.67(i64 %276), !insn.addr !11795
  %278 = trunc i64 %277 to i32, !insn.addr !11796
  %279 = icmp eq i32 %278, 0, !insn.addr !11796
  %280 = icmp eq i1 %279, false, !insn.addr !11797
  br i1 %280, label %dec_label_pc_1a29f, label %dec_label_pc_1a28b, !insn.addr !11797

dec_label_pc_1a28b:                               ; preds = %dec_label_pc_1a271, %dec_label_pc_1a267, %dec_label_pc_1a25b
  %281 = call i64 @reset_ts_section.49(i64 %261), !insn.addr !11798
  store i32 %264, i32* %stack_var_-1212.2.be.reg2mem, !insn.addr !11799
  br label %dec_label_pc_1a81b.backedge, !insn.addr !11799

dec_label_pc_1a29f:                               ; preds = %dec_label_pc_1a271
  %282 = mul i64 %276, 72057594037927936
  %283 = sdiv i64 %282, 72057594037927936, !insn.addr !11800
  %284 = call i64 @swap_ts_section.54(i64 %283, i64 %261), !insn.addr !11801
  %285 = call i64 @reset_ts_section.49(i64 %261), !insn.addr !11802
  %286 = trunc i64 %r13.0.reload to i32, !insn.addr !11803
  %287 = call i64 @proc_pmt.61(i32 %286), !insn.addr !11803
  %288 = trunc i64 %287 to i32
  %289 = icmp slt i32 %288, 0, !insn.addr !11804
  store i32 %288, i32* %stack_var_-1212.4.reg2mem, !insn.addr !11805
  br i1 %289, label %dec_label_pc_1a84b, label %dec_label_pc_1a2cc, !insn.addr !11805

dec_label_pc_1a2cc:                               ; preds = %dec_label_pc_1a29f
  %290 = call i64 @setup_pid_map.50(i64 %arg1), !insn.addr !11806
  store i32 %288, i32* %stack_var_-1212.2.be.reg2mem, !insn.addr !11807
  br label %dec_label_pc_1a81b.backedge, !insn.addr !11807

dec_label_pc_1a2d9:                               ; preds = %dec_label_pc_1a213
  %291 = load i32, i32* %71, align 4, !insn.addr !11808
  %292 = icmp eq i32 %291, %2, !insn.addr !11808
  %293 = icmp eq i1 %292, false, !insn.addr !11809
  br i1 %293, label %dec_label_pc_1a46d, label %dec_label_pc_1a2e7, !insn.addr !11809

dec_label_pc_1a2e7:                               ; preds = %dec_label_pc_1a2d9
  %294 = sext i16 %stack_var_-1200.1.reload to i64, !insn.addr !11810
  %295 = call i64 @set_ts_section_data_for_remaining_payload_data.75(i64 %37, i64* nonnull %stack_var_-1192, i64 %294), !insn.addr !11811
  %296 = call i64 @check_ts_section.41(i64 %37), !insn.addr !11812
  %297 = trunc i64 %296 to i32, !insn.addr !11813
  %298 = icmp eq i32 %297, 0, !insn.addr !11813
  br i1 %298, label %dec_label_pc_1a3a3, label %dec_label_pc_1a321, !insn.addr !11814

dec_label_pc_1a321:                               ; preds = %dec_label_pc_1a2e7
  %299 = call i64 @check_ts_section_crc.47(i64 %37), !insn.addr !11815
  %300 = trunc i64 %299 to i32, !insn.addr !11816
  %301 = icmp eq i32 %300, 0, !insn.addr !11816
  br i1 %301, label %dec_label_pc_1a353, label %dec_label_pc_1a331, !insn.addr !11817

dec_label_pc_1a331:                               ; preds = %dec_label_pc_1a321
  %302 = load i32, i32* %73, align 4, !insn.addr !11818
  %303 = icmp eq i32 %302, 0, !insn.addr !11818
  br i1 %303, label %dec_label_pc_1a353, label %dec_label_pc_1a33c, !insn.addr !11819

dec_label_pc_1a33c:                               ; preds = %dec_label_pc_1a331
  %304 = call i64 @compare_ts_section.67(i64 %38), !insn.addr !11820
  %305 = trunc i64 %304 to i32, !insn.addr !11821
  %306 = icmp eq i32 %305, 0, !insn.addr !11821
  %307 = icmp eq i1 %306, false, !insn.addr !11822
  br i1 %307, label %dec_label_pc_1a361, label %dec_label_pc_1a353, !insn.addr !11822

dec_label_pc_1a353:                               ; preds = %dec_label_pc_1a33c, %dec_label_pc_1a331, %dec_label_pc_1a321
  %308 = call i64 @reset_ts_section.49(i64 %37), !insn.addr !11823
  br label %dec_label_pc_1a3a3, !insn.addr !11824

dec_label_pc_1a361:                               ; preds = %dec_label_pc_1a33c
  %309 = call i64 @swap_ts_section.54(i64 %38, i64 %37), !insn.addr !11825
  %310 = call i64 @reset_ts_section.49(i64 %37), !insn.addr !11826
  %311 = load i32, i32* %75, align 4, !insn.addr !11827
  %312 = icmp eq i32 %311, 132, !insn.addr !11827
  %313 = icmp eq i1 %312, false, !insn.addr !11828
  br i1 %313, label %dec_label_pc_1a3a3, label %dec_label_pc_1a38e, !insn.addr !11828

dec_label_pc_1a38e:                               ; preds = %dec_label_pc_1a361
  %314 = trunc i64 %295 to i32
  %315 = call i64 @proc_emm.55(i64 %arg1), !insn.addr !11829
  %316 = icmp slt i32 %314, 0, !insn.addr !11830
  store i32 %314, i32* %stack_var_-1212.4.reg2mem, !insn.addr !11831
  br i1 %316, label %dec_label_pc_1a84b, label %dec_label_pc_1a3a3, !insn.addr !11831

dec_label_pc_1a3a3:                               ; preds = %dec_label_pc_1a38e, %dec_label_pc_1a361, %dec_label_pc_1a353, %dec_label_pc_1a2e7
  %317 = call i64 @set_ts_section_data.73(i64 %37, i64* nonnull %stack_var_-1192, i64 %294, i32 %stack_var_-1240.0.reload), !insn.addr !11832
  %318 = trunc i64 %317 to i32
  %319 = icmp slt i32 %318, 0, !insn.addr !11833
  store i32 %318, i32* %stack_var_-1212.4.reg2mem, !insn.addr !11834
  br i1 %319, label %dec_label_pc_1a84b, label %dec_label_pc_1a3d1, !insn.addr !11834

dec_label_pc_1a3d1:                               ; preds = %dec_label_pc_1a3a3
  %320 = call i64 @check_ts_section.41(i64 %37), !insn.addr !11835
  %321 = trunc i64 %320 to i32, !insn.addr !11836
  %322 = icmp eq i32 %321, 0, !insn.addr !11836
  store i32 %318, i32* %stack_var_-1212.2.be.reg2mem, !insn.addr !11837
  br i1 %322, label %dec_label_pc_1a81b.backedge, label %dec_label_pc_1a3e5, !insn.addr !11837

dec_label_pc_1a3e5:                               ; preds = %dec_label_pc_1a3d1
  %323 = call i64 @check_ts_section_crc.47(i64 %37), !insn.addr !11838
  %324 = trunc i64 %323 to i32, !insn.addr !11839
  %325 = icmp eq i32 %324, 0, !insn.addr !11839
  br i1 %325, label %dec_label_pc_1a417, label %dec_label_pc_1a3f5, !insn.addr !11840

dec_label_pc_1a3f5:                               ; preds = %dec_label_pc_1a3e5
  %326 = load i32, i32* %73, align 4, !insn.addr !11841
  %327 = icmp eq i32 %326, 0, !insn.addr !11841
  br i1 %327, label %dec_label_pc_1a417, label %dec_label_pc_1a400, !insn.addr !11842

dec_label_pc_1a400:                               ; preds = %dec_label_pc_1a3f5
  %328 = call i64 @compare_ts_section.67(i64 %38), !insn.addr !11843
  %329 = trunc i64 %328 to i32, !insn.addr !11844
  %330 = icmp eq i32 %329, 0, !insn.addr !11844
  %331 = icmp eq i1 %330, false, !insn.addr !11845
  br i1 %331, label %dec_label_pc_1a42f, label %dec_label_pc_1a417, !insn.addr !11845

dec_label_pc_1a417:                               ; preds = %dec_label_pc_1a400, %dec_label_pc_1a3f5, %dec_label_pc_1a3e5
  %332 = call i64 @reset_ts_section.49(i64 %37), !insn.addr !11846
  store i32 %318, i32* %stack_var_-1212.2.be.reg2mem, !insn.addr !11847
  br label %dec_label_pc_1a81b.backedge, !insn.addr !11847

dec_label_pc_1a42f:                               ; preds = %dec_label_pc_1a400
  %333 = call i64 @swap_ts_section.54(i64 %38, i64 %37), !insn.addr !11848
  %334 = call i64 @reset_ts_section.49(i64 %37), !insn.addr !11849
  %335 = load i32, i32* %75, align 4, !insn.addr !11850
  %336 = icmp eq i32 %335, 132, !insn.addr !11850
  %337 = icmp eq i1 %336, false, !insn.addr !11851
  store i32 %318, i32* %stack_var_-1212.2.be.reg2mem, !insn.addr !11851
  br i1 %337, label %dec_label_pc_1a81b.backedge, label %dec_label_pc_1a460, !insn.addr !11851

dec_label_pc_1a460:                               ; preds = %dec_label_pc_1a42f
  %338 = call i64 @proc_emm.55(i64 %arg1), !insn.addr !11852
  store i32 %318, i32* %stack_var_-1212.2.be.reg2mem, !insn.addr !11853
  br label %dec_label_pc_1a81b.backedge, !insn.addr !11853

dec_label_pc_1a46d:                               ; preds = %dec_label_pc_1a2d9
  br i1 %77, label %dec_label_pc_1a53c, label %dec_label_pc_1a476, !insn.addr !11854

dec_label_pc_1a476:                               ; preds = %dec_label_pc_1a46d
  %339 = sext i16 %stack_var_-1200.1.reload to i64, !insn.addr !11855
  %340 = call i64 @set_ts_section_data.73(i64 %39, i64* nonnull %stack_var_-1192, i64 %339, i32 %stack_var_-1240.0.reload), !insn.addr !11856
  %341 = trunc i64 %340 to i32
  %342 = icmp slt i32 %341, 0, !insn.addr !11857
  store i32 %341, i32* %stack_var_-1212.4.reg2mem, !insn.addr !11858
  br i1 %342, label %dec_label_pc_1a84b, label %dec_label_pc_1a4a4, !insn.addr !11858

dec_label_pc_1a4a4:                               ; preds = %dec_label_pc_1a476
  %343 = call i64 @check_ts_section.41(i64 %39), !insn.addr !11859
  %344 = trunc i64 %343 to i32, !insn.addr !11860
  %345 = icmp eq i32 %344, 0, !insn.addr !11860
  store i32 %341, i32* %stack_var_-1212.2.be.reg2mem, !insn.addr !11861
  br i1 %345, label %dec_label_pc_1a81b.backedge, label %dec_label_pc_1a4b8, !insn.addr !11861

dec_label_pc_1a4b8:                               ; preds = %dec_label_pc_1a4a4
  %346 = call i64 @check_ts_section_crc.47(i64 %39), !insn.addr !11862
  %347 = trunc i64 %346 to i32, !insn.addr !11863
  %348 = icmp eq i32 %347, 0, !insn.addr !11863
  br i1 %348, label %dec_label_pc_1a4ea, label %dec_label_pc_1a4c8, !insn.addr !11864

dec_label_pc_1a4c8:                               ; preds = %dec_label_pc_1a4b8
  %349 = load i32, i32* %79, align 4, !insn.addr !11865
  %350 = icmp eq i32 %349, 0, !insn.addr !11865
  br i1 %350, label %dec_label_pc_1a4ea, label %dec_label_pc_1a4d3, !insn.addr !11866

dec_label_pc_1a4d3:                               ; preds = %dec_label_pc_1a4c8
  %351 = call i64 @compare_ts_section.67(i64 %40), !insn.addr !11867
  %352 = trunc i64 %351 to i32, !insn.addr !11868
  %353 = icmp eq i32 %352, 0, !insn.addr !11868
  %354 = icmp eq i1 %353, false, !insn.addr !11869
  br i1 %354, label %dec_label_pc_1a502, label %dec_label_pc_1a4ea, !insn.addr !11869

dec_label_pc_1a4ea:                               ; preds = %dec_label_pc_1a4d3, %dec_label_pc_1a4c8, %dec_label_pc_1a4b8
  %355 = call i64 @reset_ts_section.49(i64 %39), !insn.addr !11870
  store i32 %341, i32* %stack_var_-1212.2.be.reg2mem, !insn.addr !11871
  br label %dec_label_pc_1a81b.backedge, !insn.addr !11871

dec_label_pc_1a502:                               ; preds = %dec_label_pc_1a4d3
  %356 = call i64 @swap_ts_section.54(i64 %40, i64 %39), !insn.addr !11872
  %357 = call i64 @reset_ts_section.49(i64 %39), !insn.addr !11873
  %358 = call i64 @proc_cat.39(i64 %arg1), !insn.addr !11874
  %359 = trunc i64 %358 to i32
  %360 = icmp slt i32 %359, 0, !insn.addr !11875
  %361 = icmp eq i1 %360, false, !insn.addr !11876
  store i32 %359, i32* %stack_var_-1212.2.be.reg2mem, !insn.addr !11876
  store i32 %359, i32* %stack_var_-1212.4.reg2mem, !insn.addr !11876
  br i1 %361, label %dec_label_pc_1a81b.backedge, label %dec_label_pc_1a84b, !insn.addr !11876

dec_label_pc_1a53c:                               ; preds = %dec_label_pc_1a46d
  br i1 %81, label %dec_label_pc_1a6b0, label %dec_label_pc_1a545, !insn.addr !11877

dec_label_pc_1a545:                               ; preds = %dec_label_pc_1a53c
  %362 = sext i16 %stack_var_-1200.1.reload to i64, !insn.addr !11878
  %363 = call i64 @set_ts_section_data_for_remaining_payload_data.75(i64 %41, i64* nonnull %stack_var_-1192, i64 %362), !insn.addr !11879
  %364 = call i64 @check_ts_section.41(i64 %41), !insn.addr !11880
  %365 = trunc i64 %364 to i32, !insn.addr !11881
  %366 = icmp eq i32 %365, 0, !insn.addr !11881
  br i1 %366, label %dec_label_pc_1a5ea, label %dec_label_pc_1a575, !insn.addr !11882

dec_label_pc_1a575:                               ; preds = %dec_label_pc_1a545
  %367 = call i64 @check_ts_section_crc.47(i64 %41), !insn.addr !11883
  %368 = trunc i64 %367 to i32, !insn.addr !11884
  %369 = icmp eq i32 %368, 0, !insn.addr !11884
  br i1 %369, label %dec_label_pc_1a5a7, label %dec_label_pc_1a585, !insn.addr !11885

dec_label_pc_1a585:                               ; preds = %dec_label_pc_1a575
  %370 = load i32, i32* %83, align 4, !insn.addr !11886
  %371 = icmp eq i32 %370, 0, !insn.addr !11886
  br i1 %371, label %dec_label_pc_1a5a7, label %dec_label_pc_1a590, !insn.addr !11887

dec_label_pc_1a590:                               ; preds = %dec_label_pc_1a585
  %372 = call i64 @compare_ts_section.67(i64 %42), !insn.addr !11888
  %373 = trunc i64 %372 to i32, !insn.addr !11889
  %374 = icmp eq i32 %373, 0, !insn.addr !11889
  %375 = icmp eq i1 %374, false, !insn.addr !11890
  br i1 %375, label %dec_label_pc_1a5b5, label %dec_label_pc_1a5a7, !insn.addr !11890

dec_label_pc_1a5a7:                               ; preds = %dec_label_pc_1a590, %dec_label_pc_1a585, %dec_label_pc_1a575
  %376 = call i64 @reset_ts_section.49(i64 %41), !insn.addr !11891
  br label %dec_label_pc_1a5ea, !insn.addr !11892

dec_label_pc_1a5b5:                               ; preds = %dec_label_pc_1a590
  %377 = call i64 @swap_ts_section.54(i64 %42, i64 %41), !insn.addr !11893
  %378 = call i64 @reset_ts_section.49(i64 %41), !insn.addr !11894
  %379 = call i64 @proc_sdt.56(i64 %arg1, i64 %41, i64 %362), !insn.addr !11895
  %380 = trunc i64 %379 to i32
  %381 = icmp slt i32 %380, 0, !insn.addr !11896
  store i32 %380, i32* %stack_var_-1212.4.reg2mem, !insn.addr !11897
  br i1 %381, label %dec_label_pc_1a84b, label %dec_label_pc_1a5ea, !insn.addr !11897

dec_label_pc_1a5ea:                               ; preds = %dec_label_pc_1a5b5, %dec_label_pc_1a5a7, %dec_label_pc_1a545
  %382 = call i64 @set_ts_section_data.73(i64 %41, i64* nonnull %stack_var_-1192, i64 %362, i32 %stack_var_-1240.0.reload), !insn.addr !11898
  %383 = trunc i64 %382 to i32
  %384 = icmp slt i32 %383, 0, !insn.addr !11899
  store i32 %383, i32* %stack_var_-1212.4.reg2mem, !insn.addr !11900
  br i1 %384, label %dec_label_pc_1a84b, label %dec_label_pc_1a618, !insn.addr !11900

dec_label_pc_1a618:                               ; preds = %dec_label_pc_1a5ea
  %385 = call i64 @check_ts_section.41(i64 %41), !insn.addr !11901
  %386 = trunc i64 %385 to i32, !insn.addr !11902
  %387 = icmp eq i32 %386, 0, !insn.addr !11902
  store i32 %383, i32* %stack_var_-1212.2.be.reg2mem, !insn.addr !11903
  br i1 %387, label %dec_label_pc_1a81b.backedge, label %dec_label_pc_1a62c, !insn.addr !11903

dec_label_pc_1a62c:                               ; preds = %dec_label_pc_1a618
  %388 = call i64 @check_ts_section_crc.47(i64 %41), !insn.addr !11904
  %389 = trunc i64 %388 to i32, !insn.addr !11905
  %390 = icmp eq i32 %389, 0, !insn.addr !11905
  br i1 %390, label %dec_label_pc_1a65e, label %dec_label_pc_1a63c, !insn.addr !11906

dec_label_pc_1a63c:                               ; preds = %dec_label_pc_1a62c
  %391 = load i32, i32* %83, align 4, !insn.addr !11907
  %392 = icmp eq i32 %391, 0, !insn.addr !11907
  br i1 %392, label %dec_label_pc_1a65e, label %dec_label_pc_1a647, !insn.addr !11908

dec_label_pc_1a647:                               ; preds = %dec_label_pc_1a63c
  %393 = call i64 @compare_ts_section.67(i64 %42), !insn.addr !11909
  %394 = trunc i64 %393 to i32, !insn.addr !11910
  %395 = icmp eq i32 %394, 0, !insn.addr !11910
  %396 = icmp eq i1 %395, false, !insn.addr !11911
  br i1 %396, label %dec_label_pc_1a676, label %dec_label_pc_1a65e, !insn.addr !11911

dec_label_pc_1a65e:                               ; preds = %dec_label_pc_1a647, %dec_label_pc_1a63c, %dec_label_pc_1a62c
  %397 = call i64 @reset_ts_section.49(i64 %41), !insn.addr !11912
  store i32 %383, i32* %stack_var_-1212.2.be.reg2mem, !insn.addr !11913
  br label %dec_label_pc_1a81b.backedge, !insn.addr !11913

dec_label_pc_1a676:                               ; preds = %dec_label_pc_1a647
  %398 = call i64 @swap_ts_section.54(i64 %42, i64 %41), !insn.addr !11914
  %399 = call i64 @reset_ts_section.49(i64 %41), !insn.addr !11915
  %400 = call i64 @proc_sdt.56(i64 %arg1, i64 %41, i64 %362), !insn.addr !11916
  %401 = trunc i64 %400 to i32
  %402 = icmp slt i32 %401, 0, !insn.addr !11917
  %403 = icmp eq i1 %402, false, !insn.addr !11918
  store i32 %401, i32* %stack_var_-1212.2.be.reg2mem, !insn.addr !11918
  store i32 %401, i32* %stack_var_-1212.4.reg2mem, !insn.addr !11918
  br i1 %403, label %dec_label_pc_1a81b.backedge, label %dec_label_pc_1a84b, !insn.addr !11918

dec_label_pc_1a6b0:                               ; preds = %dec_label_pc_1a53c
  %stack_var_-1212.0.reload = load i32, i32* %stack_var_-1212.0.reg2mem
  store i32 %stack_var_-1212.0.reload, i32* %stack_var_-1212.2.be.reg2mem, !insn.addr !11919
  br i1 %85, label %dec_label_pc_1a81b.backedge, label %dec_label_pc_1a6b9, !insn.addr !11919

dec_label_pc_1a6b9:                               ; preds = %dec_label_pc_1a6b0
  %404 = sext i16 %stack_var_-1200.1.reload to i64, !insn.addr !11920
  %405 = call i64 @set_ts_section_data_for_remaining_payload_data.75(i64 %43, i64* nonnull %stack_var_-1192, i64 %404), !insn.addr !11921
  %406 = call i64 @check_ts_section.41(i64 %43), !insn.addr !11922
  %407 = trunc i64 %406 to i32, !insn.addr !11923
  %408 = icmp eq i32 %407, 0, !insn.addr !11923
  br i1 %408, label %dec_label_pc_1a75e, label %dec_label_pc_1a6e9, !insn.addr !11924

dec_label_pc_1a6e9:                               ; preds = %dec_label_pc_1a6b9
  %409 = call i64 @check_ts_section_crc.47(i64 %43), !insn.addr !11925
  %410 = trunc i64 %409 to i32, !insn.addr !11926
  %411 = icmp eq i32 %410, 0, !insn.addr !11926
  br i1 %411, label %dec_label_pc_1a71b, label %dec_label_pc_1a6f9, !insn.addr !11927

dec_label_pc_1a6f9:                               ; preds = %dec_label_pc_1a6e9
  %412 = load i32, i32* %87, align 4, !insn.addr !11928
  %413 = icmp eq i32 %412, 0, !insn.addr !11928
  br i1 %413, label %dec_label_pc_1a71b, label %dec_label_pc_1a704, !insn.addr !11929

dec_label_pc_1a704:                               ; preds = %dec_label_pc_1a6f9
  %414 = call i64 @compare_ts_section.67(i64 %44), !insn.addr !11930
  %415 = trunc i64 %414 to i32, !insn.addr !11931
  %416 = icmp eq i32 %415, 0, !insn.addr !11931
  %417 = icmp eq i1 %416, false, !insn.addr !11932
  br i1 %417, label %dec_label_pc_1a729, label %dec_label_pc_1a71b, !insn.addr !11932

dec_label_pc_1a71b:                               ; preds = %dec_label_pc_1a704, %dec_label_pc_1a6f9, %dec_label_pc_1a6e9
  %418 = call i64 @reset_ts_section.49(i64 %43), !insn.addr !11933
  br label %dec_label_pc_1a75e, !insn.addr !11934

dec_label_pc_1a729:                               ; preds = %dec_label_pc_1a704
  %419 = call i64 @swap_ts_section.54(i64 %44, i64 %43), !insn.addr !11935
  %420 = call i64 @reset_ts_section.49(i64 %43), !insn.addr !11936
  %421 = call i64 @proc_eit.57(i64 %arg1, i64 %43, i64 %404), !insn.addr !11937
  %422 = trunc i64 %421 to i32
  %423 = icmp slt i32 %422, 0, !insn.addr !11938
  store i32 %422, i32* %stack_var_-1212.4.reg2mem, !insn.addr !11939
  br i1 %423, label %dec_label_pc_1a84b, label %dec_label_pc_1a75e, !insn.addr !11939

dec_label_pc_1a75e:                               ; preds = %dec_label_pc_1a729, %dec_label_pc_1a71b, %dec_label_pc_1a6b9
  %424 = call i64 @set_ts_section_data.73(i64 %43, i64* nonnull %stack_var_-1192, i64 %404, i32 %stack_var_-1240.0.reload), !insn.addr !11940
  %425 = trunc i64 %424 to i32
  %426 = icmp slt i32 %425, 0, !insn.addr !11941
  store i32 %425, i32* %stack_var_-1212.4.reg2mem, !insn.addr !11942
  br i1 %426, label %dec_label_pc_1a84b, label %dec_label_pc_1a78c, !insn.addr !11942

dec_label_pc_1a78c:                               ; preds = %dec_label_pc_1a75e
  %427 = call i64 @check_ts_section.41(i64 %43), !insn.addr !11943
  %428 = trunc i64 %427 to i32, !insn.addr !11944
  %429 = icmp eq i32 %428, 0, !insn.addr !11944
  store i32 %425, i32* %stack_var_-1212.2.be.reg2mem, !insn.addr !11945
  br i1 %429, label %dec_label_pc_1a81b.backedge, label %dec_label_pc_1a79c, !insn.addr !11945

dec_label_pc_1a79c:                               ; preds = %dec_label_pc_1a78c
  %430 = call i64 @check_ts_section_crc.47(i64 %43), !insn.addr !11946
  %431 = trunc i64 %430 to i32, !insn.addr !11947
  %432 = icmp eq i32 %431, 0, !insn.addr !11947
  br i1 %432, label %dec_label_pc_1a7ce, label %dec_label_pc_1a7ac, !insn.addr !11948

dec_label_pc_1a7ac:                               ; preds = %dec_label_pc_1a79c
  %433 = load i32, i32* %87, align 4, !insn.addr !11949
  %434 = icmp eq i32 %433, 0, !insn.addr !11949
  br i1 %434, label %dec_label_pc_1a7ce, label %dec_label_pc_1a7b7, !insn.addr !11950

dec_label_pc_1a7b7:                               ; preds = %dec_label_pc_1a7ac
  %435 = call i64 @compare_ts_section.67(i64 %44), !insn.addr !11951
  %436 = trunc i64 %435 to i32, !insn.addr !11952
  %437 = icmp eq i32 %436, 0, !insn.addr !11952
  %438 = icmp eq i1 %437, false, !insn.addr !11953
  br i1 %438, label %dec_label_pc_1a7e3, label %dec_label_pc_1a7ce, !insn.addr !11953

dec_label_pc_1a7ce:                               ; preds = %dec_label_pc_1a7b7, %dec_label_pc_1a7ac, %dec_label_pc_1a79c
  %439 = call i64 @reset_ts_section.49(i64 %43), !insn.addr !11954
  store i32 %425, i32* %stack_var_-1212.2.be.reg2mem, !insn.addr !11955
  br label %dec_label_pc_1a81b.backedge, !insn.addr !11955

dec_label_pc_1a7e3:                               ; preds = %dec_label_pc_1a7b7
  %440 = call i64 @swap_ts_section.54(i64 %44, i64 %43), !insn.addr !11956
  %441 = call i64 @reset_ts_section.49(i64 %43), !insn.addr !11957
  %442 = call i64 @proc_eit.57(i64 %arg1, i64 %43, i64 %404), !insn.addr !11958
  %443 = trunc i64 %442 to i32
  %444 = icmp slt i32 %443, 0, !insn.addr !11959
  store i32 %443, i32* %stack_var_-1212.2.be.reg2mem, !insn.addr !11960
  store i32 %443, i32* %stack_var_-1212.4.reg2mem, !insn.addr !11960
  br i1 %444, label %dec_label_pc_1a84b, label %dec_label_pc_1a81b.backedge, !insn.addr !11960

dec_label_pc_1a84b:                               ; preds = %dec_label_pc_1a096, %dec_label_pc_1a16e, %dec_label_pc_1a21d, %dec_label_pc_1a29f, %dec_label_pc_1a38e, %dec_label_pc_1a3a3, %dec_label_pc_1a476, %dec_label_pc_1a5b5, %dec_label_pc_1a5ea, %dec_label_pc_1a729, %dec_label_pc_1a75e, %dec_label_pc_1a7e3, %dec_label_pc_1a81b.backedge, %dec_label_pc_19de6, %dec_label_pc_1a1d9, %dec_label_pc_1a502, %dec_label_pc_1a676, %dec_label_pc_1a067, %dec_label_pc_1a122, %dec_label_pc_19cf4, %dec_label_pc_19c75
  %stack_var_-1212.4.reload = load i32, i32* %stack_var_-1212.4.reg2mem
  %storemerge8.in.in = add i64 %arg1, 67112
  %storemerge8.in = inttoptr i64 %storemerge8.in.in to i64*
  %storemerge8 = load i64, i64* %storemerge8.in, align 8
  store i64 %storemerge8, i64* %13, align 8
  store i64 %storemerge8, i64* %10, align 8
  %445 = zext i32 %stack_var_-1212.4.reload to i64, !insn.addr !11961
  %446 = call i64 @__readgsqword(i64 40), !insn.addr !11962
  ret i64 %445, !insn.addr !11963

dec_label_pc_1a865:                               ; preds = %dec_label_pc_19ec8, %dec_label_pc_19e9a, %dec_label_pc_19ed4, %dec_label_pc_19ec0, %dec_label_pc_19eaa, %dec_label_pc_19e55.dec_label_pc_1a865_crit_edge
  %.pre-phi90.reload = load i16*, i16** %.pre-phi90.reg2mem
  %447 = load i16, i16* %.pre-phi90.reload, align 2, !insn.addr !11668
  %448 = zext i16 %447 to i64, !insn.addr !11668
  ret i64 %448, !insn.addr !11668
}

define i32 @put_arib_std_b25(i8* %std_b25, i64 %buf) local_unnamed_addr {
dec_label_pc_1a86e:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = call i64 @__decompiler_undefined_function_0()
  %2 = call i64 @__decompiler_undefined_function_0()
  %3 = add i64 %0, 152, !insn.addr !11964
  %4 = inttoptr i64 %3 to i32*, !insn.addr !11964
  %5 = load i32, i32* %4, align 4, !insn.addr !11964
  %6 = trunc i64 %2 to i32, !insn.addr !11964
  %7 = icmp eq i32 %5, %6, !insn.addr !11964
  %8 = zext i1 %7 to i8, !insn.addr !11965
  %9 = add i64 %1, -1200, !insn.addr !11965
  %10 = inttoptr i64 %9 to i8*, !insn.addr !11965
  store i8 %8, i8* %10, align 1, !insn.addr !11965
  ret i32 %6, !insn.addr !11966
}

define i64 @put_arib_std_b25.69(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_1a89e:
  %r14.4.lcssa.reg2mem = alloca i64, !insn.addr !11967
  %r13.4.lcssa.reg2mem = alloca i64, !insn.addr !11967
  %r13.4.be.reg2mem = alloca i64, !insn.addr !11967
  %rdx.3.reg2mem = alloca i64, !insn.addr !11967
  %r14.3.reg2mem = alloca i64, !insn.addr !11967
  %r13.413.reg2mem = alloca i64, !insn.addr !11967
  %r14.415.reg2mem = alloca i64, !insn.addr !11967
  %r15.2.reg2mem = alloca i64, !insn.addr !11967
  %rcx.7.reg2mem = alloca i64, !insn.addr !11967
  %r15.1.reg2mem = alloca i64, !insn.addr !11967
  %rcx.6.reg2mem = alloca i64, !insn.addr !11967
  %rcx.5.reg2mem = alloca i64, !insn.addr !11967
  %rdi.2.reg2mem = alloca i64, !insn.addr !11967
  %rsi.2.reg2mem = alloca i64, !insn.addr !11967
  %rax.2.reg2mem = alloca i64, !insn.addr !11967
  %rdi.1.reg2mem = alloca i64, !insn.addr !11967
  %rsi.1.reg2mem = alloca i64, !insn.addr !11967
  %rax.1.reg2mem = alloca i64, !insn.addr !11967
  %.pre-phi53.reg2mem = alloca i8, !insn.addr !11967
  %rdi.0.reg2mem = alloca i64, !insn.addr !11967
  %rsi.0.reg2mem = alloca i64, !insn.addr !11967
  %rax.0.reg2mem = alloca i64, !insn.addr !11967
  %.pre-phi.reg2mem = alloca i8, !insn.addr !11967
  %r15.0.reg2mem = alloca i64, !insn.addr !11967
  %r12.4.reg2mem = alloca i64, !insn.addr !11967
  %rcx.4.reg2mem = alloca i64, !insn.addr !11967
  %rcx.3.reg2mem = alloca i64, !insn.addr !11967
  %r12.3.reg2mem = alloca i64, !insn.addr !11967
  %r14.2.reg2mem = alloca i64, !insn.addr !11967
  %r12.2.reg2mem = alloca i64, !insn.addr !11967
  %rcx.2.reg2mem = alloca i64, !insn.addr !11967
  %.pre-phi55.reg2mem = alloca i64, !insn.addr !11967
  %r14.2.ph.reg2mem = alloca i64, !insn.addr !11967
  %r12.2.ph.reg2mem = alloca i64, !insn.addr !11967
  %rcx.2.ph.reg2mem = alloca i64, !insn.addr !11967
  %r12.1.be.reg2mem = alloca i64, !insn.addr !11967
  %rcx.1.be.reg2mem = alloca i64, !insn.addr !11967
  %rdx.0.reg2mem = alloca i64, !insn.addr !11967
  %r14.0.reg2mem = alloca i64, !insn.addr !11967
  %rcx.119.reg2mem = alloca i64, !insn.addr !11967
  %r12.121.reg2mem = alloca i64, !insn.addr !11967
  %r14.123.reg2mem = alloca i64, !insn.addr !11967
  %.reg2mem = alloca i32, !insn.addr !11967
  %merge.reg2mem = alloca i64, !insn.addr !11967
  %0 = call i1 @__decompiler_undefined_function_2()
  %1 = call i8 @__decompiler_undefined_function_1()
  %2 = call i32 @__decompiler_undefined_function_3()
  %stack_var_-88 = alloca i64, align 8
  %3 = call i64 @mcount(), !insn.addr !11968
  %4 = call i64 @private_data.26(i64 %arg1), !insn.addr !11969
  %5 = icmp ne i64 %4, 0, !insn.addr !11970
  %6 = icmp eq i64 %arg2, 0, !insn.addr !11971
  %7 = icmp eq i1 %6, false, !insn.addr !11972
  %or.cond = icmp eq i1 %7, %5
  store i64 %4, i64* %merge.reg2mem, !insn.addr !11973
  br i1 %or.cond, label %dec_label_pc_1a8e2, label %dec_label_pc_1a8d7, !insn.addr !11973

dec_label_pc_1a8d7:                               ; preds = %dec_label_pc_1a8e2, %dec_label_pc_1ae6e, %dec_label_pc_1a89e
  %merge.reload = load i64, i64* %merge.reg2mem
  ret i64 %merge.reload, !insn.addr !11974

dec_label_pc_1a8e2:                               ; preds = %dec_label_pc_1a89e
  %8 = add i64 %arg2, ptrtoint (i8* @global_var_8 to i64), !insn.addr !11975
  %9 = inttoptr i64 %8 to i32*, !insn.addr !11975
  %10 = load i32, i32* %9, align 4, !insn.addr !11975
  %11 = add i64 %4, 67112, !insn.addr !11976
  %12 = call i64 @append_work_buffer.72(i64 %11, i64 %arg2, i32 %10), !insn.addr !11977
  %13 = trunc i64 %12 to i32, !insn.addr !11978
  %14 = icmp eq i32 %13, 0, !insn.addr !11978
  store i64 %12, i64* %merge.reg2mem, !insn.addr !11979
  br i1 %14, label %dec_label_pc_1a8d7, label %dec_label_pc_1a8ff, !insn.addr !11979

dec_label_pc_1a8ff:                               ; preds = %dec_label_pc_1a8e2
  %15 = add i64 %4, ptrtoint (i16* @global_var_4 to i64), !insn.addr !11980
  %16 = inttoptr i64 %15 to i32*, !insn.addr !11980
  %17 = load i32, i32* %16, align 4, !insn.addr !11980
  %18 = icmp sgt i32 %17, 187, !insn.addr !11981
  store i32 %17, i32* %.reg2mem, !insn.addr !11981
  br i1 %18, label %dec_label_pc_1a928, label %dec_label_pc_1a908, !insn.addr !11981

dec_label_pc_1a908:                               ; preds = %dec_label_pc_1a8ff
  %19 = call i64 @select_unit_size.48(i64 %4), !insn.addr !11982
  %20 = trunc i64 %19 to i32, !insn.addr !11983
  %21 = icmp slt i32 %20, 0, !insn.addr !11983
  br i1 %21, label %dec_label_pc_1ae6e, label %dec_label_pc_1a91b, !insn.addr !11984

dec_label_pc_1a91b:                               ; preds = %dec_label_pc_1a908
  %22 = load i32, i32* %16, align 4, !insn.addr !11985
  %23 = icmp slt i32 %22, 188, !insn.addr !11986
  store i32 %22, i32* %.reg2mem, !insn.addr !11986
  br i1 %23, label %dec_label_pc_1ae6e, label %dec_label_pc_1a928, !insn.addr !11986

dec_label_pc_1a928:                               ; preds = %dec_label_pc_1a91b, %dec_label_pc_1a8ff
  %24 = add i64 %4, 1016, !insn.addr !11987
  %25 = inttoptr i64 %24 to i32*, !insn.addr !11987
  %26 = load i32, i32* %25, align 4, !insn.addr !11987
  %27 = icmp eq i32 %26, 0, !insn.addr !11987
  %28 = icmp slt i32 %26, 0, !insn.addr !11987
  %29 = icmp eq i1 %28, false, !insn.addr !11988
  %30 = icmp eq i1 %27, false, !insn.addr !11988
  %31 = icmp eq i1 %29, %30, !insn.addr !11988
  br i1 %31, label %dec_label_pc_1aa82, label %dec_label_pc_1a935, !insn.addr !11988

dec_label_pc_1a935:                               ; preds = %dec_label_pc_1a928
  %.reload = load i32, i32* %.reg2mem, !insn.addr !11989
  %32 = add i64 %4, ptrtoint (i8* @global_var_8 to i64), !insn.addr !11990
  %33 = inttoptr i64 %32 to i32*, !insn.addr !11990
  %34 = load i32, i32* %33, align 4, !insn.addr !11990
  %35 = sext i32 %34 to i64, !insn.addr !11990
  %36 = add i64 %4, 67120, !insn.addr !11991
  %37 = inttoptr i64 %36 to i64*, !insn.addr !11991
  %38 = load i64, i64* %37, align 8, !insn.addr !11991
  %39 = add i64 %38, %35, !insn.addr !11991
  %40 = add i64 %4, 67128, !insn.addr !11992
  %41 = inttoptr i64 %40 to i64*, !insn.addr !11992
  %42 = load i64, i64* %41, align 8, !insn.addr !11992
  %43 = sext i32 %.reload to i64, !insn.addr !11993
  %44 = add i64 %39, %43, !insn.addr !11994
  %45 = icmp ult i64 %42, %44, !insn.addr !11995
  %46 = icmp eq i1 %45, false, !insn.addr !11996
  store i64 0, i64* %r12.2.ph.reg2mem, !insn.addr !11996
  store i64 %39, i64* %r14.2.ph.reg2mem, !insn.addr !11996
  br i1 %46, label %dec_label_pc_1a968.lr.ph, label %dec_label_pc_1aa2e.loopexit, !insn.addr !11996

dec_label_pc_1a968.lr.ph:                         ; preds = %dec_label_pc_1a935
  %47 = icmp eq i32 %2, 0
  %48 = icmp eq i1 %47, false
  %49 = and i8 %1, ptrtoint (i32* @global_var_2 to i8)
  %50 = icmp eq i8 %49, 0
  %51 = mul i64 %4, 281474976710656
  %sext7 = add i64 %51, 27021597764222976
  %52 = sdiv i64 %sext7, 281474976710656
  %53 = add i64 %4, 152
  %54 = inttoptr i64 %53 to i32*
  store i64 %39, i64* %r14.123.reg2mem
  store i64 0, i64* %r12.121.reg2mem
  br label %dec_label_pc_1a968

dec_label_pc_1a968:                               ; preds = %dec_label_pc_1a968.lr.ph, %dec_label_pc_1aa1c.backedge
  %rcx.119.reload = load i64, i64* %rcx.119.reg2mem
  %r12.121.reload = load i64, i64* %r12.121.reg2mem
  %r14.123.reload = load i64, i64* %r14.123.reg2mem
  %55 = inttoptr i64 %r14.123.reload to i8*, !insn.addr !11997
  %56 = load i8, i8* %55, align 1, !insn.addr !11997
  %57 = icmp eq i8 %56, 71, !insn.addr !11997
  store i64 %r14.123.reload, i64* %r14.0.reg2mem, !insn.addr !11998
  br i1 %57, label %dec_label_pc_1a989, label %dec_label_pc_1a96e, !insn.addr !11998

dec_label_pc_1a96e:                               ; preds = %dec_label_pc_1a968
  %58 = call i64 @resync.46(i64 %r14.123.reload, i64 %42, i32 %.reload), !insn.addr !11999
  %59 = icmp eq i64 %58, 0, !insn.addr !12000
  store i64 %58, i64* %r14.0.reg2mem, !insn.addr !12001
  store i64 %rcx.119.reload, i64* %rcx.2.ph.reg2mem, !insn.addr !12001
  store i64 %r12.121.reload, i64* %r12.2.ph.reg2mem, !insn.addr !12001
  store i64 %r14.123.reload, i64* %r14.2.ph.reg2mem, !insn.addr !12001
  br i1 %59, label %dec_label_pc_1aa2e.loopexit, label %dec_label_pc_1a989, !insn.addr !12001

dec_label_pc_1a989:                               ; preds = %dec_label_pc_1a96e, %dec_label_pc_1a968
  %r14.0.reload = load i64, i64* %r14.0.reg2mem
  %60 = call i64 @extract_ts_header.44(i64* nonnull %stack_var_-88, i64 %r14.0.reload), !insn.addr !12002
  store i64 %rcx.119.reload, i64* %rcx.1.be.reg2mem, !insn.addr !12003
  store i64 %r12.121.reload, i64* %r12.1.be.reg2mem, !insn.addr !12003
  br i1 %48, label %dec_label_pc_1aa1c.backedge, label %dec_label_pc_1a99b, !insn.addr !12003

dec_label_pc_1a99b:                               ; preds = %dec_label_pc_1a989
  %61 = add i64 %r14.0.reload, ptrtoint (i16* @global_var_4 to i64), !insn.addr !12004
  store i64 %61, i64* %rdx.0.reg2mem, !insn.addr !12005
  br i1 %50, label %dec_label_pc_1a9ad, label %dec_label_pc_1a9a5, !insn.addr !12005

dec_label_pc_1a9a5:                               ; preds = %dec_label_pc_1a99b
  %62 = inttoptr i64 %61 to i8*, !insn.addr !12006
  %63 = load i8, i8* %62, align 1, !insn.addr !12006
  %64 = zext i8 %63 to i64, !insn.addr !12006
  %65 = mul i64 %64, ptrtoint (i32* @global_var_1 to i64), !insn.addr !12007
  %66 = add i64 %r14.0.reload, add (i64 ptrtoint (i16* @global_var_4 to i64), i64 ptrtoint (i32* @global_var_1 to i64)), !insn.addr !12007
  %67 = add i64 %66, %65, !insn.addr !12007
  store i64 %67, i64* %rdx.0.reg2mem, !insn.addr !12007
  br label %dec_label_pc_1a9ad, !insn.addr !12007

dec_label_pc_1a9ad:                               ; preds = %dec_label_pc_1a9a5, %dec_label_pc_1a99b
  %rdx.0.reload = load i64, i64* %rdx.0.reg2mem
  %68 = sub i64 %r14.0.reload, %rdx.0.reload, !insn.addr !12008
  %69 = add i64 %68, 188, !insn.addr !12009
  %70 = and i64 %69, 4294967295, !insn.addr !12009
  %71 = trunc i64 %69 to i32, !insn.addr !12010
  %72 = call i64 @set_ts_section_data.73(i64 %52, i64* nonnull %stack_var_-88, i64 %rdx.0.reload, i32 %71), !insn.addr !12010
  %73 = and i64 %72, 4294967295, !insn.addr !12011
  %74 = trunc i64 %72 to i32, !insn.addr !12012
  %75 = icmp slt i32 %74, 0, !insn.addr !12012
  store i64 %70, i64* %rcx.2.ph.reg2mem, !insn.addr !12013
  store i64 %73, i64* %r12.2.ph.reg2mem, !insn.addr !12013
  store i64 %r14.0.reload, i64* %r14.2.ph.reg2mem, !insn.addr !12013
  br i1 %75, label %dec_label_pc_1aa2e.loopexit, label %dec_label_pc_1a9cc, !insn.addr !12013

dec_label_pc_1a9cc:                               ; preds = %dec_label_pc_1a9ad
  %76 = call i64 @check_ts_section.41(i64 %52), !insn.addr !12014
  %77 = trunc i64 %76 to i32, !insn.addr !12015
  %78 = icmp eq i32 %77, 0, !insn.addr !12015
  store i64 %70, i64* %rcx.1.be.reg2mem, !insn.addr !12016
  store i64 %73, i64* %r12.1.be.reg2mem, !insn.addr !12016
  br i1 %78, label %dec_label_pc_1aa1c.backedge, label %dec_label_pc_1a9d9, !insn.addr !12016

dec_label_pc_1a9d9:                               ; preds = %dec_label_pc_1a9cc
  %79 = call i64 @check_ts_section_crc.47(i64 %52), !insn.addr !12017
  %80 = trunc i64 %79 to i32, !insn.addr !12018
  %81 = icmp eq i32 %80, 0, !insn.addr !12018
  br i1 %81, label %dec_label_pc_1a9ef, label %dec_label_pc_1a9e6, !insn.addr !12019

dec_label_pc_1a9e6:                               ; preds = %dec_label_pc_1a9d9
  %82 = load i32, i32* %54, align 4, !insn.addr !12020
  %83 = icmp eq i32 %82, 0, !insn.addr !12020
  %84 = icmp eq i1 %83, false, !insn.addr !12021
  br i1 %84, label %dec_label_pc_1a9fd, label %dec_label_pc_1a9ef, !insn.addr !12021

dec_label_pc_1a9ef:                               ; preds = %dec_label_pc_1a9e6, %dec_label_pc_1a9d9
  %85 = call i64 @reset_ts_section.49(i64 %52), !insn.addr !12022
  store i64 %70, i64* %rcx.1.be.reg2mem, !insn.addr !12023
  store i64 %73, i64* %r12.1.be.reg2mem, !insn.addr !12023
  br label %dec_label_pc_1aa1c.backedge, !insn.addr !12023

dec_label_pc_1aa1c.backedge:                      ; preds = %dec_label_pc_1a989, %dec_label_pc_1a9cc, %dec_label_pc_1a9ef
  %r12.1.be.reload = load i64, i64* %r12.1.be.reg2mem
  %rcx.1.be.reload = load i64, i64* %rcx.1.be.reg2mem
  %r14.1.be = add i64 %r14.0.reload, %43
  %86 = add i64 %r14.1.be, %43, !insn.addr !11994
  %87 = icmp ult i64 %42, %86, !insn.addr !11995
  %88 = icmp eq i1 %87, false, !insn.addr !11996
  store i64 %r14.1.be, i64* %r14.123.reg2mem, !insn.addr !11996
  store i64 %r12.1.be.reload, i64* %r12.121.reg2mem, !insn.addr !11996
  store i64 %rcx.1.be.reload, i64* %rcx.119.reg2mem, !insn.addr !11996
  store i64 %rcx.1.be.reload, i64* %rcx.2.ph.reg2mem, !insn.addr !11996
  store i64 %r12.1.be.reload, i64* %r12.2.ph.reg2mem, !insn.addr !11996
  store i64 %r14.1.be, i64* %r14.2.ph.reg2mem, !insn.addr !11996
  br i1 %88, label %dec_label_pc_1a968, label %dec_label_pc_1aa2e.loopexit, !insn.addr !11996

dec_label_pc_1a9fd:                               ; preds = %dec_label_pc_1a9e6
  %89 = add i64 %4, ptrtoint (i32** @global_var_18 to i64)
  %90 = call i64 @swap_ts_section.54(i64 %89, i64 %52), !insn.addr !12024
  %91 = call i64 @reset_ts_section.49(i64 %52), !insn.addr !12025
  %92 = add i64 %r14.0.reload, %43, !insn.addr !12026
  store i64 %89, i64* %.pre-phi55.reg2mem, !insn.addr !12027
  store i64 %70, i64* %rcx.2.reg2mem, !insn.addr !12027
  store i64 %73, i64* %r12.2.reg2mem, !insn.addr !12027
  store i64 %92, i64* %r14.2.reg2mem, !insn.addr !12027
  br label %dec_label_pc_1aa2e, !insn.addr !12027

dec_label_pc_1aa2e.loopexit:                      ; preds = %dec_label_pc_1a9ad, %dec_label_pc_1a96e, %dec_label_pc_1aa1c.backedge, %dec_label_pc_1a935
  %r14.2.ph.reload = load i64, i64* %r14.2.ph.reg2mem
  %r12.2.ph.reload = load i64, i64* %r12.2.ph.reg2mem
  %rcx.2.ph.reload = load i64, i64* %rcx.2.ph.reg2mem
  %.pre54 = add i64 %4, ptrtoint (i32** @global_var_18 to i64), !insn.addr !12028
  store i64 %.pre54, i64* %.pre-phi55.reg2mem
  store i64 %rcx.2.ph.reload, i64* %rcx.2.reg2mem
  store i64 %r12.2.ph.reload, i64* %r12.2.reg2mem
  store i64 %r14.2.ph.reload, i64* %r14.2.reg2mem
  br label %dec_label_pc_1aa2e

dec_label_pc_1aa2e:                               ; preds = %dec_label_pc_1aa2e.loopexit, %dec_label_pc_1a9fd
  %r14.2.reload = load i64, i64* %r14.2.reg2mem
  %r12.2.reload = load i64, i64* %r12.2.reg2mem
  %rcx.2.reload = load i64, i64* %rcx.2.reg2mem
  %.pre-phi55.reload = load i64, i64* %.pre-phi55.reg2mem
  %93 = trunc i64 %r14.2.reload to i32, !insn.addr !12029
  %94 = inttoptr i64 %36 to i32*, !insn.addr !12029
  %95 = load i32, i32* %94, align 4, !insn.addr !12029
  %96 = sub i32 %93, %95, !insn.addr !12029
  store i32 %96, i32* %33, align 4, !insn.addr !12030
  %97 = call i64 @check_ts_section.41(i64 %.pre-phi55.reload), !insn.addr !12031
  %98 = trunc i64 %97 to i32, !insn.addr !12032
  %99 = icmp eq i32 %98, 0, !insn.addr !12032
  store i64 %r12.2.reload, i64* %r12.3.reg2mem, !insn.addr !12033
  br i1 %99, label %dec_label_pc_1aa51, label %dec_label_pc_1aa46, !insn.addr !12033

dec_label_pc_1aa46:                               ; preds = %dec_label_pc_1aa2e
  %100 = call i64 @proc_pat.70(i64 %4), !insn.addr !12034
  %101 = and i64 %100, 4294967295, !insn.addr !12035
  store i64 %101, i64* %r12.3.reg2mem, !insn.addr !12035
  br label %dec_label_pc_1aa51, !insn.addr !12035

dec_label_pc_1aa51:                               ; preds = %dec_label_pc_1aa46, %dec_label_pc_1aa2e
  %r12.3.reload = load i64, i64* %r12.3.reg2mem
  %102 = trunc i64 %r12.3.reload to i32, !insn.addr !12036
  %103 = icmp slt i32 %102, 0, !insn.addr !12036
  br i1 %103, label %dec_label_pc_1ae6e, label %dec_label_pc_1aa5a, !insn.addr !12037

dec_label_pc_1aa5a:                               ; preds = %dec_label_pc_1aa51
  %104 = load i32, i32* %25, align 4, !insn.addr !12038
  %105 = icmp eq i32 %104, 0, !insn.addr !12038
  %106 = icmp slt i32 %104, 0, !insn.addr !12038
  %107 = icmp eq i1 %106, false, !insn.addr !12039
  %108 = icmp eq i1 %105, false, !insn.addr !12039
  %109 = icmp eq i1 %107, %108, !insn.addr !12039
  br i1 %109, label %dec_label_pc_1aa7b, label %dec_label_pc_1ae6e, !insn.addr !12039

dec_label_pc_1aa7b:                               ; preds = %dec_label_pc_1aa5a
  store i32 0, i32* %33, align 4, !insn.addr !12040
  store i64 %rcx.2.reload, i64* %rcx.3.reg2mem, !insn.addr !12040
  br label %dec_label_pc_1aa82, !insn.addr !12040

dec_label_pc_1aa82:                               ; preds = %dec_label_pc_1aa7b, %dec_label_pc_1a928
  %110 = call i64 @check_pmt_complete.42(i64 %4), !insn.addr !12041
  %111 = trunc i64 %110 to i32, !insn.addr !12042
  %112 = icmp eq i32 %111, 0, !insn.addr !12042
  %113 = icmp eq i1 %112, false, !insn.addr !12043
  br i1 %113, label %dec_label_pc_1ac7b, label %dec_label_pc_1aa92, !insn.addr !12043

dec_label_pc_1aa92:                               ; preds = %dec_label_pc_1aa82
  %114 = call i64 @find_pmt.74(i64 %4), !insn.addr !12044
  %115 = trunc i64 %114 to i32, !insn.addr !12045
  %116 = icmp slt i32 %115, 0, !insn.addr !12045
  br i1 %116, label %dec_label_pc_1ae6e, label %dec_label_pc_1aaa5, !insn.addr !12046

dec_label_pc_1aaa5:                               ; preds = %dec_label_pc_1aa92
  %117 = call i64 @check_pmt_complete.42(i64 %4), !insn.addr !12047
  %118 = trunc i64 %117 to i32, !insn.addr !12048
  %119 = icmp eq i32 %118, 0, !insn.addr !12048
  %120 = icmp eq i1 %119, false, !insn.addr !12049
  %.pre56 = add i64 %4, ptrtoint (i8* @global_var_8 to i64)
  %.pre58 = inttoptr i64 %.pre56 to i32*
  br i1 %120, label %dec_label_pc_1ac6c, label %dec_label_pc_1aab5, !insn.addr !12049

dec_label_pc_1aab5:                               ; preds = %dec_label_pc_1aaa5
  %121 = load i32, i32* %.pre58, align 4, !insn.addr !12050
  %122 = icmp sgt i32 %121, 33554431, !insn.addr !12051
  br i1 %122, label %dec_label_pc_1ae6e, label %dec_label_pc_1aac9, !insn.addr !12051

dec_label_pc_1aac9:                               ; preds = %dec_label_pc_1aab5
  %rcx.3.reload = load i64, i64* %rcx.3.reg2mem
  %123 = add i64 %4, ptrtoint ([4 x i8]* @global_var_c to i64), !insn.addr !12052
  %124 = inttoptr i64 %123 to i32*, !insn.addr !12052
  %125 = load i32, i32* %124, align 4, !insn.addr !12052
  %126 = add i32 %125, %121, !insn.addr !12052
  store i32 %126, i32* %124, align 4, !insn.addr !12053
  %127 = icmp slt i32 %126, 5242881, !insn.addr !12054
  br i1 %127, label %dec_label_pc_1ae6e, label %dec_label_pc_1aada, !insn.addr !12054

dec_label_pc_1aada:                               ; preds = %dec_label_pc_1aac9
  %128 = load i32, i32* %25, align 4, !insn.addr !12055
  %129 = sext i32 %128 to i64, !insn.addr !12055
  %130 = mul i64 %129, 128, !insn.addr !12056
  %131 = mul nsw i64 %129, 1920, !insn.addr !12057
  %132 = call i64 @__kmalloc(i64 %131, i64* bitcast (i32** @global_var_20 to i64*), i64 %130), !insn.addr !12058
  %133 = load i32, i32* %25, align 4, !insn.addr !12059
  %134 = icmp slt i32 %133, 1, !insn.addr !12060
  %.pre60 = add i64 %4, 1024
  %.pre62 = inttoptr i64 %.pre60 to i64*
  store i64 %rcx.3.reload, i64* %rcx.7.reg2mem, !insn.addr !12060
  store i64 0, i64* %r15.2.reg2mem, !insn.addr !12060
  br i1 %134, label %dec_label_pc_1ac1e, label %dec_label_pc_1ab36.preheader, !insn.addr !12060

dec_label_pc_1ab36.preheader:                     ; preds = %dec_label_pc_1aada
  %135 = select i1 %0, i64 -8, i64 ptrtoint (i8* @global_var_8 to i64)
  store i64 %rcx.3.reload, i64* %rcx.4.reg2mem
  store i64 0, i64* %r12.4.reg2mem
  store i64 0, i64* %r15.0.reg2mem
  br label %dec_label_pc_1ab36

dec_label_pc_1ab36:                               ; preds = %dec_label_pc_1ab36.preheader, %dec_label_pc_1ac07
  %r15.0.reload = load i64, i64* %r15.0.reg2mem
  %r12.4.reload = load i64, i64* %r12.4.reg2mem
  %sext = mul i64 %r12.4.reload, 4294967296
  %136 = sdiv i64 %sext, 4294967296, !insn.addr !12061
  %137 = mul i64 %136, sub (i64 shl (i64 1, i64 ptrtoint (i8** @global_var_b to i64)), i64 shl (i64 1, i64 ptrtoint (i8** @global_var_7 to i64))), !insn.addr !12062
  %138 = load i64, i64* %.pre62, align 8, !insn.addr !12063
  %139 = add i64 %137, %138, !insn.addr !12063
  %140 = add i64 %139, 8, !insn.addr !12064
  %141 = call i64 @check_ts_section.41(i64 %140), !insn.addr !12065
  %142 = trunc i64 %141 to i32, !insn.addr !12066
  %143 = icmp eq i32 %142, 0, !insn.addr !12066
  %144 = icmp eq i1 %143, false, !insn.addr !12067
  br i1 %144, label %dec_label_pc_1ab6b, label %dec_label_pc_1ab5e, !insn.addr !12067

dec_label_pc_1ab5e:                               ; preds = %dec_label_pc_1ab36
  %rcx.4.reload = load i64, i64* %rcx.4.reg2mem
  %145 = call i64 @release_program.60(i64 %139), !insn.addr !12068
  store i64 %rcx.4.reload, i64* %rcx.6.reg2mem, !insn.addr !12069
  store i64 %r15.0.reload, i64* %r15.1.reg2mem, !insn.addr !12069
  br label %dec_label_pc_1ac07, !insn.addr !12069

dec_label_pc_1ab6b:                               ; preds = %dec_label_pc_1ab36
  %sext4 = mul i64 %r15.0.reload, 4294967296
  %146 = sdiv i64 %sext4, 4294967296, !insn.addr !12070
  %147 = mul i64 %146, sub (i64 shl (i64 1, i64 ptrtoint (i8** @global_var_b to i64)), i64 shl (i64 1, i64 ptrtoint (i8** @global_var_7 to i64))), !insn.addr !12071
  %148 = add i64 %147, %132, !insn.addr !12072
  %149 = trunc i64 %148 to i8
  %150 = and i8 %149, ptrtoint (i32* @global_var_1 to i8), !insn.addr !12073
  %151 = icmp eq i8 %150, 0, !insn.addr !12073
  store i8 %149, i8* %.pre-phi.reg2mem, !insn.addr !12074
  store i64 1920, i64* %rax.0.reg2mem, !insn.addr !12074
  store i64 %139, i64* %rsi.0.reg2mem, !insn.addr !12074
  store i64 %148, i64* %rdi.0.reg2mem, !insn.addr !12074
  br i1 %151, label %dec_label_pc_1aba1, label %dec_label_pc_1ab91, !insn.addr !12074

dec_label_pc_1ab91:                               ; preds = %dec_label_pc_1ab6b
  %152 = inttoptr i64 %139 to i8*, !insn.addr !12075
  %153 = load i8, i8* %152, align 1, !insn.addr !12075
  %154 = inttoptr i64 %148 to i8*, !insn.addr !12076
  store i8 %153, i8* %154, align 1, !insn.addr !12076
  %155 = add i64 %148, ptrtoint (i32* @global_var_1 to i64), !insn.addr !12077
  %156 = add i64 %139, 1, !insn.addr !12078
  %.pre = trunc i64 %155 to i8, !insn.addr !12079
  store i8 %.pre, i8* %.pre-phi.reg2mem, !insn.addr !12080
  store i64 zext (i32 sub (i32 trunc (i64 or (i64 and (i64 ptrtoint (i16* @global_var_4 to i64), i64 -65536), i64 1920) to i32), i32 1) to i64), i64* %rax.0.reg2mem, !insn.addr !12080
  store i64 %156, i64* %rsi.0.reg2mem, !insn.addr !12080
  store i64 %155, i64* %rdi.0.reg2mem, !insn.addr !12080
  br label %dec_label_pc_1aba1, !insn.addr !12080

dec_label_pc_1aba1:                               ; preds = %dec_label_pc_1ab91, %dec_label_pc_1ab6b
  %rdi.0.reload = load i64, i64* %rdi.0.reg2mem
  %rsi.0.reload = load i64, i64* %rsi.0.reg2mem
  %rax.0.reload = load i64, i64* %rax.0.reg2mem
  %.pre-phi.reload = load i8, i8* %.pre-phi.reg2mem
  %157 = and i8 %.pre-phi.reload, ptrtoint (i32* @global_var_2 to i8), !insn.addr !12079
  %158 = icmp eq i8 %157, 0, !insn.addr !12079
  store i8 %.pre-phi.reload, i8* %.pre-phi53.reg2mem, !insn.addr !12081
  store i64 %rax.0.reload, i64* %rax.1.reg2mem, !insn.addr !12081
  store i64 %rsi.0.reload, i64* %rsi.1.reg2mem, !insn.addr !12081
  store i64 %rdi.0.reload, i64* %rdi.1.reg2mem, !insn.addr !12081
  br i1 %158, label %dec_label_pc_1abb8, label %dec_label_pc_1aba7, !insn.addr !12081

dec_label_pc_1aba7:                               ; preds = %dec_label_pc_1aba1
  %159 = inttoptr i64 %rsi.0.reload to i16*, !insn.addr !12082
  %160 = load i16, i16* %159, align 2, !insn.addr !12082
  %161 = inttoptr i64 %rdi.0.reload to i16*, !insn.addr !12083
  store i16 %160, i16* %161, align 2, !insn.addr !12083
  %162 = add i64 %rdi.0.reload, ptrtoint (i32* @global_var_2 to i64), !insn.addr !12084
  %163 = add i64 %rsi.0.reload, 2, !insn.addr !12085
  %164 = add nuw nsw i64 %rax.0.reload, 4294967294, !insn.addr !12086
  %165 = and i64 %164, 4294967295, !insn.addr !12086
  %.pre52 = trunc i64 %162 to i8, !insn.addr !12087
  store i8 %.pre52, i8* %.pre-phi53.reg2mem, !insn.addr !12086
  store i64 %165, i64* %rax.1.reg2mem, !insn.addr !12086
  store i64 %163, i64* %rsi.1.reg2mem, !insn.addr !12086
  store i64 %162, i64* %rdi.1.reg2mem, !insn.addr !12086
  br label %dec_label_pc_1abb8, !insn.addr !12086

dec_label_pc_1abb8:                               ; preds = %dec_label_pc_1aba7, %dec_label_pc_1aba1
  %rdi.1.reload = load i64, i64* %rdi.1.reg2mem
  %rsi.1.reload = load i64, i64* %rsi.1.reg2mem
  %rax.1.reload = load i64, i64* %rax.1.reg2mem
  %.pre-phi53.reload = load i8, i8* %.pre-phi53.reg2mem
  %166 = and i8 %.pre-phi53.reload, ptrtoint (i16* @global_var_4 to i8), !insn.addr !12087
  %167 = icmp eq i8 %166, 0, !insn.addr !12087
  store i64 %rax.1.reload, i64* %rax.2.reg2mem, !insn.addr !12088
  store i64 %rsi.1.reload, i64* %rsi.2.reg2mem, !insn.addr !12088
  store i64 %rdi.1.reload, i64* %rdi.2.reg2mem, !insn.addr !12088
  br i1 %167, label %dec_label_pc_1abcd, label %dec_label_pc_1abbe, !insn.addr !12088

dec_label_pc_1abbe:                               ; preds = %dec_label_pc_1abb8
  %168 = inttoptr i64 %rsi.1.reload to i32*, !insn.addr !12089
  %169 = load i32, i32* %168, align 4, !insn.addr !12089
  %170 = inttoptr i64 %rdi.1.reload to i32*, !insn.addr !12090
  store i32 %169, i32* %170, align 4, !insn.addr !12090
  %171 = add i64 %rdi.1.reload, ptrtoint (i16* @global_var_4 to i64), !insn.addr !12091
  %172 = add i64 %rsi.1.reload, 4, !insn.addr !12092
  %173 = add nsw i64 %rax.1.reload, 4294967292, !insn.addr !12093
  %174 = and i64 %173, 4294967295, !insn.addr !12093
  store i64 %174, i64* %rax.2.reg2mem, !insn.addr !12093
  store i64 %172, i64* %rsi.2.reg2mem, !insn.addr !12093
  store i64 %171, i64* %rdi.2.reg2mem, !insn.addr !12093
  br label %dec_label_pc_1abcd, !insn.addr !12093

dec_label_pc_1abcd:                               ; preds = %dec_label_pc_1abbe, %dec_label_pc_1abb8
  %rdi.2.reload = load i64, i64* %rdi.2.reg2mem
  %rsi.2.reload = load i64, i64* %rsi.2.reg2mem
  %rax.2.reload = load i64, i64* %rax.2.reg2mem
  %175 = trunc i64 %rax.2.reload to i32, !insn.addr !12094
  %176 = lshr i32 %175, ptrtoint (i8** @global_var_3 to i32), !insn.addr !12095
  %177 = zext i32 %176 to i64, !insn.addr !12096
  %178 = inttoptr i64 %rsi.2.reload to i8*, !insn.addr !12097
  %179 = inttoptr i64 %rdi.2.reload to i8*, !insn.addr !12097
  call void @__asm_rep_movsq_memcpy(i8* %179, i8* %178, i64 %177), !insn.addr !12097
  %180 = trunc i64 %rax.2.reload to i8, !insn.addr !12098
  %181 = and i8 %180, ptrtoint (i32* @global_var_2 to i8), !insn.addr !12099
  %182 = icmp eq i8 %181, 0, !insn.addr !12099
  store i64 0, i64* %rcx.5.reg2mem, !insn.addr !12100
  br i1 %182, label %dec_label_pc_1abf8, label %dec_label_pc_1abec, !insn.addr !12100

dec_label_pc_1abec:                               ; preds = %dec_label_pc_1abcd
  %183 = mul i64 %135, %177, !insn.addr !12097
  %184 = add i64 %183, %rdi.2.reload, !insn.addr !12097
  %185 = and i8 %180, ptrtoint (i16* @global_var_4 to i8), !insn.addr !12098
  %186 = icmp eq i8 %185, 0, !insn.addr !12098
  %187 = select i1 %186, i64 0, i64 mul (i64 sext (i16 ptrtoint (i16* @global_var_4 to i16) to i64), i64 ptrtoint (i32* @global_var_1 to i64)), !insn.addr !12101
  %188 = add i64 %184, %187, !insn.addr !12101
  %189 = inttoptr i64 %188 to i16*, !insn.addr !12101
  %190 = load i16, i16* %189, align 2, !insn.addr !12101
  %191 = zext i16 %190 to i64, !insn.addr !12101
  store i64 %191, i64* %rcx.5.reg2mem, !insn.addr !12102
  br label %dec_label_pc_1abf8, !insn.addr !12102

dec_label_pc_1abf8:                               ; preds = %dec_label_pc_1abec, %dec_label_pc_1abcd
  %rcx.5.reload = load i64, i64* %rcx.5.reg2mem
  %192 = add i64 %r15.0.reload, zext (i32 ptrtoint (i32* @global_var_1 to i32) to i64), !insn.addr !12103
  %193 = and i64 %192, 4294967295, !insn.addr !12103
  store i64 %rcx.5.reload, i64* %rcx.6.reg2mem, !insn.addr !12103
  store i64 %193, i64* %r15.1.reg2mem, !insn.addr !12103
  br label %dec_label_pc_1ac07, !insn.addr !12103

dec_label_pc_1ac07:                               ; preds = %dec_label_pc_1abf8, %dec_label_pc_1ab5e
  %r15.1.reload = load i64, i64* %r15.1.reg2mem
  %rcx.6.reload = load i64, i64* %rcx.6.reg2mem
  %194 = add nuw nsw i64 %r12.4.reload, zext (i32 ptrtoint (i32* @global_var_1 to i32) to i64), !insn.addr !12104
  %195 = and i64 %194, 4294967295, !insn.addr !12104
  %196 = load i32, i32* %25, align 4, !insn.addr !12105
  %197 = trunc i64 %194 to i32, !insn.addr !12106
  %198 = icmp sgt i32 %196, %197, !insn.addr !12106
  store i64 %rcx.6.reload, i64* %rcx.4.reg2mem, !insn.addr !12106
  store i64 %195, i64* %r12.4.reg2mem, !insn.addr !12106
  store i64 %r15.1.reload, i64* %r15.0.reg2mem, !insn.addr !12106
  store i64 %rcx.6.reload, i64* %rcx.7.reg2mem, !insn.addr !12106
  store i64 %r15.1.reload, i64* %r15.2.reg2mem, !insn.addr !12106
  br i1 %198, label %dec_label_pc_1ab36, label %dec_label_pc_1ac1e, !insn.addr !12106

dec_label_pc_1ac1e:                               ; preds = %dec_label_pc_1ac07, %dec_label_pc_1aada
  %r15.2.reload = load i64, i64* %r15.2.reg2mem
  %rcx.7.reload = load i64, i64* %rcx.7.reg2mem
  %199 = trunc i64 %r15.2.reload to i32, !insn.addr !12107
  store i32 %199, i32* %25, align 4, !insn.addr !12107
  %200 = load i64, i64* %.pre62, align 8, !insn.addr !12108
  %sext3 = mul i64 %r15.2.reload, 4294967296
  %201 = sdiv i64 %sext3, 4294967296, !insn.addr !12109
  %202 = mul i64 %201, sub (i64 shl (i64 1, i64 ptrtoint (i8** @global_var_b to i64)), i64 shl (i64 1, i64 ptrtoint (i8** @global_var_7 to i64))), !insn.addr !12110
  %203 = call i64 @memcpy(i64 %200, i64 %132, i64 %202, i64 %rcx.7.reload), !insn.addr !12111
  %204 = call i64 @kfree(i64 %132), !insn.addr !12112
  store i32 0, i32* %124, align 4, !insn.addr !12113
  %205 = call i64 @find_pmt.74(i64 %4), !insn.addr !12114
  %206 = trunc i64 %205 to i32, !insn.addr !12115
  %207 = icmp slt i32 %206, 0, !insn.addr !12115
  br i1 %207, label %dec_label_pc_1ae6e, label %dec_label_pc_1ac6c, !insn.addr !12116

dec_label_pc_1ac6c:                               ; preds = %dec_label_pc_1aaa5, %dec_label_pc_1ac1e
  store i32 0, i32* %.pre58, align 4, !insn.addr !12117
  %208 = call i64 @setup_pid_map.50(i64 %4), !insn.addr !12118
  br label %dec_label_pc_1ac7b, !insn.addr !12118

dec_label_pc_1ac7b:                               ; preds = %dec_label_pc_1ac6c, %dec_label_pc_1aa82
  %209 = call i64 @check_ecm_complete.43(i64 %4), !insn.addr !12119
  %210 = trunc i64 %209 to i32, !insn.addr !12120
  %211 = icmp eq i32 %210, 0, !insn.addr !12120
  %212 = icmp eq i1 %211, false, !insn.addr !12121
  br i1 %212, label %dec_label_pc_1ae58, label %dec_label_pc_1ac8b, !insn.addr !12121

dec_label_pc_1ac8b:                               ; preds = %dec_label_pc_1ac7b
  %213 = load i32, i32* %16, align 4, !insn.addr !12122
  %214 = add i64 %4, ptrtoint (i8* @global_var_8 to i64), !insn.addr !12123
  %215 = inttoptr i64 %214 to i32*, !insn.addr !12123
  %216 = load i32, i32* %215, align 4, !insn.addr !12123
  %217 = sext i32 %216 to i64, !insn.addr !12123
  %218 = add i64 %4, 67120, !insn.addr !12124
  %219 = inttoptr i64 %218 to i64*, !insn.addr !12124
  %220 = load i64, i64* %219, align 8, !insn.addr !12124
  %221 = add i64 %220, %217, !insn.addr !12124
  %222 = add i64 %4, 67128, !insn.addr !12125
  %223 = inttoptr i64 %222 to i64*, !insn.addr !12125
  %224 = load i64, i64* %223, align 8, !insn.addr !12125
  %225 = sext i32 %213 to i64, !insn.addr !12126
  %226 = add i64 %221, %225, !insn.addr !12127
  %sext5 = mul i64 %224, 281474976710656
  %227 = sdiv i64 %sext5, 281474976710656, !insn.addr !12128
  %228 = icmp ugt i64 %226, %227, !insn.addr !12128
  %229 = icmp eq i1 %228, false, !insn.addr !12129
  store i64 0, i64* %r13.4.lcssa.reg2mem, !insn.addr !12129
  store i64 %221, i64* %r14.4.lcssa.reg2mem, !insn.addr !12129
  br i1 %229, label %dec_label_pc_1acc0.lr.ph, label %dec_label_pc_1adf4, !insn.addr !12129

dec_label_pc_1acc0.lr.ph:                         ; preds = %dec_label_pc_1ac8b
  %230 = sext i32 %2 to i64
  %231 = mul i64 %230, 8
  %232 = add nsw i64 %231, 1040
  %233 = add i64 %232, %4
  %234 = inttoptr i64 %233 to i64*
  %235 = and i8 %1, ptrtoint (i32* @global_var_2 to i8)
  %236 = icmp eq i8 %235, 0
  store i64 %221, i64* %r14.415.reg2mem
  store i64 0, i64* %r13.413.reg2mem
  br label %dec_label_pc_1acc0

dec_label_pc_1acc0:                               ; preds = %dec_label_pc_1acc0.lr.ph, %dec_label_pc_1adde.backedge
  %r13.413.reload = load i64, i64* %r13.413.reg2mem
  %r14.415.reload = load i64, i64* %r14.415.reg2mem
  %237 = inttoptr i64 %r14.415.reload to i8*, !insn.addr !12130
  %238 = load i8, i8* %237, align 1, !insn.addr !12130
  %239 = icmp eq i8 %238, 71, !insn.addr !12130
  store i64 %r14.415.reload, i64* %r14.3.reg2mem, !insn.addr !12131
  br i1 %239, label %dec_label_pc_1ace1, label %dec_label_pc_1acc6, !insn.addr !12131

dec_label_pc_1acc6:                               ; preds = %dec_label_pc_1acc0
  %240 = call i64 @resync.46(i64 %r14.415.reload, i64 %227, i32 %213), !insn.addr !12132
  %241 = icmp eq i64 %240, 0, !insn.addr !12133
  store i64 %240, i64* %r14.3.reg2mem, !insn.addr !12134
  store i64 %r13.413.reload, i64* %r13.4.lcssa.reg2mem, !insn.addr !12134
  store i64 %r14.415.reload, i64* %r14.4.lcssa.reg2mem, !insn.addr !12134
  br i1 %241, label %dec_label_pc_1adf4, label %dec_label_pc_1ace1, !insn.addr !12134

dec_label_pc_1ace1:                               ; preds = %dec_label_pc_1acc6, %dec_label_pc_1acc0
  %r14.3.reload = load i64, i64* %r14.3.reg2mem
  %242 = call i64 @extract_ts_header.44(i64* nonnull %stack_var_-88, i64 %r14.3.reload), !insn.addr !12135
  %243 = load i64, i64* %234, align 8, !insn.addr !12136
  %244 = icmp eq i64 %243, 0, !insn.addr !12137
  store i64 %r13.413.reload, i64* %r13.4.be.reg2mem, !insn.addr !12138
  br i1 %244, label %dec_label_pc_1adde.backedge, label %dec_label_pc_1ad04, !insn.addr !12138

dec_label_pc_1ad04:                               ; preds = %dec_label_pc_1ace1
  %245 = add i64 %243, 160, !insn.addr !12139
  %246 = inttoptr i64 %245 to i32*, !insn.addr !12139
  %247 = load i32, i32* %246, align 4, !insn.addr !12139
  %248 = icmp eq i32 %247, %2, !insn.addr !12139
  %249 = icmp eq i1 %248, false, !insn.addr !12140
  store i64 %r13.413.reload, i64* %r13.4.be.reg2mem, !insn.addr !12140
  br i1 %249, label %dec_label_pc_1adde.backedge, label %dec_label_pc_1ad12, !insn.addr !12140

dec_label_pc_1ad12:                               ; preds = %dec_label_pc_1ad04
  %250 = add i64 %243, 168, !insn.addr !12141
  %251 = call i64 @check_ts_section.41(i64 %250), !insn.addr !12142
  %252 = trunc i64 %251 to i32, !insn.addr !12143
  %253 = icmp eq i32 %252, 0, !insn.addr !12143
  %254 = icmp eq i1 %253, false, !insn.addr !12144
  store i64 %r13.413.reload, i64* %r13.4.be.reg2mem, !insn.addr !12144
  br i1 %254, label %dec_label_pc_1adde.backedge, label %dec_label_pc_1ad2e, !insn.addr !12144

dec_label_pc_1ad2e:                               ; preds = %dec_label_pc_1ad12
  %255 = add i64 %r14.3.reload, ptrtoint (i16* @global_var_4 to i64), !insn.addr !12145
  store i64 %255, i64* %rdx.3.reg2mem, !insn.addr !12146
  br i1 %236, label %dec_label_pc_1ad40, label %dec_label_pc_1ad38, !insn.addr !12146

dec_label_pc_1ad38:                               ; preds = %dec_label_pc_1ad2e
  %256 = inttoptr i64 %255 to i8*, !insn.addr !12147
  %257 = load i8, i8* %256, align 1, !insn.addr !12147
  %258 = zext i8 %257 to i64, !insn.addr !12147
  %259 = mul i64 %258, ptrtoint (i32* @global_var_1 to i64), !insn.addr !12148
  %260 = add i64 %r14.3.reload, add (i64 ptrtoint (i16* @global_var_4 to i64), i64 ptrtoint (i32* @global_var_1 to i64)), !insn.addr !12148
  %261 = add i64 %260, %259, !insn.addr !12148
  store i64 %261, i64* %rdx.3.reg2mem, !insn.addr !12148
  br label %dec_label_pc_1ad40, !insn.addr !12148

dec_label_pc_1ad40:                               ; preds = %dec_label_pc_1ad38, %dec_label_pc_1ad2e
  %rdx.3.reload = load i64, i64* %rdx.3.reg2mem
  %262 = add i64 %243, 240, !insn.addr !12149
  %263 = trunc i64 %r14.3.reload to i32, !insn.addr !12150
  %264 = trunc i64 %rdx.3.reload to i32, !insn.addr !12151
  %265 = add i32 %263, 188, !insn.addr !12151
  %266 = sub i32 %265, %264, !insn.addr !12152
  %267 = call i64 @set_ts_section_data.73(i64 %262, i64* nonnull %stack_var_-88, i64 %rdx.3.reload, i32 %266), !insn.addr !12153
  %268 = and i64 %267, 4294967295, !insn.addr !12154
  %269 = call i64 @check_ts_section.41(i64 %262), !insn.addr !12155
  %270 = trunc i64 %269 to i32, !insn.addr !12156
  %271 = icmp eq i32 %270, 0, !insn.addr !12156
  store i64 %268, i64* %r13.4.be.reg2mem, !insn.addr !12157
  br i1 %271, label %dec_label_pc_1adde.backedge, label %dec_label_pc_1ad7b, !insn.addr !12157

dec_label_pc_1ad7b:                               ; preds = %dec_label_pc_1ad40
  %272 = call i64 @check_ts_section_crc.47(i64 %262), !insn.addr !12158
  %273 = trunc i64 %272 to i32, !insn.addr !12159
  %274 = icmp eq i32 %273, 0, !insn.addr !12159
  br i1 %274, label %dec_label_pc_1ad93, label %dec_label_pc_1ad88, !insn.addr !12160

dec_label_pc_1ad88:                               ; preds = %dec_label_pc_1ad7b
  %275 = add i64 %243, 296, !insn.addr !12161
  %276 = inttoptr i64 %275 to i32*, !insn.addr !12161
  %277 = load i32, i32* %276, align 4, !insn.addr !12161
  %278 = icmp eq i32 %277, 0, !insn.addr !12161
  %279 = icmp eq i1 %278, false, !insn.addr !12162
  br i1 %279, label %dec_label_pc_1ada2, label %dec_label_pc_1ad93, !insn.addr !12162

dec_label_pc_1ad93:                               ; preds = %dec_label_pc_1ad88, %dec_label_pc_1ad7b
  %280 = call i64 @reset_ts_section.49(i64 %262), !insn.addr !12163
  store i64 %268, i64* %r13.4.be.reg2mem, !insn.addr !12164
  br label %dec_label_pc_1adde.backedge, !insn.addr !12164

dec_label_pc_1adde.backedge:                      ; preds = %dec_label_pc_1ace1, %dec_label_pc_1ad04, %dec_label_pc_1ad12, %dec_label_pc_1ad40, %dec_label_pc_1ada2, %dec_label_pc_1ad93
  %r13.4.be.reload = load i64, i64* %r13.4.be.reg2mem
  %r14.4.be = add i64 %r14.3.reload, %225
  %281 = add i64 %r14.4.be, %225, !insn.addr !12127
  %282 = icmp ugt i64 %281, %227, !insn.addr !12128
  %283 = icmp eq i1 %282, false, !insn.addr !12129
  store i64 %r14.4.be, i64* %r14.415.reg2mem, !insn.addr !12129
  store i64 %r13.4.be.reload, i64* %r13.413.reg2mem, !insn.addr !12129
  store i64 %r13.4.be.reload, i64* %r13.4.lcssa.reg2mem, !insn.addr !12129
  store i64 %r14.4.be, i64* %r14.4.lcssa.reg2mem, !insn.addr !12129
  br i1 %283, label %dec_label_pc_1acc0, label %dec_label_pc_1adf4, !insn.addr !12129

dec_label_pc_1ada2:                               ; preds = %dec_label_pc_1ad88
  %284 = call i64 @swap_ts_section.54(i64 %250, i64 %262), !insn.addr !12165
  %285 = call i64 @reset_ts_section.49(i64 %262), !insn.addr !12166
  %286 = call i64 @check_ecm_complete.43(i64 %4), !insn.addr !12167
  %287 = trunc i64 %286 to i32, !insn.addr !12168
  %288 = icmp eq i32 %287, 0, !insn.addr !12168
  store i64 %268, i64* %r13.4.be.reg2mem, !insn.addr !12169
  br i1 %288, label %dec_label_pc_1adde.backedge, label %dec_label_pc_1adc4, !insn.addr !12169

dec_label_pc_1adc4:                               ; preds = %dec_label_pc_1ada2
  %289 = mul i64 %225, ptrtoint (i32* @global_var_1 to i64), !insn.addr !12170
  %290 = add i64 %r14.3.reload, %289, !insn.addr !12170
  %291 = trunc i64 %290 to i32, !insn.addr !12171
  %292 = inttoptr i64 %218 to i32*, !insn.addr !12171
  %293 = load i32, i32* %292, align 4, !insn.addr !12171
  %294 = sub i32 %291, %293, !insn.addr !12171
  store i32 %294, i32* %215, align 4, !insn.addr !12172
  br label %dec_label_pc_1ae0a, !insn.addr !12173

dec_label_pc_1adf4:                               ; preds = %dec_label_pc_1adde.backedge, %dec_label_pc_1acc6, %dec_label_pc_1ac8b
  %r14.4.lcssa.reload = load i64, i64* %r14.4.lcssa.reg2mem
  %r13.4.lcssa.reload = load i64, i64* %r13.4.lcssa.reg2mem
  %295 = trunc i64 %r14.4.lcssa.reload to i32, !insn.addr !12174
  %296 = inttoptr i64 %218 to i32*, !insn.addr !12174
  %297 = load i32, i32* %296, align 4, !insn.addr !12174
  %298 = sub i32 %295, %297, !insn.addr !12174
  store i32 %298, i32* %215, align 4, !insn.addr !12175
  %299 = trunc i64 %r13.4.lcssa.reload to i32, !insn.addr !12176
  %300 = icmp slt i32 %299, 0, !insn.addr !12176
  br i1 %300, label %dec_label_pc_1ae6e, label %dec_label_pc_1ae0a, !insn.addr !12177

dec_label_pc_1ae0a:                               ; preds = %dec_label_pc_1adc4, %dec_label_pc_1adf4
  %301 = call i64 @check_ecm_complete.43(i64 %4), !insn.addr !12178
  %302 = trunc i64 %301 to i32, !insn.addr !12179
  %303 = icmp eq i32 %302, 0, !insn.addr !12179
  %304 = icmp eq i1 %303, false, !insn.addr !12180
  br i1 %304, label %dec_label_pc_1ae49, label %dec_label_pc_1ae16, !insn.addr !12180

dec_label_pc_1ae16:                               ; preds = %dec_label_pc_1ae0a
  %305 = load i32, i32* %215, align 4, !insn.addr !12181
  %306 = icmp sgt i32 %305, 33554431, !insn.addr !12182
  br i1 %306, label %dec_label_pc_1ae6e, label %dec_label_pc_1ae26, !insn.addr !12182

dec_label_pc_1ae26:                               ; preds = %dec_label_pc_1ae16
  %307 = add i64 %4, ptrtoint (i8* @global_var_10 to i64), !insn.addr !12183
  %308 = inttoptr i64 %307 to i32*, !insn.addr !12183
  %309 = load i32, i32* %308, align 4, !insn.addr !12183
  %310 = add i32 %309, %305, !insn.addr !12183
  store i32 %310, i32* %308, align 4, !insn.addr !12184
  %311 = icmp slt i32 %310, 1048577, !insn.addr !12185
  br i1 %311, label %dec_label_pc_1ae6e, label %dec_label_pc_1ae33, !insn.addr !12185

dec_label_pc_1ae33:                               ; preds = %dec_label_pc_1ae26
  store i32 0, i32* %308, align 4, !insn.addr !12186
  %312 = add i64 %4, 67186, !insn.addr !12187
  %313 = inttoptr i64 %312 to i8*, !insn.addr !12187
  store i8 ptrtoint (i32* @global_var_1 to i8), i8* %313, align 1, !insn.addr !12187
  br label %dec_label_pc_1ae6e, !insn.addr !12188

dec_label_pc_1ae49:                               ; preds = %dec_label_pc_1ae0a
  store i32 0, i32* %215, align 4, !insn.addr !12189
  %314 = call i64 @setup_multi2.65(i64 %4), !insn.addr !12190
  br label %dec_label_pc_1ae58, !insn.addr !12190

dec_label_pc_1ae58:                               ; preds = %dec_label_pc_1ae49, %dec_label_pc_1ac7b
  %315 = call i64 @proc_arib_std_b25.76(i64 %4), !insn.addr !12191
  ret i64 %315, !insn.addr !12192

dec_label_pc_1ae6e:                               ; preds = %dec_label_pc_1aa5a, %dec_label_pc_1a91b, %dec_label_pc_1aac9, %dec_label_pc_1ae26, %dec_label_pc_1ae33, %dec_label_pc_1ae16, %dec_label_pc_1adf4, %dec_label_pc_1ac1e, %dec_label_pc_1aab5, %dec_label_pc_1aa92, %dec_label_pc_1aa51, %dec_label_pc_1a908
  %316 = add i64 %4, ptrtoint (i8* @global_var_8 to i64), !insn.addr !12193
  %317 = inttoptr i64 %316 to i32*, !insn.addr !12193
  store i32 0, i32* %317, align 4, !insn.addr !12193
  %318 = add i64 %4, 67128, !insn.addr !12194
  %319 = inttoptr i64 %318 to i64*, !insn.addr !12194
  %320 = load i64, i64* %319, align 8, !insn.addr !12194
  %321 = trunc i64 %320 to i32, !insn.addr !12195
  %322 = add i64 %4, 67120, !insn.addr !12195
  %323 = inttoptr i64 %322 to i32*, !insn.addr !12195
  %324 = load i32, i32* %323, align 4, !insn.addr !12195
  %325 = sub i32 %321, %324, !insn.addr !12195
  %326 = add i64 %4, 67144, !insn.addr !12196
  %327 = add i64 %4, 67160, !insn.addr !12197
  %328 = inttoptr i64 %327 to i64*, !insn.addr !12197
  %329 = load i64, i64* %328, align 8, !insn.addr !12197
  %330 = trunc i64 %329 to i32, !insn.addr !12198
  %331 = add i64 %4, 67152, !insn.addr !12198
  %332 = inttoptr i64 %331 to i32*, !insn.addr !12198
  %333 = load i32, i32* %332, align 4, !insn.addr !12198
  %334 = sub i32 %325, %333, !insn.addr !12198
  %335 = add i32 %334, %330, !insn.addr !12199
  %336 = call i64 @reserve_work_buffer.71(i64 %326, i32 %335), !insn.addr !12200
  %337 = trunc i64 %336 to i32, !insn.addr !12201
  %338 = icmp eq i32 %337, 0, !insn.addr !12201
  store i64 %336, i64* %merge.reg2mem, !insn.addr !12202
  br i1 %338, label %dec_label_pc_1a8d7, label %dec_label_pc_1aea8, !insn.addr !12202

dec_label_pc_1aea8:                               ; preds = %dec_label_pc_1ae6e
  %339 = inttoptr i64 %322 to i64*, !insn.addr !12203
  %340 = load i64, i64* %339, align 8, !insn.addr !12203
  %341 = call i64 @append_work_buffer.72(i64 %326, i64 %340, i32 %325), !insn.addr !12204
  %342 = inttoptr i64 %11 to i64*, !insn.addr !12205
  %343 = load i64, i64* %342, align 8, !insn.addr !12205
  store i64 %343, i64* %319, align 8, !insn.addr !12206
  store i64 %343, i64* %339, align 8, !insn.addr !12207
  ret i64 %343, !insn.addr !12208
}

define i32 @flush_arib_std_b25(i8* %std_b25) local_unnamed_addr {
dec_label_pc_1aede:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = trunc i64 %0 to i32
  ret i32 %1
}

define i64 @flush_arib_std_b25.68(i64 %arg1) local_unnamed_addr {
dec_label_pc_1af0e:
  %r12.2.reg2mem = alloca i64, !insn.addr !12209
  %stack_var_-104.1.reg2mem = alloca i16, !insn.addr !12209
  %stack_var_-112.0.reg2mem = alloca i32, !insn.addr !12209
  %stack_var_-104.0.reg2mem = alloca i16, !insn.addr !12209
  %stack_var_-96.0.in.reg2mem = alloca i64, !insn.addr !12209
  %r12.0.reg2mem = alloca i64, !insn.addr !12209
  %rdx.1.reg2mem = alloca i64, !insn.addr !12209
  %r10.0.reg2mem = alloca i64, !insn.addr !12209
  %rdx.0.reg2mem = alloca i64, !insn.addr !12209
  %rdi.020.reg2mem = alloca i64, !insn.addr !12209
  %rsi.023.in.reg2mem = alloca i64, !insn.addr !12209
  %.reg2mem130 = alloca i64, !insn.addr !12209
  %stack_var_-112.126.reg2mem = alloca i32, !insn.addr !12209
  %r12.127.reg2mem = alloca i64, !insn.addr !12209
  %.reg2mem = alloca i32, !insn.addr !12209
  %0 = call i32 @__decompiler_undefined_function_3()
  %1 = call i32 @__decompiler_undefined_function_3()
  %2 = call i32 @__decompiler_undefined_function_3()
  %stack_var_-88 = alloca i64, align 8
  %3 = call i64 @mcount(), !insn.addr !12210
  %4 = call i64 @private_data.26(i64 %arg1), !insn.addr !12211
  %5 = call i64 @proc_arib_std_b25.76(i64 %4), !insn.addr !12212
  %6 = add i64 %4, ptrtoint (i16* @global_var_4 to i64), !insn.addr !12213
  %7 = inttoptr i64 %6 to i32*, !insn.addr !12213
  %8 = load i32, i32* %7, align 4, !insn.addr !12213
  %9 = icmp sgt i32 %8, 187, !insn.addr !12214
  store i32 %8, i32* %.reg2mem, !insn.addr !12214
  br i1 %9, label %dec_label_pc_1af74, label %dec_label_pc_1af61, !insn.addr !12214

dec_label_pc_1af61:                               ; preds = %dec_label_pc_1af0e
  %10 = call i64 @select_unit_size.48(i64 %4), !insn.addr !12215
  %.pre = load i32, i32* %7, align 4
  store i32 %.pre, i32* %.reg2mem, !insn.addr !12216
  br label %dec_label_pc_1af74, !insn.addr !12216

dec_label_pc_1af74:                               ; preds = %dec_label_pc_1af61, %dec_label_pc_1af0e
  %11 = add i64 %4, 67120, !insn.addr !12217
  %12 = inttoptr i64 %11 to i64*, !insn.addr !12217
  %13 = load i64, i64* %12, align 8, !insn.addr !12217
  %14 = add i64 %4, 67128, !insn.addr !12218
  %15 = inttoptr i64 %14 to i64*, !insn.addr !12218
  %16 = load i64, i64* %15, align 8, !insn.addr !12218
  %17 = sub i64 %16, %13, !insn.addr !12219
  %18 = trunc i64 %17 to i32, !insn.addr !12220
  %19 = add i64 %4, 67144, !insn.addr !12221
  %20 = add i64 %4, 67160, !insn.addr !12222
  %21 = inttoptr i64 %20 to i64*, !insn.addr !12222
  %22 = load i64, i64* %21, align 8, !insn.addr !12222
  %23 = trunc i64 %22 to i32, !insn.addr !12223
  %24 = add i64 %4, 67152, !insn.addr !12223
  %25 = inttoptr i64 %24 to i32*, !insn.addr !12223
  %26 = load i32, i32* %25, align 4, !insn.addr !12223
  %27 = sub i32 %23, %26, !insn.addr !12223
  %28 = add i32 %27, %18, !insn.addr !12224
  %29 = call i64 @reserve_work_buffer.71(i64 %19, i32 %28), !insn.addr !12225
  %30 = add i64 %13, 188, !insn.addr !12226
  %31 = icmp ult i64 %16, %30, !insn.addr !12227
  %32 = icmp eq i1 %31, false, !insn.addr !12228
  store i64 %13, i64* %r12.2.reg2mem, !insn.addr !12228
  br i1 %32, label %dec_label_pc_1b093.lr.ph, label %dec_label_pc_1b957, !insn.addr !12228

dec_label_pc_1b093.lr.ph:                         ; preds = %dec_label_pc_1af74
  %.reload = load i32, i32* %.reg2mem, !insn.addr !12229
  %33 = add i64 %4, 680, !insn.addr !12230
  %34 = add i64 %4, 608, !insn.addr !12231
  %35 = add i64 %4, 240, !insn.addr !12232
  %36 = add i64 %4, 168, !insn.addr !12233
  %37 = add i64 %4, 384, !insn.addr !12234
  %38 = add i64 %4, 312, !insn.addr !12235
  %39 = add i64 %4, 528, !insn.addr !12236
  %40 = add i64 %4, 456, !insn.addr !12237
  %41 = add i64 %4, 96, !insn.addr !12238
  %42 = add i64 %4, ptrtoint (i32** @global_var_18 to i64), !insn.addr !12239
  %43 = add i64 %16, -188, !insn.addr !12240
  %44 = sext i32 %.reload to i64, !insn.addr !12241
  %45 = zext i32 %.reload to i64, !insn.addr !12242
  %46 = mul i32 %.reload, 2, !insn.addr !12243
  %47 = add i32 %.reload, ptrtoint (i32* @global_var_1 to i32), !insn.addr !12244
  %48 = sext i32 %47 to i64
  %49 = mul i64 %48, ptrtoint (i32* @global_var_1 to i64)
  %.neg7 = sub i64 %16, zext (i32 ptrtoint (i32* @global_var_1 to i32) to i64)
  %50 = zext i32 %46 to i64
  %51 = zext i32 %1 to i64
  %52 = mul i64 %51, 8
  %53 = add nuw nsw i64 %52, 1040
  %54 = add i64 %53, %4
  %55 = inttoptr i64 %54 to i64*
  %56 = add i64 %4, 1024
  %57 = inttoptr i64 %56 to i64*
  %58 = trunc i32 %0 to i8
  %59 = and i8 %58, ptrtoint (i32* @global_var_1 to i8)
  %60 = icmp eq i8 %59, 0
  %61 = and i8 %58, ptrtoint (i32* @global_var_2 to i8)
  %62 = icmp eq i8 %61, 0
  %63 = icmp eq i32 %2, 0
  %64 = add i64 %4, 67096
  %65 = inttoptr i64 %64 to i64*
  %66 = add i64 %4, 600
  %67 = inttoptr i64 %66 to i32*
  %68 = add i64 %4, 736
  %69 = inttoptr i64 %68 to i32*
  %70 = add i64 %4, 640
  %71 = inttoptr i64 %70 to i32*
  %72 = icmp eq i32 %1, ptrtoint (i32* @global_var_1 to i32)
  %73 = icmp eq i1 %72, false
  %74 = add i64 %4, 296
  %75 = inttoptr i64 %74 to i32*
  %76 = icmp eq i32 %1, ptrtoint (i8** @global_var_11 to i32)
  %77 = icmp eq i1 %76, false
  %78 = add i64 %4, 440
  %79 = inttoptr i64 %78 to i32*
  %80 = icmp eq i32 %1, ptrtoint (i32** @global_var_12 to i32)
  %81 = icmp eq i1 %80, false
  %82 = add i64 %4, 584
  %83 = inttoptr i64 %82 to i32*
  %84 = icmp eq i32 %1, 0
  %85 = icmp eq i1 %84, false
  %86 = add i64 %4, 152
  %87 = inttoptr i64 %86 to i32*
  store i64 %13, i64* %r12.127.reg2mem
  store i32 %18, i32* %stack_var_-112.126.reg2mem
  br label %dec_label_pc_1b093

dec_label_pc_1b093:                               ; preds = %dec_label_pc_1b093.lr.ph, %dec_label_pc_1b8f9.backedge
  %stack_var_-112.126.reload = load i32, i32* %stack_var_-112.126.reg2mem
  %r12.127.reload = load i64, i64* %r12.127.reg2mem
  %88 = inttoptr i64 %r12.127.reload to i8*, !insn.addr !12245
  %89 = load i8, i8* %88, align 1, !insn.addr !12245
  %90 = icmp eq i8 %89, 71, !insn.addr !12245
  store i64 %r12.127.reload, i64* %r12.0.reg2mem, !insn.addr !12246
  br i1 %90, label %dec_label_pc_1b13f, label %dec_label_pc_1b09e, !insn.addr !12246

dec_label_pc_1b09e:                               ; preds = %dec_label_pc_1b093
  %91 = icmp ugt i64 %r12.127.reload, %43
  store i64 %r12.127.reload, i64* %r12.2.reg2mem, !insn.addr !12247
  br i1 %91, label %dec_label_pc_1b957, label %dec_label_pc_1b0a7, !insn.addr !12247

dec_label_pc_1b0a7:                               ; preds = %dec_label_pc_1b09e
  %92 = add i64 %r12.127.reload, ptrtoint (i32* @global_var_1 to i64), !insn.addr !12248
  %93 = icmp ult i64 %43, %92, !insn.addr !12249
  %94 = icmp eq i1 %93, false, !insn.addr !12250
  store i64 %r12.127.reload, i64* %r12.2.reg2mem, !insn.addr !12250
  br i1 %94, label %dec_label_pc_1b0d4.lr.ph, label %dec_label_pc_1b957, !insn.addr !12250

dec_label_pc_1b0d4.lr.ph:                         ; preds = %dec_label_pc_1b0a7
  %95 = sub i64 %.neg7, %r12.127.reload, !insn.addr !12251
  %96 = add i64 %r12.127.reload, %49, !insn.addr !12252
  store i64 %92, i64* %.reg2mem130
  store i64 %95, i64* %rsi.023.in.reg2mem
  store i64 %96, i64* %rdi.020.reg2mem
  br label %dec_label_pc_1b0d4

dec_label_pc_1b0d4:                               ; preds = %dec_label_pc_1b0d4.lr.ph, %dec_label_pc_1b11a
  %rdi.020.reload = load i64, i64* %rdi.020.reg2mem
  %rsi.023.in.reload = load i64, i64* %rsi.023.in.reg2mem
  %.reload131 = load i64, i64* %.reg2mem130
  %rsi.023 = and i64 %rsi.023.in.reload, 4294967295
  %97 = inttoptr i64 %.reload131 to i8*, !insn.addr !12253
  %98 = load i8, i8* %97, align 1, !insn.addr !12253
  %99 = icmp eq i8 %98, 71, !insn.addr !12253
  %100 = icmp eq i1 %99, false, !insn.addr !12254
  br i1 %100, label %dec_label_pc_1b11a, label %dec_label_pc_1b0d9, !insn.addr !12254

dec_label_pc_1b0d9:                               ; preds = %dec_label_pc_1b0d4
  %101 = trunc i64 %rsi.023.in.reload to i32, !insn.addr !12255
  %102 = ashr i32 %101, ptrtoint (i8** @global_var_1f to i32), !insn.addr !12256
  %103 = zext i32 %102 to i64, !insn.addr !12257
  %104 = shl i64 %103, ptrtoint (i32** @global_var_20 to i64), !insn.addr !12257
  %105 = or i64 %104, %rsi.023, !insn.addr !12257
  %106 = sdiv i64 %105, %45, !insn.addr !12257
  %107 = trunc i64 %106 to i32, !insn.addr !12258
  %108 = icmp eq i32 %107, 0, !insn.addr !12258
  br i1 %108, label %dec_label_pc_1b133, label %dec_label_pc_1b0e7, !insn.addr !12259

dec_label_pc_1b0e7:                               ; preds = %dec_label_pc_1b0d9
  %109 = icmp sgt i32 %107, ptrtoint (i32* @global_var_1 to i32), !insn.addr !12260
  store i64 ptrtoint (i32* @global_var_1 to i64), i64* %rdx.1.reg2mem, !insn.addr !12260
  br i1 %109, label %dec_label_pc_1b0ec, label %dec_label_pc_1b116, !insn.addr !12260

dec_label_pc_1b0ec:                               ; preds = %dec_label_pc_1b0e7
  %110 = and i64 %106, 4294967295, !insn.addr !12257
  %111 = inttoptr i64 %rdi.020.reload to i8*, !insn.addr !12261
  %112 = load i8, i8* %111, align 1, !insn.addr !12261
  %113 = icmp eq i8 %112, 71, !insn.addr !12261
  store i64 ptrtoint (i32* @global_var_1 to i64), i64* %rdx.0.reg2mem, !insn.addr !12262
  store i64 %50, i64* %r10.0.reg2mem, !insn.addr !12262
  store i64 ptrtoint (i32* @global_var_1 to i64), i64* %rdx.1.reg2mem, !insn.addr !12262
  br i1 %113, label %dec_label_pc_1b108, label %dec_label_pc_1b116, !insn.addr !12262

dec_label_pc_1b0fb:                               ; preds = %dec_label_pc_1b108
  %r10.0.reload = load i64, i64* %r10.0.reg2mem
  %sext5 = mul i64 %r10.0.reload, 4294967296
  %114 = sdiv i64 %sext5, 4294967296, !insn.addr !12263
  %115 = add nuw nsw i64 %r10.0.reload, %45, !insn.addr !12264
  %116 = and i64 %115, 4294967295, !insn.addr !12264
  %117 = mul i64 %114, ptrtoint (i32* @global_var_1 to i64), !insn.addr !12265
  %118 = add i64 %117, %.reload131, !insn.addr !12265
  %119 = inttoptr i64 %118 to i8*, !insn.addr !12265
  %120 = load i8, i8* %119, align 1, !insn.addr !12265
  %121 = icmp eq i8 %120, 71, !insn.addr !12265
  %122 = icmp eq i1 %121, false, !insn.addr !12266
  store i64 %124, i64* %rdx.0.reg2mem, !insn.addr !12266
  store i64 %116, i64* %r10.0.reg2mem, !insn.addr !12266
  store i64 %124, i64* %rdx.1.reg2mem, !insn.addr !12266
  br i1 %122, label %dec_label_pc_1b116, label %dec_label_pc_1b108, !insn.addr !12266

dec_label_pc_1b108:                               ; preds = %dec_label_pc_1b0ec, %dec_label_pc_1b0fb
  %rdx.0.reload = load i64, i64* %rdx.0.reg2mem
  %123 = add i64 %rdx.0.reload, zext (i32 ptrtoint (i32* @global_var_1 to i32) to i64), !insn.addr !12267
  %124 = and i64 %123, 4294967295, !insn.addr !12267
  %125 = icmp ugt i64 %110, %124, !insn.addr !12268
  store i64 %124, i64* %rdx.1.reg2mem, !insn.addr !12268
  br i1 %125, label %dec_label_pc_1b0fb, label %dec_label_pc_1b116, !insn.addr !12268

dec_label_pc_1b116:                               ; preds = %dec_label_pc_1b108, %dec_label_pc_1b0fb, %dec_label_pc_1b0e7, %dec_label_pc_1b0ec
  %rdx.1.reload = load i64, i64* %rdx.1.reg2mem
  %126 = trunc i64 %rdx.1.reload to i32, !insn.addr !12269
  %127 = icmp eq i32 %107, %126, !insn.addr !12269
  br i1 %127, label %dec_label_pc_1b133, label %dec_label_pc_1b11a, !insn.addr !12270

dec_label_pc_1b11a:                               ; preds = %dec_label_pc_1b116, %dec_label_pc_1b0d4
  %128 = add i64 %rdi.020.reload, ptrtoint (i32* @global_var_1 to i64), !insn.addr !12271
  %129 = sub nsw i64 %rsi.023, zext (i32 ptrtoint (i32* @global_var_1 to i32) to i64), !insn.addr !12272
  %130 = add i64 %.reload131, ptrtoint (i32* @global_var_1 to i64), !insn.addr !12248
  %131 = icmp ult i64 %43, %130, !insn.addr !12249
  %132 = icmp eq i1 %131, false, !insn.addr !12250
  store i64 %130, i64* %.reg2mem130, !insn.addr !12250
  store i64 %129, i64* %rsi.023.in.reg2mem, !insn.addr !12250
  store i64 %128, i64* %rdi.020.reg2mem, !insn.addr !12250
  store i64 %r12.127.reload, i64* %r12.2.reg2mem, !insn.addr !12250
  br i1 %132, label %dec_label_pc_1b0d4, label %dec_label_pc_1b957, !insn.addr !12250

dec_label_pc_1b133:                               ; preds = %dec_label_pc_1b116, %dec_label_pc_1b0d9
  %133 = icmp eq i64 %.reload131, 0, !insn.addr !12273
  store i64 %.reload131, i64* %r12.0.reg2mem, !insn.addr !12274
  store i64 %r12.127.reload, i64* %r12.2.reg2mem, !insn.addr !12274
  br i1 %133, label %dec_label_pc_1b957, label %dec_label_pc_1b13f, !insn.addr !12274

dec_label_pc_1b13f:                               ; preds = %dec_label_pc_1b133, %dec_label_pc_1b093
  %r12.0.reload = load i64, i64* %r12.0.reg2mem
  %134 = call i64 @extract_ts_header.44(i64* nonnull %stack_var_-88, i64 %r12.0.reload), !insn.addr !12275
  %135 = load i64, i64* %55, align 8, !insn.addr !12276
  %136 = icmp eq i64 %135, 0, !insn.addr !12277
  %137 = icmp eq i1 %136, false, !insn.addr !12278
  store i64 %135, i64* %stack_var_-96.0.in.reg2mem, !insn.addr !12278
  br i1 %137, label %dec_label_pc_1b171, label %dec_label_pc_1b166, !insn.addr !12278

dec_label_pc_1b166:                               ; preds = %dec_label_pc_1b13f
  %138 = load i64, i64* %57, align 8, !insn.addr !12279
  store i64 %138, i64* %stack_var_-96.0.in.reg2mem, !insn.addr !12280
  br label %dec_label_pc_1b171, !insn.addr !12280

dec_label_pc_1b171:                               ; preds = %dec_label_pc_1b166, %dec_label_pc_1b13f
  %stack_var_-96.0.in.reload = load i64, i64* %stack_var_-96.0.in.reg2mem
  %139 = add i64 %r12.0.reload, ptrtoint (i16* @global_var_4 to i64), !insn.addr !12281
  %140 = trunc i64 %139 to i16, !insn.addr !12282
  store i32 %stack_var_-112.126.reload, i32* %stack_var_-112.0.reg2mem, !insn.addr !12283
  store i16 %140, i16* %stack_var_-104.1.reg2mem, !insn.addr !12283
  br i1 %60, label %dec_label_pc_1b1d5, label %dec_label_pc_1b181, !insn.addr !12283

dec_label_pc_1b181:                               ; preds = %dec_label_pc_1b171
  store i16 %140, i16* %stack_var_-104.0.reg2mem, !insn.addr !12284
  br i1 %62, label %dec_label_pc_1b191, label %dec_label_pc_1b185, !insn.addr !12284

dec_label_pc_1b185:                               ; preds = %dec_label_pc_1b181
  %141 = inttoptr i64 %139 to i8*, !insn.addr !12285
  %142 = load i8, i8* %141, align 1, !insn.addr !12285
  %143 = zext i8 %142 to i64, !insn.addr !12285
  %144 = mul i64 %143, ptrtoint (i32* @global_var_1 to i64), !insn.addr !12286
  %145 = add i64 %r12.0.reload, add (i64 ptrtoint (i16* @global_var_4 to i64), i64 ptrtoint (i32* @global_var_1 to i64)), !insn.addr !12286
  %146 = add i64 %145, %144, !insn.addr !12286
  %147 = trunc i64 %146 to i16, !insn.addr !12287
  store i16 %147, i16* %stack_var_-104.0.reg2mem, !insn.addr !12287
  br label %dec_label_pc_1b191, !insn.addr !12287

dec_label_pc_1b191:                               ; preds = %dec_label_pc_1b185, %dec_label_pc_1b181
  %stack_var_-104.0.reload = load i16, i16* %stack_var_-104.0.reg2mem
  %148 = trunc i64 %r12.0.reload to i32, !insn.addr !12288
  %149 = sext i16 %stack_var_-104.0.reload to i32, !insn.addr !12289
  %150 = sub i32 %148, %149, !insn.addr !12289
  %151 = add i32 %150, 188, !insn.addr !12290
  store i32 %151, i32* %stack_var_-112.0.reg2mem, !insn.addr !12291
  store i16 %stack_var_-104.0.reload, i16* %stack_var_-104.1.reg2mem, !insn.addr !12291
  br i1 %63, label %dec_label_pc_1b1d5, label %dec_label_pc_1b1a3, !insn.addr !12291

dec_label_pc_1b1a3:                               ; preds = %dec_label_pc_1b191
  %152 = add i64 %stack_var_-96.0.in.reload, 328, !insn.addr !12292
  %153 = inttoptr i64 %152 to i64*, !insn.addr !12292
  %154 = load i64, i64* %153, align 8, !insn.addr !12292
  %155 = icmp eq i64 %154, 0, !insn.addr !12293
  store i32 %151, i32* %stack_var_-112.0.reg2mem, !insn.addr !12294
  store i16 %stack_var_-104.0.reload, i16* %stack_var_-104.1.reg2mem, !insn.addr !12294
  br i1 %155, label %dec_label_pc_1b1d5, label %dec_label_pc_1b1b3, !insn.addr !12294

dec_label_pc_1b1b3:                               ; preds = %dec_label_pc_1b1a3
  %156 = trunc i64 %154 to i32, !insn.addr !12295
  %157 = icmp slt i32 %156, 0, !insn.addr !12295
  %158 = icmp eq i1 %157, false, !insn.addr !12296
  store i64 %r12.0.reload, i64* %r12.2.reg2mem, !insn.addr !12296
  br i1 %158, label %dec_label_pc_1b1cf, label %dec_label_pc_1b957, !insn.addr !12296

dec_label_pc_1b1cf:                               ; preds = %dec_label_pc_1b1b3
  %159 = add i64 %r12.0.reload, ptrtoint (i8** @global_var_3 to i64), !insn.addr !12297
  %160 = inttoptr i64 %159 to i8*, !insn.addr !12297
  %161 = load i8, i8* %160, align 1, !insn.addr !12297
  %162 = urem i8 %161, 64, !insn.addr !12297
  store i8 %162, i8* %160, align 1, !insn.addr !12297
  store i32 %151, i32* %stack_var_-112.0.reg2mem, !insn.addr !12297
  store i16 %stack_var_-104.0.reload, i16* %stack_var_-104.1.reg2mem, !insn.addr !12297
  br label %dec_label_pc_1b1d5, !insn.addr !12297

dec_label_pc_1b1d5:                               ; preds = %dec_label_pc_1b1cf, %dec_label_pc_1b1a3, %dec_label_pc_1b191, %dec_label_pc_1b171
  %163 = call i64 @append_work_buffer.72(i64 %19, i64 %r12.0.reload, i32 188), !insn.addr !12298
  %164 = trunc i64 %163 to i32, !insn.addr !12299
  %165 = icmp eq i32 %164, 0, !insn.addr !12299
  %166 = icmp eq i1 %165, false, !insn.addr !12300
  store i64 %r12.0.reload, i64* %r12.2.reg2mem, !insn.addr !12300
  br i1 %166, label %dec_label_pc_1b1f8, label %dec_label_pc_1b957, !insn.addr !12300

dec_label_pc_1b1f8:                               ; preds = %dec_label_pc_1b1d5
  %stack_var_-104.1.reload = load i16, i16* %stack_var_-104.1.reg2mem
  %stack_var_-112.0.reload = load i32, i32* %stack_var_-112.0.reg2mem
  %167 = add i64 %stack_var_-96.0.in.reload, 160, !insn.addr !12301
  %168 = inttoptr i64 %167 to i32*, !insn.addr !12301
  %169 = load i32, i32* %168, align 4, !insn.addr !12301
  %170 = icmp eq i32 %169, %1, !insn.addr !12301
  %171 = icmp eq i1 %170, false, !insn.addr !12302
  br i1 %171, label %dec_label_pc_1b2bc, label %dec_label_pc_1b209, !insn.addr !12302

dec_label_pc_1b209:                               ; preds = %dec_label_pc_1b1f8
  %172 = add i64 %stack_var_-96.0.in.reload, 240, !insn.addr !12303
  %173 = sext i16 %stack_var_-104.1.reload to i64, !insn.addr !12304
  %174 = call i64 @set_ts_section_data.73(i64 %172, i64* nonnull %stack_var_-88, i64 %173, i32 %stack_var_-112.0.reload), !insn.addr !12305
  %175 = trunc i64 %174 to i32, !insn.addr !12306
  %176 = icmp slt i32 %175, 0, !insn.addr !12307
  store i64 %r12.0.reload, i64* %r12.2.reg2mem, !insn.addr !12308
  br i1 %176, label %dec_label_pc_1b957, label %dec_label_pc_1b231, !insn.addr !12308

dec_label_pc_1b231:                               ; preds = %dec_label_pc_1b209
  %177 = call i64 @check_ts_section.41(i64 %172), !insn.addr !12309
  %178 = trunc i64 %177 to i32, !insn.addr !12310
  %179 = icmp eq i32 %178, 0, !insn.addr !12310
  br i1 %179, label %dec_label_pc_1b8f9.backedge, label %dec_label_pc_1b241, !insn.addr !12311

dec_label_pc_1b241:                               ; preds = %dec_label_pc_1b231
  %180 = call i64 @check_ts_section_crc.47(i64 %172), !insn.addr !12312
  %181 = trunc i64 %180 to i32, !insn.addr !12313
  %182 = icmp eq i32 %181, 0, !insn.addr !12313
  br i1 %182, label %dec_label_pc_1b274, label %dec_label_pc_1b24d, !insn.addr !12314

dec_label_pc_1b24d:                               ; preds = %dec_label_pc_1b241
  %183 = add i64 %stack_var_-96.0.in.reload, 296, !insn.addr !12315
  %184 = inttoptr i64 %183 to i32*, !insn.addr !12315
  %185 = load i32, i32* %184, align 4, !insn.addr !12315
  %186 = icmp eq i32 %185, 0, !insn.addr !12315
  br i1 %186, label %dec_label_pc_1b274, label %dec_label_pc_1b25a, !insn.addr !12316

dec_label_pc_1b25a:                               ; preds = %dec_label_pc_1b24d
  %187 = add i64 %stack_var_-96.0.in.reload, 168, !insn.addr !12317
  %188 = call i64 @compare_ts_section.67(i64 %187), !insn.addr !12318
  %189 = trunc i64 %188 to i32, !insn.addr !12319
  %190 = icmp eq i32 %189, 0, !insn.addr !12319
  %191 = icmp eq i1 %190, false, !insn.addr !12320
  br i1 %191, label %dec_label_pc_1b285, label %dec_label_pc_1b274, !insn.addr !12320

dec_label_pc_1b274:                               ; preds = %dec_label_pc_1b25a, %dec_label_pc_1b24d, %dec_label_pc_1b241
  %192 = call i64 @reset_ts_section.49(i64 %172), !insn.addr !12321
  br label %dec_label_pc_1b8f9.backedge, !insn.addr !12322

dec_label_pc_1b8f9.backedge:                      ; preds = %dec_label_pc_1b231, %dec_label_pc_1b285, %dec_label_pc_1b2ee, %dec_label_pc_1b458, %dec_label_pc_1b4b2, %dec_label_pc_1b4e2, %dec_label_pc_1b51b, %dec_label_pc_1b575, %dec_label_pc_1b673, %dec_label_pc_1b6cd, %dec_label_pc_1b7b3, %dec_label_pc_1b801, %dec_label_pc_1b835, %dec_label_pc_1b860, %dec_label_pc_1b274, %dec_label_pc_1b32e, %dec_label_pc_1b49d, %dec_label_pc_1b560, %dec_label_pc_1b6b8, %dec_label_pc_1b7ef, %dec_label_pc_1b8a5
  %r12.1.be = add i64 %r12.0.reload, %44
  %193 = add i64 %r12.1.be, 188, !insn.addr !12226
  %194 = icmp ult i64 %16, %193, !insn.addr !12227
  %195 = icmp eq i1 %194, false, !insn.addr !12228
  store i64 %r12.1.be, i64* %r12.127.reg2mem, !insn.addr !12228
  store i32 %stack_var_-112.0.reload, i32* %stack_var_-112.126.reg2mem, !insn.addr !12228
  store i64 %r12.1.be, i64* %r12.2.reg2mem, !insn.addr !12228
  br i1 %195, label %dec_label_pc_1b093, label %dec_label_pc_1b957, !insn.addr !12228

dec_label_pc_1b285:                               ; preds = %dec_label_pc_1b25a
  %sext = mul i64 %187, 281474976710656
  %196 = sdiv i64 %sext, 281474976710656, !insn.addr !12323
  %197 = call i64 @swap_ts_section.54(i64 %196, i64 %172), !insn.addr !12324
  %198 = call i64 @reset_ts_section.49(i64 %172), !insn.addr !12325
  %199 = load i64, i64* %65, align 8, !insn.addr !12326
  %200 = call i64 @proc_ecm.66(i64 %stack_var_-96.0.in.reload, i64 %199), !insn.addr !12327
  %201 = trunc i64 %200 to i32, !insn.addr !12328
  %202 = icmp slt i32 %201, 0, !insn.addr !12329
  %203 = icmp eq i1 %202, false, !insn.addr !12330
  store i64 %r12.0.reload, i64* %r12.2.reg2mem, !insn.addr !12330
  br i1 %203, label %dec_label_pc_1b8f9.backedge, label %dec_label_pc_1b957, !insn.addr !12330

dec_label_pc_1b2bc:                               ; preds = %dec_label_pc_1b1f8
  %stack_var_-96.0 = inttoptr i64 %stack_var_-96.0.in.reload to i32*
  %204 = load i32, i32* %stack_var_-96.0, align 4, !insn.addr !12331
  %205 = icmp eq i32 %204, %1, !insn.addr !12331
  %206 = icmp eq i1 %205, false, !insn.addr !12332
  br i1 %206, label %dec_label_pc_1b382, label %dec_label_pc_1b2c9, !insn.addr !12332

dec_label_pc_1b2c9:                               ; preds = %dec_label_pc_1b2bc
  %207 = add i64 %stack_var_-96.0.in.reload, 80, !insn.addr !12333
  %208 = sext i16 %stack_var_-104.1.reload to i64, !insn.addr !12334
  %209 = call i64 @set_ts_section_data.73(i64 %207, i64* nonnull %stack_var_-88, i64 %208, i32 %stack_var_-112.0.reload), !insn.addr !12335
  %210 = trunc i64 %209 to i32, !insn.addr !12336
  %211 = icmp slt i32 %210, 0, !insn.addr !12337
  store i64 %r12.0.reload, i64* %r12.2.reg2mem, !insn.addr !12338
  br i1 %211, label %dec_label_pc_1b957, label %dec_label_pc_1b2ee, !insn.addr !12338

dec_label_pc_1b2ee:                               ; preds = %dec_label_pc_1b2c9
  %212 = call i64 @check_ts_section.41(i64 %207), !insn.addr !12339
  %213 = trunc i64 %212 to i32, !insn.addr !12340
  %214 = icmp eq i32 %213, 0, !insn.addr !12340
  br i1 %214, label %dec_label_pc_1b8f9.backedge, label %dec_label_pc_1b2fe, !insn.addr !12341

dec_label_pc_1b2fe:                               ; preds = %dec_label_pc_1b2ee
  %215 = call i64 @check_ts_section_crc.47(i64 %207), !insn.addr !12342
  %216 = trunc i64 %215 to i32, !insn.addr !12343
  %217 = icmp eq i32 %216, 0, !insn.addr !12343
  br i1 %217, label %dec_label_pc_1b32e, label %dec_label_pc_1b30a, !insn.addr !12344

dec_label_pc_1b30a:                               ; preds = %dec_label_pc_1b2fe
  %218 = add i64 %stack_var_-96.0.in.reload, 136, !insn.addr !12345
  %219 = inttoptr i64 %218 to i32*, !insn.addr !12345
  %220 = load i32, i32* %219, align 4, !insn.addr !12345
  %221 = icmp eq i32 %220, 0, !insn.addr !12345
  br i1 %221, label %dec_label_pc_1b32e, label %dec_label_pc_1b317, !insn.addr !12346

dec_label_pc_1b317:                               ; preds = %dec_label_pc_1b30a
  %222 = add i64 %stack_var_-96.0.in.reload, 8, !insn.addr !12347
  %223 = call i64 @compare_ts_section.67(i64 %222), !insn.addr !12348
  %224 = trunc i64 %223 to i32, !insn.addr !12349
  %225 = icmp eq i32 %224, 0, !insn.addr !12349
  %226 = icmp eq i1 %225, false, !insn.addr !12350
  br i1 %226, label %dec_label_pc_1b33f, label %dec_label_pc_1b32e, !insn.addr !12350

dec_label_pc_1b32e:                               ; preds = %dec_label_pc_1b317, %dec_label_pc_1b30a, %dec_label_pc_1b2fe
  %227 = call i64 @reset_ts_section.49(i64 %207), !insn.addr !12351
  br label %dec_label_pc_1b8f9.backedge, !insn.addr !12352

dec_label_pc_1b33f:                               ; preds = %dec_label_pc_1b317
  %sext6 = mul i64 %222, 281474976710656
  %228 = sdiv i64 %sext6, 281474976710656, !insn.addr !12353
  %229 = call i64 @swap_ts_section.54(i64 %228, i64 %207), !insn.addr !12354
  %230 = call i64 @reset_ts_section.49(i64 %207), !insn.addr !12355
  %231 = trunc i64 %stack_var_-96.0.in.reload to i32, !insn.addr !12356
  %232 = call i64 @proc_pmt.61(i32 %231), !insn.addr !12356
  %233 = trunc i64 %232 to i32, !insn.addr !12357
  %234 = icmp slt i32 %233, 0, !insn.addr !12357
  store i64 %r12.0.reload, i64* %r12.2.reg2mem, !insn.addr !12358
  br i1 %234, label %dec_label_pc_1b957, label %dec_label_pc_1b36a, !insn.addr !12358

dec_label_pc_1b36a:                               ; preds = %dec_label_pc_1b33f
  %235 = call i64 @setup_pid_map.50(i64 %4), !insn.addr !12359
  %236 = mul i64 %44, ptrtoint (i32* @global_var_1 to i64), !insn.addr !12360
  %237 = add i64 %r12.0.reload, %236, !insn.addr !12360
  store i64 %237, i64* %r12.2.reg2mem, !insn.addr !12361
  br label %dec_label_pc_1b957, !insn.addr !12361

dec_label_pc_1b382:                               ; preds = %dec_label_pc_1b2bc
  %238 = load i32, i32* %67, align 4, !insn.addr !12362
  %239 = icmp eq i32 %238, %1, !insn.addr !12362
  %240 = icmp eq i1 %239, false, !insn.addr !12363
  br i1 %240, label %dec_label_pc_1b4ef, label %dec_label_pc_1b38f, !insn.addr !12363

dec_label_pc_1b38f:                               ; preds = %dec_label_pc_1b382
  %241 = sext i16 %stack_var_-104.1.reload to i64, !insn.addr !12364
  %242 = call i64 @set_ts_section_data_for_remaining_payload_data.75(i64 %33, i64* nonnull %stack_var_-88, i64 %241), !insn.addr !12365
  %243 = call i64 @check_ts_section.41(i64 %33), !insn.addr !12366
  %244 = trunc i64 %243 to i32, !insn.addr !12367
  %245 = icmp eq i32 %244, 0, !insn.addr !12367
  br i1 %245, label %dec_label_pc_1b436, label %dec_label_pc_1b3b9, !insn.addr !12368

dec_label_pc_1b3b9:                               ; preds = %dec_label_pc_1b38f
  %246 = call i64 @check_ts_section_crc.47(i64 %33), !insn.addr !12369
  %247 = trunc i64 %246 to i32, !insn.addr !12370
  %248 = icmp eq i32 %247, 0, !insn.addr !12370
  br i1 %248, label %dec_label_pc_1b3ea, label %dec_label_pc_1b3c9, !insn.addr !12371

dec_label_pc_1b3c9:                               ; preds = %dec_label_pc_1b3b9
  %249 = load i32, i32* %69, align 4, !insn.addr !12372
  %250 = icmp eq i32 %249, 0, !insn.addr !12372
  br i1 %250, label %dec_label_pc_1b3ea, label %dec_label_pc_1b3d3, !insn.addr !12373

dec_label_pc_1b3d3:                               ; preds = %dec_label_pc_1b3c9
  %251 = call i64 @compare_ts_section.67(i64 %34), !insn.addr !12374
  %252 = trunc i64 %251 to i32, !insn.addr !12375
  %253 = icmp eq i32 %252, 0, !insn.addr !12375
  %254 = icmp eq i1 %253, false, !insn.addr !12376
  br i1 %254, label %dec_label_pc_1b3f8, label %dec_label_pc_1b3ea, !insn.addr !12376

dec_label_pc_1b3ea:                               ; preds = %dec_label_pc_1b3d3, %dec_label_pc_1b3c9, %dec_label_pc_1b3b9
  %255 = call i64 @reset_ts_section.49(i64 %33), !insn.addr !12377
  br label %dec_label_pc_1b436, !insn.addr !12378

dec_label_pc_1b3f8:                               ; preds = %dec_label_pc_1b3d3
  %256 = call i64 @swap_ts_section.54(i64 %34, i64 %33), !insn.addr !12379
  %257 = call i64 @reset_ts_section.49(i64 %33), !insn.addr !12380
  %258 = load i32, i32* %71, align 4, !insn.addr !12381
  %259 = icmp eq i32 %258, 132, !insn.addr !12381
  %260 = icmp eq i1 %259, false, !insn.addr !12382
  br i1 %260, label %dec_label_pc_1b436, label %dec_label_pc_1b424, !insn.addr !12382

dec_label_pc_1b424:                               ; preds = %dec_label_pc_1b3f8
  %261 = trunc i64 %242 to i32, !insn.addr !12383
  %262 = call i64 @proc_emm.55(i64 %4), !insn.addr !12384
  %263 = icmp slt i32 %261, 0, !insn.addr !12385
  store i64 %r12.0.reload, i64* %r12.2.reg2mem, !insn.addr !12386
  br i1 %263, label %dec_label_pc_1b957, label %dec_label_pc_1b436, !insn.addr !12386

dec_label_pc_1b436:                               ; preds = %dec_label_pc_1b424, %dec_label_pc_1b3f8, %dec_label_pc_1b3ea, %dec_label_pc_1b38f
  %264 = call i64 @set_ts_section_data.73(i64 %33, i64* nonnull %stack_var_-88, i64 %241, i32 %stack_var_-112.0.reload), !insn.addr !12387
  %265 = trunc i64 %264 to i32, !insn.addr !12388
  %266 = icmp slt i32 %265, 0, !insn.addr !12389
  store i64 %r12.0.reload, i64* %r12.2.reg2mem, !insn.addr !12390
  br i1 %266, label %dec_label_pc_1b957, label %dec_label_pc_1b458, !insn.addr !12390

dec_label_pc_1b458:                               ; preds = %dec_label_pc_1b436
  %267 = call i64 @check_ts_section.41(i64 %33), !insn.addr !12391
  %268 = trunc i64 %267 to i32, !insn.addr !12392
  %269 = icmp eq i32 %268, 0, !insn.addr !12392
  br i1 %269, label %dec_label_pc_1b8f9.backedge, label %dec_label_pc_1b46c, !insn.addr !12393

dec_label_pc_1b46c:                               ; preds = %dec_label_pc_1b458
  %270 = call i64 @check_ts_section_crc.47(i64 %33), !insn.addr !12394
  %271 = trunc i64 %270 to i32, !insn.addr !12395
  %272 = icmp eq i32 %271, 0, !insn.addr !12395
  br i1 %272, label %dec_label_pc_1b49d, label %dec_label_pc_1b47c, !insn.addr !12396

dec_label_pc_1b47c:                               ; preds = %dec_label_pc_1b46c
  %273 = load i32, i32* %69, align 4, !insn.addr !12397
  %274 = icmp eq i32 %273, 0, !insn.addr !12397
  br i1 %274, label %dec_label_pc_1b49d, label %dec_label_pc_1b486, !insn.addr !12398

dec_label_pc_1b486:                               ; preds = %dec_label_pc_1b47c
  %275 = call i64 @compare_ts_section.67(i64 %34), !insn.addr !12399
  %276 = trunc i64 %275 to i32, !insn.addr !12400
  %277 = icmp eq i32 %276, 0, !insn.addr !12400
  %278 = icmp eq i1 %277, false, !insn.addr !12401
  br i1 %278, label %dec_label_pc_1b4b2, label %dec_label_pc_1b49d, !insn.addr !12401

dec_label_pc_1b49d:                               ; preds = %dec_label_pc_1b486, %dec_label_pc_1b47c, %dec_label_pc_1b46c
  %279 = call i64 @reset_ts_section.49(i64 %33), !insn.addr !12402
  br label %dec_label_pc_1b8f9.backedge, !insn.addr !12403

dec_label_pc_1b4b2:                               ; preds = %dec_label_pc_1b486
  %280 = call i64 @swap_ts_section.54(i64 %34, i64 %33), !insn.addr !12404
  %281 = call i64 @reset_ts_section.49(i64 %33), !insn.addr !12405
  %282 = load i32, i32* %71, align 4, !insn.addr !12406
  %283 = icmp eq i32 %282, 132, !insn.addr !12406
  %284 = icmp eq i1 %283, false, !insn.addr !12407
  br i1 %284, label %dec_label_pc_1b8f9.backedge, label %dec_label_pc_1b4e2, !insn.addr !12407

dec_label_pc_1b4e2:                               ; preds = %dec_label_pc_1b4b2
  %285 = call i64 @proc_emm.55(i64 %4), !insn.addr !12408
  br label %dec_label_pc_1b8f9.backedge, !insn.addr !12409

dec_label_pc_1b4ef:                               ; preds = %dec_label_pc_1b382
  br i1 %73, label %dec_label_pc_1b5af, label %dec_label_pc_1b4f9, !insn.addr !12410

dec_label_pc_1b4f9:                               ; preds = %dec_label_pc_1b4ef
  %286 = sext i16 %stack_var_-104.1.reload to i64, !insn.addr !12411
  %287 = call i64 @set_ts_section_data.73(i64 %35, i64* nonnull %stack_var_-88, i64 %286, i32 %stack_var_-112.0.reload), !insn.addr !12412
  %288 = trunc i64 %287 to i32, !insn.addr !12413
  %289 = icmp slt i32 %288, 0, !insn.addr !12414
  store i64 %r12.0.reload, i64* %r12.2.reg2mem, !insn.addr !12415
  br i1 %289, label %dec_label_pc_1b957, label %dec_label_pc_1b51b, !insn.addr !12415

dec_label_pc_1b51b:                               ; preds = %dec_label_pc_1b4f9
  %290 = call i64 @check_ts_section.41(i64 %35), !insn.addr !12416
  %291 = trunc i64 %290 to i32, !insn.addr !12417
  %292 = icmp eq i32 %291, 0, !insn.addr !12417
  br i1 %292, label %dec_label_pc_1b8f9.backedge, label %dec_label_pc_1b52f, !insn.addr !12418

dec_label_pc_1b52f:                               ; preds = %dec_label_pc_1b51b
  %293 = call i64 @check_ts_section_crc.47(i64 %35), !insn.addr !12419
  %294 = trunc i64 %293 to i32, !insn.addr !12420
  %295 = icmp eq i32 %294, 0, !insn.addr !12420
  br i1 %295, label %dec_label_pc_1b560, label %dec_label_pc_1b53f, !insn.addr !12421

dec_label_pc_1b53f:                               ; preds = %dec_label_pc_1b52f
  %296 = load i32, i32* %75, align 4, !insn.addr !12422
  %297 = icmp eq i32 %296, 0, !insn.addr !12422
  br i1 %297, label %dec_label_pc_1b560, label %dec_label_pc_1b549, !insn.addr !12423

dec_label_pc_1b549:                               ; preds = %dec_label_pc_1b53f
  %298 = call i64 @compare_ts_section.67(i64 %36), !insn.addr !12424
  %299 = trunc i64 %298 to i32, !insn.addr !12425
  %300 = icmp eq i32 %299, 0, !insn.addr !12425
  %301 = icmp eq i1 %300, false, !insn.addr !12426
  br i1 %301, label %dec_label_pc_1b575, label %dec_label_pc_1b560, !insn.addr !12426

dec_label_pc_1b560:                               ; preds = %dec_label_pc_1b549, %dec_label_pc_1b53f, %dec_label_pc_1b52f
  %302 = call i64 @reset_ts_section.49(i64 %35), !insn.addr !12427
  br label %dec_label_pc_1b8f9.backedge, !insn.addr !12428

dec_label_pc_1b575:                               ; preds = %dec_label_pc_1b549
  %303 = call i64 @swap_ts_section.54(i64 %36, i64 %35), !insn.addr !12429
  %304 = call i64 @reset_ts_section.49(i64 %35), !insn.addr !12430
  %305 = call i64 @proc_cat.39(i64 %4), !insn.addr !12431
  %306 = trunc i64 %305 to i32, !insn.addr !12432
  %307 = icmp slt i32 %306, 0, !insn.addr !12433
  %308 = icmp eq i1 %307, false, !insn.addr !12434
  store i64 %r12.0.reload, i64* %r12.2.reg2mem, !insn.addr !12434
  br i1 %308, label %dec_label_pc_1b8f9.backedge, label %dec_label_pc_1b957, !insn.addr !12434

dec_label_pc_1b5af:                               ; preds = %dec_label_pc_1b4ef
  br i1 %77, label %dec_label_pc_1b707, label %dec_label_pc_1b5b9, !insn.addr !12435

dec_label_pc_1b5b9:                               ; preds = %dec_label_pc_1b5af
  %309 = sext i16 %stack_var_-104.1.reload to i64, !insn.addr !12436
  %310 = call i64 @set_ts_section_data_for_remaining_payload_data.75(i64 %37, i64* nonnull %stack_var_-88, i64 %309), !insn.addr !12437
  %311 = call i64 @check_ts_section.41(i64 %37), !insn.addr !12438
  %312 = trunc i64 %311 to i32, !insn.addr !12439
  %313 = icmp eq i32 %312, 0, !insn.addr !12439
  br i1 %313, label %dec_label_pc_1b651, label %dec_label_pc_1b5e0, !insn.addr !12440

dec_label_pc_1b5e0:                               ; preds = %dec_label_pc_1b5b9
  %314 = call i64 @check_ts_section_crc.47(i64 %37), !insn.addr !12441
  %315 = trunc i64 %314 to i32, !insn.addr !12442
  %316 = icmp eq i32 %315, 0, !insn.addr !12442
  br i1 %316, label %dec_label_pc_1b611, label %dec_label_pc_1b5f0, !insn.addr !12443

dec_label_pc_1b5f0:                               ; preds = %dec_label_pc_1b5e0
  %317 = load i32, i32* %79, align 4, !insn.addr !12444
  %318 = icmp eq i32 %317, 0, !insn.addr !12444
  br i1 %318, label %dec_label_pc_1b611, label %dec_label_pc_1b5fa, !insn.addr !12445

dec_label_pc_1b5fa:                               ; preds = %dec_label_pc_1b5f0
  %319 = call i64 @compare_ts_section.67(i64 %38), !insn.addr !12446
  %320 = trunc i64 %319 to i32, !insn.addr !12447
  %321 = icmp eq i32 %320, 0, !insn.addr !12447
  %322 = icmp eq i1 %321, false, !insn.addr !12448
  br i1 %322, label %dec_label_pc_1b61f, label %dec_label_pc_1b611, !insn.addr !12448

dec_label_pc_1b611:                               ; preds = %dec_label_pc_1b5fa, %dec_label_pc_1b5f0, %dec_label_pc_1b5e0
  %323 = call i64 @reset_ts_section.49(i64 %37), !insn.addr !12449
  br label %dec_label_pc_1b651, !insn.addr !12450

dec_label_pc_1b61f:                               ; preds = %dec_label_pc_1b5fa
  %324 = call i64 @swap_ts_section.54(i64 %38, i64 %37), !insn.addr !12451
  %325 = call i64 @reset_ts_section.49(i64 %37), !insn.addr !12452
  %326 = call i64 @proc_sdt.56(i64 %4, i64 %37, i64 %309), !insn.addr !12453
  %327 = trunc i64 %326 to i32, !insn.addr !12454
  %328 = icmp slt i32 %327, 0, !insn.addr !12455
  store i64 %r12.0.reload, i64* %r12.2.reg2mem, !insn.addr !12456
  br i1 %328, label %dec_label_pc_1b957, label %dec_label_pc_1b651, !insn.addr !12456

dec_label_pc_1b651:                               ; preds = %dec_label_pc_1b61f, %dec_label_pc_1b611, %dec_label_pc_1b5b9
  %329 = call i64 @set_ts_section_data.73(i64 %37, i64* nonnull %stack_var_-88, i64 %309, i32 %stack_var_-112.0.reload), !insn.addr !12457
  %330 = trunc i64 %329 to i32, !insn.addr !12458
  %331 = icmp slt i32 %330, 0, !insn.addr !12459
  store i64 %r12.0.reload, i64* %r12.2.reg2mem, !insn.addr !12460
  br i1 %331, label %dec_label_pc_1b957, label %dec_label_pc_1b673, !insn.addr !12460

dec_label_pc_1b673:                               ; preds = %dec_label_pc_1b651
  %332 = call i64 @check_ts_section.41(i64 %37), !insn.addr !12461
  %333 = trunc i64 %332 to i32, !insn.addr !12462
  %334 = icmp eq i32 %333, 0, !insn.addr !12462
  br i1 %334, label %dec_label_pc_1b8f9.backedge, label %dec_label_pc_1b687, !insn.addr !12463

dec_label_pc_1b687:                               ; preds = %dec_label_pc_1b673
  %335 = call i64 @check_ts_section_crc.47(i64 %37), !insn.addr !12464
  %336 = trunc i64 %335 to i32, !insn.addr !12465
  %337 = icmp eq i32 %336, 0, !insn.addr !12465
  br i1 %337, label %dec_label_pc_1b6b8, label %dec_label_pc_1b697, !insn.addr !12466

dec_label_pc_1b697:                               ; preds = %dec_label_pc_1b687
  %338 = load i32, i32* %79, align 4, !insn.addr !12467
  %339 = icmp eq i32 %338, 0, !insn.addr !12467
  br i1 %339, label %dec_label_pc_1b6b8, label %dec_label_pc_1b6a1, !insn.addr !12468

dec_label_pc_1b6a1:                               ; preds = %dec_label_pc_1b697
  %340 = call i64 @compare_ts_section.67(i64 %38), !insn.addr !12469
  %341 = trunc i64 %340 to i32, !insn.addr !12470
  %342 = icmp eq i32 %341, 0, !insn.addr !12470
  %343 = icmp eq i1 %342, false, !insn.addr !12471
  br i1 %343, label %dec_label_pc_1b6cd, label %dec_label_pc_1b6b8, !insn.addr !12471

dec_label_pc_1b6b8:                               ; preds = %dec_label_pc_1b6a1, %dec_label_pc_1b697, %dec_label_pc_1b687
  %344 = call i64 @reset_ts_section.49(i64 %37), !insn.addr !12472
  br label %dec_label_pc_1b8f9.backedge, !insn.addr !12473

dec_label_pc_1b6cd:                               ; preds = %dec_label_pc_1b6a1
  %345 = call i64 @swap_ts_section.54(i64 %38, i64 %37), !insn.addr !12474
  %346 = call i64 @reset_ts_section.49(i64 %37), !insn.addr !12475
  %347 = call i64 @proc_sdt.56(i64 %4, i64 %37, i64 %309), !insn.addr !12476
  %348 = trunc i64 %347 to i32, !insn.addr !12477
  %349 = icmp slt i32 %348, 0, !insn.addr !12478
  %350 = icmp eq i1 %349, false, !insn.addr !12479
  store i64 %r12.0.reload, i64* %r12.2.reg2mem, !insn.addr !12479
  br i1 %350, label %dec_label_pc_1b8f9.backedge, label %dec_label_pc_1b957, !insn.addr !12479

dec_label_pc_1b707:                               ; preds = %dec_label_pc_1b5af
  br i1 %81, label %dec_label_pc_1b835, label %dec_label_pc_1b711, !insn.addr !12480

dec_label_pc_1b711:                               ; preds = %dec_label_pc_1b707
  %351 = sext i16 %stack_var_-104.1.reload to i64, !insn.addr !12481
  %352 = call i64 @set_ts_section_data_for_remaining_payload_data.75(i64 %39, i64* nonnull %stack_var_-88, i64 %351), !insn.addr !12482
  %353 = call i64 @check_ts_section.41(i64 %39), !insn.addr !12483
  %354 = trunc i64 %353 to i32, !insn.addr !12484
  %355 = icmp eq i32 %354, 0, !insn.addr !12484
  br i1 %355, label %dec_label_pc_1b794, label %dec_label_pc_1b732, !insn.addr !12485

dec_label_pc_1b732:                               ; preds = %dec_label_pc_1b711
  %356 = call i64 @check_ts_section_crc.47(i64 %39), !insn.addr !12486
  %357 = trunc i64 %356 to i32, !insn.addr !12487
  %358 = icmp eq i32 %357, 0, !insn.addr !12487
  br i1 %358, label %dec_label_pc_1b75d, label %dec_label_pc_1b73f, !insn.addr !12488

dec_label_pc_1b73f:                               ; preds = %dec_label_pc_1b732
  %359 = load i32, i32* %83, align 4, !insn.addr !12489
  %360 = icmp eq i32 %359, 0, !insn.addr !12489
  br i1 %360, label %dec_label_pc_1b75d, label %dec_label_pc_1b749, !insn.addr !12490

dec_label_pc_1b749:                               ; preds = %dec_label_pc_1b73f
  %361 = call i64 @compare_ts_section.67(i64 %40), !insn.addr !12491
  %362 = trunc i64 %361 to i32, !insn.addr !12492
  %363 = icmp eq i32 %362, 0, !insn.addr !12492
  %364 = icmp eq i1 %363, false, !insn.addr !12493
  br i1 %364, label %dec_label_pc_1b768, label %dec_label_pc_1b75d, !insn.addr !12493

dec_label_pc_1b75d:                               ; preds = %dec_label_pc_1b749, %dec_label_pc_1b73f, %dec_label_pc_1b732
  %365 = call i64 @reset_ts_section.49(i64 %39), !insn.addr !12494
  br label %dec_label_pc_1b794, !insn.addr !12495

dec_label_pc_1b768:                               ; preds = %dec_label_pc_1b749
  %366 = call i64 @swap_ts_section.54(i64 %40, i64 %39), !insn.addr !12496
  %367 = call i64 @reset_ts_section.49(i64 %39), !insn.addr !12497
  %368 = call i64 @proc_eit.57(i64 %4, i64 %39, i64 %351), !insn.addr !12498
  %369 = trunc i64 %368 to i32, !insn.addr !12499
  %370 = icmp slt i32 %369, 0, !insn.addr !12500
  store i64 %r12.0.reload, i64* %r12.2.reg2mem, !insn.addr !12501
  br i1 %370, label %dec_label_pc_1b957, label %dec_label_pc_1b794, !insn.addr !12501

dec_label_pc_1b794:                               ; preds = %dec_label_pc_1b768, %dec_label_pc_1b75d, %dec_label_pc_1b711
  %371 = call i64 @set_ts_section_data.73(i64 %39, i64* nonnull %stack_var_-88, i64 %351, i32 %stack_var_-112.0.reload), !insn.addr !12502
  %372 = trunc i64 %371 to i32, !insn.addr !12503
  %373 = icmp slt i32 %372, 0, !insn.addr !12504
  store i64 %r12.0.reload, i64* %r12.2.reg2mem, !insn.addr !12505
  br i1 %373, label %dec_label_pc_1b957, label %dec_label_pc_1b7b3, !insn.addr !12505

dec_label_pc_1b7b3:                               ; preds = %dec_label_pc_1b794
  %374 = call i64 @check_ts_section.41(i64 %39), !insn.addr !12506
  %375 = trunc i64 %374 to i32, !insn.addr !12507
  %376 = icmp eq i32 %375, 0, !insn.addr !12507
  br i1 %376, label %dec_label_pc_1b8f9.backedge, label %dec_label_pc_1b7c4, !insn.addr !12508

dec_label_pc_1b7c4:                               ; preds = %dec_label_pc_1b7b3
  %377 = call i64 @check_ts_section_crc.47(i64 %39), !insn.addr !12509
  %378 = trunc i64 %377 to i32, !insn.addr !12510
  %379 = icmp eq i32 %378, 0, !insn.addr !12510
  br i1 %379, label %dec_label_pc_1b7ef, label %dec_label_pc_1b7d1, !insn.addr !12511

dec_label_pc_1b7d1:                               ; preds = %dec_label_pc_1b7c4
  %380 = load i32, i32* %83, align 4, !insn.addr !12512
  %381 = icmp eq i32 %380, 0, !insn.addr !12512
  br i1 %381, label %dec_label_pc_1b7ef, label %dec_label_pc_1b7db, !insn.addr !12513

dec_label_pc_1b7db:                               ; preds = %dec_label_pc_1b7d1
  %382 = call i64 @compare_ts_section.67(i64 %40), !insn.addr !12514
  %383 = trunc i64 %382 to i32, !insn.addr !12515
  %384 = icmp eq i32 %383, 0, !insn.addr !12515
  %385 = icmp eq i1 %384, false, !insn.addr !12516
  br i1 %385, label %dec_label_pc_1b801, label %dec_label_pc_1b7ef, !insn.addr !12516

dec_label_pc_1b7ef:                               ; preds = %dec_label_pc_1b7db, %dec_label_pc_1b7d1, %dec_label_pc_1b7c4
  %386 = call i64 @reset_ts_section.49(i64 %39), !insn.addr !12517
  br label %dec_label_pc_1b8f9.backedge, !insn.addr !12518

dec_label_pc_1b801:                               ; preds = %dec_label_pc_1b7db
  %387 = call i64 @swap_ts_section.54(i64 %40, i64 %39), !insn.addr !12519
  %388 = call i64 @reset_ts_section.49(i64 %39), !insn.addr !12520
  %389 = call i64 @proc_eit.57(i64 %4, i64 %39, i64 %351), !insn.addr !12521
  %390 = trunc i64 %389 to i32, !insn.addr !12522
  %391 = icmp slt i32 %390, 0, !insn.addr !12523
  %392 = icmp eq i1 %391, false, !insn.addr !12524
  store i64 %r12.0.reload, i64* %r12.2.reg2mem, !insn.addr !12524
  br i1 %392, label %dec_label_pc_1b8f9.backedge, label %dec_label_pc_1b957, !insn.addr !12524

dec_label_pc_1b835:                               ; preds = %dec_label_pc_1b707
  br i1 %85, label %dec_label_pc_1b8f9.backedge, label %dec_label_pc_1b83e, !insn.addr !12525

dec_label_pc_1b83e:                               ; preds = %dec_label_pc_1b835
  %393 = sext i16 %stack_var_-104.1.reload to i64, !insn.addr !12526
  %394 = call i64 @set_ts_section_data.73(i64 %41, i64* nonnull %stack_var_-88, i64 %393, i32 %stack_var_-112.0.reload), !insn.addr !12527
  %395 = trunc i64 %394 to i32, !insn.addr !12528
  %396 = icmp slt i32 %395, 0, !insn.addr !12529
  store i64 %r12.0.reload, i64* %r12.2.reg2mem, !insn.addr !12530
  br i1 %396, label %dec_label_pc_1b957, label %dec_label_pc_1b860, !insn.addr !12530

dec_label_pc_1b860:                               ; preds = %dec_label_pc_1b83e
  %397 = call i64 @check_ts_section.41(i64 %41), !insn.addr !12531
  %398 = trunc i64 %397 to i32, !insn.addr !12532
  %399 = icmp eq i32 %398, 0, !insn.addr !12532
  br i1 %399, label %dec_label_pc_1b8f9.backedge, label %dec_label_pc_1b874, !insn.addr !12533

dec_label_pc_1b874:                               ; preds = %dec_label_pc_1b860
  %400 = call i64 @check_ts_section_crc.47(i64 %41), !insn.addr !12534
  %401 = trunc i64 %400 to i32, !insn.addr !12535
  %402 = icmp eq i32 %401, 0, !insn.addr !12535
  br i1 %402, label %dec_label_pc_1b8a5, label %dec_label_pc_1b884, !insn.addr !12536

dec_label_pc_1b884:                               ; preds = %dec_label_pc_1b874
  %403 = load i32, i32* %87, align 4, !insn.addr !12537
  %404 = icmp eq i32 %403, 0, !insn.addr !12537
  br i1 %404, label %dec_label_pc_1b8a5, label %dec_label_pc_1b88e, !insn.addr !12538

dec_label_pc_1b88e:                               ; preds = %dec_label_pc_1b884
  %405 = call i64 @compare_ts_section.67(i64 %42), !insn.addr !12539
  %406 = trunc i64 %405 to i32, !insn.addr !12540
  %407 = icmp eq i32 %406, 0, !insn.addr !12540
  %408 = icmp eq i1 %407, false, !insn.addr !12541
  br i1 %408, label %dec_label_pc_1b8b7, label %dec_label_pc_1b8a5, !insn.addr !12541

dec_label_pc_1b8a5:                               ; preds = %dec_label_pc_1b88e, %dec_label_pc_1b884, %dec_label_pc_1b874
  %409 = call i64 @reset_ts_section.49(i64 %41), !insn.addr !12542
  br label %dec_label_pc_1b8f9.backedge, !insn.addr !12543

dec_label_pc_1b8b7:                               ; preds = %dec_label_pc_1b88e
  %410 = call i64 @swap_ts_section.54(i64 %42, i64 %41), !insn.addr !12544
  %411 = call i64 @reset_ts_section.49(i64 %41), !insn.addr !12545
  %412 = call i64 @proc_pat.70(i64 %4), !insn.addr !12546
  %413 = trunc i64 %412 to i32, !insn.addr !12547
  %414 = icmp slt i32 %413, 0, !insn.addr !12547
  store i64 %r12.0.reload, i64* %r12.2.reg2mem, !insn.addr !12548
  br i1 %414, label %dec_label_pc_1b957, label %dec_label_pc_1b8e8, !insn.addr !12548

dec_label_pc_1b8e8:                               ; preds = %dec_label_pc_1b8b7
  %415 = mul i64 %44, ptrtoint (i32* @global_var_1 to i64), !insn.addr !12549
  %416 = add i64 %r12.0.reload, %415, !insn.addr !12549
  store i64 %416, i64* %r12.2.reg2mem, !insn.addr !12550
  br label %dec_label_pc_1b957, !insn.addr !12550

dec_label_pc_1b957:                               ; preds = %dec_label_pc_1b1b3, %dec_label_pc_1b1d5, %dec_label_pc_1b285, %dec_label_pc_1b575, %dec_label_pc_1b6cd, %dec_label_pc_1b801, %dec_label_pc_1b8f9.backedge, %dec_label_pc_1b09e, %dec_label_pc_1b133, %dec_label_pc_1b209, %dec_label_pc_1b2c9, %dec_label_pc_1b424, %dec_label_pc_1b436, %dec_label_pc_1b4f9, %dec_label_pc_1b61f, %dec_label_pc_1b651, %dec_label_pc_1b768, %dec_label_pc_1b794, %dec_label_pc_1b83e, %dec_label_pc_1b0a7, %dec_label_pc_1b11a, %dec_label_pc_1af74, %dec_label_pc_1b8e8, %dec_label_pc_1b8b7, %dec_label_pc_1b36a, %dec_label_pc_1b33f
  %417 = trunc i64 %16 to i32, !insn.addr !12551
  %r12.2.reload = load i64, i64* %r12.2.reg2mem
  %418 = load i64, i64* %12, align 8, !insn.addr !12552
  %419 = trunc i64 %r12.2.reload to i32, !insn.addr !12553
  %420 = sub i32 %417, %419, !insn.addr !12553
  %421 = icmp slt i32 %420, 1024, !insn.addr !12554
  %422 = sub i64 %r12.2.reload, %418
  %423 = and i64 %422, 4294967295
  %rcx.1 = select i1 %421, i64 %418, i64 %423
  %424 = add i64 %4, 67112, !insn.addr !12555
  %425 = inttoptr i64 %424 to i64*, !insn.addr !12555
  %426 = load i64, i64* %425, align 8, !insn.addr !12555
  %427 = sext i32 %420 to i64, !insn.addr !12556
  %428 = call i64 @memcpy(i64 %426, i64 %r12.2.reload, i64 %427, i64 %rcx.1), !insn.addr !12557
  ret i64 %428, !insn.addr !12557
}

define void @Set_Key(i8* %EncSeed, i64 %skeyPackage, i64 %pTable) local_unnamed_addr {
dec_label_pc_1b9a8:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = call i64 @__decompiler_undefined_function_0()
  %2 = call i64 @__decompiler_undefined_function_0()
  %3 = call i64 @__decompiler_undefined_function_0()
  %rax = alloca i64, align 8
  %4 = call i64 @__decompiler_undefined_function_0()
  %5 = xor i64 %4, %2
  %6 = trunc i64 %5 to i8, !insn.addr !12558
  %7 = inttoptr i64 %skeyPackage to i8*, !insn.addr !12558
  store i8 %6, i8* %7, align 1, !insn.addr !12558
  %8 = bitcast i64* %rax to i32*
  %9 = load i32, i32* %8, align 8, !insn.addr !12559
  %10 = load i64, i64* %rax, align 8
  %11 = trunc i64 %10 to i32, !insn.addr !12559
  %12 = add i32 %9, %11, !insn.addr !12559
  %13 = inttoptr i64 %10 to i32*, !insn.addr !12559
  store i32 %12, i32* %13, align 4, !insn.addr !12559
  %14 = mul i64 %3, ptrtoint (i32* @global_var_1 to i64), !insn.addr !12560
  %15 = add i64 %14, %0, !insn.addr !12560
  %16 = add i64 %1, 67128, !insn.addr !12561
  %17 = inttoptr i64 %16 to i64*, !insn.addr !12561
  store i64 %15, i64* %17, align 8, !insn.addr !12561
  ret void, !insn.addr !12562
}

define i64 @Set_Key.493(i64 %arg1, i64* %arg2, i64 %arg3) local_unnamed_addr {
dec_label_pc_1b9d8:
  %r12.0.reg2mem = alloca i64, !insn.addr !12563
  %rbx.0.reg2mem = alloca i64, !insn.addr !12563
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = call i64 @__decompiler_undefined_function_0()
  %stack_var_-104 = alloca i64, align 8
  %stack_var_-136 = alloca i64, align 8
  %2 = call i64 @mcount(), !insn.addr !12564
  %3 = call i64 @__readgsqword(i64 40), !insn.addr !12565
  %4 = ptrtoint i64* %stack_var_-136 to i64, !insn.addr !12566
  %5 = bitcast i64* %stack_var_-136 to i8*, !insn.addr !12567
  call void @__asm_rep_stosq_memset(i8* nonnull %5, i64 0, i64 ptrtoint (i8* @global_var_8 to i64)), !insn.addr !12567
  %6 = ptrtoint i64* %stack_var_-104 to i64, !insn.addr !12568
  store i64 %4, i64* %rbx.0.reg2mem, !insn.addr !12569
  store i64 %arg1, i64* %r12.0.reg2mem, !insn.addr !12569
  br label %dec_label_pc_1ba24, !insn.addr !12569

dec_label_pc_1ba24:                               ; preds = %dec_label_pc_1ba24, %dec_label_pc_1b9d8
  %r12.0.reload = load i64, i64* %r12.0.reg2mem
  %rbx.0.reload = load i64, i64* %rbx.0.reg2mem
  %7 = inttoptr i64 %r12.0.reload to i8*, !insn.addr !12570
  %8 = load i8, i8* %7, align 1, !insn.addr !12570
  %9 = zext i8 %8 to i64, !insn.addr !12570
  %10 = call i64 @sprintf(i64 %rbx.0.reload, i64 0, i64 %9, i8 0, i64 %1, i64 %0), !insn.addr !12571
  %11 = add i64 %r12.0.reload, ptrtoint (i32* @global_var_1 to i64), !insn.addr !12572
  %12 = add i64 %rbx.0.reload, ptrtoint (i32* @global_var_2 to i64), !insn.addr !12573
  %13 = icmp eq i64 %12, %6, !insn.addr !12574
  %14 = icmp eq i1 %13, false, !insn.addr !12575
  store i64 %12, i64* %rbx.0.reg2mem, !insn.addr !12575
  store i64 %11, i64* %r12.0.reg2mem, !insn.addr !12575
  br i1 %14, label %dec_label_pc_1ba24, label %dec_label_pc_1ba46, !insn.addr !12575

dec_label_pc_1ba46:                               ; preds = %dec_label_pc_1ba24
  %15 = ptrtoint i64* %arg2 to i64
  %16 = add i64 %15, 756, !insn.addr !12576
  %17 = inttoptr i64 %16 to i64*, !insn.addr !12577
  %18 = call i64 @makeKey.363(i64* %17, i64 0, i64 128, i64* nonnull %stack_var_-136, i64 %arg3), !insn.addr !12577
  %19 = add i64 %15, ptrtoint (i32** @global_var_14 to i64), !insn.addr !12578
  %20 = inttoptr i64 %19 to i64*, !insn.addr !12579
  %21 = call i64 @makeKey.363(i64* %20, i64 ptrtoint (i32* @global_var_1 to i64), i64 128, i64* nonnull %stack_var_-136, i64 %arg3), !insn.addr !12579
  ret i64 %21, !insn.addr !12580
}

define void @DecryptBlock(i8* %cipherkey, i8* %input, i8* %output, i64 %pTable) local_unnamed_addr {
dec_label_pc_1ba8c:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = call i64 @__decompiler_undefined_function_0()
  %2 = ptrtoint i8* %output to i64
  %3 = call i64 @cipherInit.466(i64 %0, i64* bitcast (i32* @global_var_1 to i64*), i64 %2), !insn.addr !12581
  %4 = add i64 %1, -56, !insn.addr !12582
  %5 = inttoptr i64 %4 to i64*, !insn.addr !12582
  %6 = load i64, i64* %5, align 8, !insn.addr !12582
  %7 = call i64 @__readgsqword(i64 40), !insn.addr !12583
  %8 = icmp eq i64 %6, %7, !insn.addr !12583
  br i1 %8, label %dec_label_pc_1baad, label %dec_label_pc_1baa8, !insn.addr !12584

dec_label_pc_1baa8:                               ; preds = %dec_label_pc_1ba8c
  %9 = call i64 @__stack_chk_fail(), !insn.addr !12585
  br label %dec_label_pc_1baad, !insn.addr !12585

dec_label_pc_1baad:                               ; preds = %dec_label_pc_1baa8, %dec_label_pc_1ba8c
  ret void, !insn.addr !12586
}

define i64 @DecryptBlock.167(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4) local_unnamed_addr {
dec_label_pc_1babc:
  %stack_var_-1544 = alloca i64, align 8
  %0 = call i64 @mcount(), !insn.addr !12587
  %1 = call i64 @__readgsqword(i64 40), !insn.addr !12588
  %2 = call i64 @Set_Key.493(i64 %arg1, i64* nonnull %stack_var_-1544, i64 %arg4), !insn.addr !12589
  ret i64 %2, !insn.addr !12590
}

define void @EncryptBlock(i8* %cipherkey, i8* %input, i8* %output, i64 %pTable) local_unnamed_addr {
dec_label_pc_1bb1e:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = call i64 @__decompiler_undefined_function_0()
  %2 = call i64 @__decompiler_undefined_function_0()
  %3 = call i64 @__decompiler_undefined_function_0()
  %4 = ptrtoint i8* %input to i64
  %5 = and i64 %4, 4294967295, !insn.addr !12591
  %6 = inttoptr i64 %pTable to i64*, !insn.addr !12592
  %7 = trunc i64 %0 to i32, !insn.addr !12592
  %8 = call i64 @cipherUpdateRounds.321(i64 %3, i64 %4, i64 %5, i64* %6, i64 %1, i32 %7, i64 ptrtoint (i32* @0 to i64)), !insn.addr !12592
  %9 = add i64 %2, -40, !insn.addr !12593
  %10 = inttoptr i64 %9 to i64*, !insn.addr !12593
  %11 = load i64, i64* %10, align 8, !insn.addr !12593
  %12 = call i64 @__readgsqword(i64 40), !insn.addr !12594
  %13 = icmp eq i64 %11, %12, !insn.addr !12594
  br i1 %13, label %dec_label_pc_1bb3c, label %dec_label_pc_1bb37, !insn.addr !12595

dec_label_pc_1bb37:                               ; preds = %dec_label_pc_1bb1e
  %14 = call i64 @__stack_chk_fail(), !insn.addr !12596
  br label %dec_label_pc_1bb3c, !insn.addr !12596

dec_label_pc_1bb3c:                               ; preds = %dec_label_pc_1bb37, %dec_label_pc_1bb1e
  ret void, !insn.addr !12597
}

define i64 @EncryptBlock.401(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4) local_unnamed_addr {
dec_label_pc_1bb4e:
  %stack_var_-1544 = alloca i64, align 8
  %0 = call i64 @mcount(), !insn.addr !12598
  %1 = call i64 @__readgsqword(i64 40), !insn.addr !12599
  %2 = call i64 @Set_Key.493(i64 %arg1, i64* nonnull %stack_var_-1544, i64 %arg4), !insn.addr !12600
  ret i64 %2, !insn.addr !12601
}

define void @des_setkey(i64* %SK, i8* %key, i64 %pTable) local_unnamed_addr {
dec_label_pc_1bbb4:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = call i64 @__decompiler_undefined_function_0()
  %2 = call i64 @__decompiler_undefined_function_0()
  %3 = call i64 @__decompiler_undefined_function_0()
  %4 = call i64 @__decompiler_undefined_function_0()
  %5 = ptrtoint i8* %key to i64
  %6 = inttoptr i64 %4 to i64*, !insn.addr !12602
  %7 = trunc i64 %0 to i32, !insn.addr !12602
  %8 = call i64 @cipherUpdateRounds.321(i64 %3, i64 %5, i64 %pTable, i64* %6, i64 %1, i32 %7, i64 ptrtoint (i32* @0 to i64)), !insn.addr !12602
  %9 = add i64 %2, -40, !insn.addr !12603
  %10 = inttoptr i64 %9 to i64*, !insn.addr !12603
  %11 = load i64, i64* %10, align 8, !insn.addr !12603
  %12 = call i64 @__readgsqword(i64 40), !insn.addr !12604
  %13 = icmp eq i64 %11, %12, !insn.addr !12604
  br i1 %13, label %dec_label_pc_1bbd1, label %dec_label_pc_1bbcc, !insn.addr !12605

dec_label_pc_1bbcc:                               ; preds = %dec_label_pc_1bbb4
  %14 = call i64 @__stack_chk_fail(), !insn.addr !12606
  br label %dec_label_pc_1bbd1, !insn.addr !12606

dec_label_pc_1bbd1:                               ; preds = %dec_label_pc_1bbcc, %dec_label_pc_1bbb4
  ret void, !insn.addr !12607
}

define i64 @des_setkey.77(i64 %arg1, i64 %arg2, i64 %arg3) local_unnamed_addr {
dec_label_pc_1bbe4:
  %storemerge.in.reg2mem = alloca i64, !insn.addr !12608
  %rdx.0.reg2mem = alloca i64, !insn.addr !12608
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = call i64 @mcount(), !insn.addr !12609
  %2 = add i64 %arg2, ptrtoint (i8** @global_var_3 to i64), !insn.addr !12610
  %3 = inttoptr i64 %2 to i8*, !insn.addr !12610
  %4 = load i8, i8* %3, align 1, !insn.addr !12610
  %5 = zext i8 %4 to i64, !insn.addr !12610
  %6 = urem i64 %0, 256, !insn.addr !12611
  %7 = shl i64 %6, ptrtoint (i32** @global_var_18 to i64), !insn.addr !12612
  %8 = or i64 %7, %5, !insn.addr !12613
  %9 = add i64 %arg2, ptrtoint (i32* @global_var_1 to i64), !insn.addr !12614
  %10 = inttoptr i64 %9 to i8*, !insn.addr !12614
  %11 = load i8, i8* %10, align 1, !insn.addr !12614
  %12 = zext i8 %11 to i64, !insn.addr !12614
  %13 = shl i64 %12, ptrtoint (i8* @global_var_10 to i64), !insn.addr !12615
  %14 = or i64 %8, %13, !insn.addr !12616
  %15 = add i64 %arg2, ptrtoint (i32* @global_var_2 to i64), !insn.addr !12617
  %16 = inttoptr i64 %15 to i8*, !insn.addr !12617
  %17 = load i8, i8* %16, align 1, !insn.addr !12617
  %18 = zext i8 %17 to i64, !insn.addr !12617
  %19 = shl i64 %18, ptrtoint (i8* @global_var_8 to i64), !insn.addr !12618
  %20 = or i64 %14, %19, !insn.addr !12619
  %21 = add i64 %arg2, ptrtoint (i16* @global_var_4 to i64), !insn.addr !12620
  %22 = inttoptr i64 %21 to i8*, !insn.addr !12620
  %23 = load i8, i8* %22, align 1, !insn.addr !12620
  %24 = zext i8 %23 to i64, !insn.addr !12620
  %25 = shl i64 %24, ptrtoint (i32** @global_var_18 to i64), !insn.addr !12621
  %26 = add i64 %arg2, ptrtoint (i8* @global_var_5 to i64), !insn.addr !12622
  %27 = inttoptr i64 %26 to i8*, !insn.addr !12622
  %28 = load i8, i8* %27, align 1, !insn.addr !12622
  %29 = zext i8 %28 to i64, !insn.addr !12622
  %30 = shl i64 %29, ptrtoint (i8* @global_var_10 to i64), !insn.addr !12623
  %31 = or i64 %30, %25, !insn.addr !12624
  %32 = add i64 %arg2, ptrtoint (i8** @global_var_7 to i64), !insn.addr !12625
  %33 = inttoptr i64 %32 to i8*, !insn.addr !12625
  %34 = load i8, i8* %33, align 1, !insn.addr !12625
  %35 = zext i8 %34 to i64, !insn.addr !12625
  %36 = or i64 %31, %35, !insn.addr !12626
  %37 = add i64 %arg2, ptrtoint (i8* @global_var_6 to i64), !insn.addr !12627
  %38 = inttoptr i64 %37 to i8*, !insn.addr !12627
  %39 = load i8, i8* %38, align 1, !insn.addr !12627
  %40 = zext i8 %39 to i64, !insn.addr !12627
  %41 = shl i64 %40, ptrtoint (i8* @global_var_8 to i64), !insn.addr !12628
  %42 = or i64 %36, %41, !insn.addr !12629
  %43 = lshr i64 %42, ptrtoint (i16* @global_var_4 to i64), !insn.addr !12630
  %44 = xor i64 %43, %20, !insn.addr !12631
  %45 = and i64 %44, 252645135, !insn.addr !12632
  %46 = xor i64 %45, %20, !insn.addr !12633
  %47 = mul i64 %45, 16, !insn.addr !12634
  %48 = xor i64 %47, %42, !insn.addr !12635
  %49 = and i64 %20, 269488144
  %50 = and i64 %48, -269488145
  %51 = or i64 %50, %49, !insn.addr !12636
  %52 = mul i64 %46, 8, !insn.addr !12637
  %53 = and i64 %52, 120, !insn.addr !12638
  %54 = add i64 %arg3, 4096, !insn.addr !12638
  %55 = add i64 %53, %54, !insn.addr !12638
  %56 = inttoptr i64 %55 to i64*, !insn.addr !12638
  %57 = load i64, i64* %56, align 8, !insn.addr !12638
  %58 = mul i64 %57, 8, !insn.addr !12639
  %59 = udiv i64 %46, 2097152
  %60 = and i64 %59, 120, !insn.addr !12640
  %61 = add i64 %60, %54, !insn.addr !12640
  %62 = inttoptr i64 %61 to i64*, !insn.addr !12640
  %63 = load i64, i64* %62, align 8, !insn.addr !12640
  %64 = or i64 %58, %63, !insn.addr !12640
  %65 = udiv i64 %46, 32
  %66 = and i64 %65, 120, !insn.addr !12641
  %67 = add i64 %66, %54, !insn.addr !12641
  %68 = inttoptr i64 %67 to i64*, !insn.addr !12641
  %69 = load i64, i64* %68, align 8, !insn.addr !12641
  %70 = mul i64 %69, 4, !insn.addr !12642
  %71 = or i64 %64, %70, !insn.addr !12643
  %72 = udiv i64 %46, 8192
  %73 = and i64 %72, 120, !insn.addr !12644
  %74 = add i64 %73, %54, !insn.addr !12644
  %75 = inttoptr i64 %74 to i64*, !insn.addr !12644
  %76 = load i64, i64* %75, align 8, !insn.addr !12644
  %77 = mul i64 %76, 2, !insn.addr !12645
  %78 = or i64 %71, %77, !insn.addr !12646
  %79 = udiv i64 %46, 4
  %80 = and i64 %79, 120, !insn.addr !12647
  %81 = add i64 %80, %54, !insn.addr !12647
  %82 = inttoptr i64 %81 to i64*, !insn.addr !12647
  %83 = load i64, i64* %82, align 8, !insn.addr !12647
  %84 = mul i64 %83, 128, !insn.addr !12648
  %85 = or i64 %78, %84, !insn.addr !12649
  %86 = udiv i64 %46, 1024
  %87 = and i64 %86, 120, !insn.addr !12650
  %88 = add i64 %87, %54, !insn.addr !12650
  %89 = inttoptr i64 %88 to i64*, !insn.addr !12650
  %90 = load i64, i64* %89, align 8, !insn.addr !12650
  %91 = mul i64 %90, 64, !insn.addr !12651
  %92 = or i64 %85, %91, !insn.addr !12652
  %93 = udiv i64 %46, 262144
  %94 = and i64 %93, 120, !insn.addr !12653
  %95 = add i64 %94, %54, !insn.addr !12653
  %96 = inttoptr i64 %95 to i64*, !insn.addr !12653
  %97 = load i64, i64* %96, align 8, !insn.addr !12653
  %98 = mul i64 %97, 32, !insn.addr !12654
  %99 = or i64 %92, %98, !insn.addr !12655
  %100 = udiv i64 %20, 536870912, !insn.addr !12656
  %101 = mul i64 %100, 8, !insn.addr !12657
  %102 = add i64 %101, %54, !insn.addr !12657
  %103 = inttoptr i64 %102 to i64*, !insn.addr !12657
  %104 = load i64, i64* %103, align 8, !insn.addr !12657
  %105 = mul i64 %104, 16, !insn.addr !12658
  %106 = or i64 %99, %105, !insn.addr !12659
  %107 = mul i64 %51, 4
  %108 = and i64 %107, 120, !insn.addr !12660
  %109 = add i64 %arg3, 4224, !insn.addr !12660
  %110 = add i64 %108, %109, !insn.addr !12660
  %111 = inttoptr i64 %110 to i64*, !insn.addr !12660
  %112 = load i64, i64* %111, align 8, !insn.addr !12660
  %113 = mul i64 %112, 8, !insn.addr !12661
  %114 = udiv i64 %51, 64
  %115 = and i64 %114, 120, !insn.addr !12662
  %116 = add i64 %115, %109, !insn.addr !12662
  %117 = inttoptr i64 %116 to i64*, !insn.addr !12662
  %118 = load i64, i64* %117, align 8, !insn.addr !12662
  %119 = mul i64 %118, 4, !insn.addr !12663
  %120 = or i64 %119, %113, !insn.addr !12664
  %121 = udiv i64 %51, 4194304
  %122 = and i64 %121, 120, !insn.addr !12665
  %123 = add i64 %122, %109, !insn.addr !12665
  %124 = inttoptr i64 %123 to i64*, !insn.addr !12665
  %125 = load i64, i64* %124, align 8, !insn.addr !12665
  %126 = or i64 %120, %125, !insn.addr !12665
  %127 = udiv i64 %51, 16384
  %128 = and i64 %127, 120, !insn.addr !12666
  %129 = add i64 %128, %109, !insn.addr !12666
  %130 = inttoptr i64 %129 to i64*, !insn.addr !12666
  %131 = load i64, i64* %130, align 8, !insn.addr !12666
  %132 = mul i64 %131, 2, !insn.addr !12667
  %133 = or i64 %126, %132, !insn.addr !12668
  %134 = udiv i64 %51, 2
  %135 = and i64 %134, 120, !insn.addr !12669
  %136 = add i64 %135, %109, !insn.addr !12669
  %137 = inttoptr i64 %136 to i64*, !insn.addr !12669
  %138 = load i64, i64* %137, align 8, !insn.addr !12669
  %139 = mul i64 %138, 128, !insn.addr !12670
  %140 = or i64 %133, %139, !insn.addr !12671
  %141 = udiv i64 %51, 512
  %142 = and i64 %141, 120, !insn.addr !12672
  %143 = add i64 %142, %109, !insn.addr !12672
  %144 = inttoptr i64 %143 to i64*, !insn.addr !12672
  %145 = load i64, i64* %144, align 8, !insn.addr !12672
  %146 = mul i64 %145, 64, !insn.addr !12673
  %147 = or i64 %140, %146, !insn.addr !12674
  %148 = udiv i64 %51, 131072
  %149 = and i64 %148, 120, !insn.addr !12675
  %150 = add i64 %149, %109, !insn.addr !12675
  %151 = inttoptr i64 %150 to i64*, !insn.addr !12675
  %152 = load i64, i64* %151, align 8, !insn.addr !12675
  %153 = mul i64 %152, 32, !insn.addr !12676
  %154 = or i64 %147, %153, !insn.addr !12677
  %155 = udiv i64 %51, 268435456, !insn.addr !12678
  %156 = mul i64 %155, 8, !insn.addr !12679
  %157 = add i64 %156, %109, !insn.addr !12679
  %158 = inttoptr i64 %157 to i64*, !insn.addr !12679
  %159 = load i64, i64* %158, align 8, !insn.addr !12679
  %160 = mul i64 %159, 16, !insn.addr !12680
  %161 = or i64 %154, %160, !insn.addr !12681
  %162 = urem i64 %106, 268435456, !insn.addr !12682
  %163 = urem i64 %161, 268435456, !insn.addr !12683
  br i1 icmp sge (i32 ptrtoint (i32* @global_var_1 to i32), i32 0), label %dec_label_pc_1bdee, label %dec_label_pc_1be15, !insn.addr !12684

dec_label_pc_1bdee:                               ; preds = %dec_label_pc_1bbe4
  %164 = udiv i64 %162, 134217728, !insn.addr !12685
  %165 = mul i64 %162, 2, !insn.addr !12686
  %.masked1 = and i64 %165, 268435454
  %166 = or i64 %.masked1, %164, !insn.addr !12687
  %167 = udiv i64 %163, 134217728, !insn.addr !12688
  %168 = mul i64 %163, 2, !insn.addr !12689
  %169 = or i64 %168, %167, !insn.addr !12690
  store i64 %166, i64* %rdx.0.reg2mem, !insn.addr !12691
  store i64 %169, i64* %storemerge.in.reg2mem, !insn.addr !12691
  br label %dec_label_pc_1be3c, !insn.addr !12691

dec_label_pc_1be15:                               ; preds = %dec_label_pc_1bbe4
  %170 = udiv i64 %162, 67108864, !insn.addr !12692
  %171 = mul i64 %162, 4, !insn.addr !12693
  %.masked = and i64 %171, 268435452
  %172 = or i64 %.masked, %170, !insn.addr !12694
  %173 = udiv i64 %163, 67108864, !insn.addr !12695
  %174 = mul i64 %163, 4, !insn.addr !12696
  %175 = or i64 %174, %173, !insn.addr !12697
  store i64 %172, i64* %rdx.0.reg2mem, !insn.addr !12698
  store i64 %175, i64* %storemerge.in.reg2mem, !insn.addr !12698
  br label %dec_label_pc_1be3c, !insn.addr !12698

dec_label_pc_1be3c:                               ; preds = %dec_label_pc_1be15, %dec_label_pc_1bdee
  %storemerge.in.reload = load i64, i64* %storemerge.in.reg2mem
  %rdx.0.reload = load i64, i64* %rdx.0.reg2mem
  %storemerge = urem i64 %storemerge.in.reload, 268435456
  %176 = udiv i64 %storemerge.in.reload, 16384, !insn.addr !12699
  %177 = udiv i64 %storemerge.in.reload, 8, !insn.addr !12700
  %178 = mul i64 %rdx.0.reload, 16, !insn.addr !12701
  %179 = and i64 %178, 603979776, !insn.addr !12701
  %180 = mul i64 %rdx.0.reload, 268435456, !insn.addr !12702
  %181 = and i64 %180, 268435456, !insn.addr !12702
  %182 = or i64 %181, %179, !insn.addr !12703
  %183 = and i64 %storemerge.in.reload, 256, !insn.addr !12704
  %184 = or i64 %182, %183, !insn.addr !12705
  %185 = mul i64 %rdx.0.reload, 16384, !insn.addr !12706
  %186 = and i64 %185, 134217728, !insn.addr !12706
  %187 = or i64 %184, %186, !insn.addr !12707
  %188 = mul i64 %rdx.0.reload, 262144, !insn.addr !12708
  %189 = and i64 %188, 34078720, !insn.addr !12708
  %190 = or i64 %187, %189, !insn.addr !12709
  %191 = mul i64 %rdx.0.reload, 64, !insn.addr !12710
  %192 = and i64 %191, 16777216, !insn.addr !12710
  %193 = or i64 %190, %192, !insn.addr !12711
  %194 = mul i64 %rdx.0.reload, 512, !insn.addr !12712
  %195 = and i64 %194, 2097152, !insn.addr !12712
  %196 = or i64 %193, %195, !insn.addr !12713
  %197 = udiv i64 %rdx.0.reload, 2, !insn.addr !12714
  %198 = and i64 %197, 1048576, !insn.addr !12715
  %199 = or i64 %196, %198, !insn.addr !12716
  %200 = mul i64 %rdx.0.reload, 1024, !insn.addr !12717
  %201 = and i64 %200, 262144, !insn.addr !12717
  %202 = or i64 %199, %201, !insn.addr !12718
  %203 = mul i64 %rdx.0.reload, 4, !insn.addr !12719
  %204 = and i64 %203, 131072, !insn.addr !12719
  %205 = or i64 %202, %204, !insn.addr !12720
  %206 = udiv i64 %rdx.0.reload, 1024, !insn.addr !12721
  %207 = and i64 %206, 65536, !insn.addr !12722
  %208 = or i64 %205, %207, !insn.addr !12723
  %209 = udiv i64 %storemerge.in.reload, 8192, !insn.addr !12724
  %210 = and i64 %209, 8192, !insn.addr !12725
  %211 = or i64 %208, %210, !insn.addr !12726
  %212 = udiv i64 %storemerge.in.reload, 16, !insn.addr !12727
  %213 = and i64 %212, 4096, !insn.addr !12728
  %214 = or i64 %211, %213, !insn.addr !12729
  %215 = mul i64 %storemerge, 64, !insn.addr !12730
  %216 = and i64 %215, 2048, !insn.addr !12730
  %217 = udiv i64 %storemerge.in.reload, 2, !insn.addr !12731
  %218 = and i64 %217, 1024, !insn.addr !12732
  %219 = and i64 %176, 512, !insn.addr !12733
  %220 = udiv i64 %storemerge.in.reload, 32, !insn.addr !12734
  %221 = and i64 %220, 32, !insn.addr !12735
  %222 = udiv i64 %storemerge.in.reload, 1024, !insn.addr !12736
  %223 = and i64 %222, 16, !insn.addr !12737
  %224 = and i64 %177, 8, !insn.addr !12738
  %225 = udiv i64 %storemerge.in.reload, 262144, !insn.addr !12739
  %226 = and i64 %225, 4, !insn.addr !12740
  %227 = udiv i64 %storemerge.in.reload, 67108864, !insn.addr !12741
  %228 = and i64 %227, 2, !insn.addr !12742
  %229 = udiv i64 %storemerge.in.reload, 16777216, !insn.addr !12743
  %230 = urem i64 %229, 2, !insn.addr !12744
  %231 = or i64 %214, %218, !insn.addr !12745
  %232 = or i64 %231, %219, !insn.addr !12746
  %233 = or i64 %232, %221, !insn.addr !12747
  %234 = or i64 %233, %223, !insn.addr !12748
  %235 = or i64 %234, %224, !insn.addr !12749
  %236 = or i64 %235, %226, !insn.addr !12750
  %237 = or i64 %236, %228, !insn.addr !12751
  %238 = or i64 %237, %230, !insn.addr !12752
  %239 = or i64 %238, %216, !insn.addr !12753
  %240 = inttoptr i64 %arg1 to i64*, !insn.addr !12754
  store i64 %239, i64* %240, align 8, !insn.addr !12754
  ret i64 %storemerge, !insn.addr !12755
}

define void @des_setkey_enc(i64 %ctx, i8* %key, i64 %pTable) local_unnamed_addr {
dec_label_pc_1c0e0:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = call i64 @__decompiler_undefined_function_0()
  %2 = trunc i64 %1 to i8
  %3 = mul i8 %2, 2, !insn.addr !12756
  %4 = inttoptr i64 %1 to i8*, !insn.addr !12756
  store i8 %3, i8* %4, align 1, !insn.addr !12756
  %5 = add i64 %0, -125, !insn.addr !12757
  %6 = inttoptr i64 %5 to i8*, !insn.addr !12757
  %7 = load i8, i8* %6, align 1, !insn.addr !12757
  %8 = add i8 %7, %2, !insn.addr !12757
  store i8 %8, i8* %6, align 1, !insn.addr !12757
  ret void, !insn.addr !12758
}

define void @des_setkey_dec(i64 %ctx, i8* %key, i64 %pTable) local_unnamed_addr {
dec_label_pc_1c0f4:
  %0 = ptrtoint i8* %key to i64
  %1 = add i64 %ctx, ptrtoint (i8* @global_var_8 to i64), !insn.addr !12759
  %2 = inttoptr i64 %1 to i64*, !insn.addr !12759
  store i64 %0, i64* %2, align 8, !insn.addr !12759
  ret void, !insn.addr !12760
}

define i64 @des_setkey_enc.355(i64 %arg1) local_unnamed_addr {
dec_label_pc_1c110:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = call i64 @__decompiler_undefined_function_0()
  %2 = call i64 @mcount(), !insn.addr !12761
  %3 = add i64 %arg1, ptrtoint (i8* @global_var_8 to i64), !insn.addr !12762
  %4 = call i64 @des_setkey.77(i64 %3, i64 %0, i64 %1), !insn.addr !12763
  ret i64 %4, !insn.addr !12764
}

define i64 @des_setkey_dec.408(i64 %arg1) local_unnamed_addr {
dec_label_pc_1c124:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = call i64 @__decompiler_undefined_function_0()
  %2 = call i64 @mcount(), !insn.addr !12765
  %3 = add i64 %arg1, ptrtoint (i8* @global_var_8 to i64), !insn.addr !12766
  %4 = call i64 @des_setkey.77(i64 %3, i64 %0, i64 %1), !insn.addr !12767
  %5 = add i64 %arg1, 248, !insn.addr !12768
  %6 = inttoptr i64 %5 to i64*, !insn.addr !12768
  %7 = load i64, i64* %6, align 8, !insn.addr !12768
  %8 = inttoptr i64 %3 to i64*, !insn.addr !12769
  store i64 %7, i64* %8, align 8, !insn.addr !12769
  ret i64 0, !insn.addr !12769
}

define void @des_crypt_ecb(i64 %ctx, i8* %input, i8* %output, i64 %pTable) local_unnamed_addr {
dec_label_pc_1c153:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = call i64 @__decompiler_undefined_function_0()
  %2 = ptrtoint i8* %output to i64
  %3 = trunc i64 %pTable to i32, !insn.addr !12770
  %4 = add i64 %1, %0
  %5 = add i64 %4, 248, !insn.addr !12770
  %6 = inttoptr i64 %5 to i32*, !insn.addr !12770
  store i32 %3, i32* %6, align 4, !insn.addr !12770
  %7 = add i64 %2, ptrtoint (i8* @global_var_10 to i64), !insn.addr !12771
  %8 = inttoptr i64 %7 to i64*, !insn.addr !12771
  %9 = load i64, i64* %8, align 8, !insn.addr !12771
  %10 = add i64 %4, 256, !insn.addr !12772
  %11 = inttoptr i64 %10 to i64*, !insn.addr !12772
  %12 = load i64, i64* %11, align 8, !insn.addr !12772
  store i64 %12, i64* %8, align 8, !insn.addr !12773
  store i64 %9, i64* %11, align 8, !insn.addr !12774
  ret void, !insn.addr !12775
}

define i64 @des_crypt_ecb.221(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4) local_unnamed_addr {
dec_label_pc_1c183:
  %r8.0.reg2mem = alloca i64, !insn.addr !12776
  %rax.0.reg2mem = alloca i64, !insn.addr !12776
  %.reg2mem = alloca i64, !insn.addr !12776
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = call i64 @mcount(), !insn.addr !12777
  %2 = add i64 %arg2, ptrtoint (i8** @global_var_3 to i64), !insn.addr !12778
  %3 = inttoptr i64 %2 to i8*, !insn.addr !12778
  %4 = load i8, i8* %3, align 1, !insn.addr !12778
  %5 = zext i8 %4 to i64, !insn.addr !12778
  %6 = add i64 %arg2, ptrtoint (i32* @global_var_2 to i64), !insn.addr !12779
  %7 = inttoptr i64 %6 to i8*, !insn.addr !12779
  %8 = load i8, i8* %7, align 1, !insn.addr !12779
  %9 = zext i8 %8 to i64, !insn.addr !12780
  %10 = shl i64 %9, ptrtoint (i8* @global_var_8 to i64), !insn.addr !12780
  %11 = add i64 %arg2, ptrtoint (i32* @global_var_1 to i64), !insn.addr !12781
  %12 = inttoptr i64 %11 to i8*, !insn.addr !12781
  %13 = load i8, i8* %12, align 1, !insn.addr !12781
  %14 = zext i8 %13 to i64, !insn.addr !12781
  %15 = shl i64 %14, ptrtoint (i8* @global_var_10 to i64), !insn.addr !12782
  %16 = icmp ult i64 %10, -4294901760
  %17 = add i64 %10, 4294901760
  %.masked = select i1 %16, i64 %10, i64 %17
  %18 = urem i64 %0, 256, !insn.addr !12783
  %19 = shl i64 %18, ptrtoint (i32** @global_var_18 to i64), !insn.addr !12784
  %20 = icmp ult i64 %15, -4278190080
  %21 = add i64 %15, 4278190080
  %.masked1 = select i1 %20, i64 %15, i64 %21
  %22 = or i64 %19, %5, !insn.addr !12785
  %23 = or i64 %22, %.masked, !insn.addr !12786
  %24 = or i64 %23, %.masked1, !insn.addr !12787
  %25 = add i64 %arg2, ptrtoint (i8** @global_var_7 to i64), !insn.addr !12788
  %26 = inttoptr i64 %25 to i8*, !insn.addr !12788
  %27 = load i8, i8* %26, align 1, !insn.addr !12788
  %28 = zext i8 %27 to i64, !insn.addr !12788
  %29 = add i64 %arg2, ptrtoint (i8* @global_var_6 to i64), !insn.addr !12789
  %30 = inttoptr i64 %29 to i8*, !insn.addr !12789
  %31 = load i8, i8* %30, align 1, !insn.addr !12789
  %32 = zext i8 %31 to i64, !insn.addr !12790
  %33 = shl i64 %32, ptrtoint (i8* @global_var_8 to i64), !insn.addr !12790
  %34 = add i64 %arg2, ptrtoint (i8* @global_var_5 to i64), !insn.addr !12791
  %35 = inttoptr i64 %34 to i8*, !insn.addr !12791
  %36 = load i8, i8* %35, align 1, !insn.addr !12791
  %37 = zext i8 %36 to i64, !insn.addr !12791
  %38 = shl i64 %37, ptrtoint (i8* @global_var_10 to i64), !insn.addr !12792
  %39 = icmp ult i64 %33, -4294901760
  %40 = add i64 %33, 4294901760
  %.masked2 = select i1 %39, i64 %33, i64 %40
  %41 = or i64 %.masked2, %28, !insn.addr !12793
  %42 = add i64 %arg2, ptrtoint (i16* @global_var_4 to i64), !insn.addr !12794
  %43 = inttoptr i64 %42 to i8*, !insn.addr !12794
  %44 = load i8, i8* %43, align 1, !insn.addr !12794
  %45 = zext i8 %44 to i64, !insn.addr !12794
  %46 = shl i64 %45, ptrtoint (i32** @global_var_18 to i64), !insn.addr !12795
  %47 = icmp ult i64 %38, -4278190080
  %48 = add i64 %38, 4278190080
  %.masked3 = select i1 %47, i64 %38, i64 %48
  %49 = or i64 %41, %.masked3, !insn.addr !12796
  %50 = or i64 %49, %46, !insn.addr !12797
  %51 = lshr i64 %24, ptrtoint (i16* @global_var_4 to i64), !insn.addr !12798
  %52 = xor i64 %50, %51, !insn.addr !12799
  %53 = and i64 %52, 252645135, !insn.addr !12800
  %54 = xor i64 %53, %50, !insn.addr !12801
  %55 = mul i64 %53, 16, !insn.addr !12802
  %56 = xor i64 %55, %24, !insn.addr !12803
  %57 = udiv i64 %56, 65536, !insn.addr !12804
  %58 = xor i64 %57, %54, !insn.addr !12805
  %59 = urem i64 %58, 65536, !insn.addr !12806
  %60 = xor i64 %59, %54, !insn.addr !12807
  %61 = mul i64 %59, 65536, !insn.addr !12808
  %62 = xor i64 %61, %56, !insn.addr !12809
  %63 = udiv i64 %60, 4, !insn.addr !12810
  %64 = xor i64 %63, %62, !insn.addr !12811
  %65 = and i64 %64, 858993459, !insn.addr !12812
  %66 = xor i64 %65, %62, !insn.addr !12813
  %67 = mul i64 %65, 4, !insn.addr !12814
  %68 = xor i64 %67, %60, !insn.addr !12815
  %69 = udiv i64 %68, 256, !insn.addr !12816
  %70 = xor i64 %69, %66, !insn.addr !12817
  %71 = and i64 %70, 16711935, !insn.addr !12818
  %72 = xor i64 %71, %66, !insn.addr !12819
  %73 = shl i64 %71, ptrtoint (i8* @global_var_8 to i64), !insn.addr !12820
  %74 = xor i64 %73, %68, !insn.addr !12821
  %75 = lshr i64 %74, ptrtoint (i8** @global_var_1f to i64), !insn.addr !12822
  %76 = mul i64 %74, 2, !insn.addr !12823
  %77 = or i64 %75, %76, !insn.addr !12824
  %78 = and i64 %77, 4294967295, !insn.addr !12825
  %79 = xor i64 %77, %72, !insn.addr !12826
  %80 = and i64 %79, 2863311530, !insn.addr !12827
  %81 = xor i64 %80, %78, !insn.addr !12828
  %82 = xor i64 %80, %72, !insn.addr !12829
  %83 = lshr i64 %82, ptrtoint (i8** @global_var_1f to i64), !insn.addr !12830
  %84 = mul i64 %82, 2, !insn.addr !12831
  %85 = or i64 %83, %84, !insn.addr !12832
  %86 = and i64 %85, 4294967295, !insn.addr !12833
  %87 = add i64 %arg4, 3584, !insn.addr !12834
  %88 = add i64 %arg4, 2560, !insn.addr !12835
  %89 = add i64 %arg4, 1536, !insn.addr !12836
  %90 = add i64 %arg4, 512, !insn.addr !12837
  %91 = add i64 %arg4, 3072, !insn.addr !12838
  %92 = add i64 %arg4, 2048, !insn.addr !12839
  %93 = add i64 %arg4, 1024, !insn.addr !12840
  store i64 %86, i64* %.reg2mem, !insn.addr !12841
  store i64 0, i64* %rax.0.reg2mem, !insn.addr !12841
  store i64 %81, i64* %r8.0.reg2mem, !insn.addr !12841
  br label %dec_label_pc_1c29f, !insn.addr !12841

dec_label_pc_1c29f:                               ; preds = %dec_label_pc_1c29f, %dec_label_pc_1c183
  %r8.0.reload = load i64, i64* %r8.0.reg2mem
  %rax.0.reload = load i64, i64* %rax.0.reg2mem
  %.reload = load i64, i64* %.reg2mem, !insn.addr !12834
  %94 = mul i64 %rax.0.reload, ptrtoint (i32* @global_var_1 to i64), !insn.addr !12842
  %95 = add i64 %94, %arg1
  %96 = add i64 %95, ptrtoint (i8* @global_var_8 to i64), !insn.addr !12842
  %97 = inttoptr i64 %96 to i64*, !insn.addr !12842
  %98 = load i64, i64* %97, align 8, !insn.addr !12842
  %99 = xor i64 %98, %r8.0.reload, !insn.addr !12842
  %100 = lshr i64 %r8.0.reload, ptrtoint (i16* @global_var_4 to i64), !insn.addr !12843
  %101 = shl i64 %r8.0.reload, ptrtoint (i32** @global_var_1c to i64), !insn.addr !12844
  %102 = or i64 %101, %100, !insn.addr !12845
  %103 = add i64 %95, add (i64 ptrtoint (i8* @global_var_8 to i64), i64 ptrtoint (i8* @global_var_8 to i64)), !insn.addr !12846
  %104 = inttoptr i64 %103 to i64*, !insn.addr !12846
  %105 = load i64, i64* %104, align 8, !insn.addr !12846
  %106 = xor i64 %102, %105, !insn.addr !12846
  %107 = mul i64 %99, 8, !insn.addr !12847
  %108 = and i64 %107, 504, !insn.addr !12834
  %109 = add i64 %108, %87, !insn.addr !12834
  %110 = inttoptr i64 %109 to i64*, !insn.addr !12834
  %111 = load i64, i64* %110, align 8, !insn.addr !12834
  %112 = xor i64 %111, %.reload, !insn.addr !12834
  %113 = lshr i64 %99, ptrtoint (i8* @global_var_8 to i64), !insn.addr !12848
  %114 = mul i64 %113, 8, !insn.addr !12849
  %115 = and i64 %114, 504, !insn.addr !12835
  %116 = add i64 %115, %88, !insn.addr !12835
  %117 = inttoptr i64 %116 to i64*, !insn.addr !12835
  %118 = load i64, i64* %117, align 8, !insn.addr !12835
  %119 = xor i64 %112, %118, !insn.addr !12835
  %120 = lshr i64 %99, ptrtoint (i8* @global_var_10 to i64), !insn.addr !12850
  %121 = mul i64 %120, 8, !insn.addr !12851
  %122 = and i64 %121, 504, !insn.addr !12836
  %123 = add i64 %122, %89, !insn.addr !12836
  %124 = inttoptr i64 %123 to i64*, !insn.addr !12836
  %125 = load i64, i64* %124, align 8, !insn.addr !12836
  %126 = xor i64 %119, %125, !insn.addr !12836
  %127 = lshr i64 %99, ptrtoint (i32** @global_var_18 to i64), !insn.addr !12852
  %128 = mul i64 %127, 8, !insn.addr !12853
  %129 = and i64 %128, 504, !insn.addr !12837
  %130 = add i64 %129, %90, !insn.addr !12837
  %131 = inttoptr i64 %130 to i64*, !insn.addr !12837
  %132 = load i64, i64* %131, align 8, !insn.addr !12837
  %133 = xor i64 %126, %132, !insn.addr !12837
  %134 = mul i64 %106, 8, !insn.addr !12854
  %135 = and i64 %134, 504, !insn.addr !12838
  %136 = add i64 %135, %91, !insn.addr !12838
  %137 = inttoptr i64 %136 to i64*, !insn.addr !12838
  %138 = load i64, i64* %137, align 8, !insn.addr !12838
  %139 = xor i64 %133, %138, !insn.addr !12838
  %140 = lshr i64 %106, ptrtoint (i8* @global_var_8 to i64), !insn.addr !12855
  %141 = mul i64 %140, 8, !insn.addr !12856
  %142 = and i64 %141, 504, !insn.addr !12839
  %143 = add i64 %142, %92, !insn.addr !12839
  %144 = inttoptr i64 %143 to i64*, !insn.addr !12839
  %145 = load i64, i64* %144, align 8, !insn.addr !12839
  %146 = xor i64 %139, %145, !insn.addr !12839
  %147 = lshr i64 %106, ptrtoint (i8* @global_var_10 to i64), !insn.addr !12857
  %148 = mul i64 %147, 8, !insn.addr !12858
  %149 = and i64 %148, 504, !insn.addr !12840
  %150 = add i64 %149, %93, !insn.addr !12840
  %151 = inttoptr i64 %150 to i64*, !insn.addr !12840
  %152 = load i64, i64* %151, align 8, !insn.addr !12840
  %153 = xor i64 %146, %152, !insn.addr !12840
  %154 = lshr i64 %106, ptrtoint (i32** @global_var_18 to i64), !insn.addr !12859
  %155 = urem i64 %154, 64, !insn.addr !12860
  %156 = mul i64 %155, ptrtoint (i8* @global_var_8 to i64), !insn.addr !12861
  %157 = add i64 %156, %arg4, !insn.addr !12861
  %158 = inttoptr i64 %157 to i64*, !insn.addr !12861
  %159 = load i64, i64* %158, align 8, !insn.addr !12861
  %160 = xor i64 %153, %159, !insn.addr !12861
  %161 = add i64 %95, add (i64 ptrtoint (i8* @global_var_8 to i64), i64 ptrtoint (i8* @global_var_10 to i64)), !insn.addr !12862
  %162 = inttoptr i64 %161 to i64*, !insn.addr !12862
  %163 = load i64, i64* %162, align 8, !insn.addr !12862
  %164 = xor i64 %163, %160, !insn.addr !12862
  %165 = lshr i64 %160, ptrtoint (i16* @global_var_4 to i64), !insn.addr !12863
  %166 = shl i64 %160, ptrtoint (i32** @global_var_1c to i64), !insn.addr !12864
  %167 = or i64 %166, %165, !insn.addr !12865
  %168 = add i64 %95, add (i64 ptrtoint (i8* @global_var_8 to i64), i64 ptrtoint (i32** @global_var_18 to i64)), !insn.addr !12866
  %169 = inttoptr i64 %168 to i64*, !insn.addr !12866
  %170 = load i64, i64* %169, align 8, !insn.addr !12866
  %171 = xor i64 %167, %170, !insn.addr !12866
  %172 = mul i64 %164, 8, !insn.addr !12867
  %173 = and i64 %172, 504, !insn.addr !12868
  %174 = add i64 %173, %87, !insn.addr !12868
  %175 = inttoptr i64 %174 to i64*, !insn.addr !12868
  %176 = load i64, i64* %175, align 8, !insn.addr !12868
  %177 = xor i64 %176, %r8.0.reload, !insn.addr !12868
  %178 = lshr i64 %164, ptrtoint (i8* @global_var_8 to i64), !insn.addr !12869
  %179 = mul i64 %178, 8, !insn.addr !12870
  %180 = and i64 %179, 504, !insn.addr !12871
  %181 = add i64 %180, %88, !insn.addr !12871
  %182 = inttoptr i64 %181 to i64*, !insn.addr !12871
  %183 = load i64, i64* %182, align 8, !insn.addr !12871
  %184 = xor i64 %177, %183, !insn.addr !12871
  %185 = lshr i64 %164, ptrtoint (i8* @global_var_10 to i64), !insn.addr !12872
  %186 = mul i64 %185, 8, !insn.addr !12873
  %187 = and i64 %186, 504, !insn.addr !12874
  %188 = add i64 %187, %89, !insn.addr !12874
  %189 = inttoptr i64 %188 to i64*, !insn.addr !12874
  %190 = load i64, i64* %189, align 8, !insn.addr !12874
  %191 = xor i64 %184, %190, !insn.addr !12874
  %192 = lshr i64 %164, ptrtoint (i32** @global_var_18 to i64), !insn.addr !12875
  %193 = mul i64 %192, 8, !insn.addr !12876
  %194 = and i64 %193, 504, !insn.addr !12877
  %195 = add i64 %194, %90, !insn.addr !12877
  %196 = inttoptr i64 %195 to i64*, !insn.addr !12877
  %197 = load i64, i64* %196, align 8, !insn.addr !12877
  %198 = xor i64 %191, %197, !insn.addr !12877
  %199 = mul i64 %171, 8, !insn.addr !12878
  %200 = and i64 %199, 504, !insn.addr !12879
  %201 = add i64 %200, %91, !insn.addr !12879
  %202 = inttoptr i64 %201 to i64*, !insn.addr !12879
  %203 = load i64, i64* %202, align 8, !insn.addr !12879
  %204 = xor i64 %198, %203, !insn.addr !12879
  %205 = lshr i64 %171, ptrtoint (i8* @global_var_8 to i64), !insn.addr !12880
  %206 = mul i64 %205, 8, !insn.addr !12881
  %207 = and i64 %206, 504, !insn.addr !12882
  %208 = add i64 %207, %92, !insn.addr !12882
  %209 = inttoptr i64 %208 to i64*, !insn.addr !12882
  %210 = load i64, i64* %209, align 8, !insn.addr !12882
  %211 = xor i64 %204, %210, !insn.addr !12882
  %212 = lshr i64 %171, ptrtoint (i8* @global_var_10 to i64), !insn.addr !12883
  %213 = mul i64 %212, 8, !insn.addr !12884
  %214 = and i64 %213, 504, !insn.addr !12885
  %215 = add i64 %214, %93, !insn.addr !12885
  %216 = inttoptr i64 %215 to i64*, !insn.addr !12885
  %217 = load i64, i64* %216, align 8, !insn.addr !12885
  %218 = xor i64 %211, %217, !insn.addr !12885
  %219 = lshr i64 %171, ptrtoint (i32** @global_var_18 to i64), !insn.addr !12886
  %220 = urem i64 %219, 64, !insn.addr !12887
  %221 = mul i64 %220, ptrtoint (i8* @global_var_8 to i64), !insn.addr !12888
  %222 = add i64 %221, %arg4, !insn.addr !12888
  %223 = inttoptr i64 %222 to i64*, !insn.addr !12888
  %224 = load i64, i64* %223, align 8, !insn.addr !12888
  %225 = xor i64 %218, %224, !insn.addr !12888
  %226 = add i64 %rax.0.reload, ptrtoint (i32** @global_var_20 to i64), !insn.addr !12889
  %227 = icmp eq i64 %rax.0.reload, sub (i64 0, i64 add (i64 ptrtoint (i32** @global_var_20 to i64), i64 -256)), !insn.addr !12890
  %228 = icmp eq i1 %227, false, !insn.addr !12891
  store i64 %160, i64* %.reg2mem, !insn.addr !12891
  store i64 %226, i64* %rax.0.reg2mem, !insn.addr !12891
  store i64 %225, i64* %r8.0.reg2mem, !insn.addr !12891
  br i1 %228, label %dec_label_pc_1c29f, label %dec_label_pc_1c3f6, !insn.addr !12891

dec_label_pc_1c3f6:                               ; preds = %dec_label_pc_1c29f
  %229 = lshr i64 %225, ptrtoint (i32* @global_var_1 to i64), !insn.addr !12892
  %230 = shl i64 %225, ptrtoint (i8** @global_var_1f to i64), !insn.addr !12893
  %231 = or i64 %229, %230, !insn.addr !12894
  %232 = and i64 %231, 4294967295, !insn.addr !12895
  %233 = xor i64 %231, %160, !insn.addr !12896
  %234 = and i64 %233, 2863311530, !insn.addr !12897
  %235 = xor i64 %234, %232, !insn.addr !12898
  %236 = xor i64 %234, %160, !insn.addr !12899
  %237 = lshr i64 %236, ptrtoint (i32* @global_var_1 to i64), !insn.addr !12900
  %238 = shl i64 %236, ptrtoint (i8** @global_var_1f to i64), !insn.addr !12901
  %239 = or i64 %238, %237, !insn.addr !12902
  %240 = and i64 %239, 4294967295, !insn.addr !12903
  %241 = lshr i64 %240, ptrtoint (i8* @global_var_8 to i64), !insn.addr !12904
  %242 = xor i64 %241, %235, !insn.addr !12905
  %243 = and i64 %242, 16711935, !insn.addr !12906
  %244 = xor i64 %243, %235, !insn.addr !12907
  %245 = mul i64 %243, 256, !insn.addr !12908
  %246 = xor i64 %245, %240, !insn.addr !12909
  %247 = udiv i64 %246, 4, !insn.addr !12910
  %248 = xor i64 %247, %244, !insn.addr !12911
  %249 = and i64 %248, 858993459, !insn.addr !12912
  %250 = xor i64 %249, %244, !insn.addr !12913
  %251 = mul i64 %249, 4, !insn.addr !12914
  %252 = xor i64 %251, %246, !insn.addr !12915
  %253 = udiv i64 %250, 65536, !insn.addr !12916
  %.masked4 = urem i64 %252, 65536
  %254 = xor i64 %.masked4, %253, !insn.addr !12917
  %255 = xor i64 %254, %252, !insn.addr !12918
  %256 = mul i64 %254, 65536, !insn.addr !12919
  %257 = xor i64 %256, %250, !insn.addr !12920
  %258 = udiv i64 %257, 16, !insn.addr !12921
  %259 = xor i64 %255, %258, !insn.addr !12922
  %260 = and i64 %259, 252645135, !insn.addr !12923
  %261 = mul i64 %260, 16, !insn.addr !12924
  %262 = xor i64 %261, %257, !insn.addr !12925
  %263 = trunc i64 %262 to i8, !insn.addr !12926
  %264 = add i64 %arg3, ptrtoint (i8** @global_var_3 to i64), !insn.addr !12926
  %265 = inttoptr i64 %264 to i8*, !insn.addr !12926
  store i8 %263, i8* %265, align 1, !insn.addr !12926
  %266 = udiv i64 %262, 256, !insn.addr !12927
  %267 = trunc i64 %266 to i8, !insn.addr !12927
  %268 = add i64 %arg3, ptrtoint (i32* @global_var_2 to i64), !insn.addr !12928
  %269 = inttoptr i64 %268 to i8*, !insn.addr !12928
  store i8 %267, i8* %269, align 1, !insn.addr !12928
  %270 = udiv i64 %262, 65536, !insn.addr !12929
  %271 = trunc i64 %270 to i8, !insn.addr !12930
  %272 = add i64 %arg3, ptrtoint (i32* @global_var_1 to i64), !insn.addr !12930
  %273 = inttoptr i64 %272 to i8*, !insn.addr !12930
  store i8 %271, i8* %273, align 1, !insn.addr !12930
  ret i64 %260, !insn.addr !12930
}

define void @des_crypt_ecb_Multi(i64 %ctx, i8* %input, i8* %output, i64 %pTable, i32 %BlockNum) local_unnamed_addr {
dec_label_pc_1c4ab:
  %0 = call i64 @function_c8a05c8(), !insn.addr !12931
  ret void, !insn.addr !12931
}

define i64 @function_1c4b0(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_1c4b0:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = call i64 @__decompiler_undefined_function_0()
  %2 = call i64 @__decompiler_undefined_function_0()
  %3 = and i64 %2, 4294967112, !insn.addr !12932
  %.masked = and i64 %1, 4294967295
  %4 = xor i64 %3, %.masked, !insn.addr !12932
  %5 = trunc i64 %4 to i8, !insn.addr !12933
  %6 = add i64 %0, ptrtoint (i8** @global_var_7 to i64), !insn.addr !12933
  %7 = inttoptr i64 %6 to i8*, !insn.addr !12933
  store i8 %5, i8* %7, align 1, !insn.addr !12933
  %8 = udiv i64 %4, 256, !insn.addr !12934
  %9 = trunc i64 %8 to i8, !insn.addr !12934
  %10 = add i64 %0, ptrtoint (i8* @global_var_6 to i64), !insn.addr !12935
  %11 = inttoptr i64 %10 to i8*, !insn.addr !12935
  store i8 %9, i8* %11, align 1, !insn.addr !12935
  %12 = udiv i64 %4, 65536, !insn.addr !12936
  %13 = trunc i64 %12 to i8, !insn.addr !12937
  %14 = add i64 %0, ptrtoint (i8* @global_var_5 to i64), !insn.addr !12937
  %15 = inttoptr i64 %14 to i8*, !insn.addr !12937
  store i8 %13, i8* %15, align 1, !insn.addr !12937
  %16 = udiv i64 %4, 16777216, !insn.addr !12938
  %17 = trunc i64 %16 to i8, !insn.addr !12939
  %18 = add i64 %0, ptrtoint (i16* @global_var_4 to i64), !insn.addr !12939
  %19 = inttoptr i64 %18 to i8*, !insn.addr !12939
  store i8 %17, i8* %19, align 1, !insn.addr !12939
  ret i64 %16, !insn.addr !12940
}

define i64 @des_crypt_ecb_Multi.538(i64 %arg1, i64* %arg2, i64 %arg3, i64 %arg4, i64* %arg5) local_unnamed_addr {
dec_label_pc_1c4db:
  %0 = call i64 @mcount(), !insn.addr !12941
  ret i64 %0, !insn.addr !12942
}

define i64 @function_1c5b5(i64 %arg1) local_unnamed_addr {
dec_label_pc_1c5b5:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = add i64 %0, ptrtoint (i32** @global_var_21 to i64), !insn.addr !12943
  %2 = inttoptr i64 %1 to i32*, !insn.addr !12943
  %3 = load i32, i32* %2, align 4, !insn.addr !12943
  %4 = sub i32 %3, ptrtoint (i32* @global_var_1 to i32), !insn.addr !12943
  store i32 %4, i32* %2, align 4, !insn.addr !12943
  ret i64 %0, !insn.addr !12944
}

define i64 @function_1c5d3(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_1c5d3:
  %0 = call i64 @__decompiler_undefined_function_0()
  ret i64 %0, !insn.addr !12945
}

define i64 @function_1c612() local_unnamed_addr {
dec_label_pc_1c612:
  %0 = call i64 @__decompiler_undefined_function_0()
  ret i64 %0, !insn.addr !12946
}

define i64 @function_1c643() local_unnamed_addr {
dec_label_pc_1c643:
  %0 = call i64 @__decompiler_undefined_function_0()
  ret i64 %0, !insn.addr !12947
}

define i64 @function_1c64c() local_unnamed_addr {
dec_label_pc_1c64c:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = call x86_fp80 @__decompiler_undefined_function_6()
  %2 = fptosi x86_fp80 %1 to i16, !insn.addr !12948
  %3 = add i64 %0, 49, !insn.addr !12948
  %4 = inttoptr i64 %3 to i16*, !insn.addr !12948
  store i16 %2, i16* %4, align 2, !insn.addr !12948
  ret i64 %0, !insn.addr !12949
}

define i64 @function_1c655(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4, i64 %arg5, i64 %arg6) local_unnamed_addr {
dec_label_pc_1c655:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = call i64 @__decompiler_undefined_function_0()
  %2 = call i64 @__decompiler_undefined_function_0()
  %3 = call i64 @__decompiler_undefined_function_0()
  %4 = call i64 @__decompiler_undefined_function_0()
  %5 = call i64 @__decompiler_undefined_function_0()
  %6 = call i64 @__decompiler_undefined_function_0()
  %7 = call i64 @__decompiler_undefined_function_0()
  %8 = icmp eq i64 %7, sub (i64 0, i64 add (i64 ptrtoint (i32** @global_var_20 to i64), i64 -256)), !insn.addr !12950
  %9 = icmp eq i1 %8, false, !insn.addr !12951
  br i1 %9, label %dec_label_pc_1c66b, label %dec_label_pc_1c7c2, !insn.addr !12951

dec_label_pc_1c66b:                               ; preds = %dec_label_pc_1c655
  %10 = add i64 %7, ptrtoint (i32** @global_var_20 to i64), !insn.addr !12952
  ret i64 %10, !insn.addr !12953

dec_label_pc_1c7c2:                               ; preds = %dec_label_pc_1c655
  %11 = trunc i64 %arg1 to i32, !insn.addr !12954
  %12 = lshr i32 %11, ptrtoint (i16* @global_var_4 to i32), !insn.addr !12954
  %13 = zext i32 %12 to i64, !insn.addr !12954
  %14 = shl i64 %13, ptrtoint (i32** @global_var_1c to i64), !insn.addr !12955
  %15 = or i64 %0, %14, !insn.addr !12956
  %16 = mul i64 %7, ptrtoint (i32* @global_var_1 to i64), !insn.addr !12957
  %17 = add i64 %16, %arg6
  %18 = add i64 %17, ptrtoint (i8* @global_var_8 to i64), !insn.addr !12957
  %19 = inttoptr i64 %18 to i64*, !insn.addr !12957
  %20 = load i64, i64* %19, align 8, !insn.addr !12957
  %21 = xor i64 %20, %15, !insn.addr !12957
  %22 = mul i64 %4, 8, !insn.addr !12958
  %23 = and i64 %22, 504, !insn.addr !12959
  %24 = add i64 %arg4, 3584, !insn.addr !12959
  %25 = add i64 %23, %24, !insn.addr !12959
  %26 = inttoptr i64 %25 to i64*, !insn.addr !12959
  %27 = load i64, i64* %26, align 8, !insn.addr !12959
  %28 = xor i64 %27, %6, !insn.addr !12959
  %29 = lshr i64 %4, ptrtoint (i8* @global_var_8 to i64), !insn.addr !12960
  %30 = mul i64 %29, 8, !insn.addr !12961
  %31 = and i64 %30, 504, !insn.addr !12962
  %32 = add i64 %arg4, 2560, !insn.addr !12962
  %33 = add i64 %31, %32, !insn.addr !12962
  %34 = inttoptr i64 %33 to i64*, !insn.addr !12962
  %35 = load i64, i64* %34, align 8, !insn.addr !12962
  %36 = xor i64 %28, %35, !insn.addr !12962
  %37 = lshr i64 %4, ptrtoint (i8* @global_var_10 to i64), !insn.addr !12963
  %38 = mul i64 %37, 8, !insn.addr !12964
  %39 = and i64 %38, 504, !insn.addr !12965
  %40 = add i64 %arg4, 1536, !insn.addr !12965
  %41 = add i64 %39, %40, !insn.addr !12965
  %42 = inttoptr i64 %41 to i64*, !insn.addr !12965
  %43 = load i64, i64* %42, align 8, !insn.addr !12965
  %44 = xor i64 %36, %43, !insn.addr !12965
  %45 = lshr i64 %4, ptrtoint (i32** @global_var_18 to i64), !insn.addr !12966
  %46 = mul i64 %45, 8, !insn.addr !12967
  %47 = and i64 %46, 504, !insn.addr !12968
  %48 = add i64 %arg4, 512, !insn.addr !12968
  %49 = add i64 %47, %48, !insn.addr !12968
  %50 = inttoptr i64 %49 to i64*, !insn.addr !12968
  %51 = load i64, i64* %50, align 8, !insn.addr !12968
  %52 = xor i64 %44, %51, !insn.addr !12968
  %53 = mul i64 %21, 8, !insn.addr !12969
  %54 = and i64 %53, 504, !insn.addr !12970
  %55 = add i64 %arg4, 3072, !insn.addr !12970
  %56 = add i64 %54, %55, !insn.addr !12970
  %57 = inttoptr i64 %56 to i64*, !insn.addr !12970
  %58 = load i64, i64* %57, align 8, !insn.addr !12970
  %59 = xor i64 %52, %58, !insn.addr !12970
  %60 = lshr i64 %21, ptrtoint (i8* @global_var_8 to i64), !insn.addr !12971
  %61 = mul i64 %60, 8, !insn.addr !12972
  %62 = and i64 %61, 504, !insn.addr !12973
  %63 = add i64 %arg4, 2048, !insn.addr !12973
  %64 = add i64 %62, %63, !insn.addr !12973
  %65 = inttoptr i64 %64 to i64*, !insn.addr !12973
  %66 = load i64, i64* %65, align 8, !insn.addr !12973
  %67 = xor i64 %59, %66, !insn.addr !12973
  %68 = lshr i64 %21, ptrtoint (i8* @global_var_10 to i64), !insn.addr !12974
  %69 = mul i64 %68, 8, !insn.addr !12975
  %70 = and i64 %69, 504, !insn.addr !12976
  %71 = add i64 %arg4, 1024, !insn.addr !12976
  %72 = add i64 %70, %71, !insn.addr !12976
  %73 = inttoptr i64 %72 to i64*, !insn.addr !12976
  %74 = load i64, i64* %73, align 8, !insn.addr !12976
  %75 = xor i64 %67, %74, !insn.addr !12976
  %76 = lshr i64 %21, ptrtoint (i32** @global_var_18 to i64), !insn.addr !12977
  %77 = urem i64 %76, 64, !insn.addr !12978
  %78 = mul i64 %77, ptrtoint (i8* @global_var_8 to i64), !insn.addr !12979
  %79 = add i64 %78, %arg4, !insn.addr !12979
  %80 = inttoptr i64 %79 to i64*, !insn.addr !12979
  %81 = load i64, i64* %80, align 8, !insn.addr !12979
  %82 = xor i64 %75, %81, !insn.addr !12979
  %83 = add i64 %17, ptrtoint (i8* @global_var_10 to i64), !insn.addr !12980
  %84 = inttoptr i64 %83 to i64*, !insn.addr !12980
  %85 = load i64, i64* %84, align 8, !insn.addr !12980
  %86 = xor i64 %82, %85, !insn.addr !12980
  %87 = lshr i64 %82, ptrtoint (i16* @global_var_4 to i64), !insn.addr !12981
  %88 = shl i64 %82, ptrtoint (i32** @global_var_1c to i64), !insn.addr !12982
  %89 = or i64 %88, %87, !insn.addr !12983
  %90 = add i64 %17, ptrtoint (i32** @global_var_18 to i64), !insn.addr !12984
  %91 = inttoptr i64 %90 to i64*, !insn.addr !12984
  %92 = load i64, i64* %91, align 8, !insn.addr !12984
  %93 = xor i64 %89, %92, !insn.addr !12984
  %94 = mul i64 %86, 8, !insn.addr !12985
  %95 = and i64 %94, 504, !insn.addr !12986
  %96 = add i64 %95, %24, !insn.addr !12986
  %97 = inttoptr i64 %96 to i64*, !insn.addr !12986
  %98 = load i64, i64* %97, align 8, !insn.addr !12986
  %99 = xor i64 %98, %13, !insn.addr !12986
  %100 = lshr i64 %86, ptrtoint (i8* @global_var_8 to i64), !insn.addr !12987
  %101 = mul i64 %100, 8, !insn.addr !12988
  %102 = and i64 %101, 504, !insn.addr !12989
  %103 = add i64 %102, %32, !insn.addr !12989
  %104 = inttoptr i64 %103 to i64*, !insn.addr !12989
  %105 = load i64, i64* %104, align 8, !insn.addr !12989
  %106 = xor i64 %99, %105, !insn.addr !12989
  %107 = lshr i64 %86, ptrtoint (i8* @global_var_10 to i64), !insn.addr !12990
  %108 = mul i64 %107, 8, !insn.addr !12991
  %109 = and i64 %108, 504, !insn.addr !12992
  %110 = add i64 %109, %40, !insn.addr !12992
  %111 = inttoptr i64 %110 to i64*, !insn.addr !12992
  %112 = load i64, i64* %111, align 8, !insn.addr !12992
  %113 = xor i64 %106, %112, !insn.addr !12992
  %114 = lshr i64 %86, ptrtoint (i32** @global_var_18 to i64), !insn.addr !12993
  %115 = mul i64 %114, 8, !insn.addr !12994
  %116 = and i64 %115, 504, !insn.addr !12995
  %117 = add i64 %116, %48, !insn.addr !12995
  %118 = inttoptr i64 %117 to i64*, !insn.addr !12995
  %119 = load i64, i64* %118, align 8, !insn.addr !12995
  %120 = xor i64 %113, %119, !insn.addr !12995
  %121 = mul i64 %93, 8, !insn.addr !12996
  %122 = and i64 %121, 504, !insn.addr !12997
  %123 = add i64 %122, %55, !insn.addr !12997
  %124 = inttoptr i64 %123 to i64*, !insn.addr !12997
  %125 = load i64, i64* %124, align 8, !insn.addr !12997
  %126 = xor i64 %120, %125, !insn.addr !12997
  %127 = lshr i64 %93, ptrtoint (i8* @global_var_8 to i64), !insn.addr !12998
  %128 = mul i64 %127, 8, !insn.addr !12999
  %129 = and i64 %128, 504, !insn.addr !13000
  %130 = add i64 %129, %63, !insn.addr !13000
  %131 = inttoptr i64 %130 to i64*, !insn.addr !13000
  %132 = load i64, i64* %131, align 8, !insn.addr !13000
  %133 = xor i64 %126, %132, !insn.addr !13000
  %134 = lshr i64 %93, ptrtoint (i8* @global_var_10 to i64), !insn.addr !13001
  %135 = mul i64 %134, 8, !insn.addr !13002
  %136 = and i64 %135, 504, !insn.addr !13003
  %137 = add i64 %136, %71, !insn.addr !13003
  %138 = inttoptr i64 %137 to i64*, !insn.addr !13003
  %139 = load i64, i64* %138, align 8, !insn.addr !13003
  %140 = xor i64 %133, %139, !insn.addr !13003
  %141 = lshr i64 %93, ptrtoint (i32** @global_var_18 to i64), !insn.addr !13004
  %142 = urem i64 %141, 64, !insn.addr !13005
  %143 = mul i64 %142, ptrtoint (i8* @global_var_8 to i64), !insn.addr !13006
  %144 = add i64 %143, %arg4, !insn.addr !13006
  %145 = inttoptr i64 %144 to i64*, !insn.addr !13006
  %146 = load i64, i64* %145, align 8, !insn.addr !13006
  %147 = xor i64 %140, %146, !insn.addr !13006
  %148 = lshr i64 %147, ptrtoint (i32* @global_var_1 to i64), !insn.addr !13007
  %149 = shl i64 %147, ptrtoint (i8** @global_var_1f to i64), !insn.addr !13008
  %150 = or i64 %149, %148, !insn.addr !13009
  %151 = and i64 %150, 4294967295, !insn.addr !13010
  %152 = xor i64 %150, %82, !insn.addr !13011
  %153 = and i64 %152, 2863311530, !insn.addr !13012
  %154 = xor i64 %153, %151, !insn.addr !13013
  %155 = xor i64 %153, %82, !insn.addr !13014
  %156 = lshr i64 %155, ptrtoint (i32* @global_var_1 to i64), !insn.addr !13015
  %157 = shl i64 %155, ptrtoint (i8** @global_var_1f to i64), !insn.addr !13016
  %158 = or i64 %157, %156, !insn.addr !13017
  %159 = and i64 %158, 4294967295, !insn.addr !13018
  %160 = lshr i64 %159, ptrtoint (i8* @global_var_8 to i64), !insn.addr !13019
  %161 = xor i64 %160, %154, !insn.addr !13020
  %162 = and i64 %161, 16711935, !insn.addr !13021
  %163 = xor i64 %162, %154, !insn.addr !13022
  %164 = mul i64 %162, 256, !insn.addr !13023
  %165 = xor i64 %164, %159, !insn.addr !13024
  %166 = udiv i64 %165, 4, !insn.addr !13025
  %167 = xor i64 %166, %163, !insn.addr !13026
  %168 = and i64 %167, 858993459, !insn.addr !13027
  %169 = xor i64 %168, %163, !insn.addr !13028
  %170 = mul i64 %168, 4, !insn.addr !13029
  %171 = xor i64 %170, %165, !insn.addr !13030
  %172 = udiv i64 %169, 65536, !insn.addr !13031
  %.masked = urem i64 %171, 65536
  %173 = xor i64 %.masked, %172, !insn.addr !13032
  %174 = xor i64 %173, %171, !insn.addr !13033
  %175 = mul i64 %173, 65536, !insn.addr !13034
  %176 = xor i64 %175, %169, !insn.addr !13035
  %177 = udiv i64 %176, 16, !insn.addr !13036
  %178 = xor i64 %177, %174, !insn.addr !13037
  %179 = and i64 %178, 252645135, !insn.addr !13038
  %180 = mul i64 %179, 16, !insn.addr !13039
  %181 = xor i64 %180, %176, !insn.addr !13040
  %182 = add i64 %5, -80, !insn.addr !13041
  %183 = inttoptr i64 %182 to i64*, !insn.addr !13041
  %184 = load i64, i64* %183, align 8, !insn.addr !13041
  %185 = trunc i64 %181 to i8, !insn.addr !13042
  %186 = mul i64 %184, ptrtoint (i32* @global_var_1 to i64), !insn.addr !13042
  %187 = add i64 %186, %arg3, !insn.addr !13042
  %188 = inttoptr i64 %187 to i8*, !insn.addr !13042
  store i8 %185, i8* %188, align 1, !insn.addr !13042
  %189 = udiv i64 %181, 256, !insn.addr !13043
  %190 = trunc i64 %189 to i8, !insn.addr !13043
  %191 = mul i64 %1, ptrtoint (i32* @global_var_1 to i64), !insn.addr !13044
  %192 = add i64 %191, %arg3, !insn.addr !13044
  %193 = inttoptr i64 %192 to i8*, !insn.addr !13044
  store i8 %190, i8* %193, align 1, !insn.addr !13044
  %194 = udiv i64 %181, 65536, !insn.addr !13045
  %195 = add i64 %5, -72, !insn.addr !13046
  %196 = inttoptr i64 %195 to i64*, !insn.addr !13046
  %197 = load i64, i64* %196, align 8, !insn.addr !13046
  %198 = trunc i64 %194 to i8, !insn.addr !13047
  %199 = mul i64 %197, ptrtoint (i32* @global_var_1 to i64), !insn.addr !13047
  %200 = add i64 %199, %arg3, !insn.addr !13047
  %201 = inttoptr i64 %200 to i8*, !insn.addr !13047
  store i8 %198, i8* %201, align 1, !insn.addr !13047
  %202 = udiv i64 %181, 16777216, !insn.addr !13048
  %203 = trunc i64 %202 to i8, !insn.addr !13049
  %204 = mul i64 %3, ptrtoint (i32* @global_var_1 to i64), !insn.addr !13049
  %205 = add i64 %204, %arg3, !insn.addr !13049
  %206 = inttoptr i64 %205 to i8*, !insn.addr !13049
  store i8 %203, i8* %206, align 1, !insn.addr !13049
  %207 = xor i64 %179, %174, !insn.addr !13050
  %208 = add i64 %5, -64, !insn.addr !13051
  %209 = inttoptr i64 %208 to i64*, !insn.addr !13051
  %210 = load i64, i64* %209, align 8, !insn.addr !13051
  %211 = trunc i64 %207 to i8, !insn.addr !13052
  %212 = mul i64 %210, ptrtoint (i32* @global_var_1 to i64), !insn.addr !13052
  %213 = add i64 %212, %arg3, !insn.addr !13052
  %214 = inttoptr i64 %213 to i8*, !insn.addr !13052
  store i8 %211, i8* %214, align 1, !insn.addr !13052
  %215 = udiv i64 %207, 256, !insn.addr !13053
  %216 = trunc i64 %215 to i8, !insn.addr !13053
  %217 = mul i64 %2, ptrtoint (i32* @global_var_1 to i64), !insn.addr !13054
  %218 = add i64 %217, %arg3, !insn.addr !13054
  %219 = inttoptr i64 %218 to i8*, !insn.addr !13054
  store i8 %216, i8* %219, align 1, !insn.addr !13054
  ret i64 %207, !insn.addr !13055
}

define i64 @Tnim_PollingThreadDelayTime() local_unnamed_addr {
dec_label_pc_1c8ac:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = call i64 @__decompiler_undefined_function_0()
  %2 = call i64 @__decompiler_undefined_function_0()
  %3 = call i64 @__decompiler_undefined_function_0()
  %4 = lshr i64 %0, ptrtoint (i8* @global_var_8 to i64), !insn.addr !13056
  %5 = trunc i64 %4 to i8, !insn.addr !13056
  %6 = mul i64 %2, ptrtoint (i32* @global_var_1 to i64), !insn.addr !13056
  %7 = add i64 %6, %1, !insn.addr !13056
  %8 = inttoptr i64 %7 to i8*, !insn.addr !13056
  store i8 %5, i8* %8, align 1, !insn.addr !13056
  ret i64 %3, !insn.addr !13057
}

define i8 @Tnim_PollingThreadOnlyCallOnce(i8* %DevExt, i8* %StartPolling, i8 %Total_Tuner_Num, i8* %tuner_globe_data) local_unnamed_addr {
dec_label_pc_1c8bc:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = trunc i64 %0 to i8, !insn.addr !13058
  ret i8 %1, !insn.addr !13058
}

define i8 @Tnim_PollingThread(i8* %DevExt, i8 %Tuner_Num) local_unnamed_addr {
dec_label_pc_1c8cf:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = call i64 @__decompiler_undefined_function_0()
  %2 = add i64 %0, 65, !insn.addr !13059
  %3 = inttoptr i64 %2 to i8*, !insn.addr !13059
  %4 = load i8, i8* %3, align 1, !insn.addr !13059
  %5 = trunc i64 %0 to i8, !insn.addr !13059
  %6 = xor i8 %4, %5, !insn.addr !13059
  store i8 %6, i8* %3, align 1, !insn.addr !13059
  %7 = trunc i64 %1 to i8, !insn.addr !13060
  ret i8 %7, !insn.addr !13060
}

define i64 @Tnim_PollingThreadDelayTime.171() local_unnamed_addr {
dec_label_pc_1c8dc:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = call i64 @__decompiler_undefined_function_0()
  %2 = call i64 @__decompiler_undefined_function_0()
  %3 = call i64 @__decompiler_undefined_function_0()
  %4 = call i64 @mcount(), !insn.addr !13061
  %5 = inttoptr i64 %0 to i8*, !insn.addr !13062
  %6 = trunc i64 %1 to i8, !insn.addr !13062
  %7 = trunc i64 %2 to i8, !insn.addr !13062
  %8 = inttoptr i64 %3 to i8*, !insn.addr !13062
  call void @TC_PowerTunerDemod(i8* %5, i8 %6, i8 %7, i8* %8), !insn.addr !13062
  ret i64 ptrtoint (i32* @0 to i64), !insn.addr !13063
}

define i64 @Tnim_PollingThreadOnlyCallOnce.191(i64 %arg1, i64 %arg2, i64* %arg3, i64 %arg4) local_unnamed_addr {
dec_label_pc_1c8ec:
  %0 = call i64 @mcount(), !insn.addr !13064
  ret i64 %0, !insn.addr !13064
}

define i8 @Tnim_IsLocked(i64 %psTnim) local_unnamed_addr {
dec_label_pc_1c8f7:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = trunc i64 %0 to i8, !insn.addr !13065
  ret i8 %1, !insn.addr !13065
}

define i64 @Tnim_PollingThread.175(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_1c8ff:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = call i64 @mcount(), !insn.addr !13066
  %2 = urem i64 %arg2, 256, !insn.addr !13067
  %3 = mul i64 %2, shl (i64 add (i64 ptrtoint (i16* @global_var_4 to i64), i64 1), i64 ptrtoint (i16* @global_var_4 to i64)), !insn.addr !13068
  %4 = add i64 %arg1, 22880, !insn.addr !13069
  %5 = add i64 %4, %3, !insn.addr !13069
  %6 = trunc i64 %arg2 to i8, !insn.addr !13070
  %7 = inttoptr i64 %arg1 to i8*, !insn.addr !13071
  %8 = inttoptr i64 %5 to i32*, !insn.addr !13071
  %9 = inttoptr i64 %0 to i8*, !insn.addr !13071
  %10 = call i8 @TC_CurrentTSIDRead(i8* %7, i8 %6, i32* %8, i8* %9), !insn.addr !13071
  %11 = sext i8 %10 to i64, !insn.addr !13071
  ret i64 %11, !insn.addr !13072
}

define i64 @Tnim_IsLocked.222() local_unnamed_addr {
dec_label_pc_1c927:
  %0 = call i64 @mcount(), !insn.addr !13073
  ret i64 %0, !insn.addr !13073
}

define i8 @Tnim_ReadSNRx8(i64 %psTnim) local_unnamed_addr {
dec_label_pc_1c930:
  %0 = add i64 %psTnim, 7480, !insn.addr !13074
  %1 = inttoptr i64 %0 to i64*, !insn.addr !13074
  %2 = load i64, i64* %1, align 8, !insn.addr !13074
  %3 = add i64 %psTnim, 7472, !insn.addr !13075
  %4 = inttoptr i64 %3 to i8*, !insn.addr !13075
  %5 = load i8, i8* %4, align 1, !insn.addr !13075
  %6 = zext i8 %5 to i64, !insn.addr !13076
  %7 = mul nuw nsw i64 %6, 80, !insn.addr !13077
  %8 = add i64 %2, 22880, !insn.addr !13078
  %9 = add i64 %8, %7, !insn.addr !13078
  %10 = call i64 @TC_IsLocked.534(i64 %2, i64 %6, i64 %9), !insn.addr !13079
  %11 = trunc i64 %10 to i8, !insn.addr !13080
  ret i8 %11, !insn.addr !13080
}

define i64 @Tnim_ReadSNRx8.369() local_unnamed_addr {
dec_label_pc_1c960:
  %0 = call i64 @mcount(), !insn.addr !13081
  ret i64 %0, !insn.addr !13081
}

define i8 @Tnim_AcqInit(i64 %psTnim) local_unnamed_addr {
dec_label_pc_1c969:
  %0 = add i64 %psTnim, 7480, !insn.addr !13082
  %1 = inttoptr i64 %0 to i64*, !insn.addr !13082
  %2 = load i64, i64* %1, align 8, !insn.addr !13082
  %3 = add i64 %psTnim, 7472, !insn.addr !13083
  %4 = inttoptr i64 %3 to i8*, !insn.addr !13083
  %5 = load i8, i8* %4, align 1, !insn.addr !13083
  %6 = zext i8 %5 to i64, !insn.addr !13084
  %7 = mul nuw nsw i64 %6, 80, !insn.addr !13085
  %8 = add i64 %2, 22880, !insn.addr !13086
  %9 = add i64 %8, %7, !insn.addr !13086
  %10 = call i64 @TC_ReadSNR.608(i64 %2, i64 %6, i64 %9), !insn.addr !13087
  %11 = trunc i64 %10 to i8, !insn.addr !13088
  ret i8 %11, !insn.addr !13088
}

define i64 @Tnim_AcqInit.390(i64 %arg1) local_unnamed_addr {
dec_label_pc_1c999:
  %0 = call i64 @mcount(), !insn.addr !13089
  ret i64 %0, !insn.addr !13089
}

define i8 @Tnim_AcquireFrequency(i64 %psTnim, i64 %dwFreqkHz, i8 %ucBW) local_unnamed_addr {
dec_label_pc_1c9a2:
  %0 = call i64 @TC_PollingThreadDelayTime(), !insn.addr !13090
  %1 = trunc i64 %0 to i8, !insn.addr !13091
  ret i8 %1, !insn.addr !13091
}

define i64 @Tnim_AcquireFrequency.402(i64 %arg1, i64 %arg2, i64 %arg3) local_unnamed_addr {
dec_label_pc_1c9d2:
  %0 = call i64 @mcount(), !insn.addr !13092
  ret i64 %arg2, !insn.addr !13093
}

define i8 @Tnim_Initialise(i64 %pTuner) local_unnamed_addr {
dec_label_pc_1ca24:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = call i64 @__decompiler_undefined_function_0()
  %2 = call i64 @__decompiler_undefined_function_0()
  %3 = trunc i64 %2 to i8
  %4 = inttoptr i64 %2 to i8*, !insn.addr !13094
  store i8 %3, i8* %4, align 1, !insn.addr !13094
  %5 = add i64 %0, 7472, !insn.addr !13095
  %6 = inttoptr i64 %5 to i8*, !insn.addr !13095
  %7 = load i8, i8* %6, align 1, !insn.addr !13095
  %8 = zext i8 %7 to i64, !insn.addr !13096
  %9 = mul nuw nsw i64 %8, 80, !insn.addr !13097
  %10 = urem i64 %1, 256, !insn.addr !13098
  %11 = add i64 %pTuner, 22880, !insn.addr !13099
  %12 = add i64 %11, %9, !insn.addr !13099
  %13 = call i64 @TC_SetFrequency.492(i64 %pTuner, i64 %8, i64 %2, i64 %10, i64 %12), !insn.addr !13100
  %14 = trunc i64 %13 to i8, !insn.addr !13101
  ret i8 %14, !insn.addr !13101
}

define i64 @Tnim_Initialise.422(i64 %arg1) local_unnamed_addr {
dec_label_pc_1ca54:
  %stack_var_-25 = alloca i8, align 1
  %0 = call i64 @mcount(), !insn.addr !13102
  %1 = add i64 %arg1, 7480, !insn.addr !13103
  %2 = inttoptr i64 %1 to i64*, !insn.addr !13103
  %3 = load i64, i64* %2, align 8, !insn.addr !13103
  %4 = add i64 %arg1, 7472, !insn.addr !13104
  %5 = inttoptr i64 %4 to i8*, !insn.addr !13104
  %6 = load i8, i8* %5, align 1, !insn.addr !13104
  %7 = icmp eq i8 %6, 0, !insn.addr !13104
  %8 = sext i1 %7 to i8, !insn.addr !13105
  %9 = sub i8 %8, ptrtoint (i8* @global_var_f to i8), !insn.addr !13106
  store i8 %9, i8* %stack_var_-25, align 1, !insn.addr !13107
  %10 = load i8, i8* %5, align 1, !insn.addr !13108
  %11 = zext i8 %10 to i64, !insn.addr !13109
  %12 = mul nuw nsw i64 %11, 80, !insn.addr !13110
  %13 = add i64 %3, 22880, !insn.addr !13111
  %14 = add i64 %13, %12, !insn.addr !13111
  %15 = call i64 @TC_Initialise.376(i64 %3, i64 %11, i8* nonnull %stack_var_-25, i64 %14), !insn.addr !13112
  %16 = load i8, i8* %stack_var_-25, align 1, !insn.addr !13113
  %17 = and i8 %16, ptrtoint (i32* @global_var_1 to i8), !insn.addr !13114
  %18 = inttoptr i64 %arg1 to i8*, !insn.addr !13115
  store i8 %17, i8* %18, align 1, !insn.addr !13115
  %19 = load i8, i8* %stack_var_-25, align 1, !insn.addr !13116
  %20 = and i8 %19, ptrtoint (i32* @global_var_2 to i8), !insn.addr !13116
  %21 = icmp eq i8 %20, 0, !insn.addr !13116
  %22 = icmp eq i1 %21, false, !insn.addr !13117
  %23 = zext i1 %22 to i8, !insn.addr !13117
  %24 = add i64 %arg1, 5609, !insn.addr !13117
  %25 = inttoptr i64 %24 to i8*, !insn.addr !13117
  store i8 %23, i8* %25, align 1, !insn.addr !13117
  %26 = load i8, i8* %stack_var_-25, align 1, !insn.addr !13118
  %27 = and i8 %26, ptrtoint (i8* @global_var_8 to i8), !insn.addr !13118
  %28 = icmp eq i8 %27, 0, !insn.addr !13118
  %29 = icmp eq i1 %28, false, !insn.addr !13119
  %30 = zext i1 %29 to i8, !insn.addr !13119
  %31 = add i64 %arg1, 5610, !insn.addr !13119
  %32 = inttoptr i64 %31 to i8*, !insn.addr !13119
  store i8 %30, i8* %32, align 1, !insn.addr !13119
  ret i64 %15, !insn.addr !13120
}

define i64 @Tnim_SignalLevel(i64 %psTnim) local_unnamed_addr {
dec_label_pc_1cad2:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = call i64 @__decompiler_undefined_function_0()
  %2 = add i64 %0, 5611, !insn.addr !13121
  %3 = inttoptr i64 %2 to i8*, !insn.addr !13121
  %4 = load i8, i8* %3, align 1, !insn.addr !13121
  %5 = icmp eq i8 %4, 22, !insn.addr !13121
  %6 = icmp eq i1 %5, false, !insn.addr !13122
  %7 = add i64 %0, ptrtoint (i8** @global_var_30de4 to i64)
  %8 = inttoptr i64 %7 to i8*
  store i8 ptrtoint (i32* @global_var_1 to i8), i8* %8, align 1
  br i1 %6, label %dec_label_pc_1caf9, label %dec_label_pc_1cae2, !insn.addr !13122

dec_label_pc_1cae2:                               ; preds = %dec_label_pc_1cad2
  %9 = add i64 %0, 586869, !insn.addr !13123
  %10 = inttoptr i64 %9 to i8*, !insn.addr !13123
  store i8 ptrtoint (i32* @global_var_1 to i8), i8* %10, align 1, !insn.addr !13123
  br label %dec_label_pc_1caf9, !insn.addr !13124

dec_label_pc_1caf9:                               ; preds = %dec_label_pc_1cad2, %dec_label_pc_1cae2
  ret i64 %1, !insn.addr !13125
}

define i64 @Tnim_SignalLevel.326(i64 %arg1) local_unnamed_addr {
dec_label_pc_1cb02:
  %0 = call i64 @mcount(), !insn.addr !13126
  ret i64 %0, !insn.addr !13126
}

define i8 @TLIB_GetGPIOEx(i8* %DevExt) local_unnamed_addr {
dec_label_pc_1cb0b:
  %0 = ptrtoint i8* %DevExt to i64
  %1 = add i64 %0, 7472, !insn.addr !13127
  %2 = inttoptr i64 %1 to i8*, !insn.addr !13127
  %3 = load i8, i8* %2, align 1, !insn.addr !13127
  %4 = mul i8 %3, 5, !insn.addr !13128
  ret i8 %4, !insn.addr !13128
}

define void @TLIB_SetGPIOEx(i8* %DevExt, i8 %Data, i8 %MaskData) local_unnamed_addr {
dec_label_pc_1cb27:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = ptrtoint i8* %DevExt to i64
  %2 = add i64 %0, 72, !insn.addr !13129
  %3 = urem i64 %2, 256, !insn.addr !13129
  %4 = and i64 %0, 4294967040, !insn.addr !13129
  %5 = or i64 %3, %4, !insn.addr !13129
  %6 = add i64 %1, 22880, !insn.addr !13130
  %7 = add i64 %6, %5, !insn.addr !13130
  %8 = and i64 %7, 4294967295, !insn.addr !13130
  %9 = zext i8 %Data to i64, !insn.addr !13131
  %10 = call i64 @TC_GetSignaLevel.245(i64 %1, i64 %9, i64 %8), !insn.addr !13132
  ret void, !insn.addr !13133
}

define i64 @TLIB_GetGPIOEx.425() local_unnamed_addr {
dec_label_pc_1cb3b:
  %0 = call i64 @__decompiler_undefined_function_0()
  ret i64 %0, !insn.addr !13134
}

define i8 @TLIB_GetGPIO(i8* %DevExt) local_unnamed_addr {
dec_label_pc_1cb3e:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = ptrtoint i8* %DevExt to i64
  %2 = call i32 @__asm_in.624(i32 72), !insn.addr !13135
  %3 = call i64 @mcount(), !insn.addr !13136
  %4 = add i64 %0, -1, !insn.addr !13137
  %5 = call i64 @FUSBDTV_Cmd_Get_GPIO_Ex.609(i64 %1, i64 %4), !insn.addr !13138
  %6 = inttoptr i64 %4 to i8*, !insn.addr !13139
  %7 = load i8, i8* %6, align 1, !insn.addr !13139
  ret i8 %7, !insn.addr !13140
}

define i64 @TLIB_SetGPIOEx.513(i64 %arg1, i64* %arg2, i64* %arg3) local_unnamed_addr {
dec_label_pc_1cb57:
  %0 = call i64 @__decompiler_undefined_function_0()
  ret i64 %0, !insn.addr !13141
}

define void @TLIB_SetGPIO(i8* %DevExt, i8 %Data, i8 %MaskData) local_unnamed_addr {
dec_label_pc_1cb5a:
  %rdi = alloca i64, align 8
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = call i64 @__decompiler_undefined_function_0()
  %2 = sext i8 %MaskData to i64
  %3 = ptrtoint i8* %DevExt to i64
  %4 = call i32 @__asm_in.624(i32 232), !insn.addr !13142
  %5 = trunc i64 %0 to i8
  %6 = trunc i32 %4 to i8, !insn.addr !13143
  %7 = and i8 %6, %5, !insn.addr !13143
  %8 = inttoptr i64 %2 to i8*, !insn.addr !13143
  store i8 %7, i8* %8, align 1, !insn.addr !13143
  %9 = bitcast i64* %rdi to i8*
  %10 = load i8, i8* %9, align 8, !insn.addr !13144
  %11 = trunc i64 %1 to i8, !insn.addr !13144
  %12 = add i8 %10, %11, !insn.addr !13144
  store i8 %12, i8* %DevExt, align 1, !insn.addr !13144
  %13 = and i64 %2, -65281, !insn.addr !13145
  %14 = or i64 %13, 53760, !insn.addr !13145
  %15 = zext i8 %Data to i64, !insn.addr !13146
  %16 = inttoptr i64 %14 to i64*, !insn.addr !13147
  %17 = call i64 @FUSBDTV_Cmd_Set_GPIO_Ex.552(i64 %3, i64 %15, i64* nonnull %16), !insn.addr !13147
  ret void, !insn.addr !13148
}

define i64 @TLIB_GetGPIO.208() local_unnamed_addr {
dec_label_pc_1cb6e:
  %0 = call i64 @__decompiler_undefined_function_0()
  ret i64 %0, !insn.addr !13149
}

define void @TLIB_Delay(i64 %ms) local_unnamed_addr {
dec_label_pc_1cb71:
  %0 = call i32 @__asm_in.624(i32 72), !insn.addr !13150
  %1 = call i64 @mcount(), !insn.addr !13151
  ret void, !insn.addr !13152
}

define i8 @TLIB_I2C_WriteAndRead(i8* %DevExt, i8 %slave_addr, i8* %Write_buffer, i8 %Write_size, i8* %Read_buffer, i8 %Read_size, i8 %mode) local_unnamed_addr {
dec_label_pc_1cb81:
  %0 = ptrtoint i8* %Write_buffer to i64
  %1 = trunc i64 %0 to i8, !insn.addr !13153
  ret i8 %1, !insn.addr !13153
}

define i64 @function_1cb83(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4) local_unnamed_addr {
dec_label_pc_1cb83:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = call i64 @__decompiler_undefined_function_0()
  %2 = trunc i64 %0 to i32
  %3 = sub i32 %2, ptrtoint (i32* @global_var_1 to i32), !insn.addr !13154
  %4 = inttoptr i64 %arg1 to i32*, !insn.addr !13154
  store i32 %3, i32* %4, align 4, !insn.addr !13154
  ret i64 %1, !insn.addr !13155
}

define i64 @TLIB_SetGPIO.391(i64 %arg1, i64* %arg2, i64* %arg3) local_unnamed_addr {
dec_label_pc_1cb8a:
  %0 = ptrtoint i64* %arg3 to i64
  %1 = call i64 @mcount(), !insn.addr !13156
  %2 = urem i64 %0, 256, !insn.addr !13157
  %3 = call i64 @FUSBDTV_Cmd_Set_GPIO.468(i64 %arg1, i64* %arg2, i64 %2), !insn.addr !13158
  ret i64 %3, !insn.addr !13159
}

define i64 @TLIB_Delay.388(i64* %arg1) local_unnamed_addr {
dec_label_pc_1cba1:
  %0 = ptrtoint i64* %arg1 to i64
  %1 = call i64 @mcount(), !insn.addr !13160
  %2 = call i64 @vUSB_Wait.362(i64 %0), !insn.addr !13161
  ret i64 %2, !insn.addr !13162
}

define i64 @TLIB_I2C_WriteAndRead.409(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4, i64 %arg5, i64 %arg6, i8 %arg7) local_unnamed_addr {
dec_label_pc_1cbb1:
  %0 = call i64 @mcount(), !insn.addr !13163
  %1 = add i64 %arg1, 320, !insn.addr !13164
  %2 = call i64 @down(i64 %1, i64 %arg2), !insn.addr !13165
  %3 = add i64 %arg1, 22136, !insn.addr !13166
  %4 = inttoptr i64 %3 to i64*, !insn.addr !13166
  store i64 ptrtoint (i32* @global_var_1 to i64), i64* %4, align 8, !insn.addr !13166
  %5 = call i64 @up(i64 %1), !insn.addr !13167
  ret i64 %5, !insn.addr !13168
}

define i8 @TLIB_I2C_Read(i8* %DevExt, i8 %I2C_Addr, i8 %byReg, i8* %pBuffer, i8 %byCount, i8 %I2C_Mode) local_unnamed_addr {
dec_label_pc_1cc30:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = trunc i64 %0 to i8
  ret i8 %1
}

define i64 @function_1cc32(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4, i64 %arg5) local_unnamed_addr {
dec_label_pc_1cc32:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = call i64 @__decompiler_undefined_function_0()
  %2 = add i64 %0, 22136, !insn.addr !13169
  %3 = inttoptr i64 %2 to i64*, !insn.addr !13169
  store i64 0, i64* %3, align 8, !insn.addr !13169
  ret i64 %1, !insn.addr !13170
}

define i64 @TLIB_I2C_Read.262(i64 %arg1, i64 %arg2, i64 %arg3, i64* %arg4, i64* %arg5, i64 %arg6) local_unnamed_addr {
dec_label_pc_1cc60:
  %0 = call i64 @mcount(), !insn.addr !13171
  %1 = add i64 %arg1, 320, !insn.addr !13172
  %2 = call i64 @down(i64 %1, i64 %arg2), !insn.addr !13173
  %3 = add i64 %arg1, 22136, !insn.addr !13174
  %4 = inttoptr i64 %3 to i64*, !insn.addr !13174
  store i64 ptrtoint (i32* @global_var_1 to i64), i64* %4, align 8, !insn.addr !13174
  %5 = call i64 @up(i64 %1), !insn.addr !13175
  ret i64 %5, !insn.addr !13176
}

define i8 @TLIB_I2C_Write(i8* %DevExt, i8 %I2C_Addr, i8 %byReg, i8* %pBuffer, i8 %byCount, i8 %I2C_Mode) local_unnamed_addr {
dec_label_pc_1ccd1:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = trunc i64 %0 to i8
  ret i8 %1
}

define i64 @function_1ccd3(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4, i64 %arg5) local_unnamed_addr {
dec_label_pc_1ccd3:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = call i64 @__decompiler_undefined_function_0()
  %2 = add i64 %0, 22136, !insn.addr !13177
  %3 = inttoptr i64 %2 to i64*, !insn.addr !13177
  store i64 0, i64* %3, align 8, !insn.addr !13177
  ret i64 %1, !insn.addr !13178
}

define i64 @TLIB_I2C_Write.278(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4, i64 %arg5, i64 %arg6) local_unnamed_addr {
dec_label_pc_1cd01:
  %0 = call i64 @mcount(), !insn.addr !13179
  %1 = add i64 %arg1, 320, !insn.addr !13180
  %2 = call i64 @down(i64 %1, i64 %arg2), !insn.addr !13181
  %3 = add i64 %arg1, 22136, !insn.addr !13182
  %4 = inttoptr i64 %3 to i64*, !insn.addr !13182
  %5 = load i64, i64* %4, align 8, !insn.addr !13182
  %6 = icmp eq i64 %5, 0, !insn.addr !13182
  %7 = icmp eq i1 %6, false, !insn.addr !13183
  br i1 %7, label %dec_label_pc_1cd5f, label %dec_label_pc_1cd44, !insn.addr !13183

dec_label_pc_1cd44:                               ; preds = %dec_label_pc_1cd5f, %dec_label_pc_1cd01
  store i64 ptrtoint (i32* @global_var_1 to i64), i64* %4, align 8, !insn.addr !13184
  %8 = call i64 @up(i64 %1), !insn.addr !13185
  %9 = trunc i64 %arg6 to i8, !insn.addr !13186
  %10 = icmp ugt i8 %9, ptrtoint (i32* @global_var_1 to i8)
  br i1 %10, label %dec_label_pc_1cd92, label %dec_label_pc_1cd73, !insn.addr !13187

dec_label_pc_1cd5f:                               ; preds = %dec_label_pc_1cd01, %dec_label_pc_1cd5f
  %11 = call i64 @up(i64 %1), !insn.addr !13188
  %12 = call i64 @vUSB_Wait.362(i64 ptrtoint (i32* @global_var_1 to i64)), !insn.addr !13189
  %13 = call i64 @down(i64 %1, i64 %arg2), !insn.addr !13181
  %14 = load i64, i64* %4, align 8, !insn.addr !13182
  %15 = icmp eq i64 %14, 0, !insn.addr !13182
  %16 = icmp eq i1 %15, false, !insn.addr !13183
  br i1 %16, label %dec_label_pc_1cd5f, label %dec_label_pc_1cd44, !insn.addr !13183

dec_label_pc_1cd73:                               ; preds = %dec_label_pc_1cd44
  %17 = urem i64 %arg5, 256
  %18 = urem i64 %arg3, 256, !insn.addr !13190
  %19 = urem i64 %arg2, 256, !insn.addr !13191
  %20 = urem i64 %arg6, 256, !insn.addr !13192
  %21 = inttoptr i64 %20 to i64*, !insn.addr !13193
  %22 = call i64 @USB_I2C_Write.590(i64 %arg1, i64 %19, i64 %18, i64 %arg4, i64 %17, i64* %21), !insn.addr !13193
  ret i64 %22, !insn.addr !13194

dec_label_pc_1cd92:                               ; preds = %dec_label_pc_1cd44
  ret i64 %8, !insn.addr !13195
}

define i8 @smi_clear_interrupt(i64 %pFdoData) local_unnamed_addr {
dec_label_pc_1cd9c:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = call i64 @__decompiler_undefined_function_0()
  %2 = call i64 @__decompiler_undefined_function_0()
  %3 = call i64 @__decompiler_undefined_function_0()
  %4 = call i64 @__decompiler_undefined_function_0()
  %5 = and i64 %4, -65281, !insn.addr !13196
  %6 = or i64 %5, 52480, !insn.addr !13196
  %7 = add i64 %2, -57, !insn.addr !13197
  %8 = inttoptr i64 %7 to i8*, !insn.addr !13197
  %9 = load i8, i8* %8, align 1, !insn.addr !13197
  %10 = zext i8 %9 to i64, !insn.addr !13197
  %11 = add i64 %2, -56, !insn.addr !13198
  %12 = inttoptr i64 %11 to i64*, !insn.addr !13198
  %13 = load i64, i64* %12, align 8, !insn.addr !13198
  %14 = inttoptr i64 %0 to i64*, !insn.addr !13199
  %15 = call i64 @USB_I2C_Write.590(i64 %3, i64 %1, i64 %6, i64 %13, i64 %10, i64* %14), !insn.addr !13199
  %16 = add i64 %3, 22136, !insn.addr !13200
  %17 = inttoptr i64 %16 to i64*, !insn.addr !13200
  store i64 0, i64* %17, align 8, !insn.addr !13200
  %18 = trunc i64 %15 to i8, !insn.addr !13201
  ret i8 %18, !insn.addr !13201
}

define i64 @smi_clear_interrupt.364(i64 %arg1) local_unnamed_addr {
dec_label_pc_1cdcc:
  %0 = call i64 @mcount(), !insn.addr !13202
  %1 = add i64 %arg1, 22520, !insn.addr !13203
  %2 = inttoptr i64 %1 to i64*, !insn.addr !13203
  %3 = load i64, i64* %2, align 8, !insn.addr !13203
  %4 = add i64 %3, 2056, !insn.addr !13204
  %5 = inttoptr i64 %4 to i32*, !insn.addr !13205
  %6 = load i32, i32* %5, align 4, !insn.addr !13205
  %7 = zext i32 %6 to i64, !insn.addr !13205
  ret i64 %7, !insn.addr !13205
}

define i8 @smi_disable_interrupt(i64 %pFdoData, i64 %interrupt) local_unnamed_addr {
dec_label_pc_1cdea:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = call i64 @__decompiler_undefined_function_0()
  %2 = add i64 %1, -127, !insn.addr !13206
  %3 = inttoptr i64 %2 to i8*, !insn.addr !13206
  %4 = load i8, i8* %3, align 1, !insn.addr !13206
  %5 = trunc i64 %0 to i8, !insn.addr !13206
  %6 = add i8 %4, %5, !insn.addr !13206
  store i8 %6, i8* %3, align 1, !insn.addr !13206
  %7 = trunc i64 %1 to i8, !insn.addr !13207
  ret i8 %7, !insn.addr !13207
}

define i64 @function_1ce09(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4) local_unnamed_addr {
dec_label_pc_1ce09:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = add i64 %0, -127, !insn.addr !13208
  %2 = inttoptr i64 %1 to i8*, !insn.addr !13208
  %3 = load i8, i8* %2, align 1, !insn.addr !13208
  %4 = trunc i64 %arg4 to i8, !insn.addr !13208
  %5 = add i8 %3, %4, !insn.addr !13208
  store i8 %5, i8* %2, align 1, !insn.addr !13208
  ret i64 %0, !insn.addr !13209
}

define i8 @smi_enable_interrupt(i64 %pFdoData, i64 %interrupt) local_unnamed_addr {
dec_label_pc_1ce18:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = trunc i64 %0 to i8, !insn.addr !13210
  ret i8 %1, !insn.addr !13210
}

define i64 @smi_disable_interrupt.505(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_1ce1a:
  %0 = call i64 @mcount(), !insn.addr !13211
  %1 = add i64 %arg1, 22520, !insn.addr !13212
  %2 = inttoptr i64 %1 to i64*, !insn.addr !13212
  %3 = load i64, i64* %2, align 8, !insn.addr !13212
  %4 = add i64 %3, 2072, !insn.addr !13213
  %5 = trunc i64 %arg2 to i32, !insn.addr !13214
  %6 = inttoptr i64 %4 to i32*, !insn.addr !13214
  store i32 %5, i32* %6, align 4, !insn.addr !13214
  %7 = load i64, i64* %2, align 8, !insn.addr !13215
  %8 = add i64 %7, 2068, !insn.addr !13216
  %9 = inttoptr i64 %8 to i32*, !insn.addr !13217
  %10 = load i32, i32* %9, align 4, !insn.addr !13217
  %11 = icmp eq i32 %10, 0, !insn.addr !13218
  %12 = zext i1 %11 to i64, !insn.addr !13219
  %13 = and i32 %10, -256
  %14 = zext i32 %13 to i64, !insn.addr !13219
  %15 = or i64 %14, %12, !insn.addr !13219
  ret i64 %15, !insn.addr !13220
}

define i64 @smi_enable_interrupt.235() local_unnamed_addr {
dec_label_pc_1ce48:
  %0 = call i64 @__decompiler_undefined_function_0()
  ret i64 %0, !insn.addr !13221
}

define i8 @smi_cancel_dma_A(i64 %pFdoData) local_unnamed_addr {
dec_label_pc_1ce4a:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = call i64 @mcount(), !insn.addr !13222
  %2 = add i64 %pFdoData, 22520, !insn.addr !13223
  %3 = inttoptr i64 %2 to i64*, !insn.addr !13223
  %4 = load i64, i64* %3, align 8, !insn.addr !13223
  %5 = add i64 %4, 2076, !insn.addr !13224
  %6 = trunc i64 %0 to i32, !insn.addr !13225
  %7 = inttoptr i64 %5 to i32*, !insn.addr !13225
  store i32 %6, i32* %7, align 4, !insn.addr !13225
  %8 = load i64, i64* %3, align 8, !insn.addr !13226
  %9 = add i64 %8, 2068, !insn.addr !13227
  %10 = inttoptr i64 %9 to i32*, !insn.addr !13228
  %11 = load i32, i32* %10, align 4, !insn.addr !13228
  %12 = zext i32 %11 to i64, !insn.addr !13229
  %13 = icmp eq i64 %0, %12, !insn.addr !13230
  %14 = zext i1 %13 to i8, !insn.addr !13231
  ret i8 %14, !insn.addr !13232
}

define i64 @smi_cancel_dma_A.218(i64 %arg1) local_unnamed_addr {
dec_label_pc_1ce7a:
  %0 = call i64 @mcount(), !insn.addr !13233
  %1 = add i64 %arg1, 22520, !insn.addr !13234
  %2 = inttoptr i64 %1 to i64*, !insn.addr !13234
  %3 = load i64, i64* %2, align 8, !insn.addr !13234
  %4 = add i64 %arg1, 25272, !insn.addr !13235
  %5 = inttoptr i64 %4 to i64*, !insn.addr !13235
  %6 = load i64, i64* %5, align 8, !insn.addr !13235
  %7 = add i64 %6, %3, !insn.addr !13235
  %8 = inttoptr i64 %7 to i32*, !insn.addr !13236
  %9 = load i32, i32* %8, align 4, !insn.addr !13236
  %10 = zext i32 %9 to i64, !insn.addr !13237
  ret i64 %10, !insn.addr !13238
}

define i8 @smi_cancel_dma_B(i64 %pFdoData) local_unnamed_addr {
dec_label_pc_1ce9a:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = call i64 @__decompiler_undefined_function_0()
  %2 = call i1 @__decompiler_undefined_function_2()
  %.v = select i1 %2, i64 %0, i64 %1
  %3 = trunc i64 %.v to i8, !insn.addr !13239
  ret i8 %3, !insn.addr !13239
}

define i64 @function_1ce9e(i64 %arg1) local_unnamed_addr {
dec_label_pc_1ce9e:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = trunc i64 %0 to i8, !insn.addr !13240
  %2 = add i64 %0, 326435322, !insn.addr !13240
  %3 = inttoptr i64 %2 to i8*, !insn.addr !13240
  %4 = load i8, i8* %3, align 1, !insn.addr !13240
  %5 = add i8 %4, %1, !insn.addr !13240
  %6 = zext i8 %5 to i64, !insn.addr !13240
  %7 = and i64 %0, 4294967040, !insn.addr !13240
  %8 = or i64 %7, %6, !insn.addr !13240
  %9 = trunc i64 %8 to i32, !insn.addr !13241
  %10 = and i32 %9, -3, !insn.addr !13241
  %11 = add i64 %arg1, 22520, !insn.addr !13242
  %12 = inttoptr i64 %11 to i64*, !insn.addr !13242
  %13 = load i64, i64* %12, align 8, !insn.addr !13242
  %14 = add i64 %arg1, 25272, !insn.addr !13243
  %15 = inttoptr i64 %14 to i64*, !insn.addr !13243
  %16 = load i64, i64* %15, align 8, !insn.addr !13243
  %17 = add i64 %16, %13, !insn.addr !13243
  %18 = inttoptr i64 %17 to i32*, !insn.addr !13244
  store i32 %10, i32* %18, align 4, !insn.addr !13244
  %19 = add i64 %arg1, 22764, !insn.addr !13245
  %20 = inttoptr i64 %19 to i8*, !insn.addr !13245
  %21 = load i8, i8* %20, align 1, !insn.addr !13245
  %22 = zext i8 %21 to i64, !insn.addr !13245
  %23 = call i64 @smi_disable_interrupt.505(i64 %arg1, i64 %22), !insn.addr !13246
  ret i64 ptrtoint (i32* @global_var_1 to i64), !insn.addr !13247
}

define i64 @smi_cancel_dma_B.394(i64 %arg1) local_unnamed_addr {
dec_label_pc_1ceca:
  %0 = call i64 @mcount(), !insn.addr !13248
  %1 = add i64 %arg1, 22520, !insn.addr !13249
  %2 = inttoptr i64 %1 to i64*, !insn.addr !13249
  %3 = load i64, i64* %2, align 8, !insn.addr !13249
  %4 = add i64 %arg1, 25344, !insn.addr !13250
  %5 = inttoptr i64 %4 to i64*, !insn.addr !13250
  %6 = load i64, i64* %5, align 8, !insn.addr !13250
  %7 = add i64 %6, %3, !insn.addr !13250
  %8 = inttoptr i64 %7 to i32*, !insn.addr !13251
  %9 = load i32, i32* %8, align 4, !insn.addr !13251
  %10 = zext i32 %9 to i64, !insn.addr !13252
  ret i64 %10, !insn.addr !13253
}

define void @smi_portA_dpc(i8* %pDpc, i8* %deferredContext, i8* %systemArgument1, i8* %systemArgument2) local_unnamed_addr {
dec_label_pc_1cef0:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = call i64 @__decompiler_undefined_function_0()
  %2 = ptrtoint i8* %deferredContext to i64
  %3 = ptrtoint i8* %pDpc to i64
  %4 = add i64 %0, ptrtoint (i32** @global_var_13 to i64), !insn.addr !13254
  %5 = inttoptr i64 %4 to i32*, !insn.addr !13254
  %6 = load i32, i32* %5, align 4, !insn.addr !13254
  %7 = trunc i64 %2 to i32, !insn.addr !13254
  %8 = add i32 %6, %7, !insn.addr !13254
  store i32 %8, i32* %5, align 4, !insn.addr !13254
  %9 = trunc i64 %1 to i32, !insn.addr !13255
  %10 = and i32 %9, -3, !insn.addr !13255
  %11 = add i64 %3, 22520, !insn.addr !13256
  %12 = inttoptr i64 %11 to i64*, !insn.addr !13256
  %13 = load i64, i64* %12, align 8, !insn.addr !13256
  %14 = add i64 %3, 25344, !insn.addr !13257
  %15 = inttoptr i64 %14 to i64*, !insn.addr !13257
  %16 = load i64, i64* %15, align 8, !insn.addr !13257
  %17 = add i64 %16, %13, !insn.addr !13257
  %18 = inttoptr i64 %17 to i32*, !insn.addr !13258
  store i32 %10, i32* %18, align 4, !insn.addr !13258
  %19 = add i64 %3, 22765, !insn.addr !13259
  %20 = inttoptr i64 %19 to i8*, !insn.addr !13259
  %21 = load i8, i8* %20, align 1, !insn.addr !13259
  %22 = zext i8 %21 to i64, !insn.addr !13260
  %23 = mul i64 %22, 4, !insn.addr !13260
  %24 = call i64 @smi_disable_interrupt.505(i64 %3, i64 %23), !insn.addr !13261
  ret void, !insn.addr !13262
}

define i64 @smi_portA_dpc.290(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_1cf20:
  %0 = call i64 @mcount(), !insn.addr !13263
  %1 = add i64 %arg2, 22784, !insn.addr !13264
  %2 = inttoptr i64 %1 to i64*, !insn.addr !13264
  %3 = load i64, i64* %2, align 8, !insn.addr !13264
  %4 = urem i64 %3, 2
  %5 = icmp eq i64 %4, 0, !insn.addr !13265
  %6 = icmp eq i1 %5, false, !insn.addr !13266
  br i1 %6, label %dec_label_pc_1cf43, label %dec_label_pc_1cf3a, !insn.addr !13266

dec_label_pc_1cf3a:                               ; preds = %dec_label_pc_1cf20
  %7 = lshr i64 %3, ptrtoint (i32* @global_var_1 to i64), !insn.addr !13267
  %8 = trunc i64 %7 to i8
  %phitmp = and i8 %8, ptrtoint (i32* @global_var_1 to i8)
  %phitmp4 = icmp eq i8 %phitmp, ptrtoint (i32* @global_var_1 to i8)
  br i1 %phitmp4, label %dec_label_pc_1cfe7, label %dec_label_pc_1cf5c, !insn.addr !13268

dec_label_pc_1cf43:                               ; preds = %dec_label_pc_1cf20
  br i1 icmp eq (i8 ptrtoint (i32* @global_var_1 to i8), i8 0), label %dec_label_pc_1cfe7, label %dec_label_pc_1cf5c, !insn.addr !13268

dec_label_pc_1cf5c:                               ; preds = %dec_label_pc_1cf3a, %dec_label_pc_1cf43
  %9 = add i64 %arg2, 22520, !insn.addr !13269
  %10 = inttoptr i64 %9 to i64*, !insn.addr !13269
  %11 = load i64, i64* %10, align 8, !insn.addr !13269
  %12 = add i64 %arg2, 25272, !insn.addr !13270
  %13 = inttoptr i64 %12 to i64*, !insn.addr !13270
  %14 = load i64, i64* %13, align 8, !insn.addr !13270
  %15 = add i64 %14, %11, !insn.addr !13270
  %16 = inttoptr i64 %15 to i32*, !insn.addr !13271
  %17 = load i32, i32* %16, align 4, !insn.addr !13271
  %18 = and i32 %17, 48
  %19 = icmp eq i32 %18, 16, !insn.addr !13272
  %20 = icmp eq i1 %19, false, !insn.addr !13273
  br i1 %20, label %dec_label_pc_1cfe7, label %dec_label_pc_1cf6c, !insn.addr !13273

dec_label_pc_1cf6c:                               ; preds = %dec_label_pc_1cf5c
  %21 = add i64 %arg2, 22764, !insn.addr !13274
  %22 = inttoptr i64 %21 to i8*, !insn.addr !13274
  %23 = load i8, i8* %22, align 1, !insn.addr !13274
  %24 = urem i8 %23, 2, !insn.addr !13274
  %25 = icmp eq i8 %24, 0, !insn.addr !13274
  br i1 %25, label %dec_label_pc_1cfe7, label %dec_label_pc_1cf75, !insn.addr !13275

dec_label_pc_1cf75:                               ; preds = %dec_label_pc_1cf6c
  %26 = add i64 %arg2, 25224, !insn.addr !13276
  %27 = inttoptr i64 %26 to i64*, !insn.addr !13276
  %28 = load i64, i64* %27, align 8, !insn.addr !13276
  %29 = add i64 %28, %11, !insn.addr !13276
  %30 = inttoptr i64 %29 to i32*, !insn.addr !13277
  %31 = load i32, i32* %30, align 4, !insn.addr !13277
  %32 = urem i32 %31, 4194304, !insn.addr !13278
  %33 = icmp eq i32 %32, 58656, !insn.addr !13279
  br i1 %33, label %dec_label_pc_1cfe7, label %dec_label_pc_1cf96, !insn.addr !13280

dec_label_pc_1cf96:                               ; preds = %dec_label_pc_1cf75
  %34 = add i64 %arg2, 22873, !insn.addr !13281
  %35 = inttoptr i64 %34 to i8*, !insn.addr !13281
  store i8 ptrtoint (i32* @global_var_1 to i8), i8* %35, align 1, !insn.addr !13281
  br label %dec_label_pc_1cfe7, !insn.addr !13282

dec_label_pc_1cfe7:                               ; preds = %dec_label_pc_1cf3a, %dec_label_pc_1cf43, %dec_label_pc_1cf5c, %dec_label_pc_1cf6c, %dec_label_pc_1cf75, %dec_label_pc_1cf96
  %36 = add i64 %arg2, 22520, !insn.addr !13283
  %37 = inttoptr i64 %36 to i64*, !insn.addr !13283
  %38 = load i64, i64* %37, align 8, !insn.addr !13283
  ret i64 %38, !insn.addr !13283
}

define void @smi_portB_dpc(i8* %pDpc, i8* %deferredContext, i8* %systemArgument1, i8* %systemArgument2) local_unnamed_addr {
dec_label_pc_1d007:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = ptrtoint i8* %systemArgument1 to i64
  %2 = ptrtoint i8* %deferredContext to i64
  %3 = add i64 %2, 25272, !insn.addr !13284
  %4 = inttoptr i64 %3 to i64*, !insn.addr !13284
  %5 = load i64, i64* %4, align 8, !insn.addr !13284
  %6 = add i64 %5, %0, !insn.addr !13284
  %7 = trunc i64 %1 to i32, !insn.addr !13285
  %8 = inttoptr i64 %6 to i32*, !insn.addr !13285
  store i32 %7, i32* %8, align 4, !insn.addr !13285
  ret void, !insn.addr !13286
}

define i64 @smi_portB_dpc.613(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_1d037:
  %0 = call i64 @mcount(), !insn.addr !13287
  %1 = add i64 %arg2, 22784, !insn.addr !13288
  %2 = inttoptr i64 %1 to i64*, !insn.addr !13288
  %3 = load i64, i64* %2, align 8, !insn.addr !13288
  %4 = and i64 %3, 4
  %5 = icmp eq i64 %4, 0, !insn.addr !13289
  %6 = icmp eq i1 %5, false, !insn.addr !13290
  br i1 %6, label %dec_label_pc_1d05b, label %dec_label_pc_1d051, !insn.addr !13290

dec_label_pc_1d051:                               ; preds = %dec_label_pc_1d037
  %7 = lshr i64 %3, ptrtoint (i8** @global_var_3 to i64), !insn.addr !13291
  %8 = trunc i64 %7 to i8
  %phitmp = and i8 %8, ptrtoint (i32* @global_var_1 to i8)
  %phitmp4 = icmp eq i8 %phitmp, ptrtoint (i32* @global_var_1 to i8)
  br i1 %phitmp4, label %dec_label_pc_1d0ff, label %dec_label_pc_1d074, !insn.addr !13292

dec_label_pc_1d05b:                               ; preds = %dec_label_pc_1d037
  br i1 icmp eq (i8 ptrtoint (i32* @global_var_1 to i8), i8 0), label %dec_label_pc_1d0ff, label %dec_label_pc_1d074, !insn.addr !13292

dec_label_pc_1d074:                               ; preds = %dec_label_pc_1d051, %dec_label_pc_1d05b
  %9 = add i64 %arg2, 22520, !insn.addr !13293
  %10 = inttoptr i64 %9 to i64*, !insn.addr !13293
  %11 = load i64, i64* %10, align 8, !insn.addr !13293
  %12 = add i64 %arg2, 25344, !insn.addr !13294
  %13 = inttoptr i64 %12 to i64*, !insn.addr !13294
  %14 = load i64, i64* %13, align 8, !insn.addr !13294
  %15 = add i64 %14, %11, !insn.addr !13294
  %16 = inttoptr i64 %15 to i32*, !insn.addr !13295
  %17 = load i32, i32* %16, align 4, !insn.addr !13295
  %18 = and i32 %17, 48
  %19 = icmp eq i32 %18, 16, !insn.addr !13296
  %20 = icmp eq i1 %19, false, !insn.addr !13297
  br i1 %20, label %dec_label_pc_1d0ff, label %dec_label_pc_1d084, !insn.addr !13297

dec_label_pc_1d084:                               ; preds = %dec_label_pc_1d074
  %21 = add i64 %arg2, 22765, !insn.addr !13298
  %22 = inttoptr i64 %21 to i8*, !insn.addr !13298
  %23 = load i8, i8* %22, align 1, !insn.addr !13298
  %24 = urem i8 %23, 2, !insn.addr !13298
  %25 = icmp eq i8 %24, 0, !insn.addr !13298
  br i1 %25, label %dec_label_pc_1d0ff, label %dec_label_pc_1d08d, !insn.addr !13299

dec_label_pc_1d08d:                               ; preds = %dec_label_pc_1d084
  %26 = add i64 %arg2, 25296, !insn.addr !13300
  %27 = inttoptr i64 %26 to i64*, !insn.addr !13300
  %28 = load i64, i64* %27, align 8, !insn.addr !13300
  %29 = add i64 %28, %11, !insn.addr !13300
  %30 = inttoptr i64 %29 to i32*, !insn.addr !13301
  %31 = load i32, i32* %30, align 4, !insn.addr !13301
  %32 = urem i32 %31, 4194304, !insn.addr !13302
  %33 = icmp eq i32 %32, 58656, !insn.addr !13303
  br i1 %33, label %dec_label_pc_1d0ff, label %dec_label_pc_1d0ae, !insn.addr !13304

dec_label_pc_1d0ae:                               ; preds = %dec_label_pc_1d08d
  %34 = add i64 %arg2, 22872, !insn.addr !13305
  %35 = inttoptr i64 %34 to i8*, !insn.addr !13305
  store i8 ptrtoint (i32* @global_var_1 to i8), i8* %35, align 1, !insn.addr !13305
  br label %dec_label_pc_1d0ff, !insn.addr !13306

dec_label_pc_1d0ff:                               ; preds = %dec_label_pc_1d051, %dec_label_pc_1d05b, %dec_label_pc_1d074, %dec_label_pc_1d084, %dec_label_pc_1d08d, %dec_label_pc_1d0ae
  %36 = add i64 %arg2, 22520, !insn.addr !13307
  %37 = inttoptr i64 %36 to i64*, !insn.addr !13307
  %38 = load i64, i64* %37, align 8, !insn.addr !13307
  ret i64 %38, !insn.addr !13307
}

define i8 @smi_cfg_dma_B(i64 %pFdoData) local_unnamed_addr {
dec_label_pc_1d11f:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = call i64 @__decompiler_undefined_function_0()
  %2 = call i64 @__decompiler_undefined_function_0()
  %3 = add i64 %0, 25344, !insn.addr !13308
  %4 = inttoptr i64 %3 to i64*, !insn.addr !13308
  %5 = load i64, i64* %4, align 8, !insn.addr !13308
  %6 = add i64 %5, %2, !insn.addr !13308
  %7 = trunc i64 %1 to i32, !insn.addr !13309
  %8 = inttoptr i64 %6 to i32*, !insn.addr !13309
  store i32 %7, i32* %8, align 4, !insn.addr !13309
  %9 = trunc i64 %6 to i8, !insn.addr !13310
  ret i8 %9, !insn.addr !13310
}

define i64 @smi_cfg_dma_B.244(i64 %arg1) local_unnamed_addr {
dec_label_pc_1d14f:
  %.pre-phi2.reg2mem = alloca i64*, !insn.addr !13311
  %.pre-phi6.reg2mem = alloca i64*, !insn.addr !13311
  %0 = call i64 @mcount(), !insn.addr !13312
  %1 = call i64 @smi_enable_interrupt.235(), !insn.addr !13313
  %2 = call i64 @SmiCalculateMemAddr.276(i64 %arg1), !insn.addr !13314
  %3 = add i64 %arg1, 22765, !insn.addr !13315
  %4 = inttoptr i64 %3 to i8*, !insn.addr !13315
  %5 = load i8, i8* %4, align 1, !insn.addr !13315
  %6 = urem i8 %5, 2, !insn.addr !13315
  %7 = icmp eq i8 %6, 0, !insn.addr !13315
  br i1 %7, label %dec_label_pc_1d14f.dec_label_pc_1d1f3_crit_edge, label %dec_label_pc_1d188, !insn.addr !13316

dec_label_pc_1d14f.dec_label_pc_1d1f3_crit_edge:  ; preds = %dec_label_pc_1d14f
  %.pre = add i64 %arg1, 22520, !insn.addr !13317
  %.pre1 = inttoptr i64 %.pre to i64*, !insn.addr !13317
  %.pre3 = add i64 %arg1, 25344, !insn.addr !13318
  %.pre5 = inttoptr i64 %.pre3 to i64*, !insn.addr !13318
  store i64* %.pre5, i64** %.pre-phi6.reg2mem
  store i64* %.pre1, i64** %.pre-phi2.reg2mem
  br label %dec_label_pc_1d1f3

dec_label_pc_1d188:                               ; preds = %dec_label_pc_1d14f
  %8 = add i64 %arg1, 22736, !insn.addr !13319
  %9 = inttoptr i64 %8 to i64*, !insn.addr !13319
  %10 = load i64, i64* %9, align 8, !insn.addr !13319
  %11 = add i64 %arg1, 22520
  %12 = inttoptr i64 %11 to i64*
  %13 = load i64, i64* %12, align 8, !insn.addr !13320
  %14 = add i64 %arg1, 25344
  %15 = inttoptr i64 %14 to i64*
  %16 = load i64, i64* %15, align 8, !insn.addr !13321
  %17 = add i64 %16, %13, !insn.addr !13321
  %18 = inttoptr i64 %17 to i32*, !insn.addr !13322
  %19 = load i32, i32* %18, align 4, !insn.addr !13322
  %20 = add i64 %arg1, 25280, !insn.addr !13323
  %21 = inttoptr i64 %20 to i64*, !insn.addr !13323
  %22 = load i64, i64* %21, align 8, !insn.addr !13323
  %23 = add i64 %22, %13, !insn.addr !13323
  %24 = trunc i64 %10 to i32, !insn.addr !13324
  %25 = inttoptr i64 %23 to i32*, !insn.addr !13324
  store i32 %24, i32* %25, align 4, !insn.addr !13324
  %26 = load i64, i64* %12, align 8, !insn.addr !13325
  %27 = add i64 %arg1, 25288, !insn.addr !13326
  %28 = inttoptr i64 %27 to i64*, !insn.addr !13326
  %29 = load i64, i64* %28, align 8, !insn.addr !13326
  %30 = add i64 %29, %26, !insn.addr !13326
  %31 = inttoptr i64 %30 to i32*, !insn.addr !13327
  store i32 0, i32* %31, align 4, !insn.addr !13327
  %32 = load i64, i64* %12, align 8, !insn.addr !13328
  %33 = add i64 %arg1, 25304, !insn.addr !13329
  %34 = inttoptr i64 %33 to i64*, !insn.addr !13329
  %35 = load i64, i64* %34, align 8, !insn.addr !13329
  %36 = add i64 %35, %32, !insn.addr !13329
  %37 = inttoptr i64 %36 to i32*, !insn.addr !13330
  store i32 297854240, i32* %37, align 4, !insn.addr !13330
  %38 = or i32 %19, 3, !insn.addr !13331
  %39 = load i64, i64* %12, align 8, !insn.addr !13332
  %40 = load i64, i64* %15, align 8, !insn.addr !13333
  %41 = add i64 %40, %39, !insn.addr !13333
  %42 = inttoptr i64 %41 to i32*, !insn.addr !13334
  store i32 %38, i32* %42, align 4, !insn.addr !13334
  store i64* %15, i64** %.pre-phi6.reg2mem, !insn.addr !13335
  store i64* %12, i64** %.pre-phi2.reg2mem, !insn.addr !13335
  br label %dec_label_pc_1d1f3, !insn.addr !13335

dec_label_pc_1d1f3:                               ; preds = %dec_label_pc_1d14f.dec_label_pc_1d1f3_crit_edge, %dec_label_pc_1d188
  %.pre-phi2.reload = load i64*, i64** %.pre-phi2.reg2mem
  %.pre-phi6.reload = load i64*, i64** %.pre-phi6.reg2mem
  %43 = add i64 %arg1, 22744, !insn.addr !13336
  %44 = inttoptr i64 %43 to i64*, !insn.addr !13336
  %45 = load i64, i64* %44, align 8, !insn.addr !13336
  %46 = load i64, i64* %.pre-phi2.reload, align 8, !insn.addr !13317
  %47 = load i64, i64* %.pre-phi6.reload, align 8, !insn.addr !13318
  %48 = add i64 %47, %46, !insn.addr !13318
  %49 = inttoptr i64 %48 to i32*, !insn.addr !13337
  %50 = load i32, i32* %49, align 4, !insn.addr !13337
  %51 = zext i32 %50 to i64, !insn.addr !13338
  %52 = add i64 %arg1, 25312, !insn.addr !13339
  %53 = inttoptr i64 %52 to i64*, !insn.addr !13339
  %54 = load i64, i64* %53, align 8, !insn.addr !13339
  %55 = add i64 %54, %46, !insn.addr !13339
  %56 = trunc i64 %45 to i32, !insn.addr !13340
  %57 = inttoptr i64 %55 to i32*, !insn.addr !13340
  store i32 %56, i32* %57, align 4, !insn.addr !13340
  %58 = load i64, i64* %.pre-phi2.reload, align 8, !insn.addr !13341
  %59 = add i64 %arg1, 25320, !insn.addr !13342
  %60 = inttoptr i64 %59 to i64*, !insn.addr !13342
  %61 = load i64, i64* %60, align 8, !insn.addr !13342
  %62 = add i64 %61, %58, !insn.addr !13342
  %63 = inttoptr i64 %62 to i32*, !insn.addr !13343
  store i32 0, i32* %63, align 4, !insn.addr !13343
  ret i64 %51, !insn.addr !13343
}

define i8 @smi_cfg_dma_A(i64 %pFdoData) local_unnamed_addr {
dec_label_pc_1d240:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = call i64 @__decompiler_undefined_function_0()
  %2 = add i64 %1, ptrtoint (i8** @global_var_3 to i64), !insn.addr !13344
  %3 = inttoptr i64 %2 to i8*, !insn.addr !13344
  %4 = load i8, i8* %3, align 1, !insn.addr !13344
  %5 = trunc i64 %0 to i8, !insn.addr !13344
  %6 = add i8 %4, %5, !insn.addr !13344
  store i8 %6, i8* %3, align 1, !insn.addr !13344
  %7 = trunc i64 %1 to i8, !insn.addr !13345
  ret i8 %7, !insn.addr !13345
}

define i64 @function_1d246(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4) local_unnamed_addr {
dec_label_pc_1d246:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = call i64 @__decompiler_undefined_function_0()
  %2 = trunc i64 %1 to i8
  %3 = mul i8 %2, 2, !insn.addr !13346
  %4 = inttoptr i64 %1 to i8*, !insn.addr !13346
  store i8 %3, i8* %4, align 1, !insn.addr !13346
  %5 = inttoptr i64 %arg4 to i32*, !insn.addr !13347
  store i32 297854240, i32* %5, align 4, !insn.addr !13347
  %6 = trunc i64 %1 to i32, !insn.addr !13348
  %7 = or i32 %6, ptrtoint (i32* @global_var_30000 to i32), !insn.addr !13348
  %8 = add i64 %0, 22520, !insn.addr !13349
  %9 = inttoptr i64 %8 to i64*, !insn.addr !13349
  %10 = load i64, i64* %9, align 8, !insn.addr !13349
  %11 = add i64 %0, 25344, !insn.addr !13350
  %12 = inttoptr i64 %11 to i64*, !insn.addr !13350
  %13 = load i64, i64* %12, align 8, !insn.addr !13350
  %14 = add i64 %13, %10, !insn.addr !13350
  %15 = inttoptr i64 %14 to i32*, !insn.addr !13351
  store i32 %7, i32* %15, align 4, !insn.addr !13351
  ret i64 ptrtoint (i32* @global_var_1 to i64), !insn.addr !13352
}

define i64 @smi_cfg_dma_A.319(i64 %arg1) local_unnamed_addr {
dec_label_pc_1d270:
  %.pre-phi2.reg2mem = alloca i64*, !insn.addr !13353
  %.pre-phi6.reg2mem = alloca i64*, !insn.addr !13353
  %0 = call i64 @mcount(), !insn.addr !13354
  %1 = call i64 @smi_enable_interrupt.235(), !insn.addr !13355
  %2 = call i64 @SmiCalculateMemAddr.276(i64 %arg1), !insn.addr !13356
  %3 = add i64 %arg1, 22764, !insn.addr !13357
  %4 = inttoptr i64 %3 to i8*, !insn.addr !13357
  %5 = load i8, i8* %4, align 1, !insn.addr !13357
  %6 = urem i8 %5, 2, !insn.addr !13357
  %7 = icmp eq i8 %6, 0, !insn.addr !13357
  br i1 %7, label %dec_label_pc_1d270.dec_label_pc_1d30e_crit_edge, label %dec_label_pc_1d2a3, !insn.addr !13358

dec_label_pc_1d270.dec_label_pc_1d30e_crit_edge:  ; preds = %dec_label_pc_1d270
  %.pre = add i64 %arg1, 22520, !insn.addr !13359
  %.pre1 = inttoptr i64 %.pre to i64*, !insn.addr !13359
  %.pre3 = add i64 %arg1, 25272, !insn.addr !13360
  %.pre5 = inttoptr i64 %.pre3 to i64*, !insn.addr !13360
  store i64* %.pre5, i64** %.pre-phi6.reg2mem
  store i64* %.pre1, i64** %.pre-phi2.reg2mem
  br label %dec_label_pc_1d30e

dec_label_pc_1d2a3:                               ; preds = %dec_label_pc_1d270
  %8 = add i64 %arg1, 22720, !insn.addr !13361
  %9 = inttoptr i64 %8 to i64*, !insn.addr !13361
  %10 = load i64, i64* %9, align 8, !insn.addr !13361
  %11 = add i64 %arg1, 22520
  %12 = inttoptr i64 %11 to i64*
  %13 = load i64, i64* %12, align 8, !insn.addr !13362
  %14 = add i64 %arg1, 25272
  %15 = inttoptr i64 %14 to i64*
  %16 = load i64, i64* %15, align 8, !insn.addr !13363
  %17 = add i64 %16, %13, !insn.addr !13363
  %18 = inttoptr i64 %17 to i32*, !insn.addr !13364
  %19 = load i32, i32* %18, align 4, !insn.addr !13364
  %20 = add i64 %arg1, 25208, !insn.addr !13365
  %21 = inttoptr i64 %20 to i64*, !insn.addr !13365
  %22 = load i64, i64* %21, align 8, !insn.addr !13365
  %23 = add i64 %22, %13, !insn.addr !13365
  %24 = trunc i64 %10 to i32, !insn.addr !13366
  %25 = inttoptr i64 %23 to i32*, !insn.addr !13366
  store i32 %24, i32* %25, align 4, !insn.addr !13366
  %26 = load i64, i64* %12, align 8, !insn.addr !13367
  %27 = add i64 %arg1, 25216, !insn.addr !13368
  %28 = inttoptr i64 %27 to i64*, !insn.addr !13368
  %29 = load i64, i64* %28, align 8, !insn.addr !13368
  %30 = add i64 %29, %26, !insn.addr !13368
  %31 = inttoptr i64 %30 to i32*, !insn.addr !13369
  store i32 0, i32* %31, align 4, !insn.addr !13369
  %32 = load i64, i64* %12, align 8, !insn.addr !13370
  %33 = add i64 %arg1, 25232, !insn.addr !13371
  %34 = inttoptr i64 %33 to i64*, !insn.addr !13371
  %35 = load i64, i64* %34, align 8, !insn.addr !13371
  %36 = add i64 %35, %32, !insn.addr !13371
  %37 = inttoptr i64 %36 to i32*, !insn.addr !13372
  store i32 297854240, i32* %37, align 4, !insn.addr !13372
  %38 = or i32 %19, 3, !insn.addr !13373
  %39 = load i64, i64* %12, align 8, !insn.addr !13374
  %40 = load i64, i64* %15, align 8, !insn.addr !13375
  %41 = add i64 %40, %39, !insn.addr !13375
  %42 = inttoptr i64 %41 to i32*, !insn.addr !13376
  store i32 %38, i32* %42, align 4, !insn.addr !13376
  store i64* %15, i64** %.pre-phi6.reg2mem, !insn.addr !13377
  store i64* %12, i64** %.pre-phi2.reg2mem, !insn.addr !13377
  br label %dec_label_pc_1d30e, !insn.addr !13377

dec_label_pc_1d30e:                               ; preds = %dec_label_pc_1d270.dec_label_pc_1d30e_crit_edge, %dec_label_pc_1d2a3
  %.pre-phi2.reload = load i64*, i64** %.pre-phi2.reg2mem
  %.pre-phi6.reload = load i64*, i64** %.pre-phi6.reg2mem
  %43 = add i64 %arg1, 22728, !insn.addr !13378
  %44 = inttoptr i64 %43 to i64*, !insn.addr !13378
  %45 = load i64, i64* %44, align 8, !insn.addr !13378
  %46 = load i64, i64* %.pre-phi2.reload, align 8, !insn.addr !13359
  %47 = load i64, i64* %.pre-phi6.reload, align 8, !insn.addr !13360
  %48 = add i64 %47, %46, !insn.addr !13360
  %49 = inttoptr i64 %48 to i32*, !insn.addr !13379
  %50 = load i32, i32* %49, align 4, !insn.addr !13379
  %51 = zext i32 %50 to i64, !insn.addr !13380
  %52 = add i64 %arg1, 25240, !insn.addr !13381
  %53 = inttoptr i64 %52 to i64*, !insn.addr !13381
  %54 = load i64, i64* %53, align 8, !insn.addr !13381
  %55 = add i64 %54, %46, !insn.addr !13381
  %56 = trunc i64 %45 to i32, !insn.addr !13382
  %57 = inttoptr i64 %55 to i32*, !insn.addr !13382
  store i32 %56, i32* %57, align 4, !insn.addr !13382
  %58 = load i64, i64* %.pre-phi2.reload, align 8, !insn.addr !13383
  %59 = add i64 %arg1, 25248, !insn.addr !13384
  %60 = inttoptr i64 %59 to i64*, !insn.addr !13384
  %61 = load i64, i64* %60, align 8, !insn.addr !13384
  %62 = add i64 %61, %58, !insn.addr !13384
  %63 = inttoptr i64 %62 to i32*, !insn.addr !13385
  store i32 0, i32* %63, align 4, !insn.addr !13385
  ret i64 %51, !insn.addr !13385
}

define i32 @smi_interrupt_handler(i32 %irq, i8* %dev_instance) local_unnamed_addr {
dec_label_pc_1d35b:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = call i64 @__decompiler_undefined_function_0()
  %2 = call i64 @__decompiler_undefined_function_0()
  %3 = add i64 %2, ptrtoint (i8** @global_var_3 to i64), !insn.addr !13386
  %4 = inttoptr i64 %3 to i8*, !insn.addr !13386
  %5 = load i8, i8* %4, align 1, !insn.addr !13386
  %6 = trunc i64 %1 to i8, !insn.addr !13386
  %7 = add i8 %5, %6, !insn.addr !13386
  store i8 %7, i8* %4, align 1, !insn.addr !13386
  %8 = and i64 %2, %1
  %9 = lshr i64 %8, ptrtoint (i8* @global_var_8 to i64)
  %10 = urem i64 %9, 256, !insn.addr !13387
  %11 = shl i64 %10, ptrtoint (i8* @global_var_8 to i64), !insn.addr !13387
  %12 = and i64 %1, -65281, !insn.addr !13387
  %13 = or i64 %11, %12, !insn.addr !13387
  %14 = inttoptr i64 %13 to i8*, !insn.addr !13388
  %15 = load i8, i8* %14, align 1, !insn.addr !13388
  %16 = and i8 %15, lshr (i8 -128, i8 ptrtoint (i8* @global_var_8 to i8))
  %17 = icmp ne i8 %16, 0, !insn.addr !13388
  %18 = load i32, i32* inttoptr (i64 316271 to i32*), align 4, !insn.addr !13389
  %19 = trunc i64 %13 to i32, !insn.addr !13389
  %20 = zext i1 %17 to i32, !insn.addr !13389
  %21 = add i32 %18, %19, !insn.addr !13389
  %22 = add i32 %21, %20, !insn.addr !13389
  store i32 %22, i32* inttoptr (i64 316271 to i32*), align 4, !insn.addr !13389
  %23 = add i64 %0, 22520, !insn.addr !13390
  %24 = inttoptr i64 %23 to i64*, !insn.addr !13390
  %25 = load i64, i64* %24, align 8, !insn.addr !13390
  %26 = add i64 %0, 25272, !insn.addr !13391
  %27 = inttoptr i64 %26 to i64*, !insn.addr !13391
  %28 = load i64, i64* %27, align 8, !insn.addr !13391
  %29 = add i64 %28, %25, !insn.addr !13391
  %30 = trunc i64 %2 to i32, !insn.addr !13392
  %31 = inttoptr i64 %29 to i32*, !insn.addr !13392
  store i32 %30, i32* %31, align 4, !insn.addr !13392
  ret i32 ptrtoint (i32* @global_var_1 to i32), !insn.addr !13393
}

define i64 @smi_interrupt_handler.225(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_1d38b:
  %rax.19.reg2mem = alloca i64, !insn.addr !13394
  %rax.18.reg2mem = alloca i64, !insn.addr !13394
  %.pre-phi11.reg2mem = alloca i8*, !insn.addr !13394
  %rax.1.reg2mem = alloca i64, !insn.addr !13394
  %rax.0.reg2mem = alloca i64, !insn.addr !13394
  %storemerge.reg2mem = alloca i8, !insn.addr !13394
  %r12.1.reg2mem = alloca i64, !insn.addr !13394
  %0 = call i64 @mcount(), !insn.addr !13395
  %1 = inttoptr i64 %arg2 to i8*, !insn.addr !13396
  store i8 ptrtoint (i32* @global_var_1 to i8), i8* %1, align 1, !insn.addr !13396
  %2 = add i64 %arg2, 22520, !insn.addr !13397
  %3 = inttoptr i64 %2 to i64*, !insn.addr !13397
  %4 = load i64, i64* %3, align 8, !insn.addr !13397
  %5 = add i64 %4, 2056, !insn.addr !13398
  %6 = inttoptr i64 %5 to i32*, !insn.addr !13399
  %7 = load i32, i32* %6, align 4, !insn.addr !13399
  %8 = zext i32 %7 to i64, !insn.addr !13400
  %9 = add i64 %arg2, 22784, !insn.addr !13401
  %10 = inttoptr i64 %9 to i64*, !insn.addr !13401
  store i64 %8, i64* %10, align 8, !insn.addr !13401
  %11 = urem i32 %7, 4
  %12 = icmp eq i32 %11, 0, !insn.addr !13402
  store i64 0, i64* %r12.1.reg2mem, !insn.addr !13403
  br i1 %12, label %dec_label_pc_1d523, label %dec_label_pc_1d3dc, !insn.addr !13403

dec_label_pc_1d3dc:                               ; preds = %dec_label_pc_1d38b
  %13 = call i64 @smi_clear_interrupt.364(i64 %arg2), !insn.addr !13404
  %14 = load i64, i64* %10, align 8, !insn.addr !13405
  %15 = urem i64 %14, 2
  %16 = icmp eq i64 %15, 0, !insn.addr !13406
  %17 = icmp eq i1 %16, false, !insn.addr !13407
  %18 = lshr i64 %14, ptrtoint (i32* @global_var_1 to i64)
  %19 = and i64 %18, zext (i32 ptrtoint (i32* @global_var_1 to i32) to i64)
  %r12.0 = select i1 %17, i64 0, i64 %19
  %20 = load i64, i64* %3, align 8, !insn.addr !13408
  %21 = add i64 %arg2, 25272, !insn.addr !13409
  %22 = inttoptr i64 %21 to i64*, !insn.addr !13409
  %23 = load i64, i64* %22, align 8, !insn.addr !13409
  %24 = add i64 %23, %20, !insn.addr !13409
  %25 = inttoptr i64 %24 to i32*, !insn.addr !13410
  %26 = load i32, i32* %25, align 4, !insn.addr !13410
  %27 = trunc i64 %r12.0 to i8, !insn.addr !13411
  %28 = icmp eq i8 %27, 0, !insn.addr !13411
  %29 = icmp eq i1 %28, false, !insn.addr !13412
  br i1 %29, label %dec_label_pc_1d4ce, label %dec_label_pc_1d416, !insn.addr !13412

dec_label_pc_1d416:                               ; preds = %dec_label_pc_1d3dc
  %30 = and i32 %26, 48
  %31 = icmp eq i32 %30, 16, !insn.addr !13413
  %32 = icmp eq i1 %31, false, !insn.addr !13414
  br i1 %32, label %dec_label_pc_1d4ce, label %dec_label_pc_1d424, !insn.addr !13414

dec_label_pc_1d424:                               ; preds = %dec_label_pc_1d416
  %33 = add i64 %arg2, 22764, !insn.addr !13415
  %34 = inttoptr i64 %33 to i8*, !insn.addr !13415
  %35 = load i8, i8* %34, align 1, !insn.addr !13415
  %36 = urem i8 %35, 2, !insn.addr !13415
  %37 = icmp eq i8 %36, 0, !insn.addr !13415
  br i1 %37, label %dec_label_pc_1d4ce, label %dec_label_pc_1d42d, !insn.addr !13416

dec_label_pc_1d42d:                               ; preds = %dec_label_pc_1d424
  %38 = add i64 %arg2, 25224, !insn.addr !13417
  %39 = inttoptr i64 %38 to i64*, !insn.addr !13417
  %40 = load i64, i64* %39, align 8, !insn.addr !13417
  %41 = add i64 %40, %20, !insn.addr !13417
  %42 = inttoptr i64 %41 to i32*, !insn.addr !13418
  %43 = load i32, i32* %42, align 4, !insn.addr !13418
  %44 = urem i32 %43, 4194304, !insn.addr !13419
  %45 = icmp eq i32 %44, 58656, !insn.addr !13420
  br i1 %45, label %dec_label_pc_1d455, label %dec_label_pc_1d44c, !insn.addr !13421

dec_label_pc_1d44c:                               ; preds = %dec_label_pc_1d42d
  %46 = add i64 %arg2, 22873, !insn.addr !13422
  %47 = inttoptr i64 %46 to i8*, !insn.addr !13422
  store i8 ptrtoint (i32* @global_var_1 to i8), i8* %47, align 1, !insn.addr !13422
  br label %dec_label_pc_1d4ce, !insn.addr !13423

dec_label_pc_1d455:                               ; preds = %dec_label_pc_1d42d
  %48 = add i64 %arg2, 1224, !insn.addr !13424
  %49 = inttoptr i64 %48 to i64*, !insn.addr !13424
  %50 = load i64, i64* %49, align 8, !insn.addr !13424
  %51 = add i64 %arg2, 22688, !insn.addr !13425
  %52 = inttoptr i64 %51 to i64*, !insn.addr !13425
  %53 = load i64, i64* %52, align 8, !insn.addr !13425
  %54 = call i64 @writeStorageBuff.351(i64 %53, i64 %50, i64 58656), !insn.addr !13426
  br label %dec_label_pc_1d4ce, !insn.addr !13427

dec_label_pc_1d4ce:                               ; preds = %dec_label_pc_1d3dc, %dec_label_pc_1d416, %dec_label_pc_1d424, %dec_label_pc_1d455, %dec_label_pc_1d44c
  %55 = add i64 %arg2, 22777, !insn.addr !13428
  %56 = inttoptr i64 %55 to i8*, !insn.addr !13428
  %57 = load i8, i8* %56, align 1, !insn.addr !13428
  %58 = or i8 %57, %27
  %59 = icmp eq i8 %58, 0
  store i64 %r12.0, i64* %r12.1.reg2mem, !insn.addr !13429
  br i1 %59, label %dec_label_pc_1d4dc, label %dec_label_pc_1d523, !insn.addr !13429

dec_label_pc_1d4dc:                               ; preds = %dec_label_pc_1d4ce
  %60 = add i64 %arg2, 22764, !insn.addr !13430
  %61 = inttoptr i64 %60 to i8*, !insn.addr !13430
  %62 = load i8, i8* %61, align 1, !insn.addr !13430
  %63 = urem i8 %62, 2, !insn.addr !13430
  %64 = icmp eq i8 %63, 0, !insn.addr !13430
  store i64 %r12.0, i64* %r12.1.reg2mem, !insn.addr !13431
  br i1 %64, label %dec_label_pc_1d523, label %dec_label_pc_1d4e5, !insn.addr !13431

dec_label_pc_1d4e5:                               ; preds = %dec_label_pc_1d4dc
  %65 = or i32 %26, 2, !insn.addr !13432
  %66 = load i64, i64* %3, align 8, !insn.addr !13433
  %67 = load i64, i64* %22, align 8, !insn.addr !13434
  %68 = add i64 %67, %66, !insn.addr !13434
  %69 = inttoptr i64 %68 to i32*, !insn.addr !13435
  store i32 %65, i32* %69, align 4, !insn.addr !13435
  store i64 %r12.0, i64* %r12.1.reg2mem, !insn.addr !13436
  br label %dec_label_pc_1d523, !insn.addr !13436

dec_label_pc_1d523:                               ; preds = %dec_label_pc_1d4ce, %dec_label_pc_1d4dc, %dec_label_pc_1d4e5, %dec_label_pc_1d38b
  %70 = call i64 @smi_clear_interrupt.364(i64 %arg2), !insn.addr !13437
  %71 = load i64, i64* %10, align 8, !insn.addr !13438
  %72 = and i64 %71, 4
  %73 = icmp eq i64 %72, 0, !insn.addr !13439
  store i8 0, i8* %storemerge.reg2mem, !insn.addr !13440
  br i1 %73, label %dec_label_pc_1d548, label %dec_label_pc_1d553, !insn.addr !13440

dec_label_pc_1d548:                               ; preds = %dec_label_pc_1d523
  %r12.1.reload = load i64, i64* %r12.1.reg2mem
  %74 = and i64 %71, 8
  %75 = icmp eq i64 %74, 0, !insn.addr !13441
  %76 = icmp eq i1 %75, false, !insn.addr !13442
  %77 = trunc i64 %r12.1.reload to i8
  %phitmp = select i1 %76, i8 ptrtoint (i32* @global_var_1 to i8), i8 %77, !insn.addr !13442
  store i8 %phitmp, i8* %storemerge.reg2mem, !insn.addr !13442
  br label %dec_label_pc_1d553, !insn.addr !13442

dec_label_pc_1d553:                               ; preds = %dec_label_pc_1d523, %dec_label_pc_1d548
  %storemerge.reload = load i8, i8* %storemerge.reg2mem
  %78 = load i64, i64* %3, align 8, !insn.addr !13443
  %79 = add i64 %arg2, 25344, !insn.addr !13444
  %80 = inttoptr i64 %79 to i64*, !insn.addr !13444
  %81 = load i64, i64* %80, align 8, !insn.addr !13444
  %82 = add i64 %81, %78, !insn.addr !13444
  %83 = inttoptr i64 %82 to i32*, !insn.addr !13445
  %84 = load i32, i32* %83, align 4, !insn.addr !13445
  %85 = zext i32 %84 to i64, !insn.addr !13446
  %86 = icmp eq i8 %storemerge.reload, 0, !insn.addr !13447
  %87 = icmp eq i1 %86, false, !insn.addr !13448
  store i64 %82, i64* %rax.0.reg2mem, !insn.addr !13448
  br i1 %87, label %dec_label_pc_1d5c9, label %dec_label_pc_1d570, !insn.addr !13448

dec_label_pc_1d570:                               ; preds = %dec_label_pc_1d553
  %88 = udiv i64 %85, 16, !insn.addr !13449
  %89 = urem i64 %88, 4, !insn.addr !13450
  %90 = icmp eq i64 %89, 1, !insn.addr !13451
  %91 = icmp eq i1 %90, false, !insn.addr !13452
  store i64 %89, i64* %rax.0.reg2mem, !insn.addr !13452
  br i1 %91, label %dec_label_pc_1d5c9, label %dec_label_pc_1d57e, !insn.addr !13452

dec_label_pc_1d57e:                               ; preds = %dec_label_pc_1d570
  %92 = add i64 %arg2, 22765
  %93 = inttoptr i64 %92 to i8*
  %94 = load i8, i8* %93, align 1, !insn.addr !13453
  %95 = urem i8 %94, 2, !insn.addr !13453
  %96 = icmp eq i8 %95, 0, !insn.addr !13453
  store i64 %89, i64* %rax.0.reg2mem, !insn.addr !13454
  br i1 %96, label %dec_label_pc_1d5c9, label %dec_label_pc_1d587, !insn.addr !13454

dec_label_pc_1d587:                               ; preds = %dec_label_pc_1d57e
  %97 = add i64 %arg2, 25296, !insn.addr !13455
  %98 = inttoptr i64 %97 to i64*, !insn.addr !13455
  %99 = load i64, i64* %98, align 8, !insn.addr !13455
  %100 = add i64 %99, %78, !insn.addr !13455
  %101 = inttoptr i64 %100 to i32*, !insn.addr !13456
  %102 = load i32, i32* %101, align 4, !insn.addr !13456
  %103 = urem i32 %102, 4194304, !insn.addr !13457
  %104 = icmp eq i32 %103, 58656, !insn.addr !13458
  br i1 %104, label %dec_label_pc_1d5af, label %dec_label_pc_1d5a6, !insn.addr !13459

dec_label_pc_1d5a6:                               ; preds = %dec_label_pc_1d587
  %105 = zext i32 %103 to i64, !insn.addr !13457
  %106 = add i64 %arg2, 22872, !insn.addr !13460
  %107 = inttoptr i64 %106 to i8*, !insn.addr !13460
  store i8 ptrtoint (i32* @global_var_1 to i8), i8* %107, align 1, !insn.addr !13460
  store i8* %93, i8** %.pre-phi11.reg2mem, !insn.addr !13461
  store i64 %105, i64* %rax.18.reg2mem, !insn.addr !13461
  br label %dec_label_pc_1d636, !insn.addr !13461

dec_label_pc_1d5af:                               ; preds = %dec_label_pc_1d587
  %108 = add i64 %arg2, 1232, !insn.addr !13462
  %109 = inttoptr i64 %108 to i64*, !insn.addr !13462
  %110 = load i64, i64* %109, align 8, !insn.addr !13462
  %111 = add i64 %arg2, 22704, !insn.addr !13463
  %112 = inttoptr i64 %111 to i64*, !insn.addr !13463
  %113 = load i64, i64* %112, align 8, !insn.addr !13463
  %114 = call i64 @writeStorageBuff.351(i64 %113, i64 %110, i64 58656), !insn.addr !13464
  store i8* %93, i8** %.pre-phi11.reg2mem, !insn.addr !13465
  store i64 %114, i64* %rax.18.reg2mem, !insn.addr !13465
  br label %dec_label_pc_1d636, !insn.addr !13465

dec_label_pc_1d5c9:                               ; preds = %dec_label_pc_1d57e, %dec_label_pc_1d570, %dec_label_pc_1d553
  %rax.0.reload = load i64, i64* %rax.0.reg2mem
  %115 = icmp eq i8 %storemerge.reload, ptrtoint (i32* @global_var_1 to i8), !insn.addr !13466
  %116 = icmp eq i1 %115, false, !insn.addr !13467
  store i64 %rax.0.reload, i64* %rax.1.reg2mem, !insn.addr !13467
  br i1 %116, label %dec_label_pc_1d628, label %dec_label_pc_1d5cf, !insn.addr !13467

dec_label_pc_1d5cf:                               ; preds = %dec_label_pc_1d5c9
  %117 = udiv i64 %85, 1048576, !insn.addr !13468
  %118 = urem i64 %117, 4, !insn.addr !13469
  %119 = icmp eq i64 %118, 1, !insn.addr !13470
  %120 = icmp eq i1 %119, false, !insn.addr !13471
  store i64 %118, i64* %rax.1.reg2mem, !insn.addr !13471
  br i1 %120, label %dec_label_pc_1d628, label %dec_label_pc_1d5df, !insn.addr !13471

dec_label_pc_1d5df:                               ; preds = %dec_label_pc_1d5cf
  %121 = add i64 %arg2, 22765, !insn.addr !13472
  %122 = inttoptr i64 %121 to i8*, !insn.addr !13472
  %123 = load i8, i8* %122, align 1, !insn.addr !13472
  %124 = and i8 %123, 2, !insn.addr !13472
  %125 = icmp eq i8 %124, 0, !insn.addr !13472
  store i64 %118, i64* %rax.1.reg2mem, !insn.addr !13473
  br i1 %125, label %dec_label_pc_1d628, label %dec_label_pc_1d5e8, !insn.addr !13473

dec_label_pc_1d5e8:                               ; preds = %dec_label_pc_1d5df
  %126 = add i64 %arg2, 25328, !insn.addr !13474
  %127 = inttoptr i64 %126 to i64*, !insn.addr !13474
  %128 = load i64, i64* %127, align 8, !insn.addr !13474
  %129 = add i64 %128, %78, !insn.addr !13474
  %130 = inttoptr i64 %129 to i32*, !insn.addr !13475
  %131 = load i32, i32* %130, align 4, !insn.addr !13475
  %132 = urem i32 %131, 4194304, !insn.addr !13476
  %133 = icmp eq i32 %132, 58656, !insn.addr !13477
  br i1 %133, label %dec_label_pc_1d610, label %dec_label_pc_1d607, !insn.addr !13478

dec_label_pc_1d607:                               ; preds = %dec_label_pc_1d5e8
  %134 = zext i32 %132 to i64, !insn.addr !13476
  %135 = add i64 %arg2, 22872, !insn.addr !13479
  %136 = inttoptr i64 %135 to i8*, !insn.addr !13479
  store i8 ptrtoint (i32* @global_var_1 to i8), i8* %136, align 1, !insn.addr !13479
  store i64 %134, i64* %rax.1.reg2mem, !insn.addr !13480
  br label %dec_label_pc_1d628, !insn.addr !13480

dec_label_pc_1d610:                               ; preds = %dec_label_pc_1d5e8
  %137 = add i64 %arg2, 1232, !insn.addr !13481
  %138 = inttoptr i64 %137 to i64*, !insn.addr !13481
  %139 = load i64, i64* %138, align 8, !insn.addr !13481
  %140 = add i64 %arg2, 22712, !insn.addr !13482
  %141 = inttoptr i64 %140 to i64*, !insn.addr !13482
  %142 = load i64, i64* %141, align 8, !insn.addr !13482
  %143 = call i64 @writeStorageBuff.351(i64 %142, i64 %139, i64 58656), !insn.addr !13483
  store i64 %143, i64* %rax.1.reg2mem, !insn.addr !13483
  br label %dec_label_pc_1d628, !insn.addr !13483

dec_label_pc_1d628:                               ; preds = %dec_label_pc_1d610, %dec_label_pc_1d607, %dec_label_pc_1d5df, %dec_label_pc_1d5cf, %dec_label_pc_1d5c9
  %rax.1.reload = load i64, i64* %rax.1.reg2mem
  store i64 %rax.1.reload, i64* %rax.19.reg2mem, !insn.addr !13484
  br i1 %87, label %dec_label_pc_1d656, label %dec_label_pc_1d628.dec_label_pc_1d636_crit_edge, !insn.addr !13484

dec_label_pc_1d628.dec_label_pc_1d636_crit_edge:  ; preds = %dec_label_pc_1d628
  %.pre = add i64 %arg2, 22765, !insn.addr !13485
  %.pre10 = inttoptr i64 %.pre to i8*, !insn.addr !13485
  store i8* %.pre10, i8** %.pre-phi11.reg2mem
  store i64 %rax.1.reload, i64* %rax.18.reg2mem
  br label %dec_label_pc_1d636

dec_label_pc_1d636:                               ; preds = %dec_label_pc_1d628.dec_label_pc_1d636_crit_edge, %dec_label_pc_1d5a6, %dec_label_pc_1d5af
  %rax.18.reload = load i64, i64* %rax.18.reg2mem
  %.pre-phi11.reload = load i8*, i8** %.pre-phi11.reg2mem
  %144 = load i8, i8* %.pre-phi11.reload, align 1, !insn.addr !13485
  %145 = urem i8 %144, 2, !insn.addr !13485
  %146 = icmp eq i8 %145, 0, !insn.addr !13485
  store i64 %rax.18.reload, i64* %rax.19.reg2mem, !insn.addr !13486
  br i1 %146, label %dec_label_pc_1d656, label %dec_label_pc_1d63f, !insn.addr !13486

dec_label_pc_1d63f:                               ; preds = %dec_label_pc_1d636
  %147 = or i32 %84, 2, !insn.addr !13487
  %148 = load i64, i64* %3, align 8, !insn.addr !13488
  %149 = load i64, i64* %80, align 8, !insn.addr !13489
  %150 = add i64 %149, %148, !insn.addr !13489
  %151 = inttoptr i64 %150 to i32*, !insn.addr !13490
  store i32 %147, i32* %151, align 4, !insn.addr !13490
  ret i64 %150, !insn.addr !13491

dec_label_pc_1d656:                               ; preds = %dec_label_pc_1d636, %dec_label_pc_1d628
  %rax.19.reload = load i64, i64* %rax.19.reg2mem
  ret i64 %rax.19.reload, !insn.addr !13492
}

define i64 @private_data.2(i8* %bcas) local_unnamed_addr {
dec_label_pc_1d670:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = call i64 @__decompiler_undefined_function_0()
  %2 = call i64 @__decompiler_undefined_function_0()
  %3 = trunc i64 %2 to i8
  %4 = mul i8 %3, 2, !insn.addr !13493
  %5 = inttoptr i64 %2 to i8*, !insn.addr !13493
  store i8 %4, i8* %5, align 1, !insn.addr !13493
  %6 = add i64 %1, 25344, !insn.addr !13494
  %7 = inttoptr i64 %6 to i64*, !insn.addr !13494
  %8 = load i64, i64* %7, align 8, !insn.addr !13494
  %9 = add i64 %8, %2, !insn.addr !13494
  %10 = trunc i64 %0 to i32, !insn.addr !13495
  %11 = inttoptr i64 %9 to i32*, !insn.addr !13495
  store i32 %10, i32* %11, align 4, !insn.addr !13495
  %12 = inttoptr i64 %1 to i8*, !insn.addr !13496
  store i8 0, i8* %12, align 1, !insn.addr !13496
  ret i64 ptrtoint (i32* @global_var_1 to i64), !insn.addr !13497
}

define i32 @load_be_uint16(i8* %p) local_unnamed_addr {
dec_label_pc_1d694:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = trunc i64 %0 to i32
  ret i32 %1
}

define i64 @function_1d695() local_unnamed_addr {
dec_label_pc_1d695:
  %0 = call i64 @__decompiler_undefined_function_0()
  ret i64 %0, !insn.addr !13498
}

define i64 @private_data.78() local_unnamed_addr {
dec_label_pc_1d6a0:
  %0 = call i64 @mcount(), !insn.addr !13499
  ret i64 %0, !insn.addr !13499
}

define i32 @connect_card(i64 %prv, i64 %bcas) local_unnamed_addr {
dec_label_pc_1d6ab:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = trunc i64 %0 to i32
  %2 = and i64 %0, 4294967295, !insn.addr !13500
  %3 = add nuw nsw i64 %2, 1128, !insn.addr !13501
  %4 = icmp eq i64 %3, %prv, !insn.addr !13502
  %spec.select = select i1 %4, i32 %1, i32 0
  ret i32 %spec.select, !insn.addr !13503
}

define i64 @load_be_uint16.79(i64 %arg1) local_unnamed_addr {
dec_label_pc_1d6c4:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = call i64 @mcount(), !insn.addr !13504
  %2 = add i64 %arg1, ptrtoint (i32* @global_var_1 to i64), !insn.addr !13505
  %3 = inttoptr i64 %2 to i8*, !insn.addr !13505
  %4 = load i8, i8* %3, align 1, !insn.addr !13505
  %5 = trunc i64 %0 to i32
  %6 = urem i32 %5, 256, !insn.addr !13506
  %7 = shl i32 %6, ptrtoint (i8* @global_var_8 to i32), !insn.addr !13506
  %8 = zext i8 %4 to i32, !insn.addr !13507
  %9 = or i32 %7, %8, !insn.addr !13507
  %10 = zext i32 %9 to i64, !insn.addr !13507
  ret i64 %10, !insn.addr !13508
}

define i64 @connect_card.80(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_1d6db:
  %0 = call i64 @mcount(), !insn.addr !13509
  %1 = add i64 %arg1, 40, !insn.addr !13510
  %2 = inttoptr i64 %1 to i64*, !insn.addr !13511
  store i64 0, i64* %2, align 8, !insn.addr !13511
  %3 = add i64 %arg1, 48, !insn.addr !13512
  %4 = inttoptr i64 %3 to i64*, !insn.addr !13512
  store i64 0, i64* %4, align 8, !insn.addr !13512
  %5 = add i64 %arg1, 56, !insn.addr !13513
  %6 = inttoptr i64 %5 to i64*, !insn.addr !13513
  store i64 0, i64* %6, align 8, !insn.addr !13513
  %7 = add i64 %arg1, 64, !insn.addr !13514
  %8 = inttoptr i64 %7 to i64*, !insn.addr !13514
  store i64 0, i64* %8, align 8, !insn.addr !13514
  %9 = add i64 %arg1, 72, !insn.addr !13515
  %10 = inttoptr i64 %9 to i64*, !insn.addr !13516
  store i64 0, i64* %10, align 8, !insn.addr !13516
  %11 = add i64 %arg1, 80, !insn.addr !13517
  %12 = inttoptr i64 %11 to i32*, !insn.addr !13517
  store i32 0, i32* %12, align 4, !insn.addr !13517
  call void @llvm.trap()
  unreachable
}

define i32 @proc_emm_b_cas_card(i8* %bcas, i8* %src, i32 %len) local_unnamed_addr {
dec_label_pc_1d7d9:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = call i64 @__decompiler_undefined_function_0()
  %2 = call i64 @__decompiler_undefined_function_0()
  %3 = call i64 @__decompiler_undefined_function_0()
  %4 = trunc i64 %3 to i32, !insn.addr !13518
  %5 = inttoptr i64 %1 to i32*, !insn.addr !13518
  store i32 %4, i32* %5, align 4, !insn.addr !13518
  %6 = add i64 %0, ptrtoint (i32* @global_var_2 to i64), !insn.addr !13519
  %7 = call i64 @load_be_uint16.79(i64 %6), !insn.addr !13520
  %8 = trunc i64 %7 to i32, !insn.addr !13521
  %9 = add i64 %2, 80, !insn.addr !13521
  %10 = inttoptr i64 %9 to i32*, !insn.addr !13521
  store i32 %8, i32* %10, align 4, !insn.addr !13521
  ret i32 ptrtoint (i32* @global_var_1 to i32), !insn.addr !13522
}

define i64 @proc_emm_b_cas_card.81(i64 %arg1, i64 %arg2, i64 %arg3) local_unnamed_addr {
dec_label_pc_1d809:
  %rax.1.reg2mem = alloca i64, !insn.addr !13523
  %rax.0.reg2mem = alloca i64, !insn.addr !13523
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = call i64 @mcount(), !insn.addr !13524
  %2 = call i64 @private_data.78(), !insn.addr !13525
  %3 = icmp eq i64 %2, 0, !insn.addr !13526
  %4 = icmp eq i64 %arg2, 0, !insn.addr !13527
  %or.cond = or i1 %4, %3
  %5 = trunc i64 %arg3 to i32
  %6 = icmp slt i32 %5, 1
  %or.cond3 = or i1 %6, %or.cond
  store i64 4294967295, i64* %rax.1.reg2mem, !insn.addr !13528
  br i1 %or.cond3, label %dec_label_pc_1d90f, label %dec_label_pc_1d856, !insn.addr !13528

dec_label_pc_1d856:                               ; preds = %dec_label_pc_1d809
  %7 = call i64 @connect_card.80(i64 %2, i64 %arg1), !insn.addr !13529
  %8 = add i64 %2, ptrtoint (i32** @global_var_18 to i64), !insn.addr !13530
  %9 = inttoptr i64 %8 to i64*, !insn.addr !13530
  %10 = load i64, i64* %9, align 8, !insn.addr !13530
  %11 = inttoptr i64 %10 to i32*, !insn.addr !13531
  store i32 13968, i32* %11, align 4, !insn.addr !13531
  %12 = load i64, i64* %9, align 8, !insn.addr !13532
  %13 = trunc i64 %arg3 to i8, !insn.addr !13533
  %14 = add i64 %12, ptrtoint (i16* @global_var_4 to i64), !insn.addr !13533
  %15 = inttoptr i64 %14 to i8*, !insn.addr !13533
  store i8 %13, i8* %15, align 1, !insn.addr !13533
  %16 = load i64, i64* %9, align 8, !insn.addr !13534
  %17 = add i64 %16, ptrtoint (i8* @global_var_5 to i64), !insn.addr !13535
  %sext = mul i64 %arg3, 4294967296
  %18 = sdiv i64 %sext, 4294967296, !insn.addr !13536
  %19 = call i64 @memcpy(i64 %17, i64 %arg2, i64 %18, i64 %0), !insn.addr !13537
  %20 = add i64 %arg3, zext (i32 ptrtoint (i8* @global_var_5 to i32) to i64), !insn.addr !13538
  %21 = and i64 %20, 4294967295, !insn.addr !13538
  %22 = load i64, i64* %9, align 8, !insn.addr !13539
  %23 = mul i64 %21, ptrtoint (i32* @global_var_1 to i64), !insn.addr !13540
  %24 = add i64 %22, %23, !insn.addr !13540
  %25 = inttoptr i64 %24 to i8*, !insn.addr !13540
  store i8 0, i8* %25, align 1, !insn.addr !13540
  %26 = add i32 %5, ptrtoint (i8* @global_var_6 to i32), !insn.addr !13541
  %27 = icmp eq i32 %26, 0, !insn.addr !13541
  store i64 0, i64* %rax.0.reg2mem, !insn.addr !13542
  store i64 0, i64* %rax.1.reg2mem, !insn.addr !13542
  br i1 %27, label %dec_label_pc_1d90f, label %dec_label_pc_1d8db, !insn.addr !13542

dec_label_pc_1d8db:                               ; preds = %dec_label_pc_1d856, %dec_label_pc_1d8db
  %rax.0.reload = load i64, i64* %rax.0.reg2mem
  %28 = add nuw nsw i64 %rax.0.reload, zext (i32 ptrtoint (i32* @global_var_1 to i32) to i64), !insn.addr !13543
  %29 = trunc i64 %28 to i32, !insn.addr !13544
  %30 = icmp ugt i32 %26, %29
  %31 = and i64 %28, 4294967295, !insn.addr !13543
  store i64 %31, i64* %rax.0.reg2mem, !insn.addr !13545
  store i64 0, i64* %rax.1.reg2mem, !insn.addr !13545
  br i1 %30, label %dec_label_pc_1d8db, label %dec_label_pc_1d90f, !insn.addr !13545

dec_label_pc_1d90f:                               ; preds = %dec_label_pc_1d8db, %dec_label_pc_1d856, %dec_label_pc_1d809
  %rax.1.reload = load i64, i64* %rax.1.reg2mem
  ret i64 %rax.1.reload, !insn.addr !13546
}

define i32 @proc_ecm_b_cas_card(i8* %bcas, i64 %dst, i8* %src, i32 %len) local_unnamed_addr {
dec_label_pc_1d919:
  %0 = ptrtoint i8* %src to i64
  %1 = trunc i64 %0 to i16, !insn.addr !13547
  %2 = call i32 @__asm_insd(i16 %1), !insn.addr !13547
  %3 = bitcast i8* %bcas to i32*, !insn.addr !13547
  store i32 %2, i32* %3, align 4, !insn.addr !13547
  %4 = call i64 @unknown_fffffffff077646b(), !insn.addr !13548
  %5 = trunc i64 %4 to i32, !insn.addr !13549
  ret i32 %5, !insn.addr !13549
}

define i64 @proc_ecm_b_cas_card.82(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4) local_unnamed_addr {
dec_label_pc_1d949:
  %rax.1.reg2mem = alloca i64, !insn.addr !13550
  %rax.0.reg2mem = alloca i64, !insn.addr !13550
  %0 = call i64 @mcount(), !insn.addr !13551
  %1 = call i64 @private_data.78(), !insn.addr !13552
  %2 = icmp eq i64 %1, 0, !insn.addr !13553
  %3 = icmp eq i64 %arg2, 0, !insn.addr !13554
  %or.cond = or i1 %3, %2
  %4 = icmp eq i64 %arg3, 0, !insn.addr !13555
  %or.cond3 = or i1 %4, %or.cond
  %5 = trunc i64 %arg4 to i32
  %6 = icmp slt i32 %5, 1
  %or.cond5 = or i1 %6, %or.cond3
  store i64 4294967295, i64* %rax.1.reg2mem, !insn.addr !13556
  br i1 %or.cond5, label %dec_label_pc_1da5b, label %dec_label_pc_1d9a2, !insn.addr !13556

dec_label_pc_1d9a2:                               ; preds = %dec_label_pc_1d949
  %7 = call i64 @connect_card.80(i64 %1, i64 %arg1), !insn.addr !13557
  %8 = add i64 %1, ptrtoint (i32** @global_var_18 to i64), !insn.addr !13558
  %9 = inttoptr i64 %8 to i64*, !insn.addr !13558
  %10 = load i64, i64* %9, align 8, !insn.addr !13558
  %11 = inttoptr i64 %10 to i32*, !insn.addr !13559
  store i32 13456, i32* %11, align 4, !insn.addr !13559
  %12 = load i64, i64* %9, align 8, !insn.addr !13560
  %13 = trunc i64 %arg4 to i8, !insn.addr !13561
  %14 = add i64 %12, ptrtoint (i16* @global_var_4 to i64), !insn.addr !13561
  %15 = inttoptr i64 %14 to i8*, !insn.addr !13561
  store i8 %13, i8* %15, align 1, !insn.addr !13561
  %16 = load i64, i64* %9, align 8, !insn.addr !13562
  %17 = add i64 %16, ptrtoint (i8* @global_var_5 to i64), !insn.addr !13563
  %sext = mul i64 %arg4, 4294967296
  %18 = sdiv i64 %sext, 4294967296, !insn.addr !13564
  %19 = call i64 @memcpy(i64 %17, i64 %arg3, i64 %18, i64 %arg4), !insn.addr !13565
  %20 = add i64 %arg4, zext (i32 ptrtoint (i8* @global_var_5 to i32) to i64), !insn.addr !13566
  %21 = and i64 %20, 4294967295, !insn.addr !13566
  %22 = load i64, i64* %9, align 8, !insn.addr !13567
  %23 = mul i64 %21, ptrtoint (i32* @global_var_1 to i64), !insn.addr !13568
  %24 = add i64 %22, %23, !insn.addr !13568
  %25 = inttoptr i64 %24 to i8*, !insn.addr !13568
  store i8 0, i8* %25, align 1, !insn.addr !13568
  %26 = add i32 %5, ptrtoint (i8* @global_var_6 to i32), !insn.addr !13569
  %27 = icmp eq i32 %26, 0, !insn.addr !13569
  store i64 0, i64* %rax.0.reg2mem, !insn.addr !13570
  store i64 0, i64* %rax.1.reg2mem, !insn.addr !13570
  br i1 %27, label %dec_label_pc_1da5b, label %dec_label_pc_1da27, !insn.addr !13570

dec_label_pc_1da27:                               ; preds = %dec_label_pc_1d9a2, %dec_label_pc_1da27
  %rax.0.reload = load i64, i64* %rax.0.reg2mem
  %28 = add nuw nsw i64 %rax.0.reload, zext (i32 ptrtoint (i32* @global_var_1 to i32) to i64), !insn.addr !13571
  %29 = trunc i64 %28 to i32, !insn.addr !13572
  %30 = icmp ugt i32 %26, %29
  %31 = and i64 %28, 4294967295, !insn.addr !13571
  store i64 %31, i64* %rax.0.reg2mem, !insn.addr !13573
  store i64 0, i64* %rax.1.reg2mem, !insn.addr !13573
  br i1 %30, label %dec_label_pc_1da27, label %dec_label_pc_1da5b, !insn.addr !13573

dec_label_pc_1da5b:                               ; preds = %dec_label_pc_1da27, %dec_label_pc_1d9a2, %dec_label_pc_1d949
  %rax.1.reload = load i64, i64* %rax.1.reg2mem
  ret i64 %rax.1.reload, !insn.addr !13574
}

define i32 @get_init_status_b_cas_card(i8* %bcas, i64 %stat) local_unnamed_addr {
dec_label_pc_1da65:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = trunc i64 %0 to i16, !insn.addr !13575
  %2 = call i32 @__asm_insd(i16 %1), !insn.addr !13575
  %3 = bitcast i8* %bcas to i32*, !insn.addr !13575
  store i32 %2, i32* %3, align 4, !insn.addr !13575
  %4 = call i64 @unknown_fffffffff07765b7(), !insn.addr !13576
  %5 = trunc i64 %4 to i32, !insn.addr !13577
  ret i32 %5, !insn.addr !13577
}

define i64 @get_init_status_b_cas_card.83(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_1da95:
  %rdi.0.reg2mem = alloca i64, !insn.addr !13578
  %rsi.0.reg2mem = alloca i64, !insn.addr !13578
  %rax.0.reg2mem = alloca i64, !insn.addr !13578
  %0 = call i64 @mcount(), !insn.addr !13579
  %1 = call i64 @private_data.78(), !insn.addr !13580
  %2 = icmp ne i64 %1, 0, !insn.addr !13581
  %3 = icmp eq i64 %arg2, 0, !insn.addr !13582
  %4 = icmp eq i1 %3, false, !insn.addr !13583
  %or.cond = icmp eq i1 %4, %2
  br i1 %or.cond, label %dec_label_pc_1dab8, label %dec_label_pc_1dab1, !insn.addr !13584

dec_label_pc_1dab1:                               ; preds = %dec_label_pc_1da95
  ret i64 %1, !insn.addr !13585

dec_label_pc_1dab8:                               ; preds = %dec_label_pc_1da95
  %5 = add i64 %1, 40, !insn.addr !13586
  %6 = trunc i64 %arg2 to i8, !insn.addr !13587
  %7 = and i8 %6, ptrtoint (i16* @global_var_4 to i8), !insn.addr !13587
  %8 = icmp eq i8 %7, 0, !insn.addr !13587
  store i64 1084, i64* %rax.0.reg2mem, !insn.addr !13588
  store i64 %5, i64* %rsi.0.reg2mem, !insn.addr !13588
  store i64 %arg2, i64* %rdi.0.reg2mem, !insn.addr !13588
  br i1 %8, label %dec_label_pc_1dae3, label %dec_label_pc_1dad4, !insn.addr !13588

dec_label_pc_1dad4:                               ; preds = %dec_label_pc_1dab8
  %9 = inttoptr i64 %5 to i32*, !insn.addr !13589
  %10 = load i32, i32* %9, align 4, !insn.addr !13589
  %11 = inttoptr i64 %arg2 to i32*, !insn.addr !13590
  store i32 %10, i32* %11, align 4, !insn.addr !13590
  %12 = add i64 %arg2, ptrtoint (i16* @global_var_4 to i64), !insn.addr !13591
  %13 = add i64 %1, 44, !insn.addr !13592
  store i64 1080, i64* %rax.0.reg2mem, !insn.addr !13593
  store i64 %13, i64* %rsi.0.reg2mem, !insn.addr !13593
  store i64 %12, i64* %rdi.0.reg2mem, !insn.addr !13593
  br label %dec_label_pc_1dae3, !insn.addr !13593

dec_label_pc_1dae3:                               ; preds = %dec_label_pc_1dad4, %dec_label_pc_1dab8
  %rdi.0.reload = load i64, i64* %rdi.0.reg2mem
  %rsi.0.reload = load i64, i64* %rsi.0.reg2mem
  %rax.0.reload = load i64, i64* %rax.0.reg2mem
  %14 = inttoptr i64 %rsi.0.reload to i8*, !insn.addr !13594
  %15 = inttoptr i64 %rdi.0.reload to i8*, !insn.addr !13594
  call void @__asm_rep_movsq_memcpy(i8* %15, i8* %14, i64 135), !insn.addr !13594
  ret i64 %rax.0.reload, !insn.addr !13595
}

define void @teardown.3(i64 %prv) local_unnamed_addr {
dec_label_pc_1dafb:
  %rdx.0.reg2mem = alloca i64, !insn.addr !13596
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = call i64 @__decompiler_undefined_function_0()
  %2 = call i64 @__decompiler_undefined_function_0()
  %3 = add i64 %1, zext (i32 ptrtoint (i16* @global_var_4 to i32) to i64), !insn.addr !13596
  %4 = and i64 %3, 4294967295, !insn.addr !13596
  %5 = trunc i64 %2 to i32
  %6 = and i32 %5, ptrtoint (i32* @global_var_2 to i32), !insn.addr !13597
  %7 = icmp eq i32 %6, 0, !insn.addr !13597
  store i64 %4, i64* %rdx.0.reg2mem, !insn.addr !13598
  br i1 %7, label %dec_label_pc_1db13, label %dec_label_pc_1db07, !insn.addr !13598

dec_label_pc_1db07:                               ; preds = %dec_label_pc_1dafb
  %8 = mul i64 %4, ptrtoint (i32* @global_var_1 to i64), !insn.addr !13599
  %9 = add i64 %8, %0, !insn.addr !13599
  %10 = inttoptr i64 %9 to i16*, !insn.addr !13599
  %11 = load i16, i16* %10, align 2, !insn.addr !13599
  %12 = add i64 %8, %prv, !insn.addr !13600
  %13 = inttoptr i64 %12 to i16*, !insn.addr !13600
  store i16 %11, i16* %13, align 2, !insn.addr !13600
  %14 = add i64 %4, ptrtoint (i32* @global_var_2 to i64), !insn.addr !13601
  store i64 %14, i64* %rdx.0.reg2mem, !insn.addr !13601
  br label %dec_label_pc_1db13, !insn.addr !13601

dec_label_pc_1db13:                               ; preds = %dec_label_pc_1db07, %dec_label_pc_1dafb
  %15 = and i32 %5, ptrtoint (i32* @global_var_1 to i32), !insn.addr !13602
  %16 = icmp eq i32 %15, 0, !insn.addr !13602
  br i1 %16, label %dec_label_pc_1db21, label %dec_label_pc_1db1a, !insn.addr !13603

dec_label_pc_1db1a:                               ; preds = %dec_label_pc_1db13
  %rdx.0.reload = load i64, i64* %rdx.0.reg2mem
  %17 = mul i64 %rdx.0.reload, ptrtoint (i32* @global_var_1 to i64), !insn.addr !13604
  %18 = add i64 %17, %0, !insn.addr !13604
  %19 = inttoptr i64 %18 to i8*, !insn.addr !13604
  %20 = load i8, i8* %19, align 1, !insn.addr !13604
  %21 = add i64 %17, %prv, !insn.addr !13605
  %22 = inttoptr i64 %21 to i8*, !insn.addr !13605
  store i8 %20, i8* %22, align 1, !insn.addr !13605
  br label %dec_label_pc_1db21, !insn.addr !13605

dec_label_pc_1db21:                               ; preds = %dec_label_pc_1db1a, %dec_label_pc_1db13
  ret void, !insn.addr !13606
}

define i64 @teardown.84(i64 %arg1) local_unnamed_addr {
dec_label_pc_1db2b:
  %0 = call i64 @mcount(), !insn.addr !13607
  ret i64 %0, !insn.addr !13608
}

define i32 @init_b_cas_card(i8* %bcas) local_unnamed_addr {
dec_label_pc_1db41:
  %rax.0.reg2mem = alloca i64, !insn.addr !13609
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = ptrtoint i8* %bcas to i64
  %2 = trunc i64 %1 to i32, !insn.addr !13609
  %3 = icmp eq i32 %2, 0, !insn.addr !13609
  br i1 %3, label %dec_label_pc_1db52, label %dec_label_pc_1db45, !insn.addr !13610

dec_label_pc_1db45:                               ; preds = %dec_label_pc_1db41
  %4 = call i64 @kfree(i64 %1), !insn.addr !13611
  %5 = add i64 %0, ptrtoint (i8* @global_var_8 to i64), !insn.addr !13612
  %6 = inttoptr i64 %5 to i64*, !insn.addr !13612
  store i64 0, i64* %6, align 8, !insn.addr !13612
  store i64 %4, i64* %rax.0.reg2mem, !insn.addr !13612
  br label %dec_label_pc_1db52, !insn.addr !13612

dec_label_pc_1db52:                               ; preds = %dec_label_pc_1db45, %dec_label_pc_1db41
  %rax.0.reload = load i64, i64* %rax.0.reg2mem
  %7 = add i64 %0, ptrtoint (i8* @global_var_10 to i64), !insn.addr !13613
  %8 = inttoptr i64 %7 to i64*, !insn.addr !13613
  store i64 0, i64* %8, align 8, !insn.addr !13613
  %9 = add i64 %0, ptrtoint (i32** @global_var_18 to i64), !insn.addr !13614
  %10 = inttoptr i64 %9 to i64*, !insn.addr !13614
  store i64 0, i64* %10, align 8, !insn.addr !13614
  %11 = add i64 %0, ptrtoint (i32** @global_var_20 to i64), !insn.addr !13615
  %12 = inttoptr i64 %11 to i64*, !insn.addr !13615
  store i64 0, i64* %12, align 8, !insn.addr !13615
  %13 = trunc i64 %rax.0.reload to i32, !insn.addr !13616
  ret i32 %13, !insn.addr !13616
}

define i64 @init_b_cas_card.85(i64 %arg1) local_unnamed_addr {
dec_label_pc_1db71:
  %stack_var_-64.0.in.reg2mem = alloca i64, !insn.addr !13617
  %0 = call i64 @mcount(), !insn.addr !13618
  %1 = call i64 @private_data.78(), !insn.addr !13619
  %2 = call i64 @teardown.84(i64 %1), !insn.addr !13620
  %3 = load i64, i64* inttoptr (i64 257464 to i64*), align 8, !insn.addr !13621
  %4 = call i64 @kmem_cache_alloc_notrace(i64 %3, i64* bitcast (i32** @global_var_20 to i64*)), !insn.addr !13622
  %5 = call i64 @slab_buffer_size(i64 %3), !insn.addr !13623
  %6 = load i32, i32* @global_var_3ecb0, align 4, !insn.addr !13624
  %7 = icmp eq i32 %6, 0, !insn.addr !13624
  br i1 %7, label %dec_label_pc_1dc1e, label %dec_label_pc_1dbe5, !insn.addr !13625

dec_label_pc_1dbe5:                               ; preds = %dec_label_pc_1db71
  %8 = load i64, i64* @global_var_3ecc8, align 8, !insn.addr !13626
  %9 = icmp eq i64 %8, 0, !insn.addr !13627
  store i64 %8, i64* %stack_var_-64.0.in.reg2mem, !insn.addr !13628
  br i1 %9, label %dec_label_pc_1dc1e, label %dec_label_pc_1dbf5, !insn.addr !13628

dec_label_pc_1dbf5:                               ; preds = %dec_label_pc_1dbe5, %dec_label_pc_1dbf5
  %stack_var_-64.0.in.reload = load i64, i64* %stack_var_-64.0.in.reg2mem
  %sext = mul i64 %stack_var_-64.0.in.reload, 72057594037927936
  %10 = sdiv i64 %sext, 72057594037927936, !insn.addr !13629
  %11 = add i64 %10, ptrtoint (i8* @global_var_8 to i64), !insn.addr !13629
  %12 = inttoptr i64 %11 to i64*, !insn.addr !13630
  %13 = load i64, i64* %12, align 8, !insn.addr !13630
  %14 = icmp eq i64 %13, 0, !insn.addr !13630
  %15 = icmp eq i1 %14, false, !insn.addr !13631
  store i64 %11, i64* %stack_var_-64.0.in.reg2mem, !insn.addr !13631
  br i1 %15, label %dec_label_pc_1dbf5, label %dec_label_pc_1dc1e, !insn.addr !13631

dec_label_pc_1dc1e:                               ; preds = %dec_label_pc_1dbf5, %dec_label_pc_1dbe5, %dec_label_pc_1db71
  %16 = add i64 %1, ptrtoint (i8* @global_var_8 to i64), !insn.addr !13632
  %17 = inttoptr i64 %16 to i64*, !insn.addr !13632
  store i64 %4, i64* %17, align 8, !insn.addr !13632
  %18 = call i64 @memset(i64 %4, i64 0, i64 8448), !insn.addr !13633
  %19 = load i64, i64* %17, align 8, !insn.addr !13634
  %20 = add i64 %1, ptrtoint (i8* @global_var_10 to i64), !insn.addr !13635
  %21 = inttoptr i64 %20 to i64*, !insn.addr !13635
  store i64 %19, i64* %21, align 8, !insn.addr !13635
  %22 = add i64 %19, 256, !insn.addr !13636
  %23 = add i64 %1, ptrtoint (i32** @global_var_18 to i64), !insn.addr !13637
  %24 = inttoptr i64 %23 to i64*, !insn.addr !13637
  store i64 %22, i64* %24, align 8, !insn.addr !13637
  ret i64 %19, !insn.addr !13637
}

define void @release_b_cas_card(i8* %bcas) local_unnamed_addr {
dec_label_pc_1dc51:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = call i64 @__decompiler_undefined_function_0()
  %2 = call i64 @__decompiler_undefined_function_0()
  %3 = add i64 %2, 4352, !insn.addr !13638
  %4 = add i64 %1, ptrtoint (i32** @global_var_20 to i64), !insn.addr !13639
  %5 = inttoptr i64 %4 to i64*, !insn.addr !13639
  store i64 %3, i64* %5, align 8, !insn.addr !13639
  %6 = call i64 @connect_card.80(i64 %1, i64 %0), !insn.addr !13640
  ret void, !insn.addr !13641
}

define i64 @release_b_cas_card.86() local_unnamed_addr {
dec_label_pc_1dc81:
  %0 = call i64 @__decompiler_undefined_function_0()
  ret i64 %0, !insn.addr !13642
}

define i64 @create_b_cas_card(i8* %DevExt, i32 (i8*, i8*, i32, i8, i8*)* %bcas_callback) local_unnamed_addr {
dec_label_pc_1dc83:
  %rax.0.reg2mem = alloca i64, !insn.addr !13643
  %0 = call i64 @mcount(), !insn.addr !13644
  %1 = call i64 @private_data.78(), !insn.addr !13645
  %2 = icmp eq i64 %1, 0, !insn.addr !13646
  store i64 0, i64* %rax.0.reg2mem, !insn.addr !13647
  br i1 %2, label %dec_label_pc_1dcac, label %dec_label_pc_1dc9c, !insn.addr !13647

dec_label_pc_1dc9c:                               ; preds = %dec_label_pc_1dc83
  %3 = call i64 @teardown.84(i64 %1), !insn.addr !13648
  %4 = call i64 @kfree(i64 %1), !insn.addr !13649
  store i64 %4, i64* %rax.0.reg2mem, !insn.addr !13649
  br label %dec_label_pc_1dcac, !insn.addr !13649

dec_label_pc_1dcac:                               ; preds = %dec_label_pc_1dc9c, %dec_label_pc_1dc83
  %rax.0.reload = load i64, i64* %rax.0.reg2mem
  ret i64 %rax.0.reload, !insn.addr !13650
}

define i64 @create_b_cas_card.211(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_1dcb3:
  %stack_var_-64.0.in.reg2mem = alloca i64, !insn.addr !13651
  %0 = call i64 @mcount(), !insn.addr !13652
  %1 = load i64, i64* inttoptr (i64 257392 to i64*), align 16, !insn.addr !13653
  %2 = call i64 @kmem_cache_alloc_notrace(i64 %1, i64* bitcast (i32** @global_var_20 to i64*)), !insn.addr !13654
  %3 = call i64 @slab_buffer_size(i64 %1), !insn.addr !13655
  %4 = load i32, i32* @global_var_3ecb0, align 4, !insn.addr !13656
  %5 = icmp eq i32 %4, 0, !insn.addr !13656
  br i1 %5, label %dec_label_pc_1dd45, label %dec_label_pc_1dd0c, !insn.addr !13657

dec_label_pc_1dd0c:                               ; preds = %dec_label_pc_1dcb3
  %6 = load i64, i64* @global_var_3ecc8, align 8, !insn.addr !13658
  %7 = icmp eq i64 %6, 0, !insn.addr !13659
  store i64 %6, i64* %stack_var_-64.0.in.reg2mem, !insn.addr !13660
  br i1 %7, label %dec_label_pc_1dd45, label %dec_label_pc_1dd1c, !insn.addr !13660

dec_label_pc_1dd1c:                               ; preds = %dec_label_pc_1dd0c, %dec_label_pc_1dd1c
  %stack_var_-64.0.in.reload = load i64, i64* %stack_var_-64.0.in.reg2mem
  %sext = mul i64 %stack_var_-64.0.in.reload, 72057594037927936
  %8 = sdiv i64 %sext, 72057594037927936, !insn.addr !13661
  %9 = add i64 %8, ptrtoint (i8* @global_var_8 to i64), !insn.addr !13661
  %10 = inttoptr i64 %9 to i64*, !insn.addr !13662
  %11 = load i64, i64* %10, align 8, !insn.addr !13662
  %12 = icmp eq i64 %11, 0, !insn.addr !13662
  %13 = icmp eq i1 %12, false, !insn.addr !13663
  store i64 %9, i64* %stack_var_-64.0.in.reg2mem, !insn.addr !13663
  br i1 %13, label %dec_label_pc_1dd1c, label %dec_label_pc_1dd45, !insn.addr !13663

dec_label_pc_1dd45:                               ; preds = %dec_label_pc_1dd1c, %dec_label_pc_1dd0c, %dec_label_pc_1dcb3
  %14 = inttoptr i64 %2 to i8*, !insn.addr !13664
  call void @__asm_rep_stosq_memset(i8* %14, i64 0, i64 189), !insn.addr !13664
  %15 = inttoptr i64 %2 to i64*, !insn.addr !13665
  store i64 %arg1, i64* %15, align 8, !insn.addr !13665
  %16 = add i64 %2, 1128, !insn.addr !13666
  %17 = inttoptr i64 %16 to i64*, !insn.addr !13667
  store i64 %2, i64* %17, align 8, !insn.addr !13667
  %18 = add i64 %2, 1136, !insn.addr !13668
  %19 = inttoptr i64 %18 to i64*, !insn.addr !13668
  store i64 0, i64* %19, align 8, !insn.addr !13668
  %20 = add i64 %2, 1144, !insn.addr !13669
  %21 = inttoptr i64 %20 to i64*, !insn.addr !13669
  store i64 0, i64* %21, align 8, !insn.addr !13669
  ret i64 %16, !insn.addr !13669
}

define i64 @FUSB_ProcessSysControlIrp(i8* %DeviceObject, i8* %Irp) local_unnamed_addr {
dec_label_pc_1dd7c:
  %0 = call i64 @__decompiler_undefined_function_0()
  %rax = alloca i64, align 8
  %1 = call i64 @__decompiler_undefined_function_0()
  %2 = bitcast i64* %rax to i8*
  %3 = trunc i64 %1 to i8
  %4 = mul i8 %3, 2, !insn.addr !13670
  %5 = inttoptr i64 %1 to i8*, !insn.addr !13670
  store i8 %4, i8* %5, align 1, !insn.addr !13670
  %6 = load i64, i64* %rax, align 8, !insn.addr !13671
  %7 = add i64 %6, -57, !insn.addr !13671
  %8 = inttoptr i64 %7 to i8*, !insn.addr !13671
  %9 = load i8, i8* %8, align 1, !insn.addr !13671
  %10 = trunc i64 %0 to i8, !insn.addr !13671
  %11 = add i8 %9, %10, !insn.addr !13671
  store i8 %11, i8* %8, align 1, !insn.addr !13671
  %12 = load i8, i8* %2, align 8, !insn.addr !13672
  %13 = load i64, i64* %rax, align 8
  %14 = trunc i64 %13 to i8, !insn.addr !13672
  %15 = and i8 %12, %14, !insn.addr !13672
  %16 = inttoptr i64 %13 to i8*, !insn.addr !13672
  store i8 %15, i8* %16, align 1, !insn.addr !13672
  %17 = load i8, i8* %2, align 8, !insn.addr !13673
  %18 = load i64, i64* %rax, align 8
  %19 = trunc i64 %18 to i8, !insn.addr !13673
  %20 = add i8 %17, %19, !insn.addr !13673
  %21 = inttoptr i64 %18 to i8*, !insn.addr !13673
  store i8 %20, i8* %21, align 1, !insn.addr !13673
  %22 = load i64, i64* %rax, align 8, !insn.addr !13674
  %23 = add i64 %22, -57, !insn.addr !13674
  %24 = inttoptr i64 %23 to i8*, !insn.addr !13674
  %25 = load i8, i8* %24, align 1, !insn.addr !13674
  %26 = add i8 %25, %10, !insn.addr !13674
  store i8 %26, i8* %24, align 1, !insn.addr !13674
  %27 = load i8, i8* %2, align 8, !insn.addr !13675
  %28 = load i64, i64* %rax, align 8
  %29 = trunc i64 %28 to i8, !insn.addr !13675
  %30 = sub i8 %27, %29, !insn.addr !13675
  %31 = inttoptr i64 %28 to i8*, !insn.addr !13675
  store i8 %30, i8* %31, align 1, !insn.addr !13675
  %32 = load i64, i64* %rax, align 8, !insn.addr !13675
  ret i64 %32, !insn.addr !13675
}

define void @FUSB_Unload(i8* %DriverObject) local_unnamed_addr {
dec_label_pc_1dd8c:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = call i64 @__decompiler_undefined_function_0()
  %2 = trunc i64 %1 to i8
  %3 = mul i8 %2, 2, !insn.addr !13676
  %4 = inttoptr i64 %1 to i8*, !insn.addr !13676
  store i8 %3, i8* %4, align 1, !insn.addr !13676
  %5 = mul i64 %0, 4, !insn.addr !13677
  %6 = add i64 %0, 104, !insn.addr !13677
  %7 = add i64 %6, %5, !insn.addr !13677
  %8 = inttoptr i64 %7 to i8*, !insn.addr !13677
  %9 = load i8, i8* %8, align 1, !insn.addr !13677
  %10 = trunc i64 %0 to i8, !insn.addr !13677
  %11 = add i8 %9, %10, !insn.addr !13677
  store i8 %11, i8* %8, align 1, !insn.addr !13677
  %12 = add i64 %1, -117, !insn.addr !13678
  %13 = inttoptr i64 %12 to i8*, !insn.addr !13678
  %14 = load i8, i8* %13, align 1, !insn.addr !13678
  %15 = xor i8 %14, %10, !insn.addr !13678
  store i8 %15, i8* %13, align 1, !insn.addr !13678
  ret void, !insn.addr !13679
}

define i64 @FUSB_CallUSBD(i8* %DeviceObject, i8* %Urb) local_unnamed_addr {
dec_label_pc_1dd97:
  %0 = call i64 @__decompiler_undefined_function_0()
  ret i64 %0, !insn.addr !13680
}

define i64 @FUSB_ConfigureDevice(i8* %DeviceObject) local_unnamed_addr {
dec_label_pc_1dda7:
  %0 = call i64 @__decompiler_undefined_function_0()
  ret i64 %0, !insn.addr !13681
}

define i64 @FUSB_ProcessSysControlIrp.182() local_unnamed_addr {
dec_label_pc_1ddac:
  %0 = call i64 @mcount(), !insn.addr !13682
  ret i64 %0, !insn.addr !13682
}

define i64 @FUSB_SelectInterface(i8* %DeviceObject, i8* %ConfigurationDescriptor) local_unnamed_addr {
dec_label_pc_1ddb7:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = trunc i64 %0 to i8
  %2 = mul i8 %1, 2, !insn.addr !13683
  %3 = inttoptr i64 %0 to i8*, !insn.addr !13683
  store i8 %2, i8* %3, align 1, !insn.addr !13683
  ret i64 %0, !insn.addr !13684
}

define i64 @FUSB_Unload.415() local_unnamed_addr {
dec_label_pc_1ddbc:
  %0 = call i64 @mcount(), !insn.addr !13685
  ret i64 %0, !insn.addr !13686
}

define i64 @FUSB_ResetPipe(i8* %DeviceObject, i8* %PipeInfo, i8 %ClearStall) local_unnamed_addr {
dec_label_pc_1ddc7:
  %0 = call i64 @mcount(), !insn.addr !13687
  ret i64 ptrtoint (i32* @global_var_1 to i64), !insn.addr !13688
}

define i64 @FUSB_DecrementIoCount(i8* %DeviceObject) local_unnamed_addr {
dec_label_pc_1ddd7:
  %0 = call i64 @mcount(), !insn.addr !13689
  ret i64 0, !insn.addr !13690
}

define void @FUSB_IncrementIoCount(i8* %DeviceObject) local_unnamed_addr {
dec_label_pc_1dde7:
  %0 = call i64 @mcount(), !insn.addr !13691
  ret void, !insn.addr !13691
}

define i64 @FUSB_CreateDeviceObject(i8* %DriverObject, i8* %PhysicalDeviceObject, i8** %DeviceObject, i8* %DeviceExtensionForBDA, i8 %bForBDA) local_unnamed_addr {
dec_label_pc_1ddf2:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = trunc i64 %0 to i8
  %2 = mul i8 %1, 2, !insn.addr !13692
  %3 = inttoptr i64 %0 to i8*, !insn.addr !13692
  store i8 %2, i8* %3, align 1, !insn.addr !13692
  ret i64 %0, !insn.addr !13693
}

define i64 @FUSB_ResetPipe.215() local_unnamed_addr {
dec_label_pc_1ddf7:
  %0 = call i64 @mcount(), !insn.addr !13694
  ret i64 0, !insn.addr !13695
}

define i64 @FUSB_DecrementIoCount.574(i64 %arg1) local_unnamed_addr {
dec_label_pc_1de07:
  %0 = call i64 @mcount(), !insn.addr !13696
  ret i64 0, !insn.addr !13697
}

define i64 @FUSB_IncrementIoCount.588(i64 %arg1) local_unnamed_addr {
dec_label_pc_1de17:
  %0 = call i64 @mcount(), !insn.addr !13698
  ret i64 %0, !insn.addr !13699
}

define i64 @FUSB_CreateDeviceObject.434(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4, i64* %arg5) local_unnamed_addr {
dec_label_pc_1de22:
  %rdx.0.reg2mem = alloca i64, !insn.addr !13700
  %rax.0.reg2mem = alloca i64, !insn.addr !13700
  %0 = ptrtoint i64* %arg5 to i64
  %1 = call i64 @mcount(), !insn.addr !13701
  %2 = call i64 @NT_SUCCESS.556(i64 ptrtoint (i32* @global_var_1 to i64)), !insn.addr !13702
  %3 = trunc i64 %0 to i8, !insn.addr !13703
  %4 = icmp eq i8 %3, 0, !insn.addr !13703
  %5 = icmp eq i1 %4, false, !insn.addr !13704
  %6 = select i1 %5, i64 %arg4, i64 0, !insn.addr !13704
  %7 = call i64 @NT_SUCCESS.556(i64 ptrtoint (i32* @global_var_1 to i64)), !insn.addr !13705
  %8 = add i64 %6, 216, !insn.addr !13706
  %9 = inttoptr i64 %8 to i64*, !insn.addr !13706
  store i64 5242880, i64* %9, align 8, !insn.addr !13706
  store i64 0, i64* %rax.0.reg2mem, !insn.addr !13707
  store i64 %6, i64* %rdx.0.reg2mem, !insn.addr !13707
  br label %dec_label_pc_1de76, !insn.addr !13707

dec_label_pc_1de76:                               ; preds = %dec_label_pc_1de76, %dec_label_pc_1de22
  %rdx.0.reload = load i64, i64* %rdx.0.reg2mem
  %rax.0.reload = load i64, i64* %rax.0.reg2mem
  %10 = add i64 %rdx.0.reload, 1152, !insn.addr !13708
  %11 = inttoptr i64 %10 to i8*, !insn.addr !13708
  store i8 0, i8* %11, align 1, !insn.addr !13708
  %12 = add i64 %rdx.0.reload, 888, !insn.addr !13709
  %13 = inttoptr i64 %12 to i8*, !insn.addr !13709
  store i8 0, i8* %13, align 1, !insn.addr !13709
  %14 = add i64 %rax.0.reload, %6
  %15 = add i64 %14, 896, !insn.addr !13710
  %16 = inttoptr i64 %15 to i64*, !insn.addr !13710
  store i64 0, i64* %16, align 8, !insn.addr !13710
  %17 = add i64 %14, 1024, !insn.addr !13711
  %18 = inttoptr i64 %17 to i64*, !insn.addr !13711
  store i64 0, i64* %18, align 8, !insn.addr !13711
  %19 = add i64 %14, 960, !insn.addr !13712
  %20 = inttoptr i64 %19 to i64*, !insn.addr !13712
  store i64 0, i64* %20, align 8, !insn.addr !13712
  %21 = add i64 %14, 1088, !insn.addr !13713
  %22 = inttoptr i64 %21 to i64*, !insn.addr !13713
  store i64 0, i64* %22, align 8, !insn.addr !13713
  %23 = add i64 %rdx.0.reload, ptrtoint (i32* @global_var_1 to i64), !insn.addr !13714
  %24 = add i64 %rax.0.reload, ptrtoint (i8* @global_var_8 to i64), !insn.addr !13715
  %25 = icmp eq i64 %rax.0.reload, sub (i64 0, i64 add (i64 ptrtoint (i8* @global_var_8 to i64), i64 -64)), !insn.addr !13716
  %26 = icmp eq i1 %25, false, !insn.addr !13717
  store i64 %24, i64* %rax.0.reg2mem, !insn.addr !13717
  store i64 %23, i64* %rdx.0.reg2mem, !insn.addr !13717
  br i1 %26, label %dec_label_pc_1de76, label %dec_label_pc_1dec2, !insn.addr !13717

dec_label_pc_1dec2:                               ; preds = %dec_label_pc_1de76
  %27 = add i64 %6, 20399, !insn.addr !13718
  %28 = inttoptr i64 %27 to i8*, !insn.addr !13718
  store i8 0, i8* %28, align 1, !insn.addr !13718
  %29 = add i64 %6, 20400, !insn.addr !13719
  %30 = inttoptr i64 %29 to i8*, !insn.addr !13719
  store i8 0, i8* %30, align 1, !insn.addr !13719
  %31 = add i64 %6, 20401, !insn.addr !13720
  %32 = inttoptr i64 %31 to i8*, !insn.addr !13720
  store i8 0, i8* %32, align 1, !insn.addr !13720
  %33 = add i64 %6, 20402, !insn.addr !13721
  %34 = inttoptr i64 %33 to i8*, !insn.addr !13721
  store i8 0, i8* %34, align 1, !insn.addr !13721
  %35 = add i64 %6, ptrtoint (i32** @global_var_18 to i64), !insn.addr !13722
  %36 = inttoptr i64 %35 to i32*, !insn.addr !13722
  store i32 0, i32* %36, align 4, !insn.addr !13722
  %37 = add i64 %6, ptrtoint (i32** @global_var_20 to i64), !insn.addr !13723
  %38 = call i64 @__init_waitqueue_head(i64 %37, i64 0, i64 %23, i64 %arg4), !insn.addr !13724
  %39 = add i64 %6, 120, !insn.addr !13725
  %40 = inttoptr i64 %39 to i32*, !insn.addr !13725
  store i32 0, i32* %40, align 4, !insn.addr !13725
  %41 = add i64 %6, 128, !insn.addr !13726
  %42 = call i64 @__init_waitqueue_head(i64 %41, i64 0, i64 %23, i64 %arg4), !insn.addr !13727
  %43 = add i64 %6, 56, !insn.addr !13728
  %44 = inttoptr i64 %43 to i32*, !insn.addr !13728
  store i32 0, i32* %44, align 4, !insn.addr !13728
  %45 = add i64 %6, 64, !insn.addr !13729
  %46 = call i64 @__init_waitqueue_head(i64 %45, i64 0, i64 %23, i64 %arg4), !insn.addr !13730
  %47 = add i64 %6, 88, !insn.addr !13731
  %48 = inttoptr i64 %47 to i32*, !insn.addr !13731
  store i32 0, i32* %48, align 4, !insn.addr !13731
  %49 = add i64 %6, 96, !insn.addr !13732
  %50 = call i64 @__init_waitqueue_head(i64 %49, i64 0, i64 %23, i64 %arg4), !insn.addr !13733
  %51 = add i64 %6, 160, !insn.addr !13734
  %52 = add i64 %6, 152, !insn.addr !13735
  %53 = inttoptr i64 %52 to i32*, !insn.addr !13735
  store i32 0, i32* %53, align 4, !insn.addr !13735
  %54 = add i64 %6, 156, !insn.addr !13736
  %55 = inttoptr i64 %54 to i32*, !insn.addr !13736
  store i32 ptrtoint (i32* @global_var_1 to i32), i32* %55, align 4, !insn.addr !13736
  %56 = inttoptr i64 %51 to i64*, !insn.addr !13737
  store i64 %51, i64* %56, align 8, !insn.addr !13737
  %57 = add i64 %6, 168, !insn.addr !13738
  %58 = inttoptr i64 %57 to i64*, !insn.addr !13738
  store i64 %51, i64* %58, align 8, !insn.addr !13738
  %59 = add i64 %6, 232, !insn.addr !13739
  %60 = add i64 %6, 224, !insn.addr !13740
  %61 = inttoptr i64 %60 to i32*, !insn.addr !13740
  store i32 0, i32* %61, align 4, !insn.addr !13740
  %62 = add i64 %6, 228, !insn.addr !13741
  %63 = inttoptr i64 %62 to i32*, !insn.addr !13741
  store i32 ptrtoint (i32* @global_var_1 to i32), i32* %63, align 4, !insn.addr !13741
  %64 = inttoptr i64 %59 to i64*, !insn.addr !13742
  store i64 %59, i64* %64, align 8, !insn.addr !13742
  %65 = add i64 %6, 240, !insn.addr !13743
  %66 = inttoptr i64 %65 to i64*, !insn.addr !13743
  store i64 %59, i64* %66, align 8, !insn.addr !13743
  %67 = add i64 %6, 256, !insn.addr !13744
  %68 = add i64 %6, 248, !insn.addr !13745
  %69 = inttoptr i64 %68 to i32*, !insn.addr !13745
  store i32 0, i32* %69, align 4, !insn.addr !13745
  %70 = add i64 %6, 252, !insn.addr !13746
  %71 = inttoptr i64 %70 to i32*, !insn.addr !13746
  store i32 ptrtoint (i32* @global_var_1 to i32), i32* %71, align 4, !insn.addr !13746
  %72 = inttoptr i64 %67 to i64*, !insn.addr !13747
  store i64 %67, i64* %72, align 8, !insn.addr !13747
  %73 = add i64 %6, 264, !insn.addr !13748
  %74 = inttoptr i64 %73 to i64*, !insn.addr !13748
  store i64 %67, i64* %74, align 8, !insn.addr !13748
  %75 = add i64 %6, 280, !insn.addr !13749
  %76 = add i64 %6, 272, !insn.addr !13750
  %77 = inttoptr i64 %76 to i32*, !insn.addr !13750
  store i32 0, i32* %77, align 4, !insn.addr !13750
  %78 = add i64 %6, 276, !insn.addr !13751
  %79 = inttoptr i64 %78 to i32*, !insn.addr !13751
  store i32 ptrtoint (i32* @global_var_1 to i32), i32* %79, align 4, !insn.addr !13751
  %80 = inttoptr i64 %75 to i64*, !insn.addr !13752
  store i64 %75, i64* %80, align 8, !insn.addr !13752
  %81 = add i64 %6, 288, !insn.addr !13753
  %82 = inttoptr i64 %81 to i64*, !insn.addr !13753
  store i64 %75, i64* %82, align 8, !insn.addr !13753
  %83 = add i64 %6, 328, !insn.addr !13754
  %84 = add i64 %6, 320, !insn.addr !13755
  %85 = inttoptr i64 %84 to i32*, !insn.addr !13755
  store i32 0, i32* %85, align 4, !insn.addr !13755
  %86 = add i64 %6, 324, !insn.addr !13756
  %87 = inttoptr i64 %86 to i32*, !insn.addr !13756
  store i32 ptrtoint (i32* @global_var_1 to i32), i32* %87, align 4, !insn.addr !13756
  %88 = inttoptr i64 %83 to i64*, !insn.addr !13757
  store i64 %83, i64* %88, align 8, !insn.addr !13757
  %89 = add i64 %6, 336, !insn.addr !13758
  %90 = inttoptr i64 %89 to i64*, !insn.addr !13758
  store i64 %83, i64* %90, align 8, !insn.addr !13758
  %91 = add i64 %6, 352, !insn.addr !13759
  %92 = add i64 %6, 344, !insn.addr !13760
  %93 = inttoptr i64 %92 to i32*, !insn.addr !13760
  store i32 0, i32* %93, align 4, !insn.addr !13760
  %94 = add i64 %6, 348, !insn.addr !13761
  %95 = inttoptr i64 %94 to i32*, !insn.addr !13761
  store i32 ptrtoint (i32* @global_var_1 to i32), i32* %95, align 4, !insn.addr !13761
  %96 = inttoptr i64 %91 to i64*, !insn.addr !13762
  store i64 %91, i64* %96, align 8, !insn.addr !13762
  %97 = add i64 %6, 360, !insn.addr !13763
  %98 = inttoptr i64 %97 to i64*, !insn.addr !13763
  store i64 %91, i64* %98, align 8, !insn.addr !13763
  %99 = add i64 %6, 400, !insn.addr !13764
  %100 = add i64 %6, 424, !insn.addr !13765
  %101 = add i64 %6, 416, !insn.addr !13766
  %102 = inttoptr i64 %101 to i32*, !insn.addr !13766
  store i32 0, i32* %102, align 4, !insn.addr !13766
  %103 = add i64 %6, 420, !insn.addr !13767
  %104 = inttoptr i64 %103 to i32*, !insn.addr !13767
  store i32 ptrtoint (i32* @global_var_1 to i32), i32* %104, align 4, !insn.addr !13767
  %105 = inttoptr i64 %100 to i64*, !insn.addr !13768
  store i64 %100, i64* %105, align 8, !insn.addr !13768
  %106 = add i64 %6, 432, !insn.addr !13769
  %107 = inttoptr i64 %106 to i64*, !insn.addr !13769
  store i64 %100, i64* %107, align 8, !insn.addr !13769
  %108 = add i64 %6, 448, !insn.addr !13770
  %109 = add i64 %6, 440, !insn.addr !13771
  %110 = inttoptr i64 %109 to i32*, !insn.addr !13771
  store i32 0, i32* %110, align 4, !insn.addr !13771
  %111 = add i64 %6, 444, !insn.addr !13772
  %112 = inttoptr i64 %111 to i32*, !insn.addr !13772
  store i32 ptrtoint (i32* @global_var_1 to i32), i32* %112, align 4, !insn.addr !13772
  %113 = inttoptr i64 %108 to i64*, !insn.addr !13773
  store i64 %108, i64* %113, align 8, !insn.addr !13773
  %114 = add i64 %6, 456, !insn.addr !13774
  %115 = inttoptr i64 %114 to i64*, !insn.addr !13774
  store i64 %108, i64* %115, align 8, !insn.addr !13774
  %116 = add i64 %6, 376, !insn.addr !13775
  %117 = add i64 %6, 368, !insn.addr !13776
  %118 = inttoptr i64 %117 to i32*, !insn.addr !13776
  store i32 0, i32* %118, align 4, !insn.addr !13776
  %119 = add i64 %6, 372, !insn.addr !13777
  %120 = inttoptr i64 %119 to i32*, !insn.addr !13777
  store i32 ptrtoint (i32* @global_var_1 to i32), i32* %120, align 4, !insn.addr !13777
  %121 = inttoptr i64 %116 to i64*, !insn.addr !13778
  store i64 %116, i64* %121, align 8, !insn.addr !13778
  %122 = add i64 %6, 384, !insn.addr !13779
  %123 = inttoptr i64 %122 to i64*, !insn.addr !13779
  store i64 %116, i64* %123, align 8, !insn.addr !13779
  %124 = add i64 %6, ptrtoint (i32** @global_var_188 to i64), !insn.addr !13780
  %125 = inttoptr i64 %124 to i32*, !insn.addr !13780
  store i32 0, i32* %125, align 4, !insn.addr !13780
  %126 = add i64 %6, 396, !insn.addr !13781
  %127 = inttoptr i64 %126 to i32*, !insn.addr !13781
  store i32 ptrtoint (i32* @global_var_1 to i32), i32* %127, align 4, !insn.addr !13781
  %128 = inttoptr i64 %99 to i64*, !insn.addr !13782
  store i64 %99, i64* %128, align 8, !insn.addr !13782
  %129 = add i64 %6, 408, !insn.addr !13783
  %130 = inttoptr i64 %129 to i64*, !insn.addr !13783
  store i64 %99, i64* %130, align 8, !insn.addr !13783
  %131 = add i64 %6, 22136, !insn.addr !13784
  %132 = inttoptr i64 %131 to i64*, !insn.addr !13784
  store i64 0, i64* %132, align 8, !insn.addr !13784
  %133 = add i64 %6, 22160, !insn.addr !13785
  %134 = inttoptr i64 %133 to i64*, !insn.addr !13785
  store i64 0, i64* %134, align 8, !insn.addr !13785
  %135 = add i64 %6, 22144, !insn.addr !13786
  %136 = inttoptr i64 %135 to i64*, !insn.addr !13786
  store i64 0, i64* %136, align 8, !insn.addr !13786
  %137 = add i64 %6, 22816, !insn.addr !13787
  %138 = add i64 %6, 22808, !insn.addr !13788
  %139 = inttoptr i64 %138 to i32*, !insn.addr !13788
  store i32 0, i32* %139, align 4, !insn.addr !13788
  %140 = add i64 %6, 22812, !insn.addr !13789
  %141 = inttoptr i64 %140 to i32*, !insn.addr !13789
  store i32 ptrtoint (i32* @global_var_1 to i32), i32* %141, align 4, !insn.addr !13789
  %142 = inttoptr i64 %137 to i64*, !insn.addr !13790
  store i64 %137, i64* %142, align 8, !insn.addr !13790
  %143 = add i64 %6, 22824, !insn.addr !13791
  %144 = inttoptr i64 %143 to i64*, !insn.addr !13791
  store i64 %137, i64* %144, align 8, !insn.addr !13791
  ret i64 %137, !insn.addr !13791
}

define i64 @DriverEntry(i8* %DriverObject, i8* %RegistryPath) local_unnamed_addr {
dec_label_pc_1e124:
  %0 = call i64 @__decompiler_undefined_function_0()
  %rax = alloca i64, align 8
  %1 = call i64 @__decompiler_undefined_function_0()
  %2 = lshr i64 %0, ptrtoint (i8* @global_var_8 to i64), !insn.addr !13792
  %3 = add i64 %1, %2, !insn.addr !13792
  %4 = urem i64 %3, 256, !insn.addr !13792
  %5 = shl i64 %4, ptrtoint (i8* @global_var_8 to i64), !insn.addr !13792
  %6 = and i64 %0, -65281, !insn.addr !13792
  %7 = or i64 %5, %6, !insn.addr !13792
  %8 = trunc i64 %1 to i32
  %9 = xor i32 %8, 89, !insn.addr !13793
  %10 = inttoptr i64 %1 to i32*, !insn.addr !13793
  store i32 %9, i32* %10, align 4, !insn.addr !13793
  %11 = bitcast i64* %rax to i8*
  %12 = load i8, i8* %11, align 8, !insn.addr !13794
  %13 = load i64, i64* %rax, align 8
  %14 = trunc i64 %13 to i8, !insn.addr !13794
  %15 = add i8 %12, %14, !insn.addr !13794
  %16 = inttoptr i64 %13 to i8*, !insn.addr !13794
  store i8 %15, i8* %16, align 1, !insn.addr !13794
  %17 = load i8, i8* %11, align 8, !insn.addr !13795
  %18 = load i64, i64* %rax, align 8
  %19 = trunc i64 %18 to i8, !insn.addr !13795
  %20 = add i8 %17, %19, !insn.addr !13795
  %21 = inttoptr i64 %18 to i8*, !insn.addr !13795
  store i8 %20, i8* %21, align 1, !insn.addr !13795
  %22 = load i8, i8* %11, align 8, !insn.addr !13796
  %23 = load i64, i64* %rax, align 8
  %24 = trunc i64 %23 to i8, !insn.addr !13796
  %25 = add i8 %22, %24, !insn.addr !13796
  %26 = inttoptr i64 %23 to i8*, !insn.addr !13796
  store i8 %25, i8* %26, align 1, !insn.addr !13796
  %27 = add i64 %7, 22836, !insn.addr !13797
  %28 = inttoptr i64 %27 to i32*, !insn.addr !13797
  store i32 ptrtoint (i32* @global_var_1 to i32), i32* %28, align 4, !insn.addr !13797
  %29 = load i64, i64* %rax, align 8, !insn.addr !13798
  %30 = add i64 %7, 22840, !insn.addr !13798
  %31 = inttoptr i64 %30 to i64*, !insn.addr !13798
  store i64 %29, i64* %31, align 8, !insn.addr !13798
  %32 = load i64, i64* %rax, align 8, !insn.addr !13799
  %33 = add i64 %7, 22848, !insn.addr !13799
  %34 = inttoptr i64 %33 to i64*, !insn.addr !13799
  store i64 %32, i64* %34, align 8, !insn.addr !13799
  ret i64 ptrtoint (i32* @global_var_1 to i64), !insn.addr !13800
}

define i64 @DriverEntry.304(i64 %arg1) local_unnamed_addr {
dec_label_pc_1e154:
  %0 = call i64 @mcount(), !insn.addr !13801
  ret i64 %0, !insn.addr !13802
}

define void @nmi_delay(i64 %pPrivate, i32 %msec) local_unnamed_addr {
dec_label_pc_1e160:
  %0 = call i1 @__decompiler_undefined_function_2()
  %.not = icmp ne i1 %0, true
  %1 = icmp eq i32 %msec, 0, !insn.addr !13803
  %2 = icmp eq i1 %1, false, !insn.addr !13804
  %or.cond = icmp eq i1 %2, %.not
  br i1 %or.cond, label %dec_label_pc_1e16e, label %dec_label_pc_1e167, !insn.addr !13805

dec_label_pc_1e167:                               ; preds = %dec_label_pc_1e160
  ret void, !insn.addr !13806

dec_label_pc_1e16e:                               ; preds = %dec_label_pc_1e160
  store i64 0, i64* @global_var_36fc0, align 8, !insn.addr !13807
  store i64 0, i64* @global_var_36fc8, align 8, !insn.addr !13808
  ret void, !insn.addr !13808
}

define i32 @nmi_get_tick(i64 %pPrivate) local_unnamed_addr {
dec_label_pc_1e185:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = trunc i64 %0 to i32
  ret i32 %1
}

define i64 @nmi_delay.87(i64 %arg1, i64* %arg2) local_unnamed_addr {
dec_label_pc_1e190:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = call i64 @mcount(), !insn.addr !13809
  %2 = urem i64 %0, 256, !insn.addr !13810
  %3 = mul nuw nsw i64 %2, 184, !insn.addr !13810
  %4 = inttoptr i64 %3 to i64*, !insn.addr !13811
  %5 = load i64, i64* %4, align 8, !insn.addr !13811
  ret i64 %5, !insn.addr !13812
}

define i16 @nmi_log10(i64 %x) local_unnamed_addr {
dec_label_pc_1e1ad:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = trunc i64 %0 to i16, !insn.addr !13813
  ret i16 %1, !insn.addr !13813
}

define i64 @nmi_get_tick.88(i64 %arg1) local_unnamed_addr {
dec_label_pc_1e1b5:
  %0 = call i64 @mcount(), !insn.addr !13814
  ret i64 0, !insn.addr !13815
}

define i64 @nmi_log10.264(i64 %arg1) local_unnamed_addr {
dec_label_pc_1e1dd:
  %0 = call i64 @mcount(), !insn.addr !13816
  %1 = icmp ult i64 %arg1, 256
  br i1 %1, label %dec_label_pc_1e1ef, label %dec_label_pc_1e200, !insn.addr !13817

dec_label_pc_1e1ef:                               ; preds = %dec_label_pc_1e1dd
  %2 = urem i64 %arg1, 256, !insn.addr !13818
  %3 = add nuw nsw i64 %2, 4294966936, !insn.addr !13818
  ret i64 %3, !insn.addr !13819

dec_label_pc_1e200:                               ; preds = %dec_label_pc_1e1dd
  %4 = icmp ult i64 %arg1, 512
  br i1 %4, label %dec_label_pc_1e209, label %dec_label_pc_1e21d, !insn.addr !13820

dec_label_pc_1e209:                               ; preds = %dec_label_pc_1e200
  %5 = lshr i64 %arg1, ptrtoint (i32* @global_var_1 to i64), !insn.addr !13821
  %6 = inttoptr i64 %5 to i8*, !insn.addr !13822
  %7 = load i8, i8* %6, align 1, !insn.addr !13822
  %8 = zext i8 %7 to i64, !insn.addr !13823
  %9 = add nuw nsw i64 %8, 4294966960, !insn.addr !13823
  ret i64 %9, !insn.addr !13824

dec_label_pc_1e21d:                               ; preds = %dec_label_pc_1e200
  %10 = icmp ult i64 %arg1, 1024
  br i1 %10, label %dec_label_pc_1e226, label %dec_label_pc_1e23b, !insn.addr !13825

dec_label_pc_1e226:                               ; preds = %dec_label_pc_1e21d
  %11 = lshr i64 %arg1, ptrtoint (i32* @global_var_2 to i64), !insn.addr !13826
  %12 = inttoptr i64 %11 to i8*, !insn.addr !13827
  %13 = load i8, i8* %12, align 1, !insn.addr !13827
  %14 = zext i8 %13 to i64, !insn.addr !13828
  %15 = add nuw nsw i64 %14, 4294966984, !insn.addr !13828
  ret i64 %15, !insn.addr !13829

dec_label_pc_1e23b:                               ; preds = %dec_label_pc_1e21d
  %16 = icmp ult i64 %arg1, 2048
  br i1 %16, label %dec_label_pc_1e244, label %dec_label_pc_1e259, !insn.addr !13830

dec_label_pc_1e244:                               ; preds = %dec_label_pc_1e23b
  %17 = lshr i64 %arg1, ptrtoint (i8** @global_var_3 to i64), !insn.addr !13831
  %18 = inttoptr i64 %17 to i8*, !insn.addr !13832
  %19 = load i8, i8* %18, align 1, !insn.addr !13832
  %20 = zext i8 %19 to i64, !insn.addr !13833
  %21 = add nuw nsw i64 %20, 4294967008, !insn.addr !13833
  ret i64 %21, !insn.addr !13834

dec_label_pc_1e259:                               ; preds = %dec_label_pc_1e23b
  %22 = icmp ugt i64 %arg1, ptrtoint (i32* @global_var_fff to i64)
  br i1 %22, label %dec_label_pc_1e277, label %dec_label_pc_1e262, !insn.addr !13835

dec_label_pc_1e262:                               ; preds = %dec_label_pc_1e259
  %23 = lshr i64 %arg1, ptrtoint (i16* @global_var_4 to i64), !insn.addr !13836
  %24 = inttoptr i64 %23 to i8*, !insn.addr !13837
  %25 = load i8, i8* %24, align 1, !insn.addr !13837
  %26 = zext i8 %25 to i64, !insn.addr !13838
  %27 = add nuw nsw i64 %26, 4294967032, !insn.addr !13838
  ret i64 %27, !insn.addr !13839

dec_label_pc_1e277:                               ; preds = %dec_label_pc_1e259
  %28 = icmp ult i64 %arg1, 8192
  br i1 %28, label %dec_label_pc_1e280, label %dec_label_pc_1e295, !insn.addr !13840

dec_label_pc_1e280:                               ; preds = %dec_label_pc_1e277
  %29 = lshr i64 %arg1, ptrtoint (i8* @global_var_5 to i64), !insn.addr !13841
  %30 = inttoptr i64 %29 to i8*, !insn.addr !13842
  %31 = load i8, i8* %30, align 1, !insn.addr !13842
  %32 = zext i8 %31 to i64, !insn.addr !13843
  %33 = add nuw nsw i64 %32, 4294967056, !insn.addr !13843
  %34 = and i64 %33, 4294967295, !insn.addr !13843
  ret i64 %34, !insn.addr !13844

dec_label_pc_1e295:                               ; preds = %dec_label_pc_1e277
  %35 = icmp ult i64 %arg1, 16384
  br i1 %35, label %dec_label_pc_1e29e, label %dec_label_pc_1e2b3, !insn.addr !13845

dec_label_pc_1e29e:                               ; preds = %dec_label_pc_1e295
  %36 = lshr i64 %arg1, ptrtoint (i8* @global_var_6 to i64), !insn.addr !13846
  %37 = inttoptr i64 %36 to i8*, !insn.addr !13847
  %38 = load i8, i8* %37, align 1, !insn.addr !13847
  %39 = zext i8 %38 to i64, !insn.addr !13848
  %40 = add nuw nsw i64 %39, 4294967080, !insn.addr !13848
  %41 = and i64 %40, 4294967295, !insn.addr !13848
  ret i64 %41, !insn.addr !13849

dec_label_pc_1e2b3:                               ; preds = %dec_label_pc_1e295
  %42 = icmp ult i64 %arg1, 32768
  br i1 %42, label %dec_label_pc_1e2bc, label %dec_label_pc_1e2d1, !insn.addr !13850

dec_label_pc_1e2bc:                               ; preds = %dec_label_pc_1e2b3
  %43 = lshr i64 %arg1, ptrtoint (i8** @global_var_7 to i64), !insn.addr !13851
  %44 = inttoptr i64 %43 to i8*, !insn.addr !13852
  %45 = load i8, i8* %44, align 1, !insn.addr !13852
  %46 = zext i8 %45 to i64, !insn.addr !13853
  %47 = add nuw nsw i64 %46, 4294967104, !insn.addr !13853
  %48 = and i64 %47, 4294967295, !insn.addr !13853
  ret i64 %48, !insn.addr !13854

dec_label_pc_1e2d1:                               ; preds = %dec_label_pc_1e2b3
  %49 = icmp ult i64 %arg1, 65536
  br i1 %49, label %dec_label_pc_1e2da, label %dec_label_pc_1e2ef, !insn.addr !13855

dec_label_pc_1e2da:                               ; preds = %dec_label_pc_1e2d1
  %50 = lshr i64 %arg1, ptrtoint (i8* @global_var_8 to i64), !insn.addr !13856
  %51 = inttoptr i64 %50 to i8*, !insn.addr !13857
  %52 = load i8, i8* %51, align 1, !insn.addr !13857
  %53 = zext i8 %52 to i64, !insn.addr !13858
  %54 = add nuw nsw i64 %53, 4294967128, !insn.addr !13858
  %55 = and i64 %54, 4294967295, !insn.addr !13858
  ret i64 %55, !insn.addr !13859

dec_label_pc_1e2ef:                               ; preds = %dec_label_pc_1e2d1
  %56 = icmp ult i64 %arg1, 131072
  br i1 %56, label %dec_label_pc_1e2f8, label %dec_label_pc_1e30d, !insn.addr !13860

dec_label_pc_1e2f8:                               ; preds = %dec_label_pc_1e2ef
  %57 = lshr i64 %arg1, ptrtoint (i8** @global_var_9 to i64), !insn.addr !13861
  %58 = inttoptr i64 %57 to i8*, !insn.addr !13862
  %59 = load i8, i8* %58, align 1, !insn.addr !13862
  %60 = zext i8 %59 to i64, !insn.addr !13863
  %61 = add nuw nsw i64 %60, 4294967152, !insn.addr !13863
  %62 = and i64 %61, 4294967295, !insn.addr !13863
  ret i64 %62, !insn.addr !13864

dec_label_pc_1e30d:                               ; preds = %dec_label_pc_1e2ef
  %63 = icmp ult i64 %arg1, 262144
  br i1 %63, label %dec_label_pc_1e316, label %dec_label_pc_1e329, !insn.addr !13865

dec_label_pc_1e316:                               ; preds = %dec_label_pc_1e30d
  %64 = lshr i64 %arg1, ptrtoint (i8* @global_var_a to i64), !insn.addr !13866
  %65 = inttoptr i64 %64 to i8*, !insn.addr !13867
  %66 = load i8, i8* %65, align 1, !insn.addr !13867
  %67 = zext i8 %66 to i64, !insn.addr !13868
  %68 = add nuw nsw i64 %67, 4294967176, !insn.addr !13868
  %69 = and i64 %68, 4294967295, !insn.addr !13868
  ret i64 %69, !insn.addr !13869

dec_label_pc_1e329:                               ; preds = %dec_label_pc_1e30d
  %70 = icmp ult i64 %arg1, 524288
  br i1 %70, label %dec_label_pc_1e332, label %dec_label_pc_1e345, !insn.addr !13870

dec_label_pc_1e332:                               ; preds = %dec_label_pc_1e329
  %71 = lshr i64 %arg1, ptrtoint (i8** @global_var_b to i64), !insn.addr !13871
  %72 = inttoptr i64 %71 to i8*, !insn.addr !13872
  %73 = load i8, i8* %72, align 1, !insn.addr !13872
  %74 = zext i8 %73 to i64, !insn.addr !13873
  %75 = add nuw nsw i64 %74, 4294967200, !insn.addr !13873
  %76 = and i64 %75, 4294967295, !insn.addr !13873
  ret i64 %76, !insn.addr !13874

dec_label_pc_1e345:                               ; preds = %dec_label_pc_1e329
  %77 = icmp ult i64 %arg1, 1048576
  br i1 %77, label %dec_label_pc_1e34e, label %dec_label_pc_1e361, !insn.addr !13875

dec_label_pc_1e34e:                               ; preds = %dec_label_pc_1e345
  %78 = lshr i64 %arg1, ptrtoint ([4 x i8]* @global_var_c to i64), !insn.addr !13876
  %79 = inttoptr i64 %78 to i8*, !insn.addr !13877
  %80 = load i8, i8* %79, align 1, !insn.addr !13877
  %81 = zext i8 %80 to i64, !insn.addr !13878
  %82 = add nuw nsw i64 %81, 4294967224, !insn.addr !13878
  %83 = and i64 %82, 4294967295, !insn.addr !13878
  ret i64 %83, !insn.addr !13879

dec_label_pc_1e361:                               ; preds = %dec_label_pc_1e345
  %84 = icmp ult i64 %arg1, 2097152
  br i1 %84, label %dec_label_pc_1e36a, label %dec_label_pc_1e37d, !insn.addr !13880

dec_label_pc_1e36a:                               ; preds = %dec_label_pc_1e361
  %85 = lshr i64 %arg1, ptrtoint ([3 x i8]* @global_var_d to i64), !insn.addr !13881
  %86 = inttoptr i64 %85 to i8*, !insn.addr !13882
  %87 = load i8, i8* %86, align 1, !insn.addr !13882
  %88 = zext i8 %87 to i64, !insn.addr !13883
  %89 = add nuw nsw i64 %88, 4294967248, !insn.addr !13883
  %90 = and i64 %89, 4294967295, !insn.addr !13883
  ret i64 %90, !insn.addr !13884

dec_label_pc_1e37d:                               ; preds = %dec_label_pc_1e361
  %91 = icmp ult i64 %arg1, 4194304
  br i1 %91, label %dec_label_pc_1e386, label %dec_label_pc_1e399, !insn.addr !13885

dec_label_pc_1e386:                               ; preds = %dec_label_pc_1e37d
  %92 = lshr i64 %arg1, ptrtoint (i16** @global_var_e to i64), !insn.addr !13886
  %93 = inttoptr i64 %92 to i8*, !insn.addr !13887
  %94 = load i8, i8* %93, align 1, !insn.addr !13887
  %95 = zext i8 %94 to i64, !insn.addr !13888
  %96 = sub nsw i64 %95, zext (i32 ptrtoint (i32** @global_var_18 to i32) to i64), !insn.addr !13888
  %97 = and i64 %96, 4294967295, !insn.addr !13888
  ret i64 %97, !insn.addr !13889

dec_label_pc_1e399:                               ; preds = %dec_label_pc_1e37d
  %98 = icmp ult i64 %arg1, 8388608
  br i1 %98, label %dec_label_pc_1e3a2, label %dec_label_pc_1e3b2, !insn.addr !13890

dec_label_pc_1e3a2:                               ; preds = %dec_label_pc_1e399
  %99 = lshr i64 %arg1, ptrtoint (i8* @global_var_f to i64), !insn.addr !13891
  %100 = inttoptr i64 %99 to i8*, !insn.addr !13892
  %101 = load i8, i8* %100, align 1, !insn.addr !13892
  %102 = zext i8 %101 to i64, !insn.addr !13892
  ret i64 %102, !insn.addr !13893

dec_label_pc_1e3b2:                               ; preds = %dec_label_pc_1e399
  %103 = icmp ult i64 %arg1, 16777216
  br i1 %103, label %dec_label_pc_1e3bb, label %dec_label_pc_1e3ce, !insn.addr !13894

dec_label_pc_1e3bb:                               ; preds = %dec_label_pc_1e3b2
  %104 = lshr i64 %arg1, ptrtoint (i8* @global_var_10 to i64), !insn.addr !13895
  %105 = inttoptr i64 %104 to i8*, !insn.addr !13896
  %106 = load i8, i8* %105, align 1, !insn.addr !13896
  %107 = zext i8 %106 to i64, !insn.addr !13897
  %108 = add nuw nsw i64 %107, zext (i32 ptrtoint (i32** @global_var_18 to i32) to i64), !insn.addr !13897
  %109 = and i64 %108, 4294967295, !insn.addr !13897
  ret i64 %109, !insn.addr !13898

dec_label_pc_1e3ce:                               ; preds = %dec_label_pc_1e3b2
  %110 = icmp ult i64 %arg1, 33554432
  br i1 %110, label %dec_label_pc_1e3d7, label %dec_label_pc_1e3ea, !insn.addr !13899

dec_label_pc_1e3d7:                               ; preds = %dec_label_pc_1e3ce
  %111 = lshr i64 %arg1, ptrtoint (i8** @global_var_11 to i64), !insn.addr !13900
  %112 = inttoptr i64 %111 to i8*, !insn.addr !13901
  %113 = load i8, i8* %112, align 1, !insn.addr !13901
  %114 = zext i8 %113 to i64, !insn.addr !13902
  %115 = add nuw nsw i64 %114, 48, !insn.addr !13902
  ret i64 %115, !insn.addr !13903

dec_label_pc_1e3ea:                               ; preds = %dec_label_pc_1e3ce
  %116 = icmp ult i64 %arg1, 67108864
  br i1 %116, label %dec_label_pc_1e3f3, label %dec_label_pc_1e406, !insn.addr !13904

dec_label_pc_1e3f3:                               ; preds = %dec_label_pc_1e3ea
  %117 = lshr i64 %arg1, ptrtoint (i32** @global_var_12 to i64), !insn.addr !13905
  %118 = inttoptr i64 %117 to i8*, !insn.addr !13906
  %119 = load i8, i8* %118, align 1, !insn.addr !13906
  %120 = zext i8 %119 to i64, !insn.addr !13907
  %121 = add nuw nsw i64 %120, 72, !insn.addr !13907
  ret i64 %121, !insn.addr !13908

dec_label_pc_1e406:                               ; preds = %dec_label_pc_1e3ea
  %122 = icmp ult i64 %arg1, 134217728
  br i1 %122, label %dec_label_pc_1e40f, label %dec_label_pc_1e41f, !insn.addr !13909

dec_label_pc_1e40f:                               ; preds = %dec_label_pc_1e406
  %123 = lshr i64 %arg1, ptrtoint (i32** @global_var_13 to i64), !insn.addr !13910
  %124 = inttoptr i64 %123 to i8*, !insn.addr !13911
  %125 = load i8, i8* %124, align 1, !insn.addr !13911
  %126 = zext i8 %125 to i64, !insn.addr !13912
  %127 = add nuw nsw i64 %126, 96, !insn.addr !13912
  ret i64 %127, !insn.addr !13913

dec_label_pc_1e41f:                               ; preds = %dec_label_pc_1e406
  %128 = icmp ult i64 %arg1, 268435456
  br i1 %128, label %dec_label_pc_1e428, label %dec_label_pc_1e438, !insn.addr !13914

dec_label_pc_1e428:                               ; preds = %dec_label_pc_1e41f
  %129 = lshr i64 %arg1, ptrtoint (i32** @global_var_14 to i64), !insn.addr !13915
  %130 = inttoptr i64 %129 to i8*, !insn.addr !13916
  %131 = load i8, i8* %130, align 1, !insn.addr !13916
  %132 = zext i8 %131 to i64, !insn.addr !13917
  %133 = add nuw nsw i64 %132, 120, !insn.addr !13917
  ret i64 %133, !insn.addr !13918

dec_label_pc_1e438:                               ; preds = %dec_label_pc_1e41f
  %134 = icmp ult i64 %arg1, 536870912
  br i1 %134, label %dec_label_pc_1e441, label %dec_label_pc_1e453, !insn.addr !13919

dec_label_pc_1e441:                               ; preds = %dec_label_pc_1e438
  %135 = lshr i64 %arg1, ptrtoint (i8** @global_var_15 to i64), !insn.addr !13920
  %136 = inttoptr i64 %135 to i8*, !insn.addr !13921
  %137 = load i8, i8* %136, align 1, !insn.addr !13921
  %138 = zext i8 %137 to i64, !insn.addr !13922
  %139 = add nuw nsw i64 %138, 144, !insn.addr !13922
  ret i64 %139, !insn.addr !13923

dec_label_pc_1e453:                               ; preds = %dec_label_pc_1e438
  %140 = lshr i64 %arg1, ptrtoint (i32** @global_var_16 to i64), !insn.addr !13924
  %141 = inttoptr i64 %140 to i8*, !insn.addr !13925
  %142 = load i8, i8* %141, align 1, !insn.addr !13925
  %143 = zext i8 %142 to i64, !insn.addr !13925
  ret i64 %143, !insn.addr !13925
}

define void @nm131_fm_set_scan_level(i64 %pPrivate, i32 %level) local_unnamed_addr {
dec_label_pc_1e46b:
  ret void, !insn.addr !13926
}

define void @nm131_fm_get_window_rssi(i32* %orssi, i32 %len, i32* %wrssi, i32* %overth) local_unnamed_addr {
dec_label_pc_1e486:
  %rdi = alloca i64, align 8
  %0 = call i64 @__decompiler_undefined_function_0()
  %rax = alloca i64, align 8
  %1 = call i64 @__decompiler_undefined_function_0()
  %2 = ptrtoint i32* %overth to i64
  %3 = ptrtoint i32* %wrssi to i64
  %4 = trunc i64 %0 to i8, !insn.addr !13927
  %5 = lshr i64 %2, ptrtoint (i8* @global_var_8 to i64), !insn.addr !13927
  %6 = trunc i64 %5 to i8, !insn.addr !13927
  %7 = sub i8 0, %4
  %8 = sub i8 %7, 1
  %9 = icmp ult i8 %8, %6, !insn.addr !13927
  %10 = add i64 %1, -63, !insn.addr !13928
  %11 = inttoptr i64 %10 to i8*, !insn.addr !13928
  %12 = load i8, i8* %11, align 1, !insn.addr !13928
  %13 = trunc i64 %2 to i8, !insn.addr !13928
  %14 = zext i1 %9 to i8, !insn.addr !13928
  %15 = add i8 %12, %13, !insn.addr !13928
  %16 = add i8 %15, %14, !insn.addr !13928
  %17 = icmp ule i8 %16, %12, !insn.addr !13928
  %18 = icmp ult i8 %15, %12, !insn.addr !13928
  %19 = select i1 %9, i1 %17, i1 %18, !insn.addr !13928
  store i8 %16, i8* %11, align 1, !insn.addr !13928
  %20 = trunc i64 %3 to i16, !insn.addr !13929
  %21 = load i64, i64* %rax, align 8
  %22 = trunc i64 %21 to i32, !insn.addr !13929
  call void @__asm_out(i16 %20, i32 %22), !insn.addr !13929
  %23 = bitcast i64* %rdi to i8*
  %24 = load i8, i8* %23, align 8, !insn.addr !13930
  %.neg1 = sext i1 %19 to i8
  %.neg2 = sub i8 %24, %13, !insn.addr !13930
  %25 = add i8 %.neg2, %.neg1, !insn.addr !13930
  %26 = bitcast i32* %orssi to i8*, !insn.addr !13930
  store i8 %25, i8* %26, align 1, !insn.addr !13930
  %27 = bitcast i64* %rax to i8*
  %28 = trunc i64 %21 to i8
  %29 = mul i8 %28, 2, !insn.addr !13931
  %30 = inttoptr i64 %21 to i8*, !insn.addr !13931
  store i8 %29, i8* %30, align 1, !insn.addr !13931
  %31 = load i8, i8* %27, align 8, !insn.addr !13932
  %32 = load i64, i64* %rax, align 8
  %33 = trunc i64 %32 to i8, !insn.addr !13932
  %34 = add i8 %31, %33, !insn.addr !13932
  %35 = inttoptr i64 %32 to i8*, !insn.addr !13932
  store i8 %34, i8* %35, align 1, !insn.addr !13932
  ret void, !insn.addr !13933
}

define i64 @nm131_fm_set_scan_level.89(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_1e49b:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = call i64 @mcount(), !insn.addr !13934
  %2 = urem i64 %0, 256, !insn.addr !13935
  %3 = mul nuw nsw i64 %2, 184, !insn.addr !13935
  %4 = trunc i64 %arg2 to i32, !insn.addr !13936
  %5 = inttoptr i64 %3 to i32*, !insn.addr !13936
  store i32 %4, i32* %5, align 8, !insn.addr !13936
  ret i64 %3, !insn.addr !13937
}

define i64 @nm131_fm_get_window_rssi.90(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4) local_unnamed_addr {
dec_label_pc_1e4b6:
  %.reg2mem = alloca i64, !insn.addr !13938
  %rdi = alloca i64, align 8
  store i64 %arg1, i64* %rdi, align 8
  %0 = call i64 @mcount(), !insn.addr !13939
  %1 = add i64 %arg2, 4294967295, !insn.addr !13940
  %2 = and i64 %1, 4294967295, !insn.addr !13940
  %3 = mul i64 %2, ptrtoint (i16* @global_var_4 to i64), !insn.addr !13941
  %4 = add i64 %3, ptrtoint (i16* @global_var_4 to i64), !insn.addr !13941
  %5 = inttoptr i64 %arg1 to i32*, !insn.addr !13942
  %6 = load i32, i32* %5, align 4, !insn.addr !13942
  %7 = ashr i32 %6, ptrtoint (i8* @global_var_8 to i32), !insn.addr !13943
  %8 = inttoptr i64 %arg4 to i32*, !insn.addr !13944
  store i32 %7, i32* %8, align 4, !insn.addr !13944
  %9 = load i64, i64* %rdi, align 8, !insn.addr !13945
  %10 = inttoptr i64 %9 to i32*, !insn.addr !13945
  %11 = load i32, i32* %10, align 4, !insn.addr !13945
  %12 = urem i32 %11, 256, !insn.addr !13945
  store i32 %12, i32* %10, align 4, !insn.addr !13945
  %13 = icmp eq i64 %3, 0, !insn.addr !13946
  %14 = icmp eq i1 %13, false, !insn.addr !13947
  store i64 ptrtoint (i16* @global_var_4 to i64), i64* %.reg2mem, !insn.addr !13947
  br i1 %14, label %dec_label_pc_1e4e1.dec_label_pc_1e4e1_crit_edge, label %dec_label_pc_1e52b, !insn.addr !13947

dec_label_pc_1e4e1.dec_label_pc_1e4e1_crit_edge:  ; preds = %dec_label_pc_1e4b6, %dec_label_pc_1e4e1.dec_label_pc_1e4e1_crit_edge
  %.reload = load i64, i64* %.reg2mem
  %.pre = load i64, i64* %rdi, align 8
  %15 = mul i64 %.reload, ptrtoint (i32* @global_var_1 to i64), !insn.addr !13942
  %16 = add i64 %15, %.pre, !insn.addr !13942
  %17 = inttoptr i64 %16 to i32*, !insn.addr !13942
  %18 = load i32, i32* %17, align 4, !insn.addr !13942
  %19 = ashr i32 %18, ptrtoint (i8* @global_var_8 to i32), !insn.addr !13943
  %20 = add i64 %15, %arg4, !insn.addr !13944
  %21 = inttoptr i64 %20 to i32*, !insn.addr !13944
  store i32 %19, i32* %21, align 4, !insn.addr !13944
  %22 = load i64, i64* %rdi, align 8, !insn.addr !13945
  %23 = add i64 %22, %15, !insn.addr !13945
  %24 = inttoptr i64 %23 to i32*, !insn.addr !13945
  %25 = load i32, i32* %24, align 4, !insn.addr !13945
  %26 = urem i32 %25, 256, !insn.addr !13945
  store i32 %26, i32* %24, align 4, !insn.addr !13945
  %27 = add i64 %.reload, ptrtoint (i16* @global_var_4 to i64), !insn.addr !13948
  %28 = icmp eq i64 %27, %4, !insn.addr !13946
  %29 = icmp eq i1 %28, false, !insn.addr !13947
  store i64 %27, i64* %.reg2mem, !insn.addr !13947
  br i1 %29, label %dec_label_pc_1e4e1.dec_label_pc_1e4e1_crit_edge, label %dec_label_pc_1e52b, !insn.addr !13947

dec_label_pc_1e52b:                               ; preds = %dec_label_pc_1e4e1.dec_label_pc_1e4e1_crit_edge, %dec_label_pc_1e4b6
  %30 = bitcast i64* %rdi to i32*
  %31 = load i32, i32* %30, align 8, !insn.addr !13949
  %32 = mul i32 %31, 2, !insn.addr !13950
  %33 = load i64, i64* %rdi, align 8, !insn.addr !13951
  %34 = add i64 %33, ptrtoint (i16* @global_var_4 to i64), !insn.addr !13951
  %35 = inttoptr i64 %34 to i32*, !insn.addr !13951
  %36 = load i32, i32* %35, align 4, !insn.addr !13951
  %37 = add i32 %36, %32, !insn.addr !13951
  %38 = zext i32 %37 to i64, !insn.addr !13951
  %39 = inttoptr i64 %arg3 to i32*, !insn.addr !13952
  store i32 %37, i32* %39, align 4, !insn.addr !13952
  ret i64 %38, !insn.addr !13953
}

define void @nm131_fm_select_channel_list(i64 %pPrivate, i32* %orssi, i32* %wrssi, i32* %clist, i32* %nc, i32 %cmax, i32 %clen, i32* %overth) local_unnamed_addr {
dec_label_pc_1e555:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = call i64 @__decompiler_undefined_function_0()
  %2 = ptrtoint i32* %nc to i64
  %3 = ptrtoint i32* %clist to i64
  %4 = add i64 %1, 65, !insn.addr !13954
  %5 = urem i64 %4, 256, !insn.addr !13954
  %6 = and i64 %1, -256, !insn.addr !13954
  %7 = or i64 %5, %6, !insn.addr !13954
  %8 = trunc i64 %7 to i32, !insn.addr !13955
  %9 = add i64 %7, %3, !insn.addr !13955
  %10 = inttoptr i64 %9 to i32*, !insn.addr !13955
  store i32 %8, i32* %10, align 4, !insn.addr !13955
  %11 = mul i64 %3, ptrtoint (i32* @global_var_1 to i64), !insn.addr !13956
  %12 = add i64 %11, %2, !insn.addr !13956
  %13 = inttoptr i64 %12 to i32*, !insn.addr !13956
  %14 = load i32, i32* %13, align 4, !insn.addr !13956
  %sext = mul i64 %0, 4294967296
  %15 = sdiv i64 %sext, 4294967296, !insn.addr !13957
  %16 = sext i32 %14 to i64, !insn.addr !13957
  %17 = mul nsw i64 %15, %16, !insn.addr !13957
  %18 = lshr i64 %17, ptrtoint (i32** @global_var_20 to i64), !insn.addr !13957
  %19 = trunc i64 %18 to i32, !insn.addr !13957
  %20 = ashr i32 %14, ptrtoint (i8** @global_var_1f to i32), !insn.addr !13958
  %21 = sub i32 %19, %20, !insn.addr !13959
  store i32 %21, i32* %13, align 4, !insn.addr !13960
  ret void, !insn.addr !13961
}

define i64 @nm131_fm_select_channel_list.91(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4, i64 %arg5, i64 %arg6, i32 %arg7) local_unnamed_addr {
dec_label_pc_1e585:
  %0 = call i64 @mcount(), !insn.addr !13962
  %1 = zext i32 %arg7 to i64, !insn.addr !13963
  ret i64 %1, !insn.addr !13964
}

define i32 @nm131_fm_seek_select(i32* %rssi, i32* %overth, i32 %sz) local_unnamed_addr {
dec_label_pc_1e7d1:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = trunc i64 %0 to i32, !insn.addr !13965
  ret i32 %1, !insn.addr !13965
}

define i64 @nm131_fm_seek_select.92(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4, i64 %arg5) local_unnamed_addr {
dec_label_pc_1e801:
  %rax.0.reg2mem = alloca i64, !insn.addr !13966
  %0 = call i64 @mcount(), !insn.addr !13967
  %1 = trunc i64 %arg3 to i32, !insn.addr !13968
  %2 = icmp eq i32 %1, ptrtoint (i8** @global_var_7 to i32), !insn.addr !13968
  %3 = icmp eq i1 %2, false, !insn.addr !13969
  br i1 %3, label %dec_label_pc_1e869, label %dec_label_pc_1e80f, !insn.addr !13969

dec_label_pc_1e80f:                               ; preds = %dec_label_pc_1e801
  %4 = add i64 %arg2, ptrtoint ([4 x i8]* @global_var_c to i64), !insn.addr !13970
  %5 = inttoptr i64 %4 to i32*, !insn.addr !13970
  %6 = load i32, i32* %5, align 4, !insn.addr !13970
  %7 = mul i32 %6, 2, !insn.addr !13971
  %8 = add i64 %arg2, ptrtoint (i32** @global_var_14 to i64), !insn.addr !13972
  %9 = inttoptr i64 %8 to i32*, !insn.addr !13972
  %10 = load i32, i32* %9, align 4, !insn.addr !13972
  %11 = icmp slt i32 %10, %7, !insn.addr !13973
  store i64 0, i64* %rax.0.reg2mem, !insn.addr !13973
  br i1 %11, label %dec_label_pc_1e83d, label %dec_label_pc_1e834, !insn.addr !13973

dec_label_pc_1e834:                               ; preds = %dec_label_pc_1e80f
  %12 = add i64 %arg2, ptrtoint (i8* @global_var_10 to i64), !insn.addr !13974
  %13 = inttoptr i64 %12 to i32*, !insn.addr !13974
  %14 = load i32, i32* %13, align 4, !insn.addr !13974
  %15 = sub i32 %7, %14, !insn.addr !13974
  %16 = xor i32 %14, %7, !insn.addr !13974
  %17 = xor i32 %15, %7, !insn.addr !13974
  %18 = and i32 %17, %16, !insn.addr !13974
  %19 = icmp slt i32 %18, 0, !insn.addr !13974
  %20 = icmp eq i32 %15, 0, !insn.addr !13974
  %21 = icmp slt i32 %15, 0, !insn.addr !13974
  %22 = icmp ne i1 %21, %19, !insn.addr !13975
  %23 = or i1 %20, %22, !insn.addr !13975
  %24 = zext i1 %23 to i64, !insn.addr !13976
  store i64 %24, i64* %rax.0.reg2mem, !insn.addr !13976
  br label %dec_label_pc_1e83d, !insn.addr !13976

dec_label_pc_1e83d:                               ; preds = %dec_label_pc_1e834, %dec_label_pc_1e80f
  %rax.0.reload = load i64, i64* %rax.0.reg2mem
  ret i64 %rax.0.reload, !insn.addr !13977

dec_label_pc_1e869:                               ; preds = %dec_label_pc_1e801
  %25 = add i64 %arg2, ptrtoint (i8* @global_var_8 to i64), !insn.addr !13978
  %26 = inttoptr i64 %25 to i32*, !insn.addr !13978
  %27 = load i32, i32* %26, align 4, !insn.addr !13978
  %28 = mul i32 %27, 2, !insn.addr !13979
  %29 = add i64 %arg2, ptrtoint ([4 x i8]* @global_var_c to i64), !insn.addr !13980
  %30 = inttoptr i64 %29 to i32*, !insn.addr !13980
  %31 = load i32, i32* %30, align 4, !insn.addr !13980
  %32 = sub i32 %28, %31, !insn.addr !13980
  %33 = xor i32 %28, %31, !insn.addr !13980
  %34 = xor i32 %32, %28, !insn.addr !13980
  %35 = and i32 %34, %33, !insn.addr !13980
  %36 = icmp slt i32 %35, 0, !insn.addr !13980
  %37 = icmp eq i32 %32, 0, !insn.addr !13980
  %38 = icmp slt i32 %32, 0, !insn.addr !13980
  %39 = icmp ne i1 %38, %36, !insn.addr !13981
  %40 = or i1 %37, %39, !insn.addr !13981
  %41 = zext i1 %40 to i64, !insn.addr !13982
  ret i64 %41, !insn.addr !13983
}

define void @nm131_set_scan_level(i64 %pPrivate, i32 %level) local_unnamed_addr {
dec_label_pc_1e894:
  ret void, !insn.addr !13984
}

define i64 @nm131_set_scan_level.352(i64 %arg1, i64* %arg2) local_unnamed_addr {
dec_label_pc_1e8c4:
  %0 = call i64 @mcount(), !insn.addr !13985
  ret i64 %0, !insn.addr !13986
}

define i64 @function_1e8df() local_unnamed_addr {
dec_label_pc_1e8df:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = urem i64 %0, 256, !insn.addr !13987
  %2 = mul nuw nsw i64 %1, 184, !insn.addr !13987
  %3 = inttoptr i64 %2 to i16*, !insn.addr !13988
  store i16 65, i16* %3, align 8, !insn.addr !13988
  ret i64 %2, !insn.addr !13989
}

define i64 @function_1e8f7() local_unnamed_addr {
dec_label_pc_1e8f7:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = urem i64 %0, 256, !insn.addr !13990
  %2 = mul nuw nsw i64 %1, 184, !insn.addr !13990
  %3 = inttoptr i64 %2 to i16*, !insn.addr !13991
  store i16 60, i16* %3, align 8, !insn.addr !13991
  ret i64 %2, !insn.addr !13992
}

define i64 @function_1e90c() local_unnamed_addr {
dec_label_pc_1e90c:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = urem i64 %0, 256, !insn.addr !13993
  %2 = mul nuw nsw i64 %1, 184, !insn.addr !13993
  %3 = inttoptr i64 %2 to i16*, !insn.addr !13994
  store i16 55, i16* %3, align 8, !insn.addr !13994
  ret i64 %2, !insn.addr !13995
}

define i64 @function_1e921() local_unnamed_addr {
dec_label_pc_1e921:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = urem i64 %0, 256, !insn.addr !13996
  %2 = mul nuw nsw i64 %1, 184, !insn.addr !13996
  %3 = inttoptr i64 %2 to i16*, !insn.addr !13997
  store i16 50, i16* %3, align 8, !insn.addr !13997
  ret i64 %2, !insn.addr !13998
}

define i64 @function_1e936() local_unnamed_addr {
dec_label_pc_1e936:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = urem i64 %0, 256, !insn.addr !13999
  %2 = mul nuw nsw i64 %1, 184, !insn.addr !13999
  %3 = inttoptr i64 %2 to i16*, !insn.addr !14000
  store i16 45, i16* %3, align 8, !insn.addr !14000
  ret i64 %2, !insn.addr !14001
}

define i64 @NMI131_GetTime() local_unnamed_addr {
dec_label_pc_1e95a:
  %rax = alloca i64, align 8
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = bitcast i64* %rax to i8*
  %2 = trunc i64 %0 to i8
  %3 = mul i8 %2, 2, !insn.addr !14002
  %4 = inttoptr i64 %0 to i8*, !insn.addr !14002
  store i8 %3, i8* %4, align 1, !insn.addr !14002
  %5 = load i8, i8* %1, align 8, !insn.addr !14003
  %6 = load i64, i64* %rax, align 8
  %7 = trunc i64 %6 to i8, !insn.addr !14003
  %8 = sub i8 %5, %7, !insn.addr !14003
  %9 = inttoptr i64 %6 to i8*, !insn.addr !14003
  store i8 %8, i8* %9, align 1, !insn.addr !14003
  %10 = load i64, i64* %rax, align 8, !insn.addr !14004
  ret i64 %10, !insn.addr !14004
}

define i32 @NMI131_GetReadBlockSize() local_unnamed_addr {
dec_label_pc_1e96c:
  %rax = alloca i64, align 8
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = bitcast i64* %rax to i8*
  %2 = trunc i64 %0 to i8
  %3 = inttoptr i64 %0 to i8*, !insn.addr !14005
  store i8 %2, i8* %3, align 1, !insn.addr !14005
  %4 = load i8, i8* %1, align 8, !insn.addr !14006
  %5 = load i64, i64* %rax, align 8
  %6 = trunc i64 %5 to i8, !insn.addr !14006
  %7 = add i8 %4, %6, !insn.addr !14006
  %8 = inttoptr i64 %5 to i8*, !insn.addr !14006
  store i8 %7, i8* %8, align 1, !insn.addr !14006
  %9 = load i64, i64* %rax, align 8, !insn.addr !14007
  %10 = trunc i64 %9 to i32
  ret i32 %10, !insn.addr !14008
}

define i32 @NMI131_GetWriteBlockSize() local_unnamed_addr {
dec_label_pc_1e97c:
  %0 = call i64 @__decompiler_undefined_function_0()
  %rax = alloca i64, align 8
  %1 = call i64 @__decompiler_undefined_function_0()
  %2 = bitcast i64* %rax to i8*
  %3 = trunc i64 %1 to i8
  %4 = mul i8 %3, 2, !insn.addr !14009
  %5 = inttoptr i64 %1 to i8*, !insn.addr !14009
  store i8 %4, i8* %5, align 1, !insn.addr !14009
  %6 = add i64 %0, -57, !insn.addr !14010
  %7 = inttoptr i64 %6 to i8*, !insn.addr !14010
  %8 = load i8, i8* %7, align 1, !insn.addr !14010
  %9 = load i64, i64* %rax, align 8, !insn.addr !14010
  %10 = lshr i64 %9, ptrtoint (i8* @global_var_8 to i64), !insn.addr !14010
  %11 = trunc i64 %10 to i8, !insn.addr !14010
  %12 = add i8 %8, %11, !insn.addr !14010
  store i8 %12, i8* %7, align 1, !insn.addr !14010
  %13 = load i8, i8* %2, align 8, !insn.addr !14011
  %14 = load i64, i64* %rax, align 8, !insn.addr !14011
  %15 = inttoptr i64 %14 to i8*, !insn.addr !14011
  store i8 %13, i8* %15, align 1, !insn.addr !14011
  %16 = load i8, i8* %2, align 8, !insn.addr !14012
  %17 = load i64, i64* %rax, align 8
  %18 = trunc i64 %17 to i8, !insn.addr !14012
  %19 = add i8 %16, %18, !insn.addr !14012
  %20 = inttoptr i64 %17 to i8*, !insn.addr !14012
  store i8 %19, i8* %20, align 1, !insn.addr !14012
  %21 = load i64, i64* %rax, align 8, !insn.addr !14012
  %22 = trunc i64 %21 to i32, !insn.addr !14012
  ret i32 %22, !insn.addr !14012
}

define i64 @NMI131_GetTime.217() local_unnamed_addr {
dec_label_pc_1e98a:
  %0 = call i64 @__decompiler_undefined_function_0()
  ret i64 %0, !insn.addr !14013
}

define void @NMI131_Log(i8* %pString) local_unnamed_addr {
dec_label_pc_1e98c:
  %0 = call i64 @mcount(), !insn.addr !14014
  ret void, !insn.addr !14014
}

define i8 @BLACKWIDOW_GetChipInfo(i64 %ptCommunication, i8** %ppcTunerString, i64* %pulChipVersion, i64* %pulChipId) local_unnamed_addr {
dec_label_pc_1e997:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = call i64 @__decompiler_undefined_function_0()
  %2 = trunc i64 %1 to i8, !insn.addr !14015
  %3 = trunc i64 %0 to i8
  %4 = add i8 %2, %3, !insn.addr !14015
  ret i8 %4, !insn.addr !14016
}

define i64 @NMI131_GetReadBlockSize.292() local_unnamed_addr {
dec_label_pc_1e99c:
  %0 = call i64 @mcount(), !insn.addr !14017
  ret i64 ptrtoint (i32** @global_var_20 to i64), !insn.addr !14018
}

define i64 @NMI131_GetWriteBlockSize.241() local_unnamed_addr {
dec_label_pc_1e9ac:
  %0 = call i64 @mcount(), !insn.addr !14019
  ret i64 ptrtoint (i32** @global_var_20 to i64), !insn.addr !14020
}

define i64 @NMI131_Log.385() local_unnamed_addr {
dec_label_pc_1e9bc:
  %0 = call i64 @mcount(), !insn.addr !14021
  ret i64 %0, !insn.addr !14022
}

define i64 @BLACKWIDOW_GetChipInfo.327(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4) local_unnamed_addr {
dec_label_pc_1e9c7:
  %stack_var_-48 = alloca i64, align 8
  %0 = call i64 @mcount(), !insn.addr !14023
  %1 = inttoptr i64 %arg4 to i64*, !insn.addr !14024
  store i64 0, i64* %1, align 8, !insn.addr !14024
  %2 = ptrtoint i64* %stack_var_-48 to i64, !insn.addr !14025
  ret i64 %2, !insn.addr !14026
}

define i8 @BLACKWIDOW_GetSelectedGainMode(i64 %ptCommunication, i32* %peGainMode, i32* %pePowerDetectValue) local_unnamed_addr {
dec_label_pc_1ea4e:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = call i64 @__decompiler_undefined_function_0()
  %2 = add i64 %1, -119, !insn.addr !14027
  %3 = inttoptr i64 %2 to i8*, !insn.addr !14027
  %4 = load i8, i8* %3, align 1, !insn.addr !14027
  %5 = trunc i64 %0 to i8, !insn.addr !14027
  %6 = add i8 %4, %5, !insn.addr !14027
  store i8 %6, i8* %3, align 1, !insn.addr !14027
  %7 = trunc i64 %1 to i8, !insn.addr !14027
  ret i8 %7, !insn.addr !14027
}

define i64 @function_1ea52() local_unnamed_addr {
dec_label_pc_1ea52:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = call i64 @__decompiler_undefined_function_0()
  %2 = call i64 @__decompiler_undefined_function_0()
  %3 = add i64 %1, -40, !insn.addr !14028
  %4 = inttoptr i64 %3 to i64*, !insn.addr !14028
  %5 = load i64, i64* %4, align 8, !insn.addr !14028
  %6 = inttoptr i64 %0 to i64*, !insn.addr !14029
  store i64 %5, i64* %6, align 8, !insn.addr !14029
  ret i64 %2, !insn.addr !14029
}

define i8 @BLACKWIDOW_GetPLLLockStatus(i64 %ptCommunication, i8* %pbPllLockStatus) local_unnamed_addr {
dec_label_pc_1ea72:
  %0 = call i64 @unknown_fffffffff06f75c4(), !insn.addr !14030
  %1 = trunc i64 %0 to i8, !insn.addr !14031
  ret i8 %1, !insn.addr !14031
}

define i64 @BLACKWIDOW_GetSelectedGainMode.240(i64 %arg1, i64 %arg2, i64 %arg3) local_unnamed_addr {
dec_label_pc_1ea7e:
  %0 = call i64 @mcount(), !insn.addr !14032
  %1 = add i64 %arg1, 40, !insn.addr !14033
  %2 = inttoptr i64 %1 to i64*, !insn.addr !14033
  %3 = load i64, i64* %2, align 8, !insn.addr !14033
  %4 = add i64 %3, 160, !insn.addr !14034
  %5 = inttoptr i64 %4 to i32*, !insn.addr !14034
  %6 = load i32, i32* %5, align 4, !insn.addr !14034
  %7 = inttoptr i64 %arg2 to i32*, !insn.addr !14035
  store i32 %6, i32* %7, align 4, !insn.addr !14035
  %8 = add i64 %3, 164, !insn.addr !14036
  %9 = inttoptr i64 %8 to i32*, !insn.addr !14036
  %10 = load i32, i32* %9, align 4, !insn.addr !14036
  %11 = inttoptr i64 %arg3 to i32*, !insn.addr !14037
  store i32 %10, i32* %11, align 4, !insn.addr !14037
  ret i64 ptrtoint (i32* @global_var_1 to i64), !insn.addr !14038
}

define i64 @BLACKWIDOW_GetPLLLockStatus.386(i64 %arg1, i64 %arg2, i64 %arg3) local_unnamed_addr {
dec_label_pc_1eaa2:
  %stack_var_-32 = alloca i64, align 8
  %0 = call i64 @mcount(), !insn.addr !14039
  %1 = ptrtoint i64* %stack_var_-32 to i64, !insn.addr !14040
  ret i64 %1, !insn.addr !14041
}

define i8 @BLACKWIDOW_GetPowerMode(i64 %ptCommunication, i32* %pePowerMode) local_unnamed_addr {
dec_label_pc_1ead9:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = call i64 @__decompiler_undefined_function_0()
  %2 = call i64 @__decompiler_undefined_function_0()
  %3 = trunc i64 %2 to i8
  %4 = mul i8 %3, 2, !insn.addr !14042
  %5 = inttoptr i64 %2 to i8*, !insn.addr !14042
  store i8 %4, i8* %5, align 1, !insn.addr !14042
  %6 = icmp eq i8 %3, 0, !insn.addr !14043
  br i1 %6, label %dec_label_pc_1eb02, label %dec_label_pc_1eafa, !insn.addr !14044

dec_label_pc_1eafa:                               ; preds = %dec_label_pc_1ead9
  %7 = add i64 %0, -24, !insn.addr !14045
  %8 = inttoptr i64 %7 to i64*, !insn.addr !14045
  %9 = load i64, i64* %8, align 8, !insn.addr !14045
  %10 = icmp eq i64 %9, ptrtoint (i32* @global_var_1 to i64), !insn.addr !14045
  %11 = zext i1 %10 to i8, !insn.addr !14046
  %12 = inttoptr i64 %1 to i8*, !insn.addr !14046
  store i8 %11, i8* %12, align 1, !insn.addr !14046
  br label %dec_label_pc_1eb02, !insn.addr !14046

dec_label_pc_1eb02:                               ; preds = %dec_label_pc_1eafa, %dec_label_pc_1ead9
  ret i8 %3, !insn.addr !14047
}

define i64 @BLACKWIDOW_GetPowerMode.195(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_1eb09:
  %stack_var_-64 = alloca i32, align 4
  %0 = call i64 @mcount(), !insn.addr !14048
  store i32 0, i32* %stack_var_-64, align 4, !insn.addr !14049
  %1 = inttoptr i64 %arg2 to i32*, !insn.addr !14050
  store i32 ptrtoint (i16* @global_var_4 to i32), i32* %1, align 4, !insn.addr !14050
  %2 = load i32, i32* %stack_var_-64, align 4
  %3 = urem i32 %2, 256
  %4 = zext i32 %3 to i64, !insn.addr !14051
  %5 = trunc i32 %2 to i8, !insn.addr !14052
  %6 = ptrtoint i32* %stack_var_-64 to i64, !insn.addr !14053
  %7 = trunc i64 %6 to i8, !insn.addr !14054
  %8 = icmp eq i8 %7, 0, !insn.addr !14054
  %9 = icmp eq i1 %8, false, !insn.addr !14055
  %10 = and i32 %2, 224
  %phitmp = zext i32 %10 to i64
  %storemerge = select i1 %9, i64 %phitmp, i64 0
  %11 = and i64 %4, 129
  %12 = icmp eq i64 %11, 129, !insn.addr !14056
  %13 = icmp eq i1 %12, false, !insn.addr !14057
  br i1 %13, label %dec_label_pc_1edc4, label %dec_label_pc_1ed5a, !insn.addr !14057

dec_label_pc_1ed5a:                               ; preds = %dec_label_pc_1eb09
  %14 = and i64 %4, 137
  %15 = icmp eq i64 %14, 137, !insn.addr !14058
  %16 = icmp eq i1 %15, false, !insn.addr !14059
  br i1 %16, label %dec_label_pc_1edc4, label %dec_label_pc_1ed6b, !insn.addr !14059

dec_label_pc_1ed6b:                               ; preds = %dec_label_pc_1ed5a
  %17 = and i64 %4, 174
  %18 = icmp eq i64 %17, 174, !insn.addr !14060
  %19 = icmp slt i8 %5, 0, !insn.addr !14061
  %20 = icmp eq i1 %19, %18
  br i1 %20, label %dec_label_pc_1ed88, label %dec_label_pc_1edc4, !insn.addr !14062

dec_label_pc_1ed88:                               ; preds = %dec_label_pc_1ed6b
  %21 = and i32 %2, 192, !insn.addr !14063
  %22 = icmp eq i32 %21, 192, !insn.addr !14064
  %23 = icmp eq i8 %5, -1, !insn.addr !14065
  %24 = icmp eq i1 %22, %23
  %25 = and i8 %5, 8, !insn.addr !14066
  %26 = icmp eq i8 %25, 0, !insn.addr !14066
  %27 = icmp eq i64 %storemerge, 192, !insn.addr !14067
  %28 = icmp eq i1 %24, %27
  %29 = icmp ne i1 %28, true
  %30 = or i1 %29, %26
  br i1 %30, label %dec_label_pc_1edc4, label %dec_label_pc_1edb6, !insn.addr !14068

dec_label_pc_1edb6:                               ; preds = %dec_label_pc_1ed88
  br i1 %8, label %dec_label_pc_1ee08, label %dec_label_pc_1edba, !insn.addr !14069

dec_label_pc_1edba:                               ; preds = %dec_label_pc_1edb6
  store i32 0, i32* %1, align 4, !insn.addr !14070
  br label %dec_label_pc_1ee08, !insn.addr !14071

dec_label_pc_1edc4:                               ; preds = %dec_label_pc_1ed6b, %dec_label_pc_1ed88, %dec_label_pc_1ed5a, %dec_label_pc_1eb09
  %31 = urem i64 %4, 2
  %32 = icmp eq i64 %31, 0, !insn.addr !14072
  %33 = icmp eq i1 %32, false, !insn.addr !14073
  br i1 %33, label %dec_label_pc_1ee08, label %dec_label_pc_1edc9, !insn.addr !14073

dec_label_pc_1edc9:                               ; preds = %dec_label_pc_1edc4
  %34 = and i64 %4, 137
  %35 = icmp eq i64 %34, 0, !insn.addr !14074
  %36 = icmp eq i1 %35, false, !insn.addr !14075
  br i1 %36, label %dec_label_pc_1ee08, label %dec_label_pc_1edcf, !insn.addr !14075

dec_label_pc_1edcf:                               ; preds = %dec_label_pc_1edc9
  %37 = and i64 %4, 175
  %38 = icmp eq i64 %37, 0, !insn.addr !14076
  %39 = icmp eq i1 %38, false, !insn.addr !14077
  %40 = icmp slt i8 %5, 0, !insn.addr !14078
  %or.cond6 = or i1 %40, %39
  br i1 %or.cond6, label %dec_label_pc_1ee08, label %dec_label_pc_1ede1, !insn.addr !14077

dec_label_pc_1ede1:                               ; preds = %dec_label_pc_1edcf
  %41 = and i32 %2, 192
  %42 = icmp eq i32 %41, 0, !insn.addr !14079
  %43 = icmp eq i8 %5, 0, !insn.addr !14080
  %44 = icmp eq i1 %42, %43
  %45 = icmp eq i64 %storemerge, 0, !insn.addr !14081
  %46 = icmp eq i1 %44, %45
  br i1 %46, label %dec_label_pc_1edf8, label %dec_label_pc_1ee08, !insn.addr !14082

dec_label_pc_1edf8:                               ; preds = %dec_label_pc_1ede1
  %sext3 = mul i32 %2, 16777216
  %47 = sdiv i32 %sext3, 16777216, !insn.addr !14083
  %48 = ashr i32 %47, ptrtoint (i8** @global_var_1f to i32), !insn.addr !14083
  %49 = add i32 %48, ptrtoint (i8** @global_var_3 to i32), !insn.addr !14084
  store i32 %49, i32* %1, align 4, !insn.addr !14085
  br label %dec_label_pc_1ee08, !insn.addr !14085

dec_label_pc_1ee08:                               ; preds = %dec_label_pc_1ede1, %dec_label_pc_1edf8, %dec_label_pc_1edcf, %dec_label_pc_1edc9, %dec_label_pc_1edc4, %dec_label_pc_1edba, %dec_label_pc_1edb6
  ret i64 %6, !insn.addr !14086
}

define i8 @BLACKWIDOW_EnableLoopThrough(i64 %ptCommunication, i8 %bEnable) local_unnamed_addr {
dec_label_pc_1ee12:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = trunc i64 %0 to i16, !insn.addr !14087
  %2 = call i32 @__asm_insd(i16 %1), !insn.addr !14087
  %3 = inttoptr i64 %ptCommunication to i32*, !insn.addr !14087
  store i32 %2, i32* %3, align 4, !insn.addr !14087
  %4 = call i64 @unknown_fffffffff0777964(), !insn.addr !14088
  %5 = trunc i64 %4 to i8, !insn.addr !14089
  ret i8 %5, !insn.addr !14089
}

define i64 @BLACKWIDOW_EnableLoopThrough.372(i64 %arg1, i64* %arg2) local_unnamed_addr {
dec_label_pc_1ee42:
  %.reg2mem = alloca i64, !insn.addr !14090
  %stack_var_-32 = alloca i32, align 4
  %0 = call i64 @mcount(), !insn.addr !14091
  %1 = icmp eq i64 %arg1, 0, !insn.addr !14092
  br i1 %1, label %2, label %dec_label_pc_1ee69, !insn.addr !14093

; <label>:2:                                      ; preds = %dec_label_pc_1ee42
  %3 = call i8 @CheckThresholdValidity(i64 0), !insn.addr !14093
  br label %dec_label_pc_1ee69, !insn.addr !14093

dec_label_pc_1ee69:                               ; preds = %2, %dec_label_pc_1ee42
  store i32 0, i32* %stack_var_-32, align 4, !insn.addr !14094
  %4 = ptrtoint i32* %stack_var_-32 to i64, !insn.addr !14095
  %5 = trunc i64 %4 to i8, !insn.addr !14096
  %6 = icmp eq i8 %5, 0, !insn.addr !14096
  store i64 0, i64* %.reg2mem, !insn.addr !14097
  br i1 %6, label %7, label %dec_label_pc_1ee9e, !insn.addr !14097

; <label>:7:                                      ; preds = %dec_label_pc_1ee69
  %8 = call i8 @CheckThresholdValidity(i64 %arg1), !insn.addr !14097
  %.pre = load i32, i32* %stack_var_-32, align 4
  %phitmp = and i32 %.pre, 247
  %phitmp2 = zext i32 %phitmp to i64
  store i64 %phitmp2, i64* %.reg2mem, !insn.addr !14097
  br label %dec_label_pc_1ee9e, !insn.addr !14097

dec_label_pc_1ee9e:                               ; preds = %7, %dec_label_pc_1ee69
  %.reload = load i64, i64* %.reg2mem, !insn.addr !14098
  ret i64 %.reload, !insn.addr !14099
}

define i64 @BLACKWIDOW_GetXtalFreqHz(i64 %ptCommunication) local_unnamed_addr {
dec_label_pc_1eecb:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = trunc i64 %0 to i8
  %2 = mul i8 %1, 2, !insn.addr !14100
  %3 = inttoptr i64 %0 to i8*, !insn.addr !14100
  store i8 %2, i8* %3, align 1, !insn.addr !14100
  ret i64 %0, !insn.addr !14101
}

define void @BLACKWIDOW_SetXtalFreqHz(i64 %ptCommunication, i64 %ulFreqHz) local_unnamed_addr {
dec_label_pc_1eede:
  ret void, !insn.addr !14102
}

define i8 @CheckThresholdValidity(i64 %ptThrehold) local_unnamed_addr {
dec_label_pc_1eef1:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = trunc i64 %0 to i8, !insn.addr !14103
  ret i8 %1, !insn.addr !14103
}

define i64 @BLACKWIDOW_GetXtalFreqHz.328(i64 %arg1) local_unnamed_addr {
dec_label_pc_1eefb:
  %0 = call i64 @mcount(), !insn.addr !14104
  %1 = add i64 %arg1, 40, !insn.addr !14105
  %2 = inttoptr i64 %1 to i64*, !insn.addr !14105
  %3 = load i64, i64* %2, align 8, !insn.addr !14105
  %4 = add i64 %3, 8, !insn.addr !14106
  %5 = inttoptr i64 %4 to i64*, !insn.addr !14106
  %6 = load i64, i64* %5, align 8, !insn.addr !14106
  ret i64 %6, !insn.addr !14107
}

define i64 @BLACKWIDOW_SetXtalFreqHz.450() local_unnamed_addr {
dec_label_pc_1ef0e:
  %0 = call i64 @mcount(), !insn.addr !14108
  ret i64 %0, !insn.addr !14108
}

define i8 @BLACKWIDOW_ConfigureGainMode(i64 %ptCommunication, i64 %ptThrehold, i64 %ptGainModeConfiguration) local_unnamed_addr {
dec_label_pc_1ef1a:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = call i64 @__decompiler_undefined_function_0()
  %2 = add i64 %1, -119, !insn.addr !14109
  %3 = inttoptr i64 %2 to i8*, !insn.addr !14109
  %4 = load i8, i8* %3, align 1, !insn.addr !14109
  %5 = trunc i64 %0 to i8, !insn.addr !14109
  %6 = sub i8 %4, %5, !insn.addr !14109
  store i8 %6, i8* %3, align 1, !insn.addr !14109
  %7 = trunc i64 %1 to i8, !insn.addr !14110
  ret i8 %7, !insn.addr !14110
}

define i64 @CheckThresholdValidity.93(i64 %arg1, i64 %arg2, i64 %arg3) local_unnamed_addr {
dec_label_pc_1ef21:
  %0 = call i64 @__decompiler_undefined_function_0()
  ret i64 %0, !insn.addr !14111
}

define i64 @BLACKWIDOW_ConfigureGainMode.340(i64 %arg1, i64 %arg2, i64 %arg3) local_unnamed_addr {
dec_label_pc_1ef4a:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = call i64 @mcount(), !insn.addr !14112
  %2 = add i64 %arg1, 40, !insn.addr !14113
  %3 = inttoptr i64 %2 to i64*, !insn.addr !14113
  %4 = load i64, i64* %3, align 8, !insn.addr !14113
  %5 = icmp eq i64 %arg2, 0, !insn.addr !14114
  %6 = zext i1 %5 to i64, !insn.addr !14115
  %7 = and i64 %arg3, -256, !insn.addr !14115
  %8 = or i64 %7, %6, !insn.addr !14115
  %9 = call i64 @CheckThresholdValidity.93(i64 %arg2, i64 %arg2, i64 %8), !insn.addr !14116
  %10 = trunc i64 %0 to i32
  %11 = add i64 %4, 16, !insn.addr !14117
  %12 = inttoptr i64 %11 to i32*, !insn.addr !14117
  store i32 %10, i32* %12, align 4, !insn.addr !14117
  %13 = add i64 %arg2, ptrtoint (i16* @global_var_4 to i64), !insn.addr !14118
  %14 = inttoptr i64 %13 to i32*, !insn.addr !14118
  %15 = load i32, i32* %14, align 4, !insn.addr !14118
  %16 = add i64 %4, 20, !insn.addr !14119
  %17 = inttoptr i64 %16 to i32*, !insn.addr !14119
  store i32 %15, i32* %17, align 4, !insn.addr !14119
  %18 = add i64 %arg2, ptrtoint (i8* @global_var_8 to i64), !insn.addr !14120
  %19 = inttoptr i64 %18 to i32*, !insn.addr !14120
  %20 = load i32, i32* %19, align 4, !insn.addr !14120
  %21 = zext i32 %20 to i64, !insn.addr !14120
  %22 = add i64 %4, 24, !insn.addr !14121
  %23 = inttoptr i64 %22 to i32*, !insn.addr !14121
  store i32 %20, i32* %23, align 4, !insn.addr !14121
  %24 = add i64 %4, 28, !insn.addr !14122
  %25 = inttoptr i64 %24 to i64*, !insn.addr !14122
  store i64 %21, i64* %25, align 8, !insn.addr !14122
  %26 = add i64 %arg3, ptrtoint (i8* @global_var_8 to i64), !insn.addr !14123
  %27 = inttoptr i64 %26 to i64*, !insn.addr !14123
  %28 = load i64, i64* %27, align 8, !insn.addr !14123
  %29 = add i64 %4, 36, !insn.addr !14124
  %30 = inttoptr i64 %29 to i64*, !insn.addr !14124
  store i64 %28, i64* %30, align 8, !insn.addr !14124
  %31 = add i64 %arg3, ptrtoint (i8* @global_var_10 to i64), !insn.addr !14125
  %32 = inttoptr i64 %31 to i64*, !insn.addr !14125
  %33 = load i64, i64* %32, align 8, !insn.addr !14125
  %34 = add i64 %4, 44, !insn.addr !14126
  %35 = inttoptr i64 %34 to i64*, !insn.addr !14126
  store i64 %33, i64* %35, align 8, !insn.addr !14126
  %36 = add i64 %arg3, ptrtoint (i32** @global_var_18 to i64), !insn.addr !14127
  %37 = inttoptr i64 %36 to i64*, !insn.addr !14127
  %38 = load i64, i64* %37, align 8, !insn.addr !14127
  %39 = add i64 %4, 52, !insn.addr !14128
  %40 = inttoptr i64 %39 to i64*, !insn.addr !14128
  store i64 %38, i64* %40, align 8, !insn.addr !14128
  %41 = add i64 %arg3, ptrtoint (i32** @global_var_20 to i64), !insn.addr !14129
  %42 = inttoptr i64 %41 to i64*, !insn.addr !14129
  %43 = load i64, i64* %42, align 8, !insn.addr !14129
  %44 = add i64 %4, 60, !insn.addr !14130
  %45 = inttoptr i64 %44 to i64*, !insn.addr !14130
  store i64 %43, i64* %45, align 8, !insn.addr !14130
  %46 = add i64 %arg3, 40, !insn.addr !14131
  %47 = inttoptr i64 %46 to i64*, !insn.addr !14131
  %48 = load i64, i64* %47, align 8, !insn.addr !14131
  %49 = add i64 %4, 68, !insn.addr !14132
  %50 = inttoptr i64 %49 to i64*, !insn.addr !14132
  store i64 %48, i64* %50, align 8, !insn.addr !14132
  %51 = add i64 %arg3, 48, !insn.addr !14133
  %52 = inttoptr i64 %51 to i64*, !insn.addr !14133
  %53 = load i64, i64* %52, align 8, !insn.addr !14133
  %54 = add i64 %4, 76, !insn.addr !14134
  %55 = inttoptr i64 %54 to i64*, !insn.addr !14134
  store i64 %53, i64* %55, align 8, !insn.addr !14134
  %56 = add i64 %arg3, 56, !insn.addr !14135
  %57 = inttoptr i64 %56 to i64*, !insn.addr !14135
  %58 = load i64, i64* %57, align 8, !insn.addr !14135
  %59 = add i64 %4, 84, !insn.addr !14136
  %60 = inttoptr i64 %59 to i64*, !insn.addr !14136
  store i64 %58, i64* %60, align 8, !insn.addr !14136
  %61 = add i64 %arg3, 64, !insn.addr !14137
  %62 = inttoptr i64 %61 to i64*, !insn.addr !14137
  %63 = load i64, i64* %62, align 8, !insn.addr !14137
  %64 = add i64 %4, 92, !insn.addr !14138
  %65 = inttoptr i64 %64 to i64*, !insn.addr !14138
  store i64 %63, i64* %65, align 8, !insn.addr !14138
  %66 = add i64 %arg3, 72, !insn.addr !14139
  %67 = inttoptr i64 %66 to i64*, !insn.addr !14139
  %68 = load i64, i64* %67, align 8, !insn.addr !14139
  %69 = add i64 %4, 100, !insn.addr !14140
  %70 = inttoptr i64 %69 to i64*, !insn.addr !14140
  store i64 %68, i64* %70, align 8, !insn.addr !14140
  %71 = add i64 %arg3, 80, !insn.addr !14141
  %72 = inttoptr i64 %71 to i64*, !insn.addr !14141
  %73 = load i64, i64* %72, align 8, !insn.addr !14141
  %74 = add i64 %4, 108, !insn.addr !14142
  %75 = inttoptr i64 %74 to i64*, !insn.addr !14142
  store i64 %73, i64* %75, align 8, !insn.addr !14142
  %76 = add i64 %arg3, 88, !insn.addr !14143
  %77 = inttoptr i64 %76 to i64*, !insn.addr !14143
  %78 = load i64, i64* %77, align 8, !insn.addr !14143
  %79 = add i64 %4, 116, !insn.addr !14144
  %80 = inttoptr i64 %79 to i64*, !insn.addr !14144
  store i64 %78, i64* %80, align 8, !insn.addr !14144
  %81 = add i64 %arg3, 96, !insn.addr !14145
  %82 = inttoptr i64 %81 to i64*, !insn.addr !14145
  %83 = load i64, i64* %82, align 8, !insn.addr !14145
  %84 = add i64 %4, 124, !insn.addr !14146
  %85 = inttoptr i64 %84 to i64*, !insn.addr !14146
  store i64 %83, i64* %85, align 8, !insn.addr !14146
  ret i64 %9, !insn.addr !14147
}

define void @LeftShift(i64* %ulNumMSB, i64* %ulNumLSB) local_unnamed_addr {
dec_label_pc_1f028:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = call i64 @__decompiler_undefined_function_0()
  %2 = add i64 %0, 132, !insn.addr !14148
  %3 = inttoptr i64 %2 to i64*, !insn.addr !14148
  %4 = add i64 %1, 112, !insn.addr !14149
  %5 = inttoptr i64 %4 to i64*, !insn.addr !14149
  %6 = load i64, i64* %5, align 8, !insn.addr !14149
  %7 = add i64 %0, 140, !insn.addr !14150
  %8 = inttoptr i64 %7 to i64*, !insn.addr !14150
  store i64 %6, i64* %8, align 8, !insn.addr !14150
  %9 = add i64 %1, 120, !insn.addr !14151
  %10 = inttoptr i64 %9 to i64*, !insn.addr !14151
  %11 = load i64, i64* %10, align 8, !insn.addr !14151
  %12 = add i64 %0, 148, !insn.addr !14152
  %13 = inttoptr i64 %12 to i64*, !insn.addr !14152
  store i64 %11, i64* %13, align 8, !insn.addr !14152
  ret void, !insn.addr !14153
}

define void @Add(i64* %pulResMSB, i64* %pulResLSB, i64 %ulAddMSB, i64 %ulAddLSB) local_unnamed_addr {
dec_label_pc_1f050:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = mul i64 %ulAddLSB, 4, !insn.addr !14154
  %2 = add i64 %1, 108, !insn.addr !14154
  %3 = add i64 %2, %0, !insn.addr !14154
  %4 = inttoptr i64 %3 to i8*, !insn.addr !14154
  %5 = load i8, i8* %4, align 1, !insn.addr !14154
  %6 = trunc i64 %ulAddLSB to i8, !insn.addr !14154
  %7 = or i8 %5, %6, !insn.addr !14154
  store i8 %7, i8* %4, align 1, !insn.addr !14154
  ret void, !insn.addr !14155
}

define i64 @LeftShift.94(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_1f058:
  %0 = call i64 @mcount(), !insn.addr !14156
  %1 = lshr i64 %arg2, ptrtoint (i8** @global_var_1f to i64), !insn.addr !14157
  %2 = mul i64 %arg1, ptrtoint (i32* @global_var_2 to i64), !insn.addr !14158
  %3 = add i64 %1, %2, !insn.addr !14158
  %4 = inttoptr i64 %arg1 to i64*, !insn.addr !14159
  store i64 %3, i64* %4, align 8, !insn.addr !14159
  %5 = mul i64 %arg2, 2, !insn.addr !14160
  %6 = and i64 %5, 4294967294, !insn.addr !14160
  %7 = inttoptr i64 %arg2 to i64*, !insn.addr !14161
  store i64 %6, i64* %7, align 8, !insn.addr !14161
  ret i64 %6, !insn.addr !14162
}

define i64 @Add.95(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_1f080:
  %0 = call i64 @mcount(), !insn.addr !14163
  ret i64 %arg2, !insn.addr !14164
}

define void @Mult(i64 %ulOp1, i64 %ulOp2, i64* %pulResMSB, i64* %pulResLSB) local_unnamed_addr {
dec_label_pc_1f094:
  %r8.0.reg2mem = alloca i64, !insn.addr !14165
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = call i64 @__decompiler_undefined_function_0()
  %2 = ptrtoint i64* %pulResLSB to i64
  %3 = icmp ult i64 %1, %0, !insn.addr !14166
  %4 = icmp eq i1 %3, false, !insn.addr !14167
  store i64 ptrtoint (i32* @global_var_1 to i64), i64* %r8.0.reg2mem, !insn.addr !14167
  br i1 %4, label %dec_label_pc_1f0b4, label %dec_label_pc_1f0a0, !insn.addr !14167

dec_label_pc_1f0a0:                               ; preds = %dec_label_pc_1f094
  %5 = sub i64 4294967295, %1, !insn.addr !14168
  %6 = icmp ugt i64 %5, %2, !insn.addr !14169
  %7 = icmp eq i1 %6, false, !insn.addr !14170
  %8 = zext i1 %7 to i64, !insn.addr !14171
  store i64 %8, i64* %r8.0.reg2mem, !insn.addr !14171
  br label %dec_label_pc_1f0b4, !insn.addr !14171

dec_label_pc_1f0b4:                               ; preds = %dec_label_pc_1f0a0, %dec_label_pc_1f094
  %9 = ptrtoint i64* %pulResMSB to i64
  %r8.0.reload = load i64, i64* %r8.0.reg2mem
  %10 = mul i64 %1, ptrtoint (i32* @global_var_1 to i64), !insn.addr !14172
  %11 = add i64 %10, %2, !insn.addr !14172
  %12 = inttoptr i64 %ulOp2 to i64*, !insn.addr !14173
  store i64 %11, i64* %12, align 8, !insn.addr !14173
  %13 = mul i64 %9, ptrtoint (i32* @global_var_1 to i64), !insn.addr !14174
  %14 = add i64 %13, %ulOp1, !insn.addr !14174
  %15 = add i64 %14, %r8.0.reload, !insn.addr !14175
  %16 = inttoptr i64 %ulOp1 to i64*, !insn.addr !14175
  store i64 %15, i64* %16, align 8, !insn.addr !14175
  ret void, !insn.addr !14176
}

define i64 @Mult.96(i64 %arg1, i64 %arg2, i64* %arg3, i64* %arg4, i64* %arg5) local_unnamed_addr {
dec_label_pc_1f0c4:
  %0 = call i64 @mcount(), !insn.addr !14177
  ret i64 %0, !insn.addr !14178
}

define i8 @IsBigger(i64 %ulValMSB, i64 %ulValLSB, i64 %ulWithMSB, i64 %ulWithLSB) local_unnamed_addr {
dec_label_pc_1f125:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = call i64 @__decompiler_undefined_function_0()
  %2 = call i64 @__decompiler_undefined_function_0()
  %3 = add i64 %2, -64, !insn.addr !14179
  %4 = inttoptr i64 %3 to i64*, !insn.addr !14179
  %5 = load i64, i64* %4, align 8, !insn.addr !14179
  %6 = call i64 @Add.95(i64 %5, i64 %ulValLSB), !insn.addr !14180
  %7 = call i64 @LeftShift.94(i64 %0, i64 %1), !insn.addr !14181
  %8 = trunc i64 %7 to i8
  ret i8 %8, !insn.addr !14182
}

define void @Div(i64 %ulNumMSB, i64 %ulNumLSB, i64 %ulDenom, i64* %pulResMSB, i64* %pulResLSB) local_unnamed_addr {
dec_label_pc_1f147:
  ret void, !insn.addr !14183
}

define i64 @IsBigger.97(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4) local_unnamed_addr {
dec_label_pc_1f155:
  %rax.0.reg2mem = alloca i64, !insn.addr !14184
  %0 = call i64 @mcount(), !insn.addr !14185
  %1 = icmp ugt i64 %arg1, %arg3
  store i64 ptrtoint (i32* @global_var_1 to i64), i64* %rax.0.reg2mem, !insn.addr !14186
  br i1 %1, label %dec_label_pc_1f175, label %dec_label_pc_1f168, !insn.addr !14186

dec_label_pc_1f168:                               ; preds = %dec_label_pc_1f155
  %2 = icmp ult i64 %arg1, %arg3, !insn.addr !14187
  store i64 0, i64* %rax.0.reg2mem, !insn.addr !14188
  br i1 %2, label %dec_label_pc_1f175, label %dec_label_pc_1f16f, !insn.addr !14188

dec_label_pc_1f16f:                               ; preds = %dec_label_pc_1f168
  %3 = icmp ule i64 %arg2, %arg4
  %4 = icmp ne i1 %3, true, !insn.addr !14189
  %5 = zext i1 %4 to i64, !insn.addr !14189
  store i64 %5, i64* %rax.0.reg2mem, !insn.addr !14189
  br label %dec_label_pc_1f175, !insn.addr !14189

dec_label_pc_1f175:                               ; preds = %dec_label_pc_1f155, %dec_label_pc_1f16f, %dec_label_pc_1f168
  %rax.0.reload = load i64, i64* %rax.0.reg2mem
  ret i64 %rax.0.reload, !insn.addr !14190
}

define i64 @Div.98(i64 %arg1, i64 %arg2, i64 %arg3, i64* %arg4, i64* %arg5) local_unnamed_addr {
dec_label_pc_1f177:
  %0 = call i64 @mcount(), !insn.addr !14191
  store i64 0, i64* %arg4, align 8, !insn.addr !14192
  store i64 0, i64* %arg5, align 8, !insn.addr !14193
  ret i64 %arg3, !insn.addr !14194
}

define i8 @BLACKWIDOW_SetEnableBlocks(i64 %ptCommunication, i64 %ptEnableBlocks) local_unnamed_addr {
dec_label_pc_1f2b9:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = call i64 @__decompiler_undefined_function_0()
  %2 = call i64 @__decompiler_undefined_function_0()
  %3 = call i64 @__decompiler_undefined_function_0()
  %4 = trunc i64 %3 to i32, !insn.addr !14195
  %5 = add i64 %2, -56, !insn.addr !14195
  %6 = inttoptr i64 %5 to i32*, !insn.addr !14195
  store i32 %4, i32* %6, align 4, !insn.addr !14195
  %7 = inttoptr i64 %5 to i64*, !insn.addr !14196
  %8 = load i64, i64* %7, align 8, !insn.addr !14196
  %9 = add i64 %2, -48, !insn.addr !14197
  %10 = inttoptr i64 %9 to i64*, !insn.addr !14197
  %11 = load i64, i64* %10, align 8, !insn.addr !14197
  %12 = call i64 @IsBigger.97(i64 %0, i64 %1, i64 %11, i64 %8), !insn.addr !14198
  %13 = trunc i64 %12 to i8, !insn.addr !14199
  ret i8 %13, !insn.addr !14199
}

define i64 @BLACKWIDOW_SetEnableBlocks.469(i64 %arg1, i64 %arg2, i64 %arg3) local_unnamed_addr {
dec_label_pc_1f2e9:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = call i64 @mcount(), !insn.addr !14200
  %2 = add i64 %arg2, ptrtoint (i8** @global_var_3 to i64), !insn.addr !14201
  %3 = inttoptr i64 %2 to i8*, !insn.addr !14201
  %4 = load i8, i8* %3, align 1, !insn.addr !14201
  %5 = zext i8 %4 to i32, !insn.addr !14202
  %6 = shl i32 %5, ptrtoint (i8** @global_var_7 to i32), !insn.addr !14202
  %7 = and i32 %6, 128, !insn.addr !14203
  %8 = add i64 %arg2, ptrtoint (i32* @global_var_2 to i64), !insn.addr !14204
  %9 = inttoptr i64 %8 to i8*, !insn.addr !14204
  %10 = load i8, i8* %9, align 1, !insn.addr !14204
  %11 = zext i8 %10 to i32, !insn.addr !14205
  %12 = and i32 %11, ptrtoint (i32* @global_var_1 to i32), !insn.addr !14205
  %13 = shl i32 %12, ptrtoint (i8* @global_var_5 to i32), !insn.addr !14206
  %14 = trunc i64 %0 to i32
  %15 = and i32 %14, and (i32 ptrtoint (i32* @global_var_1 to i32), i32 255), !insn.addr !14207
  %16 = shl i32 %15, ptrtoint (i8** @global_var_3 to i32), !insn.addr !14208
  %17 = add i64 %arg2, ptrtoint (i32* @global_var_1 to i64), !insn.addr !14209
  %18 = inttoptr i64 %17 to i8*, !insn.addr !14209
  %19 = load i8, i8* %18, align 1, !insn.addr !14209
  %20 = zext i8 %19 to i32, !insn.addr !14210
  %21 = and i32 %20, ptrtoint (i32* @global_var_1 to i32), !insn.addr !14210
  %22 = shl i32 %21, ptrtoint (i32* @global_var_2 to i32), !insn.addr !14211
  %23 = or i32 %7, %16
  %24 = or i32 %23, %13
  %25 = or i32 %24, %22
  %26 = zext i32 %25 to i64, !insn.addr !14212
  %sext = mul i64 %26, 72057594037927936
  %27 = sdiv i64 %sext, 72057594037927936, !insn.addr !14213
  %28 = and i64 %27, -193, !insn.addr !14214
  %29 = add i64 %arg2, ptrtoint (i8** @global_var_9 to i64), !insn.addr !14215
  %30 = inttoptr i64 %29 to i8*, !insn.addr !14215
  %31 = load i8, i8* %30, align 1, !insn.addr !14215
  %32 = zext i8 %31 to i64, !insn.addr !14215
  %33 = shl i64 %32, ptrtoint (i8** @global_var_7 to i64), !insn.addr !14216
  %34 = urem i64 %33, 256, !insn.addr !14217
  %35 = add i64 %arg2, ptrtoint (i8* @global_var_a to i64), !insn.addr !14218
  %36 = inttoptr i64 %35 to i8*, !insn.addr !14218
  %37 = load i8, i8* %36, align 1, !insn.addr !14218
  %38 = zext i8 %37 to i64, !insn.addr !14219
  %39 = and i64 %38, zext (i32 ptrtoint (i32* @global_var_1 to i32) to i64), !insn.addr !14219
  %40 = shl i64 %39, ptrtoint (i8* @global_var_6 to i64), !insn.addr !14220
  %41 = or i64 %40, %34, !insn.addr !14221
  %42 = or i64 %41, %28, !insn.addr !14222
  ret i64 %42, !insn.addr !14223
}

define i8 @BLACKWIDOW_GetEnableBlocks(i64 %ptCommunication, i64 %ptEnableBlocks) local_unnamed_addr {
dec_label_pc_1f5b3:
  %0 = call i64 @__decompiler_undefined_function_0()
  %rax = alloca i64, align 8
  %1 = call i64 @__decompiler_undefined_function_0()
  %2 = bitcast i64* %rax to i8*
  %3 = trunc i64 %1 to i8
  %4 = mul i8 %3, 2, !insn.addr !14224
  %5 = inttoptr i64 %1 to i8*, !insn.addr !14224
  store i8 %4, i8* %5, align 1, !insn.addr !14224
  %6 = add i64 %0, -71, !insn.addr !14225
  %7 = inttoptr i64 %6 to i8*, !insn.addr !14225
  %8 = load i8, i8* %7, align 1, !insn.addr !14225
  %9 = load i64, i64* %rax, align 8, !insn.addr !14225
  %10 = trunc i64 %9 to i8, !insn.addr !14225
  %11 = add i8 %8, %10, !insn.addr !14225
  store i8 %11, i8* %7, align 1, !insn.addr !14225
  %12 = load i8, i8* %2, align 8, !insn.addr !14226
  %13 = load i64, i64* %rax, align 8
  %14 = trunc i64 %13 to i8, !insn.addr !14226
  %15 = add i8 %12, %14, !insn.addr !14226
  %16 = inttoptr i64 %13 to i8*, !insn.addr !14226
  store i8 %15, i8* %16, align 1, !insn.addr !14226
  %17 = load i8, i8* %2, align 8, !insn.addr !14227
  %18 = load i64, i64* %rax, align 8
  %19 = trunc i64 %18 to i8, !insn.addr !14227
  %20 = add i8 %17, %19, !insn.addr !14227
  %21 = inttoptr i64 %18 to i8*, !insn.addr !14227
  store i8 %20, i8* %21, align 1, !insn.addr !14227
  %22 = load i64, i64* %rax, align 8, !insn.addr !14228
  %23 = trunc i64 %22 to i8, !insn.addr !14228
  ret i8 %23, !insn.addr !14228
}

define i64 @BLACKWIDOW_GetEnableBlocks.563(i64 %arg1, i64 %arg2, i64 %arg3) local_unnamed_addr {
dec_label_pc_1f5e3:
  %stack_var_-32 = alloca i8, align 1
  %0 = call i64 @mcount(), !insn.addr !14229
  %1 = add i64 %arg2, ptrtoint (i8* @global_var_6 to i64), !insn.addr !14230
  %2 = inttoptr i64 %1 to i8*, !insn.addr !14230
  store i8 0, i8* %2, align 1, !insn.addr !14230
  %3 = add i64 %arg2, ptrtoint (i8** @global_var_7 to i64), !insn.addr !14231
  %4 = inttoptr i64 %3 to i8*, !insn.addr !14231
  store i8 0, i8* %4, align 1, !insn.addr !14231
  store i8 0, i8* %stack_var_-32, align 1, !insn.addr !14232
  %5 = add i64 %arg2, ptrtoint (i8** @global_var_3 to i64), !insn.addr !14233
  %6 = inttoptr i64 %5 to i8*, !insn.addr !14233
  store i8 0, i8* %6, align 1, !insn.addr !14233
  %7 = add i64 %arg2, ptrtoint (i32* @global_var_2 to i64), !insn.addr !14234
  %8 = inttoptr i64 %7 to i8*, !insn.addr !14234
  store i8 0, i8* %8, align 1, !insn.addr !14234
  %9 = inttoptr i64 %arg2 to i8*, !insn.addr !14235
  store i8 0, i8* %9, align 1, !insn.addr !14235
  %10 = add i64 %arg2, ptrtoint (i32* @global_var_1 to i64), !insn.addr !14236
  %11 = inttoptr i64 %10 to i8*, !insn.addr !14236
  store i8 0, i8* %11, align 1, !insn.addr !14236
  %12 = load i8, i8* %stack_var_-32, align 1, !insn.addr !14237
  %13 = add i64 %arg2, ptrtoint (i16* @global_var_4 to i64), !insn.addr !14238
  %14 = inttoptr i64 %13 to i8*, !insn.addr !14238
  store i8 %12, i8* %14, align 1, !insn.addr !14238
  %15 = load i8, i8* %stack_var_-32, align 1, !insn.addr !14239
  %16 = add i64 %arg2, ptrtoint (i8* @global_var_5 to i64), !insn.addr !14240
  %17 = inttoptr i64 %16 to i8*, !insn.addr !14240
  store i8 %15, i8* %17, align 1, !insn.addr !14240
  %18 = load i8, i8* %stack_var_-32, align 1, !insn.addr !14241
  %19 = add i64 %arg2, ptrtoint (i8* @global_var_8 to i64), !insn.addr !14242
  %20 = inttoptr i64 %19 to i8*, !insn.addr !14242
  store i8 %18, i8* %20, align 1, !insn.addr !14242
  %21 = ptrtoint i8* %stack_var_-32 to i64, !insn.addr !14243
  ret i64 %21, !insn.addr !14244
}

define i8 @BLACKWIDOW_SetPowerDetectorConfig(i64 %ptCommunication, i32 %eGainShiftValue) local_unnamed_addr {
dec_label_pc_1f7a4:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = call i64 @__decompiler_undefined_function_0()
  %2 = call i64 @__decompiler_undefined_function_0()
  %3 = trunc i64 %2 to i8, !insn.addr !14245
  %4 = icmp eq i8 %3, 0, !insn.addr !14245
  br i1 %4, label %dec_label_pc_1f7cb, label %dec_label_pc_1f7b0, !insn.addr !14246

dec_label_pc_1f7b0:                               ; preds = %dec_label_pc_1f7a4
  %5 = add i64 %0, -24, !insn.addr !14247
  %6 = inttoptr i64 %5 to i64*, !insn.addr !14247
  %7 = load i64, i64* %6, align 8, !insn.addr !14247
  %8 = lshr i64 %7, ptrtoint (i8** @global_var_7 to i64), !insn.addr !14248
  %9 = trunc i64 %8 to i8, !insn.addr !14249
  %10 = and i8 %9, ptrtoint (i32* @global_var_1 to i8), !insn.addr !14249
  %11 = add i64 %1, ptrtoint (i8** @global_var_9 to i64), !insn.addr !14250
  %12 = inttoptr i64 %11 to i8*, !insn.addr !14250
  store i8 %10, i8* %12, align 1, !insn.addr !14250
  %13 = lshr i64 %7, ptrtoint (i8* @global_var_6 to i64), !insn.addr !14251
  %14 = trunc i64 %13 to i8, !insn.addr !14252
  %15 = and i8 %14, ptrtoint (i32* @global_var_1 to i8), !insn.addr !14252
  %16 = add i64 %1, ptrtoint (i8* @global_var_a to i64), !insn.addr !14253
  %17 = inttoptr i64 %16 to i8*, !insn.addr !14253
  store i8 %15, i8* %17, align 1, !insn.addr !14253
  br label %dec_label_pc_1f7cb, !insn.addr !14253

dec_label_pc_1f7cb:                               ; preds = %dec_label_pc_1f7b0, %dec_label_pc_1f7a4
  ret i8 %3, !insn.addr !14254
}

define i64 @BLACKWIDOW_SetPowerDetectorConfig.329(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_1f7d4:
  %0 = call i64 @mcount(), !insn.addr !14255
  ret i64 0, !insn.addr !14256
}

define i8 @BLACKWIDOW_GetPowerDetect(i64 %ptCommunication, i32* %ptPowerDetect) local_unnamed_addr {
dec_label_pc_1f7f4:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = trunc i64 %0 to i8
  %2 = and i8 %1, ptrtoint (i8* @global_var_8 to i8), !insn.addr !14257
  ret i8 %2, !insn.addr !14257
}

define i64 @function_1f7f7() local_unnamed_addr {
dec_label_pc_1f7f7:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = trunc i64 %0 to i8
  %2 = mul i8 %1, 2, !insn.addr !14258
  %3 = inttoptr i64 %0 to i8*, !insn.addr !14258
  store i8 %2, i8* %3, align 1, !insn.addr !14258
  %4 = add i64 %0, 36, !insn.addr !14259
  %5 = urem i64 %4, 256, !insn.addr !14259
  %6 = and i64 %0, -256, !insn.addr !14259
  %7 = or i64 %5, %6, !insn.addr !14259
  %8 = inttoptr i64 %7 to i32*, !insn.addr !14260
  %9 = load i32, i32* %8, align 4, !insn.addr !14260
  %10 = trunc i64 %7 to i32, !insn.addr !14260
  %11 = add i32 %9, %10, !insn.addr !14260
  store i32 %11, i32* %8, align 4, !insn.addr !14260
  %12 = inttoptr i64 %7 to i8*, !insn.addr !14261
  %13 = load i8, i8* %12, align 1, !insn.addr !14261
  %14 = trunc i64 %4 to i8, !insn.addr !14261
  %15 = add i8 %13, %14, !insn.addr !14261
  store i8 %15, i8* %12, align 1, !insn.addr !14261
  ret i64 %7, !insn.addr !14262
}

define i64 @BLACKWIDOW_GetPowerDetect.267(i64 %arg1, i32* %arg2) local_unnamed_addr {
dec_label_pc_1f824:
  %stack_var_-32 = alloca i32, align 4
  %0 = call i64 @mcount(), !insn.addr !14263
  %1 = ptrtoint i32* %stack_var_-32 to i64, !insn.addr !14264
  store i32 0, i32* %arg2, align 4, !insn.addr !14265
  ret i64 %1, !insn.addr !14266
}

define i8 @BLACKWIDOW_GetGainMode(i64 %ptCommunication, i64 %ptThrehold, i32* %peGainMode) local_unnamed_addr {
dec_label_pc_1f920:
  %0 = call i64 @__decompiler_undefined_function_0()
  %rax = alloca i64, align 8
  %1 = call i64 @__decompiler_undefined_function_0()
  %2 = bitcast i64* %rax to i8*
  %3 = trunc i64 %1 to i8
  %4 = mul i8 %3, 2, !insn.addr !14267
  %5 = inttoptr i64 %1 to i8*, !insn.addr !14267
  store i8 %4, i8* %5, align 1, !insn.addr !14267
  %6 = add i64 %0, -71, !insn.addr !14268
  %7 = inttoptr i64 %6 to i8*, !insn.addr !14268
  %8 = load i8, i8* %7, align 1, !insn.addr !14268
  %9 = load i64, i64* %rax, align 8, !insn.addr !14268
  %10 = trunc i64 %9 to i8, !insn.addr !14268
  %11 = add i8 %8, %10, !insn.addr !14268
  store i8 %11, i8* %7, align 1, !insn.addr !14268
  %12 = load i8, i8* %2, align 8, !insn.addr !14269
  %13 = load i64, i64* %rax, align 8
  %14 = trunc i64 %13 to i8, !insn.addr !14269
  %15 = add i8 %12, %14, !insn.addr !14269
  %16 = inttoptr i64 %13 to i8*, !insn.addr !14269
  store i8 %15, i8* %16, align 1, !insn.addr !14269
  %17 = load i8, i8* %2, align 8, !insn.addr !14270
  %18 = load i64, i64* %rax, align 8
  %19 = trunc i64 %18 to i8, !insn.addr !14270
  %20 = add i8 %17, %19, !insn.addr !14270
  %21 = inttoptr i64 %18 to i8*, !insn.addr !14270
  store i8 %20, i8* %21, align 1, !insn.addr !14270
  %22 = load i64, i64* %rax, align 8, !insn.addr !14271
  %23 = trunc i64 %22 to i8, !insn.addr !14271
  ret i8 %23, !insn.addr !14271
}

define i64 @BLACKWIDOW_GetGainMode.289(i64 %arg1, i64 %arg2, i64 %arg3) local_unnamed_addr {
dec_label_pc_1f950:
  %rsi = alloca i64, align 8
  %stack_var_-44 = alloca i32, align 4
  %0 = call i64 @mcount(), !insn.addr !14272
  %1 = add i64 %arg1, 40, !insn.addr !14273
  %2 = inttoptr i64 %1 to i64*, !insn.addr !14273
  %3 = load i64, i64* %2, align 8, !insn.addr !14273
  store i32 1023, i32* %stack_var_-44, align 4, !insn.addr !14274
  %4 = call i64 @CheckThresholdValidity.93(i64 %arg2, i64 %arg2, i64 %arg3), !insn.addr !14275
  %5 = call i64 @BLACKWIDOW_GetPowerDetect.267(i64 %arg1, i32* nonnull %stack_var_-44), !insn.addr !14276
  %6 = load i32, i32* %stack_var_-44, align 4, !insn.addr !14277
  %7 = add i64 %3, 164, !insn.addr !14278
  %8 = inttoptr i64 %7 to i32*, !insn.addr !14278
  store i32 %6, i32* %8, align 4, !insn.addr !14278
  %9 = load i32, i32* %stack_var_-44, align 4, !insn.addr !14279
  %10 = bitcast i64* %rsi to i32*
  %11 = load i32, i32* %10, align 8, !insn.addr !14280
  %12 = icmp ult i32 %11, %9, !insn.addr !14280
  br i1 %12, label %dec_label_pc_1f9d0, label %dec_label_pc_1f9bf, !insn.addr !14281

dec_label_pc_1f9bf:                               ; preds = %dec_label_pc_1f950
  %13 = inttoptr i64 %arg3 to i32*, !insn.addr !14282
  store i32 0, i32* %13, align 4, !insn.addr !14282
  ret i64 %5, !insn.addr !14283

dec_label_pc_1f9d0:                               ; preds = %dec_label_pc_1f950
  ret i64 %5, !insn.addr !14284
}

define i8 @BLACKWIDOW_SetGainLowCurrentConfig(i64 %ptCommunication, i64 %ptGainLowCurrent) local_unnamed_addr {
dec_label_pc_1f9d3:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = call i64 @__decompiler_undefined_function_0()
  %2 = call i64 @__decompiler_undefined_function_0()
  %rax = alloca i64, align 8
  %3 = call i64 @__decompiler_undefined_function_0()
  %4 = trunc i64 %2 to i8
  %5 = trunc i64 %3 to i8, !insn.addr !14285
  %6 = add i8 %5, %4, !insn.addr !14285
  %7 = inttoptr i64 %2 to i8*, !insn.addr !14285
  store i8 %6, i8* %7, align 1, !insn.addr !14285
  %8 = bitcast i64* %rax to i8*
  %9 = load i8, i8* %8, align 8, !insn.addr !14286
  %10 = load i64, i64* %rax, align 8
  %11 = trunc i64 %10 to i8, !insn.addr !14286
  %12 = add i8 %9, %11, !insn.addr !14286
  %13 = inttoptr i64 %10 to i8*, !insn.addr !14286
  store i8 %12, i8* %13, align 1, !insn.addr !14286
  %14 = trunc i64 %1 to i8, !insn.addr !14287
  %15 = lshr i64 %2, ptrtoint (i8* @global_var_8 to i64), !insn.addr !14287
  %16 = trunc i64 %15 to i8, !insn.addr !14287
  %17 = sub i8 0, %14
  %18 = sub i8 %17, 1
  %19 = icmp ult i8 %18, %16, !insn.addr !14287
  %20 = add i64 %2, 57, !insn.addr !14288
  %21 = inttoptr i64 %20 to i8*, !insn.addr !14288
  %22 = load i8, i8* %21, align 1, !insn.addr !14288
  %23 = load i64, i64* %rax, align 8, !insn.addr !14288
  %24 = trunc i64 %23 to i8, !insn.addr !14288
  %25 = zext i1 %19 to i8, !insn.addr !14288
  %26 = add i8 %22, %25, !insn.addr !14288
  %27 = add i8 %26, %24, !insn.addr !14288
  store i8 %27, i8* %21, align 1, !insn.addr !14288
  %28 = load i64, i64* %rax, align 8
  %29 = and i64 %28, or (i64 zext (i8 ptrtoint (i8* @global_var_8 to i8) to i64), i64 -256), !insn.addr !14289
  store i64 %29, i64* %rax, align 8, !insn.addr !14289
  %30 = inttoptr i64 %0 to i32*, !insn.addr !14290
  store i32 add (i32 ptrtoint (i8** @global_var_3 to i32), i32 -1), i32* %30, align 4, !insn.addr !14290
  %31 = load i64, i64* %rax, align 8, !insn.addr !14291
  %32 = trunc i64 %31 to i8, !insn.addr !14291
  ret i8 %32, !insn.addr !14291
}

define i64 @BLACKWIDOW_SetGainLowCurrentConfig.620(i64 %arg1, i64 %arg2, i64 %arg3) local_unnamed_addr {
dec_label_pc_1fa03:
  %.reg2mem5 = alloca i32, !insn.addr !14292
  %.reg2mem3 = alloca i32, !insn.addr !14292
  %.reg2mem = alloca i32, !insn.addr !14292
  %0 = call i64 @__decompiler_undefined_function_0()
  %stack_var_-32 = alloca i32, align 4
  %1 = call i64 @mcount(), !insn.addr !14293
  store i32 0, i32* %stack_var_-32, align 4, !insn.addr !14294
  %2 = icmp eq i64 %arg1, 0, !insn.addr !14295
  %3 = icmp eq i64 %arg2, 0, !insn.addr !14296
  %4 = or i1 %2, %3
  %5 = zext i1 %4 to i8, !insn.addr !14297
  %6 = or i8 %5, ptrtoint (i32* @global_var_1 to i8)
  %7 = icmp eq i8 %6, 0, !insn.addr !14297
  store i32 0, i32* %.reg2mem5, !insn.addr !14298
  br i1 %7, label %dec_label_pc_1fa90, label %dec_label_pc_1fa33, !insn.addr !14298

dec_label_pc_1fa33:                               ; preds = %dec_label_pc_1fa03
  %8 = ptrtoint i32* %stack_var_-32 to i64, !insn.addr !14299
  store i32 0, i32* %stack_var_-32, align 4, !insn.addr !14300
  %9 = trunc i64 %8 to i8, !insn.addr !14301
  %10 = icmp eq i8 %9, 0, !insn.addr !14301
  store i32 0, i32* %.reg2mem5, !insn.addr !14302
  br i1 %10, label %dec_label_pc_1fa90, label %dec_label_pc_1fa6c, !insn.addr !14302

dec_label_pc_1fa6c:                               ; preds = %dec_label_pc_1fa33
  %11 = add i64 %arg2, ptrtoint (i16* @global_var_4 to i64), !insn.addr !14303
  %12 = inttoptr i64 %11 to i8*, !insn.addr !14303
  %13 = load i8, i8* %12, align 1, !insn.addr !14303
  %14 = icmp eq i8 %13, ptrtoint (i32* @global_var_1 to i8), !insn.addr !14303
  %15 = icmp eq i1 %14, false, !insn.addr !14304
  store i32 0, i32* %.reg2mem, !insn.addr !14304
  br i1 %15, label %dec_label_pc_1fa7a, label %dec_label_pc_1fa72, !insn.addr !14304

dec_label_pc_1fa72:                               ; preds = %dec_label_pc_1fa6c
  store i32 64, i32* %stack_var_-32, align 4, !insn.addr !14305
  store i32 64, i32* %.reg2mem, !insn.addr !14305
  br label %dec_label_pc_1fa7a, !insn.addr !14305

dec_label_pc_1fa7a:                               ; preds = %dec_label_pc_1fa72, %dec_label_pc_1fa6c
  %.reload = load i32, i32* %.reg2mem, !insn.addr !14306
  %16 = add i64 %arg2, ptrtoint (i8* @global_var_5 to i64), !insn.addr !14307
  %17 = inttoptr i64 %16 to i8*, !insn.addr !14307
  %18 = load i8, i8* %17, align 1, !insn.addr !14307
  %19 = icmp eq i8 %18, ptrtoint (i32* @global_var_1 to i8), !insn.addr !14307
  store i32 %.reload, i32* %.reg2mem3, !insn.addr !14308
  br i1 %19, label %dec_label_pc_1fa85, label %dec_label_pc_1fa80, !insn.addr !14308

dec_label_pc_1fa80:                               ; preds = %dec_label_pc_1fa7a
  %20 = or i32 %.reload, 2
  store i32 %20, i32* %stack_var_-32, align 4, !insn.addr !14306
  store i32 %20, i32* %.reg2mem3, !insn.addr !14306
  br label %dec_label_pc_1fa85, !insn.addr !14306

dec_label_pc_1fa85:                               ; preds = %dec_label_pc_1fa80, %dec_label_pc_1fa7a
  %.reload4 = load i32, i32* %.reg2mem3, !insn.addr !14309
  %21 = add i64 %arg2, ptrtoint (i8* @global_var_6 to i64), !insn.addr !14310
  %22 = inttoptr i64 %21 to i8*, !insn.addr !14310
  %23 = load i8, i8* %22, align 1, !insn.addr !14310
  %24 = icmp eq i8 %23, ptrtoint (i32* @global_var_1 to i8), !insn.addr !14310
  %25 = icmp eq i1 %24, false, !insn.addr !14311
  store i32 %.reload4, i32* %.reg2mem5, !insn.addr !14311
  br i1 %25, label %dec_label_pc_1fa90, label %dec_label_pc_1fa8b, !insn.addr !14311

dec_label_pc_1fa8b:                               ; preds = %dec_label_pc_1fa85
  %26 = or i32 %.reload4, 16
  store i32 %26, i32* %stack_var_-32, align 4, !insn.addr !14309
  store i32 %26, i32* %.reg2mem5, !insn.addr !14309
  br label %dec_label_pc_1fa90, !insn.addr !14309

dec_label_pc_1fa90:                               ; preds = %dec_label_pc_1fa8b, %dec_label_pc_1fa85, %dec_label_pc_1fa33, %dec_label_pc_1fa03
  %27 = trunc i64 %0 to i32
  %.reload6 = load i32, i32* %.reg2mem5, !insn.addr !14312
  %28 = icmp eq i32 %27, ptrtoint (i32* @global_var_1 to i32), !insn.addr !14313
  br i1 %28, label %dec_label_pc_1fb49, label %dec_label_pc_1fa9b, !insn.addr !14314

dec_label_pc_1fa9b:                               ; preds = %dec_label_pc_1fa90
  %29 = icmp ult i32 %27, ptrtoint (i32* @global_var_1 to i32), !insn.addr !14315
  br i1 %29, label %dec_label_pc_1fabc, label %dec_label_pc_1faa0, !insn.addr !14316

dec_label_pc_1faa0:                               ; preds = %dec_label_pc_1fa9b
  %30 = icmp eq i32 %27, ptrtoint (i32* @global_var_2 to i32), !insn.addr !14317
  br i1 %30, label %dec_label_pc_1fbd6, label %dec_label_pc_1faa9, !insn.addr !14318

dec_label_pc_1faa9:                               ; preds = %dec_label_pc_1faa0
  %31 = icmp eq i32 %27, ptrtoint (i8** @global_var_3 to i32), !insn.addr !14319
  br i1 %31, label %dec_label_pc_1fc6b, label %dec_label_pc_1fab2, !insn.addr !14320

dec_label_pc_1fab2:                               ; preds = %dec_label_pc_1faa9
  ret i64 0, !insn.addr !14321

dec_label_pc_1fabc:                               ; preds = %dec_label_pc_1fa9b
  %32 = sext i32 %.reload6 to i64, !insn.addr !14322
  ret i64 %32, !insn.addr !14323

dec_label_pc_1fb49:                               ; preds = %dec_label_pc_1fa90
  %33 = sext i32 %.reload6 to i64, !insn.addr !14312
  ret i64 %33, !insn.addr !14324

dec_label_pc_1fbd6:                               ; preds = %dec_label_pc_1faa0
  %34 = sext i32 %.reload6 to i64, !insn.addr !14325
  %35 = or i64 %34, ptrtoint (i32* @global_var_1 to i64), !insn.addr !14326
  ret i64 %35, !insn.addr !14327

dec_label_pc_1fc6b:                               ; preds = %dec_label_pc_1faa9
  %36 = sext i32 %.reload6 to i64, !insn.addr !14328
  %37 = or i64 %36, ptrtoint (i32* @global_var_1 to i64), !insn.addr !14329
  ret i64 %37, !insn.addr !14330
}

define i8 @BLACKWIDOW_GetGainLowCurrentConfig(i64 %ptCommunication, i64 %ptGainLowCurrent) local_unnamed_addr {
dec_label_pc_1fcd0:
  %0 = call i64 @__decompiler_undefined_function_0()
  %rax = alloca i64, align 8
  %1 = call i64 @__decompiler_undefined_function_0()
  %2 = bitcast i64* %rax to i8*
  %3 = trunc i64 %1 to i8
  %4 = mul i8 %3, 2, !insn.addr !14331
  %5 = inttoptr i64 %1 to i8*, !insn.addr !14331
  store i8 %4, i8* %5, align 1, !insn.addr !14331
  %6 = add i64 %0, -71, !insn.addr !14332
  %7 = inttoptr i64 %6 to i8*, !insn.addr !14332
  %8 = load i8, i8* %7, align 1, !insn.addr !14332
  %9 = load i64, i64* %rax, align 8, !insn.addr !14332
  %10 = trunc i64 %9 to i8, !insn.addr !14332
  %11 = add i8 %8, %10, !insn.addr !14332
  store i8 %11, i8* %7, align 1, !insn.addr !14332
  %12 = load i8, i8* %2, align 8, !insn.addr !14333
  %13 = load i64, i64* %rax, align 8
  %14 = trunc i64 %13 to i8, !insn.addr !14333
  %15 = add i8 %12, %14, !insn.addr !14333
  %16 = inttoptr i64 %13 to i8*, !insn.addr !14333
  store i8 %15, i8* %16, align 1, !insn.addr !14333
  %17 = load i8, i8* %2, align 8, !insn.addr !14334
  %18 = load i64, i64* %rax, align 8
  %19 = trunc i64 %18 to i8, !insn.addr !14334
  %20 = add i8 %17, %19, !insn.addr !14334
  %21 = inttoptr i64 %18 to i8*, !insn.addr !14334
  store i8 %20, i8* %21, align 1, !insn.addr !14334
  %22 = load i64, i64* %rax, align 8, !insn.addr !14335
  %23 = trunc i64 %22 to i8, !insn.addr !14335
  ret i8 %23, !insn.addr !14335
}

define i64 @BLACKWIDOW_GetGainLowCurrentConfig.263(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_1fd00:
  %.reg2mem = alloca i8, !insn.addr !14336
  %stack_var_-32 = alloca i8, align 1
  %0 = call i64 @mcount(), !insn.addr !14337
  store i8 0, i8* %stack_var_-32, align 1, !insn.addr !14338
  %1 = icmp eq i64 %arg1, 0, !insn.addr !14339
  %2 = icmp eq i64 %arg2, 0, !insn.addr !14340
  %or.cond = or i1 %1, %2
  %.pre3 = ptrtoint i8* %stack_var_-32 to i64
  %3 = trunc i64 %.pre3 to i8, !insn.addr !14341
  %4 = icmp eq i8 %3, 0, !insn.addr !14341
  %or.cond5 = or i1 %or.cond, %4
  store i8 0, i8* %.reg2mem, !insn.addr !14342
  br i1 %or.cond5, label %dec_label_pc_1fd79, label %dec_label_pc_1fd73, !insn.addr !14342

dec_label_pc_1fd73:                               ; preds = %dec_label_pc_1fd00
  %5 = add i64 %arg2, ptrtoint (i16* @global_var_4 to i64), !insn.addr !14343
  %6 = inttoptr i64 %5 to i8*, !insn.addr !14343
  store i8 0, i8* %6, align 1, !insn.addr !14343
  %7 = load i8, i8* %stack_var_-32, align 1, !insn.addr !14344
  %8 = and i8 %7, 2, !insn.addr !14344
  %9 = icmp eq i8 %8, 0, !insn.addr !14344
  %10 = zext i1 %9 to i8, !insn.addr !14345
  %11 = add i64 %arg2, ptrtoint (i8* @global_var_5 to i64), !insn.addr !14345
  %12 = inttoptr i64 %11 to i8*, !insn.addr !14345
  store i8 %10, i8* %12, align 1, !insn.addr !14345
  %13 = load i8, i8* %stack_var_-32, align 1, !insn.addr !14346
  %14 = and i8 %13, 16, !insn.addr !14346
  %15 = icmp eq i8 %14, 0, !insn.addr !14346
  %16 = icmp eq i1 %15, false, !insn.addr !14347
  %17 = zext i1 %16 to i8, !insn.addr !14347
  %18 = add i64 %arg2, ptrtoint (i8* @global_var_6 to i64), !insn.addr !14347
  %19 = inttoptr i64 %18 to i8*, !insn.addr !14347
  store i8 %17, i8* %19, align 1, !insn.addr !14347
  %.pre = load i8, i8* %stack_var_-32, align 1
  %20 = urem i8 %.pre, 2, !insn.addr !14348
  %21 = icmp eq i8 %20, 0, !insn.addr !14348
  %22 = icmp eq i1 %21, false, !insn.addr !14349
  store i8 %.pre, i8* %.reg2mem, !insn.addr !14349
  br i1 %22, label %dec_label_pc_1fdb9, label %dec_label_pc_1fd79, !insn.addr !14349

dec_label_pc_1fd79:                               ; preds = %dec_label_pc_1fd00, %dec_label_pc_1fd73
  %.reload = load i8, i8* %.reg2mem, !insn.addr !14350
  %23 = and i8 %.reload, 64, !insn.addr !14350
  %24 = icmp eq i8 %23, 0, !insn.addr !14350
  %25 = icmp eq i1 %24, false, !insn.addr !14351
  %26 = zext i1 %25 to i32, !insn.addr !14352
  %27 = inttoptr i64 %arg2 to i32*, !insn.addr !14352
  store i32 %26, i32* %27, align 4, !insn.addr !14352
  ret i64 %.pre3, !insn.addr !14353

dec_label_pc_1fdb9:                               ; preds = %dec_label_pc_1fd73
  ret i64 %.pre3, !insn.addr !14354
}

define i8 @BLACKWIDOW_SetGainConfig(i64 %ptCommunication, i64 %ptGain) local_unnamed_addr {
dec_label_pc_1fdd6:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = call i64 @__decompiler_undefined_function_0()
  %2 = call i64 @__decompiler_undefined_function_0()
  %3 = call i64 @__decompiler_undefined_function_0()
  %4 = add i64 %ptGain, ptrtoint (i8* @global_var_6 to i64), !insn.addr !14355
  %5 = inttoptr i64 %4 to i8*, !insn.addr !14355
  %6 = load i8, i8* %5, align 1, !insn.addr !14355
  %7 = lshr i64 %2, ptrtoint (i8* @global_var_8 to i64), !insn.addr !14355
  %8 = trunc i64 %7 to i8, !insn.addr !14355
  %9 = add i8 %6, %8, !insn.addr !14355
  store i8 %9, i8* %5, align 1, !insn.addr !14355
  %10 = trunc i64 %3 to i8, !insn.addr !14356
  %11 = icmp eq i8 %10, 0, !insn.addr !14356
  br i1 %11, label %dec_label_pc_1fdfd, label %dec_label_pc_1fde9, !insn.addr !14357

dec_label_pc_1fde9:                               ; preds = %dec_label_pc_1fdd6
  %12 = add i64 %1, -24, !insn.addr !14358
  %13 = inttoptr i64 %12 to i64*, !insn.addr !14358
  %14 = load i64, i64* %13, align 8, !insn.addr !14358
  %15 = and i64 %14, 64, !insn.addr !14359
  %16 = icmp eq i64 %15, 0, !insn.addr !14360
  %17 = trunc i64 %15 to i32, !insn.addr !14361
  %18 = zext i1 %16 to i32, !insn.addr !14361
  %19 = or i32 %18, %17, !insn.addr !14361
  %20 = or i32 %17, 3, !insn.addr !14361
  %21 = sub nsw i32 %20, %19, !insn.addr !14362
  %22 = inttoptr i64 %0 to i32*, !insn.addr !14363
  store i32 %21, i32* %22, align 4, !insn.addr !14363
  br label %dec_label_pc_1fdfd, !insn.addr !14363

dec_label_pc_1fdfd:                               ; preds = %dec_label_pc_1fde9, %dec_label_pc_1fdd6
  ret i8 %10, !insn.addr !14364
}

define i64 @BLACKWIDOW_SetGainConfig.566(i64 %arg1, i64 %arg2, i64 %arg3) local_unnamed_addr {
dec_label_pc_1fe06:
  %0 = call i64 @mcount(), !insn.addr !14365
  ret i64 0, !insn.addr !14366
}

define i8 @BLACKWIDOW_SetGainMode(i64 %ptCommunication, i32 %eGainMode) local_unnamed_addr {
dec_label_pc_20050:
  %0 = call i64 @__decompiler_undefined_function_0()
  %rax = alloca i64, align 8
  %1 = call i64 @__decompiler_undefined_function_0()
  %2 = bitcast i64* %rax to i8*
  %3 = trunc i64 %1 to i8
  %4 = mul i8 %3, 2, !insn.addr !14367
  %5 = inttoptr i64 %1 to i8*, !insn.addr !14367
  store i8 %4, i8* %5, align 1, !insn.addr !14367
  %6 = add i64 %0, -71, !insn.addr !14368
  %7 = inttoptr i64 %6 to i8*, !insn.addr !14368
  %8 = load i8, i8* %7, align 1, !insn.addr !14368
  %9 = load i64, i64* %rax, align 8, !insn.addr !14368
  %10 = trunc i64 %9 to i8, !insn.addr !14368
  %11 = add i8 %8, %10, !insn.addr !14368
  store i8 %11, i8* %7, align 1, !insn.addr !14368
  %12 = load i8, i8* %2, align 8, !insn.addr !14369
  %13 = load i64, i64* %rax, align 8
  %14 = trunc i64 %13 to i8, !insn.addr !14369
  %15 = add i8 %12, %14, !insn.addr !14369
  %16 = inttoptr i64 %13 to i8*, !insn.addr !14369
  store i8 %15, i8* %16, align 1, !insn.addr !14369
  %17 = load i8, i8* %2, align 8, !insn.addr !14370
  %18 = load i64, i64* %rax, align 8
  %19 = trunc i64 %18 to i8, !insn.addr !14370
  %20 = add i8 %17, %19, !insn.addr !14370
  %21 = inttoptr i64 %18 to i8*, !insn.addr !14370
  store i8 %20, i8* %21, align 1, !insn.addr !14370
  %22 = load i64, i64* %rax, align 8, !insn.addr !14371
  %23 = trunc i64 %22 to i8, !insn.addr !14371
  ret i8 %23, !insn.addr !14371
}

define i64 @BLACKWIDOW_SetGainMode.243(i64 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_20080:
  %0 = call i64 @mcount(), !insn.addr !14372
  %1 = add i64 %arg1, 40, !insn.addr !14373
  %2 = inttoptr i64 %1 to i64*, !insn.addr !14373
  %3 = load i64, i64* %2, align 8, !insn.addr !14373
  %4 = icmp eq i32 %arg2, ptrtoint (i32* @global_var_1 to i32), !insn.addr !14374
  br i1 %4, label %dec_label_pc_200f3, label %dec_label_pc_200b4, !insn.addr !14375

dec_label_pc_200b4:                               ; preds = %dec_label_pc_20080
  %5 = icmp ult i32 %arg2, ptrtoint (i32* @global_var_1 to i32), !insn.addr !14376
  br i1 %5, label %dec_label_pc_200ce, label %dec_label_pc_200b9, !insn.addr !14377

dec_label_pc_200b9:                               ; preds = %dec_label_pc_200b4
  %6 = icmp eq i32 %arg2, ptrtoint (i32* @global_var_2 to i32), !insn.addr !14378
  br i1 %6, label %dec_label_pc_20115, label %dec_label_pc_20137, !insn.addr !14379

dec_label_pc_200ce:                               ; preds = %dec_label_pc_200b4
  %7 = add i64 %3, 52, !insn.addr !14380
  %8 = inttoptr i64 %7 to i64*, !insn.addr !14380
  %9 = load i64, i64* %8, align 8, !insn.addr !14380
  ret i64 %9, !insn.addr !14381

dec_label_pc_200f3:                               ; preds = %dec_label_pc_20080
  %10 = add i64 %3, 84, !insn.addr !14382
  %11 = inttoptr i64 %10 to i64*, !insn.addr !14382
  %12 = load i64, i64* %11, align 8, !insn.addr !14382
  ret i64 %12, !insn.addr !14383

dec_label_pc_20115:                               ; preds = %dec_label_pc_200b9
  %13 = add i64 %3, 116, !insn.addr !14384
  %14 = inttoptr i64 %13 to i64*, !insn.addr !14384
  %15 = load i64, i64* %14, align 8, !insn.addr !14384
  ret i64 %15, !insn.addr !14385

dec_label_pc_20137:                               ; preds = %dec_label_pc_200b9
  %16 = add i64 %3, 132, !insn.addr !14386
  %17 = inttoptr i64 %16 to i64*, !insn.addr !14386
  %18 = load i64, i64* %17, align 8, !insn.addr !14386
  ret i64 %18, !insn.addr !14387
}

define i64 @function_2014d() local_unnamed_addr {
dec_label_pc_2014d:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = inttoptr i64 %0 to i16*, !insn.addr !14388
  ret i64 %0, !insn.addr !14388
}

define i8 @BLACKWIDOW_SetGain(i64 %ptCommunication) local_unnamed_addr {
dec_label_pc_20169:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = call i64 @__decompiler_undefined_function_0()
  %2 = call i64 @__decompiler_undefined_function_0()
  %3 = call i64 @__decompiler_undefined_function_0()
  %4 = call i64 @BLACKWIDOW_SetGainConfig.566(i64 %ptCommunication, i64 %1, i64 %3), !insn.addr !14389
  %5 = trunc i64 %4 to i8, !insn.addr !14390
  %6 = icmp eq i8 %5, 0, !insn.addr !14390
  br i1 %6, label %dec_label_pc_20179, label %dec_label_pc_20172, !insn.addr !14391

dec_label_pc_20172:                               ; preds = %dec_label_pc_20169
  %7 = trunc i64 %0 to i32, !insn.addr !14392
  %8 = add i64 %2, 160, !insn.addr !14392
  %9 = inttoptr i64 %8 to i32*, !insn.addr !14392
  store i32 %7, i32* %9, align 4, !insn.addr !14392
  br label %dec_label_pc_20179, !insn.addr !14392

dec_label_pc_20179:                               ; preds = %dec_label_pc_20172, %dec_label_pc_20169
  ret i8 %5, !insn.addr !14393
}

define i64 @BLACKWIDOW_SetGain.216(i64 %arg1) local_unnamed_addr {
dec_label_pc_20199:
  %0 = call i64 @mcount(), !insn.addr !14394
  %1 = add i64 %arg1, 40, !insn.addr !14395
  %2 = inttoptr i64 %1 to i64*, !insn.addr !14395
  %3 = load i64, i64* %2, align 8, !insn.addr !14395
  %4 = add i64 %3, 16, !insn.addr !14396
  %5 = inttoptr i64 %4 to i32*, !insn.addr !14396
  %6 = load i32, i32* %5, align 4, !insn.addr !14396
  %7 = zext i32 %6 to i64, !insn.addr !14396
  ret i64 %7, !insn.addr !14396
}

define i8 @BLACKWIDOW_SetXtalSettings(i64 %ptCommunication, i64 %ptXtalSettings) local_unnamed_addr {
dec_label_pc_201c2:
  %.pre-phi.reg2mem = alloca i8, !insn.addr !14397
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = call i64 @__decompiler_undefined_function_0()
  %2 = call i64 @__decompiler_undefined_function_0()
  %3 = call i64 @__decompiler_undefined_function_0()
  %4 = call i64 @__decompiler_undefined_function_0()
  %5 = call i1 @__decompiler_undefined_function_2()
  %6 = sub i64 %3, ptrtoint (i32* @global_var_1 to i64), !insn.addr !14397
  %7 = trunc i64 %4 to i8, !insn.addr !14398
  %8 = zext i1 %5 to i8, !insn.addr !14398
  %9 = add i8 %7, -119, !insn.addr !14398
  %10 = add i8 %9, %8, !insn.addr !14398
  %11 = icmp ule i8 %10, %7, !insn.addr !14398
  %12 = icmp ugt i8 %7, 118, !insn.addr !14398
  %13 = select i1 %5, i1 %11, i1 %12, !insn.addr !14398
  %14 = call i8 @__asm_in.625(i8 -117), !insn.addr !14399
  %15 = add i64 %6, -1924601787, !insn.addr !14400
  %16 = inttoptr i64 %15 to i8*, !insn.addr !14400
  %17 = load i8, i8* %16, align 1, !insn.addr !14400
  %18 = trunc i64 %6 to i8, !insn.addr !14400
  %.neg1 = sext i1 %13 to i8
  %.neg2 = sub i8 %17, %18, !insn.addr !14400
  %19 = add i8 %.neg2, %.neg1, !insn.addr !14400
  store i8 %19, i8* %16, align 1, !insn.addr !14400
  %20 = trunc i64 %2 to i16, !insn.addr !14401
  %21 = call i8 @__asm_in(i16 %20), !insn.addr !14401
  %22 = add i64 %0, -32, !insn.addr !14402
  %23 = call i64 @BLACKWIDOW_GetGainMode.289(i64 %ptCommunication, i64 %22, i64 %2), !insn.addr !14403
  %24 = trunc i64 %23 to i8
  %25 = icmp eq i8 %24, 0, !insn.addr !14404
  store i8 0, i8* %.pre-phi.reg2mem, !insn.addr !14405
  br i1 %25, label %dec_label_pc_201eb, label %dec_label_pc_201e0, !insn.addr !14405

dec_label_pc_201e0:                               ; preds = %dec_label_pc_201c2
  %26 = add i64 %0, -20, !insn.addr !14406
  %27 = inttoptr i64 %26 to i32*, !insn.addr !14406
  %28 = load i32, i32* %27, align 4, !insn.addr !14406
  %29 = call i64 @BLACKWIDOW_SetGainMode.243(i64 %1, i32 %28), !insn.addr !14407
  %.pre = trunc i64 %29 to i8, !insn.addr !14408
  store i8 %.pre, i8* %.pre-phi.reg2mem, !insn.addr !14407
  br label %dec_label_pc_201eb, !insn.addr !14407

dec_label_pc_201eb:                               ; preds = %dec_label_pc_201e0, %dec_label_pc_201c2
  %.pre-phi.reload = load i8, i8* %.pre-phi.reg2mem
  ret i8 %.pre-phi.reload, !insn.addr !14408
}

define i64 @BLACKWIDOW_SetXtalSettings.197(i64 %arg1, i64 %arg2, i64 %arg3) local_unnamed_addr {
dec_label_pc_201f2:
  %stack_var_-32.8.reg2mem = alloca i32, !insn.addr !14409
  %stack_var_-32.7.reg2mem = alloca i32, !insn.addr !14409
  %stack_var_-32.6.reg2mem = alloca i32, !insn.addr !14409
  %0 = call i64 @mcount(), !insn.addr !14410
  %1 = add i64 %arg2, ptrtoint ([4 x i8]* @global_var_c to i64), !insn.addr !14411
  %2 = inttoptr i64 %1 to i32*, !insn.addr !14411
  %3 = load i32, i32* %2, align 4, !insn.addr !14411
  %4 = icmp ugt i32 %3, ptrtoint (i8** @global_var_3 to i32)
  store i32 0, i32* %stack_var_-32.6.reg2mem, !insn.addr !14412
  br i1 %4, label %dec_label_pc_20370, label %dec_label_pc_2035f, !insn.addr !14412

dec_label_pc_2035f:                               ; preds = %dec_label_pc_201f2
  %5 = zext i32 %3 to i64, !insn.addr !14411
  %6 = shl i64 %5, ptrtoint (i8* @global_var_6 to i64), !insn.addr !14413
  %7 = trunc i64 %6 to i32
  %8 = and i32 %7, 192, !insn.addr !14414
  store i32 %8, i32* %stack_var_-32.6.reg2mem, !insn.addr !14414
  br label %dec_label_pc_20370, !insn.addr !14414

dec_label_pc_20370:                               ; preds = %dec_label_pc_201f2, %dec_label_pc_2035f
  %stack_var_-32.6.reload = load i32, i32* %stack_var_-32.6.reg2mem
  %9 = add i64 %arg2, ptrtoint (i8* @global_var_10 to i64), !insn.addr !14415
  %10 = inttoptr i64 %9 to i32*, !insn.addr !14415
  %11 = load i32, i32* %10, align 4, !insn.addr !14415
  %12 = icmp ugt i32 %11, ptrtoint (i8** @global_var_3 to i32)
  store i32 %stack_var_-32.6.reload, i32* %stack_var_-32.7.reg2mem, !insn.addr !14416
  br i1 %12, label %dec_label_pc_2038a, label %dec_label_pc_2037f, !insn.addr !14416

dec_label_pc_2037f:                               ; preds = %dec_label_pc_20370
  %13 = and i32 %11, ptrtoint (i8** @global_var_3 to i32)
  %14 = zext i32 %13 to i64, !insn.addr !14417
  %15 = shl i64 %14, ptrtoint (i16* @global_var_4 to i64), !insn.addr !14418
  %16 = trunc i64 %15 to i32
  %17 = or i32 %stack_var_-32.6.reload, %16, !insn.addr !14419
  store i32 %17, i32* %stack_var_-32.7.reg2mem, !insn.addr !14419
  br label %dec_label_pc_2038a, !insn.addr !14419

dec_label_pc_2038a:                               ; preds = %dec_label_pc_20370, %dec_label_pc_2037f
  %stack_var_-32.7.reload = load i32, i32* %stack_var_-32.7.reg2mem
  %18 = add i64 %arg2, ptrtoint (i32** @global_var_14 to i64), !insn.addr !14420
  %19 = inttoptr i64 %18 to i32*, !insn.addr !14420
  %20 = load i32, i32* %19, align 4, !insn.addr !14420
  %21 = icmp ugt i32 %20, ptrtoint (i8** @global_var_3 to i32)
  store i32 %stack_var_-32.7.reload, i32* %stack_var_-32.8.reg2mem, !insn.addr !14421
  br i1 %21, label %dec_label_pc_203a4, label %dec_label_pc_20399, !insn.addr !14421

dec_label_pc_20399:                               ; preds = %dec_label_pc_2038a
  %22 = and i32 %20, ptrtoint (i8** @global_var_3 to i32)
  %23 = zext i32 %22 to i64, !insn.addr !14422
  %24 = shl i64 %23, ptrtoint (i32* @global_var_2 to i64), !insn.addr !14423
  %25 = trunc i64 %24 to i32
  %26 = or i32 %stack_var_-32.7.reload, %25, !insn.addr !14424
  store i32 %26, i32* %stack_var_-32.8.reg2mem, !insn.addr !14424
  br label %dec_label_pc_203a4, !insn.addr !14424

dec_label_pc_203a4:                               ; preds = %dec_label_pc_2038a, %dec_label_pc_20399
  %stack_var_-32.8.reload = load i32, i32* %stack_var_-32.8.reg2mem
  %27 = add i64 %arg2, ptrtoint (i32** @global_var_18 to i64), !insn.addr !14425
  %28 = inttoptr i64 %27 to i8*, !insn.addr !14425
  %29 = load i8, i8* %28, align 1, !insn.addr !14425
  %30 = icmp eq i8 %29, ptrtoint (i32* @global_var_1 to i8), !insn.addr !14425
  %31 = icmp eq i1 %30, false, !insn.addr !14426
  %32 = or i32 %stack_var_-32.8.reload, ptrtoint (i32* @global_var_2 to i32)
  %spec.select = select i1 %31, i32 %stack_var_-32.8.reload, i32 %32
  %33 = add i64 %arg2, ptrtoint (i8** @global_var_19 to i64), !insn.addr !14427
  %34 = inttoptr i64 %33 to i8*, !insn.addr !14427
  %35 = load i8, i8* %34, align 1, !insn.addr !14427
  %36 = icmp eq i8 %35, ptrtoint (i32* @global_var_1 to i8), !insn.addr !14427
  %37 = icmp eq i1 %36, false, !insn.addr !14428
  %38 = or i32 %spec.select, ptrtoint (i32* @global_var_1 to i32)
  %stack_var_-32.10 = select i1 %37, i32 %spec.select, i32 %38
  %39 = sext i32 %stack_var_-32.10 to i64, !insn.addr !14429
  ret i64 %39, !insn.addr !14430
}

define i8 @BLACKWIDOW_GetXtalSettings(i64 %ptCommunication, i64 %ptXtalSettings) local_unnamed_addr {
dec_label_pc_2041d:
  %0 = call i64 @__decompiler_undefined_function_0()
  %rax = alloca i64, align 8
  %1 = call i64 @__decompiler_undefined_function_0()
  %2 = bitcast i64* %rax to i8*
  %3 = trunc i64 %1 to i8
  %4 = mul i8 %3, 2, !insn.addr !14431
  %5 = inttoptr i64 %1 to i8*, !insn.addr !14431
  store i8 %4, i8* %5, align 1, !insn.addr !14431
  %6 = add i64 %0, -71, !insn.addr !14432
  %7 = inttoptr i64 %6 to i8*, !insn.addr !14432
  %8 = load i8, i8* %7, align 1, !insn.addr !14432
  %9 = load i64, i64* %rax, align 8, !insn.addr !14432
  %10 = trunc i64 %9 to i8, !insn.addr !14432
  %11 = add i8 %8, %10, !insn.addr !14432
  store i8 %11, i8* %7, align 1, !insn.addr !14432
  %12 = load i8, i8* %2, align 8, !insn.addr !14433
  %13 = load i64, i64* %rax, align 8
  %14 = trunc i64 %13 to i8, !insn.addr !14433
  %15 = add i8 %12, %14, !insn.addr !14433
  %16 = inttoptr i64 %13 to i8*, !insn.addr !14433
  store i8 %15, i8* %16, align 1, !insn.addr !14433
  %17 = load i8, i8* %2, align 8, !insn.addr !14434
  %18 = load i64, i64* %rax, align 8
  %19 = trunc i64 %18 to i8, !insn.addr !14434
  %20 = add i8 %17, %19, !insn.addr !14434
  %21 = inttoptr i64 %18 to i8*, !insn.addr !14434
  store i8 %20, i8* %21, align 1, !insn.addr !14434
  %22 = load i64, i64* %rax, align 8, !insn.addr !14435
  %23 = trunc i64 %22 to i8, !insn.addr !14435
  ret i8 %23, !insn.addr !14435
}

define i64 @BLACKWIDOW_GetXtalSettings.555(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_2044d:
  %stack_var_-32 = alloca i8, align 1
  %0 = call i64 @mcount(), !insn.addr !14436
  store i8 0, i8* %stack_var_-32, align 1, !insn.addr !14437
  %1 = inttoptr i64 %arg2 to i8*, !insn.addr !14438
  store i8 0, i8* %1, align 1, !insn.addr !14438
  %2 = load i8, i8* %stack_var_-32, align 1, !insn.addr !14439
  %3 = and i8 %2, 64, !insn.addr !14439
  %4 = icmp eq i8 %3, 0, !insn.addr !14439
  %5 = zext i1 %4 to i8, !insn.addr !14440
  %6 = add i64 %arg2, ptrtoint (i32* @global_var_1 to i64), !insn.addr !14440
  %7 = inttoptr i64 %6 to i8*, !insn.addr !14440
  store i8 %5, i8* %7, align 1, !insn.addr !14440
  %8 = load i8, i8* %stack_var_-32, align 1, !insn.addr !14441
  %9 = and i8 %8, 32, !insn.addr !14441
  %10 = icmp eq i8 %9, 0, !insn.addr !14441
  %11 = zext i1 %10 to i8, !insn.addr !14442
  %12 = add i64 %arg2, ptrtoint (i32* @global_var_2 to i64), !insn.addr !14442
  %13 = inttoptr i64 %12 to i8*, !insn.addr !14442
  store i8 %11, i8* %13, align 1, !insn.addr !14442
  %14 = load i8, i8* %stack_var_-32, align 1, !insn.addr !14443
  %15 = sext i8 %14 to i64, !insn.addr !14443
  %16 = lshr i64 %15, ptrtoint (i8** @global_var_3 to i64), !insn.addr !14444
  %17 = trunc i64 %16 to i32, !insn.addr !14445
  %18 = and i32 %17, ptrtoint (i8** @global_var_3 to i32), !insn.addr !14445
  %19 = add i64 %arg2, ptrtoint (i16* @global_var_4 to i64), !insn.addr !14446
  %20 = inttoptr i64 %19 to i32*, !insn.addr !14446
  store i32 %18, i32* %20, align 4, !insn.addr !14446
  %21 = and i8 %14, 4, !insn.addr !14447
  %22 = icmp eq i8 %21, 0, !insn.addr !14447
  %23 = icmp eq i1 %22, false, !insn.addr !14448
  %24 = zext i1 %23 to i8, !insn.addr !14448
  %25 = add i64 %arg2, ptrtoint (i8* @global_var_8 to i64), !insn.addr !14448
  %26 = inttoptr i64 %25 to i8*, !insn.addr !14448
  store i8 %24, i8* %26, align 1, !insn.addr !14448
  %27 = load i8, i8* %stack_var_-32, align 1, !insn.addr !14449
  %28 = and i8 %27, 2, !insn.addr !14449
  %29 = icmp eq i8 %28, 0, !insn.addr !14449
  %30 = icmp eq i1 %29, false, !insn.addr !14450
  %31 = zext i1 %30 to i8, !insn.addr !14450
  %32 = add i64 %arg2, ptrtoint (i8** @global_var_9 to i64), !insn.addr !14450
  %33 = inttoptr i64 %32 to i8*, !insn.addr !14450
  store i8 %31, i8* %33, align 1, !insn.addr !14450
  %34 = load i8, i8* %stack_var_-32, align 1, !insn.addr !14451
  %35 = urem i8 %34, 2, !insn.addr !14451
  %36 = icmp eq i8 %35, 0, !insn.addr !14451
  %37 = icmp eq i1 %36, false, !insn.addr !14452
  %38 = zext i1 %37 to i8, !insn.addr !14452
  %39 = add i64 %arg2, ptrtoint (i8* @global_var_a to i64), !insn.addr !14452
  %40 = inttoptr i64 %39 to i8*, !insn.addr !14452
  store i8 %38, i8* %40, align 1, !insn.addr !14452
  store i8 0, i8* %stack_var_-32, align 1, !insn.addr !14453
  %41 = add i64 %arg2, ptrtoint ([4 x i8]* @global_var_c to i64), !insn.addr !14454
  %42 = inttoptr i64 %41 to i32*, !insn.addr !14454
  store i32 0, i32* %42, align 4, !insn.addr !14454
  %43 = add i64 %arg2, ptrtoint (i8* @global_var_10 to i64), !insn.addr !14455
  %44 = inttoptr i64 %43 to i32*, !insn.addr !14455
  store i32 0, i32* %44, align 4, !insn.addr !14455
  %45 = add i64 %arg2, ptrtoint (i32** @global_var_14 to i64), !insn.addr !14456
  %46 = inttoptr i64 %45 to i32*, !insn.addr !14456
  store i32 0, i32* %46, align 4, !insn.addr !14456
  %47 = add i64 %arg2, ptrtoint (i32** @global_var_18 to i64), !insn.addr !14457
  %48 = inttoptr i64 %47 to i8*, !insn.addr !14457
  store i8 0, i8* %48, align 1, !insn.addr !14457
  %49 = load i8, i8* %stack_var_-32, align 1, !insn.addr !14458
  %50 = urem i8 %49, 2, !insn.addr !14458
  %51 = icmp eq i8 %50, 0, !insn.addr !14458
  %52 = icmp eq i1 %51, false, !insn.addr !14459
  %53 = zext i1 %52 to i8, !insn.addr !14459
  %54 = add i64 %arg2, ptrtoint (i8** @global_var_19 to i64), !insn.addr !14459
  %55 = inttoptr i64 %54 to i8*, !insn.addr !14459
  store i8 %53, i8* %55, align 1, !insn.addr !14459
  %56 = ptrtoint i8* %stack_var_-32 to i64, !insn.addr !14460
  ret i64 %56, !insn.addr !14461
}

define i8 @BLACKWIDOW_SetXtalExtClkSettings(i64 %ptCommunication, i8 %extClkOvr, i8 %extClkEn, i32 %extClkFiltSel, i32 %extDivSel) local_unnamed_addr {
dec_label_pc_20563:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = call i64 @__decompiler_undefined_function_0()
  %2 = call i64 @__decompiler_undefined_function_0()
  %3 = trunc i64 %2 to i8
  %4 = mul i8 %3, 2, !insn.addr !14462
  %5 = inttoptr i64 %2 to i8*, !insn.addr !14462
  store i8 %4, i8* %5, align 1, !insn.addr !14462
  %6 = add i64 %0, -24, !insn.addr !14463
  %7 = inttoptr i64 %6 to i64*, !insn.addr !14463
  %8 = load i64, i64* %7, align 8, !insn.addr !14463
  %9 = trunc i64 %8 to i32, !insn.addr !14464
  %10 = add i64 %1, ptrtoint (i32** @global_var_1c to i64), !insn.addr !14464
  %11 = inttoptr i64 %10 to i32*, !insn.addr !14464
  store i32 %9, i32* %11, align 4, !insn.addr !14464
  ret i8 %3, !insn.addr !14465
}

define i64 @BLACKWIDOW_SetXtalExtClkSettings.404(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4, i64 %arg5) local_unnamed_addr {
dec_label_pc_20593:
  %stack_var_-64.1.reg2mem = alloca i32, !insn.addr !14466
  %0 = call i64 @mcount(), !insn.addr !14467
  %1 = trunc i64 %arg4 to i32, !insn.addr !14468
  %2 = icmp ugt i32 %1, ptrtoint (i8** @global_var_3 to i32)
  %3 = and i64 %arg4, zext (i32 ptrtoint (i8** @global_var_3 to i32) to i64)
  %4 = shl i64 %3, ptrtoint (i16* @global_var_4 to i64)
  %5 = trunc i64 %4 to i32
  %stack_var_-64.0 = select i1 %2, i32 0, i32 %5
  %6 = trunc i64 %arg5 to i32, !insn.addr !14469
  %7 = icmp ugt i32 %6, ptrtoint (i8** @global_var_3 to i32)
  store i32 %stack_var_-64.0, i32* %stack_var_-64.1.reg2mem, !insn.addr !14470
  br i1 %7, label %dec_label_pc_20649, label %dec_label_pc_2063d, !insn.addr !14470

dec_label_pc_2063d:                               ; preds = %dec_label_pc_20593
  %8 = and i64 %arg5, zext (i32 ptrtoint (i8** @global_var_3 to i32) to i64), !insn.addr !14471
  %9 = shl i64 %8, ptrtoint (i32* @global_var_2 to i64), !insn.addr !14472
  %10 = trunc i64 %9 to i32
  %11 = or i32 %stack_var_-64.0, %10, !insn.addr !14473
  store i32 %11, i32* %stack_var_-64.1.reg2mem, !insn.addr !14473
  br label %dec_label_pc_20649, !insn.addr !14473

dec_label_pc_20649:                               ; preds = %dec_label_pc_20593, %dec_label_pc_2063d
  %stack_var_-64.1.reload = load i32, i32* %stack_var_-64.1.reg2mem
  %12 = trunc i64 %arg3 to i8, !insn.addr !14474
  %13 = icmp eq i8 %12, ptrtoint (i32* @global_var_1 to i8), !insn.addr !14474
  %14 = icmp eq i1 %13, false, !insn.addr !14475
  %15 = or i32 %stack_var_-64.1.reload, ptrtoint (i32* @global_var_2 to i32)
  %spec.select = select i1 %14, i32 %stack_var_-64.1.reload, i32 %15
  %16 = trunc i64 %arg2 to i8, !insn.addr !14476
  %17 = icmp eq i8 %16, ptrtoint (i32* @global_var_1 to i8), !insn.addr !14476
  %18 = icmp eq i1 %17, false, !insn.addr !14477
  %19 = or i32 %spec.select, ptrtoint (i32* @global_var_1 to i32)
  %stack_var_-64.3 = select i1 %18, i32 %spec.select, i32 %19
  %20 = sext i32 %stack_var_-64.3 to i64, !insn.addr !14478
  ret i64 %20, !insn.addr !14479
}

define i8 @BLACKWIDOW_GetXtalExtClkSettings(i64 %ptCommunication, i8* %pExtClkOvr, i8* %pExtClkEn, i32* %pExtClkFiltSel, i32* %pExtDivSel) local_unnamed_addr {
dec_label_pc_20685:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = trunc i64 %0 to i8
  %2 = mul i8 %1, 2, !insn.addr !14480
  %3 = inttoptr i64 %0 to i8*, !insn.addr !14480
  store i8 %2, i8* %3, align 1, !insn.addr !14480
  ret i8 %1, !insn.addr !14481
}

define i64 @BLACKWIDOW_GetXtalExtClkSettings.330(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4, i64 %arg5) local_unnamed_addr {
dec_label_pc_206b5:
  %stack_var_-48 = alloca i64, align 8
  %0 = call i64 @mcount(), !insn.addr !14482
  %1 = ptrtoint i64* %stack_var_-48 to i64, !insn.addr !14483
  %2 = inttoptr i64 %arg4 to i32*, !insn.addr !14484
  store i32 0, i32* %2, align 4, !insn.addr !14484
  ret i64 %1, !insn.addr !14484
}

define i8 @BLACKWIDOW_SetLoConfig(i64 %ptCommunication, i64 %ptLoSettings) local_unnamed_addr {
dec_label_pc_2072d:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = call i64 @__decompiler_undefined_function_0()
  %2 = call i64 @__decompiler_undefined_function_0()
  %3 = call i64 @__decompiler_undefined_function_0()
  %4 = call i64 @__decompiler_undefined_function_0()
  %5 = call i64 @__decompiler_undefined_function_0()
  %6 = lshr i64 %4, ptrtoint (i32* @global_var_2 to i64), !insn.addr !14485
  %7 = trunc i64 %6 to i32, !insn.addr !14486
  %8 = and i32 %7, ptrtoint (i8** @global_var_3 to i32), !insn.addr !14486
  %9 = inttoptr i64 %3 to i32*, !insn.addr !14487
  store i32 %8, i32* %9, align 4, !insn.addr !14487
  %10 = trunc i64 %4 to i32, !insn.addr !14488
  %11 = and i32 %10, ptrtoint (i32* @global_var_2 to i32), !insn.addr !14488
  %12 = icmp eq i32 %11, 0, !insn.addr !14488
  %13 = icmp eq i1 %12, false, !insn.addr !14489
  %14 = zext i1 %13 to i8, !insn.addr !14489
  %15 = inttoptr i64 %1 to i8*, !insn.addr !14489
  store i8 %14, i8* %15, align 1, !insn.addr !14489
  %16 = add i64 %2, -40, !insn.addr !14490
  %17 = inttoptr i64 %16 to i64*, !insn.addr !14490
  %18 = load i64, i64* %17, align 8, !insn.addr !14490
  %19 = trunc i64 %18 to i8, !insn.addr !14491
  %20 = and i8 %19, ptrtoint (i32* @global_var_1 to i8), !insn.addr !14491
  %21 = inttoptr i64 %0 to i8*, !insn.addr !14492
  store i8 %20, i8* %21, align 1, !insn.addr !14492
  %22 = trunc i64 %5 to i8, !insn.addr !14493
  ret i8 %22, !insn.addr !14493
}

define i64 @BLACKWIDOW_SetLoConfig.554(i64 %arg1, i64* %arg2, i64 %arg3) local_unnamed_addr {
dec_label_pc_2075d:
  %0 = ptrtoint i64* %arg2 to i64
  %1 = call i64 @mcount(), !insn.addr !14494
  %2 = add i64 %0, ptrtoint (i8** @global_var_7 to i64), !insn.addr !14495
  %3 = inttoptr i64 %2 to i8*, !insn.addr !14495
  %4 = load i8, i8* %3, align 1, !insn.addr !14495
  %5 = zext i8 %4 to i64, !insn.addr !14495
  ret i64 %5, !insn.addr !14496
}

define i8 @BLACKWIDOW_GetLoConfig(i64 %ptCommunication, i64 %ptLoSettings) local_unnamed_addr {
dec_label_pc_2091d:
  %0 = call i64 @__decompiler_undefined_function_0()
  %rax = alloca i64, align 8
  %1 = call i64 @__decompiler_undefined_function_0()
  %2 = bitcast i64* %rax to i8*
  %3 = trunc i64 %1 to i8
  %4 = mul i8 %3, 2, !insn.addr !14497
  %5 = inttoptr i64 %1 to i8*, !insn.addr !14497
  store i8 %4, i8* %5, align 1, !insn.addr !14497
  %6 = add i64 %0, -71, !insn.addr !14498
  %7 = inttoptr i64 %6 to i8*, !insn.addr !14498
  %8 = load i8, i8* %7, align 1, !insn.addr !14498
  %9 = load i64, i64* %rax, align 8, !insn.addr !14498
  %10 = trunc i64 %9 to i8, !insn.addr !14498
  %11 = add i8 %8, %10, !insn.addr !14498
  store i8 %11, i8* %7, align 1, !insn.addr !14498
  %12 = load i8, i8* %2, align 8, !insn.addr !14499
  %13 = load i64, i64* %rax, align 8
  %14 = trunc i64 %13 to i8, !insn.addr !14499
  %15 = add i8 %12, %14, !insn.addr !14499
  %16 = inttoptr i64 %13 to i8*, !insn.addr !14499
  store i8 %15, i8* %16, align 1, !insn.addr !14499
  %17 = load i8, i8* %2, align 8, !insn.addr !14500
  %18 = load i64, i64* %rax, align 8
  %19 = trunc i64 %18 to i8, !insn.addr !14500
  %20 = add i8 %17, %19, !insn.addr !14500
  %21 = inttoptr i64 %18 to i8*, !insn.addr !14500
  store i8 %20, i8* %21, align 1, !insn.addr !14500
  %22 = load i64, i64* %rax, align 8, !insn.addr !14501
  %23 = trunc i64 %22 to i8, !insn.addr !14501
  ret i8 %23, !insn.addr !14501
}

define i64 @BLACKWIDOW_GetLoConfig.380(i64 %arg1, i64* %arg2, i64 %arg3) local_unnamed_addr {
dec_label_pc_2094d:
  %0 = ptrtoint i64* %arg2 to i64
  %stack_var_-32 = alloca i32, align 4
  %1 = call i64 @mcount(), !insn.addr !14502
  store i32 0, i32* %stack_var_-32, align 4, !insn.addr !14503
  %2 = bitcast i64* %arg2 to i8*, !insn.addr !14504
  store i8 0, i8* %2, align 1, !insn.addr !14504
  %3 = add i64 %0, ptrtoint (i32* @global_var_1 to i64), !insn.addr !14505
  %4 = inttoptr i64 %3 to i8*, !insn.addr !14505
  store i8 0, i8* %4, align 1, !insn.addr !14505
  %5 = add i64 %0, ptrtoint (i32* @global_var_2 to i64), !insn.addr !14506
  %6 = inttoptr i64 %5 to i8*, !insn.addr !14506
  store i8 0, i8* %6, align 1, !insn.addr !14506
  %7 = add i64 %0, ptrtoint (i8** @global_var_3 to i64), !insn.addr !14507
  %8 = inttoptr i64 %7 to i8*, !insn.addr !14507
  store i8 0, i8* %8, align 1, !insn.addr !14507
  %9 = add i64 %0, ptrtoint (i16* @global_var_4 to i64), !insn.addr !14508
  %10 = inttoptr i64 %9 to i8*, !insn.addr !14508
  store i8 0, i8* %10, align 1, !insn.addr !14508
  %11 = add i64 %0, ptrtoint (i8* @global_var_5 to i64), !insn.addr !14509
  %12 = inttoptr i64 %11 to i8*, !insn.addr !14509
  store i8 0, i8* %12, align 1, !insn.addr !14509
  %13 = add i64 %0, ptrtoint (i8* @global_var_8 to i64), !insn.addr !14510
  %14 = inttoptr i64 %13 to i8*, !insn.addr !14510
  store i8 0, i8* %14, align 1, !insn.addr !14510
  %15 = add i64 %0, ptrtoint (i8* @global_var_6 to i64), !insn.addr !14511
  %16 = inttoptr i64 %15 to i8*, !insn.addr !14511
  store i8 0, i8* %16, align 1, !insn.addr !14511
  %17 = load i32, i32* %stack_var_-32, align 4, !insn.addr !14512
  %18 = sext i32 %17 to i64, !insn.addr !14512
  %19 = lshr i64 %18, ptrtoint (i8** @global_var_7 to i64), !insn.addr !14513
  %20 = trunc i64 %19 to i8, !insn.addr !14514
  %21 = and i8 %20, ptrtoint (i32* @global_var_1 to i8), !insn.addr !14514
  %22 = add i64 %0, ptrtoint (i8** @global_var_9 to i64), !insn.addr !14515
  %23 = inttoptr i64 %22 to i8*, !insn.addr !14515
  store i8 %21, i8* %23, align 1, !insn.addr !14515
  %24 = lshr i64 %18, ptrtoint (i8* @global_var_5 to i64), !insn.addr !14516
  %25 = trunc i64 %24 to i8, !insn.addr !14517
  %26 = and i8 %25, ptrtoint (i32* @global_var_1 to i8), !insn.addr !14517
  %27 = add i64 %0, ptrtoint (i8* @global_var_a to i64), !insn.addr !14518
  %28 = inttoptr i64 %27 to i8*, !insn.addr !14518
  store i8 %26, i8* %28, align 1, !insn.addr !14518
  %29 = lshr i64 %18, ptrtoint (i8** @global_var_3 to i64), !insn.addr !14519
  %30 = trunc i64 %29 to i8, !insn.addr !14520
  %31 = and i8 %30, ptrtoint (i32* @global_var_1 to i8), !insn.addr !14520
  %32 = add i64 %0, ptrtoint (i8** @global_var_b to i64), !insn.addr !14521
  %33 = inttoptr i64 %32 to i8*, !insn.addr !14521
  store i8 %31, i8* %33, align 1, !insn.addr !14521
  %34 = lshr i64 %18, ptrtoint (i32* @global_var_2 to i64), !insn.addr !14522
  %35 = trunc i64 %34 to i8, !insn.addr !14523
  %36 = and i8 %35, ptrtoint (i32* @global_var_1 to i8), !insn.addr !14523
  %37 = add i64 %0, ptrtoint ([4 x i8]* @global_var_c to i64), !insn.addr !14524
  %38 = inttoptr i64 %37 to i8*, !insn.addr !14524
  store i8 %36, i8* %38, align 1, !insn.addr !14524
  %39 = ptrtoint i32* %stack_var_-32 to i64, !insn.addr !14525
  ret i64 %39, !insn.addr !14526
}

define i8 @BLACKWIDOW_GetVcoStatus(i64 %ptCommunication, i64 %ptStatus) local_unnamed_addr {
dec_label_pc_20a86:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = call i64 @__decompiler_undefined_function_0()
  %2 = call i64 @__decompiler_undefined_function_0()
  %3 = trunc i64 %2 to i8
  %4 = mul i8 %3, 2, !insn.addr !14527
  %5 = inttoptr i64 %2 to i8*, !insn.addr !14527
  store i8 %4, i8* %5, align 1, !insn.addr !14527
  %6 = add i64 %0, -24, !insn.addr !14528
  %7 = inttoptr i64 %6 to i64*, !insn.addr !14528
  %8 = load i64, i64* %7, align 8, !insn.addr !14528
  %9 = trunc i64 %8 to i8, !insn.addr !14529
  %10 = add i64 %1, ptrtoint (i8** @global_var_7 to i64), !insn.addr !14529
  %11 = inttoptr i64 %10 to i8*, !insn.addr !14529
  store i8 %9, i8* %11, align 1, !insn.addr !14529
  ret i8 %3, !insn.addr !14530
}

define i64 @BLACKWIDOW_GetVcoStatus.151(i64 %arg1, i32* %arg2, i64 %arg3) local_unnamed_addr {
dec_label_pc_20ab6:
  %0 = ptrtoint i32* %arg2 to i64
  %stack_var_-32 = alloca i32, align 4
  %1 = call i64 @mcount(), !insn.addr !14531
  store i32 0, i32* %stack_var_-32, align 4, !insn.addr !14532
  store i32 0, i32* %arg2, align 4, !insn.addr !14533
  %2 = add i64 %0, ptrtoint (i16* @global_var_4 to i64), !insn.addr !14534
  %3 = inttoptr i64 %2 to i8*, !insn.addr !14534
  store i8 0, i8* %3, align 1, !insn.addr !14534
  %4 = add i64 %0, ptrtoint (i8* @global_var_5 to i64), !insn.addr !14535
  %5 = inttoptr i64 %4 to i8*, !insn.addr !14535
  store i8 0, i8* %5, align 1, !insn.addr !14535
  %6 = add i64 %0, ptrtoint (i8* @global_var_8 to i64), !insn.addr !14536
  %7 = inttoptr i64 %6 to i32*, !insn.addr !14536
  store i32 0, i32* %7, align 4, !insn.addr !14536
  %8 = add i64 %0, ptrtoint ([4 x i8]* @global_var_c to i64), !insn.addr !14537
  %9 = inttoptr i64 %8 to i8*, !insn.addr !14537
  store i8 0, i8* %9, align 1, !insn.addr !14537
  %10 = add i64 %0, ptrtoint ([3 x i8]* @global_var_d to i64), !insn.addr !14538
  %11 = inttoptr i64 %10 to i8*, !insn.addr !14538
  store i8 0, i8* %11, align 1, !insn.addr !14538
  %12 = load i32, i32* %stack_var_-32, align 4, !insn.addr !14539
  %13 = sext i32 %12 to i64, !insn.addr !14539
  %14 = lshr i64 %13, ptrtoint (i8** @global_var_7 to i64), !insn.addr !14540
  %15 = trunc i64 %14 to i8, !insn.addr !14541
  %16 = and i8 %15, ptrtoint (i32* @global_var_1 to i8), !insn.addr !14541
  %17 = add i64 %0, ptrtoint (i16** @global_var_e to i64), !insn.addr !14542
  %18 = inttoptr i64 %17 to i8*, !insn.addr !14542
  store i8 %16, i8* %18, align 1, !insn.addr !14542
  %19 = lshr i64 %13, ptrtoint (i8* @global_var_6 to i64), !insn.addr !14543
  %20 = trunc i64 %19 to i8, !insn.addr !14544
  %21 = and i8 %20, ptrtoint (i32* @global_var_1 to i8), !insn.addr !14544
  %22 = add i64 %0, ptrtoint (i8* @global_var_f to i64), !insn.addr !14545
  %23 = inttoptr i64 %22 to i8*, !insn.addr !14545
  store i8 %21, i8* %23, align 1, !insn.addr !14545
  %24 = lshr i64 %13, ptrtoint (i8* @global_var_5 to i64), !insn.addr !14546
  %25 = trunc i64 %24 to i32, !insn.addr !14547
  %26 = and i32 %25, ptrtoint (i32* @global_var_1 to i32), !insn.addr !14547
  %27 = add i64 %0, ptrtoint (i8* @global_var_10 to i64), !insn.addr !14548
  %28 = inttoptr i64 %27 to i32*, !insn.addr !14548
  store i32 %26, i32* %28, align 4, !insn.addr !14548
  %29 = lshr i64 %13, ptrtoint (i16* @global_var_4 to i64), !insn.addr !14549
  %30 = trunc i64 %29 to i8, !insn.addr !14550
  %31 = and i8 %30, ptrtoint (i32* @global_var_1 to i8), !insn.addr !14550
  %32 = add i64 %0, ptrtoint (i32** @global_var_14 to i64), !insn.addr !14551
  %33 = inttoptr i64 %32 to i8*, !insn.addr !14551
  store i8 %31, i8* %33, align 1, !insn.addr !14551
  %34 = load i32, i32* %stack_var_-32, align 4, !insn.addr !14552
  %35 = trunc i32 %34 to i8, !insn.addr !14553
  %36 = add i64 %0, ptrtoint (i8** @global_var_15 to i64), !insn.addr !14553
  %37 = inttoptr i64 %36 to i8*, !insn.addr !14553
  store i8 %35, i8* %37, align 1, !insn.addr !14553
  %38 = ptrtoint i32* %stack_var_-32 to i64, !insn.addr !14554
  ret i64 %38, !insn.addr !14555
}

define i8 @BLACKWIDOW_GetStatus(i64 %ptCommunication, i64 %ptStatus) local_unnamed_addr {
dec_label_pc_20c68:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = call i64 @__decompiler_undefined_function_0()
  %2 = call i64 @__decompiler_undefined_function_0()
  %3 = add i64 %0, -24, !insn.addr !14556
  %4 = inttoptr i64 %3 to i32*, !insn.addr !14556
  %5 = load i32, i32* %4, align 4, !insn.addr !14556
  %6 = zext i32 %5 to i64, !insn.addr !14556
  %7 = lshr i64 %6, ptrtoint (i8** @global_var_7 to i64), !insn.addr !14557
  %8 = trunc i64 %7 to i8, !insn.addr !14558
  %9 = and i8 %8, ptrtoint (i32* @global_var_1 to i8), !insn.addr !14558
  %10 = add i64 %1, ptrtoint (i32** @global_var_16 to i64), !insn.addr !14559
  %11 = inttoptr i64 %10 to i8*, !insn.addr !14559
  store i8 %9, i8* %11, align 1, !insn.addr !14559
  %12 = lshr i64 %6, ptrtoint (i8* @global_var_5 to i64), !insn.addr !14560
  %13 = trunc i64 %12 to i8, !insn.addr !14561
  %14 = and i8 %13, ptrtoint (i32* @global_var_1 to i8), !insn.addr !14561
  %15 = add i64 %1, ptrtoint (i8** @global_var_17 to i64), !insn.addr !14562
  %16 = inttoptr i64 %15 to i8*, !insn.addr !14562
  store i8 %14, i8* %16, align 1, !insn.addr !14562
  %17 = lshr i64 %6, ptrtoint (i16* @global_var_4 to i64), !insn.addr !14563
  %18 = trunc i64 %17 to i8, !insn.addr !14564
  %19 = and i8 %18, ptrtoint (i32* @global_var_1 to i8), !insn.addr !14564
  %20 = add i64 %1, ptrtoint (i32** @global_var_18 to i64), !insn.addr !14565
  %21 = inttoptr i64 %20 to i8*, !insn.addr !14565
  store i8 %19, i8* %21, align 1, !insn.addr !14565
  %22 = trunc i64 %2 to i8, !insn.addr !14566
  ret i8 %22, !insn.addr !14566
}

define i64 @BLACKWIDOW_GetStatus.506(i64 %arg1, i64 %arg2, i64 %arg3) local_unnamed_addr {
dec_label_pc_20c98:
  %stack_var_-56 = alloca i64, align 8
  %stack_var_-88 = alloca i32, align 4
  %0 = call i64 @mcount(), !insn.addr !14567
  store i32 0, i32* %stack_var_-88, align 4, !insn.addr !14568
  %1 = add i64 %arg2, ptrtoint (i8** @global_var_11 to i64), !insn.addr !14569
  %2 = inttoptr i64 %1 to i8*, !insn.addr !14569
  store i8 0, i8* %2, align 1, !insn.addr !14569
  %3 = call i64 @BLACKWIDOW_GetVcoStatus.151(i64 %arg1, i32* nonnull %stack_var_-88, i64 0), !insn.addr !14570
  %4 = inttoptr i64 %arg2 to i8*, !insn.addr !14571
  store i8 0, i8* %4, align 1, !insn.addr !14571
  %5 = add i64 %arg2, ptrtoint (i32* @global_var_1 to i64), !insn.addr !14572
  %6 = inttoptr i64 %5 to i8*, !insn.addr !14572
  store i8 0, i8* %6, align 1, !insn.addr !14572
  %7 = add i64 %arg2, ptrtoint (i16* @global_var_4 to i64), !insn.addr !14573
  %8 = inttoptr i64 %7 to i32*, !insn.addr !14573
  store i32 ptrtoint (i32* @global_var_2 to i32), i32* %8, align 4, !insn.addr !14573
  %9 = add i64 %arg2, ptrtoint (i8* @global_var_8 to i64), !insn.addr !14574
  %10 = inttoptr i64 %9 to i8*, !insn.addr !14574
  store i8 0, i8* %10, align 1, !insn.addr !14574
  %11 = add i64 %arg2, ptrtoint (i8** @global_var_9 to i64), !insn.addr !14575
  %12 = inttoptr i64 %11 to i8*, !insn.addr !14575
  store i8 0, i8* %12, align 1, !insn.addr !14575
  %13 = add i64 %arg2, ptrtoint (i8* @global_var_a to i64), !insn.addr !14576
  %14 = inttoptr i64 %13 to i8*, !insn.addr !14576
  store i8 0, i8* %14, align 1, !insn.addr !14576
  %15 = add i64 %arg2, ptrtoint (i8** @global_var_b to i64), !insn.addr !14577
  %16 = inttoptr i64 %15 to i8*, !insn.addr !14577
  store i8 0, i8* %16, align 1, !insn.addr !14577
  %17 = add i64 %arg2, ptrtoint ([4 x i8]* @global_var_c to i64), !insn.addr !14578
  %18 = inttoptr i64 %17 to i32*, !insn.addr !14578
  store i32 ptrtoint (i32* @global_var_2 to i32), i32* %18, align 4, !insn.addr !14578
  %19 = add i64 %arg2, ptrtoint (i8* @global_var_10 to i64), !insn.addr !14579
  %20 = inttoptr i64 %19 to i8*, !insn.addr !14579
  store i8 0, i8* %20, align 1, !insn.addr !14579
  %21 = add i64 %arg2, ptrtoint (i32** @global_var_14 to i64), !insn.addr !14580
  %22 = inttoptr i64 %21 to i32*, !insn.addr !14580
  store i32 ptrtoint (i8* @global_var_5 to i32), i32* %22, align 4, !insn.addr !14580
  %23 = call i64 @BLACKWIDOW_GetLoConfig.380(i64 %arg1, i64* nonnull %stack_var_-56, i64 0), !insn.addr !14581
  ret i64 0, !insn.addr !14582
}

define i64 @function_20dcd() local_unnamed_addr {
dec_label_pc_20dcd:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = call i64 @__decompiler_undefined_function_0()
  %2 = add i64 %0, ptrtoint (i32** @global_var_14 to i64), !insn.addr !14583
  %3 = inttoptr i64 %2 to i32*, !insn.addr !14583
  store i32 ptrtoint (i16* @global_var_4 to i32), i32* %3, align 4, !insn.addr !14583
  ret i64 %1, !insn.addr !14584
}

define i64 @function_20dd6() local_unnamed_addr {
dec_label_pc_20dd6:
  %rax.0.reg2mem = alloca i64, !insn.addr !14585
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = call i64 @__decompiler_undefined_function_0()
  %2 = call i64 @__decompiler_undefined_function_0()
  %3 = call i64 @__decompiler_undefined_function_0()
  %4 = call i64 @__decompiler_undefined_function_0()
  %5 = add i64 %2, -39, !insn.addr !14585
  %6 = inttoptr i64 %5 to i8*, !insn.addr !14585
  %7 = load i8, i8* %6, align 1, !insn.addr !14585
  %8 = icmp eq i8 %7, ptrtoint (i32* @global_var_1 to i8), !insn.addr !14586
  %9 = icmp eq i1 %8, false, !insn.addr !14587
  br i1 %9, label %dec_label_pc_20dee, label %dec_label_pc_20ddf, !insn.addr !14587

dec_label_pc_20ddf:                               ; preds = %dec_label_pc_20dd6
  %10 = add i64 %2, -38, !insn.addr !14588
  %11 = inttoptr i64 %10 to i8*, !insn.addr !14588
  %12 = load i8, i8* %11, align 1, !insn.addr !14588
  %13 = icmp eq i8 %12, ptrtoint (i32* @global_var_1 to i8), !insn.addr !14588
  %14 = icmp eq i1 %13, false, !insn.addr !14589
  br i1 %14, label %15, label %dec_label_pc_20de5, !insn.addr !14589

; <label>:15:                                     ; preds = %dec_label_pc_20ddf
  %16 = call i8 @BLACKWIDOW_SetPllDividerConfig(i64 %0, i64 %1), !insn.addr !14589
  %17 = sext i8 %16 to i64, !insn.addr !14589
  store i64 %17, i64* %rax.0.reg2mem, !insn.addr !14589
  br label %dec_label_pc_20de5, !insn.addr !14589

dec_label_pc_20de5:                               ; preds = %15, %dec_label_pc_20ddf
  %rax.0.reload = load i64, i64* %rax.0.reg2mem
  %18 = add i64 %3, ptrtoint (i32** @global_var_14 to i64), !insn.addr !14590
  %19 = inttoptr i64 %18 to i32*, !insn.addr !14590
  store i32 ptrtoint (i8** @global_var_3 to i32), i32* %19, align 4, !insn.addr !14590
  ret i64 %rax.0.reload, !insn.addr !14591

dec_label_pc_20dee:                               ; preds = %dec_label_pc_20dd6
  %20 = add i64 %3, ptrtoint (i32** @global_var_14 to i64), !insn.addr !14592
  %21 = inttoptr i64 %20 to i32*, !insn.addr !14592
  store i32 ptrtoint (i32* @global_var_2 to i32), i32* %21, align 4, !insn.addr !14592
  ret i64 %4, !insn.addr !14593
}

define i8 @BLACKWIDOW_SetPllDividerConfig(i64 %ptCommunication, i64 %ptPllDividerSettings) local_unnamed_addr {
dec_label_pc_20e01:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = call i64 @__decompiler_undefined_function_0()
  %2 = call i64 @__decompiler_undefined_function_0()
  %3 = add i64 %0, -38, !insn.addr !14594
  %4 = inttoptr i64 %3 to i8*, !insn.addr !14594
  %5 = load i8, i8* %4, align 1, !insn.addr !14594
  %6 = icmp eq i8 %5, 0, !insn.addr !14594
  %7 = icmp eq i1 %6, false, !insn.addr !14595
  br i1 %7, label %dec_label_pc_20e21, label %dec_label_pc_20e07, !insn.addr !14595

dec_label_pc_20e07:                               ; preds = %dec_label_pc_20e01
  %8 = add i64 %1, ptrtoint (i32** @global_var_14 to i64), !insn.addr !14596
  %9 = inttoptr i64 %8 to i32*, !insn.addr !14596
  store i32 ptrtoint (i32* @global_var_1 to i32), i32* %9, align 4, !insn.addr !14596
  br label %dec_label_pc_20e21, !insn.addr !14597

dec_label_pc_20e21:                               ; preds = %dec_label_pc_20e07, %dec_label_pc_20e01
  %10 = trunc i64 %2 to i8, !insn.addr !14598
  ret i8 %10, !insn.addr !14598
}

define i64 @BLACKWIDOW_SetPllDividerConfig.295(i64 %arg1, i32* %arg2, i128 %arg3) local_unnamed_addr {
dec_label_pc_20e31:
  %0 = call i64 @mcount(), !insn.addr !14599
  ret i64 0, !insn.addr !14600
}

define i8 @BLACKWIDOW_GetPllDividerConfig(i64 %ptCommunication, i64 %ptPllDividerSettings) local_unnamed_addr {
dec_label_pc_20f21:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = call i64 @__decompiler_undefined_function_0()
  %2 = trunc i64 %1 to i8
  %3 = mul i8 %2, 2, !insn.addr !14601
  %4 = inttoptr i64 %1 to i8*, !insn.addr !14601
  store i8 %3, i8* %4, align 1, !insn.addr !14601
  %5 = add i64 %0, -71, !insn.addr !14602
  %6 = inttoptr i64 %5 to i8*, !insn.addr !14602
  %7 = load i8, i8* %6, align 1, !insn.addr !14602
  %8 = add i8 %7, %2, !insn.addr !14602
  store i8 %8, i8* %6, align 1, !insn.addr !14602
  %9 = zext i8 %3 to i64, !insn.addr !14603
  %10 = and i64 %1, -256, !insn.addr !14603
  %11 = or i64 %10, %9, !insn.addr !14603
  %12 = inttoptr i64 %11 to i8*, !insn.addr !14604
  %13 = load i8, i8* %12, align 2, !insn.addr !14604
  %14 = add i8 %13, %3, !insn.addr !14604
  store i8 %14, i8* %12, align 2, !insn.addr !14604
  ret i8 %3, !insn.addr !14605
}

define i64 @BLACKWIDOW_GetPllDividerConfig.580(i64 %arg1, i32* %arg2, i64 %arg3) local_unnamed_addr {
dec_label_pc_20f51:
  %0 = ptrtoint i32* %arg2 to i64
  %stack_var_-32 = alloca i32, align 4
  %1 = call i64 @mcount(), !insn.addr !14606
  store i32 0, i32* %arg2, align 4, !insn.addr !14607
  %2 = add i64 %0, ptrtoint (i8* @global_var_8 to i64), !insn.addr !14608
  %3 = inttoptr i64 %2 to i64*, !insn.addr !14608
  store i64 0, i64* %3, align 8, !insn.addr !14608
  %4 = ptrtoint i32* %stack_var_-32 to i64, !insn.addr !14609
  ret i64 %4, !insn.addr !14610
}

define i8 @BLACKWIDOW_GetPllDsmOrderAndFractCorrect(i64 %ptCommunication, i32* %peDsmOrder, i32* %peDsmFrac) local_unnamed_addr {
dec_label_pc_20ffd:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = call i64 @__decompiler_undefined_function_0()
  %2 = call i64 @__decompiler_undefined_function_0()
  %rax = alloca i64, align 8
  %3 = call i64 @__decompiler_undefined_function_0()
  %4 = add i64 %2, -72, !insn.addr !14611
  %5 = inttoptr i64 %4 to i8*, !insn.addr !14611
  %6 = load i8, i8* %5, align 1, !insn.addr !14611
  %7 = trunc i64 %3 to i8, !insn.addr !14611
  %8 = add i8 %6, %7, !insn.addr !14611
  %9 = icmp ult i8 %8, %6, !insn.addr !14611
  store i8 %8, i8* %5, align 1, !insn.addr !14611
  %10 = bitcast i64* %rax to i8*
  %11 = load i8, i8* %10, align 8, !insn.addr !14612
  %12 = load i64, i64* %rax, align 8
  %13 = trunc i64 %12 to i8, !insn.addr !14612
  %14 = zext i1 %9 to i8, !insn.addr !14612
  %15 = add i8 %11, %14, !insn.addr !14612
  %16 = add i8 %15, %13, !insn.addr !14612
  %17 = inttoptr i64 %12 to i8*, !insn.addr !14612
  store i8 %16, i8* %17, align 1, !insn.addr !14612
  %18 = load i8, i8* %10, align 8, !insn.addr !14613
  %19 = load i64, i64* %rax, align 8
  %20 = trunc i64 %19 to i8, !insn.addr !14613
  %21 = add i8 %18, %20, !insn.addr !14613
  %22 = inttoptr i64 %19 to i8*, !insn.addr !14613
  store i8 %21, i8* %22, align 1, !insn.addr !14613
  %23 = add i64 %0, -24, !insn.addr !14614
  %24 = inttoptr i64 %23 to i64*, !insn.addr !14614
  %25 = load i64, i64* %24, align 8, !insn.addr !14614
  %26 = add i64 %1, ptrtoint (i8* @global_var_10 to i64), !insn.addr !14615
  %27 = inttoptr i64 %26 to i64*, !insn.addr !14615
  store i64 %25, i64* %27, align 8, !insn.addr !14615
  %28 = load i64, i64* %rax, align 8, !insn.addr !14616
  %29 = trunc i64 %28 to i8, !insn.addr !14616
  ret i8 %29, !insn.addr !14616
}

define i64 @BLACKWIDOW_GetPllDsmOrderAndFractCorrect.460(i64 %arg1, i64* %arg2, i32* %arg3) local_unnamed_addr {
dec_label_pc_2102d:
  %stack_var_-48 = alloca i32, align 4
  %0 = call i64 @mcount(), !insn.addr !14617
  store i32 0, i32* %arg3, align 4, !insn.addr !14618
  %1 = ptrtoint i32* %stack_var_-48 to i64, !insn.addr !14619
  ret i64 %1, !insn.addr !14620
}

define i8 @BLACKWIDOW_GetPLLFrequency(i64 %ptCommunication, i64* %pulPllFrequencyKhz) local_unnamed_addr {
dec_label_pc_210a6:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = call i64 @__decompiler_undefined_function_0()
  %2 = call i64 @__decompiler_undefined_function_0()
  %3 = trunc i64 %2 to i8
  %4 = mul i8 %3, 2, !insn.addr !14621
  %5 = inttoptr i64 %2 to i8*, !insn.addr !14621
  store i8 %4, i8* %5, align 1, !insn.addr !14621
  %6 = add i64 %1, -40, !insn.addr !14622
  %7 = inttoptr i64 %6 to i64*, !insn.addr !14622
  %8 = load i64, i64* %7, align 8, !insn.addr !14622
  %9 = trunc i64 %8 to i32, !insn.addr !14623
  %10 = inttoptr i64 %0 to i32*, !insn.addr !14623
  store i32 %9, i32* %10, align 4, !insn.addr !14623
  ret i8 %3, !insn.addr !14624
}

define i64 @BLACKWIDOW_GetPLLFrequency.144(i64 %arg1, i64 %arg2, i64 %arg3) local_unnamed_addr {
dec_label_pc_210d6:
  %rbx.1.reg2mem = alloca i64, !insn.addr !14625
  %rcx.0.reg2mem = alloca i64, !insn.addr !14625
  %rbx.0.reg2mem = alloca i64, !insn.addr !14625
  %rsi.0.reg2mem = alloca i64, !insn.addr !14625
  %rdx.0.reg2mem = alloca i64, !insn.addr !14625
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = call i64 @__decompiler_undefined_function_0()
  %stack_var_-60 = alloca i64, align 8
  %2 = call i8 @__decompiler_undefined_function_1()
  %3 = call i8 @__decompiler_undefined_function_1()
  %4 = call i8 @__decompiler_undefined_function_1()
  %stack_var_-120 = alloca i64, align 8
  %stack_var_-64 = alloca i32, align 4
  %stack_var_-80 = alloca i64, align 8
  %stack_var_-88 = alloca i64, align 8
  %stack_var_-96 = alloca i64, align 8
  %stack_var_-104 = alloca i64, align 8
  %stack_var_-152 = alloca i32, align 4
  %5 = call i64 @mcount(), !insn.addr !14626
  %6 = add i64 %arg1, 40, !insn.addr !14627
  %7 = inttoptr i64 %6 to i64*, !insn.addr !14627
  %8 = load i64, i64* %7, align 8, !insn.addr !14627
  store i32 ptrtoint (i32* @global_var_2 to i32), i32* %stack_var_-152, align 4, !insn.addr !14628
  store i64 0, i64* %stack_var_-104, align 8, !insn.addr !14629
  store i64 0, i64* %stack_var_-96, align 8, !insn.addr !14630
  store i64 0, i64* %stack_var_-88, align 8, !insn.addr !14631
  store i64 0, i64* %stack_var_-80, align 8, !insn.addr !14632
  store i32 ptrtoint (i32* @global_var_2 to i32), i32* %stack_var_-64, align 4, !insn.addr !14633
  %9 = call i64 @BLACKWIDOW_GetLoConfig.380(i64 %arg1, i64* nonnull %stack_var_-120, i64 %arg3), !insn.addr !14634
  %10 = icmp ult i8 %4, ptrtoint (i32* @global_var_1 to i8), !insn.addr !14635
  %11 = icmp ult i8 %3, ptrtoint (i32* @global_var_1 to i8), !insn.addr !14636
  %12 = xor i64 %1, 4294967295
  %13 = add i64 %12, %1, !insn.addr !14637
  %14 = icmp ult i8 %2, ptrtoint (i32* @global_var_1 to i8), !insn.addr !14638
  %15 = xor i64 %0, 4294967295
  %16 = add i64 %15, %0, !insn.addr !14639
  %17 = ptrtoint i32* %stack_var_-64 to i64, !insn.addr !14640
  %18 = call i64 @BLACKWIDOW_GetPllDsmOrderAndFractCorrect.460(i64 %arg1, i64* nonnull %stack_var_-60, i32* nonnull %stack_var_-64), !insn.addr !14641
  %19 = call i64 @BLACKWIDOW_GetPllDividerConfig.580(i64 %arg1, i32* nonnull %stack_var_-152, i64 %17), !insn.addr !14642
  store i64 ptrtoint (i32* @global_var_1 to i64), i64* %rdx.0.reg2mem
  store i64 128, i64* %rsi.0.reg2mem
  br label %dec_label_pc_2122e

dec_label_pc_2122e:                               ; preds = %dec_label_pc_210d6, %dec_label_pc_2122e
  %rsi.0.reload = load i64, i64* %rsi.0.reg2mem
  %rdx.0.reload = load i64, i64* %rdx.0.reg2mem
  %20 = mul i64 %rdx.0.reload, add (i64 add (i64 ptrtoint (i16* @global_var_4 to i64), i64 1), i64 add (i64 ptrtoint (i16* @global_var_4 to i64), i64 1)), !insn.addr !14643
  %21 = mul i64 %rsi.0.reload, add (i64 add (i64 ptrtoint (i16* @global_var_4 to i64), i64 1), i64 add (i64 ptrtoint (i16* @global_var_4 to i64), i64 1)), !insn.addr !14644
  %22 = mul i64 %21, %20, !insn.addr !14645
  %23 = icmp ult i64 %22, 429496729, !insn.addr !14646
  store i64 %20, i64* %rdx.0.reg2mem, !insn.addr !14647
  store i64 %21, i64* %rsi.0.reg2mem, !insn.addr !14647
  br i1 %23, label %dec_label_pc_2122e, label %dec_label_pc_21254.preheader, !insn.addr !14647

dec_label_pc_21254.preheader:                     ; preds = %dec_label_pc_2122e
  %24 = sext i1 %10 to i64, !insn.addr !14648
  %25 = zext i1 %11 to i64, !insn.addr !14637
  %26 = add i64 %13, %25, !insn.addr !14649
  %27 = zext i1 %14 to i64, !insn.addr !14639
  %28 = add i64 %16, %27, !insn.addr !14650
  %29 = and i64 %26, zext (i32 ptrtoint (i32* @global_var_2 to i32) to i64), !insn.addr !14651
  store i64 ptrtoint (i32* @global_var_1 to i64), i64* %rbx.0.reg2mem
  br label %dec_label_pc_21254

dec_label_pc_21254:                               ; preds = %dec_label_pc_21254.preheader, %dec_label_pc_21254
  %rbx.0.reload = load i64, i64* %rbx.0.reg2mem
  %30 = mul i64 %rbx.0.reload, add (i64 add (i64 ptrtoint (i16* @global_var_4 to i64), i64 1), i64 add (i64 ptrtoint (i16* @global_var_4 to i64), i64 1)), !insn.addr !14652
  %31 = icmp ult i64 %30, %20, !insn.addr !14653
  store i64 %30, i64* %rbx.0.reg2mem, !insn.addr !14654
  br i1 %31, label %dec_label_pc_21254, label %dec_label_pc_21274.preheader, !insn.addr !14654

dec_label_pc_21274.preheader:                     ; preds = %dec_label_pc_21254
  %32 = add nsw i64 %24, sext (i8 ptrtoint (i8* @global_var_5 to i8) to i64), !insn.addr !14655
  %33 = and i64 %28, zext (i32 ptrtoint (i16* @global_var_4 to i32) to i64), !insn.addr !14656
  store i64 0, i64* %rcx.0.reg2mem
  store i64 %30, i64* %rbx.1.reg2mem
  br label %dec_label_pc_21274

dec_label_pc_21274:                               ; preds = %dec_label_pc_21274.preheader, %dec_label_pc_21274
  %rbx.1.reload = load i64, i64* %rbx.1.reg2mem
  %rcx.0.reload = load i64, i64* %rcx.0.reg2mem
  %34 = icmp ult i64 %rbx.1.reload, %20, !insn.addr !14657
  %35 = icmp eq i1 %34, false, !insn.addr !14658
  %36 = mul i64 %rbx.1.reload, add (i64 add (i64 ptrtoint (i16* @global_var_4 to i64), i64 1), i64 add (i64 ptrtoint (i16* @global_var_4 to i64), i64 1))
  %rbx.2 = select i1 %35, i64 %rbx.1.reload, i64 %36
  %37 = add i64 %rcx.0.reload, ptrtoint (i32* @global_var_1 to i64), !insn.addr !14659
  %38 = icmp eq i64 %37, ptrtoint (i8* @global_var_10 to i64), !insn.addr !14660
  %39 = icmp eq i1 %38, false, !insn.addr !14661
  store i64 %37, i64* %rcx.0.reg2mem, !insn.addr !14661
  store i64 %rbx.2, i64* %rbx.1.reg2mem, !insn.addr !14661
  br i1 %39, label %dec_label_pc_21274, label %dec_label_pc_2129c, !insn.addr !14661

dec_label_pc_2129c:                               ; preds = %dec_label_pc_21274
  %40 = load i32, i32* %stack_var_-152, align 4, !insn.addr !14662
  %41 = icmp eq i32 %40, 0, !insn.addr !14662
  %42 = icmp eq i1 %41, false, !insn.addr !14663
  %43 = mul i64 %rsi.0.reload, shl (i64 add (i64 add (i64 ptrtoint (i16* @global_var_4 to i64), i64 1), i64 add (i64 ptrtoint (i16* @global_var_4 to i64), i64 1)), i64 1)
  %44 = mul i64 %rsi.0.reload, shl (i64 add (i64 add (i64 ptrtoint (i16* @global_var_4 to i64), i64 1), i64 add (i64 ptrtoint (i16* @global_var_4 to i64), i64 1)), i64 ptrtoint (i32* @global_var_2 to i64))
  %spec.select = select i1 icmp ugt (i32 ptrtoint (i32* @global_var_1 to i32), i32 0), i64 %44, i64 %21
  %rax.3 = select i1 %42, i64 %spec.select, i64 %43
  %45 = add i64 %8, 8, !insn.addr !14664
  %46 = inttoptr i64 %45 to i64*, !insn.addr !14664
  %47 = load i64, i64* %46, align 8, !insn.addr !14664
  %sext3 = mul i64 %32, 72057594037927936
  %48 = sdiv i64 %sext3, 72057594037927936, !insn.addr !14665
  %49 = mul i64 %33, ptrtoint (i32* @global_var_1 to i64), !insn.addr !14666
  %50 = add i64 %49, %29, !insn.addr !14665
  %51 = add i64 %50, %48, !insn.addr !14666
  %sext = mul i64 %51, 4294967296
  %52 = sdiv i64 %sext, 4294967296, !insn.addr !14667
  %53 = udiv i64 %rax.3, %52
  %54 = call i64 @Mult.96(i64 %53, i64 %47, i64* nonnull %stack_var_-104, i64* nonnull %stack_var_-88, i64* nonnull %stack_var_-104), !insn.addr !14668
  %55 = load i64, i64* %stack_var_-88, align 8, !insn.addr !14669
  %56 = load i64, i64* %stack_var_-104, align 8, !insn.addr !14670
  %57 = call i64 @Div.98(i64 %56, i64 %55, i64 %rbx.2, i64* nonnull %stack_var_-96, i64* nonnull %stack_var_-80), !insn.addr !14671
  ret i64 %57, !insn.addr !14672
}

define i8 @BLACKWIDOW_SetFreq(i64 %ptCommunication, i64 %ulFreqkHz, i32 %loDiv) local_unnamed_addr {
dec_label_pc_21371:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = call i64 @__decompiler_undefined_function_0()
  %2 = inttoptr i64 %0 to i64*, !insn.addr !14673
  store i64 0, i64* %2, align 8, !insn.addr !14673
  %3 = trunc i64 %1 to i8, !insn.addr !14674
  ret i8 %3, !insn.addr !14674
}

define i64 @BLACKWIDOW_SetFreq.164(i64 %arg1, i64 %arg2, i64* %arg3) local_unnamed_addr {
dec_label_pc_213a1:
  %rsi.6.reg2mem = alloca i64, !insn.addr !14675
  %rbx.4.reg2mem = alloca i64, !insn.addr !14675
  %rcx.2.reg2mem = alloca i64, !insn.addr !14675
  %rsi.5.reg2mem = alloca i64, !insn.addr !14675
  %rbx.3.reg2mem = alloca i64, !insn.addr !14675
  %rbx.2.reg2mem = alloca i64, !insn.addr !14675
  %rcx.1.reg2mem = alloca i64, !insn.addr !14675
  %rax.1.reg2mem = alloca i64, !insn.addr !14675
  %rsi.4.reg2mem = alloca i64, !insn.addr !14675
  %rsi.3.reg2mem = alloca i64, !insn.addr !14675
  %rsi.2.reg2mem = alloca i64, !insn.addr !14675
  %rbx.1.reg2mem = alloca i64, !insn.addr !14675
  %rsi.1.reg2mem = alloca i64, !insn.addr !14675
  %rdi.0.reg2mem = alloca i64, !insn.addr !14675
  %rcx.0.reg2mem = alloca i64, !insn.addr !14675
  %stack_var_-160.0.reg2mem = alloca i64, !insn.addr !14675
  %0 = call i64 @__decompiler_undefined_function_0()
  %stack_var_-96 = alloca i128, align 8
  %stack_var_-88 = alloca i64, align 8
  %stack_var_-72 = alloca i64, align 8
  %stack_var_-80 = alloca i64, align 8
  %stack_var_-120 = alloca i32, align 4
  %stack_var_-64 = alloca i32, align 4
  %stack_var_-60 = alloca i32, align 4
  %1 = call i64 @mcount(), !insn.addr !14676
  %2 = add i64 %arg1, 40, !insn.addr !14677
  %3 = inttoptr i64 %2 to i64*, !insn.addr !14677
  %4 = load i64, i64* %3, align 8, !insn.addr !14677
  store i32 ptrtoint (i32* @global_var_2 to i32), i32* %stack_var_-60, align 4, !insn.addr !14678
  store i32 ptrtoint (i32* @global_var_2 to i32), i32* %stack_var_-64, align 4, !insn.addr !14679
  %5 = add i64 %4, 8, !insn.addr !14680
  %6 = inttoptr i64 %5 to i64*, !insn.addr !14680
  %7 = load i64, i64* %6, align 8, !insn.addr !14680
  %8 = icmp ne i64 %7, 0, !insn.addr !14680
  %9 = icmp eq i64 %arg1, 0
  %10 = icmp eq i1 %9, false
  %narrow = icmp eq i1 %10, %8
  %11 = add i64 %arg2, -300000, !insn.addr !14681
  %12 = icmp ugt i64 %11, 2700000
  %13 = icmp eq i1 %narrow, false, !insn.addr !14682
  %or.cond11 = or i1 %12, %13
  store i64 0, i64* %rsi.6.reg2mem, !insn.addr !14683
  br i1 %or.cond11, label %dec_label_pc_218f3, label %dec_label_pc_21404, !insn.addr !14683

dec_label_pc_21404:                               ; preds = %dec_label_pc_213a1
  %14 = bitcast i32* %stack_var_-60 to i64*, !insn.addr !14684
  %15 = call i64 @BLACKWIDOW_GetPllDsmOrderAndFractCorrect.460(i64 %arg1, i64* nonnull %14, i32* nonnull %stack_var_-64), !insn.addr !14684
  %16 = and i64 %15, 4294967295, !insn.addr !14685
  %17 = trunc i64 %15 to i8, !insn.addr !14686
  %18 = icmp eq i8 %17, 0, !insn.addr !14686
  store i64 %16, i64* %rsi.6.reg2mem, !insn.addr !14687
  br i1 %18, label %dec_label_pc_218f3, label %dec_label_pc_2141e, !insn.addr !14687

dec_label_pc_2141e:                               ; preds = %dec_label_pc_21404
  %19 = ptrtoint i64* %arg3 to i64
  %20 = ptrtoint i32* %stack_var_-64 to i64, !insn.addr !14688
  %21 = bitcast i32* %stack_var_-120 to i64*, !insn.addr !14689
  %22 = call i64 @BLACKWIDOW_GetLoConfig.380(i64 %arg1, i64* nonnull %21, i64 %20), !insn.addr !14689
  %23 = trunc i64 %19 to i32, !insn.addr !14690
  %24 = icmp eq i32 %23, 0, !insn.addr !14690
  br i1 %24, label %dec_label_pc_2148b, label %dec_label_pc_2142f, !insn.addr !14691

dec_label_pc_2142f:                               ; preds = %dec_label_pc_2141e
  %25 = icmp eq i32 %23, ptrtoint (i32* @global_var_1 to i32), !insn.addr !14692
  br i1 %25, label %dec_label_pc_2198e, label %dec_label_pc_21439, !insn.addr !14693

dec_label_pc_21439:                               ; preds = %dec_label_pc_2142f
  %26 = icmp eq i32 %23, ptrtoint (i32* @global_var_2 to i32), !insn.addr !14694
  br i1 %26, label %dec_label_pc_2194e, label %dec_label_pc_21443, !insn.addr !14695

dec_label_pc_21443:                               ; preds = %dec_label_pc_21439
  %27 = icmp eq i32 %23, ptrtoint (i8** @global_var_3 to i32), !insn.addr !14696
  br i1 %27, label %dec_label_pc_2190e, label %dec_label_pc_2144d, !insn.addr !14697

dec_label_pc_2144d:                               ; preds = %dec_label_pc_21443
  %28 = icmp eq i32 %23, ptrtoint (i16* @global_var_4 to i32), !insn.addr !14698
  %29 = icmp ult i64 %arg2, 1075001
  %or.cond = or i1 %29, %28
  br i1 %or.cond, label %dec_label_pc_219ce, label %dec_label_pc_21464, !insn.addr !14699

dec_label_pc_21464:                               ; preds = %dec_label_pc_2144d
  %30 = icmp ult i64 %arg2, 1228001
  br i1 %30, label %dec_label_pc_2190e, label %dec_label_pc_21471, !insn.addr !14700

dec_label_pc_21471:                               ; preds = %dec_label_pc_21464
  %31 = icmp ult i64 %arg2, 1433001
  br i1 %31, label %dec_label_pc_2194e, label %dec_label_pc_2147e, !insn.addr !14701

dec_label_pc_2147e:                               ; preds = %dec_label_pc_21471
  %32 = icmp ult i64 %arg2, 1720001
  br i1 %32, label %dec_label_pc_2198e, label %dec_label_pc_2148b, !insn.addr !14702

dec_label_pc_2148b:                               ; preds = %dec_label_pc_2147e, %dec_label_pc_2141e
  store i32 ptrtoint (i32* @global_var_1 to i32), i32* %stack_var_-120, align 4, !insn.addr !14703
  store i64 sext (i16 ptrtoint (i16* @global_var_4 to i16) to i64), i64* %stack_var_-160.0.reg2mem, !insn.addr !14704
  br label %dec_label_pc_214c6, !insn.addr !14704

dec_label_pc_214c6:                               ; preds = %dec_label_pc_2198e, %dec_label_pc_2194e, %dec_label_pc_2190e, %dec_label_pc_2148b
  %stack_var_-160.0.reload = load i64, i64* %stack_var_-160.0.reg2mem
  %33 = trunc i64 %22 to i8, !insn.addr !14705
  %34 = icmp eq i8 %33, 0, !insn.addr !14705
  br i1 %34, label %dec_label_pc_214d6, label %dec_label_pc_214ca, !insn.addr !14706

dec_label_pc_214ca:                               ; preds = %dec_label_pc_214c6
  %35 = call i64 @BLACKWIDOW_SetLoConfig.554(i64 %arg1, i64* nonnull %21, i64 %20), !insn.addr !14707
  br label %dec_label_pc_214d6, !insn.addr !14707

dec_label_pc_214d6:                               ; preds = %dec_label_pc_214ca, %dec_label_pc_214c6
  %36 = load i32, i32* %stack_var_-60, align 4, !insn.addr !14708
  %37 = icmp eq i32 %36, ptrtoint (i32* @global_var_1 to i32), !insn.addr !14708
  %38 = icmp eq i1 %37, false, !insn.addr !14709
  %39 = load i32, i32* %stack_var_-64, align 4
  %40 = icmp ult i32 %39, ptrtoint (i32* @global_var_1 to i32)
  %41 = select i1 %40, i64 add (i64 zext (i32 ptrtoint (i64* @global_var_23 to i32) to i64), i64 1310), i64 1310
  %42 = select i1 %40, i64 add (i64 zext (i32 ptrtoint (i8* @global_var_f to i32) to i64), i64 1290), i64 1290
  %storemerge = select i1 %38, i64 %41, i64 %42
  %43 = mul i64 %arg2, shl (i64 add (i64 add (i64 ptrtoint (i16* @global_var_4 to i64), i64 1), i64 mul (i64 add (i64 ptrtoint (i16* @global_var_4 to i64), i64 1), i64 ptrtoint (i16* @global_var_4 to i64))), i64 ptrtoint (i32* @global_var_2 to i64)), !insn.addr !14710
  %44 = mul i64 %43, %stack_var_-160.0.reload, !insn.addr !14711
  %45 = inttoptr i64 %0 to i64*, !insn.addr !14712
  %46 = call i64 @Mult.96(i64 %44, i64 1000000, i64* nonnull %stack_var_-72, i64* nonnull %stack_var_-80, i64* %45), !insn.addr !14712
  %47 = load i64, i64* %stack_var_-80, align 8, !insn.addr !14713
  %48 = load i64, i64* %stack_var_-72, align 8, !insn.addr !14714
  %49 = bitcast i128* %stack_var_-96 to i64*, !insn.addr !14715
  %50 = call i64 @Div.98(i64 %48, i64 %47, i64 undef, i64* nonnull %stack_var_-88, i64* nonnull %49), !insn.addr !14715
  %51 = load i128, i128* %stack_var_-96, align 8, !insn.addr !14716
  %52 = load i64, i64* %3, align 8, !insn.addr !14717
  %53 = add i64 %52, 8, !insn.addr !14718
  %54 = inttoptr i64 %53 to i64*, !insn.addr !14718
  %55 = load i64, i64* %54, align 8, !insn.addr !14718
  %56 = icmp ult i64 %55, 27000001
  br i1 %56, label %dec_label_pc_215af, label %dec_label_pc_21625, !insn.addr !14719

dec_label_pc_215af:                               ; preds = %dec_label_pc_214d6
  br i1 true, label %dec_label_pc_215e3, label %dec_label_pc_215ba, !insn.addr !14720

dec_label_pc_215ba:                               ; preds = %dec_label_pc_215af
  store i64 ptrtoint (i32* @global_var_1 to i64), i64* %rcx.0.reg2mem, !insn.addr !14721
  store i64 ptrtoint (i16* @global_var_4 to i64), i64* %rdi.0.reg2mem, !insn.addr !14721
  br i1 true, label %dec_label_pc_21680, label %dec_label_pc_215d4, !insn.addr !14721

dec_label_pc_215d4:                               ; preds = %dec_label_pc_215ba
  store i64 or (i64 and (i64 ptrtoint (i32* @global_var_1 to i64), i64 -256), i64 ptrtoint (i8** @global_var_3 to i64)), i64* %rcx.0.reg2mem, !insn.addr !14722
  store i64 ptrtoint (i16* @global_var_4 to i64), i64* %rdi.0.reg2mem, !insn.addr !14722
  br label %dec_label_pc_21680, !insn.addr !14722

dec_label_pc_215e3:                               ; preds = %dec_label_pc_215af
  br i1 true, label %dec_label_pc_21607, label %dec_label_pc_215f6, !insn.addr !14723

dec_label_pc_215f6:                               ; preds = %dec_label_pc_215e3
  store i64 or (i64 and (i64 ptrtoint (i32* @global_var_1 to i64), i64 -256), i64 ptrtoint (i8** @global_var_3 to i64)), i64* %rcx.0.reg2mem, !insn.addr !14724
  store i64 ptrtoint (i16* @global_var_4 to i64), i64* %rdi.0.reg2mem, !insn.addr !14724
  br label %dec_label_pc_21680, !insn.addr !14724

dec_label_pc_21607:                               ; preds = %dec_label_pc_215e3
  store i64 or (i64 and (i64 ptrtoint (i32* @global_var_2 to i64), i64 -256), i64 ptrtoint (i8** @global_var_3 to i64)), i64* %rcx.0.reg2mem, !insn.addr !14725
  store i64 ptrtoint (i32* @global_var_2 to i64), i64* %rdi.0.reg2mem, !insn.addr !14725
  br label %dec_label_pc_21680, !insn.addr !14725

dec_label_pc_21625:                               ; preds = %dec_label_pc_214d6
  br i1 false, label %dec_label_pc_21656, label %dec_label_pc_21634, !insn.addr !14726

dec_label_pc_21634:                               ; preds = %dec_label_pc_21625
  %57 = icmp eq i64 %storemerge, 0
  store i64 ptrtoint (i32* @global_var_2 to i64), i64* %rcx.0.reg2mem, !insn.addr !14727
  store i64 ptrtoint (i16* @global_var_4 to i64), i64* %rdi.0.reg2mem, !insn.addr !14727
  br i1 %57, label %dec_label_pc_21680, label %dec_label_pc_2164a, !insn.addr !14727

dec_label_pc_2164a:                               ; preds = %dec_label_pc_21634
  store i64 or (i64 and (i64 ptrtoint (i32* @global_var_2 to i64), i64 -256), i64 ptrtoint (i8** @global_var_3 to i64)), i64* %rcx.0.reg2mem, !insn.addr !14728
  store i64 ptrtoint (i16* @global_var_4 to i64), i64* %rdi.0.reg2mem, !insn.addr !14728
  br label %dec_label_pc_21680, !insn.addr !14728

dec_label_pc_21656:                               ; preds = %dec_label_pc_21625
  store i64 ptrtoint (i32* @global_var_2 to i64), i64* %rcx.0.reg2mem, !insn.addr !14729
  store i64 ptrtoint (i32* @global_var_2 to i64), i64* %rdi.0.reg2mem, !insn.addr !14729
  br i1 false, label %dec_label_pc_21665, label %dec_label_pc_21680, !insn.addr !14729

dec_label_pc_21665:                               ; preds = %dec_label_pc_21656
  store i64 or (i64 and (i64 ptrtoint (i32* @global_var_2 to i64), i64 -256), i64 ptrtoint (i8** @global_var_3 to i64)), i64* %rcx.0.reg2mem, !insn.addr !14730
  store i64 ptrtoint (i32* @global_var_2 to i64), i64* %rdi.0.reg2mem, !insn.addr !14730
  br i1 true, label %dec_label_pc_21680, label %dec_label_pc_21676, !insn.addr !14730

dec_label_pc_21676:                               ; preds = %dec_label_pc_21665
  store i64 or (i64 and (i64 ptrtoint (i32* @global_var_2 to i64), i64 -256), i64 ptrtoint (i8** @global_var_3 to i64)), i64* %rcx.0.reg2mem, !insn.addr !14731
  store i64 or (i64 and (i64 ptrtoint (i32* @global_var_2 to i64), i64 -256), i64 ptrtoint (i16* @global_var_4 to i64)), i64* %rdi.0.reg2mem, !insn.addr !14731
  br label %dec_label_pc_21680, !insn.addr !14731

dec_label_pc_21680:                               ; preds = %dec_label_pc_21634, %dec_label_pc_21656, %dec_label_pc_21676, %dec_label_pc_21665, %dec_label_pc_2164a, %dec_label_pc_21607, %dec_label_pc_215f6, %dec_label_pc_215d4, %dec_label_pc_215ba
  %58 = trunc i128 %51 to i64, !insn.addr !14716
  %rdi.0.reload = load i64, i64* %rdi.0.reg2mem
  %rcx.0.reload = load i64, i64* %rcx.0.reg2mem
  %59 = icmp eq i64 %storemerge, 0
  store i64 %58, i64* %rbx.1.reg2mem, !insn.addr !14732
  store i64 0, i64* %rsi.2.reg2mem, !insn.addr !14732
  br i1 %59, label %dec_label_pc_21694, label %dec_label_pc_21730, !insn.addr !14732

dec_label_pc_21694:                               ; preds = %dec_label_pc_21680
  %60 = mul i64 %rcx.0.reload, shl (i64 add (i64 add (i64 ptrtoint (i16* @global_var_4 to i64), i64 1), i64 mul (i64 add (i64 ptrtoint (i16* @global_var_4 to i64), i64 1), i64 ptrtoint (i16* @global_var_4 to i64))), i64 ptrtoint (i32* @global_var_2 to i64)), !insn.addr !14733
  %61 = udiv i64 %60, %rdi.0.reload
  %62 = icmp eq i64 %61, 75, !insn.addr !14734
  br i1 %62, label %dec_label_pc_216f1, label %dec_label_pc_216ae, !insn.addr !14735

dec_label_pc_216ae:                               ; preds = %dec_label_pc_21694
  %63 = icmp ult i64 %61, 76
  br i1 %63, label %dec_label_pc_216b4, label %dec_label_pc_216c2, !insn.addr !14736

dec_label_pc_216b4:                               ; preds = %dec_label_pc_216ae
  %64 = icmp eq i64 %61, 25, !insn.addr !14737
  br i1 %64, label %dec_label_pc_216dc, label %dec_label_pc_216ba, !insn.addr !14738

dec_label_pc_216ba:                               ; preds = %dec_label_pc_216b4
  %65 = icmp eq i64 %61, 50, !insn.addr !14739
  %66 = icmp eq i1 %65, false, !insn.addr !14740
  br i1 %66, label %dec_label_pc_216d5, label %dec_label_pc_216e7, !insn.addr !14740

dec_label_pc_216c2:                               ; preds = %dec_label_pc_216ae
  store i64 ptrtoint (i32* @global_var_1 to i64), i64* %rsi.1.reg2mem
  switch i64 %61, label %dec_label_pc_216d5 [
    i64 100, label %dec_label_pc_21713
    i64 150, label %dec_label_pc_21705
  ]

dec_label_pc_216d5:                               ; preds = %dec_label_pc_216c2, %dec_label_pc_216ba
  store i64 0, i64* %rsi.1.reg2mem, !insn.addr !14741
  br label %dec_label_pc_21713, !insn.addr !14741

dec_label_pc_216dc:                               ; preds = %dec_label_pc_216b4
  store i64 ptrtoint (i32* @global_var_1 to i64), i64* %rsi.1.reg2mem, !insn.addr !14742
  br label %dec_label_pc_21713, !insn.addr !14742

dec_label_pc_216e7:                               ; preds = %dec_label_pc_216ba
  store i64 ptrtoint (i32* @global_var_1 to i64), i64* %rsi.1.reg2mem, !insn.addr !14743
  br label %dec_label_pc_21713, !insn.addr !14743

dec_label_pc_216f1:                               ; preds = %dec_label_pc_21694
  store i64 ptrtoint (i32* @global_var_1 to i64), i64* %rsi.1.reg2mem, !insn.addr !14744
  br label %dec_label_pc_21713, !insn.addr !14744

dec_label_pc_21705:                               ; preds = %dec_label_pc_216c2
  store i64 ptrtoint (i32* @global_var_1 to i64), i64* %rsi.1.reg2mem, !insn.addr !14745
  br label %dec_label_pc_21713, !insn.addr !14745

dec_label_pc_21713:                               ; preds = %dec_label_pc_216c2, %dec_label_pc_21705, %dec_label_pc_216f1, %dec_label_pc_216e7, %dec_label_pc_216dc, %dec_label_pc_216d5
  %rsi.1.reload = load i64, i64* %rsi.1.reg2mem
  store i64 0, i64* %rbx.1.reg2mem, !insn.addr !14746
  store i64 %rsi.1.reload, i64* %rsi.2.reg2mem, !insn.addr !14746
  br label %dec_label_pc_21730, !insn.addr !14746

dec_label_pc_21730:                               ; preds = %dec_label_pc_21680, %dec_label_pc_21713
  %rsi.2.reload = load i64, i64* %rsi.2.reg2mem
  %rbx.1.reload = load i64, i64* %rbx.1.reg2mem
  %67 = icmp eq i64 %rcx.0.reload, ptrtoint (i32* @global_var_2 to i64), !insn.addr !14747
  %68 = icmp eq i64 %rcx.0.reload, ptrtoint (i8** @global_var_3 to i64), !insn.addr !14748
  %or.cond10 = or i1 %67, %68
  store i64 %rsi.2.reload, i64* %rsi.3.reg2mem, !insn.addr !14749
  br i1 %or.cond10, label %dec_label_pc_21761, label %dec_label_pc_21745, !insn.addr !14749

dec_label_pc_21745:                               ; preds = %dec_label_pc_21730
  %69 = icmp eq i64 %rcx.0.reload, ptrtoint (i32* @global_var_1 to i64), !insn.addr !14750
  %70 = icmp eq i1 %69, false, !insn.addr !14751
  %71 = and i64 %rsi.2.reload, 4294967295
  %72 = select i1 %70, i64 0, i64 %71, !insn.addr !14751
  store i64 %72, i64* %rsi.3.reg2mem, !insn.addr !14751
  br label %dec_label_pc_21761, !insn.addr !14751

dec_label_pc_21761:                               ; preds = %dec_label_pc_21745, %dec_label_pc_21730
  %rsi.3.reload = load i64, i64* %rsi.3.reg2mem
  %73 = icmp eq i64 %rdi.0.reload, ptrtoint (i32* @global_var_2 to i64), !insn.addr !14752
  br i1 %73, label %dec_label_pc_21774, label %dec_label_pc_21767, !insn.addr !14753

dec_label_pc_21767:                               ; preds = %dec_label_pc_21761
  %74 = icmp eq i64 %rdi.0.reload, ptrtoint (i16* @global_var_4 to i64), !insn.addr !14754
  store i64 0, i64* %rsi.4.reg2mem, !insn.addr !14755
  br i1 %74, label %dec_label_pc_21780, label %dec_label_pc_2178a, !insn.addr !14755

dec_label_pc_21774:                               ; preds = %dec_label_pc_21761
  store i64 %rsi.3.reload, i64* %rsi.4.reg2mem, !insn.addr !14756
  br label %dec_label_pc_2178a, !insn.addr !14756

dec_label_pc_21780:                               ; preds = %dec_label_pc_21767
  store i64 %rsi.3.reload, i64* %rsi.4.reg2mem, !insn.addr !14757
  br label %dec_label_pc_2178a, !insn.addr !14757

dec_label_pc_2178a:                               ; preds = %dec_label_pc_21767, %dec_label_pc_21780, %dec_label_pc_21774
  %rsi.4.reload = load i64, i64* %rsi.4.reg2mem
  %75 = load i32, i32* %stack_var_-64, align 4, !insn.addr !14758
  %76 = icmp eq i32 %75, 0, !insn.addr !14758
  %77 = icmp eq i1 %76, false, !insn.addr !14759
  br i1 %77, label %dec_label_pc_21819, label %dec_label_pc_21794, !insn.addr !14759

dec_label_pc_21794:                               ; preds = %dec_label_pc_2178a
  br i1 false, label %dec_label_pc_217ec, label %dec_label_pc_217de, !insn.addr !14760

dec_label_pc_217de:                               ; preds = %dec_label_pc_21794
  store i64 ptrtoint (i32* @global_var_1 to i64), i64* %rax.1.reg2mem, !insn.addr !14761
  store i64 0, i64* %rcx.1.reg2mem, !insn.addr !14761
  store i64 -500000, i64* %rbx.2.reg2mem, !insn.addr !14761
  br label %dec_label_pc_21807, !insn.addr !14761

dec_label_pc_217ec:                               ; preds = %dec_label_pc_21794
  store i64 0, i64* %rax.1.reg2mem, !insn.addr !14762
  store i64 0, i64* %rcx.1.reg2mem, !insn.addr !14762
  store i64 0, i64* %rbx.2.reg2mem, !insn.addr !14762
  br i1 icmp ult (i1* @global_var_3d08f, i1* null), label %dec_label_pc_21807, label %dec_label_pc_217fa, !insn.addr !14762

dec_label_pc_217fa:                               ; preds = %dec_label_pc_217ec
  store i64 ptrtoint (i32* @global_var_1 to i64), i64* %rax.1.reg2mem, !insn.addr !14763
  store i64 -2, i64* %rcx.1.reg2mem, !insn.addr !14763
  store i64 500000, i64* %rbx.2.reg2mem, !insn.addr !14763
  br label %dec_label_pc_21807, !insn.addr !14763

dec_label_pc_21807:                               ; preds = %dec_label_pc_217ec, %dec_label_pc_217fa, %dec_label_pc_217de
  %rbx.2.reload = load i64, i64* %rbx.2.reg2mem
  %rcx.1.reload = load i64, i64* %rcx.1.reg2mem
  %rax.1.reload = load i64, i64* %rax.1.reg2mem
  %78 = add i64 %rcx.1.reload, %rax.1.reload, !insn.addr !14764
  %79 = icmp ult i64 %78, 128
  %80 = and i64 %rsi.4.reload, 4294967295
  %81 = select i1 %79, i64 0, i64 %80, !insn.addr !14765
  store i64 %rbx.2.reload, i64* %rbx.3.reg2mem, !insn.addr !14766
  store i64 %81, i64* %rsi.5.reg2mem, !insn.addr !14766
  br label %dec_label_pc_2183a, !insn.addr !14766

dec_label_pc_21819:                               ; preds = %dec_label_pc_2178a
  store i64 %rbx.1.reload, i64* %rbx.3.reg2mem, !insn.addr !14767
  store i64 %rsi.4.reload, i64* %rsi.5.reg2mem, !insn.addr !14767
  br label %dec_label_pc_2183a, !insn.addr !14767

dec_label_pc_2183a:                               ; preds = %dec_label_pc_21819, %dec_label_pc_21807
  %rsi.5.reload = load i64, i64* %rsi.5.reg2mem
  %rbx.3.reload = load i64, i64* %rbx.3.reg2mem
  store i64 0, i64* %rcx.2.reg2mem, !insn.addr !14768
  store i64 %rbx.3.reload, i64* %rbx.4.reg2mem, !insn.addr !14768
  br label %dec_label_pc_2184f, !insn.addr !14768

dec_label_pc_2184f:                               ; preds = %dec_label_pc_2187b, %dec_label_pc_2183a
  %rbx.4.reload = load i64, i64* %rbx.4.reg2mem
  %rcx.2.reload = load i64, i64* %rcx.2.reg2mem
  %82 = mul i64 %rbx.4.reload, 2, !insn.addr !14769
  %83 = icmp ult i64 %82, 268435455, !insn.addr !14770
  %84 = icmp eq i64 %rcx.2.reload, ptrtoint (i8* @global_var_f to i64), !insn.addr !14771
  %or.cond7 = or i1 %84, %83
  br i1 %or.cond7, label %dec_label_pc_2187b, label %dec_label_pc_21861, !insn.addr !14772

dec_label_pc_21861:                               ; preds = %dec_label_pc_2184f
  br label %dec_label_pc_2187b, !insn.addr !14773

dec_label_pc_2187b:                               ; preds = %dec_label_pc_21861, %dec_label_pc_2184f
  %85 = add i64 %rcx.2.reload, ptrtoint (i32* @global_var_1 to i64), !insn.addr !14774
  %86 = icmp eq i64 %85, ptrtoint (i8* @global_var_10 to i64), !insn.addr !14775
  %87 = icmp eq i1 %86, false, !insn.addr !14776
  store i64 %85, i64* %rcx.2.reg2mem, !insn.addr !14776
  store i64 %82, i64* %rbx.4.reg2mem, !insn.addr !14776
  br i1 %87, label %dec_label_pc_2184f, label %dec_label_pc_21885, !insn.addr !14776

dec_label_pc_21885:                               ; preds = %dec_label_pc_2187b
  %88 = trunc i64 %rsi.5.reload to i8, !insn.addr !14777
  %89 = icmp eq i8 %88, 0, !insn.addr !14777
  store i64 %rsi.5.reload, i64* %rsi.6.reg2mem, !insn.addr !14778
  br i1 %89, label %dec_label_pc_218f3, label %dec_label_pc_2188a, !insn.addr !14778

dec_label_pc_2188a:                               ; preds = %dec_label_pc_21885
  store i64 0, i64* %rsi.6.reg2mem, !insn.addr !14779
  br i1 true, label %dec_label_pc_218f3, label %dec_label_pc_218c8, !insn.addr !14779

dec_label_pc_218c8:                               ; preds = %dec_label_pc_2188a
  store i64 undef, i64* %rsi.6.reg2mem, !insn.addr !14780
  br label %dec_label_pc_218f3, !insn.addr !14780

dec_label_pc_218f3:                               ; preds = %dec_label_pc_213a1, %dec_label_pc_218c8, %dec_label_pc_2188a, %dec_label_pc_21885, %dec_label_pc_21404
  %rsi.6.reload = load i64, i64* %rsi.6.reg2mem
  %90 = and i64 %rsi.6.reload, 4294967295, !insn.addr !14781
  ret i64 %90, !insn.addr !14782

dec_label_pc_2190e:                               ; preds = %dec_label_pc_21464, %dec_label_pc_21443
  store i32 ptrtoint (i32* @global_var_1 to i32), i32* %stack_var_-120, align 4, !insn.addr !14783
  store i64 sext (i16 ptrtoint (i8** @global_var_7 to i16) to i64), i64* %stack_var_-160.0.reg2mem, !insn.addr !14784
  br label %dec_label_pc_214c6, !insn.addr !14784

dec_label_pc_2194e:                               ; preds = %dec_label_pc_21471, %dec_label_pc_21439
  store i32 ptrtoint (i32* @global_var_1 to i32), i32* %stack_var_-120, align 4, !insn.addr !14785
  store i64 sext (i16 ptrtoint (i8* @global_var_6 to i16) to i64), i64* %stack_var_-160.0.reg2mem, !insn.addr !14786
  br label %dec_label_pc_214c6, !insn.addr !14786

dec_label_pc_2198e:                               ; preds = %dec_label_pc_2147e, %dec_label_pc_2142f
  store i32 ptrtoint (i32* @global_var_1 to i32), i32* %stack_var_-120, align 4, !insn.addr !14787
  store i64 sext (i16 ptrtoint (i8* @global_var_5 to i16) to i64), i64* %stack_var_-160.0.reg2mem, !insn.addr !14788
  br label %dec_label_pc_214c6, !insn.addr !14788

dec_label_pc_219ce:                               ; preds = %dec_label_pc_2144d
  ret i64 %22, !insn.addr !14789
}

define i8 @BLACKWIDOW_ProgramVcoPor(i64 %ptCommunication) local_unnamed_addr {
dec_label_pc_219e8:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = call i64 @__decompiler_undefined_function_0()
  %2 = call i64 @__asm_wait(), !insn.addr !14790
  %3 = and i64 %0, 4294967295, !insn.addr !14791
  %4 = add nsw i64 %3, -57, !insn.addr !14792
  %5 = inttoptr i64 %4 to i8*, !insn.addr !14792
  %6 = load i8, i8* %5, align 1, !insn.addr !14792
  %7 = trunc i64 %1 to i8, !insn.addr !14792
  %8 = add i8 %6, %7, !insn.addr !14792
  store i8 %8, i8* %5, align 1, !insn.addr !14792
  %9 = trunc i64 %0 to i8, !insn.addr !14793
  ret i8 %9, !insn.addr !14793
}

define i64 @function_21a05() local_unnamed_addr {
dec_label_pc_21a05:
  %rax = alloca i64, align 8
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = bitcast i64* %rax to i8*
  %2 = trunc i64 %0 to i8
  %3 = inttoptr i64 %0 to i8*, !insn.addr !14794
  store i8 %2, i8* %3, align 1, !insn.addr !14794
  %4 = load i8, i8* %1, align 8, !insn.addr !14795
  %5 = load i64, i64* %rax, align 8
  %6 = trunc i64 %5 to i8, !insn.addr !14795
  %7 = add i8 %4, %6, !insn.addr !14795
  %8 = inttoptr i64 %5 to i8*, !insn.addr !14795
  store i8 %7, i8* %8, align 1, !insn.addr !14795
  %9 = load i64, i64* %rax, align 8, !insn.addr !14796
  ret i64 %9, !insn.addr !14796
}

define i64 @BLACKWIDOW_ProgramVcoPor.614(i64 %arg1) local_unnamed_addr {
dec_label_pc_21a18:
  %rax.0.reg2mem = alloca i64, !insn.addr !14797
  %stack_var_-32 = alloca i32*, align 8
  %0 = call i64 @mcount(), !insn.addr !14798
  %1 = icmp eq i64 %arg1, 0, !insn.addr !14799
  %2 = icmp eq i1 %1, false, !insn.addr !14800
  %3 = zext i1 %2 to i64, !insn.addr !14800
  %4 = and i64 %0, -256, !insn.addr !14800
  %5 = or i64 %4, %3, !insn.addr !14800
  store i64 %5, i64* %rax.0.reg2mem, !insn.addr !14801
  br i1 %1, label %dec_label_pc_21e84, label %dec_label_pc_21a35, !insn.addr !14801

dec_label_pc_21a35:                               ; preds = %dec_label_pc_21a18
  store i32* null, i32** %stack_var_-32, align 8, !insn.addr !14802
  %6 = ptrtoint i32** %stack_var_-32 to i64, !insn.addr !14803
  %7 = trunc i64 %6 to i8, !insn.addr !14804
  %8 = icmp eq i8 %7, 0, !insn.addr !14804
  store i64 %6, i64* %rax.0.reg2mem, !insn.addr !14805
  br i1 %8, label %dec_label_pc_21e84, label %dec_label_pc_21a6e, !insn.addr !14805

dec_label_pc_21a6e:                               ; preds = %dec_label_pc_21a35
  store i32* inttoptr (i64 or (i64 ptrtoint (i32** @global_var_20 to i64), i64 128) to i32*), i32** %stack_var_-32, align 8, !insn.addr !14806
  store i64 or (i64 ptrtoint (i32** @global_var_20 to i64), i64 128), i64* %rax.0.reg2mem, !insn.addr !14807
  br i1 icmp eq (i8 trunc (i64 or (i64 ptrtoint (i32** @global_var_20 to i64), i64 128) to i8), i8 0), label %dec_label_pc_21e84, label %dec_label_pc_21d02, !insn.addr !14807

dec_label_pc_21d02:                               ; preds = %dec_label_pc_21a6e
  store i32* inttoptr (i64 or (i64 and (i64 or (i64 ptrtoint (i32** @global_var_20 to i64), i64 128), i64 -256), i64 or (i64 and (i64 or (i64 ptrtoint (i32** @global_var_20 to i64), i64 128), i64 63), i64 192)) to i32*), i32** %stack_var_-32, align 8, !insn.addr !14808
  store i64 or (i64 and (i64 or (i64 ptrtoint (i32** @global_var_20 to i64), i64 128), i64 -256), i64 or (i64 and (i64 or (i64 ptrtoint (i32** @global_var_20 to i64), i64 128), i64 63), i64 192)), i64* %rax.0.reg2mem, !insn.addr !14809
  br i1 icmp eq (i8 trunc (i64 or (i64 and (i64 or (i64 ptrtoint (i32** @global_var_20 to i64), i64 128), i64 -256), i64 or (i64 and (i64 or (i64 ptrtoint (i32** @global_var_20 to i64), i64 128), i64 63), i64 192)) to i8), i8 0), label %dec_label_pc_21e84, label %dec_label_pc_21e02, !insn.addr !14809

dec_label_pc_21e02:                               ; preds = %dec_label_pc_21d02
  store i32* inttoptr (i64 and (i64 or (i64 and (i64 or (i64 ptrtoint (i32** @global_var_20 to i64), i64 128), i64 -256), i64 or (i64 and (i64 or (i64 ptrtoint (i32** @global_var_20 to i64), i64 128), i64 63), i64 192)), i64 -129) to i32*), i32** %stack_var_-32, align 8, !insn.addr !14810
  store i64 and (i64 or (i64 and (i64 or (i64 ptrtoint (i32** @global_var_20 to i64), i64 128), i64 -256), i64 or (i64 and (i64 or (i64 ptrtoint (i32** @global_var_20 to i64), i64 128), i64 63), i64 192)), i64 -129), i64* %rax.0.reg2mem
  br label %dec_label_pc_21e84

dec_label_pc_21e84:                               ; preds = %dec_label_pc_21e02, %dec_label_pc_21a6e, %dec_label_pc_21a35, %dec_label_pc_21a18, %dec_label_pc_21d02
  %rax.0.reload = load i64, i64* %rax.0.reg2mem
  ret i64 %rax.0.reload, !insn.addr !14811
}

define i8 @BLACKWIDOW_ProgramVcoChannelChange(i64 %ptCommunication) local_unnamed_addr {
dec_label_pc_21ede:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = trunc i64 %0 to i8, !insn.addr !14812
  ret i8 %1, !insn.addr !14812
}

define i64 @BLACKWIDOW_ProgramVcoChannelChange.443(i64 %arg1) local_unnamed_addr {
dec_label_pc_21f0e:
  %.reg2mem = alloca i64, !insn.addr !14813
  %rbx.0.reg2mem = alloca i64, !insn.addr !14813
  %stack_var_-48 = alloca i8, align 1
  %0 = call i64 @mcount(), !insn.addr !14814
  store i8 0, i8* %stack_var_-48, align 1, !insn.addr !14815
  %1 = icmp eq i64 %arg1, 0, !insn.addr !14816
  store i64 0, i64* %.reg2mem, !insn.addr !14817
  br i1 %1, label %dec_label_pc_2218b, label %dec_label_pc_21f37, !insn.addr !14817

dec_label_pc_21f37:                               ; preds = %dec_label_pc_21f0e
  %2 = ptrtoint i8* %stack_var_-48 to i64, !insn.addr !14818
  %3 = trunc i64 %2 to i8, !insn.addr !14819
  %4 = icmp eq i8 %3, 0, !insn.addr !14819
  store i64 0, i64* %.reg2mem, !insn.addr !14820
  br i1 %4, label %dec_label_pc_2218b, label %dec_label_pc_21f68, !insn.addr !14820

dec_label_pc_21f68:                               ; preds = %dec_label_pc_21f37
  store i8 64, i8* %stack_var_-48, align 1, !insn.addr !14821
  store i64 ptrtoint (i32* @global_var_2 to i64), i64* %rbx.0.reg2mem, !insn.addr !14822
  br label %dec_label_pc_22153, !insn.addr !14822

dec_label_pc_22153:                               ; preds = %dec_label_pc_22153, %dec_label_pc_21f68
  %rbx.0.reload = load i64, i64* %rbx.0.reg2mem
  %5 = sub i64 %rbx.0.reload, ptrtoint (i32* @global_var_1 to i64), !insn.addr !14823
  %6 = icmp eq i64 %5, 0, !insn.addr !14824
  %7 = icmp eq i1 %6, false, !insn.addr !14825
  store i64 %5, i64* %rbx.0.reg2mem, !insn.addr !14826
  store i64 64, i64* %.reg2mem, !insn.addr !14826
  br i1 %7, label %dec_label_pc_22153, label %dec_label_pc_2218b, !insn.addr !14826

dec_label_pc_2218b:                               ; preds = %dec_label_pc_22153, %dec_label_pc_21f37, %dec_label_pc_21f0e
  %.reload = load i64, i64* %.reg2mem, !insn.addr !14827
  ret i64 %.reload, !insn.addr !14828
}

define i8 @BLACKWIDOW_SetBandwidthConfig(i64 %ptCommunication, i32 %eFilterBandwidth, i32 %eGmcBandwidth) local_unnamed_addr {
dec_label_pc_2222b:
  %0 = call i64 @__decompiler_undefined_function_0()
  %rax = alloca i64, align 8
  %1 = call i64 @__decompiler_undefined_function_0()
  %2 = add i64 %0, -71, !insn.addr !14829
  %3 = inttoptr i64 %2 to i8*, !insn.addr !14829
  %4 = load i8, i8* %3, align 1, !insn.addr !14829
  %5 = trunc i64 %1 to i8, !insn.addr !14829
  %6 = add i8 %4, %5, !insn.addr !14829
  store i8 %6, i8* %3, align 1, !insn.addr !14829
  %7 = bitcast i64* %rax to i8*
  %8 = load i8, i8* %7, align 8, !insn.addr !14830
  %9 = load i64, i64* %rax, align 8
  %10 = trunc i64 %9 to i8, !insn.addr !14830
  %11 = add i8 %8, %10, !insn.addr !14830
  %12 = inttoptr i64 %9 to i8*, !insn.addr !14830
  store i8 %11, i8* %12, align 1, !insn.addr !14830
  %13 = load i8, i8* %7, align 8, !insn.addr !14831
  %14 = load i64, i64* %rax, align 8
  %15 = trunc i64 %14 to i8, !insn.addr !14831
  %16 = add i8 %13, %15, !insn.addr !14831
  %17 = inttoptr i64 %14 to i8*, !insn.addr !14831
  store i8 %16, i8* %17, align 1, !insn.addr !14831
  %18 = load i64, i64* %rax, align 8, !insn.addr !14832
  %19 = trunc i64 %18 to i8, !insn.addr !14832
  ret i8 %19, !insn.addr !14832
}

define i64 @BLACKWIDOW_SetBandwidthConfig.605(i64 %arg1, i64 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_2225b:
  %0 = call i64 @mcount(), !insn.addr !14833
  %1 = icmp eq i64 %arg1, 0, !insn.addr !14834
  %2 = icmp eq i1 %1, false, !insn.addr !14835
  %3 = zext i1 %2 to i64, !insn.addr !14835
  %4 = and i64 %0, -256, !insn.addr !14835
  %5 = or i64 %4, %3, !insn.addr !14835
  ret i64 %5, !insn.addr !14836
}

define i8 @BLACKWIDOW_SetFilterBandwidth(i64 %ptCommunication, i64 %ulBandwidthKhz) local_unnamed_addr {
dec_label_pc_222ce:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = trunc i64 %0 to i8
  %2 = mul i8 %1, 2, !insn.addr !14837
  %3 = inttoptr i64 %0 to i8*, !insn.addr !14837
  store i8 %2, i8* %3, align 1, !insn.addr !14837
  ret i8 %1, !insn.addr !14838
}

define i64 @BLACKWIDOW_SetFilterBandwidth.298(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_222fe:
  %0 = call i64 @mcount(), !insn.addr !14839
  ret i64 0
}

define void @BLACKWIDOW_Sleep(i64 %ulTimeUs) local_unnamed_addr {
dec_label_pc_22347:
  ret void, !insn.addr !14840
}

define i8 @BLACKWIDOW_ProgramPllPor(i64 %ptCommunication) local_unnamed_addr {
dec_label_pc_22352:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = call i64 @__decompiler_undefined_function_0()
  %2 = add i64 %1, -119, !insn.addr !14841
  %3 = inttoptr i64 %2 to i32*, !insn.addr !14841
  %4 = load i32, i32* %3, align 4, !insn.addr !14841
  %5 = trunc i64 %0 to i32, !insn.addr !14841
  %6 = add i32 %4, %5, !insn.addr !14841
  store i32 %6, i32* %3, align 4, !insn.addr !14841
  %7 = trunc i64 %1 to i8, !insn.addr !14842
  ret i8 %7, !insn.addr !14842
}

define i64 @function_22358(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4, i64 %arg5) local_unnamed_addr {
dec_label_pc_22358:
  %0 = call i64 @__decompiler_undefined_function_0()
  ret i64 %0, !insn.addr !14843
}

define i64 @BLACKWIDOW_Sleep.535() local_unnamed_addr {
dec_label_pc_22377:
  %0 = call i64 @mcount(), !insn.addr !14844
  ret i64 %0, !insn.addr !14845
}

define i64 @BLACKWIDOW_ProgramPllPor.336(i64 %arg1) local_unnamed_addr {
dec_label_pc_22382:
  %0 = call i64 @mcount(), !insn.addr !14846
  %1 = icmp eq i64 %arg1, 0, !insn.addr !14847
  %2 = icmp eq i1 %1, false, !insn.addr !14848
  %3 = zext i1 %2 to i64, !insn.addr !14848
  %4 = and i64 %0, -256, !insn.addr !14848
  %5 = or i64 %4, %3, !insn.addr !14848
  ret i64 %5, !insn.addr !14849
}

define i8 @BLACKWIDOW_SetPowerMode(i64 %ptCommunication, i32 %ePowerMode) local_unnamed_addr {
dec_label_pc_224b7:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = call i64 @__decompiler_undefined_function_0()
  %2 = and i64 %1, or (i64 zext (i8 ptrtoint (i32* @global_var_1 to i8) to i64), i64 -256), !insn.addr !14850
  %3 = inttoptr i64 %2 to i8*, !insn.addr !14851
  %4 = load i8, i8* %3, align 4, !insn.addr !14851
  %5 = trunc i64 %2 to i8, !insn.addr !14851
  %6 = add i8 %4, %5, !insn.addr !14851
  store i8 %6, i8* %3, align 4, !insn.addr !14851
  %7 = add i64 %0, -71, !insn.addr !14852
  %8 = inttoptr i64 %7 to i8*, !insn.addr !14852
  %9 = load i8, i8* %8, align 1, !insn.addr !14852
  %10 = add i8 %9, %5, !insn.addr !14852
  store i8 %10, i8* %8, align 1, !insn.addr !14852
  %11 = load i8, i8* %3, align 4, !insn.addr !14853
  %factor = mul i8 %5, 2
  %12 = add i8 %11, %factor, !insn.addr !14854
  store i8 %12, i8* %3, align 4, !insn.addr !14854
  ret i8 %5, !insn.addr !14855
}

define i64 @BLACKWIDOW_SetPowerMode.471(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_224e7:
  %stack_var_-32 = alloca i32, align 4
  %0 = call i64 @mcount(), !insn.addr !14856
  store i32 0, i32* %stack_var_-32, align 4, !insn.addr !14857
  %1 = trunc i64 %arg2 to i32, !insn.addr !14858
  %2 = icmp eq i32 %1, 0, !insn.addr !14858
  br i1 %2, label %dec_label_pc_22521, label %dec_label_pc_22f1b, !insn.addr !14859

dec_label_pc_22521:                               ; preds = %dec_label_pc_224e7
  store i32 171, i32* %stack_var_-32, align 4, !insn.addr !14860
  %3 = call i64 @BLACKWIDOW_ProgramPllPor.336(i64 %arg1), !insn.addr !14861
  %4 = call i64 @BLACKWIDOW_ProgramVcoPor.614(i64 %arg1), !insn.addr !14862
  ret i64 %4, !insn.addr !14863

dec_label_pc_22f1b:                               ; preds = %dec_label_pc_224e7
  %5 = ptrtoint i32* %stack_var_-32 to i64, !insn.addr !14864
  %6 = trunc i64 %5 to i8, !insn.addr !14865
  %7 = icmp eq i8 %6, 0, !insn.addr !14865
  br i1 %7, label %dec_label_pc_233d6, label %dec_label_pc_22f4c, !insn.addr !14866

dec_label_pc_22f4c:                               ; preds = %dec_label_pc_22f1b
  store i32 0, i32* %stack_var_-32, align 4, !insn.addr !14867
  br label %dec_label_pc_233d6

dec_label_pc_233d6:                               ; preds = %dec_label_pc_22f4c, %dec_label_pc_22f1b
  ret i64 0, !insn.addr !14868
}

define i8 @BLACKWIDOW_Initialize(i64 %ptCommunication, i64 %ptConfig) local_unnamed_addr {
dec_label_pc_2342c:
  %0 = call i64 @__decompiler_undefined_function_0()
  %rax = alloca i64, align 8
  %1 = call i64 @__decompiler_undefined_function_0()
  %2 = bitcast i64* %rax to i8*
  %3 = trunc i64 %1 to i8
  %4 = mul i8 %3, 2, !insn.addr !14869
  %5 = inttoptr i64 %1 to i8*, !insn.addr !14869
  store i8 %4, i8* %5, align 1, !insn.addr !14869
  %6 = add i64 %0, -71, !insn.addr !14870
  %7 = inttoptr i64 %6 to i8*, !insn.addr !14870
  %8 = load i8, i8* %7, align 1, !insn.addr !14870
  %9 = load i64, i64* %rax, align 8, !insn.addr !14870
  %10 = trunc i64 %9 to i8, !insn.addr !14870
  %11 = add i8 %8, %10, !insn.addr !14870
  store i8 %11, i8* %7, align 1, !insn.addr !14870
  %12 = load i8, i8* %2, align 8, !insn.addr !14871
  %13 = load i64, i64* %rax, align 8
  %14 = trunc i64 %13 to i8, !insn.addr !14871
  %15 = add i8 %12, %14, !insn.addr !14871
  %16 = inttoptr i64 %13 to i8*, !insn.addr !14871
  store i8 %15, i8* %16, align 1, !insn.addr !14871
  %17 = load i8, i8* %2, align 8, !insn.addr !14872
  %18 = load i64, i64* %rax, align 8
  %19 = trunc i64 %18 to i8, !insn.addr !14872
  %20 = add i8 %17, %19, !insn.addr !14872
  %21 = inttoptr i64 %18 to i8*, !insn.addr !14872
  store i8 %20, i8* %21, align 1, !insn.addr !14872
  %22 = load i64, i64* %rax, align 8, !insn.addr !14873
  %23 = trunc i64 %22 to i8, !insn.addr !14873
  ret i8 %23, !insn.addr !14873
}

define i64 @BLACKWIDOW_Initialize.508(i64 %arg1, i32* %arg2, i64 %arg3) local_unnamed_addr {
dec_label_pc_2345c:
  %0 = ptrtoint i32* %arg2 to i64
  %1 = call i64 @mcount(), !insn.addr !14874
  %2 = add i64 %arg1, 40, !insn.addr !14875
  %3 = inttoptr i64 %2 to i64*, !insn.addr !14875
  %4 = load i64, i64* %3, align 8, !insn.addr !14875
  %5 = add i64 %0, ptrtoint (i8* @global_var_8 to i64), !insn.addr !14876
  %6 = inttoptr i64 %5 to i64*, !insn.addr !14876
  %7 = load i64, i64* %6, align 8, !insn.addr !14876
  %8 = add i64 %4, 8, !insn.addr !14877
  %9 = inttoptr i64 %8 to i64*, !insn.addr !14877
  store i64 %7, i64* %9, align 8, !insn.addr !14877
  %10 = add i64 %4, 16, !insn.addr !14878
  %11 = inttoptr i64 %10 to i32*, !insn.addr !14878
  store i32 0, i32* %11, align 4, !insn.addr !14878
  %12 = add i64 %4, 20, !insn.addr !14879
  %13 = inttoptr i64 %12 to i32*, !insn.addr !14879
  store i32 ptrtoint (i8** @global_var_7 to i32), i32* %13, align 4, !insn.addr !14879
  %14 = add i64 %4, 24, !insn.addr !14880
  %15 = inttoptr i64 %14 to i32*, !insn.addr !14880
  store i32 63, i32* %15, align 4, !insn.addr !14880
  %16 = add i64 %4, 33, !insn.addr !14881
  %17 = inttoptr i64 %16 to i8*, !insn.addr !14881
  store i8 0, i8* %17, align 1, !insn.addr !14881
  %18 = add i64 %4, 34, !insn.addr !14882
  %19 = inttoptr i64 %18 to i8*, !insn.addr !14882
  store i8 0, i8* %19, align 1, !insn.addr !14882
  %20 = add i64 %4, 32, !insn.addr !14883
  %21 = inttoptr i64 %20 to i8*, !insn.addr !14883
  store i8 0, i8* %21, align 1, !insn.addr !14883
  %22 = add i64 %4, 28, !insn.addr !14884
  %23 = inttoptr i64 %22 to i32*, !insn.addr !14884
  store i32 0, i32* %23, align 4, !insn.addr !14884
  %24 = inttoptr i64 %4 to i32*, !insn.addr !14885
  %25 = load i32, i32* %24, align 4, !insn.addr !14885
  %26 = icmp eq i32 %25, 0, !insn.addr !14886
  %27 = icmp eq i1 %26, false, !insn.addr !14887
  br i1 %27, label %dec_label_pc_234d1, label %dec_label_pc_234ba, !insn.addr !14887

dec_label_pc_234ba:                               ; preds = %dec_label_pc_2345c
  %28 = add i64 %4, 56, !insn.addr !14888
  %29 = inttoptr i64 %28 to i32*, !insn.addr !14888
  store i32 ptrtoint (i8** @global_var_3 to i32), i32* %29, align 4, !insn.addr !14888
  %30 = add i64 %4, 36, !insn.addr !14889
  %31 = inttoptr i64 %30 to i32*, !insn.addr !14889
  store i32 ptrtoint (i32* @global_var_2 to i32), i32* %31, align 4, !insn.addr !14889
  %32 = add i64 %4, 40, !insn.addr !14890
  %33 = inttoptr i64 %32 to i32*, !insn.addr !14890
  store i32 ptrtoint (i32* @global_var_1 to i32), i32* %33, align 4, !insn.addr !14890
  br label %dec_label_pc_2351e, !insn.addr !14891

dec_label_pc_234d1:                               ; preds = %dec_label_pc_2345c
  %34 = icmp eq i32 %25, 1, !insn.addr !14892
  %35 = icmp eq i1 %34, false, !insn.addr !14893
  br i1 %35, label %dec_label_pc_234ed, label %dec_label_pc_234d6, !insn.addr !14893

dec_label_pc_234d6:                               ; preds = %dec_label_pc_234d1
  %36 = add i64 %4, 56, !insn.addr !14894
  %37 = inttoptr i64 %36 to i32*, !insn.addr !14894
  store i32 ptrtoint (i8** @global_var_3 to i32), i32* %37, align 4, !insn.addr !14894
  %38 = add i64 %4, 36, !insn.addr !14895
  %39 = inttoptr i64 %38 to i32*, !insn.addr !14895
  store i32 ptrtoint (i8** @global_var_3 to i32), i32* %39, align 4, !insn.addr !14895
  %40 = add i64 %4, 40, !insn.addr !14896
  %41 = inttoptr i64 %40 to i32*, !insn.addr !14896
  store i32 ptrtoint (i32* @global_var_1 to i32), i32* %41, align 4, !insn.addr !14896
  br label %dec_label_pc_2351e, !insn.addr !14897

dec_label_pc_234ed:                               ; preds = %dec_label_pc_234d1
  %42 = icmp eq i32 %25, 2, !insn.addr !14898
  %43 = icmp eq i1 %42, false, !insn.addr !14899
  %44 = add i64 %4, 56
  %45 = inttoptr i64 %44 to i32*
  br i1 %43, label %dec_label_pc_23509, label %dec_label_pc_234f2, !insn.addr !14899

dec_label_pc_234f2:                               ; preds = %dec_label_pc_234ed
  store i32 ptrtoint (i8* @global_var_6 to i32), i32* %45, align 4, !insn.addr !14900
  %46 = add i64 %4, 36, !insn.addr !14901
  %47 = inttoptr i64 %46 to i32*, !insn.addr !14901
  store i32 ptrtoint (i8** @global_var_3 to i32), i32* %47, align 4, !insn.addr !14901
  %48 = add i64 %4, 40, !insn.addr !14902
  %49 = inttoptr i64 %48 to i32*, !insn.addr !14902
  store i32 ptrtoint (i32* @global_var_1 to i32), i32* %49, align 4, !insn.addr !14902
  br label %dec_label_pc_2351e, !insn.addr !14903

dec_label_pc_23509:                               ; preds = %dec_label_pc_234ed
  store i32 ptrtoint (i8** @global_var_3 to i32), i32* %45, align 4, !insn.addr !14904
  %50 = add i64 %4, 36, !insn.addr !14905
  %51 = inttoptr i64 %50 to i32*, !insn.addr !14905
  store i32 ptrtoint (i8** @global_var_3 to i32), i32* %51, align 4, !insn.addr !14905
  %52 = add i64 %4, 40, !insn.addr !14906
  %53 = inttoptr i64 %52 to i32*, !insn.addr !14906
  store i32 ptrtoint (i8** @global_var_3 to i32), i32* %53, align 4, !insn.addr !14906
  br label %dec_label_pc_2351e, !insn.addr !14906

dec_label_pc_2351e:                               ; preds = %dec_label_pc_23509, %dec_label_pc_234f2, %dec_label_pc_234d6, %dec_label_pc_234ba
  %54 = add i64 %4, 44, !insn.addr !14907
  %55 = inttoptr i64 %54 to i32*, !insn.addr !14907
  store i32 ptrtoint (i8* @global_var_5 to i32), i32* %55, align 4, !insn.addr !14907
  %56 = add i64 %4, 48, !insn.addr !14908
  %57 = inttoptr i64 %56 to i32*, !insn.addr !14908
  store i32 ptrtoint (i16* @global_var_4 to i32), i32* %57, align 4, !insn.addr !14908
  %58 = add i64 %4, 52, !insn.addr !14909
  %59 = inttoptr i64 %58 to i32*, !insn.addr !14909
  store i32 ptrtoint (i8** @global_var_3 to i32), i32* %59, align 4, !insn.addr !14909
  %60 = add i64 %4, 65, !insn.addr !14910
  %61 = inttoptr i64 %60 to i8*, !insn.addr !14910
  store i8 0, i8* %61, align 1, !insn.addr !14910
  %62 = add i64 %4, 66, !insn.addr !14911
  %63 = inttoptr i64 %62 to i8*, !insn.addr !14911
  store i8 0, i8* %63, align 1, !insn.addr !14911
  %64 = add i64 %4, 64, !insn.addr !14912
  %65 = inttoptr i64 %64 to i8*, !insn.addr !14912
  store i8 0, i8* %65, align 1, !insn.addr !14912
  %66 = add i64 %4, 60, !insn.addr !14913
  %67 = inttoptr i64 %66 to i32*, !insn.addr !14913
  store i32 0, i32* %67, align 4, !insn.addr !14913
  %68 = load i32, i32* %24, align 4, !insn.addr !14914
  %69 = icmp eq i32 %68, 0, !insn.addr !14915
  %70 = icmp eq i1 %69, false, !insn.addr !14916
  br i1 %70, label %dec_label_pc_23563, label %dec_label_pc_2354c, !insn.addr !14916

dec_label_pc_2354c:                               ; preds = %dec_label_pc_2351e
  %71 = add i64 %4, 88, !insn.addr !14917
  %72 = inttoptr i64 %71 to i32*, !insn.addr !14917
  store i32 ptrtoint (i8** @global_var_3 to i32), i32* %72, align 4, !insn.addr !14917
  %73 = add i64 %4, 68, !insn.addr !14918
  %74 = inttoptr i64 %73 to i32*, !insn.addr !14918
  store i32 ptrtoint (i32* @global_var_2 to i32), i32* %74, align 4, !insn.addr !14918
  %75 = add i64 %4, 72, !insn.addr !14919
  %76 = inttoptr i64 %75 to i32*, !insn.addr !14919
  store i32 ptrtoint (i32* @global_var_1 to i32), i32* %76, align 4, !insn.addr !14919
  br label %dec_label_pc_235b0, !insn.addr !14920

dec_label_pc_23563:                               ; preds = %dec_label_pc_2351e
  %77 = icmp eq i32 %68, 1, !insn.addr !14921
  %78 = icmp eq i1 %77, false, !insn.addr !14922
  br i1 %78, label %dec_label_pc_2357f, label %dec_label_pc_23568, !insn.addr !14922

dec_label_pc_23568:                               ; preds = %dec_label_pc_23563
  %79 = add i64 %4, 88, !insn.addr !14923
  %80 = inttoptr i64 %79 to i32*, !insn.addr !14923
  store i32 ptrtoint (i8** @global_var_3 to i32), i32* %80, align 4, !insn.addr !14923
  %81 = add i64 %4, 68, !insn.addr !14924
  %82 = inttoptr i64 %81 to i32*, !insn.addr !14924
  store i32 ptrtoint (i8** @global_var_3 to i32), i32* %82, align 4, !insn.addr !14924
  %83 = add i64 %4, 72, !insn.addr !14925
  %84 = inttoptr i64 %83 to i32*, !insn.addr !14925
  store i32 ptrtoint (i32* @global_var_1 to i32), i32* %84, align 4, !insn.addr !14925
  br label %dec_label_pc_235b0, !insn.addr !14926

dec_label_pc_2357f:                               ; preds = %dec_label_pc_23563
  %85 = icmp eq i32 %68, 2, !insn.addr !14927
  %86 = icmp eq i1 %85, false, !insn.addr !14928
  %87 = add i64 %4, 88
  %88 = inttoptr i64 %87 to i32*
  br i1 %86, label %dec_label_pc_2359b, label %dec_label_pc_23584, !insn.addr !14928

dec_label_pc_23584:                               ; preds = %dec_label_pc_2357f
  store i32 ptrtoint (i8* @global_var_6 to i32), i32* %88, align 4, !insn.addr !14929
  %89 = add i64 %4, 68, !insn.addr !14930
  %90 = inttoptr i64 %89 to i32*, !insn.addr !14930
  store i32 ptrtoint (i8** @global_var_3 to i32), i32* %90, align 4, !insn.addr !14930
  %91 = add i64 %4, 72, !insn.addr !14931
  %92 = inttoptr i64 %91 to i32*, !insn.addr !14931
  store i32 ptrtoint (i32* @global_var_1 to i32), i32* %92, align 4, !insn.addr !14931
  br label %dec_label_pc_235b0, !insn.addr !14932

dec_label_pc_2359b:                               ; preds = %dec_label_pc_2357f
  store i32 ptrtoint (i8** @global_var_3 to i32), i32* %88, align 4, !insn.addr !14933
  %93 = add i64 %4, 68, !insn.addr !14934
  %94 = inttoptr i64 %93 to i32*, !insn.addr !14934
  store i32 ptrtoint (i8** @global_var_3 to i32), i32* %94, align 4, !insn.addr !14934
  %95 = add i64 %4, 72, !insn.addr !14935
  %96 = inttoptr i64 %95 to i32*, !insn.addr !14935
  store i32 ptrtoint (i8** @global_var_3 to i32), i32* %96, align 4, !insn.addr !14935
  br label %dec_label_pc_235b0, !insn.addr !14935

dec_label_pc_235b0:                               ; preds = %dec_label_pc_2359b, %dec_label_pc_23584, %dec_label_pc_23568, %dec_label_pc_2354c
  %97 = add i64 %4, 76, !insn.addr !14936
  %98 = inttoptr i64 %97 to i32*, !insn.addr !14936
  store i32 ptrtoint (i8* @global_var_5 to i32), i32* %98, align 4, !insn.addr !14936
  %99 = add i64 %4, 80, !insn.addr !14937
  %100 = inttoptr i64 %99 to i32*, !insn.addr !14937
  store i32 ptrtoint (i16* @global_var_4 to i32), i32* %100, align 4, !insn.addr !14937
  %101 = add i64 %4, 84, !insn.addr !14938
  %102 = inttoptr i64 %101 to i32*, !insn.addr !14938
  store i32 ptrtoint (i8** @global_var_3 to i32), i32* %102, align 4, !insn.addr !14938
  %103 = add i64 %4, 97, !insn.addr !14939
  %104 = inttoptr i64 %103 to i8*, !insn.addr !14939
  store i8 0, i8* %104, align 1, !insn.addr !14939
  %105 = add i64 %4, 98, !insn.addr !14940
  %106 = inttoptr i64 %105 to i8*, !insn.addr !14940
  store i8 0, i8* %106, align 1, !insn.addr !14940
  %107 = add i64 %4, 96, !insn.addr !14941
  %108 = inttoptr i64 %107 to i8*, !insn.addr !14941
  store i8 0, i8* %108, align 1, !insn.addr !14941
  %109 = add i64 %4, 92, !insn.addr !14942
  %110 = inttoptr i64 %109 to i32*, !insn.addr !14942
  store i32 0, i32* %110, align 4, !insn.addr !14942
  %111 = load i32, i32* %24, align 4, !insn.addr !14943
  %112 = icmp eq i32 %111, 0, !insn.addr !14944
  %113 = icmp eq i1 %112, false, !insn.addr !14945
  br i1 %113, label %dec_label_pc_235f5, label %dec_label_pc_235de, !insn.addr !14945

dec_label_pc_235de:                               ; preds = %dec_label_pc_235b0
  %114 = add i64 %4, 120, !insn.addr !14946
  %115 = inttoptr i64 %114 to i32*, !insn.addr !14946
  store i32 ptrtoint (i8** @global_var_3 to i32), i32* %115, align 4, !insn.addr !14946
  %116 = add i64 %4, 100, !insn.addr !14947
  %117 = inttoptr i64 %116 to i32*, !insn.addr !14947
  store i32 ptrtoint (i32* @global_var_2 to i32), i32* %117, align 4, !insn.addr !14947
  %118 = add i64 %4, 104, !insn.addr !14948
  %119 = inttoptr i64 %118 to i32*, !insn.addr !14948
  store i32 ptrtoint (i32* @global_var_1 to i32), i32* %119, align 4, !insn.addr !14948
  br label %dec_label_pc_23642, !insn.addr !14949

dec_label_pc_235f5:                               ; preds = %dec_label_pc_235b0
  %120 = icmp eq i32 %111, 1, !insn.addr !14950
  %121 = icmp eq i1 %120, false, !insn.addr !14951
  br i1 %121, label %dec_label_pc_23611, label %dec_label_pc_235fa, !insn.addr !14951

dec_label_pc_235fa:                               ; preds = %dec_label_pc_235f5
  %122 = add i64 %4, 120, !insn.addr !14952
  %123 = inttoptr i64 %122 to i32*, !insn.addr !14952
  store i32 ptrtoint (i8** @global_var_3 to i32), i32* %123, align 4, !insn.addr !14952
  %124 = add i64 %4, 100, !insn.addr !14953
  %125 = inttoptr i64 %124 to i32*, !insn.addr !14953
  store i32 ptrtoint (i8** @global_var_3 to i32), i32* %125, align 4, !insn.addr !14953
  %126 = add i64 %4, 104, !insn.addr !14954
  %127 = inttoptr i64 %126 to i32*, !insn.addr !14954
  store i32 ptrtoint (i32* @global_var_1 to i32), i32* %127, align 4, !insn.addr !14954
  br label %dec_label_pc_23642, !insn.addr !14955

dec_label_pc_23611:                               ; preds = %dec_label_pc_235f5
  %128 = icmp eq i32 %111, 2, !insn.addr !14956
  %129 = icmp eq i1 %128, false, !insn.addr !14957
  %130 = add i64 %4, 120
  %131 = inttoptr i64 %130 to i32*
  br i1 %129, label %dec_label_pc_2362d, label %dec_label_pc_23616, !insn.addr !14957

dec_label_pc_23616:                               ; preds = %dec_label_pc_23611
  store i32 ptrtoint (i8* @global_var_6 to i32), i32* %131, align 4, !insn.addr !14958
  %132 = add i64 %4, 100, !insn.addr !14959
  %133 = inttoptr i64 %132 to i32*, !insn.addr !14959
  store i32 ptrtoint (i8** @global_var_3 to i32), i32* %133, align 4, !insn.addr !14959
  %134 = add i64 %4, 104, !insn.addr !14960
  %135 = inttoptr i64 %134 to i32*, !insn.addr !14960
  store i32 ptrtoint (i32* @global_var_1 to i32), i32* %135, align 4, !insn.addr !14960
  br label %dec_label_pc_23642, !insn.addr !14961

dec_label_pc_2362d:                               ; preds = %dec_label_pc_23611
  store i32 ptrtoint (i8** @global_var_3 to i32), i32* %131, align 4, !insn.addr !14962
  %136 = add i64 %4, 100, !insn.addr !14963
  %137 = inttoptr i64 %136 to i32*, !insn.addr !14963
  store i32 ptrtoint (i8** @global_var_3 to i32), i32* %137, align 4, !insn.addr !14963
  %138 = add i64 %4, 104, !insn.addr !14964
  %139 = inttoptr i64 %138 to i32*, !insn.addr !14964
  store i32 ptrtoint (i8** @global_var_3 to i32), i32* %139, align 4, !insn.addr !14964
  br label %dec_label_pc_23642, !insn.addr !14964

dec_label_pc_23642:                               ; preds = %dec_label_pc_2362d, %dec_label_pc_23616, %dec_label_pc_235fa, %dec_label_pc_235de
  %140 = add i64 %4, 108, !insn.addr !14965
  %141 = inttoptr i64 %140 to i32*, !insn.addr !14965
  store i32 ptrtoint (i8* @global_var_5 to i32), i32* %141, align 4, !insn.addr !14965
  %142 = add i64 %4, 112, !insn.addr !14966
  %143 = inttoptr i64 %142 to i32*, !insn.addr !14966
  store i32 ptrtoint (i16* @global_var_4 to i32), i32* %143, align 4, !insn.addr !14966
  %144 = add i64 %4, 116, !insn.addr !14967
  %145 = inttoptr i64 %144 to i32*, !insn.addr !14967
  store i32 ptrtoint (i8** @global_var_3 to i32), i32* %145, align 4, !insn.addr !14967
  %146 = add i64 %4, 129, !insn.addr !14968
  %147 = inttoptr i64 %146 to i8*, !insn.addr !14968
  store i8 0, i8* %147, align 1, !insn.addr !14968
  %148 = add i64 %4, 130, !insn.addr !14969
  %149 = inttoptr i64 %148 to i8*, !insn.addr !14969
  store i8 0, i8* %149, align 1, !insn.addr !14969
  %150 = add i64 %4, 128, !insn.addr !14970
  %151 = inttoptr i64 %150 to i8*, !insn.addr !14970
  store i8 0, i8* %151, align 1, !insn.addr !14970
  %152 = add i64 %4, 124, !insn.addr !14971
  %153 = inttoptr i64 %152 to i32*, !insn.addr !14971
  store i32 0, i32* %153, align 4, !insn.addr !14971
  %154 = load i32, i32* %24, align 4, !insn.addr !14972
  %155 = icmp eq i32 %154, 0, !insn.addr !14973
  %156 = icmp eq i1 %155, false, !insn.addr !14974
  br i1 %156, label %dec_label_pc_23699, label %dec_label_pc_23679, !insn.addr !14974

dec_label_pc_23679:                               ; preds = %dec_label_pc_23642
  %157 = add i64 %4, 152, !insn.addr !14975
  %158 = inttoptr i64 %157 to i32*, !insn.addr !14975
  store i32 ptrtoint (i8** @global_var_3 to i32), i32* %158, align 4, !insn.addr !14975
  %159 = add i64 %4, 132, !insn.addr !14976
  %160 = inttoptr i64 %159 to i32*, !insn.addr !14976
  store i32 ptrtoint (i32* @global_var_2 to i32), i32* %160, align 4, !insn.addr !14976
  %161 = add i64 %4, 136, !insn.addr !14977
  %162 = inttoptr i64 %161 to i32*, !insn.addr !14977
  store i32 ptrtoint (i32* @global_var_1 to i32), i32* %162, align 4, !insn.addr !14977
  br label %dec_label_pc_23701, !insn.addr !14978

dec_label_pc_23699:                               ; preds = %dec_label_pc_23642
  %163 = icmp eq i32 %154, 1, !insn.addr !14979
  %164 = icmp eq i1 %163, false, !insn.addr !14980
  br i1 %164, label %dec_label_pc_236be, label %dec_label_pc_2369e, !insn.addr !14980

dec_label_pc_2369e:                               ; preds = %dec_label_pc_23699
  %165 = add i64 %4, 152, !insn.addr !14981
  %166 = inttoptr i64 %165 to i32*, !insn.addr !14981
  store i32 ptrtoint (i8** @global_var_3 to i32), i32* %166, align 4, !insn.addr !14981
  %167 = add i64 %4, 132, !insn.addr !14982
  %168 = inttoptr i64 %167 to i32*, !insn.addr !14982
  store i32 ptrtoint (i8** @global_var_3 to i32), i32* %168, align 4, !insn.addr !14982
  %169 = add i64 %4, 136, !insn.addr !14983
  %170 = inttoptr i64 %169 to i32*, !insn.addr !14983
  store i32 ptrtoint (i32* @global_var_1 to i32), i32* %170, align 4, !insn.addr !14983
  br label %dec_label_pc_23701, !insn.addr !14984

dec_label_pc_236be:                               ; preds = %dec_label_pc_23699
  %171 = icmp eq i32 %154, 2, !insn.addr !14985
  %172 = icmp eq i1 %171, false, !insn.addr !14986
  %173 = add i64 %4, 152
  %174 = inttoptr i64 %173 to i32*
  br i1 %172, label %dec_label_pc_236e3, label %dec_label_pc_236c3, !insn.addr !14986

dec_label_pc_236c3:                               ; preds = %dec_label_pc_236be
  store i32 ptrtoint (i8* @global_var_6 to i32), i32* %174, align 4, !insn.addr !14987
  %175 = add i64 %4, 132, !insn.addr !14988
  %176 = inttoptr i64 %175 to i32*, !insn.addr !14988
  store i32 ptrtoint (i8** @global_var_3 to i32), i32* %176, align 4, !insn.addr !14988
  %177 = add i64 %4, 136, !insn.addr !14989
  %178 = inttoptr i64 %177 to i32*, !insn.addr !14989
  store i32 ptrtoint (i32* @global_var_1 to i32), i32* %178, align 4, !insn.addr !14989
  br label %dec_label_pc_23701, !insn.addr !14990

dec_label_pc_236e3:                               ; preds = %dec_label_pc_236be
  store i32 ptrtoint (i8** @global_var_3 to i32), i32* %174, align 4, !insn.addr !14991
  %179 = add i64 %4, 132, !insn.addr !14992
  %180 = inttoptr i64 %179 to i32*, !insn.addr !14992
  store i32 ptrtoint (i8** @global_var_3 to i32), i32* %180, align 4, !insn.addr !14992
  %181 = add i64 %4, 136, !insn.addr !14993
  %182 = inttoptr i64 %181 to i32*, !insn.addr !14993
  store i32 ptrtoint (i8** @global_var_3 to i32), i32* %182, align 4, !insn.addr !14993
  br label %dec_label_pc_23701, !insn.addr !14993

dec_label_pc_23701:                               ; preds = %dec_label_pc_236e3, %dec_label_pc_236c3, %dec_label_pc_2369e, %dec_label_pc_23679
  %183 = zext i32 %154 to i64, !insn.addr !14972
  %184 = add i64 %4, 140, !insn.addr !14994
  %185 = inttoptr i64 %184 to i32*, !insn.addr !14994
  store i32 ptrtoint (i8* @global_var_5 to i32), i32* %185, align 4, !insn.addr !14994
  ret i64 %183, !insn.addr !14994
}

define i8 @BLACKWIDOW_ProgramVcoChannelChangeSpi(i64 %ptCommunication) local_unnamed_addr {
dec_label_pc_23714:
  %rsi = alloca i64, align 8
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = call i64 @__decompiler_undefined_function_0()
  %2 = lshr i64 %0, ptrtoint (i8* @global_var_8 to i64), !insn.addr !14995
  %3 = trunc i64 %2 to i8, !insn.addr !14995
  %4 = trunc i64 %1 to i8, !insn.addr !14995
  %5 = add i8 %3, %4, !insn.addr !14995
  %6 = icmp ult i8 %5, %3, !insn.addr !14995
  %7 = zext i8 %5 to i64, !insn.addr !14995
  %8 = shl i64 %7, ptrtoint (i8* @global_var_8 to i64), !insn.addr !14995
  %9 = and i64 %0, -65281, !insn.addr !14995
  %10 = or i64 %8, %9, !insn.addr !14995
  %11 = mul i64 %1, ptrtoint (i32* @global_var_1 to i64), !insn.addr !14996
  %12 = add i64 %1, ptrtoint (i32* @global_var_30000 to i64), !insn.addr !14996
  %13 = add i64 %12, %11, !insn.addr !14996
  %14 = inttoptr i64 %13 to i32*, !insn.addr !14996
  %15 = load i32, i32* %14, align 4, !insn.addr !14996
  %16 = zext i1 %6 to i32, !insn.addr !14996
  %17 = add i32 %15, %16, !insn.addr !14996
  %18 = add i64 %12, %1, !insn.addr !14996
  %19 = inttoptr i64 %18 to i32*, !insn.addr !14996
  store i32 %17, i32* %19, align 4, !insn.addr !14996
  %20 = bitcast i64* %rsi to i8*
  %21 = load i8, i8* %20, align 8, !insn.addr !14997
  %22 = lshr i64 %10, ptrtoint (i8* @global_var_8 to i64), !insn.addr !14997
  %23 = trunc i64 %22 to i8, !insn.addr !14997
  %24 = add i8 %21, %23, !insn.addr !14997
  %25 = load i64, i64* %rsi, align 8, !insn.addr !14997
  %26 = inttoptr i64 %25 to i8*, !insn.addr !14997
  store i8 %24, i8* %26, align 1, !insn.addr !14997
  %27 = load i64, i64* %rsi, align 8, !insn.addr !14998
  %28 = call i64 @BLACKWIDOW_SetPowerMode.471(i64 %ptCommunication, i64 %27), !insn.addr !14998
  %29 = add i64 %10, 160, !insn.addr !14999
  %30 = inttoptr i64 %29 to i32*, !insn.addr !14999
  store i32 ptrtoint (i16* @global_var_4 to i32), i32* %30, align 4, !insn.addr !14999
  %31 = add i64 %10, 164, !insn.addr !15000
  %32 = inttoptr i64 %31 to i32*, !insn.addr !15000
  store i32 1023, i32* %32, align 4, !insn.addr !15000
  %33 = trunc i64 %28 to i8, !insn.addr !15001
  ret i8 %33, !insn.addr !15001
}

define i64 @BLACKWIDOW_ProgramVcoChannelChangeSpi.489(i64 %arg1) local_unnamed_addr {
dec_label_pc_23744:
  %0 = call i64 @mcount(), !insn.addr !15002
  %1 = icmp eq i64 %arg1, 0, !insn.addr !15003
  %2 = icmp eq i1 %1, false, !insn.addr !15004
  %3 = icmp eq i1 %2, false, !insn.addr !15005
  br i1 %3, label %dec_label_pc_23b77, label %dec_label_pc_23ae1, !insn.addr !15006

dec_label_pc_23ae1:                               ; preds = %dec_label_pc_23744, %dec_label_pc_23ae1
  br label %dec_label_pc_23ae1

dec_label_pc_23b77:                               ; preds = %dec_label_pc_23744
  %4 = and i64 %0, -256, !insn.addr !15004
  ret i64 %4, !insn.addr !15007
}

define i8 @BLACKWIDOW_SetFrequency(i64 %ptCommunication, i64 %ulFreqkHz) local_unnamed_addr {
dec_label_pc_23b9d:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = trunc i64 %0 to i8
  %2 = mul i8 %1, 2, !insn.addr !15008
  %3 = inttoptr i64 %0 to i8*, !insn.addr !15008
  store i8 %2, i8* %3, align 1, !insn.addr !15008
  ret i8 %1, !insn.addr !15009
}

define i8 @BLACKWIDOW_SetFrequencyAndBandwidth(i64 %ptCommunication, i64 %ptChannelObj) local_unnamed_addr {
dec_label_pc_23bcb:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = trunc i64 %0 to i8, !insn.addr !15010
  ret i8 %1, !insn.addr !15010
}

define i64 @BLACKWIDOW_SetFrequency.442(i64 %arg1) local_unnamed_addr {
dec_label_pc_23bcd:
  %rax.0.reg2mem = alloca i64, !insn.addr !15011
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = call i64 @mcount(), !insn.addr !15012
  %2 = call i64 @BLACKWIDOW_SetFreq.164(i64 %arg1, i64 %0, i64* bitcast (i8* @global_var_5 to i64*)), !insn.addr !15013
  %3 = trunc i64 %2 to i8, !insn.addr !15014
  %4 = icmp eq i8 %3, 0, !insn.addr !15014
  store i64 %2, i64* %rax.0.reg2mem, !insn.addr !15015
  br i1 %4, label %dec_label_pc_23bf4, label %dec_label_pc_23bec, !insn.addr !15015

dec_label_pc_23bec:                               ; preds = %dec_label_pc_23bcd
  %5 = call i64 @BLACKWIDOW_ProgramVcoChannelChange.443(i64 %arg1), !insn.addr !15016
  store i64 %5, i64* %rax.0.reg2mem, !insn.addr !15016
  br label %dec_label_pc_23bf4, !insn.addr !15016

dec_label_pc_23bf4:                               ; preds = %dec_label_pc_23bec, %dec_label_pc_23bcd
  %rax.0.reload = load i64, i64* %rax.0.reg2mem
  ret i64 %rax.0.reload, !insn.addr !15017
}

define i64 @BLACKWIDOW_SetFrequencyAndBandwidth.543(i64 %arg1, i64 %arg2, i64 %arg3) local_unnamed_addr {
dec_label_pc_23bfb:
  %0 = call i64 @mcount(), !insn.addr !15018
  %1 = call i64 @BLACKWIDOW_SetFrequency.442(i64 %arg1), !insn.addr !15019
  %2 = add i64 %arg2, ptrtoint (i32** @global_var_18 to i64), !insn.addr !15020
  %3 = inttoptr i64 %2 to i16*, !insn.addr !15020
  %4 = load i16, i16* %3, align 2, !insn.addr !15020
  %5 = zext i16 %4 to i64, !insn.addr !15020
  ret i64 %5, !insn.addr !15020
}

define i8 @BLACKWIDOW_Tune(i64 %ptCommunication, i64 %ptChannelObj) local_unnamed_addr {
dec_label_pc_23c4f:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = call i64 @__decompiler_undefined_function_0()
  %2 = mul i64 %1, zext (i32 trunc (i64 add (i64 ptrtoint (i16* @global_var_4 to i64), i64 1) to i32) to i64), !insn.addr !15021
  %3 = and i64 %2, 4294967295, !insn.addr !15021
  %4 = mul i64 %3, mul (i64 add (i64 ptrtoint (i16* @global_var_4 to i64), i64 1), i64 ptrtoint (i16* @global_var_4 to i64)), !insn.addr !15022
  %5 = add i64 %4, %0, !insn.addr !15022
  %6 = trunc i64 %5 to i8
  %7 = mul i8 %6, -113, !insn.addr !15023
  ret i8 %7, !insn.addr !15023
}

define void @SAT_TUNER_InitIO(i64 %p_read_func, i64 %p_write_func) local_unnamed_addr {
dec_label_pc_23c78:
  ret void
}

define i64 @BLACKWIDOW_Tune.286(i64 %arg1) local_unnamed_addr {
dec_label_pc_23c7f:
  %0 = call i64 @mcount(), !insn.addr !15024
  ret i64 %0, !insn.addr !15025
}

define void @SAT_TUNER_SetByteOrder(i64 %p_communication, i8 %little_endian) local_unnamed_addr {
dec_label_pc_23c91:
  ret void
}

define i64 @function_23c95(i64 %arg1) local_unnamed_addr {
dec_label_pc_23c95:
  %rax.0.reg2mem = alloca i64, !insn.addr !15026
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = call i64 @__decompiler_undefined_function_0()
  %2 = trunc i64 %1 to i8, !insn.addr !15026
  %3 = icmp eq i8 %2, 0, !insn.addr !15026
  br i1 %3, label %dec_label_pc_23ca1, label %dec_label_pc_23c99, !insn.addr !15027

dec_label_pc_23c99:                               ; preds = %dec_label_pc_23c95
  %4 = call i64 @BLACKWIDOW_SetGain.216(i64 %0), !insn.addr !15028
  store i64 %4, i64* %rax.0.reg2mem, !insn.addr !15028
  br label %dec_label_pc_23ca1, !insn.addr !15028

dec_label_pc_23ca1:                               ; preds = %dec_label_pc_23c99, %dec_label_pc_23c95
  %rax.0.reload = load i64, i64* %rax.0.reg2mem
  ret i64 %rax.0.reload, !insn.addr !15029
}

define i64 @SAT_TUNER_InitIO.591() local_unnamed_addr {
dec_label_pc_23ca8:
  %0 = call i64 @mcount(), !insn.addr !15030
  ret i64 %0, !insn.addr !15030
}

define i8 @SAT_TUNER_RegRead(i64 %p_communication, i16 %address, i16 %offset, i8 %start_bit, i8 %num_bit, i8 %num_bytes, i64* %p_data) local_unnamed_addr {
dec_label_pc_23cb2:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = sext i16 %address to i64
  %2 = trunc i64 %p_communication to i32, !insn.addr !15031
  store i32 %2, i32* bitcast (i64* @global_var_36880 to i32*), align 8, !insn.addr !15031
  store i64 %1, i64* @global_var_36888, align 8, !insn.addr !15032
  %3 = trunc i64 %0 to i8, !insn.addr !15033
  ret i8 %3, !insn.addr !15033
}

define i64 @SAT_TUNER_SetByteOrder.577(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_23cc1:
  %0 = call i64 @mcount(), !insn.addr !15034
  %1 = trunc i64 %arg2 to i8, !insn.addr !15035
  %2 = icmp eq i8 %1, ptrtoint (i32* @global_var_1 to i8), !insn.addr !15035
  %3 = icmp eq i1 %2, false, !insn.addr !15036
  %4 = select i1 %3, i64 16777216, i64 0, !insn.addr !15036
  %5 = add i64 %arg1, 88, !insn.addr !15037
  %6 = inttoptr i64 %5 to i64*, !insn.addr !15037
  store i64 %4, i64* %6, align 8, !insn.addr !15037
  ret i64 %4, !insn.addr !15038
}

define i64 @SAT_TUNER_RegRead.472(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4, i64 %arg5, i64 %arg6, i64 %arg7) local_unnamed_addr {
dec_label_pc_23ce2:
  %storemerge.reg2mem = alloca i64, !insn.addr !15039
  %.reg2mem = alloca i64, !insn.addr !15039
  %0 = call i64 @mcount(), !insn.addr !15040
  %sext = mul i64 %arg4, 72057594037927936
  %1 = sdiv i64 %sext, 72057594037927936, !insn.addr !15041
  %2 = trunc i64 %arg5 to i8, !insn.addr !15042
  %3 = icmp ugt i8 %2, ptrtoint (i8** @global_var_1f to i8)
  br i1 %3, label %dec_label_pc_23d26, label %dec_label_pc_23d07, !insn.addr !15043

dec_label_pc_23d07:                               ; preds = %dec_label_pc_23ce2
  %4 = urem i64 %arg5, 64, !insn.addr !15044
  %5 = icmp eq i64 %4, 0, !insn.addr !15044
  %6 = shl i64 ptrtoint (i32* @global_var_1 to i64), %4
  %.op = add i64 %6, -1
  %7 = select i1 %5, i64 add (i64 ptrtoint (i32* @global_var_1 to i64), i64 -1), i64 %.op, !insn.addr !15045
  %8 = urem i64 %1, 64, !insn.addr !15046
  %9 = shl i64 %7, %8
  %10 = add i64 %arg1, 48, !insn.addr !15047
  %11 = inttoptr i64 %10 to i64*, !insn.addr !15047
  store i64 %9, i64* %11, align 8, !insn.addr !15047
  br label %dec_label_pc_23d34, !insn.addr !15048

dec_label_pc_23d26:                               ; preds = %dec_label_pc_23ce2
  %12 = add i64 %arg1, 48, !insn.addr !15049
  %13 = inttoptr i64 %12 to i32*, !insn.addr !15049
  store i32 -1, i32* %13, align 4, !insn.addr !15049
  %14 = add i64 %arg1, 52, !insn.addr !15050
  %15 = inttoptr i64 %14 to i32*, !insn.addr !15050
  store i32 0, i32* %15, align 4, !insn.addr !15050
  br label %dec_label_pc_23d34, !insn.addr !15050

dec_label_pc_23d34:                               ; preds = %dec_label_pc_23d26, %dec_label_pc_23d07
  %16 = icmp eq i64 %arg1, 0, !insn.addr !15051
  store i64 0, i64* %storemerge.reg2mem, !insn.addr !15052
  br i1 %16, label %dec_label_pc_23e0d, label %dec_label_pc_23d3d, !insn.addr !15052

dec_label_pc_23d3d:                               ; preds = %dec_label_pc_23d34
  %17 = add i64 %arg1, ptrtoint (i32** @global_var_18 to i64), !insn.addr !15053
  %18 = inttoptr i64 %17 to i64*, !insn.addr !15053
  %19 = load i64, i64* %18, align 8, !insn.addr !15053
  %20 = icmp eq i64 %19, 0, !insn.addr !15053
  %21 = icmp eq i64 %arg7, 0, !insn.addr !15054
  %or.cond = or i1 %21, %20
  store i64 0, i64* %storemerge.reg2mem, !insn.addr !15055
  br i1 %or.cond, label %dec_label_pc_23e0d, label %dec_label_pc_23d53, !insn.addr !15055

dec_label_pc_23d53:                               ; preds = %dec_label_pc_23d3d
  %22 = add i64 %arg1, 56, !insn.addr !15056
  %23 = inttoptr i64 %22 to i64*, !insn.addr !15057
  store i64 0, i64* %23, align 8, !insn.addr !15057
  %24 = add i64 %arg1, 88, !insn.addr !15058
  %25 = inttoptr i64 %24 to i64*, !insn.addr !15058
  %26 = load i64, i64* %25, align 8, !insn.addr !15058
  %27 = icmp eq i64 %26, 16777216, !insn.addr !15058
  %28 = icmp eq i1 %27, false, !insn.addr !15059
  store i64 0, i64* %.reg2mem, !insn.addr !15059
  br i1 %28, label %dec_label_pc_23deb, label %dec_label_pc_23dbf, !insn.addr !15059

dec_label_pc_23dbf:                               ; preds = %dec_label_pc_23d53
  %29 = add i64 %arg1, 59, !insn.addr !15060
  %30 = inttoptr i64 %29 to i8*, !insn.addr !15061
  %31 = load i8, i8* %30, align 1, !insn.addr !15061
  %32 = inttoptr i64 %22 to i8*, !insn.addr !15062
  %33 = load i8, i8* %32, align 1, !insn.addr !15062
  %34 = xor i8 %33, %31, !insn.addr !15062
  store i8 %34, i8* %32, align 1, !insn.addr !15063
  %35 = load i8, i8* %30, align 1, !insn.addr !15064
  %36 = xor i8 %35, %34, !insn.addr !15064
  store i8 %36, i8* %30, align 1, !insn.addr !15065
  %37 = load i8, i8* %32, align 1, !insn.addr !15066
  %38 = xor i8 %37, %36, !insn.addr !15066
  store i8 %38, i8* %32, align 1, !insn.addr !15066
  %39 = add i64 %arg1, 57, !insn.addr !15067
  %40 = add i64 %arg1, 58, !insn.addr !15068
  %41 = inttoptr i64 %40 to i8*, !insn.addr !15069
  %42 = load i8, i8* %41, align 1, !insn.addr !15069
  %43 = inttoptr i64 %39 to i8*, !insn.addr !15070
  %44 = load i8, i8* %43, align 1, !insn.addr !15070
  %45 = xor i8 %44, %42, !insn.addr !15070
  store i8 %45, i8* %43, align 1, !insn.addr !15071
  %46 = load i8, i8* %41, align 1, !insn.addr !15072
  %47 = xor i8 %46, %45, !insn.addr !15072
  store i8 %47, i8* %41, align 1, !insn.addr !15073
  %48 = load i8, i8* %43, align 1, !insn.addr !15074
  %49 = xor i8 %48, %47, !insn.addr !15074
  store i8 %49, i8* %43, align 1, !insn.addr !15074
  %.pre = load i64, i64* %23, align 8
  store i64 %.pre, i64* %.reg2mem, !insn.addr !15074
  br label %dec_label_pc_23deb, !insn.addr !15074

dec_label_pc_23deb:                               ; preds = %dec_label_pc_23dbf, %dec_label_pc_23d53
  %.reload = load i64, i64* %.reg2mem, !insn.addr !15075
  %50 = add i64 %arg1, 48, !insn.addr !15076
  %51 = inttoptr i64 %50 to i64*, !insn.addr !15076
  %52 = load i64, i64* %51, align 8, !insn.addr !15076
  %53 = and i64 %52, %.reload, !insn.addr !15075
  %54 = urem i64 %1, 64, !insn.addr !15077
  %55 = lshr i64 %53, %54
  %56 = inttoptr i64 %arg7 to i64*, !insn.addr !15078
  store i64 %55, i64* %56, align 8, !insn.addr !15078
  store i64 ptrtoint (i32* @global_var_1 to i64), i64* %storemerge.reg2mem, !insn.addr !15079
  br label %dec_label_pc_23e0d, !insn.addr !15079

dec_label_pc_23e0d:                               ; preds = %dec_label_pc_23d34, %dec_label_pc_23d3d, %dec_label_pc_23deb
  %storemerge.reload = load i64, i64* %storemerge.reg2mem
  ret i64 %storemerge.reload, !insn.addr !15080
}

define i8 @SAT_TUNER_RegWrite(i64 %p_communication, i16 %address, i16 %offset, i8 %start_bit, i8 %num_bit, i8 %num_bytes, i8 %rmw, i8 %access, i64 %data) local_unnamed_addr {
dec_label_pc_23e0e:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = trunc i64 %0 to i8, !insn.addr !15081
  ret i8 %1, !insn.addr !15081
}

define i64 @SAT_TUNER_RegWrite.283(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4, i64 %arg5, i64 %arg6, i8 %arg7, i8 %arg8, i64 %arg9) local_unnamed_addr {
dec_label_pc_23e3e:
  %rax.0.reg2mem = alloca i64, !insn.addr !15082
  %.pre-phi.reg2mem = alloca i64, !insn.addr !15082
  %.reg2mem = alloca i64, !insn.addr !15082
  %0 = call i64 @mcount(), !insn.addr !15083
  %1 = trunc i64 %arg5 to i8, !insn.addr !15084
  %2 = icmp ugt i8 %1, ptrtoint (i8** @global_var_1f to i8)
  br i1 %2, label %dec_label_pc_23e8a, label %dec_label_pc_23e6d, !insn.addr !15085

dec_label_pc_23e6d:                               ; preds = %dec_label_pc_23e3e
  %3 = urem i64 %arg5, 64, !insn.addr !15086
  %4 = icmp eq i64 %3, 0, !insn.addr !15086
  %5 = shl i64 ptrtoint (i32* @global_var_1 to i64), %3
  %.op = add i64 %5, -1
  %6 = select i1 %4, i64 add (i64 ptrtoint (i32* @global_var_1 to i64), i64 -1), i64 %.op, !insn.addr !15087
  %7 = urem i64 %arg4, 64
  %8 = shl i64 %6, %7
  %9 = add i64 %arg1, 64
  %10 = inttoptr i64 %9 to i64*
  store i64 %8, i64* %10, align 8, !insn.addr !15088
  store i64 %8, i64* %.reg2mem, !insn.addr !15089
  store i64 %7, i64* %.pre-phi.reg2mem, !insn.addr !15089
  br label %dec_label_pc_23e98, !insn.addr !15089

dec_label_pc_23e8a:                               ; preds = %dec_label_pc_23e3e
  %11 = add i64 %arg1, 64
  %12 = inttoptr i64 %11 to i32*, !insn.addr !15090
  store i32 -1, i32* %12, align 4, !insn.addr !15090
  %13 = add i64 %arg1, 68, !insn.addr !15091
  %14 = inttoptr i64 %13 to i32*, !insn.addr !15091
  store i32 0, i32* %14, align 4, !insn.addr !15091
  %.pre = urem i64 %arg4, 64, !insn.addr !15092
  %.pre3 = inttoptr i64 %11 to i64*, !insn.addr !15093
  %.pre5 = load i64, i64* %.pre3, align 8
  store i64 %.pre5, i64* %.reg2mem, !insn.addr !15091
  store i64 %.pre, i64* %.pre-phi.reg2mem, !insn.addr !15091
  br label %dec_label_pc_23e98, !insn.addr !15091

dec_label_pc_23e98:                               ; preds = %dec_label_pc_23e8a, %dec_label_pc_23e6d
  %.pre-phi.reload = load i64, i64* %.pre-phi.reg2mem
  %.reload = load i64, i64* %.reg2mem, !insn.addr !15093
  %15 = shl i64 %arg9, %.pre-phi.reload
  %16 = and i64 %.reload, %15, !insn.addr !15093
  %17 = add i64 %arg1, 72, !insn.addr !15094
  %18 = inttoptr i64 %17 to i64*, !insn.addr !15094
  store i64 %16, i64* %18, align 8, !insn.addr !15094
  %19 = add i64 %arg1, 88, !insn.addr !15095
  %20 = inttoptr i64 %19 to i64*, !insn.addr !15095
  %21 = load i64, i64* %20, align 8, !insn.addr !15095
  %22 = icmp eq i64 %21, 16777216, !insn.addr !15095
  %23 = icmp eq i1 %22, false, !insn.addr !15096
  store i64 ptrtoint (i16* @global_var_4 to i64), i64* %rax.0.reg2mem, !insn.addr !15096
  br i1 %23, label %dec_label_pc_23f3f, label %dec_label_pc_23ef6, !insn.addr !15096

dec_label_pc_23ef6:                               ; preds = %dec_label_pc_23e98
  %24 = add i64 %arg1, 75, !insn.addr !15097
  %25 = inttoptr i64 %24 to i8*, !insn.addr !15098
  %26 = load i8, i8* %25, align 1, !insn.addr !15098
  %27 = inttoptr i64 %17 to i8*, !insn.addr !15099
  %28 = load i8, i8* %27, align 1, !insn.addr !15099
  %29 = xor i8 %28, %26, !insn.addr !15099
  store i8 %29, i8* %27, align 1, !insn.addr !15100
  %30 = load i8, i8* %25, align 1, !insn.addr !15101
  %31 = xor i8 %30, %29, !insn.addr !15101
  store i8 %31, i8* %25, align 1, !insn.addr !15102
  %32 = load i8, i8* %27, align 1, !insn.addr !15103
  %33 = xor i8 %32, %31, !insn.addr !15103
  store i8 %33, i8* %27, align 1, !insn.addr !15103
  %34 = add i64 %arg1, 73, !insn.addr !15104
  %35 = add i64 %arg1, 74, !insn.addr !15105
  %36 = inttoptr i64 %35 to i8*, !insn.addr !15106
  %37 = load i8, i8* %36, align 1, !insn.addr !15106
  %38 = inttoptr i64 %34 to i8*, !insn.addr !15107
  %39 = load i8, i8* %38, align 1, !insn.addr !15107
  %40 = xor i8 %39, %37, !insn.addr !15107
  store i8 %40, i8* %38, align 1, !insn.addr !15108
  %41 = load i8, i8* %36, align 1, !insn.addr !15109
  %42 = xor i8 %41, %40, !insn.addr !15109
  store i8 %42, i8* %36, align 1, !insn.addr !15110
  %43 = load i8, i8* %38, align 1, !insn.addr !15111
  %44 = xor i8 %43, %42, !insn.addr !15111
  store i8 %44, i8* %38, align 1, !insn.addr !15111
  store i64 %34, i64* %rax.0.reg2mem, !insn.addr !15111
  br label %dec_label_pc_23f3f, !insn.addr !15111

dec_label_pc_23f3f:                               ; preds = %dec_label_pc_23e98, %dec_label_pc_23ef6
  %rax.0.reload = load i64, i64* %rax.0.reg2mem
  ret i64 %rax.0.reload, !insn.addr !15112
}

define void @SAT_TUNER_strncpy(i8* %ptStrOut, i8* %ptStrIn, i32 %uiStrSize) local_unnamed_addr {
dec_label_pc_23f93:
  ret void, !insn.addr !15113
}

define i8 @BLACKWIDOW_GetDriverVersion(i64 %ptDriverVersion) local_unnamed_addr {
dec_label_pc_23fbc:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = trunc i64 %0 to i8, !insn.addr !15114
  ret i8 %1, !insn.addr !15114
}

define i64 @SAT_TUNER_strncpy.557(i64 %arg1, i64 %arg2, i64* %arg3) local_unnamed_addr {
dec_label_pc_23fc3:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = call i64 @mcount(), !insn.addr !15115
  %2 = trunc i64 %0 to i8
  %3 = urem i64 %0, 256, !insn.addr !15116
  %4 = inttoptr i64 %arg1 to i8*, !insn.addr !15117
  store i8 %2, i8* %4, align 1, !insn.addr !15117
  ret i64 %3, !insn.addr !15118
}

define i8 @TDA2014x_TunerSetFrequency(i8* %pDeviceExtension, i64 %TunerDeviceID, i64 %RF) local_unnamed_addr {
dec_label_pc_23fe7:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = trunc i64 %0 to i8
  ret i8 %1
}

define i64 @function_23fe8() local_unnamed_addr {
dec_label_pc_23fe8:
  %0 = call i64 @__decompiler_undefined_function_0()
  ret i64 %0, !insn.addr !15119
}

define i64 @BLACKWIDOW_GetDriverVersion.503(i64 %arg1) local_unnamed_addr {
dec_label_pc_23fec:
  %rax.0.reg2mem = alloca i64, !insn.addr !15120
  %0 = call i64 @mcount(), !insn.addr !15121
  %1 = icmp eq i64 %arg1, 0, !insn.addr !15122
  store i64 0, i64* %rax.0.reg2mem, !insn.addr !15123
  br i1 %1, label %dec_label_pc_24015, label %dec_label_pc_23fff, !insn.addr !15123

dec_label_pc_23fff:                               ; preds = %dec_label_pc_23fec
  %2 = call i64 @SAT_TUNER_strncpy.557(i64 %arg1, i64 0, i64* bitcast (i8** @global_var_9 to i64*)), !insn.addr !15124
  store i64 ptrtoint (i32* @global_var_1 to i64), i64* %rax.0.reg2mem, !insn.addr !15125
  br label %dec_label_pc_24015, !insn.addr !15125

dec_label_pc_24015:                               ; preds = %dec_label_pc_23fff, %dec_label_pc_23fec
  %rax.0.reload = load i64, i64* %rax.0.reg2mem
  ret i64 %rax.0.reload, !insn.addr !15126
}

define i64 @TDA2014x_TunerSetFrequency.526(i64 %arg1, i64 %arg2, i64 %arg3) local_unnamed_addr {
dec_label_pc_24017:
  %0 = call i64 @mcount(), !insn.addr !15127
  %1 = lshr i64 %arg2, ptrtoint (i32* @global_var_1 to i64), !insn.addr !15128
  %2 = mul i64 %1, shl (i64 add (i64 ptrtoint (i32* @global_var_2 to i64), i64 1), i64 ptrtoint (i8* @global_var_5 to i64)), !insn.addr !15129
  %3 = inttoptr i64 %2 to i64*, !insn.addr !15130
  store i64 %arg1, i64* %3, align 8, !insn.addr !15130
  %4 = lshr i64 %arg3, ptrtoint (i8** @global_var_3 to i64), !insn.addr !15131
  %5 = mul i64 %4, 2361183241434822607, !insn.addr !15132
  ret i64 %5, !insn.addr !15132
}

define i8 @TDA2014x_TunerCheckLockStatus(i8* %pDeviceExtension, i64 %TunerDeviceID, i8* %pLock) local_unnamed_addr {
dec_label_pc_24050:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = call i64 @__decompiler_undefined_function_0()
  %2 = ptrtoint i8* %pLock to i64
  %3 = trunc i64 %2 to i32, !insn.addr !15133
  %4 = add i64 %0, -32, !insn.addr !15133
  %5 = inttoptr i64 %4 to i32*, !insn.addr !15133
  store i32 %3, i32* %5, align 4, !insn.addr !15133
  %6 = add i64 %0, -16, !insn.addr !15134
  %7 = inttoptr i64 %6 to i64*, !insn.addr !15134
  store i64 28860, i64* %7, align 8, !insn.addr !15134
  %8 = add i64 %0, -24, !insn.addr !15135
  %9 = inttoptr i64 %8 to i32*, !insn.addr !15135
  store i32 ptrtoint (i32* @global_var_2 to i32), i32* %9, align 4, !insn.addr !15135
  %10 = add i64 %0, -8, !insn.addr !15136
  %11 = inttoptr i64 %10 to i16*, !insn.addr !15136
  store i16 5000, i16* %11, align 2, !insn.addr !15136
  %12 = shl i64 %1, ptrtoint (i8* @global_var_5 to i64), !insn.addr !15137
  %13 = call i64 @BLACKWIDOW_Tune.286(i64 %12), !insn.addr !15138
  %14 = trunc i64 %13 to i8, !insn.addr !15139
  ret i8 %14, !insn.addr !15139
}

define i64 @TDA2014x_TunerCheckLockStatus.368(i64 %arg1, i64 %arg2, i64 %arg3) local_unnamed_addr {
dec_label_pc_24080:
  %0 = call i64 @mcount(), !insn.addr !15140
  %1 = lshr i64 %arg2, ptrtoint (i32* @global_var_1 to i64), !insn.addr !15141
  %2 = mul i64 %1, add (i64 ptrtoint (i32* @global_var_2 to i64), i64 1), !insn.addr !15142
  %3 = mul i64 %1, shl (i64 add (i64 ptrtoint (i32* @global_var_2 to i64), i64 1), i64 ptrtoint (i8* @global_var_5 to i64)), !insn.addr !15143
  %4 = inttoptr i64 %3 to i64*, !insn.addr !15144
  store i64 %arg1, i64* %4, align 8, !insn.addr !15144
  ret i64 %2, !insn.addr !15145
}

define i8 @TDA2014x_TunerInitialization(i8* %pDeviceExtension, i64 %TunerDeviceID) local_unnamed_addr {
dec_label_pc_240b1:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = trunc i64 %0 to i8
  %2 = mul i8 %1, 2, !insn.addr !15146
  %3 = inttoptr i64 %0 to i8*, !insn.addr !15146
  store i8 %2, i8* %3, align 1, !insn.addr !15146
  %4 = call i64 @function_ffffffff8a024063(), !insn.addr !15147
  %5 = trunc i64 %4 to i8, !insn.addr !15147
  ret i8 %5, !insn.addr !15147
}

define i64 @function_240ba() local_unnamed_addr {
dec_label_pc_240ba:
  %0 = call i64 @__decompiler_undefined_function_0()
  ret i64 %0, !insn.addr !15148
}

define i64 @function_240bd(i64 %arg1) local_unnamed_addr {
dec_label_pc_240bd:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = call i64 @__decompiler_undefined_function_0()
  %2 = call i64 @__decompiler_undefined_function_0()
  %3 = trunc i64 %2 to i8
  %4 = mul i8 %3, 2, !insn.addr !15149
  %5 = inttoptr i64 %2 to i8*, !insn.addr !15149
  store i8 %4, i8* %5, align 1, !insn.addr !15149
  %6 = add i64 %2, 359989754, !insn.addr !15150
  %7 = inttoptr i64 %6 to i8*, !insn.addr !15150
  %8 = load i8, i8* %7, align 1, !insn.addr !15150
  %9 = add i8 %8, %3, !insn.addr !15150
  store i8 %9, i8* %7, align 1, !insn.addr !15150
  %10 = icmp eq i64 %1, 0, !insn.addr !15151
  br i1 %10, label %dec_label_pc_240da, label %dec_label_pc_240cf, !insn.addr !15152

dec_label_pc_240cf:                               ; preds = %dec_label_pc_240bd
  %11 = add i64 %0, -17, !insn.addr !15153
  %12 = inttoptr i64 %11 to i8*, !insn.addr !15153
  %13 = load i8, i8* %12, align 1, !insn.addr !15153
  %14 = inttoptr i64 %1 to i8*, !insn.addr !15154
  store i8 %13, i8* %14, align 1, !insn.addr !15154
  br label %dec_label_pc_240da, !insn.addr !15155

dec_label_pc_240da:                               ; preds = %dec_label_pc_240cf, %dec_label_pc_240bd
  ret i64 ptrtoint (i32* @global_var_1 to i64), !insn.addr !15156
}

define i64 @TDA2014x_TunerInitialization.256(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_240e1:
  %.pre-phi.reg2mem = alloca i64, !insn.addr !15157
  %stack_var_-40 = alloca i8, align 1
  %0 = call i64 @mcount(), !insn.addr !15158
  %1 = lshr i64 %arg2, ptrtoint (i32* @global_var_1 to i64), !insn.addr !15159
  %2 = mul i64 %1, ptrtoint (i8* @global_var_8 to i64), !insn.addr !15160
  %3 = inttoptr i64 %2 to i64*, !insn.addr !15160
  store i64 %arg2, i64* %3, align 8, !insn.addr !15160
  %4 = mul i64 %1, mul (i64 add (i64 shl (i64 add (i64 ptrtoint (i16* @global_var_4 to i64), i64 1), i64 ptrtoint (i32* @global_var_2 to i64)), i64 ptrtoint (i32* @global_var_1 to i64)), i64 ptrtoint (i8* @global_var_8 to i64)), !insn.addr !15161
  %5 = add i64 %4, 8, !insn.addr !15161
  %6 = inttoptr i64 %5 to i64*, !insn.addr !15161
  store i64 0, i64* %6, align 8, !insn.addr !15161
  %7 = mul i64 %1, mul (i64 add (i64 shl (i64 add (i64 ptrtoint (i16* @global_var_4 to i64), i64 1), i64 ptrtoint (i32* @global_var_2 to i64)), i64 ptrtoint (i32* @global_var_1 to i64)), i64 8), !insn.addr !15162
  %8 = add i64 %7, 16, !insn.addr !15162
  %9 = inttoptr i64 %8 to i32*, !insn.addr !15162
  store i32 511, i32* %9, align 8, !insn.addr !15162
  %10 = add i64 %7, 20, !insn.addr !15163
  %11 = inttoptr i64 %10 to i32*, !insn.addr !15163
  %12 = add i64 %7, 24, !insn.addr !15164
  %13 = inttoptr i64 %12 to i32*, !insn.addr !15164
  %14 = add i64 %7, 12, !insn.addr !15165
  %15 = inttoptr i64 %14 to i32*, !insn.addr !15165
  %16 = inttoptr i64 %8 to i8*, !insn.addr !15166
  %17 = add i64 %7, 17, !insn.addr !15167
  %18 = inttoptr i64 %17 to i8*, !insn.addr !15167
  %19 = add i64 %7, 18, !insn.addr !15168
  %20 = inttoptr i64 %19 to i8*, !insn.addr !15168
  %21 = add i64 %7, 28, !insn.addr !15169
  %22 = inttoptr i64 %21 to i32*, !insn.addr !15169
  %23 = add i64 %7, 32, !insn.addr !15170
  %24 = inttoptr i64 %23 to i32*, !insn.addr !15170
  store i32 ptrtoint (i16* @global_var_4 to i32), i32* %15, align 4, !insn.addr !15171
  store i8 0, i8* %16, align 8, !insn.addr !15172
  store i8 0, i8* %18, align 1, !insn.addr !15173
  store i8 0, i8* %20, align 2, !insn.addr !15174
  store i32 ptrtoint (i8* @global_var_8 to i32), i32* %22, align 4, !insn.addr !15175
  store i32 ptrtoint (i8* @global_var_8 to i32), i32* %24, align 8, !insn.addr !15176
  store i32 ptrtoint (i8* @global_var_8 to i32), i32* %11, align 4, !insn.addr !15177
  store i32 ptrtoint (i8* @global_var_10 to i32), i32* %13, align 8, !insn.addr !15178
  %25 = inttoptr i64 %4 to i32*, !insn.addr !15179
  store i32 ptrtoint (i16* @global_var_4 to i32), i32* %25, align 4, !insn.addr !15179
  %26 = add i64 %4, 4, !insn.addr !15180
  %27 = inttoptr i64 %26 to i32*, !insn.addr !15180
  store i32 1023, i32* %27, align 4, !insn.addr !15180
  %28 = trunc i64 %1 to i32, !insn.addr !15181
  %29 = and i32 %28, ptrtoint (i8** @global_var_3 to i32), !insn.addr !15181
  %30 = icmp eq i32 %29, 0, !insn.addr !15181
  %31 = icmp eq i1 %30, false, !insn.addr !15182
  br i1 %31, label %dec_label_pc_242b8, label %dec_label_pc_242a3, !insn.addr !15182

dec_label_pc_242a3:                               ; preds = %dec_label_pc_240e1
  %32 = mul i64 %1, mul (i64 add (i64 mul (i64 add (i64 ptrtoint (i16* @global_var_4 to i64), i64 1), i64 ptrtoint (i16* @global_var_4 to i64)), i64 1), i64 ptrtoint (i8* @global_var_8 to i64))
  %33 = inttoptr i64 %32 to i32*, !insn.addr !15183
  store i32 0, i32* %33, align 4, !insn.addr !15183
  store i64 %32, i64* %.pre-phi.reg2mem, !insn.addr !15184
  br label %dec_label_pc_24301, !insn.addr !15184

dec_label_pc_242b8:                               ; preds = %dec_label_pc_240e1
  %34 = zext i32 %29 to i64, !insn.addr !15181
  %35 = icmp eq i64 %34, ptrtoint (i32* @global_var_1 to i64), !insn.addr !15185
  %36 = icmp eq i1 %35, false, !insn.addr !15186
  br i1 %36, label %dec_label_pc_242d3, label %dec_label_pc_242be, !insn.addr !15186

dec_label_pc_242be:                               ; preds = %dec_label_pc_242b8
  %37 = mul i64 %1, mul (i64 add (i64 mul (i64 add (i64 ptrtoint (i16* @global_var_4 to i64), i64 1), i64 ptrtoint (i16* @global_var_4 to i64)), i64 1), i64 ptrtoint (i8* @global_var_8 to i64))
  %38 = inttoptr i64 %37 to i32*, !insn.addr !15187
  store i32 ptrtoint (i32* @global_var_1 to i32), i32* %38, align 4, !insn.addr !15187
  store i64 %37, i64* %.pre-phi.reg2mem, !insn.addr !15188
  br label %dec_label_pc_24301, !insn.addr !15188

dec_label_pc_242d3:                               ; preds = %dec_label_pc_242b8
  %39 = icmp eq i64 %34, ptrtoint (i32* @global_var_2 to i64), !insn.addr !15189
  %40 = icmp eq i1 %39, false, !insn.addr !15190
  %41 = mul i64 %1, mul (i64 add (i64 mul (i64 add (i64 ptrtoint (i16* @global_var_4 to i64), i64 1), i64 ptrtoint (i16* @global_var_4 to i64)), i64 1), i64 ptrtoint (i8* @global_var_8 to i64))
  %42 = inttoptr i64 %41 to i32*
  br i1 %40, label %dec_label_pc_242ee, label %dec_label_pc_242d9, !insn.addr !15190

dec_label_pc_242d9:                               ; preds = %dec_label_pc_242d3
  store i32 ptrtoint (i32* @global_var_2 to i32), i32* %42, align 4, !insn.addr !15191
  store i64 %41, i64* %.pre-phi.reg2mem, !insn.addr !15192
  br label %dec_label_pc_24301, !insn.addr !15192

dec_label_pc_242ee:                               ; preds = %dec_label_pc_242d3
  store i32 ptrtoint (i8** @global_var_3 to i32), i32* %42, align 4, !insn.addr !15193
  store i64 %41, i64* %.pre-phi.reg2mem, !insn.addr !15193
  br label %dec_label_pc_24301, !insn.addr !15193

dec_label_pc_24301:                               ; preds = %dec_label_pc_242ee, %dec_label_pc_242d9, %dec_label_pc_242be, %dec_label_pc_242a3
  %.pre-phi.reload = load i64, i64* %.pre-phi.reg2mem
  %43 = mul i64 %1, shl (i64 add (i64 add (i64 ptrtoint (i32* @global_var_1 to i64), i64 1), i64 ptrtoint (i32* @global_var_1 to i64)), i64 ptrtoint (i8* @global_var_5 to i64)), !insn.addr !15194
  %44 = inttoptr i64 %43 to i64*, !insn.addr !15195
  store i64 %2, i64* %44, align 8, !insn.addr !15195
  %45 = add i64 %43, ptrtoint (i8* @global_var_8 to i64), !insn.addr !15196
  %46 = inttoptr i64 %45 to i64*, !insn.addr !15196
  store i64 0, i64* %46, align 8, !insn.addr !15196
  %reass.mul = mul i64 %1, add (i64 mul (i64 add (i64 add (i64 ptrtoint (i32* @global_var_1 to i64), i64 1), i64 ptrtoint (i32* @global_var_1 to i64)), i64 ptrtoint (i32* @global_var_1 to i64)), i64 add (i64 add (i64 ptrtoint (i32* @global_var_1 to i64), i64 1), i64 ptrtoint (i32* @global_var_1 to i64)))
  %47 = add i64 %reass.mul, ptrtoint (i32* @global_var_1 to i64), !insn.addr !15197
  %48 = shl i64 %47, ptrtoint (i16* @global_var_4 to i64), !insn.addr !15198
  %49 = mul i64 %48, ptrtoint (i32* @global_var_1 to i64), !insn.addr !15199
  %50 = inttoptr i64 %49 to i64*, !insn.addr !15199
  store i64 0, i64* %50, align 8, !insn.addr !15199
  %51 = add i64 %48, 8, !insn.addr !15200
  %52 = inttoptr i64 %51 to i64*, !insn.addr !15200
  store i64 0, i64* %52, align 8, !insn.addr !15200
  %53 = mul i64 %1, add (i64 ptrtoint (i32* @global_var_1 to i64), i64 2), !insn.addr !15201
  %54 = add i64 %53, ptrtoint (i32* @global_var_1 to i64), !insn.addr !15202
  %55 = shl i64 %54, ptrtoint (i8* @global_var_5 to i64), !insn.addr !15203
  %56 = inttoptr i64 %55 to i64*, !insn.addr !15204
  store i64 %arg1, i64* %56, align 8, !insn.addr !15204
  %57 = add i64 %55, ptrtoint (i8* @global_var_8 to i64), !insn.addr !15205
  %58 = inttoptr i64 %57 to i64*, !insn.addr !15205
  store i64 %.pre-phi.reload, i64* %58, align 8, !insn.addr !15205
  %59 = mul i64 %1, shl (i64 add (i64 ptrtoint (i32* @global_var_1 to i64), i64 2), i64 ptrtoint (i8* @global_var_5 to i64)), !insn.addr !15206
  %60 = inttoptr i64 %59 to i64*, !insn.addr !15207
  %61 = add i64 %59, ptrtoint (i8* @global_var_8 to i64), !insn.addr !15208
  %62 = inttoptr i64 %61 to i64*, !insn.addr !15208
  store i64 0, i64* %60, align 8, !insn.addr !15209
  store i64 0, i64* %62, align 8, !insn.addr !15210
  store i8 ptrtoint (i8* @global_var_8 to i8), i8* %stack_var_-40, align 1, !insn.addr !15211
  %63 = bitcast i8* %stack_var_-40 to i32*, !insn.addr !15212
  %64 = call i64 @BLACKWIDOW_Initialize.508(i64 %59, i32* nonnull %63, i64 0), !insn.addr !15212
  %65 = call i64 @BLACKWIDOW_EnableLoopThrough.372(i64 %59, i64* bitcast (i32* @global_var_1 to i64*)), !insn.addr !15213
  ret i64 %65, !insn.addr !15214
}

define i8 @NMI131_TunerSetFrequency(i8* %pDeviceExtension, i64 %TunerDeviceID, i64 %RF) local_unnamed_addr {
dec_label_pc_24412:
  %0 = ptrtoint i8* %pDeviceExtension to i64
  %1 = call i64 @BLACKWIDOW_Tune.286(i64 %0), !insn.addr !15215
  %2 = call i64 @DriverDebugMessage.510(i64 0), !insn.addr !15216
  ret i8 ptrtoint (i32* @global_var_1 to i8), !insn.addr !15217
}

define i64 @NMI131_TunerSetFrequency.560(i64 %arg1, i64 %arg2, i64 %arg3) local_unnamed_addr {
dec_label_pc_24442:
  %0 = call i64 @mcount(), !insn.addr !15218
  %1 = call i64 @DriverDebugMessage.510(i64 0), !insn.addr !15219
  %2 = call i64 @DriverDebugPrint.467(i64 0, i64 %arg3), !insn.addr !15220
  %3 = lshr i64 %arg2, ptrtoint (i32* @global_var_1 to i64), !insn.addr !15221
  %4 = mul i64 %3, add (i64 ptrtoint (i16* @global_var_4 to i64), i64 ptrtoint (i32* @global_var_1 to i64)), !insn.addr !15222
  %5 = mul i64 %3, mul (i64 add (i64 ptrtoint (i16* @global_var_4 to i64), i64 ptrtoint (i32* @global_var_1 to i64)), i64 ptrtoint (i8* @global_var_8 to i64)), !insn.addr !15223
  %6 = inttoptr i64 %5 to i64*, !insn.addr !15223
  store i64 %arg1, i64* %6, align 8, !insn.addr !15223
  ret i64 %4, !insn.addr !15224
}

define void @TDA2014x_I2C_Write(i8* %pUserData, i8* %p_tuner_handle, i8 %address, i8 %data, i64* %p_iostatus) local_unnamed_addr {
dec_label_pc_244e7:
  ret void, !insn.addr !15225
}

define i64 @TDA2014x_I2C_Write.365(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4, i64 %arg5) local_unnamed_addr {
dec_label_pc_24517:
  %0 = call i64 @mcount(), !insn.addr !15226
  ret i64 %0, !insn.addr !15227
}

define i8 @TC90522DemodulatorPSK_I2C_Write(i8* %pDeviceExtension, i64 %TunerDeviceID, i8 %SubAddress, i8 %Data) local_unnamed_addr {
dec_label_pc_24554:
  %.pre-phi.reg2mem = alloca i8, !insn.addr !15228
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = call i64 @__decompiler_undefined_function_0()
  %2 = sext i8 %Data to i64
  %3 = sext i8 %SubAddress to i64
  %4 = ptrtoint i8* %pDeviceExtension to i64
  %5 = inttoptr i64 %1 to i8*, !insn.addr !15229
  %6 = load i8, i8* %5, align 1, !insn.addr !15229
  %7 = trunc i64 %1 to i8, !insn.addr !15229
  %8 = add i8 %6, %7, !insn.addr !15229
  store i8 %8, i8* %5, align 1, !insn.addr !15229
  %9 = call i64 @I2C_PortingLayer_Write.296(i64 %4, i64 %TunerDeviceID, i64 %3, i64 %2), !insn.addr !15230
  %10 = trunc i64 %9 to i8
  %11 = icmp eq i8 %10, 0, !insn.addr !15231
  br i1 %11, label %dec_label_pc_2456a, label %dec_label_pc_24561, !insn.addr !15232

dec_label_pc_24561:                               ; preds = %dec_label_pc_24554
  %12 = inttoptr i64 %0 to i64*, !insn.addr !15233
  store i64 0, i64* %12, align 8, !insn.addr !15233
  store i8 %10, i8* %.pre-phi.reg2mem, !insn.addr !15234
  br label %dec_label_pc_2457d, !insn.addr !15234

dec_label_pc_2456a:                               ; preds = %dec_label_pc_24554
  %13 = call i64 @DriverDebugMessage.510(i64 0), !insn.addr !15235
  %14 = inttoptr i64 %0 to i64*, !insn.addr !15236
  store i64 ptrtoint (i32* @global_var_1 to i64), i64* %14, align 8, !insn.addr !15236
  %.pre = trunc i64 %13 to i8, !insn.addr !15236
  store i8 %.pre, i8* %.pre-phi.reg2mem, !insn.addr !15236
  br label %dec_label_pc_2457d, !insn.addr !15236

dec_label_pc_2457d:                               ; preds = %dec_label_pc_2456a, %dec_label_pc_24561
  %.pre-phi.reload = load i8, i8* %.pre-phi.reg2mem
  ret i8 %.pre-phi.reload, !insn.addr !15236
}

define i8 @TC90522_SetTSID(i8* %pDeviceExtension, i64 %TunerDeviceID, i16 %TSID) local_unnamed_addr {
dec_label_pc_2457f:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = trunc i64 %0 to i8
  ret i8 %1
}

define i64 @function_24580() local_unnamed_addr {
dec_label_pc_24580:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = call i64 @__decompiler_undefined_function_0()
  %2 = call i1 @__decompiler_undefined_function_2()
  %3 = add i64 %0, -55, !insn.addr !15237
  %4 = inttoptr i64 %3 to i8*, !insn.addr !15237
  %5 = load i8, i8* %4, align 1, !insn.addr !15237
  %6 = trunc i64 %0 to i8, !insn.addr !15237
  %.neg1 = sext i1 %2 to i8
  %.neg2 = sub i8 %.neg1, %6, !insn.addr !15237
  %7 = add i8 %.neg2, %5, !insn.addr !15237
  store i8 %7, i8* %4, align 1, !insn.addr !15237
  ret i64 %1, !insn.addr !15238
}

define i64 @TC90522DemodulatorPSK_I2C_Write.485(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4) local_unnamed_addr {
dec_label_pc_24584:
  %stack_var_-24 = alloca i64, align 8
  %0 = call i64 @mcount(), !insn.addr !15239
  %sext = mul i64 %arg3, 72057594037927936
  %1 = sdiv i64 %sext, 72057594037927936, !insn.addr !15240
  store i64 %1, i64* %stack_var_-24, align 8, !insn.addr !15240
  %2 = ptrtoint i64* %stack_var_-24 to i64, !insn.addr !15241
  %3 = mul i64 %arg2, 2, !insn.addr !15242
  %4 = and i64 %3, zext (i32 ptrtoint (i16** @global_var_e to i32) to i64), !insn.addr !15243
  %5 = add nuw nsw i64 %4, zext (i32 ptrtoint (i32** @global_var_20 to i32) to i64), !insn.addr !15244
  %6 = and i64 %5, 4294967288, !insn.addr !15244
  %7 = call i64 @I2C_PortingLayer_Write.296(i64 %arg1, i64 %6, i64 %2, i64 ptrtoint (i32* @global_var_2 to i64)), !insn.addr !15245
  ret i64 %7, !insn.addr !15246
}

define i64 @TC90522_SetTSID.248(i64 %arg1, i64 %arg2, i64 %arg3) local_unnamed_addr {
dec_label_pc_245af:
  %0 = call i64 @mcount(), !insn.addr !15247
  %1 = and i64 %arg3, 4294967295, !insn.addr !15248
  ret i64 %1, !insn.addr !15249
}

define i8 @Japan4x4Tuner_TunerSetTSID(i64 %TunerDeviceID, i16 %TSID, i8* %pDeviceExtension) local_unnamed_addr {
dec_label_pc_245ea:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = trunc i64 %0 to i8
  ret i8 %1
}

define i64 @function_245ed() local_unnamed_addr {
dec_label_pc_245ed:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = call i64 @__decompiler_undefined_function_0()
  %2 = call i64 @__decompiler_undefined_function_0()
  %3 = urem i64 %0, 256, !insn.addr !15250
  %4 = call i64 @TC90522DemodulatorPSK_I2C_Write.485(i64 %1, i64 %2, i64 144, i64 %3), !insn.addr !15251
  ret i64 %4, !insn.addr !15252
}

define i8 @TC90522DemodulatorOFDM_I2C_Write(i8* %pDeviceExtension, i64 %TunerDeviceID, i8 %SubAddress, i8 %Data) local_unnamed_addr {
dec_label_pc_24619:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = trunc i64 %0 to i8, !insn.addr !15253
  ret i8 %1, !insn.addr !15253
}

define i64 @Japan4x4Tuner_TunerSetTSID.454(i8 %arg1, i64 %arg2, i64 %arg3) local_unnamed_addr {
dec_label_pc_2461a:
  %0 = call i64 @mcount(), !insn.addr !15254
  %1 = icmp ugt i8 %arg1, 63
  %2 = and i8 %arg1, ptrtoint (i32* @global_var_1 to i8), !insn.addr !15255
  %3 = icmp eq i8 %2, 0, !insn.addr !15255
  %or.cond = or i1 %1, %3
  br i1 %or.cond, label %dec_label_pc_24642, label %dec_label_pc_24632, !insn.addr !15256

dec_label_pc_24632:                               ; preds = %dec_label_pc_2461a
  %4 = sext i8 %arg1 to i64
  %5 = urem i64 %arg2, 65536, !insn.addr !15257
  %6 = call i64 @TC90522_SetTSID.248(i64 %arg3, i64 %4, i64 %5), !insn.addr !15258
  ret i64 %6, !insn.addr !15259

dec_label_pc_24642:                               ; preds = %dec_label_pc_2461a
  ret i64 %arg3, !insn.addr !15259
}

define i8 @TC90522_ResetInternal(i8* %pDeviceExtension, i64 %TunerDeviceID) local_unnamed_addr {
dec_label_pc_24644:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = trunc i64 %0 to i8
  %2 = mul i8 %1, 2, !insn.addr !15260
  %3 = inttoptr i64 %0 to i8*, !insn.addr !15260
  store i8 %2, i8* %3, align 1, !insn.addr !15260
  ret i8 %1, !insn.addr !15260
}

define i64 @TC90522DemodulatorOFDM_I2C_Write.381(i64 %arg1, i64 %arg2, i64* %arg3, i64 %arg4) local_unnamed_addr {
dec_label_pc_24649:
  %0 = ptrtoint i64* %arg3 to i64
  %stack_var_-24 = alloca i64, align 8
  %1 = call i64 @mcount(), !insn.addr !15261
  %sext = mul i64 %0, 72057594037927936
  %2 = sdiv i64 %sext, 72057594037927936, !insn.addr !15262
  store i64 %2, i64* %stack_var_-24, align 8, !insn.addr !15262
  %3 = ptrtoint i64* %stack_var_-24 to i64, !insn.addr !15263
  %4 = mul i64 %arg2, 2, !insn.addr !15264
  %5 = and i64 %4, zext (i32 ptrtoint (i16** @global_var_e to i32) to i64), !insn.addr !15265
  %6 = add nuw nsw i64 %5, zext (i32 ptrtoint (i32** @global_var_20 to i32) to i64), !insn.addr !15266
  %7 = and i64 %6, 4294967288, !insn.addr !15266
  %8 = call i64 @I2C_PortingLayer_Write.296(i64 %arg1, i64 %7, i64 %3, i64 ptrtoint (i32* @global_var_2 to i64)), !insn.addr !15267
  ret i64 %8, !insn.addr !15268
}

define i64 @TC90522_ResetInternal.546(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_24674:
  %0 = call i64 @mcount(), !insn.addr !15269
  %1 = trunc i64 %arg2 to i8, !insn.addr !15270
  %2 = and i8 %1, ptrtoint (i32* @global_var_1 to i8), !insn.addr !15270
  %3 = icmp eq i8 %2, 0, !insn.addr !15270
  %4 = icmp eq i1 %3, false, !insn.addr !15271
  br i1 %4, label %dec_label_pc_24725, label %dec_label_pc_246a4, !insn.addr !15271

dec_label_pc_246a4:                               ; preds = %dec_label_pc_24674
  %5 = call i64 @TC90522DemodulatorOFDM_I2C_Write.381(i64 %arg1, i64 %arg2, i64* bitcast (i32* @global_var_1 to i64*), i64 80), !insn.addr !15272
  %6 = call i64 @TC90522DemodulatorOFDM_I2C_Write.381(i64 %arg1, i64 %arg2, i64* inttoptr (i64 71 to i64*), i64 48), !insn.addr !15273
  %7 = call i64 @TC90522DemodulatorOFDM_I2C_Write.381(i64 %arg1, i64 %arg2, i64* inttoptr (i64 37 to i64*), i64 0), !insn.addr !15274
  %8 = call i64 @TC90522DemodulatorOFDM_I2C_Write.381(i64 %arg1, i64 %arg2, i64* bitcast (i32** @global_var_20 to i64*), i64 0), !insn.addr !15275
  %9 = call i64 @TC90522DemodulatorOFDM_I2C_Write.381(i64 %arg1, i64 %arg2, i64* nonnull @global_var_23, i64 77), !insn.addr !15276
  ret i64 %9, !insn.addr !15277

dec_label_pc_24725:                               ; preds = %dec_label_pc_24674
  %10 = call i64 @TC90522DemodulatorPSK_I2C_Write.485(i64 %arg1, i64 %arg2, i64 ptrtoint (i8* @global_var_a to i64), i64 0), !insn.addr !15278
  %11 = call i64 @TC90522DemodulatorPSK_I2C_Write.485(i64 %arg1, i64 %arg2, i64 ptrtoint (i8* @global_var_10 to i64), i64 176), !insn.addr !15279
  ret i64 %11, !insn.addr !15280
}

define i8 @TC90522_Initialization(i8* %pDeviceExtension, i64 %TunerDeviceID, i8 %ConfigureTransportStreamOutputFlag) local_unnamed_addr {
dec_label_pc_24761:
  %storemerge.reg2mem = alloca i8, !insn.addr !15281
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = call i64 @__decompiler_undefined_function_0()
  %2 = call i64 @__decompiler_undefined_function_0()
  %3 = sext i8 %ConfigureTransportStreamOutputFlag to i64
  %4 = ptrtoint i8* %pDeviceExtension to i64
  %5 = call i64 @TC90522DemodulatorPSK_I2C_Write.485(i64 %4, i64 %TunerDeviceID, i64 %3, i64 %2), !insn.addr !15281
  %6 = trunc i64 %5 to i8, !insn.addr !15282
  %7 = icmp eq i8 %6, 0, !insn.addr !15282
  store i8 0, i8* %storemerge.reg2mem, !insn.addr !15283
  br i1 %7, label %dec_label_pc_24786, label %dec_label_pc_2476a, !insn.addr !15283

dec_label_pc_2476a:                               ; preds = %dec_label_pc_24761
  %8 = call i64 @TC90522DemodulatorPSK_I2C_Write.485(i64 %0, i64 %1, i64 ptrtoint (i8** @global_var_3 to i64), i64 ptrtoint (i32* @global_var_1 to i64)), !insn.addr !15284
  %phitmp = trunc i64 %8 to i8
  store i8 %phitmp, i8* %storemerge.reg2mem, !insn.addr !15285
  br label %dec_label_pc_24786, !insn.addr !15285

dec_label_pc_24786:                               ; preds = %dec_label_pc_24761, %dec_label_pc_2476a
  %storemerge.reload = load i8, i8* %storemerge.reg2mem
  ret i8 %storemerge.reload, !insn.addr !15286
}

define i64 @TC90522_Initialization.392(i64 %arg1, i64 %arg2, i64* %arg3) local_unnamed_addr {
dec_label_pc_24791:
  %0 = call i64 @mcount(), !insn.addr !15287
  %1 = call i64 @DriverDebugMessage.510(i64 0), !insn.addr !15288
  %2 = trunc i64 %arg2 to i8, !insn.addr !15289
  %3 = and i8 %2, ptrtoint (i32* @global_var_1 to i8), !insn.addr !15289
  %4 = icmp eq i8 %3, 0, !insn.addr !15289
  %5 = icmp eq i1 %4, false, !insn.addr !15290
  br i1 %5, label %dec_label_pc_24963, label %dec_label_pc_247d2, !insn.addr !15290

dec_label_pc_247d2:                               ; preds = %dec_label_pc_24791
  %6 = call i64 @TC90522DemodulatorOFDM_I2C_Write.381(i64 %arg1, i64 %arg2, i64* inttoptr (i64 176 to i64*), i64 160), !insn.addr !15291
  %7 = call i64 @TC90522DemodulatorOFDM_I2C_Write.381(i64 %arg1, i64 %arg2, i64* inttoptr (i64 178 to i64*), i64 61), !insn.addr !15292
  %8 = call i64 @TC90522DemodulatorOFDM_I2C_Write.381(i64 %arg1, i64 %arg2, i64* inttoptr (i64 179 to i64*), i64 37), !insn.addr !15293
  %9 = call i64 @TC90522DemodulatorOFDM_I2C_Write.381(i64 %arg1, i64 %arg2, i64* inttoptr (i64 180 to i64*), i64 139), !insn.addr !15294
  %10 = call i64 @TC90522DemodulatorOFDM_I2C_Write.381(i64 %arg1, i64 %arg2, i64* inttoptr (i64 181 to i64*), i64 75), !insn.addr !15295
  %11 = call i64 @TC90522DemodulatorOFDM_I2C_Write.381(i64 %arg1, i64 %arg2, i64* inttoptr (i64 182 to i64*), i64 63), !insn.addr !15296
  %12 = call i64 @TC90522DemodulatorOFDM_I2C_Write.381(i64 %arg1, i64 %arg2, i64* inttoptr (i64 183 to i64*), i64 255), !insn.addr !15297
  %13 = call i64 @TC90522DemodulatorOFDM_I2C_Write.381(i64 %arg1, i64 %arg2, i64* inttoptr (i64 184 to i64*), i64 192), !insn.addr !15298
  %14 = call i64 @TC90522DemodulatorOFDM_I2C_Write.381(i64 %arg1, i64 %arg2, i64* bitcast (i8** @global_var_3 to i64*), i64 0), !insn.addr !15299
  %15 = call i64 @TC90522DemodulatorOFDM_I2C_Write.381(i64 %arg1, i64 %arg2, i64* bitcast (i32** @global_var_1d to i64*), i64 0), !insn.addr !15300
  %16 = call i64 @TC90522DemodulatorOFDM_I2C_Write.381(i64 %arg1, i64 %arg2, i64* bitcast (i8** @global_var_1f to i64*), i64 0), !insn.addr !15301
  %17 = call i64 @TC90522DemodulatorOFDM_I2C_Write.381(i64 %arg1, i64 %arg2, i64* bitcast (i16** @global_var_e to i64*), i64 119), !insn.addr !15302
  %18 = call i64 @TC90522DemodulatorOFDM_I2C_Write.381(i64 %arg1, i64 %arg2, i64* bitcast (i8* @global_var_f to i64*), i64 ptrtoint (i32** @global_var_13 to i64)), !insn.addr !15303
  %19 = call i64 @TC90522DemodulatorOFDM_I2C_Write.381(i64 %arg1, i64 %arg2, i64* inttoptr (i64 117 to i64*), i64 ptrtoint (i32* @global_var_2 to i64)), !insn.addr !15304
  ret i64 ptrtoint (i32* @global_var_1 to i64), !insn.addr !15305

dec_label_pc_24963:                               ; preds = %dec_label_pc_24791
  %20 = call i64 @TC90522DemodulatorPSK_I2C_Write.485(i64 %arg1, i64 %arg2, i64 ptrtoint (i32** @global_var_13 to i64), i64 0), !insn.addr !15306
  %21 = call i64 @TC90522DemodulatorPSK_I2C_Write.485(i64 %arg1, i64 %arg2, i64 ptrtoint (i8** @global_var_15 to i64), i64 0), !insn.addr !15307
  %22 = call i64 @TC90522DemodulatorPSK_I2C_Write.485(i64 %arg1, i64 %arg2, i64 ptrtoint (i8** @global_var_17 to i64), i64 0), !insn.addr !15308
  %23 = call i64 @TC90522DemodulatorPSK_I2C_Write.485(i64 %arg1, i64 %arg2, i64 ptrtoint (i32** @global_var_1c to i64), i64 0), !insn.addr !15309
  %24 = call i64 @TC90522DemodulatorPSK_I2C_Write.485(i64 %arg1, i64 %arg2, i64 ptrtoint (i32** @global_var_1d to i64), i64 0), !insn.addr !15310
  %25 = call i64 @TC90522DemodulatorPSK_I2C_Write.485(i64 %arg1, i64 %arg2, i64 ptrtoint (i8** @global_var_1f to i64), i64 0), !insn.addr !15311
  %26 = call i64 @TC90522DemodulatorPSK_I2C_Write.485(i64 %arg1, i64 %arg2, i64 ptrtoint (i8** @global_var_7 to i64), i64 49), !insn.addr !15312
  %27 = call i64 @TC90522DemodulatorPSK_I2C_Write.485(i64 %arg1, i64 %arg2, i64 ptrtoint (i8* @global_var_8 to i64), i64 119), !insn.addr !15313
  ret i64 %27, !insn.addr !15314
}

define i8 @TDA2014x_I2C_Read(i8* %pUserData, i8* %p_tuner_handle, i8 %address, i64* %p_iostatus) local_unnamed_addr {
dec_label_pc_24a3a:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = call i64 @__decompiler_undefined_function_0()
  %2 = call i64 @__decompiler_undefined_function_0()
  %3 = ptrtoint i64* %p_iostatus to i64
  %4 = sext i8 %address to i64
  %5 = inttoptr i64 %2 to i8*, !insn.addr !15315
  %6 = load i8, i8* %5, align 1, !insn.addr !15315
  %7 = trunc i64 %2 to i8, !insn.addr !15315
  %8 = add i8 %6, %7, !insn.addr !15315
  store i8 %8, i8* %5, align 1, !insn.addr !15315
  %9 = call i64 @TC90522DemodulatorPSK_I2C_Write.485(i64 %0, i64 %1, i64 %4, i64 %3), !insn.addr !15316
  ret i8 ptrtoint (i32* @global_var_1 to i8), !insn.addr !15317
}

define i64 @TDA2014x_I2C_Read.398(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4) local_unnamed_addr {
dec_label_pc_24a6a:
  %stack_var_-56 = alloca i8, align 1
  %stack_var_-41 = alloca i8, align 1
  %stack_var_-72 = alloca i64, align 8
  %0 = call i64 @mcount(), !insn.addr !15318
  store i8 0, i8* %stack_var_-41, align 1, !insn.addr !15319
  %1 = mul i64 %arg2, 2, !insn.addr !15320
  %2 = and i64 %1, zext (i8 ptrtoint (i8* @global_var_f to i8) to i64), !insn.addr !15321
  %3 = add nuw nsw i64 %2, zext (i8 ptrtoint (i32** @global_var_20 to i8) to i64), !insn.addr !15322
  store i64 -2, i64* %stack_var_-72, align 8, !insn.addr !15323
  %4 = and i64 %3, 254, !insn.addr !15324
  %5 = ptrtoint i64* %stack_var_-72 to i64, !insn.addr !15325
  %6 = call i64 @I2C_PortingLayer_Write.296(i64 %arg1, i64 %4, i64 %5, i64 ptrtoint (i8** @global_var_3 to i64)), !insn.addr !15326
  store i8 -2, i8* %stack_var_-56, align 1, !insn.addr !15327
  %7 = call i64 @I2C_PortingLayer_Read.494(i64 %arg1, i64 %4, i8* nonnull %stack_var_-56, i64* bitcast (i32* @global_var_2 to i64*), i8* nonnull %stack_var_-41, i64* bitcast (i32* @global_var_1 to i64*)), !insn.addr !15328
  %8 = trunc i64 %7 to i8, !insn.addr !15329
  %9 = icmp eq i8 %8, 0, !insn.addr !15329
  br i1 %9, label %dec_label_pc_24b04, label %dec_label_pc_24afb, !insn.addr !15330

dec_label_pc_24afb:                               ; preds = %dec_label_pc_24a6a
  %10 = inttoptr i64 %arg4 to i64*, !insn.addr !15331
  store i64 0, i64* %10, align 8, !insn.addr !15331
  ret i64 %7, !insn.addr !15332

dec_label_pc_24b04:                               ; preds = %dec_label_pc_24a6a
  ret i64 %7, !insn.addr !15333
}

define i8 @NMI131_ReadRegister(i8* %pUserData, i8 %i2cAdr, i8* %rb, i32 %sz) local_unnamed_addr {
dec_label_pc_24b0e:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = call i64 @__decompiler_undefined_function_0()
  %2 = call i64 @__decompiler_undefined_function_0()
  %3 = trunc i64 %2 to i8
  %4 = mul i8 %3, 2, !insn.addr !15334
  %5 = inttoptr i64 %2 to i8*, !insn.addr !15334
  store i8 %4, i8* %5, align 1, !insn.addr !15334
  %6 = inttoptr i64 %1 to i64*, !insn.addr !15335
  store i64 ptrtoint (i32* @global_var_1 to i64), i64* %6, align 8, !insn.addr !15335
  %7 = add i64 %0, -33, !insn.addr !15336
  %8 = inttoptr i64 %7 to i8*, !insn.addr !15336
  %9 = load i8, i8* %8, align 1, !insn.addr !15336
  ret i8 %9, !insn.addr !15337
}

define i64 @NMI131_ReadRegister.274(i64 %arg1, i64 %arg2, i64 %arg3) local_unnamed_addr {
dec_label_pc_24b3e:
  %0 = call i64 @mcount(), !insn.addr !15338
  ret i64 %0, !insn.addr !15339
}

define i8 @TC90522DemodulatorPSK_I2C_Read(i8* %pDeviceExtension, i64 %TunerDeviceID, i8 %SubAddress, i8* %pData) local_unnamed_addr {
dec_label_pc_24b66:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = sext i8 %SubAddress to i64
  %2 = ptrtoint i8* %pDeviceExtension to i64
  %3 = inttoptr i64 %1 to i8*, !insn.addr !15340
  %4 = inttoptr i64 %0 to i8*, !insn.addr !15340
  %5 = bitcast i8* %pData to i64*, !insn.addr !15340
  %6 = call i64 @I2C_PortingLayer_Read.494(i64 %2, i64 %TunerDeviceID, i8* %3, i64* bitcast (i32* @global_var_2 to i64*), i8* %4, i64* %5), !insn.addr !15340
  %7 = trunc i64 %6 to i8, !insn.addr !15341
  %8 = icmp eq i8 %7, 0, !insn.addr !15341
  %9 = icmp eq i1 %8, false, !insn.addr !15342
  br i1 %9, label %dec_label_pc_24b8d, label %dec_label_pc_24b81, !insn.addr !15342

dec_label_pc_24b81:                               ; preds = %dec_label_pc_24b66
  %10 = call i64 @DriverDebugMessage.510(i64 0), !insn.addr !15343
  br label %dec_label_pc_24b8d, !insn.addr !15343

dec_label_pc_24b8d:                               ; preds = %dec_label_pc_24b81, %dec_label_pc_24b66
  ret i8 %7, !insn.addr !15344
}

define i64 @TC90522DemodulatorPSK_I2C_Read.449(i64 %arg1, i64 %arg2, i64 %arg3, i64* %arg4) local_unnamed_addr {
dec_label_pc_24b96:
  %0 = call i64 @__decompiler_undefined_function_0()
  ret i64 %0, !insn.addr !15345
}

define i8 @TC90522_GetTSID(i8* %pDeviceExtension, i64 %TunerDeviceID, i16* %TSID) local_unnamed_addr {
dec_label_pc_24b97:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = ptrtoint i8* %pDeviceExtension to i64
  %stack_var_-4 = alloca i16*, align 8
  %2 = call i64 @mcount(), !insn.addr !15346
  store i16* %TSID, i16** %stack_var_-4, align 8, !insn.addr !15347
  %3 = mul i64 %TunerDeviceID, 2, !insn.addr !15348
  %4 = and i64 %3, zext (i32 ptrtoint (i16** @global_var_e to i32) to i64), !insn.addr !15349
  %5 = add nuw nsw i64 %4, zext (i32 ptrtoint (i32** @global_var_20 to i32) to i64), !insn.addr !15350
  %6 = and i64 %5, 4294967288, !insn.addr !15350
  %7 = inttoptr i64 %0 to i8*, !insn.addr !15351
  %8 = bitcast i16** %stack_var_-4 to i8*, !insn.addr !15351
  %9 = call i64 @I2C_PortingLayer_Read.494(i64 %1, i64 %6, i8* nonnull %8, i64* bitcast (i32* @global_var_1 to i64*), i8* %7, i64* bitcast (i32* @global_var_1 to i64*)), !insn.addr !15351
  %10 = trunc i64 %9 to i8, !insn.addr !15352
  ret i8 %10, !insn.addr !15352
}

define i64 @TC90522_GetTSID.530(i64 %arg1, i64 %arg2, i64 %arg3) local_unnamed_addr {
dec_label_pc_24bc7:
  %r14.0.reg2mem = alloca i1, !insn.addr !15353
  %rax.0.reg2mem = alloca i64, !insn.addr !15353
  %stack_var_-58 = alloca i8*, align 8
  %stack_var_-57 = alloca i32, align 4
  %0 = call i64 @mcount(), !insn.addr !15354
  %1 = bitcast i32* %stack_var_-57 to i64*, !insn.addr !15355
  %2 = call i64 @TC90522DemodulatorPSK_I2C_Read.449(i64 %arg1, i64 %arg2, i64 206, i64* nonnull %1), !insn.addr !15355
  %3 = trunc i64 %2 to i8, !insn.addr !15356
  %4 = icmp eq i8 %3, ptrtoint (i32* @global_var_1 to i8), !insn.addr !15356
  %5 = icmp eq i1 %4, false, !insn.addr !15357
  store i64 %2, i64* %rax.0.reg2mem, !insn.addr !15357
  store i1 icmp eq (i8 ptrtoint (i32* @global_var_1 to i8), i8 0), i1* %r14.0.reg2mem, !insn.addr !15357
  br i1 %5, label %dec_label_pc_24c32, label %dec_label_pc_24c1d, !insn.addr !15357

dec_label_pc_24c1d:                               ; preds = %dec_label_pc_24bc7
  %6 = bitcast i8** %stack_var_-58 to i64*, !insn.addr !15358
  %7 = call i64 @TC90522DemodulatorPSK_I2C_Read.449(i64 %arg1, i64 %arg2, i64 207, i64* nonnull %6), !insn.addr !15358
  %phitmp = trunc i64 %7 to i8
  %phitmp3 = icmp eq i8 %phitmp, ptrtoint (i32* @global_var_1 to i8)
  store i64 %7, i64* %rax.0.reg2mem, !insn.addr !15359
  store i1 %phitmp3, i1* %r14.0.reg2mem, !insn.addr !15359
  br label %dec_label_pc_24c32, !insn.addr !15359

dec_label_pc_24c32:                               ; preds = %dec_label_pc_24c1d, %dec_label_pc_24bc7
  %r14.0.reload = load i1, i1* %r14.0.reg2mem
  %8 = icmp eq i1 %r14.0.reload, false, !insn.addr !15360
  br i1 %8, label %dec_label_pc_24c4c, label %dec_label_pc_24c38, !insn.addr !15360

dec_label_pc_24c38:                               ; preds = %dec_label_pc_24c32
  %9 = load i32, i32* %stack_var_-57, align 4, !insn.addr !15361
  %10 = urem i32 %9, 256, !insn.addr !15362
  %11 = shl i32 %10, ptrtoint (i8* @global_var_8 to i32), !insn.addr !15362
  %12 = load i8*, i8** %stack_var_-58, align 8, !insn.addr !15363
  %13 = ptrtoint i8* %12 to i64, !insn.addr !15363
  %14 = trunc i64 %13 to i32, !insn.addr !15363
  %15 = urem i32 %14, 256, !insn.addr !15364
  %16 = or i32 %15, %11, !insn.addr !15364
  %17 = trunc i32 %16 to i16, !insn.addr !15365
  %18 = inttoptr i64 %arg3 to i16*, !insn.addr !15365
  store i16 %17, i16* %18, align 2, !insn.addr !15365
  %19 = inttoptr i64 %arg2 to i16*, !insn.addr !15366
  %20 = call i8 @Japan4x4Tuner_TunerGetTSID(i64 %arg1, i16* %19, i8* %12), !insn.addr !15366
  %21 = sext i8 %20 to i64, !insn.addr !15366
  ret i64 %21, !insn.addr !15366

dec_label_pc_24c4c:                               ; preds = %dec_label_pc_24c32
  %rax.0.reload = load i64, i64* %rax.0.reg2mem
  %22 = inttoptr i64 %arg3 to i16*, !insn.addr !15367
  store i16 0, i16* %22, align 2, !insn.addr !15367
  ret i64 %rax.0.reload, !insn.addr !15367
}

define i8 @Japan4x4Tuner_TunerGetTSID(i64 %TunerDeviceID, i16* %TSID, i8* %pDeviceExtension) local_unnamed_addr {
dec_label_pc_24c53:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = trunc i64 %0 to i8, !insn.addr !15368
  ret i8 %1, !insn.addr !15368
}

define i8 @TC90522DemodulatorOFDM_I2C_Read(i8* %pDeviceExtension, i64 %TunerDeviceID, i8 %SubAddress, i8* %pData) local_unnamed_addr {
dec_label_pc_24c82:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = trunc i64 %0 to i8, !insn.addr !15369
  ret i8 %1, !insn.addr !15369
}

define i64 @Japan4x4Tuner_TunerGetTSID.265(i8 %arg1, i64* %arg2, i64 %arg3) local_unnamed_addr {
dec_label_pc_24c83:
  %storemerge.reg2mem = alloca i64, !insn.addr !15370
  %0 = call i64 @mcount(), !insn.addr !15371
  %1 = icmp ugt i8 %arg1, 63
  %2 = and i8 %arg1, ptrtoint (i32* @global_var_1 to i8), !insn.addr !15372
  %3 = icmp eq i8 %2, 0, !insn.addr !15372
  %or.cond = or i1 %1, %3
  store i64 0, i64* %storemerge.reg2mem, !insn.addr !15373
  br i1 %or.cond, label %dec_label_pc_24cb0, label %dec_label_pc_24c9b, !insn.addr !15373

dec_label_pc_24c9b:                               ; preds = %dec_label_pc_24c83
  %4 = sext i8 %arg1 to i64
  %5 = ptrtoint i64* %arg2 to i64
  %6 = call i64 @TC90522_GetTSID.530(i64 %arg3, i64 %4, i64 %5), !insn.addr !15374
  store i64 %6, i64* %storemerge.reg2mem, !insn.addr !15375
  br label %dec_label_pc_24cb0, !insn.addr !15375

dec_label_pc_24cb0:                               ; preds = %dec_label_pc_24c83, %dec_label_pc_24c9b
  %storemerge.reload = load i64, i64* %storemerge.reg2mem
  ret i64 %storemerge.reload, !insn.addr !15376
}

define i64 @TC90522DemodulatorOFDM_I2C_Read.573(i64 %arg1, i64 %arg2, i64 %arg3, i64* %arg4) local_unnamed_addr {
dec_label_pc_24cb2:
  %0 = call i64 @__decompiler_undefined_function_0()
  ret i64 %0, !insn.addr !15377
}

define i64 @TC90522DemodulatorGetCN(i8* %pDeviceExtension, i64 %TunerDeviceID) local_unnamed_addr {
dec_label_pc_24cb3:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = call i64 @__decompiler_undefined_function_0()
  %2 = ptrtoint i8* %pDeviceExtension to i64
  %stack_var_-4 = alloca i8, align 1
  %3 = call i64 @mcount(), !insn.addr !15378
  %4 = trunc i64 %0 to i8, !insn.addr !15379
  store i8 %4, i8* %stack_var_-4, align 1, !insn.addr !15379
  %5 = mul i64 %TunerDeviceID, 2, !insn.addr !15380
  %6 = and i64 %5, zext (i32 ptrtoint (i16** @global_var_e to i32) to i64), !insn.addr !15381
  %7 = add nuw nsw i64 %6, zext (i32 ptrtoint (i32** @global_var_20 to i32) to i64), !insn.addr !15382
  %8 = and i64 %7, 4294967288, !insn.addr !15382
  %9 = inttoptr i64 %1 to i8*, !insn.addr !15383
  %10 = call i64 @I2C_PortingLayer_Read.494(i64 %2, i64 %8, i8* nonnull %stack_var_-4, i64* bitcast (i32* @global_var_1 to i64*), i8* %9, i64* bitcast (i32* @global_var_1 to i64*)), !insn.addr !15383
  ret i64 %10, !insn.addr !15384
}

define i64 @TC90522DemodulatorGetCN.345(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_24ce3:
  %stack_var_-57 = alloca i8, align 1
  %0 = call i64 @mcount(), !insn.addr !15385
  %1 = call i64 @DriverDebugMessage.510(i64 0), !insn.addr !15386
  %2 = call i64 @DriverDebugPrint.467(i64 0, i64 %arg2), !insn.addr !15387
  %3 = trunc i64 %arg2 to i8, !insn.addr !15388
  %4 = and i8 %3, ptrtoint (i32* @global_var_1 to i8), !insn.addr !15388
  %5 = icmp eq i8 %4, 0, !insn.addr !15388
  %6 = icmp eq i1 %5, false, !insn.addr !15389
  br i1 %6, label %dec_label_pc_24e8c, label %dec_label_pc_24e21.lr.ph, !insn.addr !15389

dec_label_pc_24e21.lr.ph:                         ; preds = %dec_label_pc_24ce3
  %7 = call i64 @TC90522DemodulatorOFDM_I2C_Write.381(i64 %arg1, i64 %arg2, i64* inttoptr (i64 186 to i64*), i64 0), !insn.addr !15390
  %8 = bitcast i8* %stack_var_-57 to i64*, !insn.addr !15391
  %9 = call i64 @TC90522DemodulatorOFDM_I2C_Read.573(i64 %arg1, i64 %arg2, i64 176, i64* nonnull %8), !insn.addr !15391
  %10 = call i64 @TC90522DemodulatorOFDM_I2C_Read.573(i64 %arg1, i64 %arg2, i64 139, i64* nonnull %8), !insn.addr !15392
  %11 = load i8, i8* %stack_var_-57, align 1, !insn.addr !15393
  %12 = call i64 @TC90522DemodulatorOFDM_I2C_Read.573(i64 %arg1, i64 %arg2, i64 140, i64* nonnull %8), !insn.addr !15394
  %13 = load i8, i8* %stack_var_-57, align 1, !insn.addr !15395
  %14 = call i64 @TC90522DemodulatorOFDM_I2C_Read.573(i64 %arg1, i64 %arg2, i64 141, i64* nonnull %8), !insn.addr !15396
  %15 = zext i8 %11 to i64, !insn.addr !15397
  %16 = shl i64 %15, ptrtoint (i8* @global_var_8 to i64), !insn.addr !15398
  %17 = zext i8 %13 to i64, !insn.addr !15399
  %18 = or i64 %16, %17, !insn.addr !15400
  %19 = shl i64 %18, ptrtoint (i8* @global_var_8 to i64), !insn.addr !15401
  %20 = load i8, i8* %stack_var_-57, align 1, !insn.addr !15402
  %21 = zext i8 %20 to i64, !insn.addr !15402
  %22 = or i64 %19, %21, !insn.addr !15403
  %23 = call i64 @DriverDebugPrint.467(i64 0, i64 %22), !insn.addr !15404
  call void @llvm.trap()
  unreachable

dec_label_pc_24e8c:                               ; preds = %dec_label_pc_24ce3
  %24 = bitcast i8* %stack_var_-57 to i64*, !insn.addr !15405
  %25 = call i64 @TC90522DemodulatorPSK_I2C_Read.449(i64 %arg1, i64 %arg2, i64 195, i64* nonnull %24), !insn.addr !15405
  %26 = call i64 @TC90522DemodulatorPSK_I2C_Read.449(i64 %arg1, i64 %arg2, i64 188, i64* nonnull %24), !insn.addr !15406
  %27 = load i8, i8* %stack_var_-57, align 1, !insn.addr !15407
  %28 = call i64 @TC90522DemodulatorPSK_I2C_Read.449(i64 %arg1, i64 %arg2, i64 189, i64* nonnull %24), !insn.addr !15408
  %29 = zext i8 %27 to i64, !insn.addr !15409
  %30 = shl i64 %29, ptrtoint (i8* @global_var_8 to i64), !insn.addr !15410
  %31 = load i8, i8* %stack_var_-57, align 1, !insn.addr !15411
  %32 = zext i8 %31 to i64, !insn.addr !15411
  %33 = or i64 %30, %32, !insn.addr !15412
  %34 = call i64 @DriverDebugPrint.467(i64 0, i64 %33), !insn.addr !15413
  %35 = icmp ult i64 %33, 35826
  br i1 %35, label %dec_label_pc_24f38.lr.ph, label %dec_label_pc_24f94, !insn.addr !15414

dec_label_pc_24f38.lr.ph:                         ; preds = %dec_label_pc_24e8c
  call void @llvm.trap()
  unreachable

dec_label_pc_24f94:                               ; preds = %dec_label_pc_24e8c
  ret i64 ptrtoint (i8** @global_var_3 to i64), !insn.addr !15415
}

define i8 @TC90522_GetCN(i8* %pDeviceExtension, i64 %TunerDeviceID, i64* %pCnValue) local_unnamed_addr {
dec_label_pc_24f9d:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = trunc i64 %0 to i8
  %2 = mul i8 %1, 2, !insn.addr !15416
  %3 = inttoptr i64 %0 to i8*, !insn.addr !15416
  store i8 %2, i8* %3, align 1, !insn.addr !15416
  ret i8 %1, !insn.addr !15417
}

define i8 @Japan4x4Tuner_TunerGetCN(i64 %TunerDeviceID, i64* %pCnValue, i8* %pDeviceExtension) local_unnamed_addr {
dec_label_pc_24fc7:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = trunc i64 %0 to i8, !insn.addr !15418
  ret i8 %1, !insn.addr !15418
}

define i64 @TC90522_GetCN.475(i64 %arg1, i64 %arg2, i64 %arg3) local_unnamed_addr {
dec_label_pc_24fcd:
  %rax.0.reg2mem = alloca i64, !insn.addr !15419
  %0 = call i64 @mcount(), !insn.addr !15420
  %1 = icmp eq i64 %arg3, 0, !insn.addr !15421
  store i64 %0, i64* %rax.0.reg2mem, !insn.addr !15422
  br i1 %1, label %dec_label_pc_24feb, label %dec_label_pc_24fe3, !insn.addr !15422

dec_label_pc_24fe3:                               ; preds = %dec_label_pc_24fcd
  %2 = call i64 @TC90522DemodulatorGetCN.345(i64 %arg1, i64 %arg2), !insn.addr !15423
  %3 = inttoptr i64 %arg3 to i64*, !insn.addr !15424
  store i64 %2, i64* %3, align 8, !insn.addr !15424
  store i64 %2, i64* %rax.0.reg2mem, !insn.addr !15424
  br label %dec_label_pc_24feb, !insn.addr !15424

dec_label_pc_24feb:                               ; preds = %dec_label_pc_24fe3, %dec_label_pc_24fcd
  %rax.0.reload = load i64, i64* %rax.0.reg2mem
  ret i64 %rax.0.reload, !insn.addr !15424
}

define i8 @TC90522DemodulatorGetQuality(i8* %pDeviceExtension, i64 %TunerDeviceID) local_unnamed_addr {
dec_label_pc_24fee:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = trunc i64 %0 to i8
  %2 = mul i8 %1, 2, !insn.addr !15425
  %3 = inttoptr i64 %0 to i8*, !insn.addr !15425
  store i8 %2, i8* %3, align 1, !insn.addr !15425
  ret i8 %1, !insn.addr !15426
}

define i64 @Japan4x4Tuner_TunerGetCN.418(i8 %arg1, i64 %arg2, i64 %arg3) local_unnamed_addr {
dec_label_pc_24ff7:
  %rax.0.reg2mem = alloca i64, !insn.addr !15427
  %0 = call i64 @mcount(), !insn.addr !15428
  %1 = icmp ult i8 %arg1, 64
  store i64 0, i64* %rax.0.reg2mem, !insn.addr !15429
  br i1 %1, label %dec_label_pc_2500e, label %dec_label_pc_2501c, !insn.addr !15429

dec_label_pc_2500e:                               ; preds = %dec_label_pc_24ff7
  %2 = sext i8 %arg1 to i64
  %3 = call i64 @TC90522_GetCN.475(i64 %arg3, i64 %2, i64 %arg2), !insn.addr !15430
  store i64 %3, i64* %rax.0.reg2mem, !insn.addr !15430
  br label %dec_label_pc_2501c, !insn.addr !15430

dec_label_pc_2501c:                               ; preds = %dec_label_pc_24ff7, %dec_label_pc_2500e
  %rax.0.reload = load i64, i64* %rax.0.reg2mem
  ret i64 %rax.0.reload, !insn.addr !15431
}

define i64 @TC90522DemodulatorGetQuality.325(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_2501e:
  %stack_var_-57 = alloca i32, align 4
  %0 = call i64 @mcount(), !insn.addr !15432
  %1 = call i64 @DriverDebugMessage.510(i64 0), !insn.addr !15433
  %2 = call i64 @DriverDebugPrint.467(i64 0, i64 %arg2), !insn.addr !15434
  %3 = icmp ult i64 %arg2, 64
  br i1 %3, label %dec_label_pc_2506f, label %dec_label_pc_25261, !insn.addr !15435

dec_label_pc_2506f:                               ; preds = %dec_label_pc_2501e
  %4 = trunc i64 %arg2 to i8, !insn.addr !15436
  %5 = and i8 %4, ptrtoint (i32* @global_var_1 to i8), !insn.addr !15436
  %6 = icmp eq i8 %5, 0, !insn.addr !15436
  %7 = icmp eq i1 %6, false, !insn.addr !15437
  br i1 %7, label %dec_label_pc_251b7, label %dec_label_pc_25078, !insn.addr !15437

dec_label_pc_25078:                               ; preds = %dec_label_pc_2506f
  %8 = call i64 @TC90522DemodulatorOFDM_I2C_Write.381(i64 %arg1, i64 %arg2, i64* inttoptr (i64 186 to i64*), i64 0), !insn.addr !15438
  %9 = trunc i64 %8 to i8, !insn.addr !15439
  %10 = icmp eq i8 %9, ptrtoint (i32* @global_var_1 to i8), !insn.addr !15439
  %11 = icmp eq i1 %10, false, !insn.addr !15440
  br i1 %11, label %dec_label_pc_25261, label %dec_label_pc_25095, !insn.addr !15440

dec_label_pc_25095:                               ; preds = %dec_label_pc_25078
  %12 = bitcast i32* %stack_var_-57 to i64*, !insn.addr !15441
  %13 = call i64 @TC90522DemodulatorOFDM_I2C_Read.573(i64 %arg1, i64 %arg2, i64 176, i64* nonnull %12), !insn.addr !15441
  %14 = trunc i64 %13 to i8, !insn.addr !15442
  %15 = icmp eq i8 %14, ptrtoint (i32* @global_var_1 to i8), !insn.addr !15442
  %16 = icmp eq i1 %15, false, !insn.addr !15443
  br i1 %16, label %dec_label_pc_25261, label %dec_label_pc_250b1, !insn.addr !15443

dec_label_pc_250b1:                               ; preds = %dec_label_pc_25095
  %17 = load i32, i32* %stack_var_-57, align 4, !insn.addr !15444
  %18 = trunc i32 %17 to i8
  %19 = and i8 %18, trunc (i32 and (i32 ptrtoint (i8* @global_var_f to i32), i32 255) to i8), !insn.addr !15445
  %20 = icmp ugt i8 %19, ptrtoint (i8** @global_var_7 to i8)
  br i1 %20, label %dec_label_pc_250c0, label %dec_label_pc_25261, !insn.addr !15446

dec_label_pc_250c0:                               ; preds = %dec_label_pc_250b1
  %21 = call i64 @TC90522DemodulatorOFDM_I2C_Read.573(i64 %arg1, i64 %arg2, i64 160, i64* nonnull %12), !insn.addr !15447
  %22 = trunc i64 %21 to i8, !insn.addr !15448
  %23 = icmp eq i8 %22, ptrtoint (i32* @global_var_1 to i8), !insn.addr !15448
  %24 = icmp eq i1 %23, false, !insn.addr !15449
  br i1 %24, label %dec_label_pc_25261, label %dec_label_pc_250dc, !insn.addr !15449

dec_label_pc_250dc:                               ; preds = %dec_label_pc_250c0
  %25 = load i32, i32* %stack_var_-57, align 4, !insn.addr !15450
  %26 = call i64 @TC90522DemodulatorOFDM_I2C_Read.573(i64 %arg1, i64 %arg2, i64 161, i64* nonnull %12), !insn.addr !15451
  %27 = trunc i64 %26 to i8, !insn.addr !15452
  %28 = icmp eq i8 %27, ptrtoint (i32* @global_var_1 to i8), !insn.addr !15452
  %29 = icmp eq i1 %28, false, !insn.addr !15453
  br i1 %29, label %dec_label_pc_25261, label %dec_label_pc_250fd, !insn.addr !15453

dec_label_pc_250fd:                               ; preds = %dec_label_pc_250dc
  %30 = load i32, i32* %stack_var_-57, align 4, !insn.addr !15454
  %31 = call i64 @TC90522DemodulatorOFDM_I2C_Read.573(i64 %arg1, i64 %arg2, i64 162, i64* nonnull %12), !insn.addr !15455
  %32 = trunc i64 %31 to i8, !insn.addr !15456
  %33 = icmp eq i8 %32, ptrtoint (i32* @global_var_1 to i8), !insn.addr !15456
  %34 = icmp eq i1 %33, false, !insn.addr !15457
  br i1 %34, label %dec_label_pc_25261, label %dec_label_pc_2511e, !insn.addr !15457

dec_label_pc_2511e:                               ; preds = %dec_label_pc_250fd
  %35 = urem i32 %25, 256
  %36 = zext i32 %35 to i64, !insn.addr !15458
  %37 = shl i64 %36, ptrtoint (i8* @global_var_8 to i64), !insn.addr !15459
  %38 = urem i32 %30, 256
  %39 = zext i32 %38 to i64, !insn.addr !15460
  %40 = or i64 %37, %39, !insn.addr !15461
  %41 = shl i64 %40, ptrtoint (i8* @global_var_8 to i64), !insn.addr !15462
  %42 = load i32, i32* %stack_var_-57, align 4, !insn.addr !15463
  %43 = urem i32 %42, 256
  %44 = zext i32 %43 to i64, !insn.addr !15463
  %45 = or i64 %41, %44, !insn.addr !15464
  %46 = call i64 @DriverDebugPrint.467(i64 0, i64 %45), !insn.addr !15465
  %47 = call i64 @TC90522DemodulatorOFDM_I2C_Read.573(i64 %arg1, i64 %arg2, i64 168, i64* nonnull %12), !insn.addr !15466
  %48 = trunc i64 %47 to i8, !insn.addr !15467
  %49 = icmp eq i8 %48, ptrtoint (i32* @global_var_1 to i8), !insn.addr !15467
  %50 = icmp eq i1 %49, false, !insn.addr !15468
  br i1 %50, label %dec_label_pc_25261, label %dec_label_pc_25168, !insn.addr !15468

dec_label_pc_25168:                               ; preds = %dec_label_pc_2511e
  %51 = call i64 @TC90522DemodulatorOFDM_I2C_Read.573(i64 %arg1, i64 %arg2, i64 169, i64* nonnull %12), !insn.addr !15469
  ret i64 ptrtoint (i32** @global_var_14 to i64)

dec_label_pc_251b7:                               ; preds = %dec_label_pc_2506f
  %52 = bitcast i32* %stack_var_-57 to i64*, !insn.addr !15470
  %53 = call i64 @TC90522DemodulatorPSK_I2C_Read.449(i64 %arg1, i64 %arg2, i64 195, i64* nonnull %52), !insn.addr !15470
  %54 = trunc i64 %53 to i8, !insn.addr !15471
  %55 = icmp eq i8 %54, ptrtoint (i32* @global_var_1 to i8), !insn.addr !15471
  %56 = icmp eq i1 %55, false, !insn.addr !15472
  br i1 %56, label %dec_label_pc_25261, label %dec_label_pc_251d3, !insn.addr !15472

dec_label_pc_251d3:                               ; preds = %dec_label_pc_251b7
  %57 = load i32, i32* %stack_var_-57, align 4, !insn.addr !15473
  %58 = trunc i32 %57 to i8, !insn.addr !15473
  %59 = and i8 %58, ptrtoint (i8* @global_var_10 to i8), !insn.addr !15473
  %60 = icmp eq i8 %59, 0, !insn.addr !15473
  %61 = icmp eq i1 %60, false, !insn.addr !15474
  br i1 %61, label %dec_label_pc_25261, label %dec_label_pc_251dd, !insn.addr !15474

dec_label_pc_251dd:                               ; preds = %dec_label_pc_251d3
  %62 = call i64 @TC90522DemodulatorPSK_I2C_Read.449(i64 %arg1, i64 %arg2, i64 ptrtoint ([3 x i8]* @global_var_eb to i64), i64* nonnull %52), !insn.addr !15475
  %63 = trunc i64 %62 to i8, !insn.addr !15476
  %64 = icmp eq i8 %63, ptrtoint (i32* @global_var_1 to i8), !insn.addr !15476
  %65 = icmp eq i1 %64, false, !insn.addr !15477
  br i1 %65, label %dec_label_pc_25261, label %dec_label_pc_251f5, !insn.addr !15477

dec_label_pc_251f5:                               ; preds = %dec_label_pc_251dd
  %66 = load i32, i32* %stack_var_-57, align 4, !insn.addr !15478
  %67 = call i64 @TC90522DemodulatorPSK_I2C_Read.449(i64 %arg1, i64 %arg2, i64 ptrtoint (i8* @global_var_ec to i64), i64* nonnull %52), !insn.addr !15479
  %68 = trunc i64 %67 to i8, !insn.addr !15480
  %69 = icmp eq i8 %68, ptrtoint (i32* @global_var_1 to i8), !insn.addr !15480
  %70 = icmp eq i1 %69, false, !insn.addr !15481
  br i1 %70, label %dec_label_pc_25261, label %dec_label_pc_25212, !insn.addr !15481

dec_label_pc_25212:                               ; preds = %dec_label_pc_251f5
  %71 = load i32, i32* %stack_var_-57, align 4, !insn.addr !15482
  %72 = call i64 @TC90522DemodulatorPSK_I2C_Read.449(i64 %arg1, i64 %arg2, i64 237, i64* nonnull %52), !insn.addr !15483
  %73 = trunc i64 %72 to i8, !insn.addr !15484
  %74 = icmp eq i8 %73, ptrtoint (i32* @global_var_1 to i8), !insn.addr !15484
  %75 = icmp eq i1 %74, false, !insn.addr !15485
  br i1 %75, label %dec_label_pc_25261, label %dec_label_pc_2522f, !insn.addr !15485

dec_label_pc_2522f:                               ; preds = %dec_label_pc_25212
  %76 = urem i32 %66, 256
  %77 = zext i32 %76 to i64, !insn.addr !15486
  %78 = shl i64 %77, ptrtoint (i8* @global_var_8 to i64), !insn.addr !15487
  %79 = urem i32 %71, 256
  %80 = zext i32 %79 to i64, !insn.addr !15488
  %81 = or i64 %78, %80, !insn.addr !15489
  %82 = shl i64 %81, ptrtoint (i8* @global_var_8 to i64), !insn.addr !15490
  %83 = load i32, i32* %stack_var_-57, align 4, !insn.addr !15491
  %84 = urem i32 %83, 256
  %85 = zext i32 %84 to i64, !insn.addr !15491
  %86 = or i64 %82, %85, !insn.addr !15492
  %87 = call i64 @DriverDebugPrint.467(i64 0, i64 %86), !insn.addr !15493
  br label %dec_label_pc_25261, !insn.addr !15494

dec_label_pc_25261:                               ; preds = %dec_label_pc_250b1, %dec_label_pc_2501e, %dec_label_pc_2522f, %dec_label_pc_25212, %dec_label_pc_251f5, %dec_label_pc_251dd, %dec_label_pc_251d3, %dec_label_pc_251b7, %dec_label_pc_2511e, %dec_label_pc_250fd, %dec_label_pc_250dc, %dec_label_pc_250c0, %dec_label_pc_25095, %dec_label_pc_25078
  ret i64 ptrtoint (i32** @global_var_14 to i64), !insn.addr !15495
}

define i8 @TC90522_GetQuality(i8* %pDeviceExtension, i64 %TunerDeviceID, i8* %pQuality) local_unnamed_addr {
dec_label_pc_2530c:
  %storemerge.reg2mem = alloca i8, !insn.addr !15496
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = call i64 @__decompiler_undefined_function_0()
  %2 = trunc i64 %1 to i32
  %3 = mul i32 %2, 2, !insn.addr !15496
  %4 = icmp ult i32 %3, %2, !insn.addr !15496
  %5 = icmp eq i32 %3, 0, !insn.addr !15496
  %6 = trunc i32 %3 to i8, !insn.addr !15496
  %7 = or i1 %4, %5, !insn.addr !15497
  store i8 %6, i8* %storemerge.reg2mem, !insn.addr !15497
  br i1 %7, label %dec_label_pc_25326, label %dec_label_pc_25310, !insn.addr !15497

dec_label_pc_25310:                               ; preds = %dec_label_pc_2530c
  %8 = trunc i64 %0 to i32, !insn.addr !15498
  %9 = add i32 %8, -500001, !insn.addr !15498
  %10 = icmp ult i32 %9, 500000, !insn.addr !15499
  %11 = select i1 %10, i8 trunc (i64 and (i64 add (i64 zext (i32 ptrtoint (i8* @global_var_5 to i32) to i64), i64 zext (i32 ptrtoint (i8* @global_var_5 to i32) to i64)), i64 4294967295) to i8), i8 ptrtoint (i8* @global_var_5 to i8), !insn.addr !15500
  store i8 %11, i8* %storemerge.reg2mem, !insn.addr !15500
  br label %dec_label_pc_25326, !insn.addr !15500

dec_label_pc_25326:                               ; preds = %dec_label_pc_25310, %dec_label_pc_2530c
  %storemerge.reload = load i8, i8* %storemerge.reg2mem
  ret i8 %storemerge.reload, !insn.addr !15501
}

define i8 @Japan4x4Tuner_TunerGetQuality(i64 %TunerDeviceID, i8* %pQuality, i8* %pDeviceExtension) local_unnamed_addr {
dec_label_pc_25335:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = trunc i64 %0 to i8
  ret i8 %1
}

define i64 @function_25336() local_unnamed_addr {
dec_label_pc_25336:
  %0 = call i64 @__decompiler_undefined_function_0()
  ret i64 %0, !insn.addr !15502
}

define i64 @TC90522_GetQuality.206(i64 %arg1, i64 %arg2, i64 %arg3) local_unnamed_addr {
dec_label_pc_2533c:
  %rax.0.reg2mem = alloca i64, !insn.addr !15503
  %0 = call i64 @mcount(), !insn.addr !15504
  %1 = icmp eq i64 %arg3, 0, !insn.addr !15505
  store i64 %0, i64* %rax.0.reg2mem, !insn.addr !15506
  br i1 %1, label %dec_label_pc_25359, label %dec_label_pc_25352, !insn.addr !15506

dec_label_pc_25352:                               ; preds = %dec_label_pc_2533c
  %2 = call i64 @TC90522DemodulatorGetQuality.325(i64 %arg1, i64 %arg2), !insn.addr !15507
  %3 = trunc i64 %2 to i8, !insn.addr !15508
  %4 = inttoptr i64 %arg3 to i8*, !insn.addr !15508
  store i8 %3, i8* %4, align 1, !insn.addr !15508
  store i64 %2, i64* %rax.0.reg2mem, !insn.addr !15508
  br label %dec_label_pc_25359, !insn.addr !15508

dec_label_pc_25359:                               ; preds = %dec_label_pc_25352, %dec_label_pc_2533c
  %rax.0.reload = load i64, i64* %rax.0.reg2mem
  ret i64 %rax.0.reload, !insn.addr !15508
}

define i8 @TC90522DemodulatorGetStrength(i8* %pDeviceExtension, i64 %TunerDeviceID) local_unnamed_addr {
dec_label_pc_2535c:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = trunc i64 %0 to i8
  %2 = mul i8 %1, 2, !insn.addr !15509
  %3 = inttoptr i64 %0 to i8*, !insn.addr !15509
  store i8 %2, i8* %3, align 1, !insn.addr !15509
  ret i8 %1, !insn.addr !15510
}

define i64 @Japan4x4Tuner_TunerGetQuality.259(i8 %arg1, i64 %arg2, i64 %arg3) local_unnamed_addr {
dec_label_pc_25365:
  %rax.0.reg2mem = alloca i64, !insn.addr !15511
  %0 = call i64 @mcount(), !insn.addr !15512
  %1 = icmp ult i8 %arg1, 64
  store i64 0, i64* %rax.0.reg2mem, !insn.addr !15513
  br i1 %1, label %dec_label_pc_2537c, label %dec_label_pc_2538a, !insn.addr !15513

dec_label_pc_2537c:                               ; preds = %dec_label_pc_25365
  %2 = sext i8 %arg1 to i64
  %3 = call i64 @TC90522_GetQuality.206(i64 %arg3, i64 %2, i64 %arg2), !insn.addr !15514
  store i64 %3, i64* %rax.0.reg2mem, !insn.addr !15514
  br label %dec_label_pc_2538a, !insn.addr !15514

dec_label_pc_2538a:                               ; preds = %dec_label_pc_25365, %dec_label_pc_2537c
  %rax.0.reload = load i64, i64* %rax.0.reg2mem
  ret i64 %rax.0.reload, !insn.addr !15515
}

define i64 @TC90522DemodulatorGetStrength.414(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_2538c:
  %stack_var_-57 = alloca i32, align 4
  %0 = call i64 @mcount(), !insn.addr !15516
  %1 = icmp ult i64 %arg2, 64
  br i1 %1, label %dec_label_pc_253bd, label %dec_label_pc_255a4, !insn.addr !15517

dec_label_pc_253bd:                               ; preds = %dec_label_pc_2538c
  %2 = trunc i64 %arg2 to i8, !insn.addr !15518
  %3 = and i8 %2, ptrtoint (i32* @global_var_1 to i8), !insn.addr !15518
  %4 = icmp eq i8 %3, 0, !insn.addr !15518
  %5 = icmp eq i1 %4, false, !insn.addr !15519
  br i1 %5, label %dec_label_pc_25500, label %dec_label_pc_253c7, !insn.addr !15519

dec_label_pc_253c7:                               ; preds = %dec_label_pc_253bd
  %6 = call i64 @TC90522DemodulatorOFDM_I2C_Write.381(i64 %arg1, i64 %arg2, i64* inttoptr (i64 186 to i64*), i64 0), !insn.addr !15520
  %7 = trunc i64 %6 to i8, !insn.addr !15521
  %8 = icmp eq i8 %7, ptrtoint (i32* @global_var_1 to i8), !insn.addr !15521
  %9 = icmp eq i1 %8, false, !insn.addr !15522
  br i1 %9, label %dec_label_pc_255a4, label %dec_label_pc_253de, !insn.addr !15522

dec_label_pc_253de:                               ; preds = %dec_label_pc_253c7
  %10 = bitcast i32* %stack_var_-57 to i64*, !insn.addr !15523
  %11 = call i64 @TC90522DemodulatorOFDM_I2C_Read.573(i64 %arg1, i64 %arg2, i64 176, i64* nonnull %10), !insn.addr !15523
  %12 = trunc i64 %11 to i8, !insn.addr !15524
  %13 = icmp eq i8 %12, ptrtoint (i32* @global_var_1 to i8), !insn.addr !15524
  %14 = icmp eq i1 %13, false, !insn.addr !15525
  br i1 %14, label %dec_label_pc_255a4, label %dec_label_pc_253fa, !insn.addr !15525

dec_label_pc_253fa:                               ; preds = %dec_label_pc_253de
  %15 = load i32, i32* %stack_var_-57, align 4, !insn.addr !15526
  %16 = trunc i32 %15 to i8
  %17 = and i8 %16, trunc (i32 and (i32 ptrtoint (i8* @global_var_f to i32), i32 255) to i8), !insn.addr !15527
  %18 = icmp ugt i8 %17, ptrtoint (i8** @global_var_7 to i8)
  br i1 %18, label %dec_label_pc_25409, label %dec_label_pc_255a4, !insn.addr !15528

dec_label_pc_25409:                               ; preds = %dec_label_pc_253fa
  %19 = call i64 @TC90522DemodulatorOFDM_I2C_Read.573(i64 %arg1, i64 %arg2, i64 157, i64* nonnull %10), !insn.addr !15529
  %20 = trunc i64 %19 to i8, !insn.addr !15530
  %21 = icmp eq i8 %20, ptrtoint (i32* @global_var_1 to i8), !insn.addr !15530
  %22 = icmp eq i1 %21, false, !insn.addr !15531
  br i1 %22, label %dec_label_pc_255a4, label %dec_label_pc_25425, !insn.addr !15531

dec_label_pc_25425:                               ; preds = %dec_label_pc_25409
  %23 = load i32, i32* %stack_var_-57, align 4, !insn.addr !15532
  %24 = call i64 @TC90522DemodulatorOFDM_I2C_Read.573(i64 %arg1, i64 %arg2, i64 158, i64* nonnull %10), !insn.addr !15533
  %25 = trunc i64 %24 to i8, !insn.addr !15534
  %26 = icmp eq i8 %25, ptrtoint (i32* @global_var_1 to i8), !insn.addr !15534
  %27 = icmp eq i1 %26, false, !insn.addr !15535
  br i1 %27, label %dec_label_pc_255a4, label %dec_label_pc_25446, !insn.addr !15535

dec_label_pc_25446:                               ; preds = %dec_label_pc_25425
  %28 = load i32, i32* %stack_var_-57, align 4, !insn.addr !15536
  %29 = call i64 @TC90522DemodulatorOFDM_I2C_Read.573(i64 %arg1, i64 %arg2, i64 159, i64* nonnull %10), !insn.addr !15537
  %30 = trunc i64 %29 to i8, !insn.addr !15538
  %31 = icmp eq i8 %30, ptrtoint (i32* @global_var_1 to i8), !insn.addr !15538
  %32 = icmp eq i1 %31, false, !insn.addr !15539
  br i1 %32, label %dec_label_pc_255a4, label %dec_label_pc_25467, !insn.addr !15539

dec_label_pc_25467:                               ; preds = %dec_label_pc_25446
  %33 = urem i32 %23, 256
  %34 = zext i32 %33 to i64, !insn.addr !15540
  %35 = shl i64 %34, ptrtoint (i8* @global_var_8 to i64), !insn.addr !15541
  %36 = urem i32 %28, 256
  %37 = zext i32 %36 to i64, !insn.addr !15542
  %38 = or i64 %35, %37, !insn.addr !15543
  %39 = shl i64 %38, ptrtoint (i8* @global_var_8 to i64), !insn.addr !15544
  %40 = load i32, i32* %stack_var_-57, align 4, !insn.addr !15545
  %41 = urem i32 %40, 256
  %42 = zext i32 %41 to i64, !insn.addr !15545
  %43 = or i64 %39, %42, !insn.addr !15546
  %44 = call i64 @DriverDebugPrint.467(i64 0, i64 %43), !insn.addr !15547
  %45 = call i64 @TC90522DemodulatorOFDM_I2C_Read.573(i64 %arg1, i64 %arg2, i64 166, i64* nonnull %10), !insn.addr !15548
  %46 = trunc i64 %45 to i8, !insn.addr !15549
  %47 = icmp eq i8 %46, ptrtoint (i32* @global_var_1 to i8), !insn.addr !15549
  %48 = icmp eq i1 %47, false, !insn.addr !15550
  br i1 %48, label %dec_label_pc_255a4, label %dec_label_pc_254b1, !insn.addr !15550

dec_label_pc_254b1:                               ; preds = %dec_label_pc_25467
  %49 = call i64 @TC90522DemodulatorOFDM_I2C_Read.573(i64 %arg1, i64 %arg2, i64 167, i64* nonnull %10), !insn.addr !15551
  ret i64 ptrtoint (i32** @global_var_14 to i64)

dec_label_pc_25500:                               ; preds = %dec_label_pc_253bd
  %50 = bitcast i32* %stack_var_-57 to i64*, !insn.addr !15552
  %51 = call i64 @TC90522DemodulatorPSK_I2C_Read.449(i64 %arg1, i64 %arg2, i64 195, i64* nonnull %50), !insn.addr !15552
  %52 = trunc i64 %51 to i8, !insn.addr !15553
  %53 = icmp eq i8 %52, ptrtoint (i32* @global_var_1 to i8), !insn.addr !15553
  %54 = icmp eq i1 %53, false, !insn.addr !15554
  br i1 %54, label %dec_label_pc_255a4, label %dec_label_pc_25516, !insn.addr !15554

dec_label_pc_25516:                               ; preds = %dec_label_pc_25500
  %55 = load i32, i32* %stack_var_-57, align 4, !insn.addr !15555
  %56 = trunc i32 %55 to i8, !insn.addr !15555
  %57 = and i8 %56, ptrtoint (i8* @global_var_10 to i8), !insn.addr !15555
  %58 = icmp eq i8 %57, 0, !insn.addr !15555
  %59 = icmp eq i1 %58, false, !insn.addr !15556
  br i1 %59, label %dec_label_pc_255a4, label %dec_label_pc_25520, !insn.addr !15556

dec_label_pc_25520:                               ; preds = %dec_label_pc_25516
  %60 = call i64 @TC90522DemodulatorPSK_I2C_Read.449(i64 %arg1, i64 %arg2, i64 240, i64* nonnull %50), !insn.addr !15557
  %61 = trunc i64 %60 to i8, !insn.addr !15558
  %62 = icmp eq i8 %61, ptrtoint (i32* @global_var_1 to i8), !insn.addr !15558
  %63 = icmp eq i1 %62, false, !insn.addr !15559
  br i1 %63, label %dec_label_pc_255a4, label %dec_label_pc_25538, !insn.addr !15559

dec_label_pc_25538:                               ; preds = %dec_label_pc_25520
  %64 = load i32, i32* %stack_var_-57, align 4, !insn.addr !15560
  %65 = call i64 @TC90522DemodulatorPSK_I2C_Read.449(i64 %arg1, i64 %arg2, i64 241, i64* nonnull %50), !insn.addr !15561
  %66 = trunc i64 %65 to i8, !insn.addr !15562
  %67 = icmp eq i8 %66, ptrtoint (i32* @global_var_1 to i8), !insn.addr !15562
  %68 = icmp eq i1 %67, false, !insn.addr !15563
  br i1 %68, label %dec_label_pc_255a4, label %dec_label_pc_25555, !insn.addr !15563

dec_label_pc_25555:                               ; preds = %dec_label_pc_25538
  %69 = load i32, i32* %stack_var_-57, align 4, !insn.addr !15564
  %70 = call i64 @TC90522DemodulatorPSK_I2C_Read.449(i64 %arg1, i64 %arg2, i64 242, i64* nonnull %50), !insn.addr !15565
  %71 = trunc i64 %70 to i8, !insn.addr !15566
  %72 = icmp eq i8 %71, ptrtoint (i32* @global_var_1 to i8), !insn.addr !15566
  %73 = icmp eq i1 %72, false, !insn.addr !15567
  br i1 %73, label %dec_label_pc_255a4, label %dec_label_pc_25572, !insn.addr !15567

dec_label_pc_25572:                               ; preds = %dec_label_pc_25555
  %74 = urem i32 %64, 256
  %75 = zext i32 %74 to i64, !insn.addr !15568
  %76 = shl i64 %75, ptrtoint (i8* @global_var_8 to i64), !insn.addr !15569
  %77 = urem i32 %69, 256
  %78 = zext i32 %77 to i64, !insn.addr !15570
  %79 = or i64 %76, %78, !insn.addr !15571
  %80 = shl i64 %79, ptrtoint (i8* @global_var_8 to i64), !insn.addr !15572
  %81 = load i32, i32* %stack_var_-57, align 4, !insn.addr !15573
  %82 = urem i32 %81, 256
  %83 = zext i32 %82 to i64, !insn.addr !15573
  %84 = or i64 %80, %83, !insn.addr !15574
  %85 = call i64 @DriverDebugPrint.467(i64 0, i64 %84), !insn.addr !15575
  br label %dec_label_pc_255a4, !insn.addr !15576

dec_label_pc_255a4:                               ; preds = %dec_label_pc_253fa, %dec_label_pc_2538c, %dec_label_pc_25572, %dec_label_pc_25555, %dec_label_pc_25538, %dec_label_pc_25520, %dec_label_pc_25516, %dec_label_pc_25500, %dec_label_pc_25467, %dec_label_pc_25446, %dec_label_pc_25425, %dec_label_pc_25409, %dec_label_pc_253de, %dec_label_pc_253c7
  ret i64 ptrtoint (i32** @global_var_14 to i64), !insn.addr !15577
}

define i8 @TC90522_GetStrength(i8* %pDeviceExtension, i64 %TunerDeviceID, i8* %pStrength) local_unnamed_addr {
dec_label_pc_2564f:
  %storemerge.reg2mem = alloca i8, !insn.addr !15578
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = call i64 @__decompiler_undefined_function_0()
  %2 = trunc i64 %1 to i32
  %3 = mul i32 %2, 2, !insn.addr !15578
  %4 = icmp ult i32 %3, %2, !insn.addr !15578
  %5 = icmp eq i32 %3, 0, !insn.addr !15578
  %6 = trunc i32 %3 to i8, !insn.addr !15578
  %7 = or i1 %4, %5, !insn.addr !15579
  store i8 %6, i8* %storemerge.reg2mem, !insn.addr !15579
  br i1 %7, label %dec_label_pc_25669, label %dec_label_pc_25653, !insn.addr !15579

dec_label_pc_25653:                               ; preds = %dec_label_pc_2564f
  %8 = trunc i64 %0 to i32, !insn.addr !15580
  %9 = add i32 %8, -500001, !insn.addr !15580
  %10 = icmp ult i32 %9, 500000, !insn.addr !15581
  %11 = select i1 %10, i8 trunc (i64 and (i64 add (i64 zext (i32 ptrtoint (i8* @global_var_5 to i32) to i64), i64 zext (i32 ptrtoint (i8* @global_var_5 to i32) to i64)), i64 4294967295) to i8), i8 ptrtoint (i8* @global_var_5 to i8), !insn.addr !15582
  store i8 %11, i8* %storemerge.reg2mem, !insn.addr !15582
  br label %dec_label_pc_25669, !insn.addr !15582

dec_label_pc_25669:                               ; preds = %dec_label_pc_25653, %dec_label_pc_2564f
  %storemerge.reload = load i8, i8* %storemerge.reg2mem
  ret i8 %storemerge.reload, !insn.addr !15583
}

define i8 @Japan4x4Tuner_TunerGetStrength(i64 %TunerDeviceID, i8* %pStrength, i8* %pDeviceExtension) local_unnamed_addr {
dec_label_pc_25678:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = trunc i64 %0 to i8
  ret i8 %1
}

define i64 @function_25679() local_unnamed_addr {
dec_label_pc_25679:
  %0 = call i64 @__decompiler_undefined_function_0()
  ret i64 %0, !insn.addr !15584
}

define i64 @TC90522_GetStrength.384(i64 %arg1, i64 %arg2, i64 %arg3) local_unnamed_addr {
dec_label_pc_2567f:
  %rax.0.reg2mem = alloca i64, !insn.addr !15585
  %0 = call i64 @mcount(), !insn.addr !15586
  %1 = icmp eq i64 %arg3, 0, !insn.addr !15587
  store i64 %0, i64* %rax.0.reg2mem, !insn.addr !15588
  br i1 %1, label %dec_label_pc_2569c, label %dec_label_pc_25695, !insn.addr !15588

dec_label_pc_25695:                               ; preds = %dec_label_pc_2567f
  %2 = call i64 @TC90522DemodulatorGetStrength.414(i64 %arg1, i64 %arg2), !insn.addr !15589
  %3 = trunc i64 %2 to i8, !insn.addr !15590
  %4 = inttoptr i64 %arg3 to i8*, !insn.addr !15590
  store i8 %3, i8* %4, align 1, !insn.addr !15590
  store i64 %2, i64* %rax.0.reg2mem, !insn.addr !15590
  br label %dec_label_pc_2569c, !insn.addr !15590

dec_label_pc_2569c:                               ; preds = %dec_label_pc_25695, %dec_label_pc_2567f
  %rax.0.reload = load i64, i64* %rax.0.reg2mem
  ret i64 %rax.0.reload, !insn.addr !15590
}

define i8 @TC90522_CheckLock(i8* %pDeviceExtension, i64 %TunerDeviceID, i8* %pLock) local_unnamed_addr {
dec_label_pc_2569f:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = trunc i64 %0 to i8
  %2 = mul i8 %1, 2, !insn.addr !15591
  %3 = inttoptr i64 %0 to i8*, !insn.addr !15591
  store i8 %2, i8* %3, align 1, !insn.addr !15591
  ret i8 %1, !insn.addr !15592
}

define i64 @Japan4x4Tuner_TunerGetStrength.309(i8 %arg1, i64 %arg2, i64 %arg3) local_unnamed_addr {
dec_label_pc_256a8:
  %rax.0.reg2mem = alloca i64, !insn.addr !15593
  %0 = call i64 @mcount(), !insn.addr !15594
  %1 = icmp ult i8 %arg1, 64
  store i64 0, i64* %rax.0.reg2mem, !insn.addr !15595
  br i1 %1, label %dec_label_pc_256bf, label %dec_label_pc_256cd, !insn.addr !15595

dec_label_pc_256bf:                               ; preds = %dec_label_pc_256a8
  %2 = sext i8 %arg1 to i64
  %3 = call i64 @TC90522_GetStrength.384(i64 %arg3, i64 %2, i64 %arg2), !insn.addr !15596
  store i64 %3, i64* %rax.0.reg2mem, !insn.addr !15596
  br label %dec_label_pc_256cd, !insn.addr !15596

dec_label_pc_256cd:                               ; preds = %dec_label_pc_256a8, %dec_label_pc_256bf
  %rax.0.reload = load i64, i64* %rax.0.reg2mem
  ret i64 %rax.0.reload, !insn.addr !15597
}

define i64 @TC90522_CheckLock.379(i64 %arg1, i64 %arg2, i64 %arg3) local_unnamed_addr {
dec_label_pc_256cf:
  %rax.0.reg2mem = alloca i64, !insn.addr !15598
  %stack_var_-41 = alloca i32, align 4
  %0 = call i64 @mcount(), !insn.addr !15599
  %1 = call i64 @DriverDebugMessage.510(i64 0), !insn.addr !15600
  %2 = call i64 @DriverDebugPrint.467(i64 0, i64 %arg2), !insn.addr !15601
  %3 = inttoptr i64 %arg3 to i8*, !insn.addr !15602
  store i8 0, i8* %3, align 1, !insn.addr !15602
  %4 = icmp ult i64 %arg2, 64
  store i64 %2, i64* %rax.0.reg2mem, !insn.addr !15603
  br i1 %4, label %dec_label_pc_25731, label %dec_label_pc_257ee, !insn.addr !15603

dec_label_pc_25731:                               ; preds = %dec_label_pc_256cf
  %5 = trunc i64 %arg2 to i8, !insn.addr !15604
  %6 = and i8 %5, ptrtoint (i32* @global_var_1 to i8), !insn.addr !15604
  %7 = icmp eq i8 %6, 0, !insn.addr !15604
  %8 = icmp eq i1 %7, false, !insn.addr !15605
  %9 = bitcast i32* %stack_var_-41 to i64*
  br i1 %8, label %dec_label_pc_257b6, label %dec_label_pc_25737, !insn.addr !15605

dec_label_pc_25737:                               ; preds = %dec_label_pc_25731
  %10 = call i64 @TC90522DemodulatorOFDM_I2C_Read.573(i64 %arg1, i64 %arg2, i64 128, i64* nonnull %9), !insn.addr !15606
  %11 = trunc i64 %10 to i8, !insn.addr !15607
  %12 = icmp eq i8 %11, 0, !insn.addr !15607
  store i64 %10, i64* %rax.0.reg2mem, !insn.addr !15608
  br i1 %12, label %dec_label_pc_257ee, label %dec_label_pc_25753, !insn.addr !15608

dec_label_pc_25753:                               ; preds = %dec_label_pc_25737
  %13 = load i32, i32* %stack_var_-41, align 4, !insn.addr !15609
  %14 = urem i32 %13, 256
  %15 = zext i32 %14 to i64, !insn.addr !15609
  %16 = call i64 @DriverDebugPrint.467(i64 0, i64 %15), !insn.addr !15610
  %17 = call i64 @TC90522DemodulatorOFDM_I2C_Read.573(i64 %arg1, i64 %arg2, i64 176, i64* nonnull %9), !insn.addr !15611
  %18 = trunc i64 %17 to i8, !insn.addr !15612
  %19 = icmp eq i8 %18, 0, !insn.addr !15612
  store i64 %17, i64* %rax.0.reg2mem, !insn.addr !15613
  br i1 %19, label %dec_label_pc_257ee, label %dec_label_pc_2578a, !insn.addr !15613

dec_label_pc_2578a:                               ; preds = %dec_label_pc_25753
  %20 = load i32, i32* %stack_var_-41, align 4, !insn.addr !15614
  %21 = urem i32 %20, 256
  %22 = zext i32 %21 to i64, !insn.addr !15614
  %23 = call i64 @DriverDebugPrint.467(i64 0, i64 %22), !insn.addr !15615
  %24 = load i32, i32* %stack_var_-41, align 4, !insn.addr !15616
  %25 = and i32 %24, and (i32 ptrtoint (i8* @global_var_f to i32), i32 255), !insn.addr !15617
  %26 = zext i32 %25 to i64, !insn.addr !15617
  store i8 ptrtoint (i32* @global_var_1 to i8), i8* %3, align 1, !insn.addr !15618
  ret i64 %26, !insn.addr !15619

dec_label_pc_257b6:                               ; preds = %dec_label_pc_25731
  %27 = call i64 @TC90522DemodulatorPSK_I2C_Read.449(i64 %arg1, i64 %arg2, i64 195, i64* nonnull %9), !insn.addr !15620
  %28 = trunc i64 %27 to i8, !insn.addr !15621
  %29 = icmp eq i8 %28, ptrtoint (i32* @global_var_1 to i8), !insn.addr !15621
  %30 = icmp eq i1 %29, false, !insn.addr !15622
  store i64 %27, i64* %rax.0.reg2mem, !insn.addr !15622
  br i1 %30, label %dec_label_pc_257ee, label %dec_label_pc_257ce, !insn.addr !15622

dec_label_pc_257ce:                               ; preds = %dec_label_pc_257b6
  %31 = call i64 @TC90522DemodulatorGetQuality.325(i64 %arg1, i64 %arg2), !insn.addr !15623
  store i8 ptrtoint (i32* @global_var_1 to i8), i8* %3, align 1, !insn.addr !15624
  ret i64 %31, !insn.addr !15625

dec_label_pc_257ee:                               ; preds = %dec_label_pc_256cf, %dec_label_pc_257b6, %dec_label_pc_25753, %dec_label_pc_25737
  %rax.0.reload = load i64, i64* %rax.0.reg2mem
  ret i64 %rax.0.reload, !insn.addr !15626
}

define i8 @Japan4x4Tuner_TunerCheckLockStatus(i64 %TunerDeviceID, i8* %pLock, i8* %pDeviceExtension) local_unnamed_addr {
dec_label_pc_257f5:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = trunc i64 %0 to i8
  ret i8 %1
}

define i8 @NMI131_WriteRegister(i8* %pUserData, i8 %i2cAdr, i8* %wb, i32 %sz) local_unnamed_addr {
dec_label_pc_2581c:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = trunc i64 %0 to i8, !insn.addr !15627
  ret i8 %1, !insn.addr !15627
}

define i64 @Japan4x4Tuner_TunerCheckLockStatus.342(i8 %arg1, i64 %arg2, i64 %arg3) local_unnamed_addr {
dec_label_pc_25825:
  %rax.0.reg2mem = alloca i64, !insn.addr !15628
  %0 = call i64 @mcount(), !insn.addr !15629
  %1 = icmp ult i8 %arg1, 64
  store i64 0, i64* %rax.0.reg2mem, !insn.addr !15630
  br i1 %1, label %dec_label_pc_2583c, label %dec_label_pc_2584a, !insn.addr !15630

dec_label_pc_2583c:                               ; preds = %dec_label_pc_25825
  %2 = sext i8 %arg1 to i64
  %3 = call i64 @TC90522_CheckLock.379(i64 %arg3, i64 %2, i64 %arg2), !insn.addr !15631
  store i64 %3, i64* %rax.0.reg2mem, !insn.addr !15631
  br label %dec_label_pc_2584a, !insn.addr !15631

dec_label_pc_2584a:                               ; preds = %dec_label_pc_25825, %dec_label_pc_2583c
  %rax.0.reload = load i64, i64* %rax.0.reg2mem
  ret i64 %rax.0.reload, !insn.addr !15632
}

define i64 @NMI131_WriteRegister.213(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4) local_unnamed_addr {
dec_label_pc_2584c:
  %0 = call i64 @mcount(), !insn.addr !15633
  %1 = add i64 %arg4, zext (i32 ptrtoint (i32* @global_var_2 to i32) to i64), !insn.addr !15634
  %2 = and i64 %1, 4294967295, !insn.addr !15634
  %3 = call i64 @__kmalloc(i64 %2, i64* bitcast (i32** @global_var_20 to i64*), i64 %arg3), !insn.addr !15635
  %4 = inttoptr i64 %3 to i8*, !insn.addr !15636
  store i8 -2, i8* %4, align 1, !insn.addr !15636
  %5 = add i64 %3, ptrtoint (i32* @global_var_1 to i64), !insn.addr !15637
  %6 = inttoptr i64 %5 to i8*, !insn.addr !15637
  store i8 -50, i8* %6, align 1, !insn.addr !15637
  %7 = add i64 %3, ptrtoint (i32* @global_var_2 to i64), !insn.addr !15638
  %8 = and i64 %arg4, 4294967295, !insn.addr !15639
  %9 = call i64 @memcpy(i64 %7, i64 %arg3, i64 %8, i64 %arg4), !insn.addr !15640
  %10 = add i64 %arg4, zext (i16 ptrtoint (i32* @global_var_2 to i16) to i64), !insn.addr !15641
  %11 = urem i64 %10, 65536, !insn.addr !15642
  %12 = mul i64 %arg2, zext (i32 trunc (i64 add (i64 ptrtoint (i32* @global_var_1 to i64), i64 1) to i32) to i64), !insn.addr !15643
  %13 = and i64 %12, zext (i32 ptrtoint (i16** @global_var_e to i32) to i64), !insn.addr !15644
  %14 = add nuw nsw i64 %13, zext (i32 ptrtoint (i32** @global_var_20 to i32) to i64), !insn.addr !15645
  %15 = and i64 %14, 4294967288, !insn.addr !15645
  %16 = call i64 @I2C_PortingLayer_Write.296(i64 %arg1, i64 %15, i64 %3, i64 %11), !insn.addr !15646
  ret i64 %16, !insn.addr !15647
}

define void @NMI131_Delay(i32 %delay_ms) local_unnamed_addr {
dec_label_pc_258d4:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = call i64 @__decompiler_undefined_function_0()
  %2 = sext i32 %delay_ms to i64
  %3 = trunc i64 %1 to i8
  %4 = mul i8 %3, 2, !insn.addr !15648
  %5 = inttoptr i64 %1 to i8*, !insn.addr !15648
  store i8 %4, i8* %5, align 1, !insn.addr !15648
  %6 = call i64 @DriverDebugMessage.510(i64 %2), !insn.addr !15649
  %7 = call i64 @kfree(i64 %0), !insn.addr !15650
  ret void, !insn.addr !15650
}

define void @TC90522DemodulatorDelayMilliseconds(i64 %nMinDelayTime) local_unnamed_addr {
dec_label_pc_258e4:
  ret void
}

define i8 @TC90522_ChannelSearch(i8* %pDeviceExtension, i64 %TunerDeviceID) local_unnamed_addr {
dec_label_pc_258f4:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = trunc i64 %0 to i8, !insn.addr !15651
  ret i8 %1, !insn.addr !15651
}

define i64 @NMI131_Delay.142() local_unnamed_addr {
dec_label_pc_25904:
  %0 = call i64 @mcount(), !insn.addr !15652
  %1 = call i64 @msleep_interruptible(), !insn.addr !15653
  ret i64 %1, !insn.addr !15654
}

define i64 @TC90522DemodulatorDelayMilliseconds.413(i64 %arg1) local_unnamed_addr {
dec_label_pc_25914:
  %0 = call i64 @mcount(), !insn.addr !15655
  %1 = call i64 @msleep_interruptible(), !insn.addr !15656
  ret i64 %1, !insn.addr !15657
}

define i64 @TC90522_ChannelSearch.199(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_25924:
  %0 = call i64 @mcount(), !insn.addr !15658
  ret i64 %0, !insn.addr !15659
}

define i64 @function_25944(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_25944:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = call i64 @__decompiler_undefined_function_0()
  %2 = trunc i64 %arg2 to i8, !insn.addr !15660
  %3 = and i8 %2, ptrtoint (i32* @global_var_1 to i8), !insn.addr !15660
  %4 = icmp eq i8 %3, 0, !insn.addr !15660
  %5 = icmp eq i1 %4, false, !insn.addr !15661
  %6 = call i64 @TC90522DemodulatorDelayMilliseconds.413(i64 250)
  br i1 %5, label %dec_label_pc_259c8, label %dec_label_pc_25950, !insn.addr !15661

dec_label_pc_25950:                               ; preds = %dec_label_pc_25944
  %7 = call i64 @TC90522DemodulatorOFDM_I2C_Write.381(i64 %0, i64 %1, i64* nonnull @global_var_23, i64 76), !insn.addr !15662
  %8 = call i64 @TC90522DemodulatorOFDM_I2C_Write.381(i64 %0, i64 %1, i64* bitcast (i32* @global_var_1 to i64*), i64 80), !insn.addr !15663
  %9 = call i64 @TC90522DemodulatorOFDM_I2C_Write.381(i64 %0, i64 %1, i64* inttoptr (i64 113 to i64*), i64 ptrtoint (i32* @global_var_1 to i64)), !insn.addr !15664
  %10 = call i64 @TC90522DemodulatorOFDM_I2C_Write.381(i64 %0, i64 %1, i64* inttoptr (i64 114 to i64*), i64 36), !insn.addr !15665
  ret i64 %10, !insn.addr !15666

dec_label_pc_259c8:                               ; preds = %dec_label_pc_25944
  %11 = call i64 @TC90522DemodulatorPSK_I2C_Write.485(i64 %0, i64 %1, i64 ptrtoint (i8* @global_var_a to i64), i64 255), !insn.addr !15667
  %12 = call i64 @TC90522DemodulatorPSK_I2C_Write.485(i64 %0, i64 %1, i64 ptrtoint (i8* @global_var_10 to i64), i64 178), !insn.addr !15668
  ret i64 %12, !insn.addr !15669
}

define i8 @Japan4x4Tuner_TunerSetFrequency(i64 %TunerDeviceID, i64 %RF, i8* %pDeviceExtension) local_unnamed_addr {
dec_label_pc_25a14:
  %storemerge.reg2mem = alloca i8, !insn.addr !15670
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = call i64 @__decompiler_undefined_function_0()
  %2 = call i64 @__decompiler_undefined_function_0()
  %3 = ptrtoint i8* %pDeviceExtension to i64
  %4 = call i64 @TC90522DemodulatorPSK_I2C_Write.485(i64 %TunerDeviceID, i64 %RF, i64 %3, i64 %2), !insn.addr !15670
  %5 = trunc i64 %4 to i8, !insn.addr !15671
  %6 = icmp eq i8 %5, ptrtoint (i32* @global_var_1 to i8), !insn.addr !15671
  %7 = icmp eq i1 %6, false, !insn.addr !15672
  store i8 0, i8* %storemerge.reg2mem, !insn.addr !15672
  br i1 %7, label %dec_label_pc_25a39, label %dec_label_pc_25a1d, !insn.addr !15672

dec_label_pc_25a1d:                               ; preds = %dec_label_pc_25a14
  %8 = call i64 @TC90522DemodulatorPSK_I2C_Write.485(i64 %0, i64 %1, i64 ptrtoint (i8** @global_var_3 to i64), i64 ptrtoint (i32* @global_var_1 to i64)), !insn.addr !15673
  %phitmp = trunc i64 %8 to i8
  store i8 %phitmp, i8* %storemerge.reg2mem, !insn.addr !15674
  br label %dec_label_pc_25a39, !insn.addr !15674

dec_label_pc_25a39:                               ; preds = %dec_label_pc_25a14, %dec_label_pc_25a1d
  %storemerge.reload = load i8, i8* %storemerge.reg2mem
  ret i8 %storemerge.reload, !insn.addr !15675
}

define i64 @Japan4x4Tuner_TunerSetFrequency.252(i8 %arg1, i64 %arg2, i64 %arg3) local_unnamed_addr {
dec_label_pc_25a44:
  %0 = sext i8 %arg1 to i64
  %1 = call i64 @mcount(), !insn.addr !15676
  %2 = call i64 @TC90522_ResetInternal.546(i64 %arg3, i64 %0), !insn.addr !15677
  ret i64 %2, !insn.addr !15678
}

define void @nmi_common_init(i64 %pPrivate, i64 %inp, i64 %ptv) local_unnamed_addr {
dec_label_pc_25a90:
  %0 = call i64 @function_eee5a94(), !insn.addr !15679
  ret void, !insn.addr !15679
}

define i64 @nmi_common_init.516(i64 %arg1, i64 %arg2, i64 %arg3) local_unnamed_addr {
dec_label_pc_25b19:
  %.reg2mem1 = alloca i64, !insn.addr !15680
  %.reg2mem = alloca i64, !insn.addr !15680
  %rdi = alloca i64, align 8
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = call i1 @__decompiler_undefined_function_2()
  %2 = call i64 @mcount(), !insn.addr !15681
  %3 = urem i64 %0, 256, !insn.addr !15682
  %4 = mul nuw nsw i64 %3, 184, !insn.addr !15682
  %5 = inttoptr i64 %4 to i8*, !insn.addr !15683
  call void @__asm_rep_stosq_memset(i8* %5, i64 0, i64 zext (i32 lshr (i32 184, i32 ptrtoint (i8** @global_var_3 to i32)) to i64)), !insn.addr !15683
  %6 = select i1 %1, i64 mul (i64 zext (i32 lshr (i32 184, i32 ptrtoint (i8** @global_var_3 to i32)) to i64), i64 -8), i64 mul (i64 ptrtoint (i8* @global_var_8 to i64), i64 zext (i32 lshr (i32 184, i32 ptrtoint (i8** @global_var_3 to i32)) to i64)), !insn.addr !15683
  %7 = add i64 %6, %4, !insn.addr !15683
  store i64 %7, i64* %rdi, align 8, !insn.addr !15683
  store i64 %7, i64* %.reg2mem, !insn.addr !15684
  br i1 icmp eq (i8 and (i8 ptrtoint (i16* @global_var_4 to i8), i8 -72), i8 0), label %dec_label_pc_25b30, label %dec_label_pc_25b2a, !insn.addr !15684

dec_label_pc_25b2a:                               ; preds = %dec_label_pc_25b19
  %8 = inttoptr i64 %7 to i32*, !insn.addr !15685
  store i32 0, i32* %8, align 4, !insn.addr !15685
  %9 = load i64, i64* %rdi, align 8, !insn.addr !15686
  %10 = add i64 %9, ptrtoint (i16* @global_var_4 to i64), !insn.addr !15686
  store i64 %10, i64* %rdi, align 8, !insn.addr !15686
  store i64 %10, i64* %.reg2mem, !insn.addr !15686
  br label %dec_label_pc_25b30, !insn.addr !15686

dec_label_pc_25b30:                               ; preds = %dec_label_pc_25b2a, %dec_label_pc_25b19
  %.reload = load i64, i64* %.reg2mem, !insn.addr !15687
  store i64 %.reload, i64* %.reg2mem1, !insn.addr !15688
  br i1 icmp eq (i8 and (i8 ptrtoint (i32* @global_var_2 to i8), i8 -72), i8 0), label %dec_label_pc_25b3d, label %dec_label_pc_25b36, !insn.addr !15688

dec_label_pc_25b36:                               ; preds = %dec_label_pc_25b30
  %11 = inttoptr i64 %.reload to i16*, !insn.addr !15687
  store i16 0, i16* %11, align 2, !insn.addr !15687
  %12 = load i64, i64* %rdi, align 8, !insn.addr !15689
  %13 = add i64 %12, ptrtoint (i32* @global_var_2 to i64), !insn.addr !15689
  store i64 %13, i64* %rdi, align 8, !insn.addr !15689
  store i64 %13, i64* %.reg2mem1, !insn.addr !15689
  br label %dec_label_pc_25b3d, !insn.addr !15689

dec_label_pc_25b3d:                               ; preds = %dec_label_pc_25b36, %dec_label_pc_25b30
  br i1 icmp eq (i8 and (i8 ptrtoint (i32* @global_var_1 to i8), i8 -72), i8 0), label %dec_label_pc_25b45, label %dec_label_pc_25b43, !insn.addr !15690

dec_label_pc_25b43:                               ; preds = %dec_label_pc_25b3d
  %.reload2 = load i64, i64* %.reg2mem1, !insn.addr !15691
  %14 = inttoptr i64 %.reload2 to i8*, !insn.addr !15691
  store i8 0, i8* %14, align 1, !insn.addr !15691
  br label %dec_label_pc_25b45, !insn.addr !15691

dec_label_pc_25b45:                               ; preds = %dec_label_pc_25b43, %dec_label_pc_25b3d
  %15 = icmp eq i64 %arg2, 0, !insn.addr !15692
  br i1 %15, label %dec_label_pc_25bdc, label %dec_label_pc_25b4e, !insn.addr !15693

dec_label_pc_25b4e:                               ; preds = %dec_label_pc_25b45
  %16 = bitcast i64* %rdi to i8*
  %17 = load i8, i8* %16, align 8, !insn.addr !15694
  %18 = zext i8 %17 to i64, !insn.addr !15695
  %19 = mul nuw nsw i64 %18, 184, !insn.addr !15695
  %20 = inttoptr i64 %19 to i64*, !insn.addr !15696
  store i64 %arg2, i64* %20, align 8, !insn.addr !15696
  %21 = add i64 %arg2, ptrtoint (i8* @global_var_8 to i64), !insn.addr !15697
  %22 = inttoptr i64 %21 to i64*, !insn.addr !15697
  %23 = load i64, i64* %22, align 8, !insn.addr !15697
  %24 = add nuw nsw i64 %19, 8, !insn.addr !15698
  %25 = inttoptr i64 %24 to i64*, !insn.addr !15698
  store i64 %23, i64* %25, align 8, !insn.addr !15698
  %26 = add i64 %arg2, ptrtoint (i8* @global_var_10 to i64), !insn.addr !15699
  %27 = inttoptr i64 %26 to i64*, !insn.addr !15699
  %28 = load i64, i64* %27, align 8, !insn.addr !15699
  %29 = add nuw nsw i64 %19, 16, !insn.addr !15700
  %30 = inttoptr i64 %29 to i64*, !insn.addr !15700
  store i64 %28, i64* %30, align 8, !insn.addr !15700
  %31 = add i64 %arg2, ptrtoint (i32** @global_var_18 to i64), !insn.addr !15701
  %32 = inttoptr i64 %31 to i64*, !insn.addr !15701
  %33 = load i64, i64* %32, align 8, !insn.addr !15701
  %34 = add nuw nsw i64 %19, 24, !insn.addr !15702
  %35 = inttoptr i64 %34 to i64*, !insn.addr !15702
  store i64 %33, i64* %35, align 8, !insn.addr !15702
  %36 = add i64 %arg2, ptrtoint (i32** @global_var_20 to i64), !insn.addr !15703
  %37 = inttoptr i64 %36 to i64*, !insn.addr !15703
  %38 = load i64, i64* %37, align 8, !insn.addr !15703
  %39 = add nuw nsw i64 %19, 32, !insn.addr !15704
  %40 = inttoptr i64 %39 to i64*, !insn.addr !15704
  store i64 %38, i64* %40, align 8, !insn.addr !15704
  %41 = add i64 %arg2, 40, !insn.addr !15705
  %42 = inttoptr i64 %41 to i64*, !insn.addr !15705
  %43 = load i64, i64* %42, align 8, !insn.addr !15705
  %44 = add nuw nsw i64 %19, 40, !insn.addr !15706
  %45 = inttoptr i64 %44 to i64*, !insn.addr !15706
  store i64 %43, i64* %45, align 8, !insn.addr !15706
  %46 = add i64 %arg2, 48, !insn.addr !15707
  %47 = inttoptr i64 %46 to i64*, !insn.addr !15707
  %48 = load i64, i64* %47, align 8, !insn.addr !15707
  %49 = add nuw nsw i64 %19, 48, !insn.addr !15708
  %50 = inttoptr i64 %49 to i64*, !insn.addr !15708
  store i64 %48, i64* %50, align 8, !insn.addr !15708
  %51 = add i64 %arg2, 56, !insn.addr !15709
  %52 = inttoptr i64 %51 to i64*, !insn.addr !15709
  %53 = load i64, i64* %52, align 8, !insn.addr !15709
  %54 = add nuw nsw i64 %19, 56, !insn.addr !15710
  %55 = inttoptr i64 %54 to i64*, !insn.addr !15710
  store i64 %53, i64* %55, align 8, !insn.addr !15710
  %56 = add i64 %arg2, 64, !insn.addr !15711
  %57 = inttoptr i64 %56 to i64*, !insn.addr !15711
  %58 = load i64, i64* %57, align 8, !insn.addr !15711
  %59 = add nuw nsw i64 %19, 64, !insn.addr !15712
  %60 = inttoptr i64 %59 to i64*, !insn.addr !15712
  store i64 %58, i64* %60, align 8, !insn.addr !15712
  %61 = add i64 %arg2, 72, !insn.addr !15713
  %62 = inttoptr i64 %61 to i64*, !insn.addr !15713
  %63 = load i64, i64* %62, align 8, !insn.addr !15713
  %64 = add nuw nsw i64 %19, 72, !insn.addr !15714
  %65 = inttoptr i64 %64 to i64*, !insn.addr !15714
  store i64 %63, i64* %65, align 8, !insn.addr !15714
  %66 = add i64 %arg2, 80, !insn.addr !15715
  %67 = inttoptr i64 %66 to i64*, !insn.addr !15715
  %68 = load i64, i64* %67, align 8, !insn.addr !15715
  %69 = add nuw nsw i64 %19, 80, !insn.addr !15716
  %70 = inttoptr i64 %69 to i64*, !insn.addr !15716
  store i64 %68, i64* %70, align 8, !insn.addr !15716
  %71 = add i64 %arg2, 88, !insn.addr !15717
  %72 = inttoptr i64 %71 to i64*, !insn.addr !15717
  %73 = load i64, i64* %72, align 8, !insn.addr !15717
  %74 = add nuw nsw i64 %19, 88, !insn.addr !15718
  %75 = inttoptr i64 %74 to i64*, !insn.addr !15718
  store i64 %73, i64* %75, align 8, !insn.addr !15718
  %76 = add i64 %arg2, 96, !insn.addr !15719
  %77 = inttoptr i64 %76 to i64*, !insn.addr !15719
  %78 = load i64, i64* %77, align 8, !insn.addr !15719
  %79 = add nuw nsw i64 %19, 96, !insn.addr !15720
  %80 = inttoptr i64 %79 to i64*, !insn.addr !15720
  store i64 %78, i64* %80, align 8, !insn.addr !15720
  %81 = add i64 %arg2, 104, !insn.addr !15721
  %82 = inttoptr i64 %81 to i64*, !insn.addr !15721
  %83 = load i64, i64* %82, align 8, !insn.addr !15721
  %84 = add nuw nsw i64 %19, 104, !insn.addr !15722
  %85 = inttoptr i64 %84 to i64*, !insn.addr !15722
  store i64 %83, i64* %85, align 8, !insn.addr !15722
  br label %dec_label_pc_25bdc, !insn.addr !15722

dec_label_pc_25bdc:                               ; preds = %dec_label_pc_25b4e, %dec_label_pc_25b45
  %86 = inttoptr i64 %arg3 to i64*, !insn.addr !15723
  store i64 0, i64* %86, align 8, !insn.addr !15723
  %87 = add i64 %arg3, ptrtoint (i8* @global_var_8 to i64), !insn.addr !15724
  %88 = inttoptr i64 %87 to i64*, !insn.addr !15724
  store i64 0, i64* %88, align 8, !insn.addr !15724
  %89 = add i64 %arg3, ptrtoint (i8* @global_var_10 to i64), !insn.addr !15725
  %90 = inttoptr i64 %89 to i64*, !insn.addr !15725
  store i64 0, i64* %90, align 8, !insn.addr !15725
  %91 = add i64 %arg3, ptrtoint (i32** @global_var_18 to i64), !insn.addr !15726
  %92 = inttoptr i64 %91 to i64*, !insn.addr !15726
  store i64 0, i64* %92, align 8, !insn.addr !15726
  %93 = add i64 %arg3, ptrtoint (i32** @global_var_20 to i64), !insn.addr !15727
  %94 = inttoptr i64 %93 to i64*, !insn.addr !15727
  store i64 0, i64* %94, align 8, !insn.addr !15727
  %95 = add i64 %arg3, 40, !insn.addr !15728
  %96 = inttoptr i64 %95 to i64*, !insn.addr !15728
  store i64 0, i64* %96, align 8, !insn.addr !15728
  %97 = add i64 %arg3, 48, !insn.addr !15729
  %98 = inttoptr i64 %97 to i64*, !insn.addr !15729
  store i64 0, i64* %98, align 8, !insn.addr !15729
  %99 = add i64 %arg3, 56, !insn.addr !15730
  %100 = inttoptr i64 %99 to i64*, !insn.addr !15730
  store i64 0, i64* %100, align 8, !insn.addr !15730
  %101 = add i64 %arg3, 64, !insn.addr !15731
  %102 = inttoptr i64 %101 to i64*, !insn.addr !15731
  store i64 0, i64* %102, align 8, !insn.addr !15731
  %103 = add i64 %arg3, 72, !insn.addr !15732
  %104 = inttoptr i64 %103 to i64*, !insn.addr !15732
  store i64 0, i64* %104, align 8, !insn.addr !15732
  %105 = add i64 %arg3, 80, !insn.addr !15733
  %106 = inttoptr i64 %105 to i64*, !insn.addr !15733
  store i64 0, i64* %106, align 8, !insn.addr !15733
  %107 = add i64 %arg3, 88, !insn.addr !15734
  %108 = inttoptr i64 %107 to i64*, !insn.addr !15734
  store i64 0, i64* %108, align 8, !insn.addr !15734
  %109 = add i64 %arg3, 96, !insn.addr !15735
  %110 = inttoptr i64 %109 to i64*, !insn.addr !15735
  store i64 0, i64* %110, align 8, !insn.addr !15735
  %111 = add i64 %arg3, 104, !insn.addr !15736
  %112 = inttoptr i64 %111 to i64*, !insn.addr !15736
  store i64 0, i64* %112, align 8, !insn.addr !15736
  %113 = add i64 %arg3, 112, !insn.addr !15737
  %114 = inttoptr i64 %113 to i64*, !insn.addr !15737
  store i64 0, i64* %114, align 8, !insn.addr !15737
  %115 = add i64 %arg3, 120, !insn.addr !15738
  %116 = inttoptr i64 %115 to i64*, !insn.addr !15738
  store i64 0, i64* %116, align 8, !insn.addr !15738
  %117 = add i64 %arg3, 128, !insn.addr !15739
  %118 = inttoptr i64 %117 to i64*, !insn.addr !15739
  store i64 0, i64* %118, align 8, !insn.addr !15739
  %119 = add i64 %arg3, 136, !insn.addr !15740
  %120 = inttoptr i64 %119 to i64*, !insn.addr !15740
  store i64 0, i64* %120, align 8, !insn.addr !15740
  %121 = add i64 %arg3, 144, !insn.addr !15741
  %122 = inttoptr i64 %121 to i64*, !insn.addr !15741
  store i64 0, i64* %122, align 8, !insn.addr !15741
  %123 = add i64 %arg3, 152, !insn.addr !15742
  %124 = inttoptr i64 %123 to i64*, !insn.addr !15742
  store i64 0, i64* %124, align 8, !insn.addr !15742
  %125 = add i64 %arg3, 160, !insn.addr !15743
  %126 = inttoptr i64 %125 to i64*, !insn.addr !15743
  store i64 0, i64* %126, align 8, !insn.addr !15743
  %127 = add i64 %arg3, 168, !insn.addr !15744
  %128 = inttoptr i64 %127 to i64*, !insn.addr !15744
  store i64 0, i64* %128, align 8, !insn.addr !15744
  %129 = add i64 %arg3, 176, !insn.addr !15745
  %130 = inttoptr i64 %129 to i64*, !insn.addr !15745
  store i64 0, i64* %130, align 8, !insn.addr !15745
  %131 = add i64 %arg3, 184, !insn.addr !15746
  %132 = inttoptr i64 %131 to i64*, !insn.addr !15746
  store i64 0, i64* %132, align 8, !insn.addr !15746
  %133 = add i64 %arg3, 192, !insn.addr !15747
  %134 = inttoptr i64 %133 to i64*, !insn.addr !15747
  store i64 0, i64* %134, align 8, !insn.addr !15747
  %135 = add i64 %arg3, 200, !insn.addr !15748
  %136 = inttoptr i64 %135 to i64*, !insn.addr !15748
  store i64 0, i64* %136, align 8, !insn.addr !15748
  %137 = add i64 %arg3, 208, !insn.addr !15749
  %138 = inttoptr i64 %137 to i64*, !insn.addr !15749
  store i64 0, i64* %138, align 8, !insn.addr !15749
  %139 = add i64 %arg3, 216, !insn.addr !15750
  %140 = inttoptr i64 %139 to i64*, !insn.addr !15750
  store i64 0, i64* %140, align 8, !insn.addr !15750
  %141 = add i64 %arg3, 224, !insn.addr !15751
  %142 = inttoptr i64 %141 to i64*, !insn.addr !15751
  store i64 0, i64* %142, align 8, !insn.addr !15751
  %143 = add i64 %arg3, 232, !insn.addr !15752
  %144 = inttoptr i64 %143 to i64*, !insn.addr !15752
  store i64 0, i64* %144, align 8, !insn.addr !15752
  %145 = add i64 %arg3, 240, !insn.addr !15753
  %146 = inttoptr i64 %145 to i64*, !insn.addr !15753
  store i64 0, i64* %146, align 8, !insn.addr !15753
  %147 = add i64 %arg3, 248, !insn.addr !15754
  %148 = inttoptr i64 %147 to i64*, !insn.addr !15754
  store i64 0, i64* %148, align 8, !insn.addr !15754
  %149 = add i64 %arg3, 256, !insn.addr !15755
  %150 = inttoptr i64 %149 to i64*, !insn.addr !15755
  store i64 0, i64* %150, align 8, !insn.addr !15755
  %151 = add i64 %arg3, 264, !insn.addr !15756
  %152 = inttoptr i64 %151 to i64*, !insn.addr !15756
  store i64 0, i64* %152, align 8, !insn.addr !15756
  %153 = add i64 %arg3, 272, !insn.addr !15757
  %154 = inttoptr i64 %153 to i64*, !insn.addr !15757
  store i64 0, i64* %154, align 8, !insn.addr !15757
  %155 = add i64 %arg3, 280, !insn.addr !15758
  %156 = inttoptr i64 %155 to i64*, !insn.addr !15758
  store i64 0, i64* %156, align 8, !insn.addr !15758
  %157 = add i64 %arg3, 288, !insn.addr !15759
  %158 = inttoptr i64 %157 to i64*, !insn.addr !15759
  store i64 0, i64* %158, align 8, !insn.addr !15759
  %159 = add i64 %arg3, 296, !insn.addr !15760
  %160 = inttoptr i64 %159 to i64*, !insn.addr !15760
  store i64 0, i64* %160, align 8, !insn.addr !15760
  %161 = add i64 %arg3, 304, !insn.addr !15761
  %162 = inttoptr i64 %161 to i64*, !insn.addr !15761
  store i64 0, i64* %162, align 8, !insn.addr !15761
  ret i64 0, !insn.addr !15761
}

define i8 @NMI131_Initialization(i8* %pDeviceExtension, i64 %TunerDeviceID) local_unnamed_addr {
dec_label_pc_25d6a:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = call i64 @__decompiler_undefined_function_0()
  %2 = trunc i64 %1 to i8
  %3 = mul i8 %2, 2, !insn.addr !15762
  %4 = inttoptr i64 %1 to i8*, !insn.addr !15762
  store i8 %3, i8* %4, align 1, !insn.addr !15762
  %5 = add i64 %0, 320, !insn.addr !15763
  %6 = inttoptr i64 %5 to i64*, !insn.addr !15763
  store i64 0, i64* %6, align 8, !insn.addr !15763
  %7 = add i64 %0, 328, !insn.addr !15764
  %8 = inttoptr i64 %7 to i64*, !insn.addr !15764
  store i64 0, i64* %8, align 8, !insn.addr !15764
  %9 = add i64 %0, 344, !insn.addr !15765
  %10 = inttoptr i64 %9 to i64*, !insn.addr !15765
  store i64 0, i64* %10, align 8, !insn.addr !15765
  %11 = add i64 %0, 336, !insn.addr !15766
  %12 = inttoptr i64 %11 to i64*, !insn.addr !15766
  store i64 0, i64* %12, align 8, !insn.addr !15766
  ret i8 %2, !insn.addr !15767
}

define i64 @NMI131_Initialization.618(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_25d9a:
  %0 = call i64 @mcount(), !insn.addr !15768
  %1 = call i64 @DriverDebugMessage.510(i64 0), !insn.addr !15769
  %2 = lshr i64 %arg2, ptrtoint (i32* @global_var_1 to i64), !insn.addr !15770
  %3 = mul i64 %2, mul (i64 add (i64 ptrtoint (i16* @global_var_4 to i64), i64 ptrtoint (i32* @global_var_1 to i64)), i64 ptrtoint (i8* @global_var_8 to i64)), !insn.addr !15771
  %4 = inttoptr i64 %3 to i8*, !insn.addr !15771
  %5 = add i64 %3, 8, !insn.addr !15772
  %6 = inttoptr i64 %5 to i64*, !insn.addr !15772
  store i64 0, i64* %6, align 8, !insn.addr !15773
  store i8 ptrtoint (i8** @global_var_3 to i8), i8* %4, align 2, !insn.addr !15774
  %7 = mul i64 %2, sub (i64 shl (i64 1, i64 ptrtoint (i8** @global_var_7 to i64)), i64 shl (i64 1, i64 ptrtoint (i16* @global_var_4 to i64))), !insn.addr !15775
  %8 = mul i64 %2, ptrtoint (i8* @global_var_8 to i64), !insn.addr !15776
  %9 = inttoptr i64 %8 to i64*, !insn.addr !15776
  store i64 %7, i64* %9, align 8, !insn.addr !15776
  %10 = inttoptr i64 %7 to i8*, !insn.addr !15777
  call void @__asm_rep_stosq_memset(i8* %10, i64 0, i64 ptrtoint (i16** @global_var_e to i64)), !insn.addr !15777
  %11 = inttoptr i64 %7 to i32*, !insn.addr !15778
  store i32 ptrtoint (i32** @global_var_18 to i32), i32* %11, align 4, !insn.addr !15778
  %12 = add i64 %7, ptrtoint (i16* @global_var_4 to i64), !insn.addr !15779
  %13 = inttoptr i64 %12 to i32*, !insn.addr !15779
  store i32 0, i32* %13, align 4, !insn.addr !15779
  %14 = trunc i64 %arg2 to i8, !insn.addr !15780
  %15 = add i64 %7, ptrtoint (i8* @global_var_8 to i64), !insn.addr !15780
  %16 = inttoptr i64 %15 to i8*, !insn.addr !15780
  store i8 %14, i8* %16, align 1, !insn.addr !15780
  %17 = add i64 %7, ptrtoint ([4 x i8]* @global_var_c to i64), !insn.addr !15781
  %18 = inttoptr i64 %17 to i32*, !insn.addr !15781
  store i32 ptrtoint (i32** @global_var_12 to i32), i32* %18, align 4, !insn.addr !15781
  %19 = add i64 %7, ptrtoint (i32** @global_var_20 to i64), !insn.addr !15782
  %20 = inttoptr i64 %19 to i64*, !insn.addr !15782
  store i64 0, i64* %20, align 8, !insn.addr !15782
  %21 = add i64 %7, ptrtoint (i32** @global_var_18 to i64), !insn.addr !15783
  %22 = inttoptr i64 %21 to i64*, !insn.addr !15783
  store i64 0, i64* %22, align 8, !insn.addr !15783
  %23 = add i64 %7, 40, !insn.addr !15784
  %24 = inttoptr i64 %23 to i64*, !insn.addr !15784
  store i64 0, i64* %24, align 8, !insn.addr !15784
  %25 = add i64 %7, 48, !insn.addr !15785
  %26 = inttoptr i64 %25 to i64*, !insn.addr !15785
  store i64 0, i64* %26, align 8, !insn.addr !15785
  %27 = add i64 %7, 56, !insn.addr !15786
  %28 = inttoptr i64 %27 to i64*, !insn.addr !15786
  store i64 0, i64* %28, align 8, !insn.addr !15786
  %29 = add i64 %7, 64, !insn.addr !15787
  %30 = inttoptr i64 %29 to i64*, !insn.addr !15787
  store i64 0, i64* %30, align 8, !insn.addr !15787
  %31 = add i64 %7, 72, !insn.addr !15788
  %32 = inttoptr i64 %31 to i64*, !insn.addr !15788
  store i64 0, i64* %32, align 8, !insn.addr !15788
  %33 = add i64 %7, ptrtoint (i8* @global_var_10 to i64), !insn.addr !15789
  %34 = inttoptr i64 %33 to i8*, !insn.addr !15789
  store i8 0, i8* %34, align 1, !insn.addr !15789
  %35 = add i64 %7, 104, !insn.addr !15790
  %36 = inttoptr i64 %35 to i8*, !insn.addr !15790
  store i8 0, i8* %36, align 1, !insn.addr !15790
  %37 = add i64 %7, 108, !insn.addr !15791
  %38 = inttoptr i64 %37 to i32*, !insn.addr !15791
  store i32 0, i32* %38, align 4, !insn.addr !15791
  %39 = mul i64 %2, shl (i64 add (i64 mul (i64 add (i64 ptrtoint (i16* @global_var_4 to i64), i64 ptrtoint (i32* @global_var_1 to i64)), i64 ptrtoint (i32* @global_var_2 to i64)), i64 1), i64 ptrtoint (i8* @global_var_5 to i64)), !insn.addr !15792
  store i64 %39, i64* %9, align 8, !insn.addr !15793
  %40 = call i64 @nmi_common_init.516(i64 %3, i64 %7, i64 %39), !insn.addr !15794
  ret i64 0, !insn.addr !15795
}

define i8 @Japan4x4Tuner_TunerInitialization(i64 %TunerDeviceID, i8* %pDeviceExtension) local_unnamed_addr {
dec_label_pc_25ef7:
  %0 = call i64 @__decompiler_undefined_function_0()
  %rax = alloca i64, align 8
  %1 = call i64 @__decompiler_undefined_function_0()
  %2 = add i64 %1, -57
  %3 = inttoptr i64 %2 to i8*
  %4 = load i8, i8* %3, align 1, !insn.addr !15796
  %5 = trunc i64 %0 to i8, !insn.addr !15796
  %6 = add i8 %4, %5, !insn.addr !15796
  store i8 %6, i8* %3, align 1, !insn.addr !15796
  %7 = load i64, i64* %rax, align 8, !insn.addr !15797
  %8 = inttoptr i64 %7 to i32*, !insn.addr !15797
  store i32 -402653184, i32* %8, align 4, !insn.addr !15797
  %9 = bitcast i64* %rax to i8*
  %10 = load i8, i8* %9, align 8, !insn.addr !15798
  %11 = load i64, i64* %rax, align 8
  %12 = trunc i64 %11 to i8, !insn.addr !15798
  %13 = add i8 %10, %12, !insn.addr !15798
  %14 = inttoptr i64 %11 to i8*, !insn.addr !15798
  store i8 %13, i8* %14, align 1, !insn.addr !15798
  ret i8 ptrtoint (i32* @global_var_1 to i8), !insn.addr !15799
}

define i64 @Japan4x4Tuner_TunerInitialization.446(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_25f27:
  %r13.0.reg2mem = alloca i64, !insn.addr !15800
  %0 = call i64 @mcount(), !insn.addr !15801
  %1 = call i64 @DriverDebugMessage.510(i64 0), !insn.addr !15802
  %2 = call i64 @DriverDebugMessage.510(i64 0), !insn.addr !15803
  %3 = call i64 @DriverDebugPrint.467(i64 0, i64 %arg1), !insn.addr !15804
  %4 = icmp ult i64 %arg1, 128
  br i1 %4, label %dec_label_pc_26106, label %dec_label_pc_25f75, !insn.addr !15805

dec_label_pc_25f75:                               ; preds = %dec_label_pc_25f27
  %5 = add i64 %arg1, -144
  %6 = udiv i64 %5, 16
  %7 = mul i64 %arg1, 1152921504606846976
  %8 = or i64 %6, %7
  store i64 ptrtoint (i8* @global_var_8 to i64), i64* %r13.0.reg2mem
  switch i64 %8, label %dec_label_pc_25fe7 [
    i64 6, label %dec_label_pc_25fed.fold.split11
    i64 0, label %dec_label_pc_25fed
    i64 1, label %dec_label_pc_25fed.fold.split
    i64 2, label %dec_label_pc_25fed.fold.split7
    i64 3, label %dec_label_pc_25fed.fold.split8
    i64 4, label %dec_label_pc_25fed.fold.split9
    i64 5, label %dec_label_pc_25fed.fold.split10
  ]

dec_label_pc_25fe7:                               ; preds = %dec_label_pc_25f75
  store i64 0, i64* %r13.0.reg2mem, !insn.addr !15806
  br label %dec_label_pc_25fed, !insn.addr !15806

dec_label_pc_25fed.fold.split:                    ; preds = %dec_label_pc_25f75
  store i64 ptrtoint (i8* @global_var_10 to i64), i64* %r13.0.reg2mem
  br label %dec_label_pc_25fed

dec_label_pc_25fed.fold.split7:                   ; preds = %dec_label_pc_25f75
  store i64 ptrtoint (i32** @global_var_18 to i64), i64* %r13.0.reg2mem
  br label %dec_label_pc_25fed

dec_label_pc_25fed.fold.split8:                   ; preds = %dec_label_pc_25f75
  store i64 ptrtoint (i32** @global_var_20 to i64), i64* %r13.0.reg2mem
  br label %dec_label_pc_25fed

dec_label_pc_25fed.fold.split9:                   ; preds = %dec_label_pc_25f75
  store i64 40, i64* %r13.0.reg2mem
  br label %dec_label_pc_25fed

dec_label_pc_25fed.fold.split10:                  ; preds = %dec_label_pc_25f75
  store i64 48, i64* %r13.0.reg2mem
  br label %dec_label_pc_25fed

dec_label_pc_25fed.fold.split11:                  ; preds = %dec_label_pc_25f75
  store i64 56, i64* %r13.0.reg2mem
  br label %dec_label_pc_25fed

dec_label_pc_25fed:                               ; preds = %dec_label_pc_25f75, %dec_label_pc_25fed.fold.split11, %dec_label_pc_25fed.fold.split10, %dec_label_pc_25fed.fold.split9, %dec_label_pc_25fed.fold.split8, %dec_label_pc_25fed.fold.split7, %dec_label_pc_25fed.fold.split, %dec_label_pc_25fe7
  %r13.0.reload = load i64, i64* %r13.0.reg2mem
  %9 = urem i64 %r13.0.reload, 256, !insn.addr !15807
  %10 = call i64 @TC90522_Initialization.392(i64 %arg2, i64 %9, i64* bitcast (i32* @global_var_1 to i64*)), !insn.addr !15808
  %11 = call i64 @NMI131_Initialization.618(i64 %arg2, i64 %9), !insn.addr !15809
  %12 = add nsw i64 %9, sext (i32 ptrtoint (i32* @global_var_1 to i32) to i64), !insn.addr !15810
  %sext = mul i64 %12, 4294967296
  %13 = sdiv i64 %sext, 4294967296, !insn.addr !15811
  %14 = call i64 @TC90522_Initialization.392(i64 %arg2, i64 %13, i64* bitcast (i32* @global_var_1 to i64*)), !insn.addr !15812
  %15 = call i64 @TDA2014x_TunerInitialization.256(i64 %arg2, i64 %13), !insn.addr !15813
  %16 = add nsw i64 %9, sext (i32 ptrtoint (i32* @global_var_2 to i32) to i64), !insn.addr !15814
  %sext1 = mul i64 %16, 4294967296
  %17 = sdiv i64 %sext1, 4294967296, !insn.addr !15815
  %18 = call i64 @TC90522_Initialization.392(i64 %arg2, i64 %17, i64* bitcast (i32* @global_var_1 to i64*)), !insn.addr !15816
  %19 = call i64 @NMI131_Initialization.618(i64 %arg2, i64 %17), !insn.addr !15817
  %20 = add nsw i64 %9, sext (i32 ptrtoint (i8** @global_var_3 to i32) to i64), !insn.addr !15818
  %sext2 = mul i64 %20, 4294967296
  %21 = sdiv i64 %sext2, 4294967296, !insn.addr !15819
  %22 = call i64 @TC90522_Initialization.392(i64 %arg2, i64 %21, i64* bitcast (i32* @global_var_1 to i64*)), !insn.addr !15820
  %23 = call i64 @TDA2014x_TunerInitialization.256(i64 %arg2, i64 %21), !insn.addr !15821
  %24 = add nsw i64 %9, sext (i32 ptrtoint (i16* @global_var_4 to i32) to i64), !insn.addr !15822
  %sext3 = mul i64 %24, 4294967296
  %25 = sdiv i64 %sext3, 4294967296, !insn.addr !15823
  %26 = call i64 @TC90522_Initialization.392(i64 %arg2, i64 %25, i64* bitcast (i32* @global_var_1 to i64*)), !insn.addr !15824
  %27 = call i64 @NMI131_Initialization.618(i64 %arg2, i64 %25), !insn.addr !15825
  %28 = add nsw i64 %9, sext (i32 ptrtoint (i8* @global_var_5 to i32) to i64), !insn.addr !15826
  %sext4 = mul i64 %28, 4294967296
  %29 = sdiv i64 %sext4, 4294967296, !insn.addr !15827
  %30 = call i64 @TC90522_Initialization.392(i64 %arg2, i64 %29, i64* bitcast (i32* @global_var_1 to i64*)), !insn.addr !15828
  %31 = call i64 @TDA2014x_TunerInitialization.256(i64 %arg2, i64 %29), !insn.addr !15829
  %32 = add nsw i64 %9, sext (i32 ptrtoint (i8* @global_var_6 to i32) to i64), !insn.addr !15830
  %sext5 = mul i64 %32, 4294967296
  %33 = sdiv i64 %sext5, 4294967296, !insn.addr !15831
  %34 = call i64 @TC90522_Initialization.392(i64 %arg2, i64 %33, i64* bitcast (i32* @global_var_1 to i64*)), !insn.addr !15832
  %35 = call i64 @NMI131_Initialization.618(i64 %arg2, i64 %33), !insn.addr !15833
  %36 = add nsw i64 %9, sext (i32 ptrtoint (i8** @global_var_7 to i32) to i64), !insn.addr !15834
  %sext6 = mul i64 %36, 4294967296
  %37 = sdiv i64 %sext6, 4294967296, !insn.addr !15835
  %38 = call i64 @TC90522_Initialization.392(i64 %arg2, i64 %37, i64* bitcast (i32* @global_var_1 to i64*)), !insn.addr !15836
  %39 = call i64 @TDA2014x_TunerInitialization.256(i64 %arg2, i64 %37), !insn.addr !15837
  ret i64 %39, !insn.addr !15838

dec_label_pc_26106:                               ; preds = %dec_label_pc_25f27
  %40 = call i64 @TC90522_Initialization.392(i64 %arg2, i64 %arg1, i64* null), !insn.addr !15839
  %41 = trunc i64 %arg1 to i8, !insn.addr !15840
  %42 = and i8 %41, ptrtoint (i32* @global_var_1 to i8), !insn.addr !15840
  %43 = icmp eq i8 %42, 0, !insn.addr !15840
  %44 = icmp eq i1 %43, false, !insn.addr !15841
  br i1 %44, label %dec_label_pc_2613e, label %dec_label_pc_2612e, !insn.addr !15841

dec_label_pc_2612e:                               ; preds = %dec_label_pc_26106
  %45 = call i64 @NMI131_Initialization.618(i64 %arg2, i64 %arg1), !insn.addr !15842
  ret i64 %45, !insn.addr !15843

dec_label_pc_2613e:                               ; preds = %dec_label_pc_26106
  ret i64 %40, !insn.addr !15843
}

define void @nmi_debug(i64 %pPrivate, i32 %zone, i8* %fmt, ...) local_unnamed_addr {
dec_label_pc_2613f:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = call i64 @__decompiler_undefined_function_0()
  %2 = and i64 %1, 4294967295, !insn.addr !15844
  %3 = call i64 @TDA2014x_TunerInitialization.256(i64 %0, i64 %2), !insn.addr !15845
  %4 = urem i64 %3, 256, !insn.addr !15846
  %5 = call i64 @DriverDebugPrint.467(i64 0, i64 %4), !insn.addr !15847
  ret void, !insn.addr !15848
}

define i64 @nmi_debug.134(i64 %arg1, i64* %arg2, i64 %arg3, i128 %arg4, i64 %arg5, i64 %arg6) local_unnamed_addr {
dec_label_pc_2616f:
  %0 = call i64 @__decompiler_undefined_function_0()
  %stack_var_-332 = alloca i8, align 1
  %stack_var_-72 = alloca i64, align 8
  %stack_var_-376 = alloca i32*, align 8
  %1 = call i64 @mcount(), !insn.addr !15849
  %2 = call i64 @__readgsqword(i64 40), !insn.addr !15850
  store i32* bitcast (i32** @global_var_18 to i32*), i32** %stack_var_-376, align 8, !insn.addr !15851
  store i8 0, i8* %stack_var_-332, align 1, !insn.addr !15852
  %3 = bitcast i32** %stack_var_-376 to i64*, !insn.addr !15853
  %4 = call i64 @vsprintf(i8* nonnull %stack_var_-332, i64 %arg3, i64* nonnull %3, i64* nonnull %stack_var_-72), !insn.addr !15853
  %5 = urem i64 %0, 256, !insn.addr !15854
  %6 = mul nuw nsw i64 %5, 184, !insn.addr !15854
  ret i64 %6, !insn.addr !15854
}

define void @wReg8(i64 %pPrivate, i8 %adr, i8 %val) local_unnamed_addr {
dec_label_pc_26208:
  %0 = call i64 @__decompiler_undefined_function_0()
  %rax = alloca i64, align 8
  %1 = call i64 @__decompiler_undefined_function_0()
  %2 = bitcast i64* %rax to i8*
  %3 = trunc i64 %1 to i8
  %4 = mul i8 %3, 2, !insn.addr !15855
  %5 = inttoptr i64 %1 to i8*, !insn.addr !15855
  store i8 %4, i8* %5, align 1, !insn.addr !15855
  %6 = load i8, i8* %2, align 8, !insn.addr !15856
  %7 = load i64, i64* %rax, align 8
  %8 = trunc i64 %7 to i8, !insn.addr !15856
  %9 = add i8 %6, %8, !insn.addr !15856
  %10 = inttoptr i64 %7 to i8*, !insn.addr !15856
  store i8 %9, i8* %10, align 1, !insn.addr !15856
  %11 = add i64 %0, -72, !insn.addr !15857
  %12 = inttoptr i64 %11 to i64*, !insn.addr !15857
  %13 = load i64, i64* %12, align 8, !insn.addr !15857
  %14 = call i64 @__readgsqword(i64 40), !insn.addr !15858
  %15 = xor i64 %14, %13, !insn.addr !15858
  %16 = icmp eq i64 %15, 0, !insn.addr !15858
  store i64 %15, i64* %rax, align 8, !insn.addr !15858
  br i1 %16, label %dec_label_pc_2622e, label %dec_label_pc_26229, !insn.addr !15859

dec_label_pc_26229:                               ; preds = %dec_label_pc_26208
  %17 = call i64 @__stack_chk_fail(), !insn.addr !15860
  store i64 %17, i64* %rax, align 8, !insn.addr !15860
  br label %dec_label_pc_2622e, !insn.addr !15860

dec_label_pc_2622e:                               ; preds = %dec_label_pc_26229, %dec_label_pc_26208
  ret void, !insn.addr !15861
}

define i64 @wReg8.135(i64 %arg1, i64* %arg2, i64 %arg3) local_unnamed_addr {
dec_label_pc_26238:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = call i64 @__decompiler_undefined_function_0()
  %rdi = alloca i64, align 8
  %2 = call i64 @__decompiler_undefined_function_0()
  %3 = call i64 @mcount(), !insn.addr !15862
  %4 = urem i64 %2, 256, !insn.addr !15863
  %5 = mul nuw nsw i64 %4, 184, !insn.addr !15864
  %6 = inttoptr i64 %5 to i64*, !insn.addr !15865
  %7 = load i64, i64* %6, align 8, !insn.addr !15865
  %8 = icmp eq i64 %7, 0, !insn.addr !15865
  br i1 %8, label %dec_label_pc_26287, label %dec_label_pc_26274, !insn.addr !15866

dec_label_pc_26274:                               ; preds = %dec_label_pc_26238
  %9 = inttoptr i64 %5 to i8*, !insn.addr !15867
  %10 = load i8, i8* %9, align 8, !insn.addr !15867
  %11 = icmp eq i8 %10, 0, !insn.addr !15867
  br i1 %11, label %dec_label_pc_262a5, label %dec_label_pc_26287, !insn.addr !15868

dec_label_pc_26287:                               ; preds = %dec_label_pc_26274, %dec_label_pc_26238
  %12 = zext i64 %5 to i128
  %13 = call i64 @nmi_debug.134(i64 %arg1, i64* bitcast (i32* @global_var_2 to i64*), i64 0, i128 %12, i64 %1, i64 %0), !insn.addr !15869
  ret i64 %13, !insn.addr !15870

dec_label_pc_262a5:                               ; preds = %dec_label_pc_26274
  %14 = ptrtoint i64* %arg2 to i64
  %15 = trunc i64 %14 to i8, !insn.addr !15871
  %16 = icmp eq i8 %15, 54, !insn.addr !15871
  %17 = icmp eq i1 %16, false, !insn.addr !15872
  br i1 %17, label %dec_label_pc_262cb, label %dec_label_pc_26374, !insn.addr !15872

dec_label_pc_262cb:                               ; preds = %dec_label_pc_262a5
  %18 = icmp eq i8 %15, 0, !insn.addr !15873
  %19 = icmp eq i1 %18, false, !insn.addr !15874
  br i1 %19, label %dec_label_pc_262f2, label %dec_label_pc_262e7, !insn.addr !15874

dec_label_pc_262e7:                               ; preds = %dec_label_pc_262cb
  %20 = trunc i64 %arg3 to i8, !insn.addr !15875
  store i8 %20, i8* %9, align 8, !insn.addr !15875
  br label %dec_label_pc_26374, !insn.addr !15876

dec_label_pc_262f2:                               ; preds = %dec_label_pc_262cb
  %21 = icmp eq i8 %15, 52, !insn.addr !15877
  %22 = icmp eq i1 %21, false, !insn.addr !15878
  br i1 %22, label %dec_label_pc_26313, label %dec_label_pc_2630b, !insn.addr !15878

dec_label_pc_2630b:                               ; preds = %dec_label_pc_262f2
  %23 = trunc i64 %arg3 to i8, !insn.addr !15879
  store i8 %23, i8* %9, align 8, !insn.addr !15879
  br label %dec_label_pc_26374, !insn.addr !15880

dec_label_pc_26313:                               ; preds = %dec_label_pc_262f2
  %24 = icmp eq i8 %15, 53, !insn.addr !15881
  %25 = icmp eq i1 %24, false, !insn.addr !15882
  br i1 %25, label %dec_label_pc_26334, label %dec_label_pc_2632c, !insn.addr !15882

dec_label_pc_2632c:                               ; preds = %dec_label_pc_26313
  %26 = trunc i64 %arg3 to i8, !insn.addr !15883
  store i8 %26, i8* %9, align 8, !insn.addr !15883
  br label %dec_label_pc_26374, !insn.addr !15884

dec_label_pc_26334:                               ; preds = %dec_label_pc_26313
  %27 = icmp eq i8 %15, ptrtoint (i8* @global_var_5 to i8), !insn.addr !15885
  %28 = icmp eq i1 %27, false, !insn.addr !15886
  br i1 %28, label %dec_label_pc_26355, label %dec_label_pc_2634d, !insn.addr !15886

dec_label_pc_2634d:                               ; preds = %dec_label_pc_26334
  %29 = trunc i64 %arg3 to i8, !insn.addr !15887
  store i8 %29, i8* %9, align 8, !insn.addr !15887
  br label %dec_label_pc_26374, !insn.addr !15888

dec_label_pc_26355:                               ; preds = %dec_label_pc_26334
  %30 = icmp eq i8 %15, ptrtoint (i8* @global_var_a to i8), !insn.addr !15889
  %31 = icmp eq i1 %30, false, !insn.addr !15890
  br i1 %31, label %dec_label_pc_26374, label %dec_label_pc_2636e, !insn.addr !15890

dec_label_pc_2636e:                               ; preds = %dec_label_pc_26355
  %32 = trunc i64 %arg3 to i8, !insn.addr !15891
  store i8 %32, i8* %9, align 8, !insn.addr !15891
  br label %dec_label_pc_26374, !insn.addr !15891

dec_label_pc_26374:                               ; preds = %dec_label_pc_262a5, %dec_label_pc_2636e, %dec_label_pc_26355, %dec_label_pc_2634d, %dec_label_pc_2632c, %dec_label_pc_2630b, %dec_label_pc_262e7
  %33 = bitcast i64* %rdi to i8*
  %34 = load i8, i8* %33, align 8, !insn.addr !15892
  %35 = zext i8 %34 to i64, !insn.addr !15893
  %36 = mul nuw nsw i64 %35, 184, !insn.addr !15893
  ret i64 %36, !insn.addr !15894
}

define void @nm131_lt_ctrl(i64 %pPrivate, i8 %enable) local_unnamed_addr {
dec_label_pc_263a8:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = call i64 @__decompiler_undefined_function_0()
  %2 = call i64 @__decompiler_undefined_function_0()
  %3 = call i64 @__decompiler_undefined_function_0()
  %4 = sext i64 %3 to i128, !insn.addr !15895
  %5 = call i64 @nmi_debug.134(i64 %2, i64* bitcast (i32* @global_var_2 to i64*), i64 0, i128 %4, i64 %1, i64 %0), !insn.addr !15895
  %6 = urem i64 %2, 256, !insn.addr !15896
  %7 = mul nuw nsw i64 %6, 184, !insn.addr !15896
  %8 = inttoptr i64 %7 to i8*, !insn.addr !15897
  store i8 ptrtoint (i32* @global_var_1 to i8), i8* %8, align 8, !insn.addr !15897
  ret void, !insn.addr !15898
}

define i64 @nm131_lt_ctrl.127(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_263d8:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = call i64 @mcount(), !insn.addr !15899
  %2 = urem i64 %0, 256, !insn.addr !15900
  %3 = mul nuw nsw i64 %2, 184, !insn.addr !15900
  %4 = inttoptr i64 %3 to i32*, !insn.addr !15901
  %5 = load i32, i32* %4, align 8, !insn.addr !15901
  %6 = zext i32 %5 to i64, !insn.addr !15901
  ret i64 %6, !insn.addr !15902
}

define void @nm131_set_video_amplitude(i64 %pPrivate, i8 %amp) local_unnamed_addr {
dec_label_pc_263fc:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = urem i64 %0, 8, !insn.addr !15903
  %2 = or i64 %1, 248, !insn.addr !15904
  %3 = call i64 @wReg8.135(i64 %pPrivate, i64* bitcast (i8* @global_var_a to i64*), i64 %2), !insn.addr !15905
  ret void, !insn.addr !15906
}

define i64 @nm131_set_video_amplitude.123(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_2642c:
  %.reg2mem = alloca i32, !insn.addr !15907
  %0 = call i64 @mcount(), !insn.addr !15908
  %1 = urem i64 %arg1, 256, !insn.addr !15909
  %2 = mul nuw nsw i64 %1, 184, !insn.addr !15910
  %3 = inttoptr i64 %2 to i32*, !insn.addr !15911
  %4 = load i32, i32* %3, align 8, !insn.addr !15911
  %5 = icmp ult i32 %4, 2
  br i1 %5, label %dec_label_pc_26492, label %dec_label_pc_264a9, !insn.addr !15912

dec_label_pc_26492:                               ; preds = %dec_label_pc_2642c
  %6 = urem i64 %arg2, 256, !insn.addr !15913
  %7 = xor i64 %6, 255, !insn.addr !15914
  %8 = call i64 @wReg8.135(i64 %arg1, i64* inttoptr (i64 52 to i64*), i64 %7), !insn.addr !15915
  %9 = trunc i64 %arg2 to i8, !insn.addr !15916
  %10 = inttoptr i64 %2 to i8*, !insn.addr !15916
  store i8 %9, i8* %10, align 8, !insn.addr !15916
  ret i64 %8, !insn.addr !15917

dec_label_pc_264a9:                               ; preds = %dec_label_pc_2642c
  %11 = icmp eq i32 %4, 3, !insn.addr !15918
  %12 = icmp eq i1 %11, false, !insn.addr !15919
  %13 = trunc i64 %arg2 to i8, !insn.addr !15920
  %14 = icmp ugt i8 %13, ptrtoint (i8* @global_var_f to i8)
  %or.cond11 = or i1 %14, %12
  store i32 %4, i32* %.reg2mem, !insn.addr !15921
  br i1 %or.cond11, label %dec_label_pc_26569, label %dec_label_pc_26551, !insn.addr !15921

dec_label_pc_26551:                               ; preds = %dec_label_pc_264a9
  %15 = sub i64 127, %arg2, !insn.addr !15922
  %16 = urem i64 %15, 256, !insn.addr !15923
  %17 = call i64 @wReg8.135(i64 %arg1, i64* inttoptr (i64 52 to i64*), i64 %16), !insn.addr !15924
  %.pre = load i32, i32* %3, align 8
  store i32 %.pre, i32* %.reg2mem, !insn.addr !15924
  br label %dec_label_pc_26569, !insn.addr !15924

dec_label_pc_26569:                               ; preds = %dec_label_pc_264a9, %dec_label_pc_26551
  %.reload = load i32, i32* %.reg2mem, !insn.addr !15925
  %18 = zext i32 %.reload to i64, !insn.addr !15925
  ret i64 %18, !insn.addr !15926
}

define void @nm131_notch_set(i64 %pPrivate, i32 %en, i32 %frequency, i32 %width) local_unnamed_addr {
dec_label_pc_26593:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = urem i32 %frequency, 256
  %2 = zext i32 %1 to i64, !insn.addr !15927
  %3 = call i64 @wReg8.135(i64 %0, i64* inttoptr (i64 53 to i64*), i64 %2), !insn.addr !15928
  ret void, !insn.addr !15929
}

define i8 @rReg8(i64 %pPrivate, i8 %adr) local_unnamed_addr {
dec_label_pc_265b4:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = call i64 @__decompiler_undefined_function_0()
  %2 = add i64 %1, -117, !insn.addr !15930
  %3 = inttoptr i64 %2 to i8*, !insn.addr !15930
  %4 = load i8, i8* %3, align 1, !insn.addr !15930
  %5 = trunc i64 %0 to i8, !insn.addr !15930
  %6 = add i8 %4, %5, !insn.addr !15930
  store i8 %6, i8* %3, align 1, !insn.addr !15930
  %7 = call i64 @unknown_fffffffff067f109(), !insn.addr !15931
  %8 = trunc i64 %7 to i8, !insn.addr !15932
  ret i8 %8, !insn.addr !15932
}

define i64 @nm131_notch_set.116() local_unnamed_addr {
dec_label_pc_265c3:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = call i64 @__decompiler_undefined_function_0()
  %2 = call i64 @__decompiler_undefined_function_0()
  %3 = call i64 @__decompiler_undefined_function_0()
  %4 = call i64 @mcount(), !insn.addr !15933
  %5 = sext i64 %3 to i128, !insn.addr !15934
  %6 = call i64 @nmi_debug.134(i64 %2, i64* bitcast (i32* @global_var_2 to i64*), i64 0, i128 %5, i64 %1, i64 %0), !insn.addr !15934
  ret i64 %6, !insn.addr !15935
}

define i64 @rReg8.103(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_265e4:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = call i64 @__decompiler_undefined_function_0()
  %2 = call i64 @__decompiler_undefined_function_0()
  %3 = call i64 @mcount(), !insn.addr !15936
  %4 = urem i64 %arg1, 256, !insn.addr !15937
  %5 = mul nuw nsw i64 %4, 184, !insn.addr !15938
  %6 = inttoptr i64 %5 to i64*, !insn.addr !15939
  %7 = load i64, i64* %6, align 8, !insn.addr !15939
  %8 = icmp eq i64 %7, 0, !insn.addr !15939
  br i1 %8, label %dec_label_pc_26629, label %dec_label_pc_26620, !insn.addr !15940

dec_label_pc_26620:                               ; preds = %dec_label_pc_265e4
  %9 = inttoptr i64 %5 to i8*, !insn.addr !15941
  %10 = load i8, i8* %9, align 8, !insn.addr !15941
  %11 = icmp eq i8 %10, 0, !insn.addr !15941
  br i1 %11, label %dec_label_pc_2664c, label %dec_label_pc_26629, !insn.addr !15942

dec_label_pc_26629:                               ; preds = %dec_label_pc_26620, %dec_label_pc_265e4
  %12 = sext i64 %2 to i128, !insn.addr !15943
  %13 = call i64 @nmi_debug.134(i64 %arg1, i64* bitcast (i32* @global_var_2 to i64*), i64 0, i128 %12, i64 %1, i64 %0), !insn.addr !15943
  ret i64 0, !insn.addr !15944

dec_label_pc_2664c:                               ; preds = %dec_label_pc_26620
  ret i64 %5, !insn.addr !15945
}

define i64 @function_266d7() local_unnamed_addr {
dec_label_pc_266d7:
  %0 = call i64 @__decompiler_undefined_function_0()
  ret i64 %0, !insn.addr !15946
}

define void @nm120_rfli_ctrl(i64 %pPrivate, i8 %enable) local_unnamed_addr {
dec_label_pc_266da:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = call i64 @__decompiler_undefined_function_0()
  %2 = call i64 @__decompiler_undefined_function_0()
  %3 = call i64 @__decompiler_undefined_function_0()
  %4 = call i64 @__decompiler_undefined_function_0()
  %5 = call i64 @__decompiler_undefined_function_0()
  %6 = trunc i64 %5 to i8
  %7 = mul i8 %6, 2, !insn.addr !15947
  %8 = inttoptr i64 %5 to i8*, !insn.addr !15947
  store i8 %7, i8* %8, align 1, !insn.addr !15947
  %9 = sext i64 %4 to i128, !insn.addr !15948
  %10 = call i64 @nmi_debug.134(i64 %2, i64* bitcast (i32* @global_var_2 to i64*), i64 %3, i128 %9, i64 %1, i64 %0), !insn.addr !15948
  %11 = urem i64 %2, 256, !insn.addr !15949
  %12 = mul nuw nsw i64 %11, 184, !insn.addr !15949
  %13 = inttoptr i64 %12 to i8*, !insn.addr !15950
  store i8 ptrtoint (i32* @global_var_1 to i8), i8* %13, align 8, !insn.addr !15950
  ret void, !insn.addr !15951
}

define i64 @nm120_rfli_ctrl.133(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_2670a:
  %0 = call i64 @mcount(), !insn.addr !15952
  %1 = urem i64 %arg1, 256, !insn.addr !15953
  %2 = trunc i64 %arg2 to i8, !insn.addr !15954
  %3 = icmp eq i8 %2, 0, !insn.addr !15954
  br i1 %3, label %dec_label_pc_2681c, label %dec_label_pc_267c1, !insn.addr !15955

dec_label_pc_267c1:                               ; preds = %dec_label_pc_2670a
  %4 = call i64 @rReg8.103(i64 %arg1, i64 43), !insn.addr !15956
  %narrow = mul nuw nsw i64 %1, 184
  %5 = trunc i64 %4 to i8, !insn.addr !15957
  %6 = inttoptr i64 %narrow to i8*, !insn.addr !15957
  store i8 %5, i8* %6, align 8, !insn.addr !15957
  %7 = call i64 @wReg8.135(i64 %arg1, i64* inttoptr (i64 43 to i64*), i64 42), !insn.addr !15958
  %8 = call i64 @rReg8.103(i64 %arg1, i64 37), !insn.addr !15959
  %9 = trunc i64 %8 to i8, !insn.addr !15960
  %10 = add nuw nsw i64 %narrow, 11, !insn.addr !15960
  %11 = inttoptr i64 %10 to i8*, !insn.addr !15960
  store i8 %9, i8* %11, align 1, !insn.addr !15960
  %12 = call i64 @rReg8.103(i64 %arg1, i64 41), !insn.addr !15961
  %13 = trunc i64 %12 to i8, !insn.addr !15962
  %14 = add nuw nsw i64 %narrow, 12, !insn.addr !15962
  %15 = inttoptr i64 %14 to i8*, !insn.addr !15962
  store i8 %13, i8* %15, align 4, !insn.addr !15962
  %16 = call i64 @wReg8.135(i64 %arg1, i64* inttoptr (i64 37 to i64*), i64 250), !insn.addr !15963
  %17 = call i64 @wReg8.135(i64 %arg1, i64* inttoptr (i64 41 to i64*), i64 239), !insn.addr !15964
  ret i64 %17, !insn.addr !15965

dec_label_pc_2681c:                               ; preds = %dec_label_pc_2670a
  %narrow6 = mul nuw nsw i64 %1, 184
  %18 = inttoptr i64 %narrow6 to i8*, !insn.addr !15966
  %19 = load i8, i8* %18, align 8, !insn.addr !15966
  %20 = zext i8 %19 to i64, !insn.addr !15966
  %21 = call i64 @wReg8.135(i64 %arg1, i64* inttoptr (i64 43 to i64*), i64 %20), !insn.addr !15967
  %22 = add nuw nsw i64 %narrow6, 11, !insn.addr !15968
  %23 = inttoptr i64 %22 to i8*, !insn.addr !15968
  %24 = load i8, i8* %23, align 1, !insn.addr !15968
  %25 = zext i8 %24 to i64, !insn.addr !15968
  %26 = call i64 @wReg8.135(i64 %arg1, i64* inttoptr (i64 37 to i64*), i64 %25), !insn.addr !15969
  ret i64 %26, !insn.addr !15970
}

define void @nm131_set_lna_gain2(i64 %pPrivate, i8 %g) local_unnamed_addr {
dec_label_pc_2684a:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = call i64 @__decompiler_undefined_function_0()
  %2 = call i64 @__decompiler_undefined_function_0()
  %3 = call i64 @__decompiler_undefined_function_0()
  %4 = sext i8 %g to i64
  %5 = mul i64 %3, ptrtoint (i16* @global_var_4 to i64), !insn.addr !15971
  %6 = add i64 %3, -25, !insn.addr !15971
  %7 = add i64 %6, %5, !insn.addr !15971
  %8 = inttoptr i64 %7 to i8*, !insn.addr !15971
  %9 = load i8, i8* %8, align 1, !insn.addr !15971
  %10 = trunc i64 %3 to i8, !insn.addr !15971
  %11 = add i8 %9, %10, !insn.addr !15971
  store i8 %11, i8* %8, align 1, !insn.addr !15971
  %12 = inttoptr i64 %4 to i64*, !insn.addr !15972
  %13 = call i64 @wReg8.135(i64 %pPrivate, i64* %12, i64 %2), !insn.addr !15972
  %sext = mul i64 %1, 4294967296
  %14 = sdiv i64 %sext, 4294967296, !insn.addr !15973
  %narrow = mul nsw i64 %14, 184
  %15 = trunc i64 %0 to i8, !insn.addr !15974
  %16 = inttoptr i64 %narrow to i8*, !insn.addr !15974
  store i8 %15, i8* %16, align 8, !insn.addr !15974
  ret void, !insn.addr !15975
}

define i64 @nm131_set_lna_gain2.136(i64 %arg1, i8 %arg2) local_unnamed_addr {
dec_label_pc_2687a:
  %0 = call i64 @mcount(), !insn.addr !15976
  ret i64 %0, !insn.addr !15977
}

define i8 @nm131_get_video_amplitude(i64 %pPrivate) local_unnamed_addr {
dec_label_pc_2689b:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = call i64 @__decompiler_undefined_function_0()
  %2 = call i64 @__decompiler_undefined_function_0()
  %3 = call i64 @rReg8.103(i64 %pPrivate, i64 %1), !insn.addr !15978
  %4 = and i64 %3, 64, !insn.addr !15979
  %5 = and i64 %0, zext (i8 ptrtoint (i8** @global_var_1f to i8) to i64), !insn.addr !15980
  %6 = or i64 %5, %4, !insn.addr !15981
  %7 = or i64 %6, 32, !insn.addr !15982
  %8 = call i64 @wReg8.135(i64 %2, i64* inttoptr (i64 43 to i64*), i64 %7), !insn.addr !15983
  %9 = trunc i64 %8 to i8, !insn.addr !15984
  ret i8 %9, !insn.addr !15984
}

define i64 @nm131_get_video_amplitude.124() local_unnamed_addr {
dec_label_pc_268cb:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = call i64 @mcount(), !insn.addr !15985
  %2 = urem i64 %0, 256, !insn.addr !15986
  %3 = mul nuw nsw i64 %2, 184, !insn.addr !15987
  %4 = inttoptr i64 %3 to i32*, !insn.addr !15988
  %5 = load i32, i32* %4, align 8, !insn.addr !15988
  %6 = icmp ult i32 %5, 2
  br i1 %6, label %dec_label_pc_268ff, label %dec_label_pc_26930, !insn.addr !15989

dec_label_pc_268ff:                               ; preds = %dec_label_pc_268cb
  %7 = call i64 @rReg8.103(i64 %0, i64 52), !insn.addr !15990
  %8 = and i64 %7, 4294967295, !insn.addr !15991
  %9 = xor i64 %8, 4294967295, !insn.addr !15991
  ret i64 %9, !insn.addr !15992

dec_label_pc_26930:                               ; preds = %dec_label_pc_268cb
  %10 = icmp eq i32 %5, 3, !insn.addr !15993
  %11 = icmp eq i1 %10, false, !insn.addr !15994
  br i1 %11, label %dec_label_pc_26a08, label %dec_label_pc_269d4, !insn.addr !15995

dec_label_pc_269d4:                               ; preds = %dec_label_pc_26930
  %12 = icmp eq i32 %5, 13, !insn.addr !15996
  br i1 %12, label %dec_label_pc_269f6, label %dec_label_pc_269d9, !insn.addr !15997

dec_label_pc_269d9:                               ; preds = %dec_label_pc_269d4
  %13 = call i64 @rReg8.103(i64 %0, i64 52), !insn.addr !15998
  %14 = sub i64 127, %13
  %15 = urem i64 %14, 256, !insn.addr !15999
  ret i64 %15, !insn.addr !16000

dec_label_pc_269f6:                               ; preds = %dec_label_pc_269d4
  %16 = inttoptr i64 %3 to i8*, !insn.addr !16001
  %17 = load i8, i8* %16, align 8, !insn.addr !16001
  %18 = zext i8 %17 to i64, !insn.addr !16001
  ret i64 %18, !insn.addr !16002

dec_label_pc_26a08:                               ; preds = %dec_label_pc_26930
  %19 = call i64 @rReg8.103(i64 %0, i64 53), !insn.addr !16003
  %20 = sub i64 95, %19
  %21 = urem i64 %20, 256, !insn.addr !16004
  ret i64 %21, !insn.addr !16004
}

define void @nm131_set_lna_gain(i64 %pPrivate, i32 %g) local_unnamed_addr {
dec_label_pc_26a31:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = add i64 %0, 2528602040, !insn.addr !16005
  %2 = and i64 %1, 4294967295, !insn.addr !16005
  %3 = inttoptr i64 %2 to i8*, !insn.addr !16006
  %4 = load i8, i8* %3, align 1, !insn.addr !16006
  %5 = trunc i64 %1 to i8, !insn.addr !16006
  %6 = add i8 %4, %5, !insn.addr !16006
  store i8 %6, i8* %3, align 1, !insn.addr !16006
  ret void, !insn.addr !16007
}

define i64 @nm131_set_lna_gain.114(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_26a61:
  %0 = call i64 @mcount(), !insn.addr !16008
  %1 = call i64 @rReg8.103(i64 %arg1, i64 43), !insn.addr !16009
  %2 = and i64 %1, 4294967264, !insn.addr !16010
  %3 = trunc i64 %arg2 to i32, !insn.addr !16011
  %4 = icmp eq i32 %3, 0, !insn.addr !16011
  %5 = icmp eq i1 %4, false, !insn.addr !16012
  br i1 %5, label %dec_label_pc_26a8b, label %dec_label_pc_26a86, !insn.addr !16012

dec_label_pc_26a86:                               ; preds = %dec_label_pc_26a61
  %6 = or i64 %2, or (i64 zext (i32 ptrtoint (i32** @global_var_20 to i32) to i64), i64 zext (i32 ptrtoint (i8** @global_var_11 to i32) to i64)), !insn.addr !16013
  ret i64 %6, !insn.addr !16014

dec_label_pc_26a8b:                               ; preds = %dec_label_pc_26a61
  %7 = icmp eq i32 %3, ptrtoint (i32* @global_var_1 to i32), !insn.addr !16015
  %8 = icmp eq i1 %7, false, !insn.addr !16016
  br i1 %8, label %dec_label_pc_26a95, label %dec_label_pc_26a90, !insn.addr !16016

dec_label_pc_26a90:                               ; preds = %dec_label_pc_26a8b
  %9 = or i64 %2, or (i64 zext (i32 ptrtoint (i32** @global_var_20 to i32) to i64), i64 zext (i32 ptrtoint (i8* @global_var_10 to i32) to i64)), !insn.addr !16017
  ret i64 %9, !insn.addr !16018

dec_label_pc_26a95:                               ; preds = %dec_label_pc_26a8b
  %10 = icmp eq i32 %3, ptrtoint (i32* @global_var_2 to i32), !insn.addr !16019
  %11 = icmp eq i1 %10, false, !insn.addr !16020
  br i1 %11, label %dec_label_pc_26a9f, label %dec_label_pc_26a9a, !insn.addr !16020

dec_label_pc_26a9a:                               ; preds = %dec_label_pc_26a95
  %12 = or i64 %2, or (i64 zext (i32 ptrtoint (i32** @global_var_20 to i32) to i64), i64 zext (i32 ptrtoint (i8* @global_var_f to i32) to i64)), !insn.addr !16021
  ret i64 %12, !insn.addr !16022

dec_label_pc_26a9f:                               ; preds = %dec_label_pc_26a95
  %13 = icmp eq i32 %3, ptrtoint (i8** @global_var_3 to i32), !insn.addr !16023
  %14 = icmp eq i1 %13, false, !insn.addr !16024
  br i1 %14, label %dec_label_pc_26aae, label %dec_label_pc_26aa4, !insn.addr !16024

dec_label_pc_26aa4:                               ; preds = %dec_label_pc_26a9f
  %15 = or i64 %2, or (i64 zext (i32 ptrtoint (i32** @global_var_20 to i32) to i64), i64 zext (i32 ptrtoint (i16** @global_var_e to i32) to i64)), !insn.addr !16025
  ret i64 %15, !insn.addr !16026

dec_label_pc_26aae:                               ; preds = %dec_label_pc_26a9f
  %16 = or i64 %2, zext (i32 ptrtoint (i32** @global_var_20 to i32) to i64), !insn.addr !16027
  ret i64 %16, !insn.addr !16028
}

define i32 @rReg32(i64 %pPrivate, i16 %adr) local_unnamed_addr {
dec_label_pc_26ab0:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = trunc i64 %0 to i32
  %2 = or i32 %1, -75294485
  %3 = add nsw i32 %2, -930937483
  %4 = or i32 %3, zext (i8 ptrtoint ([3 x i8]* @global_var_eb to i8) to i32), !insn.addr !16029
  ret i32 %4, !insn.addr !16029
}

define i64 @rReg32.101(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_26ae0:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = call i64 @__decompiler_undefined_function_0()
  %2 = call i64 @__decompiler_undefined_function_0()
  %3 = call i64 @mcount(), !insn.addr !16030
  %4 = urem i64 %arg1, 256, !insn.addr !16031
  %5 = mul nuw nsw i64 %4, 184, !insn.addr !16032
  %6 = inttoptr i64 %5 to i64*, !insn.addr !16033
  %7 = load i64, i64* %6, align 8, !insn.addr !16033
  %8 = icmp eq i64 %7, 0, !insn.addr !16033
  br i1 %8, label %dec_label_pc_26b25, label %dec_label_pc_26b1c, !insn.addr !16034

dec_label_pc_26b1c:                               ; preds = %dec_label_pc_26ae0
  %9 = inttoptr i64 %5 to i8*, !insn.addr !16035
  %10 = load i8, i8* %9, align 8, !insn.addr !16035
  %11 = icmp eq i8 %10, 0, !insn.addr !16035
  br i1 %11, label %dec_label_pc_26b48, label %dec_label_pc_26b25, !insn.addr !16036

dec_label_pc_26b25:                               ; preds = %dec_label_pc_26b1c, %dec_label_pc_26ae0
  %12 = sext i64 %2 to i128, !insn.addr !16037
  %13 = call i64 @nmi_debug.134(i64 %arg1, i64* bitcast (i32* @global_var_2 to i64*), i64 0, i128 %12, i64 %1, i64 %0), !insn.addr !16037
  ret i64 0, !insn.addr !16038

dec_label_pc_26b48:                               ; preds = %dec_label_pc_26b1c
  ret i64 %5, !insn.addr !16039
}

define i64 @function_26bd5(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4) local_unnamed_addr {
dec_label_pc_26bd5:
  %0 = call i64 @__decompiler_undefined_function_0()
  ret i64 %0, !insn.addr !16040
}

define i8 @nm131_get_mute(i64 %pPrivate) local_unnamed_addr {
dec_label_pc_26bf6:
  %rdi = alloca i64, align 8
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = call i64 @__decompiler_undefined_function_0()
  %rax = alloca i64, align 8
  %2 = call i64 @__decompiler_undefined_function_0()
  store i64 %pPrivate, i64* %rdi, align 8
  %3 = bitcast i64* %rax to i8*
  %4 = trunc i64 %2 to i8
  %5 = mul i8 %4, 2, !insn.addr !16041
  %6 = inttoptr i64 %2 to i8*, !insn.addr !16041
  store i8 %5, i8* %6, align 1, !insn.addr !16041
  %7 = load i64, i64* %rax, align 8, !insn.addr !16042
  %8 = trunc i64 %7 to i8
  %9 = inttoptr i64 %7 to i8*, !insn.addr !16043
  store i8 %8, i8* %9, align 1, !insn.addr !16043
  %10 = load i8, i8* %3, align 8, !insn.addr !16044
  %11 = load i64, i64* %rax, align 8
  %12 = trunc i64 %11 to i8, !insn.addr !16044
  %13 = add i8 %10, %12, !insn.addr !16044
  %14 = inttoptr i64 %11 to i8*, !insn.addr !16044
  store i8 %13, i8* %14, align 1, !insn.addr !16044
  %15 = bitcast i64* %rdi to i32*
  %16 = load i32, i32* %15, align 8, !insn.addr !16045
  %17 = trunc i64 %1 to i32, !insn.addr !16045
  %18 = add i32 %16, %17, !insn.addr !16045
  %19 = inttoptr i64 %pPrivate to i32*, !insn.addr !16045
  store i32 %18, i32* %19, align 4, !insn.addr !16045
  %20 = sub i64 %1, ptrtoint (i32* @global_var_1 to i64), !insn.addr !16046
  %21 = sub i64 %20, ptrtoint (i32* @global_var_1 to i64), !insn.addr !16047
  %22 = icmp eq i64 %21, 0, !insn.addr !16047
  br i1 %22, label %dec_label_pc_26c07, label %dec_label_pc_26c0f, !insn.addr !16047

dec_label_pc_26c07:                               ; preds = %dec_label_pc_26bf6
  %23 = add i64 %0, -30, !insn.addr !16048
  %24 = inttoptr i64 %23 to i8*, !insn.addr !16048
  %25 = load i8, i8* %24, align 1, !insn.addr !16048
  %26 = zext i8 %25 to i32, !insn.addr !16049
  %27 = shl i32 %26, ptrtoint (i8* @global_var_10 to i32), !insn.addr !16049
  %28 = trunc i32 %27 to i8, !insn.addr !16049
  ret i8 %28, !insn.addr !16049

dec_label_pc_26c0f:                               ; preds = %dec_label_pc_26bf6
  %29 = icmp eq i32 %18, 0, !insn.addr !16045
  %30 = bitcast i64* %rdi to i8*
  %31 = load i8, i8* %30, align 8, !insn.addr !16050
  %32 = udiv i8 %31, 2, !insn.addr !16050
  %33 = or i8 %32, %31, !insn.addr !16050
  %34 = load i64, i64* %rdi, align 8, !insn.addr !16050
  %35 = inttoptr i64 %34 to i8*, !insn.addr !16050
  store i8 %33, i8* %35, align 1, !insn.addr !16050
  %36 = icmp eq i64 %21, ptrtoint (i32* @global_var_1 to i64), !insn.addr !16051
  %37 = or i1 %36, %29, !insn.addr !16051
  br i1 %37, label %dec_label_pc_26c15, label %dec_label_pc_26c1e, !insn.addr !16051

dec_label_pc_26c15:                               ; preds = %dec_label_pc_26c0f
  %38 = load i8, i8* %30, align 8, !insn.addr !16052
  %39 = udiv i8 %38, 2, !insn.addr !16052
  %40 = or i8 %39, %38, !insn.addr !16052
  %41 = load i64, i64* %rdi, align 8, !insn.addr !16052
  %42 = inttoptr i64 %41 to i8*, !insn.addr !16052
  store i8 %40, i8* %42, align 1, !insn.addr !16052
  %43 = load i64, i64* %rax, align 8, !insn.addr !16053
  %44 = trunc i64 %43 to i8, !insn.addr !16053
  ret i8 %44, !insn.addr !16053

dec_label_pc_26c1e:                               ; preds = %dec_label_pc_26c0f
  %45 = load i64, i64* %rax, align 8
  %46 = add i64 %45, -125, !insn.addr !16054
  %47 = inttoptr i64 %46 to i8*, !insn.addr !16054
  %48 = load i8, i8* %47, align 1, !insn.addr !16054
  %49 = udiv i8 %48, 2, !insn.addr !16054
  %50 = or i8 %49, %48, !insn.addr !16054
  store i8 %50, i8* %47, align 1, !insn.addr !16054
  %51 = load i64, i64* %rax, align 8, !insn.addr !16054
  %52 = trunc i64 %51 to i8, !insn.addr !16054
  ret i8 %52, !insn.addr !16054
}

define i64 @function_26c22() local_unnamed_addr {
dec_label_pc_26c22:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = call i64 @__decompiler_undefined_function_0()
  %2 = call i1 @__decompiler_undefined_function_2()
  %3 = add i64 %0, -55, !insn.addr !16055
  %4 = inttoptr i64 %3 to i8*, !insn.addr !16055
  %5 = load i8, i8* %4, align 1, !insn.addr !16055
  %6 = trunc i64 %0 to i8, !insn.addr !16055
  %.neg1 = sext i1 %2 to i8
  %.neg2 = sub i8 %.neg1, %6, !insn.addr !16055
  %7 = add i8 %.neg2, %5, !insn.addr !16055
  store i8 %7, i8* %4, align 1, !insn.addr !16055
  ret i64 %1, !insn.addr !16056
}

define i64 @nm131_get_mute.129() local_unnamed_addr {
dec_label_pc_26c26:
  %0 = call i64 @mcount(), !insn.addr !16057
  ret i64 %0, !insn.addr !16057
}

define i8 @nm131_get_brightness(i64 %pPrivate) local_unnamed_addr {
dec_label_pc_26c30:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = trunc i64 %0 to i8, !insn.addr !16058
  ret i8 %1, !insn.addr !16058
}

define i64 @nm131_get_brightness.126() local_unnamed_addr {
dec_label_pc_26c60:
  %0 = call i64 @mcount(), !insn.addr !16059
  ret i64 0, !insn.addr !16060
}

define i8 @nm131_get_volume(i64 %pPrivate) local_unnamed_addr {
dec_label_pc_26c89:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = call i64 @__decompiler_undefined_function_0()
  %2 = load i8, i8* inttoptr (i64 12617219 to i8*), align 1, !insn.addr !16061
  %3 = trunc i64 %0 to i8, !insn.addr !16061
  %4 = add i8 %2, %3, !insn.addr !16061
  store i8 %4, i8* inttoptr (i64 12617219 to i8*), align 1, !insn.addr !16061
  %5 = trunc i64 %1 to i8
  %6 = lshr i64 %0, ptrtoint (i8* @global_var_8 to i64), !insn.addr !16062
  %7 = trunc i64 %6 to i8, !insn.addr !16062
  %factor = mul i8 %5, 2
  %8 = add i8 %factor, %7, !insn.addr !16062
  ret i8 %8, !insn.addr !16062
}

define i64 @function_26c96() local_unnamed_addr {
dec_label_pc_26c96:
  %0 = call i64 @function_4c00000118bec209(), !insn.addr !16063
  ret i64 %0, !insn.addr !16063
}

define i64 @function_26c9c() local_unnamed_addr {
dec_label_pc_26c9c:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = add i64 %0, 4294965760, !insn.addr !16064
  %2 = udiv i64 %1, 64, !insn.addr !16065
  %3 = urem i64 %2, 67108864, !insn.addr !16065
  ret i64 %3, !insn.addr !16066
}

define i64 @function_26ca6(i64 %arg1, i64 %arg2, i64 %arg3) local_unnamed_addr {
dec_label_pc_26ca6:
  %sext = mul i64 %arg3, 4294967296
  %0 = sdiv i64 %sext, 4294967296, !insn.addr !16067
  %narrow = mul nsw i64 %0, 184
  %1 = inttoptr i64 %narrow to i8*, !insn.addr !16068
  %2 = load i8, i8* %1, align 8, !insn.addr !16068
  %3 = zext i8 %2 to i64, !insn.addr !16068
  ret i64 %3, !insn.addr !16068
}

define i64 @nm131_get_volume.122(i64 %arg1) local_unnamed_addr {
dec_label_pc_26cb9:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = call i64 @mcount(), !insn.addr !16069
  %2 = call i64 @rReg8.103(i64 %arg1, i64 53), !insn.addr !16070
  %3 = urem i64 %0, 256, !insn.addr !16071
  %4 = mul nuw nsw i64 %3, 184, !insn.addr !16071
  %5 = inttoptr i64 %4 to i8*, !insn.addr !16072
  %6 = load i8, i8* %5, align 8, !insn.addr !16072
  %7 = icmp eq i8 %6, 0, !insn.addr !16072
  br i1 %7, label %dec_label_pc_26d20, label %dec_label_pc_26d16, !insn.addr !16073

dec_label_pc_26d16:                               ; preds = %dec_label_pc_26cb9
  %8 = sub i64 95, %2, !insn.addr !16074
  %9 = urem i64 %8, 256, !insn.addr !16074
  ret i64 %9, !insn.addr !16075

dec_label_pc_26d20:                               ; preds = %dec_label_pc_26cb9
  %10 = add i64 %2, 4294967216, !insn.addr !16076
  %11 = and i64 %10, 4294967295, !insn.addr !16076
  ret i64 %11, !insn.addr !16077
}

define i32 @nm131_get_overthcount(i64 %pPrivate) local_unnamed_addr {
dec_label_pc_26d29:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = trunc i64 %0 to i32, !insn.addr !16078
  ret i32 %1, !insn.addr !16078
}

define i64 @function_26d2e() local_unnamed_addr {
dec_label_pc_26d2e:
  %0 = call i64 @__decompiler_undefined_function_0()
  ret i64 %0, !insn.addr !16079
}

define i16 @nm131_demod_get_pll_level(i64 %pPrivate) local_unnamed_addr {
dec_label_pc_26d43:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = call i64 @unknown_ba7333(), !insn.addr !16080
  %2 = inttoptr i64 %1 to i8*, !insn.addr !16081
  %3 = load i8, i8* %2, align 1, !insn.addr !16081
  %4 = trunc i64 %1 to i8, !insn.addr !16081
  %5 = add i8 %3, %4, !insn.addr !16081
  store i8 %5, i8* %2, align 1, !insn.addr !16081
  %6 = add i64 %1, -117, !insn.addr !16082
  %7 = inttoptr i64 %6 to i8*, !insn.addr !16082
  %8 = load i8, i8* %7, align 1, !insn.addr !16082
  %9 = trunc i64 %0 to i8, !insn.addr !16082
  %10 = add i8 %8, %9, !insn.addr !16082
  store i8 %10, i8* %7, align 1, !insn.addr !16082
  %11 = call i64 @unknown_fffffffff067f89f(), !insn.addr !16083
  %12 = trunc i64 %11 to i16, !insn.addr !16084
  ret i16 %12, !insn.addr !16084
}

define i64 @nm131_get_overthcount.120(i64 %arg1) local_unnamed_addr {
dec_label_pc_26d59:
  %0 = call i64 @mcount(), !insn.addr !16085
  %1 = call i64 @rReg32.101(i64 %arg1, i64 596), !insn.addr !16086
  ret i64 %1, !insn.addr !16086
}

define i32 @nm131_demod_get_freq_offset(i64 %pPrivate) local_unnamed_addr {
dec_label_pc_26d6c:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = trunc i64 %0 to i32, !insn.addr !16087
  %2 = urem i32 %1, 65536, !insn.addr !16087
  ret i32 %2, !insn.addr !16088
}

define i64 @nm131_demod_get_pll_level.110(i64 %arg1) local_unnamed_addr {
dec_label_pc_26d73:
  %0 = call i64 @mcount(), !insn.addr !16089
  %1 = call i64 @rReg32.101(i64 %arg1, i64 492), !insn.addr !16090
  %2 = trunc i64 %1 to i32, !insn.addr !16091
  %3 = lshr i32 %2, ptrtoint (i8* @global_var_a to i32), !insn.addr !16091
  %4 = and i32 %3, -64513
  %5 = add i32 %4, -1024, !insn.addr !16092
  %6 = trunc i32 %4 to i16, !insn.addr !16093
  %7 = icmp ult i16 %6, 512, !insn.addr !16093
  %8 = icmp eq i1 %7, false, !insn.addr !16094
  %9 = select i1 %8, i32 %5, i32 %4, !insn.addr !16094
  %10 = zext i32 %9 to i64, !insn.addr !16094
  ret i64 %10, !insn.addr !16095
}

define i16 @nm131_demod_get_snr(i64 %pPrivate) local_unnamed_addr {
dec_label_pc_26d9c:
  %0 = call i64 @mcount(), !insn.addr !16096
  %1 = call i64 @rReg32.101(i64 %pPrivate, i64 488), !insn.addr !16097
  %2 = mul i64 %1, zext (i32 ptrtoint (i16* @global_var_4 to i32) to i64), !insn.addr !16098
  %3 = and i64 %2, 4294967294, !insn.addr !16098
  %sext = mul i64 %1, shl (i64 zext (i32 ptrtoint (i16* @global_var_4 to i32) to i64), i64 32)
  %4 = sdiv i64 %sext, 4294967296, !insn.addr !16099
  %5 = mul nsw i64 %4, -838742139, !insn.addr !16099
  %6 = lshr i64 %5, ptrtoint (i32** @global_var_20 to i64), !insn.addr !16099
  %7 = mul i64 %3, ptrtoint (i32* @global_var_1 to i64), !insn.addr !16100
  %8 = add i64 %6, %7, !insn.addr !16100
  %9 = trunc i64 %8 to i32, !insn.addr !16100
  %10 = ashr i32 %9, ptrtoint ([3 x i8]* @global_var_d to i32), !insn.addr !16101
  %11 = trunc i64 %2 to i32, !insn.addr !16102
  %12 = ashr i32 %11, ptrtoint (i8** @global_var_1f to i32), !insn.addr !16102
  %13 = sub i32 %10, %12, !insn.addr !16103
  %14 = trunc i32 %13 to i16, !insn.addr !16104
  ret i16 %14, !insn.addr !16104
}

define i64 @nm131_demod_get_snr.109(i64 %arg1) local_unnamed_addr {
dec_label_pc_26dcc:
  %0 = call i64 @mcount(), !insn.addr !16105
  %1 = call i64 @rReg32.101(i64 %arg1, i64 536), !insn.addr !16106
  ret i64 %1, !insn.addr !16107
}

define i8 @nm131_demod_get_cpll_lock(i64 %pPrivate) local_unnamed_addr {
dec_label_pc_26dee:
  %0 = trunc i64 %pPrivate to i32, !insn.addr !16108
  %1 = shl i32 %0, ptrtoint (i8* @global_var_f to i32), !insn.addr !16108
  %2 = trunc i32 %1 to i8, !insn.addr !16109
  ret i8 %2, !insn.addr !16109
}

define i8 @nm131_demod_get_agc_lock(i64 %pPrivate) local_unnamed_addr {
dec_label_pc_26e09:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = call i64 @__decompiler_undefined_function_0()
  %2 = call i64 @__decompiler_undefined_function_0()
  %3 = zext i64 %2 to i128, !insn.addr !16110
  %4 = zext i64 %0 to i128, !insn.addr !16110
  %5 = mul i128 %4, 9223372036854775808, !insn.addr !16110
  %6 = or i128 %5, %3, !insn.addr !16110
  %7 = zext i64 %1 to i128, !insn.addr !16110
  %8 = udiv i128 %6, %7, !insn.addr !16110
  %9 = trunc i128 %8 to i64, !insn.addr !16110
  %10 = call i64 @nmi_log10.264(i64 %9), !insn.addr !16111
  %11 = trunc i64 %10 to i8
  %12 = mul i8 %11, trunc (i64 mul (i64 zext (i32 trunc (i64 add (i64 ptrtoint (i16* @global_var_4 to i64), i64 1) to i32) to i64), i64 zext (i32 trunc (i64 add (i64 ptrtoint (i16* @global_var_4 to i64), i64 1) to i32) to i64)) to i8), !insn.addr !16112
  ret i8 %12, !insn.addr !16112
}

define i64 @nm131_demod_get_cpll_lock.108(i64 %arg1) local_unnamed_addr {
dec_label_pc_26e1e:
  %0 = call i64 @mcount(), !insn.addr !16113
  %1 = call i64 @rReg32.101(i64 %arg1, i64 480), !insn.addr !16114
  %2 = trunc i64 %1 to i32, !insn.addr !16115
  %3 = icmp eq i32 %2, ptrtoint (i32* @global_var_1 to i32), !insn.addr !16115
  %4 = zext i1 %3 to i64, !insn.addr !16116
  %5 = and i64 %1, -256, !insn.addr !16116
  %6 = or i64 %5, %4, !insn.addr !16116
  ret i64 %6, !insn.addr !16117
}

define i64 @nm131_demod_get_agc_lock.107(i64 %arg1) local_unnamed_addr {
dec_label_pc_26e39:
  %0 = call i64 @mcount(), !insn.addr !16118
  ret i64 %0, !insn.addr !16119
}

define i64 @nm131_demod_dagc_gain(i64 %pPrivate) local_unnamed_addr {
dec_label_pc_26e52:
  %0 = call i64 @__decompiler_undefined_function_0()
  ret i64 %0
}

define i64 @function_26e53() local_unnamed_addr {
dec_label_pc_26e53:
  %0 = call i64 @__decompiler_undefined_function_0()
  ret i64 %0, !insn.addr !16120
}

define i64 @function_26e57(i64 %arg1) local_unnamed_addr {
dec_label_pc_26e57:
  %storemerge.reg2mem = alloca i64, !insn.addr !16121
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = call i1 @__decompiler_undefined_function_2()
  br i1 %1, label %dec_label_pc_26e68, label %dec_label_pc_26e59, !insn.addr !16121

dec_label_pc_26e59:                               ; preds = %dec_label_pc_26e57
  %2 = call i64 @rReg32.101(i64 %0, i64 340), !insn.addr !16122
  store i64 %2, i64* %storemerge.reg2mem, !insn.addr !16123
  br label %dec_label_pc_26e75, !insn.addr !16123

dec_label_pc_26e68:                               ; preds = %dec_label_pc_26e57
  %3 = call i64 @rReg32.101(i64 %0, i64 396), !insn.addr !16124
  store i64 %3, i64* %storemerge.reg2mem, !insn.addr !16124
  br label %dec_label_pc_26e75, !insn.addr !16124

dec_label_pc_26e75:                               ; preds = %dec_label_pc_26e68, %dec_label_pc_26e59
  %storemerge.reload = load i64, i64* %storemerge.reg2mem
  %4 = trunc i64 %storemerge.reload to i32, !insn.addr !16125
  %5 = icmp eq i32 %4, ptrtoint (i32* @global_var_1 to i32), !insn.addr !16125
  %6 = zext i1 %5 to i64, !insn.addr !16126
  %7 = and i64 %storemerge.reload, -256, !insn.addr !16126
  %8 = or i64 %7, %6, !insn.addr !16126
  ret i64 %8, !insn.addr !16127
}

define i64 @nm131_demod_dagc_gain.106(i64 %arg1) local_unnamed_addr {
dec_label_pc_26e82:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = call i64 @mcount(), !insn.addr !16128
  %2 = urem i64 %0, 256, !insn.addr !16129
  ret i64 %2, !insn.addr !16129
}

define void @nm131_demod_get_status(i64 %pPrivate, i64 %p) local_unnamed_addr {
dec_label_pc_26e93:
  %rax = alloca i64, align 8
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = bitcast i64* %rax to i8*
  %2 = trunc i64 %0 to i8
  %3 = mul i8 %2, 2, !insn.addr !16130
  %4 = inttoptr i64 %0 to i8*, !insn.addr !16130
  store i8 %3, i8* %4, align 1, !insn.addr !16130
  %5 = load i8, i8* %1, align 8, !insn.addr !16131
  %6 = icmp eq i8 %5, 0, !insn.addr !16131
  %7 = icmp eq i1 %6, false, !insn.addr !16132
  br i1 %7, label %dec_label_pc_26eb5, label %dec_label_pc_26ea4, !insn.addr !16132

dec_label_pc_26ea4:                               ; preds = %dec_label_pc_26e93
  %8 = call i64 @rReg32.101(i64 %pPrivate, i64 348), !insn.addr !16133
  br label %dec_label_pc_26ec1, !insn.addr !16134

dec_label_pc_26eb5:                               ; preds = %dec_label_pc_26e93
  %9 = call i64 @rReg32.101(i64 %pPrivate, i64 404), !insn.addr !16135
  br label %dec_label_pc_26ec1, !insn.addr !16136

dec_label_pc_26ec1:                               ; preds = %dec_label_pc_26eb5, %dec_label_pc_26ea4
  ret void, !insn.addr !16137
}

define i64 @nm131_demod_get_status.112(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_26ec3:
  %0 = call i64 @mcount(), !insn.addr !16138
  %1 = call i64 @nm131_demod_get_agc_lock.107(i64 %arg1), !insn.addr !16139
  %2 = trunc i64 %1 to i8, !insn.addr !16140
  %3 = add i64 %arg2, ptrtoint (i8* @global_var_10 to i64), !insn.addr !16140
  %4 = inttoptr i64 %3 to i8*, !insn.addr !16140
  store i8 %2, i8* %4, align 1, !insn.addr !16140
  %5 = call i64 @nm131_demod_get_cpll_lock.108(i64 %arg1), !insn.addr !16141
  %6 = trunc i64 %5 to i8, !insn.addr !16142
  %7 = add i64 %arg2, ptrtoint (i8** @global_var_11 to i64), !insn.addr !16142
  %8 = inttoptr i64 %7 to i8*, !insn.addr !16142
  store i8 %6, i8* %8, align 1, !insn.addr !16142
  ret i64 %5, !insn.addr !16143
}

define void @nm131_get_lna_gain(i64 %pPrivate, i64 %pg) local_unnamed_addr {
dec_label_pc_26eeb:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = call i64 @__decompiler_undefined_function_0()
  %2 = call i64 @nm131_demod_dagc_gain.106(i64 %pPrivate), !insn.addr !16144
  %3 = inttoptr i64 %1 to i64*, !insn.addr !16145
  store i64 %2, i64* %3, align 8, !insn.addr !16145
  %4 = call i64 @nm131_demod_get_snr.109(i64 %0), !insn.addr !16146
  %5 = trunc i64 %4 to i16, !insn.addr !16147
  %6 = add i64 %1, ptrtoint ([4 x i8]* @global_var_c to i64), !insn.addr !16147
  %7 = inttoptr i64 %6 to i16*, !insn.addr !16147
  store i16 %5, i16* %7, align 2, !insn.addr !16147
  %8 = call i16 @nm131_demod_get_snr(i64 %0), !insn.addr !16148
  %9 = sext i16 %8 to i32, !insn.addr !16149
  %10 = add i64 %1, ptrtoint (i8* @global_var_8 to i64), !insn.addr !16149
  %11 = inttoptr i64 %10 to i32*, !insn.addr !16149
  store i32 %9, i32* %11, align 4, !insn.addr !16149
  %12 = call i64 @nm131_demod_get_pll_level.110(i64 %0), !insn.addr !16150
  %13 = trunc i64 %12 to i16, !insn.addr !16151
  %14 = add i64 %1, ptrtoint (i16** @global_var_e to i64), !insn.addr !16151
  %15 = inttoptr i64 %14 to i16*, !insn.addr !16151
  store i16 %13, i16* %15, align 2, !insn.addr !16151
  ret void, !insn.addr !16152
}

define i64 @nm131_get_lna_gain.113(i64 %arg1, i64* %arg2) local_unnamed_addr {
dec_label_pc_26f1b:
  %rax.0.reg2mem = alloca i64, !insn.addr !16153
  %r14.0.reg2mem = alloca i64, !insn.addr !16153
  %rdx.0.reg2mem = alloca i16, !insn.addr !16153
  %rdi = alloca i64, align 8
  %0 = call i64 @__decompiler_undefined_function_0()
  %rsi = alloca i64, align 8
  %1 = ptrtoint i64* %arg2 to i64
  %2 = call i64 @mcount(), !insn.addr !16154
  %3 = call i64 @rReg8.103(i64 %arg1, i64 62), !insn.addr !16155
  %4 = call i64 @rReg8.103(i64 %arg1, i64 45), !insn.addr !16156
  %5 = trunc i64 %4 to i8, !insn.addr !16157
  %6 = icmp eq i8 %5, 0, !insn.addr !16157
  %7 = icmp eq i1 %6, false, !insn.addr !16158
  %8 = trunc i64 %3 to i8
  br i1 %7, label %dec_label_pc_26fe8, label %dec_label_pc_26f57, !insn.addr !16158

dec_label_pc_26f57:                               ; preds = %dec_label_pc_26f1b
  %9 = icmp eq i8 %8, ptrtoint (i8* @global_var_f to i8), !insn.addr !16159
  br i1 %9, label %dec_label_pc_26fa2, label %dec_label_pc_26f5d, !insn.addr !16160

dec_label_pc_26f5d:                               ; preds = %dec_label_pc_26f57
  %10 = icmp ugt i8 %8, ptrtoint (i8* @global_var_f to i8)
  br i1 %10, label %dec_label_pc_26f72, label %dec_label_pc_26f63, !insn.addr !16161

dec_label_pc_26f63:                               ; preds = %dec_label_pc_26f5d
  %11 = icmp eq i8 %8, ptrtoint (i8** @global_var_3 to i8), !insn.addr !16162
  br i1 %11, label %dec_label_pc_26f86, label %dec_label_pc_26f69, !insn.addr !16163

dec_label_pc_26f69:                               ; preds = %dec_label_pc_26f63
  %12 = icmp eq i8 %8, ptrtoint (i8** @global_var_7 to i8), !insn.addr !16164
  %13 = icmp eq i1 %12, false, !insn.addr !16165
  br i1 %13, label %dec_label_pc_26fda, label %dec_label_pc_26f94, !insn.addr !16165

dec_label_pc_26f72:                               ; preds = %dec_label_pc_26f5d
  switch i8 %8, label %dec_label_pc_26f7e [
    i8 63, label %dec_label_pc_26fbe
    i8 127, label %dec_label_pc_26fcc
  ]

dec_label_pc_26f7e:                               ; preds = %dec_label_pc_26f72
  %14 = icmp eq i8 %8, ptrtoint (i8** @global_var_1f to i8), !insn.addr !16166
  %15 = icmp eq i1 %14, false, !insn.addr !16167
  br i1 %15, label %dec_label_pc_26fda, label %dec_label_pc_26fb0, !insn.addr !16167

dec_label_pc_26f86:                               ; preds = %dec_label_pc_26f63
  %16 = bitcast i64* %arg2 to i16*, !insn.addr !16168
  store i16 -900, i16* %16, align 2, !insn.addr !16168
  %17 = add i64 %1, ptrtoint (i8** @global_var_7 to i64), !insn.addr !16169
  %18 = inttoptr i64 %17 to i8*, !insn.addr !16169
  store i8 -30, i8* %18, align 1, !insn.addr !16169
  br label %dec_label_pc_270dc, !insn.addr !16170

dec_label_pc_26f94:                               ; preds = %dec_label_pc_26f69
  %19 = bitcast i64* %arg2 to i16*, !insn.addr !16171
  store i16 -400, i16* %19, align 2, !insn.addr !16171
  %20 = add i64 %1, ptrtoint (i8** @global_var_7 to i64), !insn.addr !16172
  %21 = inttoptr i64 %20 to i8*, !insn.addr !16172
  store i8 -29, i8* %21, align 1, !insn.addr !16172
  br label %dec_label_pc_270dc, !insn.addr !16173

dec_label_pc_26fa2:                               ; preds = %dec_label_pc_26f57
  %22 = bitcast i64* %arg2 to i16*, !insn.addr !16174
  store i16 100, i16* %22, align 2, !insn.addr !16174
  %23 = add i64 %1, ptrtoint (i8** @global_var_7 to i64), !insn.addr !16175
  %24 = inttoptr i64 %23 to i8*, !insn.addr !16175
  store i8 -28, i8* %24, align 1, !insn.addr !16175
  br label %dec_label_pc_270dc, !insn.addr !16176

dec_label_pc_26fb0:                               ; preds = %dec_label_pc_26f7e
  %25 = bitcast i64* %arg2 to i16*, !insn.addr !16177
  store i16 600, i16* %25, align 2, !insn.addr !16177
  %26 = add i64 %1, ptrtoint (i8** @global_var_7 to i64), !insn.addr !16178
  %27 = inttoptr i64 %26 to i8*, !insn.addr !16178
  store i8 -27, i8* %27, align 1, !insn.addr !16178
  br label %dec_label_pc_270dc, !insn.addr !16179

dec_label_pc_26fbe:                               ; preds = %dec_label_pc_26f72
  %28 = bitcast i64* %arg2 to i16*, !insn.addr !16180
  store i16 1200, i16* %28, align 2, !insn.addr !16180
  %29 = add i64 %1, ptrtoint (i8** @global_var_7 to i64), !insn.addr !16181
  %30 = inttoptr i64 %29 to i8*, !insn.addr !16181
  store i8 -26, i8* %30, align 1, !insn.addr !16181
  br label %dec_label_pc_270dc, !insn.addr !16182

dec_label_pc_26fcc:                               ; preds = %dec_label_pc_26f72
  %31 = bitcast i64* %arg2 to i16*, !insn.addr !16183
  store i16 1700, i16* %31, align 2, !insn.addr !16183
  %32 = add i64 %1, ptrtoint (i8** @global_var_7 to i64), !insn.addr !16184
  %33 = inttoptr i64 %32 to i8*, !insn.addr !16184
  store i8 -25, i8* %33, align 1, !insn.addr !16184
  br label %dec_label_pc_270dc, !insn.addr !16185

dec_label_pc_26fda:                               ; preds = %dec_label_pc_26f7e, %dec_label_pc_26f69
  %34 = bitcast i64* %arg2 to i16*, !insn.addr !16186
  store i16 -900, i16* %34, align 2, !insn.addr !16186
  %35 = add i64 %1, ptrtoint (i8** @global_var_7 to i64), !insn.addr !16187
  %36 = inttoptr i64 %35 to i8*, !insn.addr !16187
  store i8 -30, i8* %36, align 1, !insn.addr !16187
  br label %dec_label_pc_270dc, !insn.addr !16188

dec_label_pc_26fe8:                               ; preds = %dec_label_pc_26f1b
  %37 = icmp eq i8 %8, ptrtoint (i8** @global_var_17 to i8), !insn.addr !16189
  br i1 %37, label %dec_label_pc_27091, label %dec_label_pc_26ff2, !insn.addr !16190

dec_label_pc_26ff2:                               ; preds = %dec_label_pc_26fe8
  %38 = icmp ugt i8 %8, ptrtoint (i8** @global_var_17 to i8)
  br i1 %38, label %dec_label_pc_27028, label %dec_label_pc_26ff8, !insn.addr !16191

dec_label_pc_26ff8:                               ; preds = %dec_label_pc_26ff2
  %39 = icmp eq i8 %8, ptrtoint (i8** @global_var_7 to i8), !insn.addr !16192
  br i1 %39, label %dec_label_pc_27070, label %dec_label_pc_26ffe, !insn.addr !16193

dec_label_pc_26ffe:                               ; preds = %dec_label_pc_26ff8
  %40 = icmp ugt i8 %8, ptrtoint (i8** @global_var_7 to i8)
  br i1 %40, label %dec_label_pc_27016, label %dec_label_pc_27004, !insn.addr !16194

dec_label_pc_27004:                               ; preds = %dec_label_pc_26ffe
  %41 = icmp eq i8 %8, ptrtoint (i8** @global_var_3 to i8), !insn.addr !16195
  br i1 %41, label %dec_label_pc_2705a, label %dec_label_pc_2700a, !insn.addr !16196

dec_label_pc_2700a:                               ; preds = %dec_label_pc_27004
  %42 = icmp eq i8 %8, ptrtoint (i8* @global_var_5 to i8), !insn.addr !16197
  %43 = icmp eq i1 %42, false, !insn.addr !16198
  br i1 %43, label %dec_label_pc_270d3, label %dec_label_pc_27065, !insn.addr !16198

dec_label_pc_27016:                               ; preds = %dec_label_pc_26ffe
  %44 = icmp eq i8 %8, ptrtoint (i8** @global_var_b to i8), !insn.addr !16199
  br i1 %44, label %dec_label_pc_2707b, label %dec_label_pc_2701c, !insn.addr !16200

dec_label_pc_2701c:                               ; preds = %dec_label_pc_27016
  %45 = icmp eq i8 %8, ptrtoint (i8* @global_var_f to i8), !insn.addr !16201
  %46 = icmp eq i1 %45, false, !insn.addr !16202
  br i1 %46, label %dec_label_pc_270d3, label %dec_label_pc_27086, !insn.addr !16202

dec_label_pc_27028:                               ; preds = %dec_label_pc_26ff2
  %47 = icmp eq i8 %8, 63, !insn.addr !16203
  br i1 %47, label %dec_label_pc_270b2, label %dec_label_pc_27032, !insn.addr !16204

dec_label_pc_27032:                               ; preds = %dec_label_pc_27028
  %48 = icmp ult i8 %8, 64
  br i1 %48, label %dec_label_pc_27038, label %dec_label_pc_2704a, !insn.addr !16205

dec_label_pc_27038:                               ; preds = %dec_label_pc_27032
  %49 = icmp eq i8 %8, ptrtoint (i8** @global_var_1f to i8), !insn.addr !16206
  br i1 %49, label %dec_label_pc_2709c, label %dec_label_pc_2703e, !insn.addr !16207

dec_label_pc_2703e:                               ; preds = %dec_label_pc_27038
  %50 = icmp eq i8 %8, 47, !insn.addr !16208
  %51 = icmp eq i1 %50, false, !insn.addr !16209
  br i1 %51, label %dec_label_pc_270d3, label %dec_label_pc_270a7, !insn.addr !16209

dec_label_pc_2704a:                               ; preds = %dec_label_pc_27032
  %52 = icmp eq i8 %8, 95, !insn.addr !16210
  br i1 %52, label %dec_label_pc_270bd, label %dec_label_pc_27052, !insn.addr !16211

dec_label_pc_27052:                               ; preds = %dec_label_pc_2704a
  %53 = icmp eq i8 %8, 127, !insn.addr !16212
  %54 = icmp eq i1 %53, false, !insn.addr !16213
  br i1 %54, label %dec_label_pc_270d3, label %dec_label_pc_270c8, !insn.addr !16213

dec_label_pc_2705a:                               ; preds = %dec_label_pc_27004
  %55 = bitcast i64* %arg2 to i16*, !insn.addr !16214
  store i16 -900, i16* %55, align 2, !insn.addr !16214
  %56 = add i64 %1, ptrtoint (i8** @global_var_7 to i64), !insn.addr !16215
  %57 = inttoptr i64 %56 to i8*, !insn.addr !16215
  store i8 -29, i8* %57, align 1, !insn.addr !16215
  br label %dec_label_pc_270dc, !insn.addr !16216

dec_label_pc_27065:                               ; preds = %dec_label_pc_2700a
  %58 = bitcast i64* %arg2 to i16*, !insn.addr !16217
  store i16 -700, i16* %58, align 2, !insn.addr !16217
  %59 = add i64 %1, ptrtoint (i8** @global_var_7 to i64), !insn.addr !16218
  %60 = inttoptr i64 %59 to i8*, !insn.addr !16218
  store i8 -28, i8* %60, align 1, !insn.addr !16218
  br label %dec_label_pc_270dc, !insn.addr !16219

dec_label_pc_27070:                               ; preds = %dec_label_pc_26ff8
  %61 = bitcast i64* %arg2 to i16*, !insn.addr !16220
  store i16 -400, i16* %61, align 2, !insn.addr !16220
  %62 = add i64 %1, ptrtoint (i8** @global_var_7 to i64), !insn.addr !16221
  %63 = inttoptr i64 %62 to i8*, !insn.addr !16221
  store i8 -27, i8* %63, align 1, !insn.addr !16221
  br label %dec_label_pc_270dc, !insn.addr !16222

dec_label_pc_2707b:                               ; preds = %dec_label_pc_27016
  %64 = bitcast i64* %arg2 to i16*, !insn.addr !16223
  store i16 -100, i16* %64, align 2, !insn.addr !16223
  %65 = add i64 %1, ptrtoint (i8** @global_var_7 to i64), !insn.addr !16224
  %66 = inttoptr i64 %65 to i8*, !insn.addr !16224
  store i8 -26, i8* %66, align 1, !insn.addr !16224
  br label %dec_label_pc_270dc, !insn.addr !16225

dec_label_pc_27086:                               ; preds = %dec_label_pc_2701c
  %67 = bitcast i64* %arg2 to i16*, !insn.addr !16226
  store i16 100, i16* %67, align 2, !insn.addr !16226
  %68 = add i64 %1, ptrtoint (i8** @global_var_7 to i64), !insn.addr !16227
  %69 = inttoptr i64 %68 to i8*, !insn.addr !16227
  store i8 -25, i8* %69, align 1, !insn.addr !16227
  br label %dec_label_pc_270dc, !insn.addr !16228

dec_label_pc_27091:                               ; preds = %dec_label_pc_26fe8
  %70 = bitcast i64* %arg2 to i16*, !insn.addr !16229
  store i16 300, i16* %70, align 2, !insn.addr !16229
  %71 = add i64 %1, ptrtoint (i8** @global_var_7 to i64), !insn.addr !16230
  %72 = inttoptr i64 %71 to i8*, !insn.addr !16230
  store i8 -24, i8* %72, align 1, !insn.addr !16230
  br label %dec_label_pc_270dc, !insn.addr !16231

dec_label_pc_2709c:                               ; preds = %dec_label_pc_27038
  %73 = bitcast i64* %arg2 to i16*, !insn.addr !16232
  store i16 600, i16* %73, align 2, !insn.addr !16232
  %74 = add i64 %1, ptrtoint (i8** @global_var_7 to i64), !insn.addr !16233
  %75 = inttoptr i64 %74 to i8*, !insn.addr !16233
  store i8 -23, i8* %75, align 1, !insn.addr !16233
  br label %dec_label_pc_270dc, !insn.addr !16234

dec_label_pc_270a7:                               ; preds = %dec_label_pc_2703e
  %76 = bitcast i64* %arg2 to i16*, !insn.addr !16235
  store i16 900, i16* %76, align 2, !insn.addr !16235
  %77 = add i64 %1, ptrtoint (i8** @global_var_7 to i64), !insn.addr !16236
  %78 = inttoptr i64 %77 to i8*, !insn.addr !16236
  store i8 -22, i8* %78, align 1, !insn.addr !16236
  br label %dec_label_pc_270dc, !insn.addr !16237

dec_label_pc_270b2:                               ; preds = %dec_label_pc_27028
  %79 = bitcast i64* %arg2 to i16*, !insn.addr !16238
  store i16 1200, i16* %79, align 2, !insn.addr !16238
  %80 = add i64 %1, ptrtoint (i8** @global_var_7 to i64), !insn.addr !16239
  %81 = inttoptr i64 %80 to i8*, !insn.addr !16239
  store i8 ptrtoint ([3 x i8]* @global_var_eb to i8), i8* %81, align 1, !insn.addr !16239
  br label %dec_label_pc_270dc, !insn.addr !16240

dec_label_pc_270bd:                               ; preds = %dec_label_pc_2704a
  %82 = bitcast i64* %arg2 to i16*, !insn.addr !16241
  store i16 1400, i16* %82, align 2, !insn.addr !16241
  %83 = add i64 %1, ptrtoint (i8** @global_var_7 to i64), !insn.addr !16242
  %84 = inttoptr i64 %83 to i8*, !insn.addr !16242
  store i8 ptrtoint (i8* @global_var_ec to i8), i8* %84, align 1, !insn.addr !16242
  br label %dec_label_pc_270dc, !insn.addr !16243

dec_label_pc_270c8:                               ; preds = %dec_label_pc_27052
  %85 = bitcast i64* %arg2 to i16*, !insn.addr !16244
  store i16 1700, i16* %85, align 2, !insn.addr !16244
  %86 = add i64 %1, ptrtoint (i8** @global_var_7 to i64), !insn.addr !16245
  %87 = inttoptr i64 %86 to i8*, !insn.addr !16245
  store i8 -19, i8* %87, align 1, !insn.addr !16245
  br label %dec_label_pc_270dc, !insn.addr !16246

dec_label_pc_270d3:                               ; preds = %dec_label_pc_27052, %dec_label_pc_2703e, %dec_label_pc_2701c, %dec_label_pc_2700a
  %88 = bitcast i64* %arg2 to i16*, !insn.addr !16247
  store i16 -900, i16* %88, align 2, !insn.addr !16247
  %89 = add i64 %1, ptrtoint (i8** @global_var_7 to i64), !insn.addr !16248
  %90 = inttoptr i64 %89 to i8*, !insn.addr !16248
  store i8 -29, i8* %90, align 1, !insn.addr !16248
  br label %dec_label_pc_270dc, !insn.addr !16248

dec_label_pc_270dc:                               ; preds = %dec_label_pc_270d3, %dec_label_pc_270c8, %dec_label_pc_270bd, %dec_label_pc_270b2, %dec_label_pc_270a7, %dec_label_pc_2709c, %dec_label_pc_27091, %dec_label_pc_27086, %dec_label_pc_2707b, %dec_label_pc_27070, %dec_label_pc_27065, %dec_label_pc_2705a, %dec_label_pc_26fda, %dec_label_pc_26fcc, %dec_label_pc_26fbe, %dec_label_pc_26fb0, %dec_label_pc_26fa2, %dec_label_pc_26f94, %dec_label_pc_26f86
  %91 = urem i64 %0, 256, !insn.addr !16249
  %narrow = mul nuw nsw i64 %91, 184
  %92 = inttoptr i64 %narrow to i8*, !insn.addr !16250
  %93 = load i8, i8* %92, align 8, !insn.addr !16250
  %94 = icmp eq i8 %93, 0, !insn.addr !16250
  br i1 %94, label %dec_label_pc_270f5, label %dec_label_pc_270f1, !insn.addr !16251

dec_label_pc_270f1:                               ; preds = %dec_label_pc_270dc
  %95 = add i64 %1, ptrtoint (i8** @global_var_7 to i64), !insn.addr !16252
  %96 = inttoptr i64 %95 to i8*, !insn.addr !16252
  %97 = load i8, i8* %96, align 1, !insn.addr !16252
  %98 = urem i8 %97, 64, !insn.addr !16252
  store i8 %98, i8* %96, align 1, !insn.addr !16252
  br label %dec_label_pc_270f5, !insn.addr !16252

dec_label_pc_270f5:                               ; preds = %dec_label_pc_270f1, %dec_label_pc_270dc
  %99 = call i64 @rReg8.103(i64 %arg1, i64 64), !insn.addr !16253
  %100 = call i64 @rReg8.103(i64 %arg1, i64 65), !insn.addr !16254
  %101 = trunc i64 %100 to i32, !insn.addr !16255
  %102 = urem i32 %101, 256, !insn.addr !16256
  %103 = lshr i32 %102, ptrtoint (i8* @global_var_5 to i32), !insn.addr !16256
  %104 = trunc i64 %99 to i32
  %105 = urem i32 %104, 256
  %106 = mul i32 %105, ptrtoint (i8* @global_var_8 to i32), !insn.addr !16257
  %107 = or i32 %103, %106, !insn.addr !16258
  %108 = icmp eq i32 %107, ptrtoint (i8** @global_var_17 to i32), !insn.addr !16259
  br i1 %108, label %dec_label_pc_272a1, label %dec_label_pc_27134, !insn.addr !16260

dec_label_pc_27134:                               ; preds = %dec_label_pc_270f5
  %109 = icmp ugt i32 %107, ptrtoint (i8** @global_var_17 to i32)
  br i1 %109, label %dec_label_pc_2719e, label %dec_label_pc_2713a, !insn.addr !16261

dec_label_pc_2713a:                               ; preds = %dec_label_pc_27134
  %110 = icmp eq i32 %107, ptrtoint (i8** @global_var_3 to i32), !insn.addr !16262
  br i1 %110, label %dec_label_pc_272dd, label %dec_label_pc_27144, !insn.addr !16263

dec_label_pc_27144:                               ; preds = %dec_label_pc_2713a
  %111 = icmp ugt i32 %107, ptrtoint (i8** @global_var_3 to i32)
  br i1 %111, label %dec_label_pc_27165, label %dec_label_pc_2714a, !insn.addr !16264

dec_label_pc_2714a:                               ; preds = %dec_label_pc_27144
  %112 = icmp eq i32 %107, ptrtoint (i32* @global_var_1 to i32), !insn.addr !16265
  br i1 %112, label %dec_label_pc_272f5, label %dec_label_pc_27154, !insn.addr !16266

dec_label_pc_27154:                               ; preds = %dec_label_pc_2714a
  %113 = icmp ugt i32 %107, ptrtoint (i32* @global_var_1 to i32)
  %114 = add i64 %1, ptrtoint (i32* @global_var_2 to i64)
  %115 = inttoptr i64 %114 to i16*
  br i1 %113, label %dec_label_pc_272e9, label %dec_label_pc_27301, !insn.addr !16267

dec_label_pc_27165:                               ; preds = %dec_label_pc_27144
  %116 = icmp eq i32 %107, ptrtoint (i8** @global_var_7 to i32), !insn.addr !16268
  br i1 %116, label %dec_label_pc_272c5, label %dec_label_pc_2716f, !insn.addr !16269

dec_label_pc_2716f:                               ; preds = %dec_label_pc_27165
  %117 = icmp ugt i32 %107, ptrtoint (i8** @global_var_7 to i32)
  br i1 %117, label %dec_label_pc_27185, label %dec_label_pc_27175, !insn.addr !16270

dec_label_pc_27175:                               ; preds = %dec_label_pc_2716f
  %118 = icmp eq i32 %107, ptrtoint (i8* @global_var_5 to i32), !insn.addr !16271
  %119 = icmp eq i1 %118, false, !insn.addr !16272
  br i1 %119, label %dec_label_pc_2730d, label %dec_label_pc_272d1, !insn.addr !16272

dec_label_pc_27185:                               ; preds = %dec_label_pc_2716f
  %120 = icmp eq i32 %107, ptrtoint (i8** @global_var_b to i32), !insn.addr !16273
  br i1 %120, label %dec_label_pc_272b9, label %dec_label_pc_2718f, !insn.addr !16274

dec_label_pc_2718f:                               ; preds = %dec_label_pc_27185
  %121 = icmp eq i32 %107, ptrtoint (i8* @global_var_f to i32), !insn.addr !16275
  %122 = icmp eq i1 %121, false, !insn.addr !16276
  br i1 %122, label %dec_label_pc_2730d, label %dec_label_pc_272ad, !insn.addr !16276

dec_label_pc_2719e:                               ; preds = %dec_label_pc_27134
  %123 = icmp eq i32 %107, 127, !insn.addr !16277
  br i1 %123, label %dec_label_pc_27259, label %dec_label_pc_271a8, !insn.addr !16278

dec_label_pc_271a8:                               ; preds = %dec_label_pc_2719e
  %124 = icmp ult i32 %107, 128
  br i1 %124, label %dec_label_pc_271ae, label %dec_label_pc_271e6, !insn.addr !16279

dec_label_pc_271ae:                               ; preds = %dec_label_pc_271a8
  %125 = icmp eq i32 %107, 47, !insn.addr !16280
  br i1 %125, label %dec_label_pc_27286, label %dec_label_pc_271b8, !insn.addr !16281

dec_label_pc_271b8:                               ; preds = %dec_label_pc_271ae
  %126 = icmp ult i32 %107, 48
  br i1 %126, label %dec_label_pc_271be, label %dec_label_pc_271cd, !insn.addr !16282

dec_label_pc_271be:                               ; preds = %dec_label_pc_271b8
  %127 = icmp eq i32 %107, ptrtoint (i8** @global_var_1f to i32), !insn.addr !16283
  %128 = icmp eq i1 %127, false, !insn.addr !16284
  br i1 %128, label %dec_label_pc_2730d, label %dec_label_pc_27295, !insn.addr !16284

dec_label_pc_271cd:                               ; preds = %dec_label_pc_271b8
  %129 = icmp eq i32 %107, 63, !insn.addr !16285
  br i1 %129, label %dec_label_pc_27277, label %dec_label_pc_271d7, !insn.addr !16286

dec_label_pc_271d7:                               ; preds = %dec_label_pc_271cd
  %130 = icmp eq i32 %107, 95, !insn.addr !16287
  %131 = icmp eq i1 %130, false, !insn.addr !16288
  br i1 %131, label %dec_label_pc_2730d, label %dec_label_pc_27268, !insn.addr !16288

dec_label_pc_271e6:                               ; preds = %dec_label_pc_271a8
  %132 = icmp eq i32 %107, 511, !insn.addr !16289
  br i1 %132, label %dec_label_pc_2723b, label %dec_label_pc_271ef, !insn.addr !16290

dec_label_pc_271ef:                               ; preds = %dec_label_pc_271e6
  %133 = icmp ult i32 %107, 512
  br i1 %133, label %dec_label_pc_271f8, label %dec_label_pc_27207, !insn.addr !16291

dec_label_pc_271f8:                               ; preds = %dec_label_pc_271ef
  %134 = icmp eq i32 %107, 255, !insn.addr !16292
  %135 = icmp eq i1 %134, false, !insn.addr !16293
  br i1 %135, label %dec_label_pc_2730d, label %dec_label_pc_2724a, !insn.addr !16293

dec_label_pc_27207:                               ; preds = %dec_label_pc_271ef
  %136 = icmp eq i32 %107, 1023, !insn.addr !16294
  br i1 %136, label %dec_label_pc_2722c, label %dec_label_pc_27210, !insn.addr !16295

dec_label_pc_27210:                               ; preds = %dec_label_pc_27207
  %137 = icmp eq i32 %107, 2047, !insn.addr !16296
  %138 = icmp eq i1 %137, false, !insn.addr !16297
  br i1 %138, label %dec_label_pc_2730d, label %dec_label_pc_2721d, !insn.addr !16297

dec_label_pc_2721d:                               ; preds = %dec_label_pc_27210
  %139 = add i64 %1, ptrtoint (i32* @global_var_2 to i64), !insn.addr !16298
  %140 = inttoptr i64 %139 to i16*, !insn.addr !16298
  store i16 3480, i16* %140, align 2, !insn.addr !16298
  %141 = add i64 %1, ptrtoint (i8* @global_var_6 to i64), !insn.addr !16299
  %142 = inttoptr i64 %141 to i8*, !insn.addr !16299
  store i8 -15, i8* %142, align 1, !insn.addr !16299
  br label %dec_label_pc_27317, !insn.addr !16300

dec_label_pc_2722c:                               ; preds = %dec_label_pc_27207
  %143 = add i64 %1, ptrtoint (i32* @global_var_2 to i64), !insn.addr !16301
  %144 = inttoptr i64 %143 to i16*, !insn.addr !16301
  store i16 2860, i16* %144, align 2, !insn.addr !16301
  %145 = add i64 %1, ptrtoint (i8* @global_var_6 to i64), !insn.addr !16302
  %146 = inttoptr i64 %145 to i8*, !insn.addr !16302
  store i8 -16, i8* %146, align 1, !insn.addr !16302
  br label %dec_label_pc_27317, !insn.addr !16303

dec_label_pc_2723b:                               ; preds = %dec_label_pc_271e6
  %147 = add i64 %1, ptrtoint (i32* @global_var_2 to i64), !insn.addr !16304
  %148 = inttoptr i64 %147 to i16*, !insn.addr !16304
  store i16 2280, i16* %148, align 2, !insn.addr !16304
  %149 = add i64 %1, ptrtoint (i8* @global_var_6 to i64), !insn.addr !16305
  %150 = inttoptr i64 %149 to i8*, !insn.addr !16305
  store i8 -17, i8* %150, align 1, !insn.addr !16305
  br label %dec_label_pc_27317, !insn.addr !16306

dec_label_pc_2724a:                               ; preds = %dec_label_pc_271f8
  %151 = add i64 %1, ptrtoint (i32* @global_var_2 to i64), !insn.addr !16307
  %152 = inttoptr i64 %151 to i16*, !insn.addr !16307
  store i16 1670, i16* %152, align 2, !insn.addr !16307
  %153 = add i64 %1, ptrtoint (i8* @global_var_6 to i64), !insn.addr !16308
  %154 = inttoptr i64 %153 to i8*, !insn.addr !16308
  store i8 -18, i8* %154, align 1, !insn.addr !16308
  br label %dec_label_pc_27317, !insn.addr !16309

dec_label_pc_27259:                               ; preds = %dec_label_pc_2719e
  %155 = add i64 %1, ptrtoint (i32* @global_var_2 to i64), !insn.addr !16310
  %156 = inttoptr i64 %155 to i16*, !insn.addr !16310
  store i16 1370, i16* %156, align 2, !insn.addr !16310
  %157 = add i64 %1, ptrtoint (i8* @global_var_6 to i64), !insn.addr !16311
  %158 = inttoptr i64 %157 to i8*, !insn.addr !16311
  store i8 -19, i8* %158, align 1, !insn.addr !16311
  br label %dec_label_pc_27317, !insn.addr !16312

dec_label_pc_27268:                               ; preds = %dec_label_pc_271d7
  %159 = add i64 %1, ptrtoint (i32* @global_var_2 to i64), !insn.addr !16313
  %160 = inttoptr i64 %159 to i16*, !insn.addr !16313
  store i16 1200, i16* %160, align 2, !insn.addr !16313
  %161 = add i64 %1, ptrtoint (i8* @global_var_6 to i64), !insn.addr !16314
  %162 = inttoptr i64 %161 to i8*, !insn.addr !16314
  store i8 ptrtoint (i8* @global_var_ec to i8), i8* %162, align 1, !insn.addr !16314
  br label %dec_label_pc_27317, !insn.addr !16315

dec_label_pc_27277:                               ; preds = %dec_label_pc_271cd
  %163 = add i64 %1, ptrtoint (i32* @global_var_2 to i64), !insn.addr !16316
  %164 = inttoptr i64 %163 to i16*, !insn.addr !16316
  store i16 950, i16* %164, align 2, !insn.addr !16316
  %165 = add i64 %1, ptrtoint (i8* @global_var_6 to i64), !insn.addr !16317
  %166 = inttoptr i64 %165 to i8*, !insn.addr !16317
  store i8 ptrtoint ([3 x i8]* @global_var_eb to i8), i8* %166, align 1, !insn.addr !16317
  br label %dec_label_pc_27317, !insn.addr !16318

dec_label_pc_27286:                               ; preds = %dec_label_pc_271ae
  %167 = add i64 %1, ptrtoint (i32* @global_var_2 to i64), !insn.addr !16319
  %168 = inttoptr i64 %167 to i16*, !insn.addr !16319
  store i16 750, i16* %168, align 2, !insn.addr !16319
  %169 = add i64 %1, ptrtoint (i8* @global_var_6 to i64), !insn.addr !16320
  %170 = inttoptr i64 %169 to i8*, !insn.addr !16320
  store i8 -22, i8* %170, align 1, !insn.addr !16320
  br label %dec_label_pc_27317, !insn.addr !16321

dec_label_pc_27295:                               ; preds = %dec_label_pc_271be
  %171 = add i64 %1, ptrtoint (i32* @global_var_2 to i64), !insn.addr !16322
  %172 = inttoptr i64 %171 to i16*, !insn.addr !16322
  store i16 450, i16* %172, align 2, !insn.addr !16322
  %173 = add i64 %1, ptrtoint (i8* @global_var_6 to i64), !insn.addr !16323
  %174 = inttoptr i64 %173 to i8*, !insn.addr !16323
  store i8 -23, i8* %174, align 1, !insn.addr !16323
  br label %dec_label_pc_27317, !insn.addr !16324

dec_label_pc_272a1:                               ; preds = %dec_label_pc_270f5
  %175 = add i64 %1, ptrtoint (i32* @global_var_2 to i64), !insn.addr !16325
  %176 = inttoptr i64 %175 to i16*, !insn.addr !16325
  store i16 240, i16* %176, align 2, !insn.addr !16325
  %177 = add i64 %1, ptrtoint (i8* @global_var_6 to i64), !insn.addr !16326
  %178 = inttoptr i64 %177 to i8*, !insn.addr !16326
  store i8 -24, i8* %178, align 1, !insn.addr !16326
  br label %dec_label_pc_27317, !insn.addr !16327

dec_label_pc_272ad:                               ; preds = %dec_label_pc_2718f
  %179 = add i64 %1, ptrtoint (i32* @global_var_2 to i64), !insn.addr !16328
  %180 = inttoptr i64 %179 to i16*, !insn.addr !16328
  store i16 -90, i16* %180, align 2, !insn.addr !16328
  %181 = add i64 %1, ptrtoint (i8* @global_var_6 to i64), !insn.addr !16329
  %182 = inttoptr i64 %181 to i8*, !insn.addr !16329
  store i8 -25, i8* %182, align 1, !insn.addr !16329
  br label %dec_label_pc_27317, !insn.addr !16330

dec_label_pc_272b9:                               ; preds = %dec_label_pc_27185
  %183 = add i64 %1, ptrtoint (i32* @global_var_2 to i64), !insn.addr !16331
  %184 = inttoptr i64 %183 to i16*, !insn.addr !16331
  store i16 -350, i16* %184, align 2, !insn.addr !16331
  %185 = add i64 %1, ptrtoint (i8* @global_var_6 to i64), !insn.addr !16332
  %186 = inttoptr i64 %185 to i8*, !insn.addr !16332
  store i8 -26, i8* %186, align 1, !insn.addr !16332
  br label %dec_label_pc_27317, !insn.addr !16333

dec_label_pc_272c5:                               ; preds = %dec_label_pc_27165
  %187 = add i64 %1, ptrtoint (i32* @global_var_2 to i64), !insn.addr !16334
  %188 = inttoptr i64 %187 to i16*, !insn.addr !16334
  store i16 -700, i16* %188, align 2, !insn.addr !16334
  %189 = add i64 %1, ptrtoint (i8* @global_var_6 to i64), !insn.addr !16335
  %190 = inttoptr i64 %189 to i8*, !insn.addr !16335
  store i8 -27, i8* %190, align 1, !insn.addr !16335
  br label %dec_label_pc_27317, !insn.addr !16336

dec_label_pc_272d1:                               ; preds = %dec_label_pc_27175
  %191 = add i64 %1, ptrtoint (i32* @global_var_2 to i64), !insn.addr !16337
  %192 = inttoptr i64 %191 to i16*, !insn.addr !16337
  store i16 -900, i16* %192, align 2, !insn.addr !16337
  %193 = add i64 %1, ptrtoint (i8* @global_var_6 to i64), !insn.addr !16338
  %194 = inttoptr i64 %193 to i8*, !insn.addr !16338
  store i8 -28, i8* %194, align 1, !insn.addr !16338
  br label %dec_label_pc_27317, !insn.addr !16339

dec_label_pc_272dd:                               ; preds = %dec_label_pc_2713a
  %195 = add i64 %1, ptrtoint (i32* @global_var_2 to i64), !insn.addr !16340
  %196 = inttoptr i64 %195 to i16*, !insn.addr !16340
  store i16 -1230, i16* %196, align 2, !insn.addr !16340
  %197 = add i64 %1, ptrtoint (i8* @global_var_6 to i64), !insn.addr !16341
  %198 = inttoptr i64 %197 to i8*, !insn.addr !16341
  store i8 -29, i8* %198, align 1, !insn.addr !16341
  br label %dec_label_pc_27317, !insn.addr !16342

dec_label_pc_272e9:                               ; preds = %dec_label_pc_27154
  store i16 -1500, i16* %115, align 2, !insn.addr !16343
  %199 = add i64 %1, ptrtoint (i8* @global_var_6 to i64), !insn.addr !16344
  %200 = inttoptr i64 %199 to i8*, !insn.addr !16344
  store i8 -30, i8* %200, align 1, !insn.addr !16344
  br label %dec_label_pc_27317, !insn.addr !16345

dec_label_pc_272f5:                               ; preds = %dec_label_pc_2714a
  %201 = add i64 %1, ptrtoint (i32* @global_var_2 to i64), !insn.addr !16346
  %202 = inttoptr i64 %201 to i16*, !insn.addr !16346
  store i16 -1800, i16* %202, align 2, !insn.addr !16346
  %203 = add i64 %1, ptrtoint (i8* @global_var_6 to i64), !insn.addr !16347
  %204 = inttoptr i64 %203 to i8*, !insn.addr !16347
  store i8 -31, i8* %204, align 1, !insn.addr !16347
  br label %dec_label_pc_27317, !insn.addr !16348

dec_label_pc_27301:                               ; preds = %dec_label_pc_27154
  store i16 -2000, i16* %115, align 2, !insn.addr !16349
  %205 = add i64 %1, ptrtoint (i8* @global_var_6 to i64), !insn.addr !16350
  %206 = inttoptr i64 %205 to i8*, !insn.addr !16350
  store i8 -32, i8* %206, align 1, !insn.addr !16350
  br label %dec_label_pc_27317, !insn.addr !16351

dec_label_pc_2730d:                               ; preds = %dec_label_pc_27210, %dec_label_pc_271f8, %dec_label_pc_271d7, %dec_label_pc_271be, %dec_label_pc_2718f, %dec_label_pc_27175
  %207 = add i64 %1, ptrtoint (i32* @global_var_2 to i64), !insn.addr !16352
  %208 = inttoptr i64 %207 to i16*, !insn.addr !16352
  store i16 9900, i16* %208, align 2, !insn.addr !16352
  %209 = add i64 %1, ptrtoint (i8* @global_var_6 to i64), !insn.addr !16353
  %210 = inttoptr i64 %209 to i8*, !insn.addr !16353
  store i8 0, i8* %210, align 1, !insn.addr !16353
  br label %dec_label_pc_27317, !insn.addr !16353

dec_label_pc_27317:                               ; preds = %dec_label_pc_2730d, %dec_label_pc_27301, %dec_label_pc_272f5, %dec_label_pc_272e9, %dec_label_pc_272dd, %dec_label_pc_272d1, %dec_label_pc_272c5, %dec_label_pc_272b9, %dec_label_pc_272ad, %dec_label_pc_272a1, %dec_label_pc_27295, %dec_label_pc_27286, %dec_label_pc_27277, %dec_label_pc_27268, %dec_label_pc_27259, %dec_label_pc_2724a, %dec_label_pc_2723b, %dec_label_pc_2722c, %dec_label_pc_2721d
  %211 = bitcast i64* %rdi to i8*
  %212 = load i8, i8* %211, align 8, !insn.addr !16354
  %213 = zext i8 %212 to i64, !insn.addr !16354
  %214 = mul nuw nsw i64 %213, 184, !insn.addr !16355
  %215 = inttoptr i64 %214 to i32*, !insn.addr !16356
  %216 = load i32, i32* %215, align 8
  %217 = icmp eq i32 %216, 13, !insn.addr !16357
  %218 = icmp eq i1 %217, false, !insn.addr !16358
  br i1 %218, label %dec_label_pc_274b3, label %dec_label_pc_27335, !insn.addr !16358

dec_label_pc_27335:                               ; preds = %dec_label_pc_27317
  %219 = call i64 @nm131_demod_dagc_gain.106(i64 %arg1), !insn.addr !16359
  %220 = call i64 @nmi_log10.264(i64 %219), !insn.addr !16360
  %221 = lshr i64 %219, ptrtoint (i8* @global_var_f to i64), !insn.addr !16361
  %222 = load i32, i32* %215, align 8, !insn.addr !16362
  %223 = add i32 %222, -94400001, !insn.addr !16363
  %224 = icmp ult i32 %223, 5700000
  br i1 %224, label %dec_label_pc_2736f, label %dec_label_pc_27409, !insn.addr !16364

dec_label_pc_2736f:                               ; preds = %dec_label_pc_27335
  %225 = add i64 %221, -100, !insn.addr !16365
  %226 = icmp ugt i64 %225, ptrtoint (i32** @global_var_13 to i64)
  store i16 mul (i16 ptrtoint (i32* @global_var_1 to i16), i16 260), i16* %rdx.0.reg2mem, !insn.addr !16366
  br i1 %226, label %dec_label_pc_27383, label %dec_label_pc_27493, !insn.addr !16366

dec_label_pc_27383:                               ; preds = %dec_label_pc_2736f
  %227 = add i64 %221, -120, !insn.addr !16367
  %228 = icmp ugt i64 %227, ptrtoint (i8* @global_var_f to i64)
  store i16 mul (i16 ptrtoint (i32* @global_var_1 to i16), i16 140), i16* %rdx.0.reg2mem, !insn.addr !16368
  br i1 %228, label %dec_label_pc_27397, label %dec_label_pc_27493, !insn.addr !16368

dec_label_pc_27397:                               ; preds = %dec_label_pc_27383
  %229 = add i64 %221, -136, !insn.addr !16369
  %230 = icmp ugt i64 %229, ptrtoint ([4 x i8]* @global_var_c to i64)
  store i16 0, i16* %rdx.0.reg2mem, !insn.addr !16370
  br i1 %230, label %dec_label_pc_273ab, label %dec_label_pc_27493, !insn.addr !16370

dec_label_pc_273ab:                               ; preds = %dec_label_pc_27397
  %231 = add i64 %221, -149, !insn.addr !16371
  %232 = icmp ugt i64 %231, ptrtoint (i8** @global_var_9 to i64)
  store i16 mul (i16 ptrtoint (i32* @global_var_1 to i16), i16 -200), i16* %rdx.0.reg2mem, !insn.addr !16372
  br i1 %232, label %dec_label_pc_273c2, label %dec_label_pc_27493, !insn.addr !16372

dec_label_pc_273c2:                               ; preds = %dec_label_pc_273ab
  %233 = add i64 %221, -159, !insn.addr !16373
  %234 = icmp ugt i64 %233, ptrtoint (i8* @global_var_5 to i64)
  store i16 mul (i16 ptrtoint (i32* @global_var_1 to i16), i16 -400), i16* %rdx.0.reg2mem, !insn.addr !16374
  br i1 %234, label %dec_label_pc_273d9, label %dec_label_pc_27493, !insn.addr !16374

dec_label_pc_273d9:                               ; preds = %dec_label_pc_273c2
  %235 = icmp ult i64 %221, 165
  store i16 mul (i16 ptrtoint (i32* @global_var_1 to i16), i16 -700), i16* %rdx.0.reg2mem, !insn.addr !16375
  br i1 %235, label %dec_label_pc_273eb, label %dec_label_pc_27493, !insn.addr !16375

dec_label_pc_273eb:                               ; preds = %dec_label_pc_273d9
  %236 = add i64 %1, ptrtoint (i8* @global_var_6 to i64), !insn.addr !16376
  %237 = inttoptr i64 %236 to i8*, !insn.addr !16376
  %238 = load i8, i8* %237, align 1, !insn.addr !16376
  %239 = add i8 %238, ptrtoint (i8* @global_var_10 to i8), !insn.addr !16377
  %240 = icmp ugt i8 %239, ptrtoint (i32* @global_var_1 to i8)
  store i16 mul (i16 ptrtoint (i32* @global_var_1 to i16), i16 430), i16* %rdx.0.reg2mem, !insn.addr !16378
  br i1 %240, label %dec_label_pc_273fb, label %dec_label_pc_27493, !insn.addr !16378

dec_label_pc_273fb:                               ; preds = %dec_label_pc_273eb
  %241 = icmp eq i8 %238, -17, !insn.addr !16379
  %242 = icmp eq i1 %241, false, !insn.addr !16380
  store i16 mul (i16 ptrtoint (i32* @global_var_1 to i16), i16 520), i16* %rdx.0.reg2mem, !insn.addr !16380
  br i1 %242, label %dec_label_pc_2748e, label %dec_label_pc_27493, !insn.addr !16380

dec_label_pc_27409:                               ; preds = %dec_label_pc_27335
  %243 = add i64 %221, -113, !insn.addr !16381
  %244 = icmp ugt i64 %243, ptrtoint (i32** @global_var_1d to i64)
  store i16 mul (i16 ptrtoint (i32* @global_var_1 to i16), i16 380), i16* %rdx.0.reg2mem, !insn.addr !16382
  br i1 %244, label %dec_label_pc_27419, label %dec_label_pc_27493, !insn.addr !16382

dec_label_pc_27419:                               ; preds = %dec_label_pc_27409
  %245 = add i64 %221, -143, !insn.addr !16383
  %246 = icmp ugt i64 %245, ptrtoint (i32** @global_var_21 to i64)
  store i16 mul (i16 ptrtoint (i32* @global_var_1 to i16), i16 330), i16* %rdx.0.reg2mem, !insn.addr !16384
  br i1 %246, label %dec_label_pc_27429, label %dec_label_pc_27493, !insn.addr !16384

dec_label_pc_27429:                               ; preds = %dec_label_pc_27419
  %247 = add i64 %221, -177, !insn.addr !16385
  %248 = icmp ugt i64 %247, ptrtoint (i32** @global_var_1d to i64)
  store i16 mul (i16 ptrtoint (i32* @global_var_1 to i16), i16 250), i16* %rdx.0.reg2mem, !insn.addr !16386
  br i1 %248, label %dec_label_pc_2743c, label %dec_label_pc_27493, !insn.addr !16386

dec_label_pc_2743c:                               ; preds = %dec_label_pc_27429
  %249 = add i64 %221, -207, !insn.addr !16387
  %250 = icmp ugt i64 %249, ptrtoint (i8** @global_var_19 to i64)
  store i16 mul (i16 ptrtoint (i32* @global_var_1 to i16), i16 110), i16* %rdx.0.reg2mem, !insn.addr !16388
  br i1 %250, label %dec_label_pc_2744c, label %dec_label_pc_27493, !insn.addr !16388

dec_label_pc_2744c:                               ; preds = %dec_label_pc_2743c
  %251 = add i64 %221, -233, !insn.addr !16389
  %252 = icmp ugt i64 %251, ptrtoint (i32** @global_var_13 to i64)
  store i16 mul (i16 ptrtoint (i32* @global_var_1 to i16), i16 -240), i16* %rdx.0.reg2mem, !insn.addr !16390
  br i1 %252, label %dec_label_pc_2745f, label %dec_label_pc_27493, !insn.addr !16390

dec_label_pc_2745f:                               ; preds = %dec_label_pc_2744c
  %253 = icmp ult i64 %221, 253
  store i16 mul (i16 ptrtoint (i32* @global_var_1 to i16), i16 -500), i16* %rdx.0.reg2mem, !insn.addr !16391
  br i1 %253, label %dec_label_pc_2746d, label %dec_label_pc_27493, !insn.addr !16391

dec_label_pc_2746d:                               ; preds = %dec_label_pc_2745f
  %254 = add i64 %1, ptrtoint (i8* @global_var_6 to i64), !insn.addr !16392
  %255 = inttoptr i64 %254 to i8*, !insn.addr !16392
  %256 = load i8, i8* %255, align 1, !insn.addr !16392
  %257 = add i8 %256, ptrtoint (i8* @global_var_10 to i8), !insn.addr !16393
  %258 = icmp ugt i8 %257, ptrtoint (i32* @global_var_1 to i8)
  store i16 mul (i16 ptrtoint (i32* @global_var_1 to i16), i16 430), i16* %rdx.0.reg2mem, !insn.addr !16394
  br i1 %258, label %dec_label_pc_27479, label %dec_label_pc_27493, !insn.addr !16394

dec_label_pc_27479:                               ; preds = %dec_label_pc_2746d
  %259 = icmp eq i8 %256, -17, !insn.addr !16395
  %260 = icmp eq i1 %259, false, !insn.addr !16396
  store i16 mul (i16 ptrtoint (i32* @global_var_1 to i16), i16 520), i16* %rdx.0.reg2mem, !insn.addr !16396
  br i1 %260, label %dec_label_pc_2748e, label %dec_label_pc_27493, !insn.addr !16396

dec_label_pc_2748e:                               ; preds = %dec_label_pc_27479, %dec_label_pc_273fb
  store i16 mul (i16 ptrtoint (i32* @global_var_1 to i16), i16 340), i16* %rdx.0.reg2mem, !insn.addr !16397
  br label %dec_label_pc_27493, !insn.addr !16397

dec_label_pc_27493:                               ; preds = %dec_label_pc_273fb, %dec_label_pc_27479, %dec_label_pc_273eb, %dec_label_pc_2746d, %dec_label_pc_2745f, %dec_label_pc_2744c, %dec_label_pc_2743c, %dec_label_pc_27429, %dec_label_pc_27419, %dec_label_pc_27409, %dec_label_pc_273d9, %dec_label_pc_273c2, %dec_label_pc_273ab, %dec_label_pc_27397, %dec_label_pc_27383, %dec_label_pc_2736f, %dec_label_pc_2748e
  %rdx.0.reload = load i16, i16* %rdx.0.reg2mem
  %261 = add i64 %1, ptrtoint (i32* @global_var_2 to i64), !insn.addr !16398
  %262 = inttoptr i64 %261 to i16*, !insn.addr !16398
  %263 = load i16, i16* %262, align 2, !insn.addr !16398
  %264 = zext i16 %263 to i64, !insn.addr !16399
  %265 = sub nsw i64 0, %264, !insn.addr !16399
  %266 = trunc i64 %265 to i16, !insn.addr !16400
  %267 = bitcast i64* %rsi to i16*
  %268 = load i16, i16* %267, align 8, !insn.addr !16400
  %269 = sub i16 %266, %268, !insn.addr !16400
  %270 = and i64 %265, 4294901760, !insn.addr !16400
  %271 = trunc i64 %220 to i16
  %.neg = mul i16 %271, mul (i16 mul (i16 trunc (i64 add (i64 ptrtoint (i16* @global_var_4 to i64), i64 1) to i16), i16 trunc (i64 add (i64 ptrtoint (i16* @global_var_4 to i64), i64 1) to i16)), i16 -1)
  %272 = add i16 %269, %.neg, !insn.addr !16401
  %273 = zext i16 %272 to i64, !insn.addr !16401
  %274 = or i64 %270, %273, !insn.addr !16401
  %275 = add i16 %272, %rdx.0.reload, !insn.addr !16402
  %276 = add i64 %1, ptrtoint (i16* @global_var_4 to i64), !insn.addr !16402
  %277 = inttoptr i64 %276 to i16*, !insn.addr !16402
  store i16 %275, i16* %277, align 2, !insn.addr !16402
  ret i64 %274, !insn.addr !16403

dec_label_pc_274b3:                               ; preds = %dec_label_pc_27317
  store i64 1450, i64* %r14.0.reg2mem
  store i64 1450, i64* %r14.0.reg2mem
  store i64 1450, i64* %r14.0.reg2mem
  store i64 1450, i64* %r14.0.reg2mem
  store i64 1450, i64* %r14.0.reg2mem
  switch i32 %216, label %dec_label_pc_274cc [
    i32 6, label %dec_label_pc_275a8
    i32 8, label %dec_label_pc_275a8
    i32 12, label %dec_label_pc_275a8
    i32 14, label %dec_label_pc_275a8
    i32 15, label %dec_label_pc_275a8
  ]

dec_label_pc_274cc:                               ; preds = %dec_label_pc_274b3
  %278 = icmp eq i32 %216, 16, !insn.addr !16404
  %279 = icmp eq i1 %278, false, !insn.addr !16405
  br i1 %279, label %dec_label_pc_2760a, label %dec_label_pc_274d6, !insn.addr !16405

dec_label_pc_274d6:                               ; preds = %dec_label_pc_274cc
  %280 = icmp ult i32 %216, 131000000
  store i64 1450, i64* %r14.0.reg2mem, !insn.addr !16406
  br i1 %280, label %dec_label_pc_275a8, label %dec_label_pc_274f2, !insn.addr !16406

dec_label_pc_274f2:                               ; preds = %dec_label_pc_274d6
  %281 = add i32 %216, -131000000, !insn.addr !16407
  %282 = icmp ult i32 %281, 144000000
  br i1 %282, label %dec_label_pc_27500, label %dec_label_pc_2750f, !insn.addr !16408

dec_label_pc_27500:                               ; preds = %dec_label_pc_274f2
  %283 = add i64 %1, ptrtoint (i8* @global_var_6 to i64), !insn.addr !16409
  %284 = inttoptr i64 %283 to i8*, !insn.addr !16409
  %285 = load i8, i8* %284, align 1, !insn.addr !16409
  %286 = icmp eq i8 %285, -15, !insn.addr !16409
  %287 = icmp eq i1 %286, false, !insn.addr !16410
  br i1 %287, label %dec_label_pc_2759a, label %dec_label_pc_27592, !insn.addr !16410

dec_label_pc_2750f:                               ; preds = %dec_label_pc_274f2
  %288 = add i32 %216, -275000000, !insn.addr !16411
  %289 = icmp ult i32 %288, 75000000
  br i1 %289, label %dec_label_pc_2751d, label %dec_label_pc_2752b, !insn.addr !16412

dec_label_pc_2751d:                               ; preds = %dec_label_pc_2750f
  %290 = add i64 %1, ptrtoint (i8* @global_var_6 to i64), !insn.addr !16413
  %291 = inttoptr i64 %290 to i8*, !insn.addr !16413
  %292 = load i8, i8* %291, align 1, !insn.addr !16413
  %293 = icmp eq i8 %292, -15, !insn.addr !16413
  %294 = icmp eq i1 %293, false, !insn.addr !16414
  store i64 1050, i64* %r14.0.reg2mem, !insn.addr !16414
  br i1 %294, label %dec_label_pc_275a2, label %dec_label_pc_275a8, !insn.addr !16414

dec_label_pc_2752b:                               ; preds = %dec_label_pc_2750f
  %295 = add i32 %216, -350000000, !insn.addr !16415
  %296 = icmp ult i32 %295, 100000000
  br i1 %296, label %dec_label_pc_27539, label %dec_label_pc_27547, !insn.addr !16416

dec_label_pc_27539:                               ; preds = %dec_label_pc_2752b
  %297 = add i64 %1, ptrtoint (i8* @global_var_6 to i64), !insn.addr !16417
  %298 = inttoptr i64 %297 to i8*, !insn.addr !16417
  %299 = load i8, i8* %298, align 1, !insn.addr !16417
  %300 = icmp eq i8 %299, -15, !insn.addr !16417
  %301 = icmp eq i1 %300, false, !insn.addr !16418
  store i64 ptrtoint ([3 x i8]* @global_var_3e8 to i64), i64* %r14.0.reg2mem, !insn.addr !16418
  br i1 %301, label %dec_label_pc_27592, label %dec_label_pc_275a8, !insn.addr !16418

dec_label_pc_27547:                               ; preds = %dec_label_pc_2752b
  %302 = add i32 %216, -450000000, !insn.addr !16419
  %303 = icmp ult i32 %302, 120000000
  br i1 %303, label %dec_label_pc_27555, label %dec_label_pc_2756a, !insn.addr !16420

dec_label_pc_27555:                               ; preds = %dec_label_pc_27547
  %304 = add i64 %1, ptrtoint (i8* @global_var_6 to i64), !insn.addr !16421
  %305 = inttoptr i64 %304 to i8*, !insn.addr !16421
  %306 = load i8, i8* %305, align 1, !insn.addr !16421
  %307 = icmp eq i8 %306, -15, !insn.addr !16421
  %308 = icmp eq i1 %307, false, !insn.addr !16422
  %309 = select i1 %308, i64 1250, i64 1100, !insn.addr !16422
  store i64 %309, i64* %r14.0.reg2mem, !insn.addr !16423
  br label %dec_label_pc_275a8, !insn.addr !16423

dec_label_pc_2756a:                               ; preds = %dec_label_pc_27547
  %310 = add i32 %216, -570000000, !insn.addr !16424
  %311 = icmp ult i32 %310, 150000000
  %312 = add i64 %1, ptrtoint (i8* @global_var_6 to i64)
  %313 = inttoptr i64 %312 to i8*
  %314 = load i8, i8* %313, align 1
  %315 = icmp eq i8 %314, -15
  br i1 %311, label %dec_label_pc_27576, label %dec_label_pc_27584, !insn.addr !16425

dec_label_pc_27576:                               ; preds = %dec_label_pc_2756a
  %316 = icmp eq i1 %315, false, !insn.addr !16426
  store i64 1350, i64* %r14.0.reg2mem, !insn.addr !16426
  br i1 %316, label %dec_label_pc_275a8, label %dec_label_pc_275a2, !insn.addr !16426

dec_label_pc_27584:                               ; preds = %dec_label_pc_2756a
  store i64 1450, i64* %r14.0.reg2mem, !insn.addr !16427
  br i1 %315, label %dec_label_pc_2759a, label %dec_label_pc_275a8, !insn.addr !16427

dec_label_pc_27592:                               ; preds = %dec_label_pc_27500, %dec_label_pc_27539
  store i64 1200, i64* %r14.0.reg2mem, !insn.addr !16428
  br label %dec_label_pc_275a8, !insn.addr !16428

dec_label_pc_2759a:                               ; preds = %dec_label_pc_27584, %dec_label_pc_27500
  store i64 1300, i64* %r14.0.reg2mem, !insn.addr !16429
  br label %dec_label_pc_275a8, !insn.addr !16429

dec_label_pc_275a2:                               ; preds = %dec_label_pc_27576, %dec_label_pc_2751d
  store i64 1150, i64* %r14.0.reg2mem, !insn.addr !16430
  br label %dec_label_pc_275a8, !insn.addr !16430

dec_label_pc_275a8:                               ; preds = %dec_label_pc_274b3, %dec_label_pc_274b3, %dec_label_pc_274b3, %dec_label_pc_274b3, %dec_label_pc_274b3, %dec_label_pc_274d6, %dec_label_pc_27584, %dec_label_pc_27539, %dec_label_pc_2751d, %dec_label_pc_275a2, %dec_label_pc_2759a, %dec_label_pc_27592, %dec_label_pc_27576, %dec_label_pc_27555
  %r14.0.reload = load i64, i64* %r14.0.reg2mem
  %317 = call i64 @nm131_demod_dagc_gain.106(i64 %arg1), !insn.addr !16431
  %318 = call i64 @nmi_log10.264(i64 %317), !insn.addr !16432
  %319 = call i64 @rReg32.101(i64 %arg1, i64 356), !insn.addr !16433
  %320 = trunc i64 %319 to i32, !insn.addr !16434
  %321 = shl i32 %320, ptrtoint (i8* @global_var_f to i32), !insn.addr !16435
  %322 = zext i32 %321 to i64, !insn.addr !16436
  %323 = call i64 @nmi_log10.264(i64 %322), !insn.addr !16437
  %324 = add i64 %1, ptrtoint (i32* @global_var_2 to i64), !insn.addr !16438
  %325 = inttoptr i64 %324 to i16*, !insn.addr !16438
  %326 = load i16, i16* %325, align 2, !insn.addr !16438
  %327 = zext i16 %326 to i64, !insn.addr !16439
  %328 = sub nsw i64 0, %327, !insn.addr !16439
  %329 = trunc i64 %328 to i16, !insn.addr !16440
  %330 = bitcast i64* %rsi to i16*
  %331 = load i16, i16* %330, align 8, !insn.addr !16440
  %332 = sub i16 %329, %331, !insn.addr !16440
  %333 = zext i16 %332 to i64, !insn.addr !16440
  %334 = and i64 %328, 4294901760, !insn.addr !16440
  %335 = or i64 %334, %333, !insn.addr !16440
  %336 = mul i64 %323, mul (i64 zext (i32 trunc (i64 add (i64 ptrtoint (i16* @global_var_4 to i64), i64 1) to i32) to i64), i64 zext (i32 trunc (i64 add (i64 ptrtoint (i16* @global_var_4 to i64), i64 1) to i32) to i64)), !insn.addr !16441
  %337 = and i64 %336, 4294967295, !insn.addr !16441
  %reass.add = add nuw nsw i64 %335, %337
  %reass.mul = mul i64 %reass.add, ptrtoint (i32* @global_var_1 to i64)
  %338 = add i64 %r14.0.reload, 4294959276, !insn.addr !16442
  %339 = add i64 %338, %reass.mul, !insn.addr !16443
  %340 = and i64 %339, 4294967295, !insn.addr !16443
  %341 = mul i64 %318, mul (i64 zext (i32 trunc (i64 add (i64 ptrtoint (i16* @global_var_4 to i64), i64 1) to i32) to i64), i64 zext (i16 trunc (i64 add (i64 ptrtoint (i16* @global_var_4 to i64), i64 1) to i16) to i64)), !insn.addr !16444
  %342 = sub i64 %339, %341, !insn.addr !16445
  %343 = trunc i64 %342 to i16, !insn.addr !16446
  %344 = add i64 %1, ptrtoint (i16* @global_var_4 to i64), !insn.addr !16446
  %345 = inttoptr i64 %344 to i16*, !insn.addr !16446
  store i16 %343, i16* %345, align 2, !insn.addr !16446
  ret i64 %340, !insn.addr !16447

dec_label_pc_2760a:                               ; preds = %dec_label_pc_274cc
  %346 = zext i32 %216 to i64, !insn.addr !16448
  %347 = icmp ult i32 %216, 125000000
  %348 = add i32 %216, -125000000, !insn.addr !16449
  %349 = icmp ult i32 %348, 278000000
  %or.cond = or i1 %347, %349
  store i64 %346, i64* %rax.0.reg2mem, !insn.addr !16450
  br i1 %or.cond, label %dec_label_pc_27690, label %dec_label_pc_27639, !insn.addr !16450

dec_label_pc_27639:                               ; preds = %dec_label_pc_2760a
  %350 = add i32 %216, -403000000, !insn.addr !16451
  %351 = icmp ult i32 %350, 167000000
  store i64 4294967196, i64* %rax.0.reg2mem, !insn.addr !16452
  br i1 %351, label %dec_label_pc_27690, label %dec_label_pc_2765c, !insn.addr !16452

dec_label_pc_2765c:                               ; preds = %dec_label_pc_27639
  %352 = add i32 %216, -570000000, !insn.addr !16453
  %353 = icmp ult i32 %352, 190000000
  %. = select i1 %353, i64 4294967266, i64 50
  store i64 %., i64* %rax.0.reg2mem, !insn.addr !16454
  br label %dec_label_pc_27690, !insn.addr !16454

dec_label_pc_27690:                               ; preds = %dec_label_pc_2765c, %dec_label_pc_27639, %dec_label_pc_2760a
  %rax.0.reload = load i64, i64* %rax.0.reg2mem
  ret i64 %rax.0.reload, !insn.addr !16455
}

define void @nm120_rfli_track(i64 %pPrivate, i64 %p) local_unnamed_addr {
dec_label_pc_27691:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = call i64 @__decompiler_undefined_function_0()
  %stack_var_0 = alloca i64, align 8
  %2 = ptrtoint i64* %stack_var_0 to i64, !insn.addr !16456
  %3 = call i64 @nm131_demod_dagc_gain.106(i64 %2), !insn.addr !16457
  %4 = call i64 @nmi_log10.264(i64 %3), !insn.addr !16458
  %5 = trunc i64 %0 to i16, !insn.addr !16459
  %6 = add i64 %1, ptrtoint (i32* @global_var_2 to i64), !insn.addr !16459
  %7 = inttoptr i64 %6 to i16*, !insn.addr !16459
  %8 = load i16, i16* %7, align 2, !insn.addr !16459
  %9 = trunc i64 %1 to i16
  %10 = trunc i64 %4 to i16
  %.neg2 = mul i16 %10, mul (i16 mul (i16 trunc (i64 add (i64 ptrtoint (i16* @global_var_4 to i64), i64 1) to i16), i16 trunc (i64 add (i64 ptrtoint (i16* @global_var_4 to i64), i64 1) to i16)), i16 -1)
  %11 = sub i16 %5, %9, !insn.addr !16459
  %12 = sub i16 %11, %8, !insn.addr !16460
  %13 = add i16 %12, %.neg2, !insn.addr !16461
  %14 = add i64 %1, ptrtoint (i16* @global_var_4 to i64), !insn.addr !16462
  %15 = inttoptr i64 %14 to i16*, !insn.addr !16462
  store i16 %13, i16* %15, align 2, !insn.addr !16462
  ret void, !insn.addr !16463
}

define i64 @nm120_rfli_track.132(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_276c1:
  %.reg2mem14 = alloca i8, !insn.addr !16464
  %.pre-phi5.reg2mem = alloca i8*, !insn.addr !16464
  %.reg2mem12 = alloca i8, !insn.addr !16464
  %merge.reg2mem = alloca i64, !insn.addr !16464
  %.reg2mem = alloca i64, !insn.addr !16464
  %rsi = alloca i64, align 8
  %0 = call i128 @__decompiler_undefined_function_8()
  %stack_var_-40 = alloca i64, align 8
  %1 = call i64 @mcount(), !insn.addr !16465
  %2 = call i64 @nm131_get_lna_gain.113(i64 %arg1, i64* nonnull %stack_var_-40), !insn.addr !16466
  %3 = add i64 %arg2, ptrtoint (i16* @global_var_4 to i64), !insn.addr !16467
  %4 = inttoptr i64 %3 to i8*, !insn.addr !16467
  %5 = load i8, i8* %4, align 1, !insn.addr !16467
  %6 = icmp eq i8 %5, 0, !insn.addr !16467
  br i1 %6, label %dec_label_pc_27729, label %dec_label_pc_276ff, !insn.addr !16468

dec_label_pc_276ff:                               ; preds = %dec_label_pc_276c1
  %7 = add i64 %arg2, ptrtoint (i8* @global_var_8 to i64), !insn.addr !16469
  %8 = inttoptr i64 %7 to i64*, !insn.addr !16469
  %9 = load i64, i64* %8, align 8, !insn.addr !16469
  %10 = sub i64 32768, %9, !insn.addr !16470
  %11 = add i64 %arg1, ptrtoint (i8* @global_var_10 to i64), !insn.addr !16471
  %12 = inttoptr i64 %11 to i8*, !insn.addr !16471
  %13 = load i8, i8* %12, align 1, !insn.addr !16471
  %14 = zext i8 %13 to i64, !insn.addr !16472
  %15 = mul i64 %10, %14, !insn.addr !16472
  %16 = trunc i128 %0 to i64
  %17 = urem i64 %16, 256
  %18 = mul i64 %9, %17, !insn.addr !16473
  %19 = add i64 %15, %18, !insn.addr !16474
  %20 = udiv i64 %19, 32768, !insn.addr !16475
  %21 = trunc i64 %20 to i8, !insn.addr !16476
  store i8 %21, i8* %12, align 1, !insn.addr !16476
  br label %dec_label_pc_27730, !insn.addr !16477

dec_label_pc_27729:                               ; preds = %dec_label_pc_276c1
  %22 = trunc i128 %0 to i8, !insn.addr !16478
  %23 = add i64 %arg1, ptrtoint (i8* @global_var_10 to i64), !insn.addr !16479
  %24 = inttoptr i64 %23 to i8*, !insn.addr !16479
  store i8 %22, i8* %24, align 1, !insn.addr !16479
  br label %dec_label_pc_27730, !insn.addr !16479

dec_label_pc_27730:                               ; preds = %dec_label_pc_27729, %dec_label_pc_276ff
  %25 = call i64 @nm131_demod_dagc_gain.106(i64 %arg1), !insn.addr !16480
  %26 = add i64 %arg2, 56, !insn.addr !16481
  %27 = inttoptr i64 %26 to i8*, !insn.addr !16481
  %28 = load i8, i8* %27, align 1, !insn.addr !16481
  %29 = icmp eq i8 %28, 0, !insn.addr !16481
  br i1 %29, label %dec_label_pc_2776a, label %dec_label_pc_27740, !insn.addr !16482

dec_label_pc_27740:                               ; preds = %dec_label_pc_27730
  %30 = add i64 %arg2, 64, !insn.addr !16483
  %31 = inttoptr i64 %30 to i64*, !insn.addr !16483
  %32 = load i64, i64* %31, align 8, !insn.addr !16483
  %33 = and i64 %25, 4294967295, !insn.addr !16484
  %34 = mul i64 %32, %33, !insn.addr !16485
  %35 = sub i64 32768, %32, !insn.addr !16486
  %36 = add i64 %arg1, ptrtoint (i32** @global_var_18 to i64), !insn.addr !16487
  %37 = inttoptr i64 %36 to i32*, !insn.addr !16487
  %38 = load i32, i32* %37, align 4, !insn.addr !16487
  %39 = zext i32 %38 to i64, !insn.addr !16488
  %40 = mul i64 %35, %39, !insn.addr !16488
  %41 = add i64 %40, %34, !insn.addr !16489
  %42 = udiv i64 %41, 32768, !insn.addr !16490
  %43 = inttoptr i64 %36 to i64*, !insn.addr !16491
  store i64 %42, i64* %43, align 8, !insn.addr !16491
  br label %dec_label_pc_2776e, !insn.addr !16492

dec_label_pc_2776a:                               ; preds = %dec_label_pc_27730
  %44 = add i64 %arg1, ptrtoint (i32** @global_var_18 to i64), !insn.addr !16493
  %45 = inttoptr i64 %44 to i64*, !insn.addr !16493
  store i64 %25, i64* %45, align 8, !insn.addr !16493
  br label %dec_label_pc_2776e, !insn.addr !16493

dec_label_pc_2776e:                               ; preds = %dec_label_pc_2776a, %dec_label_pc_27740
  %46 = add i64 %arg2, ptrtoint (i8* @global_var_10 to i64), !insn.addr !16494
  %47 = inttoptr i64 %46 to i8*, !insn.addr !16494
  %48 = load i8, i8* %47, align 1, !insn.addr !16494
  %49 = icmp eq i8 %48, 0, !insn.addr !16494
  br i1 %49, label %dec_label_pc_277aa, label %dec_label_pc_27776, !insn.addr !16495

dec_label_pc_27776:                               ; preds = %dec_label_pc_2776e
  %50 = add i64 %arg1, ptrtoint (i8* @global_var_10 to i64), !insn.addr !16496
  %51 = inttoptr i64 %50 to i8*, !insn.addr !16496
  %52 = load i8, i8* %51, align 1, !insn.addr !16496
  %53 = bitcast i64* %rsi to i8*
  %54 = load i8, i8* %53, align 8, !insn.addr !16497
  %55 = icmp ugt i8 %52, %54
  br i1 %55, label %dec_label_pc_27780, label %dec_label_pc_27776.dec_label_pc_2778f_crit_edge, !insn.addr !16498

dec_label_pc_27776.dec_label_pc_2778f_crit_edge:  ; preds = %dec_label_pc_27776
  %.pre6 = add i64 %arg1, ptrtoint (i32** @global_var_18 to i64), !insn.addr !16499
  %.pre8 = inttoptr i64 %.pre6 to i64*, !insn.addr !16499
  %.pre10 = load i64, i64* %.pre8, align 8
  store i64 %.pre10, i64* %.reg2mem
  br label %dec_label_pc_2778f

dec_label_pc_27780:                               ; preds = %dec_label_pc_27776
  %56 = add i64 %arg2, ptrtoint (i32** @global_var_18 to i64), !insn.addr !16500
  %57 = inttoptr i64 %56 to i64*, !insn.addr !16500
  %58 = load i64, i64* %57, align 8, !insn.addr !16500
  %59 = add i64 %arg1, ptrtoint (i32** @global_var_18 to i64)
  %60 = inttoptr i64 %59 to i64*
  %61 = load i64, i64* %60, align 8, !insn.addr !16501
  %62 = icmp ugt i64 %61, %58
  store i64 %61, i64* %.reg2mem, !insn.addr !16502
  store i64 ptrtoint ([3 x i8]* @global_var_d to i64), i64* %merge.reg2mem, !insn.addr !16502
  br i1 %62, label %dec_label_pc_277a5, label %dec_label_pc_2778f, !insn.addr !16502

dec_label_pc_2778f:                               ; preds = %dec_label_pc_27776.dec_label_pc_2778f_crit_edge, %dec_label_pc_27780
  %.reload = load i64, i64* %.reg2mem, !insn.addr !16499
  %63 = add i64 %arg2, ptrtoint (i32** @global_var_20 to i64), !insn.addr !16503
  %64 = inttoptr i64 %63 to i64*, !insn.addr !16503
  %65 = load i64, i64* %64, align 8, !insn.addr !16503
  %66 = icmp ult i64 %.reload, %65, !insn.addr !16499
  store i64 %65, i64* %merge.reg2mem, !insn.addr !16504
  br i1 %66, label %dec_label_pc_2778f.dec_label_pc_277e6_crit_edge, label %dec_label_pc_277a5, !insn.addr !16504

dec_label_pc_2778f.dec_label_pc_277e6_crit_edge:  ; preds = %dec_label_pc_2778f
  %.pre = add i64 %arg1, ptrtoint (i32** @global_var_20 to i64)
  %.pre4 = inttoptr i64 %.pre to i8*
  %.pre11 = load i8, i8* %.pre4, align 1
  store i8 %.pre11, i8* %.reg2mem12
  store i8* %.pre4, i8** %.pre-phi5.reg2mem
  br label %dec_label_pc_277e6

dec_label_pc_277a5:                               ; preds = %dec_label_pc_27780, %dec_label_pc_277b0, %dec_label_pc_277c3, %dec_label_pc_277ce, %dec_label_pc_277ba, %dec_label_pc_2778f
  %merge.reload = load i64, i64* %merge.reg2mem
  ret i64 %merge.reload, !insn.addr !16505

dec_label_pc_277aa:                               ; preds = %dec_label_pc_2776e
  %67 = add i64 %arg1, ptrtoint (i32** @global_var_20 to i64)
  %68 = inttoptr i64 %67 to i8*
  %69 = load i8, i8* %68, align 1, !insn.addr !16506
  %70 = icmp ugt i8 %69, ptrtoint ([4 x i8]* @global_var_c to i8)
  %71 = add i64 %arg1, ptrtoint (i8* @global_var_10 to i64)
  %72 = inttoptr i64 %71 to i8*
  %73 = load i8, i8* %72, align 1
  %74 = zext i8 %73 to i64
  br i1 %70, label %dec_label_pc_277c3, label %dec_label_pc_277b0, !insn.addr !16507

dec_label_pc_277b0:                               ; preds = %dec_label_pc_277aa
  %75 = bitcast i64* %rsi to i8*
  %76 = load i8, i8* %75, align 8, !insn.addr !16508
  %77 = icmp ugt i8 %73, %76
  store i64 ptrtoint ([3 x i8]* @global_var_d to i64), i64* %merge.reg2mem, !insn.addr !16509
  br i1 %77, label %dec_label_pc_277a5, label %dec_label_pc_277ba, !insn.addr !16509

dec_label_pc_277ba:                               ; preds = %dec_label_pc_277b0
  %78 = add i64 %arg2, ptrtoint (i32* @global_var_1 to i64), !insn.addr !16510
  %79 = inttoptr i64 %78 to i8*, !insn.addr !16510
  %80 = load i8, i8* %79, align 1, !insn.addr !16510
  %81 = icmp ugt i8 %80, %73, !insn.addr !16510
  store i64 %74, i64* %merge.reg2mem, !insn.addr !16511
  store i8 %69, i8* %.reg2mem12, !insn.addr !16511
  store i8* %68, i8** %.pre-phi5.reg2mem, !insn.addr !16511
  br i1 %81, label %dec_label_pc_277e6, label %dec_label_pc_277a5, !insn.addr !16511

dec_label_pc_277c3:                               ; preds = %dec_label_pc_277aa
  %82 = add i64 %arg2, ptrtoint (i32* @global_var_2 to i64), !insn.addr !16512
  %83 = inttoptr i64 %82 to i8*, !insn.addr !16512
  %84 = load i8, i8* %83, align 1, !insn.addr !16512
  %85 = icmp ugt i8 %73, %84
  store i64 ptrtoint ([3 x i8]* @global_var_d to i64), i64* %merge.reg2mem, !insn.addr !16513
  br i1 %85, label %dec_label_pc_277a5, label %dec_label_pc_277ce, !insn.addr !16513

dec_label_pc_277ce:                               ; preds = %dec_label_pc_277c3
  %86 = add i64 %arg2, ptrtoint (i8** @global_var_3 to i64), !insn.addr !16514
  %87 = inttoptr i64 %86 to i8*, !insn.addr !16514
  %88 = load i8, i8* %87, align 1, !insn.addr !16514
  %89 = icmp ugt i8 %88, %73, !insn.addr !16514
  store i64 %74, i64* %merge.reg2mem, !insn.addr !16515
  br i1 %89, label %dec_label_pc_277fc, label %dec_label_pc_277a5, !insn.addr !16515

dec_label_pc_277e6:                               ; preds = %dec_label_pc_2778f.dec_label_pc_277e6_crit_edge, %dec_label_pc_277ba
  %.pre-phi5.reload = load i8*, i8** %.pre-phi5.reg2mem
  %.reload13 = load i8, i8* %.reg2mem12, !insn.addr !16516
  %90 = sub i8 %.reload13, ptrtoint (i32* @global_var_1 to i8), !insn.addr !16517
  %91 = icmp ugt i8 %90, ptrtoint (i32* @global_var_2 to i8)
  %92 = select i1 %91, i8 %90, i8 ptrtoint (i8** @global_var_3 to i8), !insn.addr !16518
  store i8 %92, i8* %.pre-phi5.reload, align 1, !insn.addr !16518
  store i8 %92, i8* %.reg2mem14, !insn.addr !16519
  br label %dec_label_pc_27805, !insn.addr !16519

dec_label_pc_277fc:                               ; preds = %dec_label_pc_277ce
  %93 = add i64 %arg2, 72, !insn.addr !16520
  %94 = inttoptr i64 %93 to i8*, !insn.addr !16520
  %95 = load i8, i8* %94, align 1, !insn.addr !16520
  store i8 %95, i8* %68, align 1, !insn.addr !16521
  store i8 %95, i8* %.reg2mem14, !insn.addr !16521
  br label %dec_label_pc_27805, !insn.addr !16521

dec_label_pc_27805:                               ; preds = %dec_label_pc_277fc, %dec_label_pc_277e6
  %.reload15 = load i8, i8* %.reg2mem14, !insn.addr !16522
  %96 = call i64 @nm131_set_lna_gain2.136(i64 %arg1, i8 %.reload15), !insn.addr !16523
  ret i64 %96, !insn.addr !16524
}

define void @wReg8Debug(i64 %pPrivate, i8 %adr, i8 %val8) local_unnamed_addr {
dec_label_pc_27824:
  ret void
}

define i64 @wReg8Debug.104(i64 %arg1, i64 %arg2, i64 %arg3) local_unnamed_addr {
dec_label_pc_27854:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = call i64 @mcount(), !insn.addr !16525
  %2 = urem i64 %0, 256, !insn.addr !16526
  %3 = urem i64 %arg3, 256, !insn.addr !16527
  %4 = urem i64 %arg2, 256, !insn.addr !16528
  %5 = inttoptr i64 %4 to i64*, !insn.addr !16529
  %6 = call i64 @wReg8.135(i64 %arg1, i64* %5, i64 %3), !insn.addr !16529
  %7 = trunc i64 %arg2 to i8, !insn.addr !16530
  %8 = icmp eq i8 %7, 52, !insn.addr !16530
  %9 = icmp eq i1 %8, false, !insn.addr !16531
  %narrow6 = mul nuw nsw i64 %2, 184
  %10 = inttoptr i64 %narrow6 to i32*
  %11 = load i32, i32* %10, align 8
  %12 = icmp ult i32 %11, 2
  br i1 %9, label %dec_label_pc_278e7, label %dec_label_pc_27891, !insn.addr !16531

dec_label_pc_27891:                               ; preds = %dec_label_pc_27854
  br i1 %12, label %dec_label_pc_278a4, label %dec_label_pc_278d0, !insn.addr !16532

dec_label_pc_278a4:                               ; preds = %dec_label_pc_27891
  %13 = trunc i64 %arg3 to i8, !insn.addr !16533
  %14 = icmp ult i8 %13, -16
  br i1 %14, label %dec_label_pc_278b9, label %dec_label_pc_278aa, !insn.addr !16534

dec_label_pc_278aa:                               ; preds = %dec_label_pc_278a4
  %15 = sub i8 0, %13
  %16 = sub i8 %15, 1
  %17 = inttoptr i64 %narrow6 to i8*, !insn.addr !16535
  store i8 %16, i8* %17, align 8, !insn.addr !16535
  ret i64 %narrow6, !insn.addr !16536

dec_label_pc_278b9:                               ; preds = %dec_label_pc_278a4
  %18 = inttoptr i64 %narrow6 to i8*, !insn.addr !16537
  store i8 0, i8* %18, align 8, !insn.addr !16537
  ret i64 %narrow6, !insn.addr !16538

dec_label_pc_278d0:                               ; preds = %dec_label_pc_27891
  %19 = inttoptr i64 %narrow6 to i8*, !insn.addr !16539
  store i8 0, i8* %19, align 8, !insn.addr !16539
  ret i64 %narrow6, !insn.addr !16540

dec_label_pc_278e7:                               ; preds = %dec_label_pc_27854
  br i1 %12, label %dec_label_pc_27903, label %dec_label_pc_27961, !insn.addr !16541

dec_label_pc_27903:                               ; preds = %dec_label_pc_278e7
  %20 = and i64 %arg3, 4294967295, !insn.addr !16542
  %21 = add nuw nsw i64 %20, 4294967216, !insn.addr !16543
  %22 = trunc i64 %21 to i8, !insn.addr !16544
  %23 = icmp ugt i8 %22, ptrtoint (i8* @global_var_f to i8)
  br i1 %23, label %dec_label_pc_2794d, label %dec_label_pc_2790b, !insn.addr !16545

dec_label_pc_2790b:                               ; preds = %dec_label_pc_27903
  %24 = call i64 @rReg32.101(i64 %arg1, i64 636), !insn.addr !16546
  %25 = trunc i64 %24 to i32, !insn.addr !16547
  %26 = icmp eq i32 %25, 6168, !insn.addr !16547
  %27 = icmp eq i1 %26, false, !insn.addr !16548
  br i1 %27, label %dec_label_pc_27932, label %dec_label_pc_2791f, !insn.addr !16548

dec_label_pc_2791f:                               ; preds = %dec_label_pc_2790b
  %28 = inttoptr i64 %narrow6 to i8*, !insn.addr !16549
  store i8 ptrtoint (i8* @global_var_10 to i8), i8* %28, align 8, !insn.addr !16549
  ret i64 %narrow6, !insn.addr !16550

dec_label_pc_27932:                               ; preds = %dec_label_pc_2790b
  %29 = sub nsw i64 95, %20, !insn.addr !16551
  %30 = urem i64 %29, 256, !insn.addr !16551
  %31 = trunc i64 %29 to i8, !insn.addr !16552
  %32 = inttoptr i64 %narrow6 to i8*, !insn.addr !16552
  store i8 %31, i8* %32, align 8, !insn.addr !16552
  ret i64 %30, !insn.addr !16553

dec_label_pc_2794d:                               ; preds = %dec_label_pc_27903
  %33 = and i64 %21, 4294967295, !insn.addr !16543
  %34 = inttoptr i64 %narrow6 to i8*, !insn.addr !16554
  store i8 0, i8* %34, align 8, !insn.addr !16554
  ret i64 %33, !insn.addr !16555

dec_label_pc_27961:                               ; preds = %dec_label_pc_278e7
  ret i64 %narrow6, !insn.addr !16556
}

define i16 @nm131_adec_get_rssi(i64 %pPrivate) local_unnamed_addr {
dec_label_pc_27970:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = trunc i64 %0 to i8
  %2 = mul i8 %1, 2, !insn.addr !16557
  %3 = inttoptr i64 %0 to i8*, !insn.addr !16557
  store i8 %2, i8* %3, align 1, !insn.addr !16557
  %4 = trunc i64 %0 to i16, !insn.addr !16558
  ret i16 %4, !insn.addr !16558
}

define i64 @nm131_adec_get_rssi.119(i64 %arg1) local_unnamed_addr {
dec_label_pc_279a0:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = call i64 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_3()
  %stack_var_-56 = alloca i16, align 2
  %3 = call i64 @mcount(), !insn.addr !16559
  %4 = call i64 @rReg32.101(i64 %arg1, i64 588), !insn.addr !16560
  %5 = and i64 %4, 4294967295, !insn.addr !16561
  %6 = zext i64 %5 to i128
  %7 = call i64 @nmi_debug.134(i64 %arg1, i64* inttoptr (i64 64 to i64*), i64 0, i128 %6, i64 %1, i64 %0), !insn.addr !16562
  %8 = shl i64 %5, ptrtoint (i64* @global_var_22 to i64), !insn.addr !16563
  %9 = udiv i64 %8, 549755813888, !insn.addr !16564
  %10 = call i64 @nmi_log10.264(i64 %9), !insn.addr !16565
  %11 = call i64 @nm131_demod_dagc_gain.106(i64 %arg1), !insn.addr !16566
  %12 = call i64 @nmi_log10.264(i64 %11), !insn.addr !16567
  %13 = bitcast i16* %stack_var_-56 to i64*, !insn.addr !16568
  %14 = call i64 @nm131_get_lna_gain.113(i64 %arg1, i64* nonnull %13), !insn.addr !16568
  %15 = urem i32 %2, 65536, !insn.addr !16569
  %16 = sub nsw i32 0, %15, !insn.addr !16569
  %17 = trunc i32 %16 to i16, !insn.addr !16570
  %18 = load i16, i16* %stack_var_-56, align 2, !insn.addr !16570
  %19 = and i32 %16, -65536, !insn.addr !16571
  %20 = trunc i64 %12 to i16
  %21 = trunc i64 %10 to i16
  %reass.add = add i16 %20, %21
  %reass.mul = mul i16 %reass.add, mul (i16 mul (i16 trunc (i64 add (i64 ptrtoint (i16* @global_var_4 to i64), i64 1) to i16), i16 trunc (i64 add (i64 ptrtoint (i16* @global_var_4 to i64), i64 1) to i16)), i16 -1)
  %22 = add i16 %17, 11400, !insn.addr !16571
  %23 = sub i16 %22, %18, !insn.addr !16572
  %24 = add i16 %23, %reass.mul, !insn.addr !16573
  %25 = icmp slt i16 %24, 0, !insn.addr !16573
  %26 = zext i16 %24 to i32, !insn.addr !16573
  %27 = or i32 %19, %26, !insn.addr !16573
  %28 = zext i32 %27 to i64
  %29 = select i1 %25, i64 0, i64 %28, !insn.addr !16574
  %30 = trunc i64 %29 to i16, !insn.addr !16575
  %31 = add i16 %30, -12700, !insn.addr !16575
  %32 = sub i16 12699, %30
  %33 = and i16 %32, %30, !insn.addr !16575
  %34 = icmp slt i16 %33, 0, !insn.addr !16575
  %35 = icmp eq i16 %31, 0, !insn.addr !16575
  %36 = icmp slt i16 %31, 0, !insn.addr !16575
  %37 = icmp eq i1 %36, %34, !insn.addr !16576
  %38 = icmp eq i1 %35, false, !insn.addr !16576
  %39 = icmp eq i1 %37, %38, !insn.addr !16576
  %40 = select i1 %39, i64 12700, i64 %29, !insn.addr !16576
  ret i64 %40, !insn.addr !16577
}

define i32 @nm131_get_chipid(i64 %pPrivate) local_unnamed_addr {
dec_label_pc_27a5f:
  %rax.0.reg2mem = alloca i64, !insn.addr !16578
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = call i64 @__decompiler_undefined_function_0()
  %2 = add i64 %1, 1090519040, !insn.addr !16578
  %3 = inttoptr i64 %2 to i8*, !insn.addr !16578
  %4 = load i8, i8* %3, align 1, !insn.addr !16578
  %5 = trunc i64 %1 to i16, !insn.addr !16578
  %6 = zext i8 %4 to i16, !insn.addr !16578
  %7 = sdiv i16 %5, %6, !insn.addr !16578
  %8 = and i64 %1, -65536, !insn.addr !16578
  %9 = srem i16 %5, %6, !insn.addr !16578
  %10 = mul i16 %9, 256
  %11 = zext i16 %10 to i64, !insn.addr !16578
  %12 = urem i16 %7, 256
  %.masked = zext i16 %12 to i64
  %13 = or i64 %8, %.masked, !insn.addr !16578
  %14 = or i64 %13, %11, !insn.addr !16578
  %15 = trunc i64 %0 to i32
  %16 = icmp eq i32 %15, 96000000, !insn.addr !16579
  %17 = icmp eq i1 %16, false, !insn.addr !16580
  store i64 %14, i64* %rax.0.reg2mem, !insn.addr !16580
  br i1 %17, label %dec_label_pc_27a7d, label %dec_label_pc_27a71, !insn.addr !16580

dec_label_pc_27a71:                               ; preds = %dec_label_pc_27a5f
  %18 = trunc i64 %14 to i16, !insn.addr !16581
  %19 = add i16 %18, -1699, !insn.addr !16581
  %20 = sub i16 1698, %18
  %21 = and i16 %20, %18, !insn.addr !16581
  %22 = icmp slt i16 %21, 0, !insn.addr !16581
  %23 = icmp eq i16 %19, 0, !insn.addr !16581
  %24 = icmp slt i16 %19, 0, !insn.addr !16581
  %25 = icmp ne i1 %24, %22, !insn.addr !16582
  %26 = or i1 %23, %25, !insn.addr !16582
  %27 = and i64 %14, 4294967295
  %28 = select i1 %26, i64 0, i64 %27, !insn.addr !16582
  store i64 %28, i64* %rax.0.reg2mem, !insn.addr !16582
  br label %dec_label_pc_27a7d, !insn.addr !16582

dec_label_pc_27a7d:                               ; preds = %dec_label_pc_27a71, %dec_label_pc_27a5f
  %rax.0.reload = load i64, i64* %rax.0.reg2mem
  %29 = trunc i64 %rax.0.reload to i32, !insn.addr !16583
  ret i32 %29, !insn.addr !16583
}

define i64 @nm131_get_chipid.100(i64 %arg1) local_unnamed_addr {
dec_label_pc_27a8f:
  %0 = call i64 @mcount(), !insn.addr !16584
  %1 = call i64 @rReg32.101(i64 %arg1, i64 1020), !insn.addr !16585
  ret i64 %1, !insn.addr !16586
}

define void @wRegBurst(i64 %pPrivate, i32 %adr, i8* %bd, i32 %sz) local_unnamed_addr {
dec_label_pc_27ab9:
  ret void, !insn.addr !16587
}

define i64 @function_27abc(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4, i64 %arg5, i64 %arg6) local_unnamed_addr {
dec_label_pc_27abc:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = call i64 @__decompiler_undefined_function_0()
  %2 = call i64 @__decompiler_undefined_function_0()
  %3 = call i64 @__decompiler_undefined_function_0()
  %4 = call i64 @__decompiler_undefined_function_0()
  %rax = alloca i64, align 8
  %5 = add i64 %3, -119, !insn.addr !16588
  %6 = inttoptr i64 %5 to i32*, !insn.addr !16588
  %7 = load i32, i32* %6, align 4, !insn.addr !16588
  %8 = add i32 %7, ptrtoint (i32* @global_var_1 to i32), !insn.addr !16588
  store i32 %8, i32* %6, align 4, !insn.addr !16588
  %9 = sub i64 %arg4, ptrtoint (i32* @global_var_1 to i64), !insn.addr !16589
  %10 = load i64, i64* %rax, align 8, !insn.addr !16590
  %11 = add i64 %10, -57, !insn.addr !16590
  %12 = inttoptr i64 %11 to i32*, !insn.addr !16590
  %13 = load i32, i32* %12, align 4, !insn.addr !16590
  %14 = udiv i32 %13, 4, !insn.addr !16590
  %15 = shl i32 %13, ptrtoint (i8** @global_var_1e to i32), !insn.addr !16590
  %16 = or i32 %14, %15, !insn.addr !16590
  store i32 %16, i32* %12, align 4, !insn.addr !16590
  %17 = bitcast i64* %rax to i8*
  %18 = load i8, i8* %17, align 8, !insn.addr !16591
  %19 = load i64, i64* %rax, align 8
  %20 = trunc i64 %19 to i8, !insn.addr !16591
  %21 = add i8 %18, %20, !insn.addr !16591
  %22 = inttoptr i64 %19 to i8*, !insn.addr !16591
  store i8 %21, i8* %22, align 1, !insn.addr !16591
  %23 = load i8, i8* %17, align 8, !insn.addr !16592
  %24 = load i64, i64* %rax, align 8
  %25 = trunc i64 %24 to i8, !insn.addr !16592
  %26 = add i8 %23, %25, !insn.addr !16592
  %27 = inttoptr i64 %24 to i8*, !insn.addr !16592
  store i8 %26, i8* %27, align 1, !insn.addr !16592
  %28 = sext i64 %9 to i128, !insn.addr !16593
  %29 = call i64 @nmi_debug.134(i64 %4, i64* bitcast (i8* @global_var_10 to i64*), i64 %arg3, i128 %28, i64 %2, i64 %1), !insn.addr !16593
  %30 = and i64 %0, 4294967295, !insn.addr !16594
  ret i64 %30, !insn.addr !16595
}

define i64 @wRegBurst.137(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4) local_unnamed_addr {
dec_label_pc_27ae9:
  %stack_var_-332.0.reg2mem = alloca i32, !insn.addr !16596
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = call i64 @__decompiler_undefined_function_0()
  %rdi = alloca i64, align 8
  store i64 %arg1, i64* %rdi, align 8
  %stack_var_-326 = alloca i64, align 8
  %2 = call i64 @mcount(), !insn.addr !16597
  %3 = call i64 @__readgsqword(i64 40), !insn.addr !16598
  %4 = trunc i64 %arg4 to i32, !insn.addr !16599
  %5 = icmp slt i32 %4, 1025, !insn.addr !16599
  br i1 %5, label %dec_label_pc_27b3f, label %dec_label_pc_27b29, !insn.addr !16599

dec_label_pc_27b29:                               ; preds = %dec_label_pc_27ae9
  %6 = sext i64 %arg4 to i128, !insn.addr !16600
  %7 = call i64 @nmi_debug.134(i64 %arg1, i64* bitcast (i32* @global_var_2 to i64*), i64 0, i128 %6, i64 %1, i64 %0), !insn.addr !16600
  ret i64 %7, !insn.addr !16601

dec_label_pc_27b3f:                               ; preds = %dec_label_pc_27ae9
  %8 = trunc i64 %arg2 to i32, !insn.addr !16602
  %9 = icmp ult i32 %8, 55
  br i1 %9, label %dec_label_pc_27b44, label %dec_label_pc_27b86, !insn.addr !16603

dec_label_pc_27b44:                               ; preds = %dec_label_pc_27b3f
  %10 = and i64 %arg2, 4294967295, !insn.addr !16604
  %11 = mul i64 %10, ptrtoint (i32* @global_var_1 to i64), !insn.addr !16605
  %12 = add i64 %11, %arg4, !insn.addr !16605
  %13 = trunc i64 %12 to i32, !insn.addr !16605
  %14 = icmp ult i32 %13, 55
  br i1 %14, label %dec_label_pc_27b86, label %dec_label_pc_27b4d, !insn.addr !16606

dec_label_pc_27b4d:                               ; preds = %dec_label_pc_27b44
  %15 = urem i64 %arg1, 256, !insn.addr !16607
  %16 = mul nuw nsw i64 %15, 184, !insn.addr !16607
  %17 = inttoptr i64 %16 to i32*, !insn.addr !16608
  %18 = load i32, i32* %17, align 8, !insn.addr !16608
  %19 = icmp eq i32 %18, 0, !insn.addr !16608
  %20 = sub i64 54, %arg2
  %21 = and i64 %20, 4294967295
  %22 = add i64 %21, %arg3
  %23 = inttoptr i64 %22 to i8*
  %24 = load i8, i8* %23, align 1
  br i1 %19, label %dec_label_pc_27b74, label %dec_label_pc_27b60, !insn.addr !16609

dec_label_pc_27b60:                               ; preds = %dec_label_pc_27b4d
  %25 = or i8 %24, -128, !insn.addr !16610
  store i8 %25, i8* %23, align 1, !insn.addr !16610
  br label %dec_label_pc_27b86, !insn.addr !16611

dec_label_pc_27b74:                               ; preds = %dec_label_pc_27b4d
  %26 = urem i8 %24, -128
  store i8 %26, i8* %23, align 1, !insn.addr !16612
  br label %dec_label_pc_27b86, !insn.addr !16612

dec_label_pc_27b86:                               ; preds = %dec_label_pc_27b3f, %dec_label_pc_27b74, %dec_label_pc_27b60, %dec_label_pc_27b44
  %27 = bitcast i64* %rdi to i8*
  %28 = load i8, i8* %27, align 8, !insn.addr !16613
  %29 = zext i8 %28 to i64
  %30 = mul nuw nsw i64 %29, 184
  %31 = inttoptr i64 %30 to i64*, !insn.addr !16614
  %32 = load i64, i64* %31, align 8, !insn.addr !16614
  %33 = icmp eq i64 %32, 0, !insn.addr !16615
  store i32 ptrtoint (i32* @global_var_1 to i32), i32* %stack_var_-332.0.reg2mem, !insn.addr !16616
  br i1 %33, label %dec_label_pc_27bc9, label %dec_label_pc_27ba7, !insn.addr !16616

dec_label_pc_27ba7:                               ; preds = %dec_label_pc_27b86
  %34 = trunc i64 %32 to i32
  %35 = add i32 %34, -2, !insn.addr !16617
  %36 = icmp ult i32 %35, 256
  %37 = select i1 %36, i32 %35, i32 256, !insn.addr !16618
  store i32 %37, i32* %stack_var_-332.0.reg2mem, !insn.addr !16619
  br label %dec_label_pc_27bc9, !insn.addr !16619

dec_label_pc_27bc9:                               ; preds = %dec_label_pc_27ba7, %dec_label_pc_27b86
  %stack_var_-332.0.reload = load i32, i32* %stack_var_-332.0.reg2mem
  %38 = ptrtoint i64* %stack_var_-326 to i64, !insn.addr !16620
  %39 = icmp ult i32 %stack_var_-332.0.reload, %4
  %40 = select i1 %39, i32 %stack_var_-332.0.reload, i32 %4, !insn.addr !16621
  %41 = zext i32 %40 to i64, !insn.addr !16622
  %42 = call i64 @memcpy(i64 %38, i64 %arg3, i64 %41, i64 %arg4), !insn.addr !16623
  ret i64 %30, !insn.addr !16624
}

define void @wReg32(i64 %pPrivate, i16 %adr, i32 %val) local_unnamed_addr {
dec_label_pc_27c86:
  ret void, !insn.addr !16625
}

define i64 @wReg32.436(i64 %arg1, i64 %arg2, i64* %arg3) local_unnamed_addr {
dec_label_pc_27cb6:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = call i64 @__decompiler_undefined_function_0()
  %2 = call i64 @mcount(), !insn.addr !16626
  %3 = urem i64 %arg1, 256, !insn.addr !16627
  %4 = mul nuw nsw i64 %3, 184, !insn.addr !16628
  %5 = inttoptr i64 %4 to i64*, !insn.addr !16629
  %6 = load i64, i64* %5, align 8, !insn.addr !16629
  %7 = icmp eq i64 %6, 0, !insn.addr !16629
  br i1 %7, label %dec_label_pc_27cfb, label %dec_label_pc_27cf2, !insn.addr !16630

dec_label_pc_27cf2:                               ; preds = %dec_label_pc_27cb6
  %8 = inttoptr i64 %4 to i8*, !insn.addr !16631
  %9 = load i8, i8* %8, align 8, !insn.addr !16631
  %10 = icmp eq i8 %9, 0, !insn.addr !16631
  br i1 %10, label %dec_label_pc_27d16, label %dec_label_pc_27cfb, !insn.addr !16632

dec_label_pc_27cfb:                               ; preds = %dec_label_pc_27cf2, %dec_label_pc_27cb6
  %11 = zext i64 %4 to i128
  %12 = call i64 @nmi_debug.134(i64 %arg1, i64* bitcast (i32* @global_var_2 to i64*), i64 0, i128 %11, i64 %1, i64 %0), !insn.addr !16633
  ret i64 %12, !insn.addr !16634

dec_label_pc_27d16:                               ; preds = %dec_label_pc_27cf2
  ret i64 %4, !insn.addr !16635
}

define void @nm131_fm_overmod(i64 %pPrivate, i8 %fmovermod) local_unnamed_addr {
dec_label_pc_27d65:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = call i64 @__decompiler_undefined_function_0()
  %2 = call i64 @__decompiler_undefined_function_0()
  %3 = call i64 @__decompiler_undefined_function_0()
  %4 = sext i64 %3 to i128, !insn.addr !16636
  %5 = call i64 @nmi_debug.134(i64 %2, i64* bitcast (i32* @global_var_2 to i64*), i64 0, i128 %4, i64 %1, i64 %0), !insn.addr !16636
  %6 = urem i64 %2, 256, !insn.addr !16637
  %7 = mul nuw nsw i64 %6, 184, !insn.addr !16637
  %8 = inttoptr i64 %7 to i8*, !insn.addr !16638
  store i8 ptrtoint (i32* @global_var_1 to i8), i8* %8, align 8, !insn.addr !16638
  ret void, !insn.addr !16639
}

define i64 @nm131_fm_overmod.131(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_27d95:
  %rdx.0.reg2mem = alloca i64, !insn.addr !16640
  %0 = call i64 @mcount(), !insn.addr !16641
  %1 = urem i64 %arg1, 256, !insn.addr !16642
  %2 = mul nuw nsw i64 %1, 184, !insn.addr !16643
  %3 = inttoptr i64 %2 to i32*, !insn.addr !16644
  %4 = load i32, i32* %3, align 8, !insn.addr !16644
  %5 = icmp eq i32 %4, 2, !insn.addr !16644
  %6 = icmp eq i1 %5, false, !insn.addr !16645
  br i1 %6, label %dec_label_pc_27df7, label %dec_label_pc_27de1, !insn.addr !16645

dec_label_pc_27de1:                               ; preds = %dec_label_pc_27d95
  %7 = call i64 @wReg32.436(i64 %arg1, i64 592, i64* bitcast (i32* @global_var_2 to i64*)), !insn.addr !16646
  %8 = trunc i64 %arg2 to i8, !insn.addr !16647
  %9 = icmp eq i8 %8, 0, !insn.addr !16647
  br i1 %9, label %dec_label_pc_27e64, label %dec_label_pc_27e50, !insn.addr !16648

dec_label_pc_27df7:                               ; preds = %dec_label_pc_27d95
  %10 = trunc i64 %arg2 to i8, !insn.addr !16649
  %11 = icmp eq i8 %10, 0, !insn.addr !16649
  br i1 %11, label %dec_label_pc_27e0d, label %dec_label_pc_27dfc, !insn.addr !16650

dec_label_pc_27dfc:                               ; preds = %dec_label_pc_27df7
  %12 = call i64 @wReg32.436(i64 %arg1, i64 592, i64* bitcast (i16* @global_var_4 to i64*)), !insn.addr !16651
  br label %dec_label_pc_27e50, !insn.addr !16652

dec_label_pc_27e0d:                               ; preds = %dec_label_pc_27df7
  %13 = zext i32 %4 to i64, !insn.addr !16653
  %14 = inttoptr i64 %13 to i8*, !insn.addr !16654
  %15 = load i8, i8* %14, align 1, !insn.addr !16654
  %16 = zext i8 %15 to i64, !insn.addr !16654
  %17 = icmp eq i8 %15, 0, !insn.addr !16655
  %18 = icmp eq i1 %17, false, !insn.addr !16656
  store i64 %16, i64* %rdx.0.reg2mem, !insn.addr !16656
  br i1 %18, label %dec_label_pc_27e41, label %dec_label_pc_27e28, !insn.addr !16656

dec_label_pc_27e28:                               ; preds = %dec_label_pc_27e0d
  %19 = inttoptr i64 %2 to i8*, !insn.addr !16657
  %20 = load i8, i8* %19, align 8, !insn.addr !16657
  %21 = icmp eq i8 %20, 1, !insn.addr !16657
  %22 = select i1 %21, i64 zext (i32 ptrtoint (i32* @global_var_2 to i32) to i64), i64 %16, !insn.addr !16658
  store i64 %22, i64* %rdx.0.reg2mem, !insn.addr !16658
  br label %dec_label_pc_27e41, !insn.addr !16658

dec_label_pc_27e41:                               ; preds = %dec_label_pc_27e28, %dec_label_pc_27e0d
  %rdx.0.reload = load i64, i64* %rdx.0.reg2mem
  %23 = inttoptr i64 %rdx.0.reload to i64*, !insn.addr !16659
  %24 = call i64 @wReg32.436(i64 %arg1, i64 592, i64* %23), !insn.addr !16659
  br label %dec_label_pc_27e64, !insn.addr !16660

dec_label_pc_27e50:                               ; preds = %dec_label_pc_27de1, %dec_label_pc_27dfc
  %25 = call i64 @wReg32.436(i64 %arg1, i64 636, i64* inttoptr (i64 2827 to i64*)), !insn.addr !16661
  ret i64 %25, !insn.addr !16662

dec_label_pc_27e64:                               ; preds = %dec_label_pc_27e41, %dec_label_pc_27de1
  %26 = load i32, i32* %3, align 8, !insn.addr !16663
  %27 = icmp ult i32 %26, 2
  br i1 %27, label %dec_label_pc_27e77, label %dec_label_pc_27eb2, !insn.addr !16664

dec_label_pc_27e77:                               ; preds = %dec_label_pc_27e64
  %28 = inttoptr i64 %2 to i8*, !insn.addr !16665
  %29 = load i8, i8* %28, align 8, !insn.addr !16665
  %30 = icmp eq i8 %29, 16, !insn.addr !16665
  %31 = icmp eq i1 %30, false, !insn.addr !16666
  br i1 %31, label %dec_label_pc_27e9e, label %dec_label_pc_27e8a, !insn.addr !16666

dec_label_pc_27e8a:                               ; preds = %dec_label_pc_27e77
  %32 = call i64 @wReg32.436(i64 %arg1, i64 636, i64* inttoptr (i64 6168 to i64*)), !insn.addr !16667
  ret i64 %32, !insn.addr !16668

dec_label_pc_27e9e:                               ; preds = %dec_label_pc_27e77
  %33 = call i64 @wReg32.436(i64 %arg1, i64 636, i64* inttoptr (i64 4112 to i64*)), !insn.addr !16669
  ret i64 %33, !insn.addr !16670

dec_label_pc_27eb2:                               ; preds = %dec_label_pc_27e64
  ret i64 %2, !insn.addr !16670
}

define void @nm120_nolock_reset(i64 %pPrivate) local_unnamed_addr {
dec_label_pc_27eb3:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = call i64 @__decompiler_undefined_function_0()
  %2 = call i64 @__decompiler_undefined_function_0()
  %3 = call i64 @__decompiler_undefined_function_0()
  %rax = alloca i64, align 8
  %4 = call i64 @__decompiler_undefined_function_0()
  %5 = call i1 @__decompiler_undefined_function_2()
  %6 = bitcast i64* %rax to i8*
  %7 = trunc i64 %4 to i8
  %8 = trunc i64 %3 to i8, !insn.addr !16671
  %9 = zext i1 %5 to i8, !insn.addr !16671
  %10 = add i8 %7, %8, !insn.addr !16671
  %11 = add i8 %10, %9, !insn.addr !16671
  %12 = inttoptr i64 %4 to i8*, !insn.addr !16671
  store i8 %11, i8* %12, align 1, !insn.addr !16671
  %13 = load i8, i8* %6, align 8, !insn.addr !16672
  %14 = load i64, i64* %rax, align 8
  %15 = trunc i64 %14 to i8, !insn.addr !16672
  %16 = add i8 %13, %15, !insn.addr !16672
  %17 = inttoptr i64 %14 to i8*, !insn.addr !16672
  store i8 %16, i8* %17, align 1, !insn.addr !16672
  %18 = inttoptr i64 %3 to i64*, !insn.addr !16673
  %19 = call i64 @wReg32.436(i64 %0, i64 636, i64* %18), !insn.addr !16673
  %sext = mul i64 %2, 4294967296
  %20 = sdiv i64 %sext, 4294967296, !insn.addr !16674
  %narrow = mul nsw i64 %20, 184
  %21 = trunc i64 %1 to i8, !insn.addr !16675
  %22 = inttoptr i64 %narrow to i8*, !insn.addr !16675
  store i8 %21, i8* %22, align 8, !insn.addr !16675
  ret void, !insn.addr !16676
}

define i64 @nm120_nolock_reset.130(i64 %arg1) local_unnamed_addr {
dec_label_pc_27ee3:
  %0 = call i64 @mcount(), !insn.addr !16677
  %1 = call i64 @rReg32.101(i64 %arg1, i64 260), !insn.addr !16678
  %2 = and i64 %1, 4294967263, !insn.addr !16679
  %3 = inttoptr i64 %2 to i64*, !insn.addr !16680
  %4 = call i64 @wReg32.436(i64 %arg1, i64 260, i64* %3), !insn.addr !16680
  %5 = call i64 @nmi_delay.87(i64 %arg1, i64* bitcast (i8* @global_var_a to i64*)), !insn.addr !16681
  %6 = or i64 %2, zext (i32 ptrtoint (i32** @global_var_20 to i32) to i64), !insn.addr !16682
  %7 = inttoptr i64 %6 to i64*, !insn.addr !16683
  %8 = call i64 @wReg32.436(i64 %arg1, i64 260, i64* %7), !insn.addr !16683
  ret i64 %8, !insn.addr !16684
}

define void @nm131_set_mute(i64 %pPrivate, i8 %mute) local_unnamed_addr {
dec_label_pc_27f3c:
  %rsi = alloca i64, align 8
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = call i64 @__decompiler_undefined_function_0()
  %2 = call i64 @__decompiler_undefined_function_0()
  %3 = trunc i64 %2 to i32
  %4 = mul i32 %3, 2, !insn.addr !16685
  %5 = inttoptr i64 %2 to i32*, !insn.addr !16685
  store i32 %4, i32* %5, align 4, !insn.addr !16685
  %6 = add i64 %2, -119, !insn.addr !16686
  %7 = inttoptr i64 %6 to i8*, !insn.addr !16686
  %8 = load i8, i8* %7, align 1, !insn.addr !16686
  %9 = trunc i64 %1 to i8, !insn.addr !16686
  %10 = add i8 %8, %9, !insn.addr !16686
  store i8 %10, i8* %7, align 1, !insn.addr !16686
  %11 = trunc i64 %0 to i16, !insn.addr !16687
  %12 = bitcast i64* %rsi to i32*
  %13 = load i32, i32* %12, align 8, !insn.addr !16687
  call void @__asm_outsd(i16 %11, i32 %13), !insn.addr !16687
  ret void, !insn.addr !16688
}

define i64 @function_27f47(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_27f47:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = call i64 @__decompiler_undefined_function_0()
  %2 = call i64 @nmi_delay.87(i64 %1, i64* bitcast (i8* @global_var_a to i64*)), !insn.addr !16689
  %3 = and i64 %0, 4294967279, !insn.addr !16690
  %4 = inttoptr i64 %3 to i64*, !insn.addr !16691
  %5 = call i64 @wReg32.436(i64 %1, i64 260, i64* %4), !insn.addr !16691
  ret i64 %5, !insn.addr !16692
}

define i64 @nm131_set_mute.128(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_27f6c:
  %0 = call i64 @mcount(), !insn.addr !16693
  %1 = call i64 @rReg32.101(i64 %arg1, i64 53), !insn.addr !16694
  %2 = and i64 %1, 4294967279, !insn.addr !16695
  ret i64 %2, !insn.addr !16696
}

define void @nm131_set_brightness(i64 %pPrivate, i8 %brightness) local_unnamed_addr {
dec_label_pc_27fd4:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = call i64 @__decompiler_undefined_function_0()
  %2 = call i64 @__decompiler_undefined_function_0()
  %3 = call i64 @__decompiler_undefined_function_0()
  %4 = call i64 @__decompiler_undefined_function_0()
  %5 = call i1 @__decompiler_undefined_function_2()
  %6 = icmp eq i1 %5, false, !insn.addr !16697
  %.v = select i1 %6, i64 %4, i64 %3
  %7 = and i64 %.v, 4294967295, !insn.addr !16697
  %8 = inttoptr i64 %7 to i64*, !insn.addr !16698
  %9 = call i64 @wReg32.436(i64 %2, i64 53, i64* %8), !insn.addr !16698
  %sext = mul i64 %1, 4294967296
  %10 = sdiv i64 %sext, 4294967296, !insn.addr !16699
  %narrow = mul nsw i64 %10, 184
  %11 = trunc i64 %0 to i8, !insn.addr !16700
  %12 = inttoptr i64 %narrow to i8*, !insn.addr !16700
  store i8 %11, i8* %12, align 8, !insn.addr !16700
  ret void, !insn.addr !16701
}

define i64 @nm131_set_brightness.125(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_28004:
  %0 = call i64 @mcount(), !insn.addr !16702
  %1 = call i64 @rReg32.101(i64 %arg1, i64 512), !insn.addr !16703
  ret i64 %1, !insn.addr !16704
}

define void @nm131_set_volume(i64 %pPrivate, i8 %vol) local_unnamed_addr {
dec_label_pc_28063:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = trunc i64 %0 to i8
  %2 = mul i8 %1, 2, !insn.addr !16705
  %3 = inttoptr i64 %0 to i8*, !insn.addr !16705
  store i8 %2, i8* %3, align 1, !insn.addr !16705
  ret void, !insn.addr !16706
}

define i64 @function_28069() local_unnamed_addr {
dec_label_pc_28069:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = call i64 @__decompiler_undefined_function_0()
  %2 = call i64 @__decompiler_undefined_function_0()
  %3 = call i64 @__decompiler_undefined_function_0()
  %4 = call i64 @__decompiler_undefined_function_0()
  %5 = call i64 @__decompiler_undefined_function_0()
  %6 = trunc i64 %5 to i8
  %7 = mul i8 %6, 2, !insn.addr !16707
  %8 = inttoptr i64 %5 to i8*, !insn.addr !16707
  store i8 %7, i8* %8, align 1, !insn.addr !16707
  %9 = inttoptr i64 %4 to i64*, !insn.addr !16708
  %10 = call i64 @wReg32.436(i64 %3, i64 %2, i64* %9), !insn.addr !16708
  %sext = mul i64 %1, 4294967296
  %11 = sdiv i64 %sext, 4294967296, !insn.addr !16709
  %narrow = mul nsw i64 %11, 184
  %12 = trunc i64 %0 to i8, !insn.addr !16710
  %13 = inttoptr i64 %narrow to i8*, !insn.addr !16710
  store i8 %12, i8* %13, align 8, !insn.addr !16710
  ret i64 %10, !insn.addr !16710
}

define i64 @nm131_set_volume.121(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_28093:
  %storemerge.reg2mem = alloca i64, !insn.addr !16711
  %0 = call i64 @mcount(), !insn.addr !16712
  %1 = urem i64 %arg1, 256, !insn.addr !16713
  %2 = mul nuw nsw i64 %1, 184, !insn.addr !16714
  %3 = trunc i64 %arg2 to i8, !insn.addr !16715
  %4 = icmp ugt i8 %3, ptrtoint (i8* @global_var_f to i8)
  %5 = or i64 %2, 1
  %6 = inttoptr i64 %5 to i8*
  %7 = load i8, i8* %6, align 1
  br i1 %4, label %dec_label_pc_28146, label %dec_label_pc_280d8, !insn.addr !16716

dec_label_pc_280d8:                               ; preds = %dec_label_pc_28093
  %8 = icmp ult i8 %7, %3
  %9 = zext i8 %7 to i64, !insn.addr !16717
  %10 = select i1 %8, i64 %9, i64 %arg2, !insn.addr !16717
  %11 = sub i64 95, %10, !insn.addr !16718
  %12 = urem i64 %11, 256, !insn.addr !16719
  %13 = call i64 @wReg8.135(i64 %arg1, i64* inttoptr (i64 53 to i64*), i64 %12), !insn.addr !16720
  %14 = add nuw nsw i64 %2, 14, !insn.addr !16721
  %15 = inttoptr i64 %14 to i8*, !insn.addr !16721
  %16 = load i8, i8* %15, align 2, !insn.addr !16721
  %17 = icmp eq i8 %16, 0, !insn.addr !16721
  br i1 %17, label %dec_label_pc_28120, label %dec_label_pc_2810c, !insn.addr !16722

dec_label_pc_2810c:                               ; preds = %dec_label_pc_280d8
  %18 = call i64 @wReg32.436(i64 %arg1, i64 636, i64* inttoptr (i64 2827 to i64*)), !insn.addr !16723
  store i64 %18, i64* %storemerge.reg2mem, !insn.addr !16724
  br label %dec_label_pc_28132, !insn.addr !16724

dec_label_pc_28120:                               ; preds = %dec_label_pc_280d8
  %19 = call i64 @wReg32.436(i64 %arg1, i64 636, i64* inttoptr (i64 4112 to i64*)), !insn.addr !16725
  store i64 %19, i64* %storemerge.reg2mem, !insn.addr !16725
  br label %dec_label_pc_28132, !insn.addr !16725

dec_label_pc_28132:                               ; preds = %dec_label_pc_28120, %dec_label_pc_2810c
  %storemerge.reload = load i64, i64* %storemerge.reg2mem
  %20 = trunc i64 %10 to i8, !insn.addr !16726
  %21 = inttoptr i64 %2 to i8*, !insn.addr !16726
  store i8 %20, i8* %21, align 8, !insn.addr !16726
  ret i64 %storemerge.reload, !insn.addr !16727

dec_label_pc_28146:                               ; preds = %dec_label_pc_28093
  %22 = sub i8 95, %7, !insn.addr !16728
  %23 = zext i8 %22 to i64, !insn.addr !16729
  %24 = call i64 @wReg8.135(i64 %arg1, i64* inttoptr (i64 53 to i64*), i64 %23), !insn.addr !16730
  %25 = add nuw nsw i64 %2, 14, !insn.addr !16731
  %26 = inttoptr i64 %25 to i8*, !insn.addr !16731
  %27 = load i8, i8* %26, align 2, !insn.addr !16731
  %28 = icmp eq i8 %27, 0, !insn.addr !16731
  br i1 %28, label %dec_label_pc_28190, label %dec_label_pc_2817c, !insn.addr !16732

dec_label_pc_2817c:                               ; preds = %dec_label_pc_28146
  %29 = call i64 @wReg32.436(i64 %arg1, i64 636, i64* inttoptr (i64 2827 to i64*)), !insn.addr !16733
  ret i64 %29, !insn.addr !16734

dec_label_pc_28190:                               ; preds = %dec_label_pc_28146
  ret i64 %24, !insn.addr !16735
}

define void @nm131_invert_spectum(i64 %pPrivate, i32 %invert) local_unnamed_addr {
dec_label_pc_2819b:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = call i64 @__decompiler_undefined_function_0()
  %2 = call i64 @__decompiler_undefined_function_0()
  %3 = sext i32 %invert to i64
  %4 = and i64 %1, 4294967295, !insn.addr !16736
  %5 = inttoptr i64 %2 to i64*, !insn.addr !16737
  %6 = call i64 @wReg32.436(i64 %4, i64 %3, i64* %5), !insn.addr !16737
  %sext = mul i64 %0, 4294967296
  %7 = sdiv i64 %sext, 4294967296, !insn.addr !16738
  %narrow = mul nsw i64 %7, 184
  %8 = inttoptr i64 %narrow to i8*, !insn.addr !16739
  store i8 ptrtoint (i8* @global_var_10 to i8), i8* %8, align 8, !insn.addr !16739
  ret void, !insn.addr !16740
}

define i64 @nm131_invert_spectum.115(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_281cb:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = call i64 @mcount(), !insn.addr !16741
  %2 = urem i64 %0, 256, !insn.addr !16742
  %3 = call i64 @rReg32.101(i64 %arg1, i64 ptrtoint (i32* @global_var_21c to i64)), !insn.addr !16743
  %4 = mul nuw nsw i64 %2, 184, !insn.addr !16744
  %5 = inttoptr i64 %4 to i32*, !insn.addr !16745
  %6 = load i32, i32* %5, align 8, !insn.addr !16745
  %7 = zext i32 %6 to i64, !insn.addr !16745
  %8 = mul i64 %7, 4, !insn.addr !16746
  %9 = inttoptr i64 %8 to i32*, !insn.addr !16746
  %10 = load i32, i32* %9, align 4, !insn.addr !16746
  %11 = zext i32 %10 to i64, !insn.addr !16747
  %12 = mul nuw nsw i64 %11, 274877907, !insn.addr !16747
  %13 = lshr i64 %12, ptrtoint (i32** @global_var_20 to i64), !insn.addr !16747
  %14 = trunc i64 %arg2 to i32, !insn.addr !16748
  %15 = icmp eq i32 %14, 0, !insn.addr !16748
  %16 = icmp eq i1 %15, false, !insn.addr !16749
  %17 = mul i64 %13, 512
  br i1 %16, label %dec_label_pc_282c4, label %dec_label_pc_28252, !insn.addr !16749

dec_label_pc_28252:                               ; preds = %dec_label_pc_281cb
  %18 = udiv i32 %6, 131072
  %19 = add nuw nsw i32 %18, 843
  %20 = trunc i64 %17 to i32
  %.lhs.trunc9 = and i32 %20, -131072
  %21 = udiv i32 %.lhs.trunc9, %19
  %.zext11 = zext i32 %21 to i64
  ret i64 %.zext11, !insn.addr !16750

dec_label_pc_282c4:                               ; preds = %dec_label_pc_281cb
  %22 = inttoptr i64 %4 to i8*
  %23 = load i8, i8* %22, align 8
  %24 = icmp eq i8 %23, 0
  %25 = icmp eq i1 %24, false
  br i1 %25, label %dec_label_pc_28305, label %dec_label_pc_282d7, !insn.addr !16751

dec_label_pc_282d7:                               ; preds = %dec_label_pc_282c4
  %26 = udiv i32 %6, 131072, !insn.addr !16752
  %27 = add nuw nsw i32 %26, 843, !insn.addr !16753
  %28 = trunc i64 %17 to i32
  %.lhs.trunc = and i32 %28, -131072
  %29 = udiv i32 %.lhs.trunc, %27
  %.zext = zext i32 %29 to i64
  ret i64 %.zext, !insn.addr !16754

dec_label_pc_28305:                               ; preds = %dec_label_pc_282c4
  %30 = and i64 %17, 4294836224, !insn.addr !16755
  ret i64 %30, !insn.addr !16756
}

define void @nm131_demod_soft_reset(i64 %pPrivate) local_unnamed_addr {
dec_label_pc_2832a:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = call i64 @__decompiler_undefined_function_0()
  %2 = call i64 @__decompiler_undefined_function_0()
  %3 = call i64 @__decompiler_undefined_function_0()
  %4 = call i64 @__decompiler_undefined_function_0()
  %5 = and i64 %4, 4294967295, !insn.addr !16757
  %6 = and i64 %2, 4294967295, !insn.addr !16757
  %7 = shl i64 %6, ptrtoint (i32** @global_var_20 to i64), !insn.addr !16757
  %8 = or i64 %5, %7, !insn.addr !16757
  %9 = and i64 %pPrivate, 4294967295, !insn.addr !16757
  %10 = udiv i64 %8, %9, !insn.addr !16757
  %11 = add i64 %10, %0, !insn.addr !16758
  %12 = and i64 %3, 4290772992, !insn.addr !16759
  %13 = urem i64 %11, 4194304, !insn.addr !16760
  %14 = or i64 %13, %12, !insn.addr !16761
  %15 = inttoptr i64 %14 to i64*, !insn.addr !16762
  %16 = call i64 @wReg32.436(i64 %1, i64 ptrtoint (i32* @global_var_21c to i64), i64* %15), !insn.addr !16762
  ret void, !insn.addr !16763
}

define i64 @nm131_demod_soft_reset.111(i64 %arg1) local_unnamed_addr {
dec_label_pc_2835a:
  %0 = call i64 @mcount(), !insn.addr !16764
  %1 = call i64 @rReg32.101(i64 %arg1, i64 260), !insn.addr !16765
  %2 = or i64 %1, zext (i32 ptrtoint (i32* @global_var_1 to i32) to i64), !insn.addr !16766
  %3 = and i64 %2, 4294967295, !insn.addr !16766
  %4 = inttoptr i64 %3 to i64*, !insn.addr !16767
  %5 = call i64 @wReg32.436(i64 %arg1, i64 260, i64* %4), !insn.addr !16767
  %6 = or i64 %1, zext (i32 ptrtoint (i8** @global_var_11 to i32) to i64), !insn.addr !16768
  %7 = and i64 %6, 4294967295, !insn.addr !16769
  %8 = inttoptr i64 %7 to i64*, !insn.addr !16770
  %9 = call i64 @wReg32.436(i64 %arg1, i64 260, i64* %8), !insn.addr !16770
  %10 = and i64 %6, 4294967279, !insn.addr !16771
  %11 = inttoptr i64 %10 to i64*, !insn.addr !16772
  %12 = call i64 @wReg32.436(i64 %arg1, i64 260, i64* %11), !insn.addr !16772
  %13 = and i64 %6, 2281701359, !insn.addr !16773
  %14 = or i64 %13, 805306368, !insn.addr !16774
  %15 = inttoptr i64 %14 to i64*, !insn.addr !16775
  %16 = call i64 @wReg32.436(i64 %arg1, i64 260, i64* nonnull %15), !insn.addr !16775
  ret i64 %16, !insn.addr !16775
}

define void @wReg32Debug(i64 %pPrivate, i16 %adr, i32 %val32) local_unnamed_addr {
dec_label_pc_283cf:
  %0 = call i8 @__asm_in.625(i8 -1), !insn.addr !16776
  ret void, !insn.addr !16776
}

define i64 @function_283d3(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4, i64 %arg5, i64 %arg6) local_unnamed_addr {
dec_label_pc_283d3:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = call i64 @__decompiler_undefined_function_0()
  %2 = inttoptr i64 %arg3 to i64*, !insn.addr !16777
  %3 = call i64 @wReg32.436(i64 %1, i64 260, i64* %2), !insn.addr !16777
  %4 = and i64 %0, 3758096383, !insn.addr !16778
  %5 = or i64 %4, 536870912, !insn.addr !16778
  %6 = inttoptr i64 %5 to i64*, !insn.addr !16779
  %7 = call i64 @wReg32.436(i64 %1, i64 260, i64* nonnull %6), !insn.addr !16779
  ret i64 %7, !insn.addr !16780
}

define i64 @wReg32Debug.102(i64 %arg1, i64 %arg2, i64 %arg3) local_unnamed_addr {
dec_label_pc_283ff:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = call i64 @mcount(), !insn.addr !16781
  %2 = urem i64 %0, 256, !insn.addr !16782
  %3 = urem i64 %arg2, 65536, !insn.addr !16783
  %4 = inttoptr i64 %arg3 to i64*, !insn.addr !16784
  %5 = call i64 @wReg32.436(i64 %arg1, i64 %3, i64* %4), !insn.addr !16784
  %6 = trunc i64 %arg2 to i16, !insn.addr !16785
  %7 = icmp eq i16 %6, 272, !insn.addr !16785
  %8 = icmp eq i1 %7, false, !insn.addr !16786
  br i1 %8, label %dec_label_pc_28450, label %dec_label_pc_2843a, !insn.addr !16786

dec_label_pc_2843a:                               ; preds = %dec_label_pc_283ff
  %narrow = mul nuw nsw i64 %2, 184
  %9 = trunc i64 %arg3 to i32, !insn.addr !16787
  %10 = inttoptr i64 %narrow to i32*, !insn.addr !16787
  store i32 %9, i32* %10, align 8, !insn.addr !16787
  ret i64 %5, !insn.addr !16788

dec_label_pc_28450:                               ; preds = %dec_label_pc_283ff
  %11 = call i64 @rReg8.103(i64 %arg1, i64 53), !insn.addr !16789
  %12 = trunc i64 %11 to i8
  %13 = add i8 %12, -80, !insn.addr !16790
  %14 = icmp ugt i8 %13, ptrtoint (i8* @global_var_f to i8)
  br i1 %14, label %dec_label_pc_284b9, label %dec_label_pc_28483, !insn.addr !16791

dec_label_pc_28483:                               ; preds = %dec_label_pc_28450
  %15 = trunc i64 %arg3 to i32, !insn.addr !16792
  %16 = icmp eq i32 %15, 6168, !insn.addr !16792
  %17 = icmp eq i1 %16, false, !insn.addr !16793
  %narrow4 = mul nuw nsw i64 %2, 184
  br i1 %17, label %dec_label_pc_2849f, label %dec_label_pc_2848c, !insn.addr !16793

dec_label_pc_2848c:                               ; preds = %dec_label_pc_28483
  %18 = inttoptr i64 %narrow4 to i8*, !insn.addr !16794
  store i8 ptrtoint (i8* @global_var_10 to i8), i8* %18, align 8, !insn.addr !16794
  ret i64 %narrow4, !insn.addr !16795

dec_label_pc_2849f:                               ; preds = %dec_label_pc_28483
  %19 = sub i8 95, %12, !insn.addr !16796
  %20 = inttoptr i64 %narrow4 to i8*, !insn.addr !16796
  store i8 %19, i8* %20, align 8, !insn.addr !16796
  ret i64 %11, !insn.addr !16797

dec_label_pc_284b9:                               ; preds = %dec_label_pc_28450
  ret i64 %11, !insn.addr !16798
}

define void @nm131_software_wake_up_lt(i64 %pPrivate) local_unnamed_addr {
dec_label_pc_284c4:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = inttoptr i64 %0 to i8*, !insn.addr !16799
  store i8 0, i8* %1, align 1, !insn.addr !16799
  ret void, !insn.addr !16800
}

define i64 @nm131_software_wake_up_lt.350(i64 %arg1) local_unnamed_addr {
dec_label_pc_284f4:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = call i64 @mcount(), !insn.addr !16801
  %2 = urem i64 %0, 256, !insn.addr !16802
  %3 = mul nuw nsw i64 %2, 184, !insn.addr !16802
  %4 = or i64 %3, 3, !insn.addr !16803
  %5 = inttoptr i64 %4 to i8*, !insn.addr !16803
  %6 = load i8, i8* %5, align 1, !insn.addr !16803
  %7 = zext i8 %6 to i64, !insn.addr !16803
  %8 = call i64 @wReg8.135(i64 %arg1, i64* null, i64 %7), !insn.addr !16804
  %9 = call i64 @rReg32.101(i64 %arg1, i64 260), !insn.addr !16805
  %10 = or i64 %9, zext (i32 ptrtoint (i32** @global_var_21 to i32) to i64), !insn.addr !16806
  %11 = and i64 %10, 4294967279, !insn.addr !16807
  %12 = inttoptr i64 %11 to i64*, !insn.addr !16808
  %13 = call i64 @wReg32.436(i64 %arg1, i64 260, i64* %12), !insn.addr !16808
  %14 = call i64 @rReg8.103(i64 %arg1, i64 ptrtoint (i8** @global_var_7 to i64)), !insn.addr !16809
  %15 = and i64 %14, 191, !insn.addr !16810
  %16 = or i64 %15, 64, !insn.addr !16811
  %17 = call i64 @wReg8.135(i64 %arg1, i64* bitcast (i8** @global_var_7 to i64*), i64 %16), !insn.addr !16812
  %18 = call i64 @rReg8.103(i64 %arg1, i64 ptrtoint (i8** @global_var_b to i64)), !insn.addr !16813
  %19 = or i64 %18, zext (i8 ptrtoint (i8* @global_var_10 to i8) to i64), !insn.addr !16814
  %20 = urem i64 %19, 256, !insn.addr !16815
  %21 = call i64 @wReg8.135(i64 %arg1, i64* bitcast (i8** @global_var_b to i64*), i64 %20), !insn.addr !16816
  %22 = or i64 %3, 4, !insn.addr !16817
  %23 = inttoptr i64 %22 to i8*, !insn.addr !16817
  %24 = load i8, i8* %23, align 4, !insn.addr !16817
  %25 = zext i8 %24 to i64, !insn.addr !16817
  %26 = call i64 @wReg8.135(i64 %arg1, i64* inttoptr (i64 52 to i64*), i64 %25), !insn.addr !16818
  %27 = or i64 %3, 5, !insn.addr !16819
  %28 = inttoptr i64 %27 to i8*, !insn.addr !16819
  %29 = load i8, i8* %28, align 1, !insn.addr !16819
  %30 = zext i8 %29 to i64, !insn.addr !16819
  %31 = call i64 @wReg8.135(i64 %arg1, i64* inttoptr (i64 53 to i64*), i64 %30), !insn.addr !16820
  %32 = or i64 %3, 6, !insn.addr !16821
  %33 = inttoptr i64 %32 to i8*, !insn.addr !16821
  %34 = load i8, i8* %33, align 2, !insn.addr !16821
  %35 = zext i8 %34 to i64, !insn.addr !16821
  %36 = call i64 @wReg8.135(i64 %arg1, i64* bitcast (i8* @global_var_5 to i64*), i64 %35), !insn.addr !16822
  %37 = load i8, i8* %33, align 2, !insn.addr !16823
  %38 = zext i8 %37 to i64, !insn.addr !16823
  %39 = inttoptr i64 %3 to i8*, !insn.addr !16824
  store i8 %37, i8* %39, align 8, !insn.addr !16824
  ret i64 %38, !insn.addr !16824
}

define void @nm131_software_sleep(i64 %pPrivate) local_unnamed_addr {
dec_label_pc_285d9:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = call i64 @__decompiler_undefined_function_0()
  %2 = call i64 @__decompiler_undefined_function_0()
  %3 = call i64 @__decompiler_undefined_function_0()
  %4 = call i64 @__decompiler_undefined_function_0()
  %5 = add i64 %2, 7, !insn.addr !16825
  %6 = add i64 %5, %3, !insn.addr !16825
  %7 = inttoptr i64 %6 to i8*, !insn.addr !16825
  %8 = load i8, i8* %7, align 1, !insn.addr !16825
  %9 = zext i8 %8 to i64, !insn.addr !16825
  %10 = call i64 @wReg8.135(i64 %4, i64* bitcast (i8* @global_var_a to i64*), i64 %9), !insn.addr !16826
  %11 = mul i64 %0, ptrtoint (i32* @global_var_1 to i64), !insn.addr !16827
  %12 = add i64 %1, ptrtoint (i8* @global_var_8 to i64), !insn.addr !16827
  %13 = add i64 %12, %11, !insn.addr !16827
  %14 = inttoptr i64 %13 to i8*, !insn.addr !16827
  %15 = load i8, i8* %14, align 1, !insn.addr !16827
  %16 = zext i8 %15 to i64, !insn.addr !16827
  %17 = call i64 @wReg8.135(i64 %4, i64* inttoptr (i64 54 to i64*), i64 %16), !insn.addr !16828
  ret void, !insn.addr !16829
}

define i64 @nm131_software_sleep.445(i64 %arg1) local_unnamed_addr {
dec_label_pc_28609:
  %0 = call i64 @mcount(), !insn.addr !16830
  %1 = call i64 @rReg32.101(i64 %arg1, i64 260), !insn.addr !16831
  %2 = and i64 %1, 4294967294, !insn.addr !16832
  %3 = inttoptr i64 %2 to i64*, !insn.addr !16833
  %4 = call i64 @wReg32.436(i64 %arg1, i64 260, i64* %3), !insn.addr !16833
  %5 = call i64 @wReg8.135(i64 %arg1, i64* null, i64 ptrtoint (i16* @global_var_4 to i64)), !insn.addr !16834
  %6 = call i64 @wReg8.135(i64 %arg1, i64* inttoptr (i64 52 to i64*), i64 0), !insn.addr !16835
  %7 = call i64 @wReg8.135(i64 %arg1, i64* inttoptr (i64 53 to i64*), i64 0), !insn.addr !16836
  ret i64 %7, !insn.addr !16837
}

define void @nm131_demod_config(i64 %pPrivate, i64 %tune, i32 %clk_off_f, i32 %tuneMode) local_unnamed_addr {
dec_label_pc_2867b:
  ret void, !insn.addr !16838
}

define i64 @function_28681(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_28681:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = call i64 @__decompiler_undefined_function_0()
  %2 = call i64 @wReg8.135(i64 %1, i64* null, i64 0), !insn.addr !16839
  %3 = or i64 %0, zext (i32 ptrtoint (i32* @global_var_1 to i32) to i64), !insn.addr !16840
  %4 = and i64 %3, 4294967295, !insn.addr !16840
  %5 = inttoptr i64 %4 to i64*, !insn.addr !16841
  %6 = call i64 @wReg32.436(i64 %1, i64 260, i64* %5), !insn.addr !16841
  ret i64 %6, !insn.addr !16842
}

define i64 @nm131_demod_config.138(i64 %arg1, i64 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_286ab:
  %rax.2.reg2mem = alloca i64, !insn.addr !16843
  %r13.0.reg2mem = alloca i64, !insn.addr !16843
  %rdx.7.reg2mem = alloca i64, !insn.addr !16843
  %rax.1.reg2mem = alloca i64, !insn.addr !16843
  %rdx.5.reg2mem = alloca i64, !insn.addr !16843
  %storemerge44.reg2mem = alloca i64, !insn.addr !16843
  %.reg2mem107 = alloca i8, !insn.addr !16843
  %rdx.4.reg2mem = alloca i64, !insn.addr !16843
  %rdx.3.reg2mem = alloca i64, !insn.addr !16843
  %.reg2mem105 = alloca i32, !insn.addr !16843
  %rcx.0.reg2mem = alloca i64, !insn.addr !16843
  %stack_var_-88.1.reg2mem = alloca i32, !insn.addr !16843
  %rdx.1.reg2mem = alloca i64, !insn.addr !16843
  %.reg2mem = alloca i32, !insn.addr !16843
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = call i64 @__decompiler_undefined_function_0()
  %2 = call i64 @__decompiler_undefined_function_0()
  %3 = call i64 @__decompiler_undefined_function_0()
  %4 = call i64 @mcount(), !insn.addr !16844
  %5 = urem i64 %2, 256, !insn.addr !16845
  %6 = add i64 %arg2, ptrtoint ([4 x i8]* @global_var_c to i64), !insn.addr !16846
  %7 = inttoptr i64 %6 to i32*, !insn.addr !16846
  %8 = load i32, i32* %7, align 4, !insn.addr !16846
  %9 = add i64 %arg2, ptrtoint (i8* @global_var_10 to i64), !insn.addr !16847
  %10 = inttoptr i64 %9 to i32*, !insn.addr !16847
  %11 = load i32, i32* %10, align 4, !insn.addr !16847
  %12 = add i64 %arg2, ptrtoint (i16* @global_var_4 to i64), !insn.addr !16848
  %13 = inttoptr i64 %12 to i32*, !insn.addr !16848
  %14 = load i32, i32* %13, align 4, !insn.addr !16848
  %15 = add i64 %arg2, ptrtoint (i8* @global_var_8 to i64), !insn.addr !16849
  %16 = inttoptr i64 %15 to i32*, !insn.addr !16849
  %17 = load i32, i32* %16, align 4, !insn.addr !16849
  %18 = add i64 %arg2, ptrtoint (i32** @global_var_14 to i64), !insn.addr !16850
  %19 = inttoptr i64 %18 to i8*, !insn.addr !16850
  %20 = load i8, i8* %19, align 1, !insn.addr !16850
  %21 = add i64 %arg2, ptrtoint (i32** @global_var_18 to i64), !insn.addr !16851
  %22 = inttoptr i64 %21 to i32*, !insn.addr !16851
  %23 = load i32, i32* %22, align 4, !insn.addr !16851
  %24 = add i64 %arg2, ptrtoint (i32** @global_var_1c to i64), !insn.addr !16852
  %25 = inttoptr i64 %24 to i8*, !insn.addr !16852
  %26 = load i8, i8* %25, align 1, !insn.addr !16852
  %27 = add i64 %arg2, ptrtoint (i32** @global_var_1d to i64), !insn.addr !16853
  %28 = inttoptr i64 %27 to i8*, !insn.addr !16853
  %29 = load i8, i8* %28, align 1, !insn.addr !16853
  %30 = mul nuw nsw i64 %5, 184, !insn.addr !16854
  %31 = inttoptr i64 %30 to i32*, !insn.addr !16855
  %32 = load i32, i32* %31, align 8, !insn.addr !16855
  %33 = and i32 %32, 1048320, !insn.addr !16856
  %34 = icmp eq i32 %33, 78080, !insn.addr !16857
  %35 = icmp eq i1 %34, false, !insn.addr !16858
  store i32 %32, i32* %.reg2mem, !insn.addr !16858
  br i1 %35, label %dec_label_pc_28775, label %dec_label_pc_28721, !insn.addr !16858

dec_label_pc_28721:                               ; preds = %dec_label_pc_286ab
  %36 = icmp eq i32 %32, %11, !insn.addr !16859
  %37 = icmp eq i32 %32, %8, !insn.addr !16860
  %or.cond = icmp eq i1 %36, %37
  br i1 %or.cond, label %dec_label_pc_287e5, label %dec_label_pc_2874b, !insn.addr !16861

dec_label_pc_2874b:                               ; preds = %dec_label_pc_28721
  %38 = icmp eq i32 %8, ptrtoint ([3 x i8]* @global_var_d to i32), !insn.addr !16862
  %39 = icmp ult i32 %11, ptrtoint (i32* @global_var_2 to i32)
  %40 = select i1 %39, i64* inttoptr (i64 93067719 to i64*), i64* inttoptr (i64 764156359 to i64*)
  %41 = select i1 %38, i64* inttoptr (i64 898433023 to i64*), i64* %40, !insn.addr !16863
  %42 = call i64 @wReg32.436(i64 %arg1, i64 448, i64* nonnull %41), !insn.addr !16863
  %.pre = load i32, i32* %31, align 8
  store i32 %.pre, i32* %.reg2mem, !insn.addr !16863
  br label %dec_label_pc_28775, !insn.addr !16863

dec_label_pc_28775:                               ; preds = %dec_label_pc_2874b, %dec_label_pc_286ab
  %.reload = load i32, i32* %.reg2mem, !insn.addr !16864
  %43 = icmp eq i32 %.reload, %8, !insn.addr !16864
  %44 = icmp eq i32 %.reload, %11, !insn.addr !16865
  %or.cond60 = icmp eq i1 %43, %44
  br i1 %or.cond60, label %dec_label_pc_287e5, label %dec_label_pc_2879b, !insn.addr !16866

dec_label_pc_2879b:                               ; preds = %dec_label_pc_28775
  %45 = icmp eq i32 %8, ptrtoint (i8* @global_var_6 to i32), !insn.addr !16867
  %46 = icmp eq i32 %8, ptrtoint (i8* @global_var_8 to i32), !insn.addr !16868
  %or.cond61 = or i1 %45, %46
  %47 = icmp eq i32 %8, ptrtoint ([4 x i8]* @global_var_c to i32), !insn.addr !16869
  %or.cond62 = or i1 %47, %or.cond61
  %48 = icmp eq i32 %8, ptrtoint (i16** @global_var_e to i32), !insn.addr !16870
  %or.cond63 = or i1 %48, %or.cond62
  %49 = icmp eq i32 %8, ptrtoint (i8* @global_var_f to i32), !insn.addr !16871
  %or.cond64 = or i1 %49, %or.cond63
  %or.cond64.not = icmp ne i1 %or.cond64, true
  %50 = icmp eq i32 %8, ptrtoint (i8* @global_var_10 to i32), !insn.addr !16872
  %51 = icmp eq i1 %50, false, !insn.addr !16873
  %or.cond66 = icmp eq i1 %51, %or.cond64.not
  br i1 %or.cond66, label %dec_label_pc_287d3, label %dec_label_pc_287bf, !insn.addr !16874

dec_label_pc_287bf:                               ; preds = %dec_label_pc_2879b
  %52 = call i64 @wReg32.436(i64 %arg1, i64 304, i64* inttoptr (i64 512 to i64*)), !insn.addr !16875
  br label %dec_label_pc_287e5, !insn.addr !16876

dec_label_pc_287d3:                               ; preds = %dec_label_pc_2879b
  %53 = call i64 @wReg32.436(i64 %arg1, i64 304, i64* inttoptr (i64 448 to i64*)), !insn.addr !16877
  br label %dec_label_pc_287e5, !insn.addr !16877

dec_label_pc_287e5:                               ; preds = %dec_label_pc_28775, %dec_label_pc_28721, %dec_label_pc_287d3, %dec_label_pc_287bf
  %54 = add i64 %arg2, 36, !insn.addr !16878
  %55 = inttoptr i64 %54 to i32*, !insn.addr !16878
  %56 = load i32, i32* %55, align 4, !insn.addr !16878
  %57 = icmp eq i32 %56, 0, !insn.addr !16879
  br i1 %57, label %dec_label_pc_287ff, label %dec_label_pc_287ed, !insn.addr !16880

dec_label_pc_287ed:                               ; preds = %dec_label_pc_287e5
  %58 = zext i32 %56 to i64, !insn.addr !16878
  %59 = inttoptr i64 %58 to i64*, !insn.addr !16881
  %60 = call i64 @wReg32.436(i64 %arg1, i64 356, i64* %59), !insn.addr !16881
  br label %dec_label_pc_2888c, !insn.addr !16882

dec_label_pc_287ff:                               ; preds = %dec_label_pc_287e5
  %61 = icmp ugt i32 %11, ptrtoint (i32* @global_var_1 to i32)
  br i1 %61, label %dec_label_pc_28809, label %dec_label_pc_2888c, !insn.addr !16883

dec_label_pc_28809:                               ; preds = %dec_label_pc_287ff
  %62 = load i32, i32* %31, align 8, !insn.addr !16884
  %63 = and i32 %62, 16776960, !insn.addr !16885
  %64 = icmp eq i32 %63, 77824, !insn.addr !16886
  %65 = icmp eq i1 %64, false, !insn.addr !16887
  br i1 %65, label %dec_label_pc_28839, label %dec_label_pc_28825, !insn.addr !16887

dec_label_pc_28825:                               ; preds = %dec_label_pc_28809
  %66 = call i64 @wReg32.436(i64 %arg1, i64 356, i64* inttoptr (i64 768 to i64*)), !insn.addr !16888
  br label %dec_label_pc_2888c, !insn.addr !16889

dec_label_pc_28839:                               ; preds = %dec_label_pc_28809
  %67 = icmp eq i32 %8, ptrtoint (i8* @global_var_6 to i32), !insn.addr !16890
  %68 = icmp eq i32 %8, ptrtoint (i8* @global_var_8 to i32), !insn.addr !16891
  %or.cond67 = or i1 %67, %68
  %69 = icmp eq i32 %8, ptrtoint ([4 x i8]* @global_var_c to i32), !insn.addr !16892
  %or.cond68 = or i1 %69, %or.cond67
  %70 = icmp eq i32 %8, ptrtoint (i16** @global_var_e to i32), !insn.addr !16893
  %or.cond69 = or i1 %70, %or.cond68
  %71 = icmp eq i32 %8, ptrtoint (i8* @global_var_f to i32), !insn.addr !16894
  %or.cond70 = or i1 %71, %or.cond69
  %or.cond70.not = icmp ne i1 %or.cond70, true
  %72 = icmp eq i32 %8, ptrtoint (i8* @global_var_10 to i32), !insn.addr !16895
  %73 = icmp eq i1 %72, false, !insn.addr !16896
  %or.cond72 = icmp eq i1 %73, %or.cond70.not
  br i1 %or.cond72, label %dec_label_pc_2888c, label %dec_label_pc_2885d, !insn.addr !16897

dec_label_pc_2885d:                               ; preds = %dec_label_pc_28839
  %74 = trunc i64 %3 to i32
  %75 = icmp ult i32 %74, 300000000
  br i1 %75, label %dec_label_pc_2887a, label %dec_label_pc_28866, !insn.addr !16898

dec_label_pc_28866:                               ; preds = %dec_label_pc_2885d
  %76 = call i64 @wReg32.436(i64 %arg1, i64 356, i64* inttoptr (i64 1280 to i64*)), !insn.addr !16899
  br label %dec_label_pc_2888c, !insn.addr !16900

dec_label_pc_2887a:                               ; preds = %dec_label_pc_2885d
  %77 = call i64 @wReg32.436(i64 %arg1, i64 356, i64* inttoptr (i64 1536 to i64*)), !insn.addr !16901
  br label %dec_label_pc_2888c, !insn.addr !16901

dec_label_pc_2888c:                               ; preds = %dec_label_pc_28839, %dec_label_pc_287ff, %dec_label_pc_2887a, %dec_label_pc_28866, %dec_label_pc_28825, %dec_label_pc_287ed
  %78 = load i32, i32* %31, align 8, !insn.addr !16902
  %79 = icmp eq i32 %78, %11, !insn.addr !16902
  br i1 %79, label %dec_label_pc_2890e, label %dec_label_pc_2889f, !insn.addr !16903

dec_label_pc_2889f:                               ; preds = %dec_label_pc_2888c
  %80 = call i64 @rReg32.101(i64 %arg1, i64 564), !insn.addr !16904
  %81 = and i64 %80, 4060086271, !insn.addr !16905
  %82 = icmp ugt i32 %11, ptrtoint (i32* @global_var_1 to i32)
  br i1 %82, label %dec_label_pc_288e9, label %dec_label_pc_288ba, !insn.addr !16906

dec_label_pc_288ba:                               ; preds = %dec_label_pc_2889f
  %83 = or i64 %81, 67108864, !insn.addr !16907
  %84 = icmp eq i32 %11, ptrtoint (i32* @global_var_1 to i32), !insn.addr !16908
  %85 = select i1 %84, i64 %83, i64 %81, !insn.addr !16909
  %86 = inttoptr i64 %85 to i64*, !insn.addr !16910
  %87 = call i64 @wReg32.436(i64 %arg1, i64 564, i64* %86), !insn.addr !16910
  %88 = call i64 @wReg32.436(i64 %arg1, i64 ptrtoint (i64* @global_var_20c to i64), i64* inttoptr (i64 256 to i64*)), !insn.addr !16911
  br label %dec_label_pc_2890e, !insn.addr !16912

dec_label_pc_288e9:                               ; preds = %dec_label_pc_2889f
  %89 = or i64 %81, 134217728, !insn.addr !16913
  %90 = inttoptr i64 %89 to i64*, !insn.addr !16914
  %91 = call i64 @wReg32.436(i64 %arg1, i64 564, i64* nonnull %90), !insn.addr !16914
  %92 = call i64 @wReg32.436(i64 %arg1, i64 ptrtoint (i64* @global_var_20c to i64), i64* inttoptr (i64 1024 to i64*)), !insn.addr !16915
  br label %dec_label_pc_2890e, !insn.addr !16915

dec_label_pc_2890e:                               ; preds = %dec_label_pc_288e9, %dec_label_pc_288ba, %dec_label_pc_2888c
  %93 = load i32, i32* %31, align 8, !insn.addr !16916
  %94 = icmp eq i32 %93, %8, !insn.addr !16916
  %95 = icmp eq i32 %93, %11, !insn.addr !16917
  %or.cond104 = icmp eq i1 %94, %95
  br i1 %or.cond104, label %dec_label_pc_28a43, label %dec_label_pc_28938, !insn.addr !16918

dec_label_pc_28938:                               ; preds = %dec_label_pc_2890e
  %96 = call i64 @rReg32.101(i64 %arg1, i64 640), !insn.addr !16919
  %97 = icmp eq i32 %11, 0, !insn.addr !16920
  %98 = icmp eq i1 %97, false, !insn.addr !16921
  br i1 %98, label %dec_label_pc_28979, label %dec_label_pc_2894a, !insn.addr !16921

dec_label_pc_2894a:                               ; preds = %dec_label_pc_28938
  %99 = and i64 %96, 4294967294, !insn.addr !16922
  %100 = inttoptr i64 %99 to i64*, !insn.addr !16923
  %101 = call i64 @wReg32.436(i64 %arg1, i64 640, i64* %100), !insn.addr !16923
  %102 = call i64 @rReg32.101(i64 %arg1, i64 568), !insn.addr !16924
  %103 = and i64 %102, 4294950912, !insn.addr !16925
  %104 = lshr i64 %103, ptrtoint (i8* @global_var_8 to i64), !insn.addr !16926
  %105 = or i64 %104, zext (i8 ptrtoint (i8* @global_var_8 to i8) to i64), !insn.addr !16926
  %106 = urem i64 %105, 256, !insn.addr !16926
  %107 = shl i64 %106, ptrtoint (i8* @global_var_8 to i64), !insn.addr !16926
  %108 = and i64 %102, 4294901760, !insn.addr !16926
  %109 = or i64 %107, %108, !insn.addr !16926
  %110 = inttoptr i64 %109 to i64*, !insn.addr !16927
  %111 = call i64 @wReg32.436(i64 %arg1, i64 568, i64* %110), !insn.addr !16927
  %112 = call i64 @rReg32.101(i64 %arg1, i64 812), !insn.addr !16928
  %113 = and i64 %112, 3221209087, !insn.addr !16929
  %114 = or i64 %113, 1073758208, !insn.addr !16930
  store i64 %114, i64* %rdx.1.reg2mem, !insn.addr !16930
  br label %dec_label_pc_28a36, !insn.addr !16930

dec_label_pc_28979:                               ; preds = %dec_label_pc_28938
  %115 = icmp eq i32 %11, ptrtoint (i32* @global_var_1 to i32), !insn.addr !16931
  %116 = icmp eq i1 %115, false, !insn.addr !16932
  br i1 %116, label %dec_label_pc_28987, label %dec_label_pc_2897f, !insn.addr !16932

dec_label_pc_2897f:                               ; preds = %dec_label_pc_28979
  %117 = or i64 %96, zext (i32 ptrtoint (i32* @global_var_1 to i32) to i64), !insn.addr !16933
  %118 = and i64 %117, 4294967295, !insn.addr !16933
  store i64 %118, i64* %rax.2.reg2mem, !insn.addr !16934
  br label %dec_label_pc_293ec, !insn.addr !16934

dec_label_pc_28987:                               ; preds = %dec_label_pc_28979
  %119 = icmp eq i32 %11, ptrtoint (i16* @global_var_4 to i32), !insn.addr !16935
  %120 = icmp eq i1 %119, false, !insn.addr !16936
  store i64 %96, i64* %rax.2.reg2mem, !insn.addr !16936
  br i1 %120, label %dec_label_pc_293ec, label %dec_label_pc_28991, !insn.addr !16936

dec_label_pc_28991:                               ; preds = %dec_label_pc_28987
  %121 = load i32, i32* %31, align 8, !insn.addr !16937
  %122 = and i32 %121, 1048320, !insn.addr !16938
  %123 = and i64 %96, 4294967294, !insn.addr !16939
  %124 = icmp eq i32 %122, 78080, !insn.addr !16940
  %125 = select i1 %124, i64 %123, i64 %96, !insn.addr !16941
  %126 = and i64 %125, 4294967295, !insn.addr !16942
  %127 = inttoptr i64 %126 to i64*, !insn.addr !16943
  %128 = call i64 @wReg32.436(i64 %arg1, i64 640, i64* %127), !insn.addr !16943
  %129 = call i64 @rReg32.101(i64 %arg1, i64 568), !insn.addr !16944
  %130 = and i64 %129, 4294950912, !insn.addr !16945
  %131 = lshr i64 %130, ptrtoint (i8* @global_var_8 to i64), !insn.addr !16946
  %132 = or i64 %131, zext (i8 ptrtoint (i8* @global_var_8 to i8) to i64), !insn.addr !16946
  %133 = urem i64 %132, 256, !insn.addr !16946
  %134 = shl i64 %133, ptrtoint (i8* @global_var_8 to i64), !insn.addr !16946
  %135 = and i64 %129, 4294901760, !insn.addr !16946
  %136 = or i64 %134, %135, !insn.addr !16946
  %137 = inttoptr i64 %136 to i64*, !insn.addr !16947
  %138 = call i64 @wReg32.436(i64 %arg1, i64 568, i64* %137), !insn.addr !16947
  %139 = call i64 @rReg32.101(i64 %arg1, i64 812), !insn.addr !16948
  %140 = and i64 %139, 3221209087, !insn.addr !16949
  store i64 %140, i64* %rdx.1.reg2mem, !insn.addr !16950
  br label %dec_label_pc_28a36, !insn.addr !16950

dec_label_pc_28a36:                               ; preds = %dec_label_pc_28991, %dec_label_pc_2894a
  %rdx.1.reload = load i64, i64* %rdx.1.reg2mem
  %141 = inttoptr i64 %rdx.1.reload to i64*, !insn.addr !16951
  %142 = call i64 @wReg32.436(i64 %arg1, i64 812, i64* %141), !insn.addr !16951
  br label %dec_label_pc_28a43, !insn.addr !16951

dec_label_pc_28a43:                               ; preds = %dec_label_pc_2890e, %dec_label_pc_28a36
  %143 = icmp eq i8 %20, 0, !insn.addr !16952
  store i32 0, i32* %stack_var_-88.1.reg2mem, !insn.addr !16953
  store i64 0, i64* %rcx.0.reg2mem, !insn.addr !16953
  br i1 %143, label %dec_label_pc_28a83, label %dec_label_pc_28a55, !insn.addr !16953

dec_label_pc_28a55:                               ; preds = %dec_label_pc_28a43
  %144 = icmp eq i32 %8, ptrtoint ([3 x i8]* @global_var_d to i32), !insn.addr !16954
  %145 = icmp ne i32 %8, 0, !insn.addr !16955
  %146 = icmp eq i1 %144, false, !insn.addr !16956
  %or.cond73 = icmp eq i1 %145, %146
  %stack_var_-88.0 = select i1 %or.cond73, i32 121093, i32 112106
  %147 = select i1 %146, i64 4702, i64 1238, !insn.addr !16957
  store i32 %stack_var_-88.0, i32* %stack_var_-88.1.reg2mem, !insn.addr !16957
  store i64 %147, i64* %rcx.0.reg2mem, !insn.addr !16957
  br label %dec_label_pc_28a83, !insn.addr !16957

dec_label_pc_28a83:                               ; preds = %dec_label_pc_28a55, %dec_label_pc_28a43
  %148 = zext i32 %8 to i64, !insn.addr !16846
  %rcx.0.reload = load i64, i64* %rcx.0.reg2mem
  %stack_var_-88.1.reload = load i32, i32* %stack_var_-88.1.reg2mem
  %149 = lshr i32 %arg3, ptrtoint (i32* @global_var_1 to i32), !insn.addr !16958
  %150 = udiv i32 %149, 3375
  %151 = add nuw nsw i32 %150, 16384, !insn.addr !16959
  %152 = mul i64 %148, ptrtoint (i16* @global_var_4 to i64), !insn.addr !16960
  %153 = inttoptr i64 %152 to i32*, !insn.addr !16960
  %154 = load i32, i32* %153, align 4, !insn.addr !16960
  %155 = zext i32 %154 to i64, !insn.addr !16960
  %156 = mul i64 %155, 2, !insn.addr !16961
  %157 = add nuw nsw i64 %156, %rcx.0.reload, !insn.addr !16961
  %.tr = trunc i64 %157 to i32
  %.lhs.trunc = mul i32 %.tr, 16384
  %158 = udiv i32 %.lhs.trunc, %151
  %159 = or i32 %158, 524288
  %160 = zext i32 %159 to i64, !insn.addr !16962
  %161 = inttoptr i64 %160 to i64*, !insn.addr !16963
  %162 = call i64 @wReg32.436(i64 %arg1, i64 560, i64* nonnull %161), !insn.addr !16963
  %163 = icmp eq i32 %arg4, ptrtoint (i32* @global_var_2 to i32), !insn.addr !16964
  %164 = icmp eq i1 %163, false, !insn.addr !16965
  br i1 %164, label %dec_label_pc_28ae9, label %dec_label_pc_28ad5, !insn.addr !16965

dec_label_pc_28ad5:                               ; preds = %dec_label_pc_28a83
  %165 = call i64 @wReg32.436(i64 %arg1, i64 592, i64* bitcast (i32* @global_var_2 to i64*)), !insn.addr !16966
  br label %dec_label_pc_28b2a, !insn.addr !16967

dec_label_pc_28ae9:                               ; preds = %dec_label_pc_28a83
  %166 = icmp eq i8 %29, 0, !insn.addr !16968
  br i1 %166, label %dec_label_pc_28b03, label %dec_label_pc_28aef, !insn.addr !16969

dec_label_pc_28aef:                               ; preds = %dec_label_pc_28ae9
  %167 = call i64 @wReg32.436(i64 %arg1, i64 592, i64* bitcast (i16* @global_var_4 to i64*)), !insn.addr !16970
  br label %dec_label_pc_28b2a, !insn.addr !16971

dec_label_pc_28b03:                               ; preds = %dec_label_pc_28ae9
  %168 = inttoptr i64 %148 to i8*, !insn.addr !16972
  %169 = load i8, i8* %168, align 1, !insn.addr !16972
  %170 = zext i8 %169 to i64, !insn.addr !16972
  %171 = icmp eq i8 %169, 0, !insn.addr !16973
  %172 = icmp eq i1 %171, false, !insn.addr !16974
  %173 = icmp eq i8 %20, ptrtoint (i32* @global_var_1 to i8)
  %174 = select i1 %173, i64 zext (i32 ptrtoint (i32* @global_var_2 to i32) to i64), i64 %170
  %rdx.2 = select i1 %172, i64 %170, i64 %174
  %175 = inttoptr i64 %rdx.2 to i64*, !insn.addr !16975
  %176 = call i64 @wReg32.436(i64 %arg1, i64 592, i64* %175), !insn.addr !16975
  br label %dec_label_pc_28b2a, !insn.addr !16975

dec_label_pc_28b2a:                               ; preds = %dec_label_pc_28b03, %dec_label_pc_28aef, %dec_label_pc_28ad5
  %177 = load i32, i32* %31, align 8, !insn.addr !16976
  %178 = icmp ult i32 %177, 2
  br i1 %178, label %dec_label_pc_28b3d, label %dec_label_pc_28b92, !insn.addr !16977

dec_label_pc_28b3d:                               ; preds = %dec_label_pc_28b2a
  %179 = icmp eq i8 %29, 0, !insn.addr !16978
  br i1 %179, label %dec_label_pc_28b57, label %dec_label_pc_28b43, !insn.addr !16979

dec_label_pc_28b43:                               ; preds = %dec_label_pc_28b3d
  %180 = call i64 @wReg32.436(i64 %arg1, i64 636, i64* inttoptr (i64 2827 to i64*)), !insn.addr !16980
  br label %dec_label_pc_28ba4, !insn.addr !16981

dec_label_pc_28b57:                               ; preds = %dec_label_pc_28b3d
  %181 = inttoptr i64 %30 to i8*, !insn.addr !16982
  %182 = load i8, i8* %181, align 8, !insn.addr !16982
  %183 = icmp eq i8 %182, 16, !insn.addr !16982
  %184 = icmp eq i1 %183, false, !insn.addr !16983
  br i1 %184, label %dec_label_pc_28b7e, label %dec_label_pc_28b6a, !insn.addr !16983

dec_label_pc_28b6a:                               ; preds = %dec_label_pc_28b57
  %185 = call i64 @wReg32.436(i64 %arg1, i64 636, i64* inttoptr (i64 6168 to i64*)), !insn.addr !16984
  br label %dec_label_pc_28ba4, !insn.addr !16985

dec_label_pc_28b7e:                               ; preds = %dec_label_pc_28b57
  %186 = call i64 @wReg32.436(i64 %arg1, i64 636, i64* inttoptr (i64 4112 to i64*)), !insn.addr !16986
  br label %dec_label_pc_28ba4, !insn.addr !16987

dec_label_pc_28b92:                               ; preds = %dec_label_pc_28b2a
  %187 = call i64 @wReg32.436(i64 %arg1, i64 636, i64* inttoptr (i64 4112 to i64*)), !insn.addr !16988
  br label %dec_label_pc_28ba4, !insn.addr !16988

dec_label_pc_28ba4:                               ; preds = %dec_label_pc_28b92, %dec_label_pc_28b7e, %dec_label_pc_28b6a, %dec_label_pc_28b43
  %188 = load i32, i32* %153, align 4, !insn.addr !16989
  %189 = shl i32 %188, ptrtoint (i16** @global_var_e to i32), !insn.addr !16990
  %190 = udiv i32 %189, %151
  %191 = zext i32 %190 to i64, !insn.addr !16991
  %192 = or i64 %191, 3145728, !insn.addr !16992
  %193 = icmp eq i8 %26, 0, !insn.addr !16993
  %194 = icmp eq i1 %193, false, !insn.addr !16994
  %195 = select i1 %194, i64 %192, i64 %191, !insn.addr !16994
  %196 = inttoptr i64 %195 to i64*, !insn.addr !16995
  %197 = call i64 @wReg32.436(i64 %arg1, i64 444, i64* %196), !insn.addr !16995
  %198 = load i32, i32* %31, align 8, !insn.addr !16996
  %199 = icmp eq i32 %198, %8, !insn.addr !16996
  br i1 %199, label %dec_label_pc_28d2f, label %dec_label_pc_28bee, !insn.addr !16997

dec_label_pc_28bee:                               ; preds = %dec_label_pc_28ba4
  %200 = icmp eq i32 %8, ptrtoint ([3 x i8]* @global_var_d to i32), !insn.addr !16998
  %201 = icmp eq i1 %200, false, !insn.addr !16999
  br i1 %201, label %dec_label_pc_28c96, label %dec_label_pc_28bf8, !insn.addr !16999

dec_label_pc_28bf8:                               ; preds = %dec_label_pc_28bee
  %202 = call i64 @wReg32.436(i64 %arg1, i64 456, i64* inttoptr (i64 32768 to i64*)), !insn.addr !17000
  %203 = call i64 @wReg32.436(i64 %arg1, i64 460, i64* inttoptr (i64 32768 to i64*)), !insn.addr !17001
  %204 = call i64 @wReg32.436(i64 %arg1, i64 464, i64* inttoptr (i64 32768 to i64*)), !insn.addr !17002
  %205 = call i64 @wReg32.436(i64 %arg1, i64 272, i64* bitcast (i32* @global_var_2 to i64*)), !insn.addr !17003
  store i32 ptrtoint (i32* @global_var_2 to i32), i32* %31, align 8, !insn.addr !17004
  %206 = zext i64 %rcx.0.reload to i128
  %207 = call i64 @nmi_debug.134(i64 %arg1, i64* bitcast (i8* @global_var_10 to i64*), i64 0, i128 %206, i64 %1, i64 %0), !insn.addr !17005
  %208 = call i64 @wReg32.436(i64 %arg1, i64 620, i64* null), !insn.addr !17006
  %209 = call i64 @wReg32.436(i64 %arg1, i64 624, i64* bitcast (i8* @global_var_5 to i64*)), !insn.addr !17007
  br label %dec_label_pc_28d2f, !insn.addr !17008

dec_label_pc_28c96:                               ; preds = %dec_label_pc_28bee
  %210 = call i64 @wReg32.436(i64 %arg1, i64 456, i64* inttoptr (i64 32889 to i64*)), !insn.addr !17009
  %211 = call i64 @wReg32.436(i64 %arg1, i64 460, i64* inttoptr (i64 32889 to i64*)), !insn.addr !17010
  %212 = call i64 @wReg32.436(i64 %arg1, i64 464, i64* inttoptr (i64 32889 to i64*)), !insn.addr !17011
  %213 = call i64 @wReg32.436(i64 %arg1, i64 272, i64* inttoptr (i64 19538 to i64*)), !insn.addr !17012
  %214 = zext i64 %rcx.0.reload to i128
  %215 = call i64 @nmi_debug.134(i64 %arg1, i64* bitcast (i8* @global_var_10 to i64*), i64 0, i128 %214, i64 %1, i64 %0), !insn.addr !17013
  store i32 19538, i32* %31, align 8, !insn.addr !17014
  %216 = call i64 @wReg32.436(i64 %arg1, i64 620, i64* bitcast (i32* @global_var_2 to i64*)), !insn.addr !17015
  %217 = call i64 @wReg32.436(i64 %arg1, i64 624, i64* bitcast (i8* @global_var_6 to i64*)), !insn.addr !17016
  br label %dec_label_pc_28d2f, !insn.addr !17016

dec_label_pc_28d2f:                               ; preds = %dec_label_pc_28c96, %dec_label_pc_28bf8, %dec_label_pc_28ba4
  %218 = icmp ugt i32 %11, ptrtoint (i32* @global_var_1 to i32)
  br i1 %218, label %dec_label_pc_28dd3, label %dec_label_pc_28d39, !insn.addr !17017

dec_label_pc_28d39:                               ; preds = %dec_label_pc_28d2f
  %219 = load i32, i32* %31, align 8, !insn.addr !17018
  %220 = icmp eq i32 %219, %11, !insn.addr !17018
  br i1 %220, label %dec_label_pc_28d5e, label %dec_label_pc_28d4c, !insn.addr !17019

dec_label_pc_28d4c:                               ; preds = %dec_label_pc_28d39
  %221 = call i64 @wReg32.436(i64 %arg1, i64 ptrtoint (i32* @global_var_21c to i64), i64* inttoptr (i64 805306368 to i64*)), !insn.addr !17020
  br label %dec_label_pc_28d5e, !insn.addr !17020

dec_label_pc_28d5e:                               ; preds = %dec_label_pc_28d4c, %dec_label_pc_28d39
  %222 = load i32, i32* %153, align 4, !insn.addr !17021
  %223 = shl i32 %222, ptrtoint (i8* @global_var_f to i32), !insn.addr !17022
  %224 = call i64 @rReg32.101(i64 %arg1, i64 564), !insn.addr !17023
  %225 = trunc i64 %224 to i32, !insn.addr !17024
  %226 = and i32 %225, -809500672, !insn.addr !17025
  %227 = udiv i32 %arg3, 3375, !insn.addr !17026
  %narrow23 = add nuw nsw i32 %227, 32768
  %228 = udiv i32 %223, %narrow23
  %.masked = and i32 %228, -805306369
  %229 = or i32 %226, %.masked, !insn.addr !17027
  %230 = or i32 %229, 268435456, !insn.addr !17028
  %231 = icmp eq i32 %11, ptrtoint (i32* @global_var_1 to i32), !insn.addr !17029
  %232 = select i1 %231, i32 %230, i32 %229, !insn.addr !17030
  %233 = zext i32 %232 to i64, !insn.addr !17030
  %234 = inttoptr i64 %233 to i64*, !insn.addr !17031
  %235 = call i64 @wReg32.436(i64 %arg1, i64 564, i64* %234), !insn.addr !17031
  br label %dec_label_pc_28f3c, !insn.addr !17032

dec_label_pc_28dd3:                               ; preds = %dec_label_pc_28d2f
  %236 = icmp eq i32 %11, ptrtoint (i32* @global_var_2 to i32), !insn.addr !17033
  %237 = icmp eq i1 %236, false, !insn.addr !17034
  br i1 %237, label %dec_label_pc_28e7f, label %dec_label_pc_28ddd, !insn.addr !17034

dec_label_pc_28ddd:                               ; preds = %dec_label_pc_28dd3
  %238 = load i32, i32* %153, align 4
  %239 = sub i32 0, %238
  %storemerge47.in.p = select i1 %194, i32 %239, i32 %238
  %storemerge47.in = add i32 %storemerge47.in.p, %17
  %storemerge47 = zext i32 %storemerge47.in to i64
  %240 = mul nuw nsw i64 %storemerge47, 274877907, !insn.addr !17035
  %241 = lshr i64 %240, ptrtoint (i32** @global_var_20 to i64), !insn.addr !17035
  %242 = mul i64 %241, 1024
  %243 = lshr i32 %arg3, ptrtoint (i16** @global_var_e to i32), !insn.addr !17036
  %244 = add i32 %243, 6750, !insn.addr !17037
  %245 = trunc i64 %242 to i32
  %.lhs.trunc101 = and i32 %245, -65536
  %246 = udiv i32 %.lhs.trunc101, %244
  %.zext103 = zext i32 %246 to i64
  %247 = call i64 @rReg32.101(i64 %arg1, i64 ptrtoint (i32* @global_var_21c to i64)), !insn.addr !17038
  %248 = and i64 %247, 3347054592, !insn.addr !17039
  %249 = mul i64 %.zext103, 2, !insn.addr !17040
  %.masked46 = and i64 %249, 3351248894
  %250 = or i64 %248, %.masked46, !insn.addr !17041
  %251 = or i64 %250, 134217728, !insn.addr !17042
  %252 = inttoptr i64 %251 to i64*, !insn.addr !17043
  %253 = call i64 @wReg32.436(i64 %arg1, i64 ptrtoint (i32* @global_var_21c to i64), i64* nonnull %252), !insn.addr !17043
  %254 = call i64 @rReg32.101(i64 %arg1, i64 564), !insn.addr !17044
  %255 = and i64 %254, 3485466624, !insn.addr !17045
  %256 = inttoptr i64 %255 to i64*, !insn.addr !17046
  %257 = call i64 @wReg32.436(i64 %arg1, i64 564, i64* %256), !insn.addr !17046
  br label %dec_label_pc_28f3c, !insn.addr !17047

dec_label_pc_28e7f:                               ; preds = %dec_label_pc_28dd3
  %258 = icmp eq i32 %11, ptrtoint (i16* @global_var_4 to i32), !insn.addr !17048
  %259 = icmp eq i1 %258, false, !insn.addr !17049
  br i1 %259, label %dec_label_pc_28f3c, label %dec_label_pc_28e89, !insn.addr !17049

dec_label_pc_28e89:                               ; preds = %dec_label_pc_28e7f
  %260 = zext i32 %17 to i64, !insn.addr !17050
  %261 = mul nuw nsw i64 %260, 274877907, !insn.addr !17050
  %262 = lshr i64 %261, ptrtoint (i32** @global_var_20 to i64), !insn.addr !17050
  %263 = trunc i64 %262 to i32, !insn.addr !17051
  %264 = lshr i32 %arg3, ptrtoint (i8** @global_var_11 to i32), !insn.addr !17052
  %265 = add i32 %264, 843, !insn.addr !17053
  %266 = call i64 @rReg32.101(i64 %arg1, i64 ptrtoint (i32* @global_var_21c to i64)), !insn.addr !17054
  %267 = trunc i64 %266 to i32, !insn.addr !17055
  %268 = and i32 %267, -947912704, !insn.addr !17056
  %sext48 = mul i32 %263, 16777216
  %269 = sdiv i32 %sext48, 16777216, !insn.addr !17057
  %270 = udiv i32 %269, 512, !insn.addr !17058
  %271 = shl i32 %270, ptrtoint (i8** @global_var_11 to i32), !insn.addr !17059
  %272 = udiv i32 %271, %265
  %.masked49 = and i32 %272, -943718401
  %273 = or i32 %.masked49, %268, !insn.addr !17060
  %274 = or i32 %273, 134217728, !insn.addr !17061
  %275 = zext i32 %274 to i64, !insn.addr !17061
  %276 = inttoptr i64 %275 to i64*, !insn.addr !17062
  %277 = call i64 @wReg32.436(i64 %arg1, i64 ptrtoint (i32* @global_var_21c to i64), i64* nonnull %276), !insn.addr !17062
  %278 = select i1 %143, i32 0, i32 %stack_var_-88.1.reload, !insn.addr !17063
  %279 = add i32 %278, %14, !insn.addr !17064
  %280 = zext i32 %279 to i64, !insn.addr !17065
  %281 = mul nuw nsw i64 %280, 274877907, !insn.addr !17065
  %282 = lshr i64 %281, ptrtoint (i32** @global_var_20 to i64), !insn.addr !17065
  %283 = trunc i64 %282 to i32, !insn.addr !17066
  %284 = call i64 @rReg32.101(i64 %arg1, i64 564), !insn.addr !17067
  %285 = trunc i64 %284 to i32, !insn.addr !17068
  %286 = and i32 %285, -809500672, !insn.addr !17069
  %sext50 = mul i32 %283, 16777216
  %287 = sdiv i32 %sext50, 16777216, !insn.addr !17070
  %288 = udiv i32 %287, 512, !insn.addr !17071
  %289 = shl i32 %288, ptrtoint (i8** @global_var_11 to i32), !insn.addr !17072
  %290 = udiv i32 %289, %265
  %.masked51 = and i32 %290, -805306369
  %291 = or i32 %286, %.masked51, !insn.addr !17073
  %292 = zext i32 %291 to i64, !insn.addr !17073
  %293 = inttoptr i64 %292 to i64*, !insn.addr !17074
  %294 = call i64 @wReg32.436(i64 %arg1, i64 564, i64* %293), !insn.addr !17074
  br label %dec_label_pc_28f3c, !insn.addr !17074

dec_label_pc_28f3c:                               ; preds = %dec_label_pc_28e89, %dec_label_pc_28e7f, %dec_label_pc_28ddd, %dec_label_pc_28d5e
  %295 = load i32, i32* %31, align 8, !insn.addr !17075
  %296 = icmp eq i32 %295, %8, !insn.addr !17075
  store i32 %8, i32* %.reg2mem105, !insn.addr !17076
  br i1 %296, label %dec_label_pc_29003, label %dec_label_pc_28f53, !insn.addr !17076

dec_label_pc_28f53:                               ; preds = %dec_label_pc_28f3c
  %297 = icmp ne i32 %8, ptrtoint (i8* @global_var_5 to i32), !insn.addr !17077
  %298 = icmp eq i32 %8, ptrtoint (i8** @global_var_7 to i32), !insn.addr !17078
  %299 = icmp eq i1 %298, false, !insn.addr !17079
  %or.cond75 = icmp eq i1 %297, %299
  %300 = call i64 @rReg32.101(i64 %arg1, i64 300)
  %301 = and i64 %300, 4294938495
  br i1 %or.cond75, label %dec_label_pc_28fa7, label %dec_label_pc_28f5f, !insn.addr !17080

dec_label_pc_28f5f:                               ; preds = %dec_label_pc_28f53
  %302 = inttoptr i64 %301 to i64*, !insn.addr !17081
  %303 = call i64 @wReg32.436(i64 %arg1, i64 300, i64* %302), !insn.addr !17081
  %304 = call i64 @wReg32.436(i64 %arg1, i64 312, i64* inttoptr (i64 23254 to i64*)), !insn.addr !17082
  %305 = call i64 @wReg32.436(i64 %arg1, i64 328, i64* inttoptr (i64 4097 to i64*)), !insn.addr !17083
  br label %dec_label_pc_28ff0, !insn.addr !17084

dec_label_pc_28fa7:                               ; preds = %dec_label_pc_28f53
  %306 = lshr i64 %301, ptrtoint (i8* @global_var_8 to i64), !insn.addr !17085
  %307 = or i64 %306, zext (i8 ptrtoint (i8* @global_var_10 to i8) to i64), !insn.addr !17085
  %308 = urem i64 %307, 256, !insn.addr !17085
  %309 = shl i64 %308, ptrtoint (i8* @global_var_8 to i64), !insn.addr !17085
  %310 = and i64 %300, 4294901887, !insn.addr !17085
  %311 = or i64 %309, %310, !insn.addr !17085
  %312 = inttoptr i64 %311 to i64*, !insn.addr !17086
  %313 = call i64 @wReg32.436(i64 %arg1, i64 300, i64* %312), !insn.addr !17086
  %314 = call i64 @wReg32.436(i64 %arg1, i64 312, i64* inttoptr (i64 23320 to i64*)), !insn.addr !17087
  %315 = call i64 @wReg32.436(i64 %arg1, i64 328, i64* inttoptr (i64 2093186 to i64*)), !insn.addr !17088
  br label %dec_label_pc_28ff0, !insn.addr !17088

dec_label_pc_28ff0:                               ; preds = %dec_label_pc_28fa7, %dec_label_pc_28f5f
  %316 = load i32, i32* %31, align 8, !insn.addr !17089
  %317 = icmp eq i32 %316, %8, !insn.addr !17089
  %318 = icmp eq i1 %317, false, !insn.addr !17090
  store i32 %316, i32* %.reg2mem105, !insn.addr !17090
  br i1 %318, label %dec_label_pc_29020, label %dec_label_pc_29003, !insn.addr !17090

dec_label_pc_29003:                               ; preds = %dec_label_pc_28ff0, %dec_label_pc_28f3c
  %.reload106 = load i32, i32* %.reg2mem105, !insn.addr !17091
  %319 = icmp eq i32 %.reload106, %11, !insn.addr !17091
  %or.cond76 = icmp eq i1 %218, %319
  br i1 %or.cond76, label %dec_label_pc_290b8, label %dec_label_pc_29020, !insn.addr !17092

dec_label_pc_29020:                               ; preds = %dec_label_pc_29003, %dec_label_pc_28ff0
  %320 = call i64 @rReg32.101(i64 %arg1, i64 512), !insn.addr !17093
  %321 = icmp ne i32 %8, ptrtoint (i8* @global_var_5 to i32), !insn.addr !17094
  %322 = icmp eq i32 %8, ptrtoint (i8** @global_var_7 to i32), !insn.addr !17095
  %323 = icmp eq i1 %322, false, !insn.addr !17096
  %or.cond78 = icmp eq i1 %321, %323
  br i1 %or.cond78, label %dec_label_pc_29056, label %dec_label_pc_29039, !insn.addr !17097

dec_label_pc_29039:                               ; preds = %dec_label_pc_29020
  br i1 %218, label %dec_label_pc_29049, label %dec_label_pc_2903f, !insn.addr !17098

dec_label_pc_2903f:                               ; preds = %dec_label_pc_29039
  %324 = and i64 %320, 4294918144, !insn.addr !17099
  store i64 %324, i64* %rdx.4.reg2mem, !insn.addr !17100
  br label %dec_label_pc_2906c, !insn.addr !17100

dec_label_pc_29049:                               ; preds = %dec_label_pc_29039
  %325 = lshr i64 %320, ptrtoint (i8* @global_var_8 to i64), !insn.addr !17101
  %326 = urem i64 %325, 128, !insn.addr !17101
  %327 = or i64 %326, 128, !insn.addr !17101
  %328 = shl i64 %327, ptrtoint (i8* @global_var_8 to i64), !insn.addr !17101
  %329 = and i64 %320, 4294901760, !insn.addr !17101
  %.masked43 = and i64 %328, 4294950912
  %330 = or i64 %.masked43, %329, !insn.addr !17102
  store i64 %330, i64* %rdx.3.reg2mem, !insn.addr !17103
  br label %dec_label_pc_29067, !insn.addr !17103

dec_label_pc_29056:                               ; preds = %dec_label_pc_29020
  %331 = lshr i64 %320, ptrtoint (i8* @global_var_8 to i64), !insn.addr !17104
  %332 = urem i64 %331, 128, !insn.addr !17104
  %333 = or i64 %332, 128, !insn.addr !17104
  %334 = shl i64 %333, ptrtoint (i8* @global_var_8 to i64), !insn.addr !17104
  %335 = and i64 %320, 4294901760, !insn.addr !17104
  %.masked45 = and i64 %334, 4294950912
  %336 = or i64 %.masked45, %335, !insn.addr !17105
  store i64 %336, i64* %rdx.3.reg2mem, !insn.addr !17106
  store i64 %336, i64* %rdx.4.reg2mem, !insn.addr !17106
  br i1 %218, label %dec_label_pc_29067, label %dec_label_pc_2906c, !insn.addr !17106

dec_label_pc_29067:                               ; preds = %dec_label_pc_29056, %dec_label_pc_29049
  %rdx.3.reload = load i64, i64* %rdx.3.reg2mem
  %337 = lshr i64 %rdx.3.reload, ptrtoint (i8* @global_var_8 to i64), !insn.addr !17107
  %338 = or i64 %337, zext (i8 ptrtoint (i8* @global_var_8 to i8) to i64), !insn.addr !17107
  %339 = urem i64 %338, 256, !insn.addr !17107
  %340 = shl i64 %339, ptrtoint (i8* @global_var_8 to i64), !insn.addr !17107
  %341 = and i64 %rdx.3.reload, -65281, !insn.addr !17107
  %342 = or i64 %340, %341, !insn.addr !17107
  store i64 %342, i64* %storemerge44.reg2mem, !insn.addr !17108
  br label %dec_label_pc_290ab, !insn.addr !17108

dec_label_pc_2906c:                               ; preds = %dec_label_pc_29056, %dec_label_pc_2903f
  %rdx.4.reload = load i64, i64* %rdx.4.reg2mem
  %343 = inttoptr i64 %30 to i8*, !insn.addr !17109
  %344 = load i8, i8* %343, align 8, !insn.addr !17109
  %345 = icmp ult i8 %344, 33
  store i8 %344, i8* %.reg2mem107, !insn.addr !17110
  br i1 %345, label %dec_label_pc_29090, label %dec_label_pc_2907f, !insn.addr !17110

dec_label_pc_2907f:                               ; preds = %dec_label_pc_2906c
  store i8 ptrtoint (i32** @global_var_20 to i8), i8* %343, align 8, !insn.addr !17111
  store i8 ptrtoint (i32** @global_var_20 to i8), i8* %.reg2mem107, !insn.addr !17111
  br label %dec_label_pc_29090, !insn.addr !17111

dec_label_pc_29090:                               ; preds = %dec_label_pc_2907f, %dec_label_pc_2906c
  %.reload108 = load i8, i8* %.reg2mem107, !insn.addr !17112
  %346 = zext i8 %.reload108 to i64, !insn.addr !17113
  %347 = mul i64 %346, 64, !insn.addr !17113
  %348 = add nuw nsw i64 %347, 1536, !insn.addr !17114
  %.masked36 = and i64 %rdx.4.reload, 4294967295
  %349 = or i64 %348, %.masked36, !insn.addr !17115
  store i64 %349, i64* %storemerge44.reg2mem, !insn.addr !17115
  br label %dec_label_pc_290ab, !insn.addr !17115

dec_label_pc_290ab:                               ; preds = %dec_label_pc_29090, %dec_label_pc_29067
  %storemerge44.reload = load i64, i64* %storemerge44.reg2mem
  %350 = inttoptr i64 %storemerge44.reload to i64*, !insn.addr !17116
  %351 = call i64 @wReg32.436(i64 %arg1, i64 512, i64* %350), !insn.addr !17116
  br label %dec_label_pc_290b8, !insn.addr !17116

dec_label_pc_290b8:                               ; preds = %dec_label_pc_29003, %dec_label_pc_290ab
  %352 = icmp ne i32 %8, 0, !insn.addr !17117
  %353 = icmp eq i32 %8, ptrtoint ([3 x i8]* @global_var_d to i32), !insn.addr !17118
  %354 = icmp eq i1 %353, false, !insn.addr !17119
  %or.cond80 = icmp eq i1 %352, %354
  %355 = lshr i32 %arg3, ptrtoint (i8* @global_var_5 to i32)
  br i1 %or.cond80, label %dec_label_pc_290ec, label %dec_label_pc_290c3, !insn.addr !17120

dec_label_pc_290c3:                               ; preds = %dec_label_pc_290b8
  %356 = mul i32 %355, 858, !insn.addr !17121
  %357 = add i32 %356, -1329719296, !insn.addr !17122
  %358 = udiv i32 %357, 64, !insn.addr !17123
  %359 = zext i32 %358 to i64, !insn.addr !17124
  %360 = mul nuw nsw i64 %359, 40722653, !insn.addr !17124
  %361 = lshr i64 %360, ptrtoint (i32** @global_var_20 to i64), !insn.addr !17124
  %362 = trunc i64 %361 to i32, !insn.addr !17124
  %363 = lshr i32 %362, ptrtoint (i8* @global_var_5 to i32), !insn.addr !17125
  %364 = and i32 %363, -16, !insn.addr !17126
  %365 = or i32 %364, 3, !insn.addr !17127
  %366 = zext i32 %365 to i64, !insn.addr !17127
  store i64 %366, i64* %rdx.5.reg2mem, !insn.addr !17128
  br label %dec_label_pc_29125, !insn.addr !17128

dec_label_pc_290ec:                               ; preds = %dec_label_pc_290b8
  %367 = mul i32 %355, 864, !insn.addr !17129
  %368 = add i32 %367, -1308983296, !insn.addr !17130
  %369 = udiv i32 %368, 64, !insn.addr !17131
  %370 = zext i32 %369 to i64, !insn.addr !17132
  %371 = mul nuw nsw i64 %370, 40722653, !insn.addr !17132
  %372 = lshr i64 %371, ptrtoint (i32** @global_var_20 to i64), !insn.addr !17132
  %373 = trunc i64 %372 to i32, !insn.addr !17132
  %374 = lshr i32 %373, ptrtoint (i8* @global_var_5 to i32), !insn.addr !17133
  %375 = and i32 %374, -16, !insn.addr !17134
  %376 = or i32 %375, 3, !insn.addr !17135
  %377 = zext i32 %376 to i64, !insn.addr !17135
  %378 = icmp ne i32 %8, ptrtoint (i8* @global_var_5 to i32), !insn.addr !17136
  %379 = icmp eq i32 %8, ptrtoint (i8** @global_var_7 to i32), !insn.addr !17137
  %380 = icmp eq i1 %379, false, !insn.addr !17138
  %or.cond82 = icmp eq i1 %378, %380
  %381 = or i64 %377, 20512768
  %spec.select = select i1 %or.cond82, i64 %377, i64 %381
  store i64 %spec.select, i64* %rdx.5.reg2mem
  br label %dec_label_pc_29125

dec_label_pc_29125:                               ; preds = %dec_label_pc_290ec, %dec_label_pc_290c3
  %rdx.5.reload = load i64, i64* %rdx.5.reg2mem
  %382 = inttoptr i64 %rdx.5.reload to i64*, !insn.addr !17139
  %383 = call i64 @wReg32.436(i64 %arg1, i64 528, i64* %382), !insn.addr !17139
  %384 = call i64 @rReg32.101(i64 %arg1, i64 260), !insn.addr !17140
  %385 = and i64 %384, 2281701312, !insn.addr !17141
  %386 = or i64 %385, 268435473, !insn.addr !17142
  %387 = icmp eq i32 %11, ptrtoint (i32* @global_var_2 to i32), !insn.addr !17143
  %388 = icmp eq i1 %387, false, !insn.addr !17144
  br i1 %388, label %dec_label_pc_2917b, label %dec_label_pc_2914f, !insn.addr !17144

dec_label_pc_2914f:                               ; preds = %dec_label_pc_29125
  %389 = icmp eq i32 %8, ptrtoint (i8* @global_var_6 to i32), !insn.addr !17145
  %390 = icmp eq i32 %8, ptrtoint (i8* @global_var_8 to i32), !insn.addr !17146
  %or.cond83 = or i1 %389, %390
  %391 = icmp eq i32 %8, ptrtoint ([4 x i8]* @global_var_c to i32), !insn.addr !17147
  %or.cond84 = or i1 %391, %or.cond83
  %392 = icmp eq i32 %8, ptrtoint (i16** @global_var_e to i32), !insn.addr !17148
  %or.cond85 = or i1 %392, %or.cond84
  %393 = icmp eq i32 %8, ptrtoint (i8* @global_var_f to i32), !insn.addr !17149
  %or.cond86 = or i1 %393, %or.cond85
  store i64 %386, i64* %rax.1.reg2mem, !insn.addr !17150
  br i1 %or.cond86, label %dec_label_pc_2918a, label %dec_label_pc_2916d, !insn.addr !17150

dec_label_pc_2916d:                               ; preds = %dec_label_pc_2914f
  %394 = or i64 %385, 268435475, !insn.addr !17151
  %395 = icmp eq i32 %8, ptrtoint (i8* @global_var_10 to i32), !insn.addr !17152
  %396 = icmp eq i1 %395, false, !insn.addr !17153
  %397 = select i1 %396, i64 %394, i64 %386, !insn.addr !17153
  store i64 %397, i64* %rax.1.reg2mem, !insn.addr !17154
  br label %dec_label_pc_2918a, !insn.addr !17154

dec_label_pc_2917b:                               ; preds = %dec_label_pc_29125
  %398 = icmp eq i32 %11, ptrtoint (i32* @global_var_1 to i32), !insn.addr !17155
  %.v = select i1 %398, i64 14, i64 6
  %399 = or i64 %386, %.v, !insn.addr !17156
  store i64 %399, i64* %rax.1.reg2mem, !insn.addr !17156
  br label %dec_label_pc_2918a, !insn.addr !17156

dec_label_pc_2918a:                               ; preds = %dec_label_pc_2917b, %dec_label_pc_2916d, %dec_label_pc_2914f
  %rax.1.reload = load i64, i64* %rax.1.reg2mem
  %400 = inttoptr i64 %148 to i8*, !insn.addr !17157
  %401 = load i8, i8* %400, align 1
  %402 = zext i8 %401 to i64, !insn.addr !17157
  %403 = icmp eq i8 %401, 0, !insn.addr !17158
  %404 = icmp ugt i32 %arg3, 2764800
  %narrow = icmp eq i1 %404, %403
  %405 = zext i1 %narrow to i64
  %rdx.6 = add nuw nsw i64 %405, %402
  %406 = add i64 %arg2, 41, !insn.addr !17159
  %407 = inttoptr i64 %406 to i8*, !insn.addr !17159
  %408 = load i8, i8* %407, align 1, !insn.addr !17159
  %409 = icmp eq i8 %408, 0, !insn.addr !17159
  store i64 %rdx.6, i64* %rdx.7.reg2mem, !insn.addr !17160
  br i1 %409, label %dec_label_pc_291b5, label %dec_label_pc_291b0, !insn.addr !17160

dec_label_pc_291b0:                               ; preds = %dec_label_pc_2918a
  %410 = add i64 %arg2, 42, !insn.addr !17161
  %411 = inttoptr i64 %410 to i8*, !insn.addr !17161
  %412 = load i8, i8* %411, align 1, !insn.addr !17161
  %413 = zext i8 %412 to i64, !insn.addr !17161
  store i64 %413, i64* %rdx.7.reg2mem, !insn.addr !17161
  br label %dec_label_pc_291b5, !insn.addr !17161

dec_label_pc_291b5:                               ; preds = %dec_label_pc_291b0, %dec_label_pc_2918a
  %rdx.7.reload = load i64, i64* %rdx.7.reg2mem
  %414 = mul i64 %rdx.7.reload, 2048, !insn.addr !17162
  %415 = and i64 %rax.1.reload, 4294936575, !insn.addr !17163
  %.masked37 = and i64 %414, 4294965248
  %416 = or i64 %.masked37, %415, !insn.addr !17163
  %417 = udiv i64 %416, 256, !insn.addr !17164
  %418 = urem i64 %417, 128, !insn.addr !17164
  %419 = shl i64 %418, ptrtoint (i8* @global_var_8 to i64), !insn.addr !17164
  %420 = and i64 %416, 4294902015, !insn.addr !17164
  %421 = or i64 %419, %420, !insn.addr !17164
  %422 = zext i8 %401 to i32
  %423 = shl i32 %422, ptrtoint (i8* @global_var_f to i32), !insn.addr !17165
  %424 = trunc i64 %421 to i32, !insn.addr !17166
  %425 = or i32 %423, %424, !insn.addr !17166
  br i1 %218, label %dec_label_pc_29204, label %dec_label_pc_291cb, !insn.addr !17167

dec_label_pc_291cb:                               ; preds = %dec_label_pc_291b5
  %426 = zext i1 %404 to i32
  %427 = add nuw nsw i32 %422, %426, !insn.addr !17168
  %428 = and i32 %425, -67043329, !insn.addr !17169
  %429 = shl i32 %427, ptrtoint (i8* @global_var_10 to i32), !insn.addr !17170
  %.masked38 = and i32 %429, -66060289
  %430 = or i32 %.masked38, %428, !insn.addr !17171
  %431 = or i32 %430, 25165824, !insn.addr !17172
  %432 = zext i32 %431 to i64, !insn.addr !17172
  store i64 %432, i64* %r13.0.reg2mem, !insn.addr !17173
  br label %dec_label_pc_29323, !insn.addr !17173

dec_label_pc_29204:                               ; preds = %dec_label_pc_291b5
  %433 = load i32, i32* %153, align 4, !insn.addr !17174
  %434 = icmp ult i32 %arg3, 3686397
  %435 = icmp ugt i32 %arg3, 1843192
  %436 = zext i1 %435 to i32
  %.pn = select i1 %434, i32 %436, i32 ptrtoint (i32* @global_var_2 to i32)
  %storemerge42.in = add i32 %433, %.pn
  %437 = and i32 %425, -67043329, !insn.addr !17175
  %438 = shl i32 %storemerge42.in, ptrtoint (i8* @global_var_10 to i32), !insn.addr !17176
  %.masked39 = and i32 %438, -66060289
  %439 = or i32 %.masked39, %437, !insn.addr !17177
  %440 = zext i32 %439 to i64, !insn.addr !17177
  br i1 %388, label %dec_label_pc_292e9, label %dec_label_pc_293e7, !insn.addr !17178

dec_label_pc_29283:                               ; preds = %dec_label_pc_293e7
  %441 = and i32 %485, 16776960
  %442 = icmp eq i32 %441, 77824, !insn.addr !17179
  %443 = icmp eq i1 %442, false, !insn.addr !17180
  br i1 %443, label %dec_label_pc_2929b, label %dec_label_pc_2928f, !insn.addr !17180

dec_label_pc_2928f:                               ; preds = %dec_label_pc_29283, %dec_label_pc_293e7
  %444 = or i64 %440, 10485760, !insn.addr !17181
  store i64 %444, i64* %r13.0.reg2mem, !insn.addr !17182
  br label %dec_label_pc_29323, !insn.addr !17182

dec_label_pc_2929b:                               ; preds = %dec_label_pc_29283
  %storemerge = or i64 %440, 2097152
  %445 = icmp ne i32 %486, 78080, !insn.addr !17183
  %446 = icmp eq i32 %441, 8466432, !insn.addr !17184
  %447 = icmp eq i1 %446, false, !insn.addr !17185
  %or.cond94 = icmp eq i1 %445, %447
  store i64 %storemerge, i64* %r13.0.reg2mem, !insn.addr !17186
  br i1 %or.cond94, label %dec_label_pc_29323, label %dec_label_pc_292aa, !insn.addr !17186

dec_label_pc_292aa:                               ; preds = %dec_label_pc_2929b
  %448 = icmp eq i32 %23, 0, !insn.addr !17187
  %449 = icmp eq i1 %448, false, !insn.addr !17188
  br i1 %449, label %dec_label_pc_292b9, label %dec_label_pc_292b0, !insn.addr !17188

dec_label_pc_292b0:                               ; preds = %dec_label_pc_292aa
  %450 = or i64 %440, 39845888, !insn.addr !17189
  store i64 %450, i64* %r13.0.reg2mem, !insn.addr !17190
  br label %dec_label_pc_29323, !insn.addr !17190

dec_label_pc_292b9:                               ; preds = %dec_label_pc_292aa
  %451 = icmp eq i32 %23, ptrtoint (i32* @global_var_1 to i32), !insn.addr !17191
  %452 = icmp eq i1 %451, false, !insn.addr !17192
  br i1 %452, label %dec_label_pc_292c8, label %dec_label_pc_292bf, !insn.addr !17192

dec_label_pc_292bf:                               ; preds = %dec_label_pc_292b9
  %453 = or i64 %440, 10485760, !insn.addr !17193
  store i64 %453, i64* %r13.0.reg2mem, !insn.addr !17194
  br label %dec_label_pc_29323, !insn.addr !17194

dec_label_pc_292c8:                               ; preds = %dec_label_pc_292b9
  %454 = icmp eq i32 %23, ptrtoint (i32* @global_var_2 to i32), !insn.addr !17195
  %455 = icmp eq i1 %454, false, !insn.addr !17196
  br i1 %455, label %dec_label_pc_292d7, label %dec_label_pc_292ce, !insn.addr !17196

dec_label_pc_292ce:                               ; preds = %dec_label_pc_292c8
  %456 = or i64 %440, 35651584, !insn.addr !17197
  store i64 %456, i64* %r13.0.reg2mem, !insn.addr !17198
  br label %dec_label_pc_29323, !insn.addr !17198

dec_label_pc_292d7:                               ; preds = %dec_label_pc_292c8
  %457 = or i64 %440, 44040192, !insn.addr !17199
  %458 = icmp eq i32 %23, ptrtoint (i8** @global_var_3 to i32), !insn.addr !17200
  %459 = select i1 %458, i64 %457, i64 %storemerge, !insn.addr !17201
  store i64 %459, i64* %r13.0.reg2mem, !insn.addr !17202
  br label %dec_label_pc_29323, !insn.addr !17202

dec_label_pc_292e9:                               ; preds = %dec_label_pc_29204
  %460 = icmp eq i32 %11, ptrtoint (i16* @global_var_4 to i32), !insn.addr !17203
  %461 = icmp eq i1 %460, false, !insn.addr !17204
  %462 = icmp eq i32 %8, ptrtoint (i8* @global_var_6 to i32), !insn.addr !17205
  %or.cond95 = or i1 %462, %461
  %463 = icmp eq i32 %8, ptrtoint (i8* @global_var_8 to i32), !insn.addr !17206
  %or.cond96 = or i1 %463, %or.cond95
  %464 = icmp eq i32 %8, ptrtoint ([4 x i8]* @global_var_c to i32), !insn.addr !17207
  %or.cond97 = or i1 %464, %or.cond96
  %465 = icmp eq i32 %8, ptrtoint (i16** @global_var_e to i32), !insn.addr !17208
  %or.cond98 = or i1 %465, %or.cond97
  %466 = icmp eq i32 %8, ptrtoint (i8* @global_var_f to i32), !insn.addr !17209
  %or.cond99 = or i1 %466, %or.cond98
  %467 = icmp eq i32 %8, ptrtoint (i8* @global_var_10 to i32), !insn.addr !17210
  %or.cond100 = or i1 %467, %or.cond99
  store i64 %440, i64* %r13.0.reg2mem, !insn.addr !17204
  br i1 %or.cond100, label %dec_label_pc_29323, label %dec_label_pc_29313, !insn.addr !17204

dec_label_pc_29313:                               ; preds = %dec_label_pc_292e9
  %468 = or i64 %440, 26214400, !insn.addr !17211
  %469 = icmp eq i32 %8, -1, !insn.addr !17212
  %470 = icmp eq i1 %469, false, !insn.addr !17213
  %471 = select i1 %470, i64 %468, i64 %440, !insn.addr !17213
  store i64 %471, i64* %r13.0.reg2mem, !insn.addr !17213
  br label %dec_label_pc_29323, !insn.addr !17213

dec_label_pc_29323:                               ; preds = %dec_label_pc_2929b, %dec_label_pc_29313, %dec_label_pc_292e9, %dec_label_pc_292d7, %dec_label_pc_292ce, %dec_label_pc_292bf, %dec_label_pc_292b0, %dec_label_pc_2928f, %dec_label_pc_291cb
  %r13.0.reload = load i64, i64* %r13.0.reg2mem
  %472 = and i64 %r13.0.reload, 4294967295, !insn.addr !17214
  %473 = inttoptr i64 %472 to i64*, !insn.addr !17215
  %474 = call i64 @wReg32.436(i64 %arg1, i64 260, i64* %473), !insn.addr !17215
  %475 = and i64 %r13.0.reload, 3758096335, !insn.addr !17216
  %476 = or i64 %475, 536870944, !insn.addr !17217
  %477 = inttoptr i64 %476 to i64*, !insn.addr !17218
  %478 = call i64 @wReg32.436(i64 %arg1, i64 260, i64* nonnull %477), !insn.addr !17218
  %479 = call i64 @nmi_delay.87(i64 %arg1, i64* bitcast (i32* @global_var_1 to i64*)), !insn.addr !17219
  %480 = call i64 @rReg32.101(i64 %arg1, i64 808), !insn.addr !17220
  %481 = or i64 %475, 536870912, !insn.addr !17221
  %482 = inttoptr i64 %481 to i64*, !insn.addr !17222
  %483 = call i64 @wReg32.436(i64 %arg1, i64 260, i64* nonnull %482), !insn.addr !17222
  %484 = call i64 @wReg32.436(i64 %arg1, i64 260, i64* nonnull %477), !insn.addr !17223
  ret i64 %484, !insn.addr !17224

dec_label_pc_293e7:                               ; preds = %dec_label_pc_29204
  %485 = load i32, i32* %31, align 8, !insn.addr !17225
  %486 = and i32 %485, 1048320, !insn.addr !17226
  %487 = icmp eq i32 %486, 73728, !insn.addr !17227
  br i1 %487, label %dec_label_pc_2928f, label %dec_label_pc_29283, !insn.addr !17228

dec_label_pc_293ec:                               ; preds = %dec_label_pc_28987, %dec_label_pc_2897f
  %rax.2.reload = load i64, i64* %rax.2.reg2mem
  %488 = and i64 %rax.2.reload, 4294967295, !insn.addr !17229
  %489 = inttoptr i64 %488 to i64*, !insn.addr !17230
  %490 = call i64 @wReg32.436(i64 %arg1, i64 640, i64* %489), !insn.addr !17230
  ret i64 %490, !insn.addr !17230
}

define void @nm131_tune_internal(i64 %pPrivate, i64 %tune, i32 %tuneMode) local_unnamed_addr {
dec_label_pc_293fe:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = call i64 @__decompiler_undefined_function_0()
  %2 = trunc i64 %1 to i8
  %3 = mul i8 %2, 2, !insn.addr !17231
  %4 = inttoptr i64 %1 to i8*, !insn.addr !17231
  store i8 %3, i8* %4, align 1, !insn.addr !17231
  %5 = call i64 @rReg32.101(i64 %0, i64 %tune), !insn.addr !17232
  ret void, !insn.addr !17233
}

define i64 @nm131_tune_internal.139(i64 %arg1, i64 %arg2, i64* %arg3) local_unnamed_addr {
dec_label_pc_2942e:
  %storemerge20.reg2mem = alloca i32, !insn.addr !17234
  %rbx.1.reg2mem = alloca i64, !insn.addr !17234
  %r15.1.reg2mem = alloca i64, !insn.addr !17234
  %r15.0.reg2mem = alloca i64, !insn.addr !17234
  %rax.0.reg2mem = alloca i64, !insn.addr !17234
  %rbx.0.reg2mem = alloca i64, !insn.addr !17234
  %stack_var_-104.0.reg2mem = alloca i32, !insn.addr !17234
  %stack_var_-76.0.reg2mem = alloca i32, !insn.addr !17234
  %stack_var_-80.0.in.in.reg2mem = alloca i64, !insn.addr !17234
  %.reg2mem = alloca i32, !insn.addr !17234
  %rdi = alloca i64, align 8
  %0 = call i64 @__decompiler_undefined_function_0()
  %stack_var_-8 = alloca i64, align 8
  %1 = ptrtoint i64* %stack_var_-8 to i64, !insn.addr !17235
  %2 = call i64 @mcount(), !insn.addr !17236
  %3 = call i64 @__readgsqword(i64 40), !insn.addr !17237
  %4 = bitcast i64* %rdi to i8*
  %5 = add i64 %arg2, ptrtoint ([4 x i8]* @global_var_c to i64), !insn.addr !17238
  %6 = inttoptr i64 %5 to i32*, !insn.addr !17238
  %7 = load i32, i32* %6, align 4, !insn.addr !17238
  %8 = add i64 %arg2, ptrtoint (i8* @global_var_10 to i64), !insn.addr !17239
  %9 = inttoptr i64 %8 to i32*, !insn.addr !17239
  %10 = load i32, i32* %9, align 4, !insn.addr !17239
  %11 = add i64 %arg2, ptrtoint (i32** @global_var_18 to i64), !insn.addr !17240
  %12 = inttoptr i64 %11 to i32*, !insn.addr !17240
  %13 = load i32, i32* %12, align 4, !insn.addr !17240
  %14 = add i64 %arg2, ptrtoint (i32** @global_var_1c to i64), !insn.addr !17241
  %15 = inttoptr i64 %14 to i8*, !insn.addr !17241
  %16 = load i8, i8* %15, align 1, !insn.addr !17241
  %17 = urem i64 %0, 256, !insn.addr !17242
  %18 = mul nuw nsw i64 %17, 184, !insn.addr !17242
  %19 = inttoptr i64 %18 to i32*, !insn.addr !17243
  %20 = load i32, i32* %19, align 8, !insn.addr !17243
  %21 = icmp eq i32 %7, ptrtoint ([3 x i8]* @global_var_d to i32)
  %22 = icmp eq i1 %21, false
  %23 = add i64 %arg2, ptrtoint (i32** @global_var_20 to i64)
  %24 = inttoptr i64 %23 to i8*
  %25 = or i64 %18, 1
  %26 = inttoptr i64 %25 to i8*
  %27 = icmp eq i32 %7, ptrtoint (i16* @global_var_4 to i32)
  %28 = icmp eq i1 %27, false
  %29 = icmp eq i32 %7, ptrtoint (i8* @global_var_6 to i32)
  %30 = icmp eq i32 %7, ptrtoint (i8* @global_var_8 to i32)
  %or.cond = or i1 %29, %30
  %31 = icmp eq i32 %7, ptrtoint ([4 x i8]* @global_var_c to i32)
  %or.cond24 = or i1 %31, %or.cond
  %32 = icmp eq i32 %7, ptrtoint (i16** @global_var_e to i32)
  %or.cond26 = or i1 %32, %or.cond24
  %33 = icmp eq i32 %7, ptrtoint (i8* @global_var_f to i32)
  %or.cond28 = or i1 %33, %or.cond26
  %34 = icmp eq i32 %7, ptrtoint (i8* @global_var_10 to i32)
  %or.cond30 = or i1 %34, %or.cond28
  %35 = icmp eq i32 %7, -1
  %or.cond32 = or i1 %35, %or.cond30
  %36 = inttoptr i64 %18 to i8*
  %37 = icmp eq i8 %16, 0
  %38 = icmp eq i1 %37, false
  %39 = zext i32 %7 to i64
  %40 = mul i64 %39, ptrtoint (i16* @global_var_4 to i64)
  %41 = inttoptr i64 %40 to i32*
  %42 = add i64 %1, -64
  %43 = add i64 %arg2, 40
  %44 = inttoptr i64 %43 to i8*
  store i32 %20, i32* %.reg2mem, !insn.addr !17244
  store i32 %20, i32* %stack_var_-76.0.reg2mem, !insn.addr !17244
  store i32 0, i32* %stack_var_-104.0.reg2mem, !insn.addr !17244
  br label %dec_label_pc_294ca, !insn.addr !17244

dec_label_pc_294ca:                               ; preds = %dec_label_pc_2988c, %dec_label_pc_2942e
  %stack_var_-104.0.reload = load i32, i32* %stack_var_-104.0.reg2mem
  %stack_var_-76.0.reload = load i32, i32* %stack_var_-76.0.reg2mem
  %stack_var_-80.0.in.in.reload = load i64, i64* %stack_var_-80.0.in.in.reg2mem
  %.reload = load i32, i32* %.reg2mem, !insn.addr !17245
  %stack_var_-80.0.in = and i64 %stack_var_-80.0.in.in.reload, 4294967295
  %45 = and i32 %.reload, 16776960, !insn.addr !17246
  %46 = icmp eq i32 %45, 77824, !insn.addr !17247
  %47 = icmp eq i1 %46, false, !insn.addr !17248
  br i1 %47, label %dec_label_pc_295e3, label %dec_label_pc_294e8, !insn.addr !17248

dec_label_pc_294e8:                               ; preds = %dec_label_pc_294ca
  %48 = icmp eq i64 %stack_var_-80.0.in, 602000000
  br i1 %48, label %dec_label_pc_29597, label %dec_label_pc_294f5, !insn.addr !17249

dec_label_pc_294f5:                               ; preds = %dec_label_pc_294e8
  %49 = icmp ult i64 %stack_var_-80.0.in, 602000001
  br i1 %49, label %dec_label_pc_294fe, label %dec_label_pc_2953b, !insn.addr !17250

dec_label_pc_294fe:                               ; preds = %dec_label_pc_294f5
  %50 = icmp eq i64 %stack_var_-80.0.in, 171000000
  br i1 %50, label %dec_label_pc_29597, label %dec_label_pc_2950b, !insn.addr !17251

dec_label_pc_2950b:                               ; preds = %dec_label_pc_294fe
  %51 = icmp ult i64 %stack_var_-80.0.in, 171000001
  br i1 %51, label %dec_label_pc_29514, label %dec_label_pc_29523, !insn.addr !17252

dec_label_pc_29514:                               ; preds = %dec_label_pc_2950b
  %52 = icmp eq i64 %stack_var_-80.0.in, 147000000
  %53 = icmp eq i1 %52, false, !insn.addr !17253
  br i1 %53, label %dec_label_pc_295be, label %dec_label_pc_29575, !insn.addr !17253

dec_label_pc_29523:                               ; preds = %dec_label_pc_2950b
  %54 = icmp ne i64 %stack_var_-80.0.in, 506000000
  %55 = icmp eq i64 %stack_var_-80.0.in, 554000000
  %56 = icmp eq i1 %55, false, !insn.addr !17254
  %or.cond103 = icmp eq i1 %54, %56
  br i1 %or.cond103, label %dec_label_pc_295be, label %dec_label_pc_29597, !insn.addr !17255

dec_label_pc_2953b:                               ; preds = %dec_label_pc_294f5
  %57 = icmp eq i64 %stack_var_-80.0.in, 746000000
  br i1 %57, label %dec_label_pc_29597, label %dec_label_pc_29544, !insn.addr !17256

dec_label_pc_29544:                               ; preds = %dec_label_pc_2953b
  %58 = icmp ult i64 %stack_var_-80.0.in, 746000001
  br i1 %58, label %dec_label_pc_2954d, label %dec_label_pc_29561, !insn.addr !17257

dec_label_pc_2954d:                               ; preds = %dec_label_pc_29544
  %59 = icmp ne i64 %stack_var_-80.0.in, 650000000
  %60 = icmp eq i64 %stack_var_-80.0.in, 698000000
  %61 = icmp eq i1 %60, false, !insn.addr !17258
  %or.cond105 = icmp eq i1 %59, %61
  br i1 %or.cond105, label %dec_label_pc_295be, label %dec_label_pc_29597, !insn.addr !17259

dec_label_pc_29561:                               ; preds = %dec_label_pc_29544
  %62 = icmp ne i64 %stack_var_-80.0.in, 794000000
  %63 = icmp eq i64 %stack_var_-80.0.in, 842000000
  %64 = icmp eq i1 %63, false, !insn.addr !17260
  %or.cond107 = icmp eq i1 %62, %64
  br i1 %or.cond107, label %dec_label_pc_295be, label %dec_label_pc_29597, !insn.addr !17261

dec_label_pc_29575:                               ; preds = %dec_label_pc_29514
  %65 = call i64 @rReg8.103(i64 %arg1, i64 ptrtoint (i32** @global_var_21 to i64)), !insn.addr !17262
  %66 = or i64 %65, zext (i8 ptrtoint (i8** @global_var_3 to i8) to i64), !insn.addr !17263
  %67 = urem i64 %66, 256, !insn.addr !17264
  %68 = call i64 @wReg8.135(i64 %arg1, i64* bitcast (i32** @global_var_21 to i64*), i64 %67), !insn.addr !17265
  br label %dec_label_pc_295e3, !insn.addr !17266

dec_label_pc_29597:                               ; preds = %dec_label_pc_29561, %dec_label_pc_2954d, %dec_label_pc_29523, %dec_label_pc_2953b, %dec_label_pc_294fe, %dec_label_pc_294e8
  %69 = call i64 @rReg8.103(i64 %arg1, i64 ptrtoint (i32** @global_var_21 to i64)), !insn.addr !17267
  %70 = and i64 %69, 252, !insn.addr !17268
  %71 = or i64 %70, 2, !insn.addr !17269
  %72 = call i64 @wReg8.135(i64 %arg1, i64* bitcast (i32** @global_var_21 to i64*), i64 %71), !insn.addr !17270
  br label %dec_label_pc_295e3, !insn.addr !17271

dec_label_pc_295be:                               ; preds = %dec_label_pc_29561, %dec_label_pc_2954d, %dec_label_pc_29523, %dec_label_pc_29514
  %73 = call i64 @rReg8.103(i64 %arg1, i64 ptrtoint (i32** @global_var_21 to i64)), !insn.addr !17272
  %74 = and i64 %73, 252, !insn.addr !17273
  %75 = or i64 %74, 1, !insn.addr !17274
  %76 = call i64 @wReg8.135(i64 %arg1, i64* bitcast (i32** @global_var_21 to i64*), i64 %75), !insn.addr !17275
  br label %dec_label_pc_295e3, !insn.addr !17275

dec_label_pc_295e3:                               ; preds = %dec_label_pc_295be, %dec_label_pc_29597, %dec_label_pc_29575, %dec_label_pc_294ca
  %77 = add nuw nsw i64 %stack_var_-80.0.in, 4291467296, !insn.addr !17276
  %78 = select i1 %22, i64 %stack_var_-80.0.in, i64 %77, !insn.addr !17277
  %79 = load i8, i8* %24, align 1, !insn.addr !17278
  %80 = icmp eq i8 %79, 0, !insn.addr !17279
  br i1 %80, label %dec_label_pc_29616, label %dec_label_pc_29601, !insn.addr !17280

dec_label_pc_29601:                               ; preds = %dec_label_pc_295e3
  %81 = zext i8 %79 to i64, !insn.addr !17278
  store i8 ptrtoint (i8* @global_var_f to i8), i8* %26, align 1, !insn.addr !17281
  store i64 %81, i64* %rbx.0.reg2mem, !insn.addr !17282
  br label %dec_label_pc_29740, !insn.addr !17282

dec_label_pc_29616:                               ; preds = %dec_label_pc_295e3
  %82 = load i8, i8* %4, align 8, !insn.addr !17283
  %83 = zext i8 %82 to i64, !insn.addr !17284
  %84 = mul nuw nsw i64 %83, 184, !insn.addr !17284
  %85 = inttoptr i64 %84 to i8*, !insn.addr !17285
  %86 = load i8, i8* %85, align 8, !insn.addr !17285
  %87 = icmp eq i8 %86, 0, !insn.addr !17285
  br i1 %87, label %dec_label_pc_29644, label %dec_label_pc_2962a, !insn.addr !17286

dec_label_pc_2962a:                               ; preds = %dec_label_pc_29616
  store i8 ptrtoint (i8* @global_var_f to i8), i8* %26, align 1, !insn.addr !17287
  store i64 4294967175, i64* %rbx.0.reg2mem, !insn.addr !17288
  br label %dec_label_pc_29740, !insn.addr !17288

dec_label_pc_29644:                               ; preds = %dec_label_pc_29616
  br i1 %22, label %dec_label_pc_29664, label %dec_label_pc_2964a, !insn.addr !17289

dec_label_pc_2964a:                               ; preds = %dec_label_pc_29644
  store i8 ptrtoint (i8* @global_var_f to i8), i8* %26, align 1, !insn.addr !17290
  store i64 4294967175, i64* %rbx.0.reg2mem, !insn.addr !17291
  br label %dec_label_pc_29740, !insn.addr !17291

dec_label_pc_29664:                               ; preds = %dec_label_pc_29644
  %.pre172 = trunc i64 %78 to i32
  br i1 %28, label %dec_label_pc_296ae, label %dec_label_pc_2966a, !insn.addr !17292

dec_label_pc_2966a:                               ; preds = %dec_label_pc_29664
  %88 = add i32 %.pre172, -168100000, !insn.addr !17293
  %89 = icmp ult i32 %88, 300001
  %90 = add i32 %.pre172, -192100000, !insn.addr !17294
  %91 = icmp ult i32 %90, 300001
  %or.cond109 = or i1 %89, %91
  %92 = add i32 %.pre172, -216100000, !insn.addr !17295
  %93 = icmp ult i32 %92, 300001
  %or.cond111 = or i1 %93, %or.cond109
  br i1 %or.cond111, label %dec_label_pc_29694, label %dec_label_pc_296ae, !insn.addr !17296

dec_label_pc_29694:                               ; preds = %dec_label_pc_2966a
  store i8 ptrtoint (i16** @global_var_e to i8), i8* %26, align 1, !insn.addr !17297
  store i64 ptrtoint (i8** @global_var_3 to i64), i64* %rbx.0.reg2mem, !insn.addr !17298
  br label %dec_label_pc_29740, !insn.addr !17298

dec_label_pc_296ae:                               ; preds = %dec_label_pc_29664, %dec_label_pc_2966a
  %94 = add i32 %.pre172, -120100000, !insn.addr !17299
  %95 = icmp ult i32 %94, 300001
  br i1 %95, label %dec_label_pc_296bc, label %dec_label_pc_296d3, !insn.addr !17300

dec_label_pc_296bc:                               ; preds = %dec_label_pc_296ae
  store i8 ptrtoint (i16** @global_var_e to i8), i8* %26, align 1, !insn.addr !17301
  store i64 ptrtoint (i8* @global_var_5 to i64), i64* %rbx.0.reg2mem, !insn.addr !17302
  br label %dec_label_pc_29740, !insn.addr !17302

dec_label_pc_296d3:                               ; preds = %dec_label_pc_296ae
  br i1 %or.cond32, label %dec_label_pc_2972b, label %dec_label_pc_296fd, !insn.addr !17303

dec_label_pc_296fd:                               ; preds = %dec_label_pc_296d3
  %96 = icmp ult i32 %.pre172, 245250001
  %97 = add i32 %.pre172, -567100000, !insn.addr !17304
  %98 = icmp ult i32 %97, 300001
  %or.cond113 = or i1 %96, %98
  br i1 %or.cond113, label %dec_label_pc_29714, label %dec_label_pc_2972b, !insn.addr !17305

dec_label_pc_29714:                               ; preds = %dec_label_pc_296fd
  store i8 ptrtoint (i8* @global_var_f to i8), i8* %26, align 1, !insn.addr !17306
  store i64 4294967175, i64* %rbx.0.reg2mem, !insn.addr !17307
  br label %dec_label_pc_29740, !insn.addr !17307

dec_label_pc_2972b:                               ; preds = %dec_label_pc_296fd, %dec_label_pc_296d3
  store i8 ptrtoint (i8* @global_var_f to i8), i8* %26, align 1, !insn.addr !17308
  store i64 4294967173, i64* %rbx.0.reg2mem, !insn.addr !17309
  br label %dec_label_pc_29740, !insn.addr !17309

dec_label_pc_29740:                               ; preds = %dec_label_pc_2972b, %dec_label_pc_29714, %dec_label_pc_296bc, %dec_label_pc_29694, %dec_label_pc_2964a, %dec_label_pc_2962a, %dec_label_pc_29601
  %rbx.0.reload = load i64, i64* %rbx.0.reg2mem
  %99 = load i8, i8* %36, align 8, !insn.addr !17310
  %100 = trunc i64 %rbx.0.reload to i8, !insn.addr !17310
  %101 = icmp eq i8 %99, %100, !insn.addr !17310
  br i1 %101, label %dec_label_pc_29766, label %dec_label_pc_2974c, !insn.addr !17311

dec_label_pc_2974c:                               ; preds = %dec_label_pc_29740
  %102 = urem i64 %rbx.0.reload, 256, !insn.addr !17312
  %103 = call i64 @wReg8.135(i64 %arg1, i64* bitcast (i8* @global_var_5 to i64*), i64 %102), !insn.addr !17313
  store i8 %100, i8* %36, align 8, !insn.addr !17314
  br label %dec_label_pc_29766, !insn.addr !17314

dec_label_pc_29766:                               ; preds = %dec_label_pc_2974c, %dec_label_pc_29740
  %104 = trunc i64 %78 to i32
  %105 = load i32, i32* %41, align 4
  %106 = sub i32 0, %105
  %storemerge21.in.p = select i1 %38, i32 %106, i32 %105
  %storemerge21.in = add i32 %storemerge21.in.p, %104
  %107 = icmp ult i32 %storemerge21.in, 53000001
  store i64 0, i64* %rax.0.reg2mem, !insn.addr !17315
  store i64 ptrtoint (i8* @global_var_6 to i64), i64* %r15.0.reg2mem, !insn.addr !17315
  store i64 ptrtoint (i8** @global_var_7 to i64), i64* %r15.1.reg2mem, !insn.addr !17315
  br i1 %107, label %dec_label_pc_297b5, label %dec_label_pc_297a2, !insn.addr !17315

dec_label_pc_297a2:                               ; preds = %dec_label_pc_29766, %dec_label_pc_297a7
  %r15.0.reload = load i64, i64* %r15.0.reg2mem
  %rax.0.reload = load i64, i64* %rax.0.reg2mem
  %108 = inttoptr i64 %rax.0.reload to i32*, !insn.addr !17316
  %109 = load i32, i32* %108, align 4, !insn.addr !17316
  %110 = icmp ult i32 %109, %storemerge21.in, !insn.addr !17316
  %111 = icmp eq i1 %110, false, !insn.addr !17317
  store i64 %r15.0.reload, i64* %r15.1.reg2mem, !insn.addr !17317
  br i1 %111, label %dec_label_pc_297b5, label %dec_label_pc_297a7, !insn.addr !17317

dec_label_pc_297a7:                               ; preds = %dec_label_pc_297a2
  %112 = sub i64 %r15.0.reload, zext (i32 ptrtoint (i32* @global_var_1 to i32) to i64), !insn.addr !17318
  %113 = and i64 %112, 4294967295, !insn.addr !17318
  %114 = sub i64 %rax.0.reload, ptrtoint (i16* @global_var_4 to i64), !insn.addr !17319
  %115 = trunc i64 %112 to i8, !insn.addr !17320
  %116 = icmp eq i8 %115, ptrtoint (i32* @global_var_1 to i8), !insn.addr !17320
  %117 = icmp eq i1 %116, false, !insn.addr !17321
  store i64 %114, i64* %rax.0.reg2mem, !insn.addr !17321
  store i64 %113, i64* %r15.0.reg2mem, !insn.addr !17321
  store i64 %113, i64* %r15.1.reg2mem, !insn.addr !17321
  br i1 %117, label %dec_label_pc_297a2, label %dec_label_pc_297b5, !insn.addr !17321

dec_label_pc_297b5:                               ; preds = %dec_label_pc_297a7, %dec_label_pc_297a2, %dec_label_pc_29766
  %storemerge21 = zext i32 %storemerge21.in to i64
  %r15.1.reload = load i64, i64* %r15.1.reg2mem
  store i32 %storemerge21.in, i32* %19, align 8, !insn.addr !17322
  store i64 0, i64* %rbx.1.reg2mem, !insn.addr !17323
  br label %dec_label_pc_297c5, !insn.addr !17323

dec_label_pc_297c5:                               ; preds = %dec_label_pc_297c5, %dec_label_pc_297b5
  %rbx.1.reload = load i64, i64* %rbx.1.reg2mem
  %118 = add i64 %rbx.1.reload, ptrtoint (i32* @global_var_1 to i64), !insn.addr !17324
  %119 = icmp eq i64 %118, ptrtoint (i8* @global_var_8 to i64), !insn.addr !17325
  %120 = icmp eq i1 %119, false, !insn.addr !17326
  store i64 %118, i64* %rbx.1.reg2mem, !insn.addr !17326
  br i1 %120, label %dec_label_pc_297c5, label %dec_label_pc_297e3, !insn.addr !17326

dec_label_pc_297e3:                               ; preds = %dec_label_pc_297c5
  %121 = mul i64 %118, ptrtoint (i8* @global_var_8 to i64), !insn.addr !17327
  %122 = inttoptr i64 %121 to i8*, !insn.addr !17327
  %123 = load i8, i8* %122, align 4, !insn.addr !17327
  %124 = zext i8 %123 to i64, !insn.addr !17327
  %125 = call i64 @wReg8.135(i64 %arg1, i64* bitcast (i8* @global_var_8 to i64*), i64 %124), !insn.addr !17328
  %126 = load i8, i8* %122, align 4, !insn.addr !17329
  %127 = zext i8 %126 to i64, !insn.addr !17329
  %128 = call i64 @wReg8.135(i64 %arg1, i64* bitcast (i8** @global_var_9 to i64*), i64 %127), !insn.addr !17330
  %129 = urem i64 %r15.1.reload, 256, !insn.addr !17331
  %130 = mul i64 %129, ptrtoint (i32* @global_var_1 to i64), !insn.addr !17332
  %131 = add i64 %42, %130, !insn.addr !17332
  %132 = inttoptr i64 %131 to i8*, !insn.addr !17332
  %133 = load i8, i8* %132, align 4, !insn.addr !17332
  %134 = call i64 @rReg8.103(i64 %arg1, i64 ptrtoint (i32** @global_var_21 to i64)), !insn.addr !17333
  %135 = trunc i64 %134 to i32
  %136 = and i32 %135, ptrtoint (i8** @global_var_3 to i32), !insn.addr !17334
  %137 = icmp eq i32 %136, ptrtoint (i32* @global_var_2 to i32), !insn.addr !17334
  br i1 %137, label %dec_label_pc_29851, label %dec_label_pc_29840, !insn.addr !17335

dec_label_pc_29840:                               ; preds = %dec_label_pc_297e3
  %138 = lshr i32 %stack_var_-76.0.reload, ptrtoint (i32* @global_var_1 to i32), !insn.addr !17336
  %139 = icmp eq i32 %136, ptrtoint (i8** @global_var_3 to i32), !insn.addr !17337
  %140 = icmp eq i1 %139, false, !insn.addr !17338
  %141 = select i1 %140, i32 %stack_var_-76.0.reload, i32 %138, !insn.addr !17338
  store i32 %141, i32* %storemerge20.reg2mem, !insn.addr !17339
  br label %dec_label_pc_29854, !insn.addr !17339

dec_label_pc_29851:                               ; preds = %dec_label_pc_297e3
  %142 = shl i32 %stack_var_-76.0.reload, ptrtoint (i32* @global_var_1 to i32), !insn.addr !17340
  store i32 %142, i32* %storemerge20.reg2mem, !insn.addr !17340
  br label %dec_label_pc_29854, !insn.addr !17340

dec_label_pc_29854:                               ; preds = %dec_label_pc_29851, %dec_label_pc_29840
  %143 = zext i8 %133 to i32, !insn.addr !17341
  %144 = shl i32 %143, ptrtoint (i8** @global_var_3 to i32), !insn.addr !17341
  %145 = mul nuw nsw i64 %storemerge21, 274877907, !insn.addr !17342
  %146 = lshr i64 %145, ptrtoint (i32** @global_var_20 to i64), !insn.addr !17342
  %147 = trunc i64 %146 to i32, !insn.addr !17342
  %148 = lshr i32 %147, ptrtoint (i8* @global_var_6 to i32), !insn.addr !17343
  %149 = mul i32 %144, %148, !insn.addr !17344
  %storemerge20.reload = load i32, i32* %storemerge20.reg2mem
  %150 = urem i32 %149, %storemerge20.reload, !insn.addr !17345
  %151 = udiv i32 -2147483648, %storemerge20.reload
  %152 = mul i32 %151, %150, !insn.addr !17346
  %153 = udiv i32 %152, 4096, !insn.addr !17347
  %154 = urem i32 %153, 524288, !insn.addr !17348
  %155 = load i8, i8* %44, align 1, !insn.addr !17349
  %156 = icmp eq i8 %155, 0, !insn.addr !17349
  %157 = icmp eq i32 %154, 0, !insn.addr !17350
  %158 = icmp eq i32 %stack_var_-104.0.reload, 0, !insn.addr !17351
  %159 = icmp eq i1 %158, %156
  %160 = icmp ne i1 %159, true
  %161 = or i1 %160, %157
  br i1 %161, label %dec_label_pc_2989f, label %dec_label_pc_2988c, !insn.addr !17352

dec_label_pc_2988c:                               ; preds = %dec_label_pc_29854
  %162 = add nuw nsw i64 %stack_var_-80.0.in, zext (i32 ptrtoint ([3 x i8]* @global_var_3e8 to i32) to i64), !insn.addr !17353
  %.pre = load i32, i32* %19, align 8
  store i32 %.pre, i32* %.reg2mem, !insn.addr !17354
  store i64 %162, i64* %stack_var_-80.0.in.in.reg2mem, !insn.addr !17354
  store i32 %storemerge20.reload, i32* %stack_var_-76.0.reg2mem, !insn.addr !17354
  store i32 ptrtoint (i32* @global_var_1 to i32), i32* %stack_var_-104.0.reg2mem, !insn.addr !17354
  br label %dec_label_pc_294ca, !insn.addr !17354

dec_label_pc_2989f:                               ; preds = %dec_label_pc_29854
  %163 = udiv i32 %149, %storemerge20.reload
  %164 = zext i32 %163 to i64, !insn.addr !17345
  %sext5 = mul i64 %164, 281474976710656
  %165 = sdiv i64 %sext5, 281474976710656, !insn.addr !17355
  %166 = lshr i32 %149, ptrtoint (i8* @global_var_6 to i32), !insn.addr !17356
  %167 = zext i32 %166 to i64, !insn.addr !17357
  %168 = mul nuw nsw i64 %167, 40722653, !insn.addr !17357
  %169 = lshr i64 %168, ptrtoint (i32** @global_var_20 to i64), !insn.addr !17357
  %170 = trunc i64 %169 to i32, !insn.addr !17357
  %171 = lshr i32 %170, ptrtoint (i8* @global_var_5 to i32), !insn.addr !17358
  %172 = trunc i32 %171 to i8, !insn.addr !17359
  %173 = icmp ult i8 %172, 32
  %174 = icmp ult i8 %172, 16
  %175 = select i1 %174, i32 ptrtoint (i8* @global_var_10 to i32), i32 %171
  %storemerge19 = select i1 %173, i32 %175, i32 ptrtoint (i8** @global_var_1f to i32)
  %176 = trunc i64 %165 to i16, !insn.addr !17360
  %177 = lshr i16 %176, ptrtoint (i32* @global_var_1 to i16), !insn.addr !17360
  %178 = urem i16 %177, 256
  %179 = zext i16 %178 to i64, !insn.addr !17361
  %180 = call i64 @wReg8.135(i64 %arg1, i64* bitcast (i32* @global_var_1 to i64*), i64 %179), !insn.addr !17362
  %181 = trunc i64 %165 to i32, !insn.addr !17363
  %182 = and i32 %181, and (i32 ptrtoint (i32* @global_var_1 to i32), i32 255), !insn.addr !17364
  %183 = mul i32 %153, 2
  %.masked = and i32 %183, 254
  %184 = or i32 %182, %.masked
  %185 = zext i32 %184 to i64, !insn.addr !17365
  %186 = call i64 @wReg8.135(i64 %arg1, i64* bitcast (i32* @global_var_2 to i64*), i64 %185), !insn.addr !17366
  %187 = udiv i32 %152, 524288, !insn.addr !17367
  %188 = urem i32 %187, 256
  %189 = zext i32 %188 to i64, !insn.addr !17368
  %190 = call i64 @wReg8.135(i64 %arg1, i64* bitcast (i8** @global_var_3 to i64*), i64 %189), !insn.addr !17369
  %191 = shl i32 %storemerge19, ptrtoint (i16* @global_var_4 to i32), !insn.addr !17370
  %192 = udiv i32 %154, 32768, !insn.addr !17371
  %.masked101 = urem i32 %191, 256
  %193 = or i32 %192, %.masked101
  %194 = zext i32 %193 to i64, !insn.addr !17372
  %195 = call i64 @wReg8.135(i64 %arg1, i64* bitcast (i16* @global_var_4 to i64*), i64 %194), !insn.addr !17373
  %196 = call i64 @rReg8.103(i64 %arg1, i64 ptrtoint (i32** @global_var_1d to i64)), !insn.addr !17374
  %197 = trunc i64 %196 to i32, !insn.addr !17375
  %198 = and i32 %197, ptrtoint (i8** @global_var_1f to i32), !insn.addr !17376
  %199 = trunc i64 %r15.1.reload to i32, !insn.addr !17377
  %200 = shl i32 %199, ptrtoint (i8* @global_var_5 to i32), !insn.addr !17377
  %201 = or i32 %198, %200, !insn.addr !17378
  %202 = urem i32 %201, 256
  %203 = zext i32 %202 to i64, !insn.addr !17379
  %204 = call i64 @wReg8.135(i64 %arg1, i64* bitcast (i32** @global_var_1d to i64*), i64 %203), !insn.addr !17380
  %205 = load i8, i8* %44, align 1, !insn.addr !17381
  %206 = icmp eq i8 %205, 0, !insn.addr !17381
  br i1 %206, label %dec_label_pc_29997, label %dec_label_pc_29983, !insn.addr !17382

dec_label_pc_29983:                               ; preds = %dec_label_pc_2989f
  %207 = call i64 @wReg8.135(i64 %arg1, i64* bitcast (i8** @global_var_1b to i64*), i64 ptrtoint (i16** @global_var_e to i64)), !insn.addr !17383
  br label %dec_label_pc_299e0, !insn.addr !17384

dec_label_pc_29997:                               ; preds = %dec_label_pc_2989f
  %208 = load i32, i32* %19, align 8, !insn.addr !17385
  %209 = and i32 %208, 1048320, !insn.addr !17386
  %210 = icmp eq i32 %209, 73728, !insn.addr !17387
  br i1 %210, label %dec_label_pc_29a05, label %dec_label_pc_299b4, !insn.addr !17388

dec_label_pc_299b4:                               ; preds = %dec_label_pc_29997
  %211 = icmp eq i1 %157, false, !insn.addr !17389
  br i1 %211, label %dec_label_pc_299ce, label %dec_label_pc_299ba, !insn.addr !17389

dec_label_pc_299ba:                               ; preds = %dec_label_pc_299b4
  %212 = call i64 @wReg8.135(i64 %arg1, i64* bitcast (i8** @global_var_1b to i64*), i64 ptrtoint (i8* @global_var_8 to i64)), !insn.addr !17390
  br label %dec_label_pc_299e0, !insn.addr !17391

dec_label_pc_299ce:                               ; preds = %dec_label_pc_299b4
  %213 = call i64 @wReg8.135(i64 %arg1, i64* bitcast (i8** @global_var_1b to i64*), i64 ptrtoint (i16** @global_var_e to i64)), !insn.addr !17392
  br label %dec_label_pc_299e0, !insn.addr !17392

dec_label_pc_299e0:                               ; preds = %dec_label_pc_299ce, %dec_label_pc_299ba, %dec_label_pc_29983
  %214 = load i32, i32* %19, align 8, !insn.addr !17393
  %215 = and i32 %214, 1048320, !insn.addr !17394
  %216 = icmp eq i32 %215, 73728, !insn.addr !17395
  %217 = icmp eq i1 %216, false, !insn.addr !17396
  br i1 %217, label %dec_label_pc_29b4f, label %dec_label_pc_29a05, !insn.addr !17396

dec_label_pc_29a05:                               ; preds = %dec_label_pc_299e0, %dec_label_pc_29997
  %218 = icmp ult i32 %storemerge21.in, 300000000
  br i1 %218, label %dec_label_pc_29b18, label %dec_label_pc_29a12, !insn.addr !17397

dec_label_pc_29a12:                               ; preds = %dec_label_pc_29a05
  %219 = load i8, i8* %36, align 8, !insn.addr !17398
  %220 = icmp eq i8 %219, 0, !insn.addr !17398
  br i1 %220, label %dec_label_pc_29a4c, label %dec_label_pc_29a26, !insn.addr !17399

dec_label_pc_29a26:                               ; preds = %dec_label_pc_29a12
  store i8 -12, i8* %36, align 8, !insn.addr !17400
  %221 = call i64 @wReg8.135(i64 %arg1, i64* inttoptr (i64 37 to i64*), i64 250), !insn.addr !17401
  br label %dec_label_pc_29a5e, !insn.addr !17402

dec_label_pc_29a4c:                               ; preds = %dec_label_pc_29a12
  %222 = call i64 @wReg8.135(i64 %arg1, i64* inttoptr (i64 37 to i64*), i64 244), !insn.addr !17403
  br label %dec_label_pc_29a5e, !insn.addr !17403

dec_label_pc_29a5e:                               ; preds = %dec_label_pc_29a4c, %dec_label_pc_29a26
  %223 = call i64 @wReg8.135(i64 %arg1, i64* inttoptr (i64 39 to i64*), i64 239), !insn.addr !17404
  %224 = load i8, i8* %36, align 8, !insn.addr !17405
  %225 = icmp eq i8 %224, 0, !insn.addr !17405
  br i1 %225, label %dec_label_pc_29aaa, label %dec_label_pc_29a84, !insn.addr !17406

dec_label_pc_29a84:                               ; preds = %dec_label_pc_29a5e
  store i8 79, i8* %36, align 8, !insn.addr !17407
  %226 = call i64 @wReg8.135(i64 %arg1, i64* inttoptr (i64 41 to i64*), i64 239), !insn.addr !17408
  br label %dec_label_pc_29b18.thread, !insn.addr !17409

dec_label_pc_29aaa:                               ; preds = %dec_label_pc_29a5e
  %227 = call i64 @wReg8.135(i64 %arg1, i64* inttoptr (i64 41 to i64*), i64 79), !insn.addr !17410
  br label %dec_label_pc_29b18.thread, !insn.addr !17410

dec_label_pc_29b18.thread:                        ; preds = %dec_label_pc_29a84, %dec_label_pc_29aaa
  %228 = call i64 @wReg8.135(i64 %arg1, i64* inttoptr (i64 46 to i64*), i64 52), !insn.addr !17411
  br label %dec_label_pc_29b21

dec_label_pc_29b18:                               ; preds = %dec_label_pc_29a05
  %229 = call i64 @wReg8.135(i64 %arg1, i64* inttoptr (i64 37 to i64*), i64 120), !insn.addr !17412
  %230 = call i64 @wReg8.135(i64 %arg1, i64* inttoptr (i64 39 to i64*), i64 127), !insn.addr !17413
  %231 = call i64 @wReg8.135(i64 %arg1, i64* inttoptr (i64 41 to i64*), i64 127), !insn.addr !17414
  %232 = call i64 @wReg8.135(i64 %arg1, i64* inttoptr (i64 46 to i64*), i64 ptrtoint (i32** @global_var_12 to i64)), !insn.addr !17415
  %233 = icmp ult i32 %storemerge21.in, 155000000
  br i1 %233, label %dec_label_pc_29b38, label %dec_label_pc_29b21, !insn.addr !17416

dec_label_pc_29b21:                               ; preds = %dec_label_pc_29b18.thread, %dec_label_pc_29b18
  %234 = call i64 @wReg8.135(i64 %arg1, i64* inttoptr (i64 54 to i64*), i64 124), !insn.addr !17417
  br label %dec_label_pc_2a47a, !insn.addr !17418

dec_label_pc_29b38:                               ; preds = %dec_label_pc_29b18
  %235 = call i64 @wReg8.135(i64 %arg1, i64* inttoptr (i64 54 to i64*), i64 84), !insn.addr !17419
  br label %dec_label_pc_2a47a, !insn.addr !17420

dec_label_pc_29b4f:                               ; preds = %dec_label_pc_299e0
  %236 = and i32 %214, 16776960
  %237 = icmp eq i32 %236, 77824, !insn.addr !17421
  %238 = icmp eq i1 %237, false, !insn.addr !17422
  br i1 %238, label %dec_label_pc_29da4, label %dec_label_pc_29b5f, !insn.addr !17422

dec_label_pc_29b5f:                               ; preds = %dec_label_pc_29b4f
  %239 = icmp eq i32 %storemerge21.in, 195000000, !insn.addr !17423
  br i1 %239, label %dec_label_pc_29b97, label %dec_label_pc_29b68, !insn.addr !17424

dec_label_pc_29b68:                               ; preds = %dec_label_pc_29b5f
  %240 = icmp ult i32 %storemerge21.in, 195000001
  br i1 %240, label %dec_label_pc_29b71, label %dec_label_pc_29b85, !insn.addr !17425

dec_label_pc_29b71:                               ; preds = %dec_label_pc_29b68
  %241 = icmp ne i32 %storemerge21.in, 147000000, !insn.addr !17426
  %242 = icmp eq i32 %storemerge21.in, 171000000, !insn.addr !17427
  %243 = icmp eq i1 %242, false, !insn.addr !17428
  %or.cond118 = icmp eq i1 %241, %243
  br i1 %or.cond118, label %dec_label_pc_29bab, label %dec_label_pc_29b97, !insn.addr !17429

dec_label_pc_29b85:                               ; preds = %dec_label_pc_29b68
  %244 = icmp ne i32 %storemerge21.in, 219000000, !insn.addr !17430
  %245 = icmp eq i32 %storemerge21.in, 243000000, !insn.addr !17431
  %246 = icmp eq i1 %245, false, !insn.addr !17432
  %or.cond120 = icmp eq i1 %244, %246
  br i1 %or.cond120, label %dec_label_pc_29bab, label %dec_label_pc_29b97, !insn.addr !17433

dec_label_pc_29b97:                               ; preds = %dec_label_pc_29b85, %dec_label_pc_29b71, %dec_label_pc_29b5f
  %247 = call i64 @wReg8.135(i64 %arg1, i64* bitcast (i16** @global_var_e to i64*), i64 69), !insn.addr !17434
  br label %dec_label_pc_29bbd, !insn.addr !17435

dec_label_pc_29bab:                               ; preds = %dec_label_pc_29b85, %dec_label_pc_29b71
  %248 = call i64 @wReg8.135(i64 %arg1, i64* bitcast (i16** @global_var_e to i64*), i64 37), !insn.addr !17436
  br label %dec_label_pc_29bbd, !insn.addr !17436

dec_label_pc_29bbd:                               ; preds = %dec_label_pc_29bab, %dec_label_pc_29b97
  %or.cond40.not = icmp ne i1 %or.cond28, true
  %249 = icmp eq i1 %34, false, !insn.addr !17437
  %or.cond122 = icmp eq i1 %249, %or.cond40.not
  br i1 %or.cond122, label %dec_label_pc_29c3f, label %dec_label_pc_29be1, !insn.addr !17438

dec_label_pc_29be1:                               ; preds = %dec_label_pc_29bbd
  %250 = icmp ne i32 %storemerge21.in, 115000000, !insn.addr !17439
  %251 = icmp eq i32 %storemerge21.in, 123000000, !insn.addr !17440
  %252 = icmp eq i1 %251, false, !insn.addr !17441
  %or.cond124 = icmp eq i1 %250, %252
  br i1 %or.cond124, label %dec_label_pc_29c19, label %dec_label_pc_29bf3, !insn.addr !17442

dec_label_pc_29bf3:                               ; preds = %dec_label_pc_29be1
  %253 = call i64 @wReg8.135(i64 %arg1, i64* inttoptr (i64 37 to i64*), i64 67), !insn.addr !17443
  %254 = call i64 @wReg8.135(i64 %arg1, i64* inttoptr (i64 46 to i64*), i64 120), !insn.addr !17444
  br label %dec_label_pc_29c63, !insn.addr !17445

dec_label_pc_29c19:                               ; preds = %dec_label_pc_29be1
  %255 = call i64 @wReg8.135(i64 %arg1, i64* inttoptr (i64 37 to i64*), i64 86), !insn.addr !17446
  %256 = call i64 @wReg8.135(i64 %arg1, i64* inttoptr (i64 46 to i64*), i64 86), !insn.addr !17447
  br label %dec_label_pc_29c63, !insn.addr !17448

dec_label_pc_29c3f:                               ; preds = %dec_label_pc_29bbd
  %257 = call i64 @wReg8.135(i64 %arg1, i64* inttoptr (i64 37 to i64*), i64 233), !insn.addr !17449
  %258 = call i64 @wReg8.135(i64 %arg1, i64* inttoptr (i64 46 to i64*), i64 86), !insn.addr !17450
  br label %dec_label_pc_29c63, !insn.addr !17450

dec_label_pc_29c63:                               ; preds = %dec_label_pc_29c3f, %dec_label_pc_29c19, %dec_label_pc_29bf3
  %259 = icmp ult i32 %storemerge21.in, 139000000
  br i1 %259, label %dec_label_pc_29c92, label %dec_label_pc_29c6c, !insn.addr !17451

dec_label_pc_29c6c:                               ; preds = %dec_label_pc_29c63
  %260 = call i64 @wReg8.135(i64 %arg1, i64* inttoptr (i64 48 to i64*), i64 ptrtoint (i32* @global_var_1 to i64)), !insn.addr !17452
  %261 = call i64 @wReg8.135(i64 %arg1, i64* inttoptr (i64 50 to i64*), i64 ptrtoint (i32* @global_var_1 to i64)), !insn.addr !17453
  br label %dec_label_pc_29cb6, !insn.addr !17454

dec_label_pc_29c92:                               ; preds = %dec_label_pc_29c63
  %262 = call i64 @wReg8.135(i64 %arg1, i64* inttoptr (i64 48 to i64*), i64 223), !insn.addr !17455
  %263 = call i64 @wReg8.135(i64 %arg1, i64* inttoptr (i64 50 to i64*), i64 223), !insn.addr !17456
  br label %dec_label_pc_29cb6, !insn.addr !17456

dec_label_pc_29cb6:                               ; preds = %dec_label_pc_29c92, %dec_label_pc_29c6c
  %264 = load i8, i8* %44, align 1, !insn.addr !17457
  %265 = icmp eq i8 %264, 0, !insn.addr !17457
  br i1 %265, label %dec_label_pc_2a47a, label %dec_label_pc_29cc2, !insn.addr !17458

dec_label_pc_29cc2:                               ; preds = %dec_label_pc_29cb6
  %266 = icmp eq i32 %storemerge21.in, 291000000, !insn.addr !17459
  br i1 %266, label %dec_label_pc_29d76, label %dec_label_pc_29ccf, !insn.addr !17460

dec_label_pc_29ccf:                               ; preds = %dec_label_pc_29cc2
  %267 = icmp ult i32 %storemerge21.in, 291000001
  br i1 %267, label %dec_label_pc_29cd8, label %dec_label_pc_29d2c, !insn.addr !17461

dec_label_pc_29cd8:                               ; preds = %dec_label_pc_29ccf
  br i1 %239, label %dec_label_pc_29d76, label %dec_label_pc_29ce5, !insn.addr !17462

dec_label_pc_29ce5:                               ; preds = %dec_label_pc_29cd8
  %268 = icmp ult i32 %storemerge21.in, 195000001
  br i1 %268, label %dec_label_pc_29cee, label %dec_label_pc_29d0f, !insn.addr !17463

dec_label_pc_29cee:                               ; preds = %dec_label_pc_29ce5
  switch i32 %storemerge21.in, label %dec_label_pc_29d00 [
    i32 147000000, label %dec_label_pc_29d76
    i32 171000000, label %dec_label_pc_29d76
  ]

dec_label_pc_29d00:                               ; preds = %dec_label_pc_29cee
  %269 = icmp eq i32 %storemerge21.in, 123000000, !insn.addr !17464
  %270 = icmp eq i1 %269, false, !insn.addr !17465
  br i1 %270, label %dec_label_pc_29d8d, label %dec_label_pc_29d76, !insn.addr !17465

dec_label_pc_29d0f:                               ; preds = %dec_label_pc_29ce5
  switch i32 %storemerge21.in, label %dec_label_pc_29d21 [
    i32 243000000, label %dec_label_pc_29d76
    i32 267000000, label %dec_label_pc_29d76
  ]

dec_label_pc_29d21:                               ; preds = %dec_label_pc_29d0f
  %271 = icmp eq i32 %storemerge21.in, 219000000, !insn.addr !17466
  %272 = icmp eq i1 %271, false, !insn.addr !17467
  br i1 %272, label %dec_label_pc_29d8d, label %dec_label_pc_29d76, !insn.addr !17467

dec_label_pc_29d2c:                               ; preds = %dec_label_pc_29ccf
  %273 = icmp eq i32 %storemerge21.in, 387000000, !insn.addr !17468
  br i1 %273, label %dec_label_pc_29d76, label %dec_label_pc_29d35, !insn.addr !17469

dec_label_pc_29d35:                               ; preds = %dec_label_pc_29d2c
  %274 = icmp ult i32 %storemerge21.in, 387000001
  br i1 %274, label %dec_label_pc_29d3e, label %dec_label_pc_29d5b, !insn.addr !17470

dec_label_pc_29d3e:                               ; preds = %dec_label_pc_29d35
  switch i32 %storemerge21.in, label %dec_label_pc_29d50 [
    i32 339000000, label %dec_label_pc_29d76
    i32 363000000, label %dec_label_pc_29d76
  ]

dec_label_pc_29d50:                               ; preds = %dec_label_pc_29d3e
  %275 = icmp eq i32 %storemerge21.in, 315000000, !insn.addr !17471
  %276 = icmp eq i1 %275, false, !insn.addr !17472
  br i1 %276, label %dec_label_pc_29d8d, label %dec_label_pc_29d76, !insn.addr !17472

dec_label_pc_29d5b:                               ; preds = %dec_label_pc_29d35
  switch i32 %storemerge21.in, label %dec_label_pc_29d6d [
    i32 435000000, label %dec_label_pc_29d76
    i32 459000000, label %dec_label_pc_29d76
  ]

dec_label_pc_29d6d:                               ; preds = %dec_label_pc_29d5b
  %277 = icmp eq i32 %storemerge21.in, 411000000, !insn.addr !17473
  %278 = icmp eq i1 %277, false, !insn.addr !17474
  br i1 %278, label %dec_label_pc_29d8d, label %dec_label_pc_29d76, !insn.addr !17474

dec_label_pc_29d76:                               ; preds = %dec_label_pc_29d5b, %dec_label_pc_29d5b, %dec_label_pc_29d3e, %dec_label_pc_29d3e, %dec_label_pc_29d0f, %dec_label_pc_29d0f, %dec_label_pc_29cee, %dec_label_pc_29cee, %dec_label_pc_29d50, %dec_label_pc_29d21, %dec_label_pc_29d00, %dec_label_pc_29d6d, %dec_label_pc_29d2c, %dec_label_pc_29cd8, %dec_label_pc_29cc2
  %279 = call i64 @wReg8.135(i64 %arg1, i64* bitcast (i8** @global_var_1b to i64*), i64 ptrtoint (i8* @global_var_8 to i64)), !insn.addr !17475
  br label %dec_label_pc_2a47a, !insn.addr !17476

dec_label_pc_29d8d:                               ; preds = %dec_label_pc_29d6d, %dec_label_pc_29d50, %dec_label_pc_29d21, %dec_label_pc_29d00
  %280 = call i64 @wReg8.135(i64 %arg1, i64* bitcast (i8** @global_var_1b to i64*), i64 ptrtoint (i16** @global_var_e to i64)), !insn.addr !17477
  br label %dec_label_pc_2a47a, !insn.addr !17478

dec_label_pc_29da4:                               ; preds = %dec_label_pc_29b4f
  %281 = icmp eq i32 %236, 8466432, !insn.addr !17479
  %282 = icmp eq i1 %281, false, !insn.addr !17480
  br i1 %282, label %dec_label_pc_2a020, label %dec_label_pc_29daf, !insn.addr !17480

dec_label_pc_29daf:                               ; preds = %dec_label_pc_29da4
  %or.cond48.not = icmp ne i1 %or.cond28, true
  %283 = icmp eq i1 %34, false, !insn.addr !17481
  %or.cond126 = icmp eq i1 %283, %or.cond48.not
  br i1 %or.cond126, label %dec_label_pc_29f8b, label %dec_label_pc_29dd7, !insn.addr !17482

dec_label_pc_29dd7:                               ; preds = %dec_label_pc_29daf
  %284 = call i64 @wReg8.135(i64 %arg1, i64* bitcast (i16** @global_var_e to i64*), i64 69), !insn.addr !17483
  %285 = call i64 @wReg8.135(i64 %arg1, i64* inttoptr (i64 37 to i64*), i64 250), !insn.addr !17484
  %286 = call i64 @wReg8.135(i64 %arg1, i64* inttoptr (i64 38 to i64*), i64 130), !insn.addr !17485
  %287 = icmp ult i32 %storemerge21.in, 818000000
  br i1 %287, label %dec_label_pc_29e63, label %dec_label_pc_29e16, !insn.addr !17486

dec_label_pc_29e16:                               ; preds = %dec_label_pc_29dd7
  %288 = call i64 @wReg8.135(i64 %arg1, i64* inttoptr (i64 39 to i64*), i64 63), !insn.addr !17487
  %289 = call i64 @wReg8.135(i64 %arg1, i64* inttoptr (i64 41 to i64*), i64 63), !insn.addr !17488
  %290 = call i64 @wReg8.135(i64 %arg1, i64* inttoptr (i64 48 to i64*), i64 175), !insn.addr !17489
  %291 = call i64 @wReg8.135(i64 %arg1, i64* inttoptr (i64 50 to i64*), i64 175), !insn.addr !17490
  br label %dec_label_pc_29f5d, !insn.addr !17491

dec_label_pc_29e63:                               ; preds = %dec_label_pc_29dd7
  %292 = icmp ult i32 %storemerge21.in, 786000000
  br i1 %292, label %dec_label_pc_29eb9, label %dec_label_pc_29e6c, !insn.addr !17492

dec_label_pc_29e6c:                               ; preds = %dec_label_pc_29e63
  %293 = call i64 @wReg8.135(i64 %arg1, i64* inttoptr (i64 39 to i64*), i64 63), !insn.addr !17493
  %294 = call i64 @wReg8.135(i64 %arg1, i64* inttoptr (i64 41 to i64*), i64 63), !insn.addr !17494
  %295 = call i64 @wReg8.135(i64 %arg1, i64* inttoptr (i64 48 to i64*), i64 223), !insn.addr !17495
  %296 = call i64 @wReg8.135(i64 %arg1, i64* inttoptr (i64 50 to i64*), i64 223), !insn.addr !17496
  br label %dec_label_pc_29f5d, !insn.addr !17497

dec_label_pc_29eb9:                               ; preds = %dec_label_pc_29e63
  %297 = icmp ult i32 %storemerge21.in, 762000000
  br i1 %297, label %dec_label_pc_29f54, label %dec_label_pc_29ec2, !insn.addr !17498

dec_label_pc_29ec2:                               ; preds = %dec_label_pc_29eb9
  %298 = call i64 @wReg8.135(i64 %arg1, i64* inttoptr (i64 39 to i64*), i64 95), !insn.addr !17499
  %299 = call i64 @wReg8.135(i64 %arg1, i64* inttoptr (i64 41 to i64*), i64 95), !insn.addr !17500
  %300 = call i64 @wReg8.135(i64 %arg1, i64* inttoptr (i64 48 to i64*), i64 223), !insn.addr !17501
  %301 = call i64 @wReg8.135(i64 %arg1, i64* inttoptr (i64 50 to i64*), i64 223), !insn.addr !17502
  br label %dec_label_pc_29f5d, !insn.addr !17503

dec_label_pc_29f54:                               ; preds = %dec_label_pc_29eb9
  %302 = call i64 @wReg8.135(i64 %arg1, i64* inttoptr (i64 39 to i64*), i64 127), !insn.addr !17504
  %303 = call i64 @wReg8.135(i64 %arg1, i64* inttoptr (i64 41 to i64*), i64 127), !insn.addr !17505
  %304 = call i64 @wReg8.135(i64 %arg1, i64* inttoptr (i64 48 to i64*), i64 223), !insn.addr !17506
  %305 = call i64 @wReg8.135(i64 %arg1, i64* inttoptr (i64 50 to i64*), i64 223), !insn.addr !17507
  %306 = icmp ult i32 %storemerge21.in, 155000000
  br i1 %306, label %dec_label_pc_29f74, label %dec_label_pc_29f5d, !insn.addr !17508

dec_label_pc_29f5d:                               ; preds = %dec_label_pc_29e16, %dec_label_pc_29e6c, %dec_label_pc_29ec2, %dec_label_pc_29f54
  %307 = call i64 @wReg8.135(i64 %arg1, i64* inttoptr (i64 54 to i64*), i64 124), !insn.addr !17509
  br label %dec_label_pc_2a47a, !insn.addr !17510

dec_label_pc_29f74:                               ; preds = %dec_label_pc_29f54
  %308 = call i64 @wReg8.135(i64 %arg1, i64* inttoptr (i64 54 to i64*), i64 84), !insn.addr !17511
  br label %dec_label_pc_2a47a, !insn.addr !17512

dec_label_pc_29f8b:                               ; preds = %dec_label_pc_29daf
  %309 = call i64 @wReg8.135(i64 %arg1, i64* bitcast (i16** @global_var_e to i64*), i64 37), !insn.addr !17513
  %310 = call i64 @wReg8.135(i64 %arg1, i64* inttoptr (i64 37 to i64*), i64 233), !insn.addr !17514
  %311 = call i64 @wReg8.135(i64 %arg1, i64* inttoptr (i64 38 to i64*), i64 128), !insn.addr !17515
  %312 = call i64 @wReg8.135(i64 %arg1, i64* inttoptr (i64 39 to i64*), i64 ptrtoint (i32* @global_var_1 to i64)), !insn.addr !17516
  %313 = call i64 @wReg8.135(i64 %arg1, i64* inttoptr (i64 41 to i64*), i64 ptrtoint (i32* @global_var_1 to i64)), !insn.addr !17517
  %314 = call i64 @wReg8.135(i64 %arg1, i64* inttoptr (i64 48 to i64*), i64 ptrtoint (i32* @global_var_1 to i64)), !insn.addr !17518
  %315 = call i64 @wReg8.135(i64 %arg1, i64* inttoptr (i64 50 to i64*), i64 ptrtoint (i32* @global_var_1 to i64)), !insn.addr !17519
  %316 = call i64 @wReg8.135(i64 %arg1, i64* inttoptr (i64 54 to i64*), i64 84), !insn.addr !17520
  br label %dec_label_pc_2a47a, !insn.addr !17521

dec_label_pc_2a020:                               ; preds = %dec_label_pc_29da4
  %317 = icmp eq i32 %215, 78080, !insn.addr !17522
  %318 = icmp eq i1 %317, false, !insn.addr !17523
  br i1 %318, label %dec_label_pc_2a601, label %dec_label_pc_2a02c, !insn.addr !17523

dec_label_pc_2a02c:                               ; preds = %dec_label_pc_2a020
  %319 = icmp eq i1 %or.cond, false, !insn.addr !17524
  %320 = icmp eq i1 %319, false, !insn.addr !17525
  %or.cond50 = or i1 %31, %320
  %or.cond52 = or i1 %32, %or.cond50
  %or.cond54 = or i1 %33, %or.cond52
  %or.cond54.not = icmp ne i1 %or.cond54, true
  %321 = icmp eq i1 %34, false, !insn.addr !17526
  %or.cond128 = icmp eq i1 %321, %or.cond54.not
  br i1 %or.cond128, label %dec_label_pc_2a07c, label %dec_label_pc_2a056, !insn.addr !17525

dec_label_pc_2a056:                               ; preds = %dec_label_pc_2a02c
  %322 = call i64 @wReg8.135(i64 %arg1, i64* bitcast (i16** @global_var_e to i64*), i64 69), !insn.addr !17527
  %323 = call i64 @wReg8.135(i64 %arg1, i64* inttoptr (i64 37 to i64*), i64 250), !insn.addr !17528
  br label %dec_label_pc_2a0a0, !insn.addr !17529

dec_label_pc_2a07c:                               ; preds = %dec_label_pc_2a02c
  %324 = call i64 @wReg8.135(i64 %arg1, i64* bitcast (i16** @global_var_e to i64*), i64 37), !insn.addr !17530
  %325 = call i64 @wReg8.135(i64 %arg1, i64* inttoptr (i64 37 to i64*), i64 233), !insn.addr !17531
  br label %dec_label_pc_2a0a0, !insn.addr !17531

dec_label_pc_2a0a0:                               ; preds = %dec_label_pc_2a07c, %dec_label_pc_2a056
  %or.cond62 = or i1 %34, %or.cond54
  %or.cond64 = or i1 %35, %or.cond62
  br i1 %or.cond64, label %dec_label_pc_2a0e6, label %dec_label_pc_2a0d2, !insn.addr !17532

dec_label_pc_2a0d2:                               ; preds = %dec_label_pc_2a0a0
  %326 = call i64 @wReg8.135(i64 %arg1, i64* inttoptr (i64 46 to i64*), i64 ptrtoint (i64* @global_var_22 to i64)), !insn.addr !17533
  br label %dec_label_pc_2a0f8, !insn.addr !17534

dec_label_pc_2a0e6:                               ; preds = %dec_label_pc_2a0a0
  %327 = call i64 @wReg8.135(i64 %arg1, i64* inttoptr (i64 46 to i64*), i64 86), !insn.addr !17535
  br label %dec_label_pc_2a0f8, !insn.addr !17535

dec_label_pc_2a0f8:                               ; preds = %dec_label_pc_2a0e6, %dec_label_pc_2a0d2
  %328 = icmp eq i32 %10, ptrtoint (i32* @global_var_2 to i32), !insn.addr !17536
  %329 = icmp eq i1 %328, false, !insn.addr !17537
  %brmerge = or i1 %329, %or.cond52
  br i1 %brmerge, label %dec_label_pc_2a144, label %dec_label_pc_2a10f, !insn.addr !17537

dec_label_pc_2a10f:                               ; preds = %dec_label_pc_2a0f8
  %330 = call i64 @wReg8.135(i64 %arg1, i64* inttoptr (i64 38 to i64*), i64 128), !insn.addr !17538
  br label %dec_label_pc_2a285, !insn.addr !17539

dec_label_pc_2a144:                               ; preds = %dec_label_pc_2a0f8
  %331 = call i64 @wReg8.135(i64 %arg1, i64* inttoptr (i64 38 to i64*), i64 130), !insn.addr !17540
  %332 = icmp ugt i32 %10, ptrtoint (i32* @global_var_1 to i32)
  br i1 %332, label %dec_label_pc_2a285, label %dec_label_pc_2a160, !insn.addr !17541

dec_label_pc_2a160:                               ; preds = %dec_label_pc_2a144
  %333 = call i64 @wReg8.135(i64 %arg1, i64* inttoptr (i64 39 to i64*), i64 175), !insn.addr !17542
  %334 = call i64 @wReg8.135(i64 %arg1, i64* inttoptr (i64 41 to i64*), i64 175), !insn.addr !17543
  %335 = call i64 @wReg8.135(i64 %arg1, i64* inttoptr (i64 48 to i64*), i64 ptrtoint (i8* @global_var_f to i64)), !insn.addr !17544
  %336 = call i64 @wReg8.135(i64 %arg1, i64* inttoptr (i64 50 to i64*), i64 ptrtoint (i8* @global_var_f to i64)), !insn.addr !17545
  br i1 %21, label %dec_label_pc_2a1ec, label %dec_label_pc_2a1ae, !insn.addr !17546

dec_label_pc_2a1ae:                               ; preds = %dec_label_pc_2a160
  %337 = load i8, i8* %36, align 8, !insn.addr !17547
  %338 = icmp ult i8 %337, 16
  br i1 %338, label %dec_label_pc_2a1c4, label %dec_label_pc_2a1d8, !insn.addr !17548

dec_label_pc_2a1c4:                               ; preds = %dec_label_pc_2a1ae
  %339 = sub i8 0, %337
  %340 = sub i8 %339, 1
  %341 = zext i8 %340 to i64, !insn.addr !17549
  %342 = call i64 @wReg8.135(i64 %arg1, i64* inttoptr (i64 52 to i64*), i64 %341), !insn.addr !17550
  br label %dec_label_pc_2a1fe, !insn.addr !17551

dec_label_pc_2a1d8:                               ; preds = %dec_label_pc_2a1ae
  %343 = call i64 @wReg8.135(i64 %arg1, i64* inttoptr (i64 52 to i64*), i64 240), !insn.addr !17552
  br label %dec_label_pc_2a1fe, !insn.addr !17553

dec_label_pc_2a1ec:                               ; preds = %dec_label_pc_2a160
  %344 = call i64 @wReg8.135(i64 %arg1, i64* inttoptr (i64 52 to i64*), i64 96), !insn.addr !17554
  br label %dec_label_pc_2a1fe, !insn.addr !17554

dec_label_pc_2a1fe:                               ; preds = %dec_label_pc_2a1ec, %dec_label_pc_2a1d8, %dec_label_pc_2a1c4
  %345 = load i8, i8* %36, align 8, !insn.addr !17555
  %346 = icmp ult i8 %345, 16
  br i1 %346, label %dec_label_pc_2a22a, label %dec_label_pc_2a25c, !insn.addr !17556

dec_label_pc_2a22a:                               ; preds = %dec_label_pc_2a1fe
  %347 = sub i8 95, %345
  %348 = zext i8 %347 to i64, !insn.addr !17557
  %349 = call i64 @wReg8.135(i64 %arg1, i64* inttoptr (i64 53 to i64*), i64 %348), !insn.addr !17558
  br label %dec_label_pc_2a26e, !insn.addr !17559

dec_label_pc_2a25c:                               ; preds = %dec_label_pc_2a1fe
  %350 = call i64 @wReg8.135(i64 %arg1, i64* inttoptr (i64 53 to i64*), i64 80), !insn.addr !17560
  br label %dec_label_pc_2a26e, !insn.addr !17560

dec_label_pc_2a26e:                               ; preds = %dec_label_pc_2a25c, %dec_label_pc_2a22a
  %351 = call i64 @wReg8.135(i64 %arg1, i64* inttoptr (i64 54 to i64*), i64 84), !insn.addr !17561
  br label %dec_label_pc_2a47a, !insn.addr !17562

dec_label_pc_2a285:                               ; preds = %dec_label_pc_2a144, %dec_label_pc_2a10f
  br i1 %or.cond128, label %dec_label_pc_2a420, label %dec_label_pc_2a2a8, !insn.addr !17563

dec_label_pc_2a2a8:                               ; preds = %dec_label_pc_2a285
  %352 = icmp ult i32 %storemerge21.in, 818000000
  br i1 %352, label %dec_label_pc_2a2fe, label %dec_label_pc_2a2b1, !insn.addr !17564

dec_label_pc_2a2b1:                               ; preds = %dec_label_pc_2a2a8
  %353 = call i64 @wReg8.135(i64 %arg1, i64* inttoptr (i64 39 to i64*), i64 63), !insn.addr !17565
  %354 = call i64 @wReg8.135(i64 %arg1, i64* inttoptr (i64 41 to i64*), i64 63), !insn.addr !17566
  %355 = call i64 @wReg8.135(i64 %arg1, i64* inttoptr (i64 48 to i64*), i64 175), !insn.addr !17567
  %356 = call i64 @wReg8.135(i64 %arg1, i64* inttoptr (i64 50 to i64*), i64 175), !insn.addr !17568
  br label %dec_label_pc_2a3f8, !insn.addr !17569

dec_label_pc_2a2fe:                               ; preds = %dec_label_pc_2a2a8
  %357 = icmp ult i32 %storemerge21.in, 786000000
  br i1 %357, label %dec_label_pc_2a354, label %dec_label_pc_2a307, !insn.addr !17570

dec_label_pc_2a307:                               ; preds = %dec_label_pc_2a2fe
  %358 = call i64 @wReg8.135(i64 %arg1, i64* inttoptr (i64 39 to i64*), i64 63), !insn.addr !17571
  %359 = call i64 @wReg8.135(i64 %arg1, i64* inttoptr (i64 41 to i64*), i64 63), !insn.addr !17572
  %360 = call i64 @wReg8.135(i64 %arg1, i64* inttoptr (i64 48 to i64*), i64 223), !insn.addr !17573
  %361 = call i64 @wReg8.135(i64 %arg1, i64* inttoptr (i64 50 to i64*), i64 223), !insn.addr !17574
  br label %dec_label_pc_2a3f8, !insn.addr !17575

dec_label_pc_2a354:                               ; preds = %dec_label_pc_2a2fe
  %362 = icmp ult i32 %storemerge21.in, 762000000
  br i1 %362, label %dec_label_pc_2a3ef, label %dec_label_pc_2a35d, !insn.addr !17576

dec_label_pc_2a35d:                               ; preds = %dec_label_pc_2a354
  %363 = call i64 @wReg8.135(i64 %arg1, i64* inttoptr (i64 39 to i64*), i64 95), !insn.addr !17577
  %364 = call i64 @wReg8.135(i64 %arg1, i64* inttoptr (i64 41 to i64*), i64 95), !insn.addr !17578
  %365 = call i64 @wReg8.135(i64 %arg1, i64* inttoptr (i64 48 to i64*), i64 223), !insn.addr !17579
  %366 = call i64 @wReg8.135(i64 %arg1, i64* inttoptr (i64 50 to i64*), i64 223), !insn.addr !17580
  br label %dec_label_pc_2a3f8, !insn.addr !17581

dec_label_pc_2a3ef:                               ; preds = %dec_label_pc_2a354
  %367 = call i64 @wReg8.135(i64 %arg1, i64* inttoptr (i64 39 to i64*), i64 127), !insn.addr !17582
  %368 = call i64 @wReg8.135(i64 %arg1, i64* inttoptr (i64 41 to i64*), i64 127), !insn.addr !17583
  %369 = call i64 @wReg8.135(i64 %arg1, i64* inttoptr (i64 48 to i64*), i64 223), !insn.addr !17584
  %370 = call i64 @wReg8.135(i64 %arg1, i64* inttoptr (i64 50 to i64*), i64 223), !insn.addr !17585
  %371 = icmp ult i32 %storemerge21.in, 155000000
  br i1 %371, label %dec_label_pc_2a40c, label %dec_label_pc_2a3f8, !insn.addr !17586

dec_label_pc_2a3f8:                               ; preds = %dec_label_pc_2a2b1, %dec_label_pc_2a307, %dec_label_pc_2a35d, %dec_label_pc_2a3ef
  %372 = call i64 @wReg8.135(i64 %arg1, i64* inttoptr (i64 54 to i64*), i64 124), !insn.addr !17587
  br label %dec_label_pc_2a47a, !insn.addr !17588

dec_label_pc_2a40c:                               ; preds = %dec_label_pc_2a3ef
  %373 = call i64 @wReg8.135(i64 %arg1, i64* inttoptr (i64 54 to i64*), i64 84), !insn.addr !17589
  br label %dec_label_pc_2a47a, !insn.addr !17590

dec_label_pc_2a420:                               ; preds = %dec_label_pc_2a285
  %374 = call i64 @wReg8.135(i64 %arg1, i64* inttoptr (i64 39 to i64*), i64 ptrtoint (i32* @global_var_1 to i64)), !insn.addr !17591
  %375 = call i64 @wReg8.135(i64 %arg1, i64* inttoptr (i64 41 to i64*), i64 ptrtoint (i32* @global_var_1 to i64)), !insn.addr !17592
  %376 = call i64 @wReg8.135(i64 %arg1, i64* inttoptr (i64 48 to i64*), i64 ptrtoint (i32* @global_var_1 to i64)), !insn.addr !17593
  %377 = call i64 @wReg8.135(i64 %arg1, i64* inttoptr (i64 50 to i64*), i64 ptrtoint (i32* @global_var_1 to i64)), !insn.addr !17594
  %378 = call i64 @wReg8.135(i64 %arg1, i64* inttoptr (i64 54 to i64*), i64 84), !insn.addr !17595
  br label %dec_label_pc_2a47a, !insn.addr !17595

dec_label_pc_2a47a:                               ; preds = %dec_label_pc_2a420, %dec_label_pc_2a40c, %dec_label_pc_2a3f8, %dec_label_pc_2a26e, %dec_label_pc_29f8b, %dec_label_pc_29f74, %dec_label_pc_29f5d, %dec_label_pc_29d8d, %dec_label_pc_29d76, %dec_label_pc_29cb6, %dec_label_pc_29b38, %dec_label_pc_29b21
  %379 = load i32, i32* %19, align 8, !insn.addr !17596
  %380 = and i32 %379, 16776960, !insn.addr !17597
  %381 = icmp eq i32 %380, 8466432, !insn.addr !17598
  br i1 %381, label %dec_label_pc_2a4ab, label %dec_label_pc_2a49b, !insn.addr !17599

dec_label_pc_2a49b:                               ; preds = %dec_label_pc_2a47a
  %382 = and i32 %379, 1048320
  %383 = icmp eq i32 %382, 78080, !insn.addr !17600
  %384 = icmp eq i1 %383, false, !insn.addr !17601
  br i1 %384, label %dec_label_pc_2a601, label %dec_label_pc_2a4ab, !insn.addr !17601

dec_label_pc_2a4ab:                               ; preds = %dec_label_pc_2a49b, %dec_label_pc_2a47a
  %385 = icmp eq i32 %10, ptrtoint (i32* @global_var_2 to i32), !insn.addr !17602
  %386 = icmp eq i1 %385, false, !insn.addr !17603
  %or.cond76 = or i1 %29, %386
  %or.cond78 = or i1 %30, %or.cond76
  %or.cond80 = or i1 %31, %or.cond78
  %or.cond82 = or i1 %32, %or.cond80
  %or.cond84 = or i1 %33, %or.cond82
  %or.cond86 = or i1 %34, %or.cond84
  %or.cond88 = or i1 %35, %or.cond86
  br i1 %or.cond88, label %dec_label_pc_2a5d7, label %dec_label_pc_2a4fb, !insn.addr !17603

dec_label_pc_2a4fb:                               ; preds = %dec_label_pc_2a4ab
  %387 = icmp ne i32 %13, ptrtoint (i32* @global_var_1 to i32), !insn.addr !17604
  %388 = icmp eq i32 %13, ptrtoint (i8** @global_var_3 to i32), !insn.addr !17605
  %389 = icmp eq i1 %388, false, !insn.addr !17606
  %or.cond132 = icmp eq i1 %387, %389
  br i1 %or.cond132, label %dec_label_pc_2a548, label %dec_label_pc_2a507, !insn.addr !17607

dec_label_pc_2a507:                               ; preds = %dec_label_pc_2a4fb
  %390 = load i8, i8* %36, align 8, !insn.addr !17608
  %391 = icmp ult i8 %390, 16
  br i1 %391, label %dec_label_pc_2a51d, label %dec_label_pc_2a536, !insn.addr !17609

dec_label_pc_2a51d:                               ; preds = %dec_label_pc_2a507
  %392 = sub i8 127, %390
  %393 = zext i8 %392 to i64, !insn.addr !17610
  %394 = call i64 @wReg8.135(i64 %arg1, i64* inttoptr (i64 52 to i64*), i64 %393), !insn.addr !17611
  br label %dec_label_pc_2a548, !insn.addr !17612

dec_label_pc_2a536:                               ; preds = %dec_label_pc_2a507
  %395 = call i64 @wReg8.135(i64 %arg1, i64* inttoptr (i64 52 to i64*), i64 112), !insn.addr !17613
  br label %dec_label_pc_2a548, !insn.addr !17613

dec_label_pc_2a548:                               ; preds = %dec_label_pc_2a4fb, %dec_label_pc_2a536, %dec_label_pc_2a51d
  %396 = sub i32 %13, ptrtoint (i32* @global_var_2 to i32), !insn.addr !17614
  %397 = icmp ugt i32 %396, ptrtoint (i32* @global_var_1 to i32)
  %398 = icmp eq i32 %13, 0, !insn.addr !17615
  %399 = icmp eq i1 %398, false, !insn.addr !17616
  %or.cond134 = icmp eq i1 %397, %399
  br i1 %or.cond134, label %dec_label_pc_2a59a, label %dec_label_pc_2a559, !insn.addr !17617

dec_label_pc_2a559:                               ; preds = %dec_label_pc_2a548
  %400 = load i8, i8* %36, align 8, !insn.addr !17618
  %401 = icmp ult i8 %400, 16
  br i1 %401, label %dec_label_pc_2a56f, label %dec_label_pc_2a588, !insn.addr !17619

dec_label_pc_2a56f:                               ; preds = %dec_label_pc_2a559
  %402 = sub i8 95, %400
  %403 = zext i8 %402 to i64, !insn.addr !17620
  %404 = call i64 @wReg8.135(i64 %arg1, i64* inttoptr (i64 53 to i64*), i64 %403), !insn.addr !17621
  br label %dec_label_pc_2a59a, !insn.addr !17622

dec_label_pc_2a588:                               ; preds = %dec_label_pc_2a559
  %405 = call i64 @wReg8.135(i64 %arg1, i64* inttoptr (i64 53 to i64*), i64 80), !insn.addr !17623
  br label %dec_label_pc_2a59a, !insn.addr !17623

dec_label_pc_2a59a:                               ; preds = %dec_label_pc_2a548, %dec_label_pc_2a588, %dec_label_pc_2a56f
  %406 = icmp eq i32 %13, ptrtoint (i32* @global_var_1 to i32), !insn.addr !17624
  %or.cond90 = or i1 %406, %388
  br i1 %or.cond90, label %dec_label_pc_2a5b8, label %dec_label_pc_2a5a6, !insn.addr !17625

dec_label_pc_2a5a6:                               ; preds = %dec_label_pc_2a59a
  %407 = call i64 @wReg8.135(i64 %arg1, i64* inttoptr (i64 52 to i64*), i64 96), !insn.addr !17626
  br label %dec_label_pc_2a5b8, !insn.addr !17626

dec_label_pc_2a5b8:                               ; preds = %dec_label_pc_2a5a6, %dec_label_pc_2a59a
  %408 = icmp ule i32 %396, ptrtoint (i32* @global_var_1 to i32)
  %or.cond92 = or i1 %398, %408
  br i1 %or.cond92, label %dec_label_pc_2a601, label %dec_label_pc_2a5c3, !insn.addr !17627

dec_label_pc_2a5c3:                               ; preds = %dec_label_pc_2a5b8
  %409 = call i64 @wReg8.135(i64 %arg1, i64* inttoptr (i64 53 to i64*), i64 64), !insn.addr !17628
  br label %dec_label_pc_2a601, !insn.addr !17629

dec_label_pc_2a5d7:                               ; preds = %dec_label_pc_2a4ab
  %410 = icmp ugt i32 %10, ptrtoint (i32* @global_var_1 to i32)
  br i1 %410, label %dec_label_pc_2a5dd, label %dec_label_pc_2a601, !insn.addr !17630

dec_label_pc_2a5dd:                               ; preds = %dec_label_pc_2a5d7
  %411 = call i64 @wReg8.135(i64 %arg1, i64* inttoptr (i64 52 to i64*), i64 120), !insn.addr !17631
  %412 = call i64 @wReg8.135(i64 %arg1, i64* inttoptr (i64 53 to i64*), i64 84), !insn.addr !17632
  br label %dec_label_pc_2a601, !insn.addr !17632

dec_label_pc_2a601:                               ; preds = %dec_label_pc_2a5b8, %dec_label_pc_2a5d7, %dec_label_pc_2a5dd, %dec_label_pc_2a5c3, %dec_label_pc_2a49b, %dec_label_pc_2a020
  %or.cond100.not = icmp ne i1 %or.cond28, true
  %413 = icmp eq i1 %34, false, !insn.addr !17633
  %or.cond136 = icmp eq i1 %413, %or.cond100.not
  br i1 %or.cond136, label %dec_label_pc_2a673, label %dec_label_pc_2a625, !insn.addr !17634

dec_label_pc_2a625:                               ; preds = %dec_label_pc_2a601
  %414 = icmp ult i32 %storemerge21.in, 300000000
  br i1 %414, label %dec_label_pc_2a642, label %dec_label_pc_2a62e, !insn.addr !17635

dec_label_pc_2a62e:                               ; preds = %dec_label_pc_2a625
  %415 = call i64 @wReg8.135(i64 %arg1, i64* inttoptr (i64 55 to i64*), i64 132), !insn.addr !17636
  br label %dec_label_pc_2a685, !insn.addr !17637

dec_label_pc_2a642:                               ; preds = %dec_label_pc_2a625
  %416 = icmp ult i32 %storemerge21.in, 155000000
  br i1 %416, label %dec_label_pc_2a65f, label %dec_label_pc_2a64b, !insn.addr !17638

dec_label_pc_2a64b:                               ; preds = %dec_label_pc_2a642
  %417 = call i64 @wReg8.135(i64 %arg1, i64* inttoptr (i64 55 to i64*), i64 156), !insn.addr !17639
  br label %dec_label_pc_2a685, !insn.addr !17640

dec_label_pc_2a65f:                               ; preds = %dec_label_pc_2a642
  %418 = call i64 @wReg8.135(i64 %arg1, i64* inttoptr (i64 55 to i64*), i64 132), !insn.addr !17641
  br label %dec_label_pc_2a685, !insn.addr !17642

dec_label_pc_2a673:                               ; preds = %dec_label_pc_2a601
  %419 = call i64 @wReg8.135(i64 %arg1, i64* inttoptr (i64 55 to i64*), i64 132), !insn.addr !17643
  br label %dec_label_pc_2a685, !insn.addr !17643

dec_label_pc_2a685:                               ; preds = %dec_label_pc_2a673, %dec_label_pc_2a65f, %dec_label_pc_2a64b, %dec_label_pc_2a62e
  %420 = add i64 %arg2, ptrtoint (i32** @global_var_21 to i64), !insn.addr !17644
  %421 = inttoptr i64 %420 to i8*, !insn.addr !17644
  %422 = load i8, i8* %421, align 1, !insn.addr !17644
  %423 = icmp eq i8 %422, 0, !insn.addr !17645
  br i1 %423, label %dec_label_pc_2a69f, label %dec_label_pc_2a68f, !insn.addr !17646

dec_label_pc_2a68f:                               ; preds = %dec_label_pc_2a685
  %424 = zext i8 %422 to i64, !insn.addr !17644
  %425 = call i64 @wReg8.135(i64 %arg1, i64* inttoptr (i64 53 to i64*), i64 %424), !insn.addr !17647
  br label %dec_label_pc_2a69f, !insn.addr !17647

dec_label_pc_2a69f:                               ; preds = %dec_label_pc_2a68f, %dec_label_pc_2a685
  %426 = shl i32 %149, ptrtoint (i8** @global_var_9 to i32), !insn.addr !17648
  %.rhs.trunc = urem i32 %storemerge19, 256
  %427 = udiv i32 %426, %.rhs.trunc
  %428 = add i32 %427, -110592000, !insn.addr !17649
  %429 = ptrtoint i64* %arg3 to i64
  %430 = trunc i64 %429 to i32, !insn.addr !17650
  %431 = call i64 @nm131_demod_config.138(i64 %arg1, i64 %arg2, i32 %428, i32 %430), !insn.addr !17651
  store i32 %428, i32* %19, align 8, !insn.addr !17652
  %432 = load i32, i32* %6, align 4, !insn.addr !17653
  %433 = add nuw nsw i64 %18, 8, !insn.addr !17654
  %434 = inttoptr i64 %433 to i32*, !insn.addr !17654
  store i32 %432, i32* %434, align 8, !insn.addr !17654
  %435 = load i32, i32* %9, align 4, !insn.addr !17655
  %436 = add nuw nsw i64 %18, 12, !insn.addr !17656
  %437 = inttoptr i64 %436 to i32*, !insn.addr !17656
  store i32 %435, i32* %437, align 4, !insn.addr !17656
  %438 = or i64 %18, 4, !insn.addr !17657
  %439 = inttoptr i64 %438 to i32*, !insn.addr !17657
  store i32 %430, i32* %439, align 4, !insn.addr !17658
  %440 = load i32, i32* %12, align 4, !insn.addr !17659
  store i32 %440, i32* %437, align 4, !insn.addr !17660
  %441 = load i8, i8* %15, align 1, !insn.addr !17661
  %442 = add nuw nsw i64 %18, 13, !insn.addr !17662
  %443 = inttoptr i64 %442 to i8*, !insn.addr !17662
  store i8 %441, i8* %443, align 1, !insn.addr !17662
  %444 = add i64 %arg2, ptrtoint (i32** @global_var_1d to i64), !insn.addr !17663
  %445 = inttoptr i64 %444 to i8*, !insn.addr !17663
  %446 = load i8, i8* %445, align 1, !insn.addr !17663
  %447 = add nuw nsw i64 %18, 14, !insn.addr !17664
  %448 = inttoptr i64 %447 to i8*, !insn.addr !17664
  store i8 %446, i8* %448, align 2, !insn.addr !17664
  %449 = add i64 %arg2, ptrtoint (i32** @global_var_14 to i64), !insn.addr !17665
  %450 = inttoptr i64 %449 to i8*, !insn.addr !17665
  %451 = load i8, i8* %450, align 1, !insn.addr !17665
  %452 = add nuw nsw i64 %18, 15, !insn.addr !17666
  %453 = inttoptr i64 %452 to i8*, !insn.addr !17666
  store i8 %451, i8* %453, align 1, !insn.addr !17666
  ret i64 %3, !insn.addr !17667
}

define void @nm131_fm_scan(i64 %pPrivate, i64 %p) local_unnamed_addr {
dec_label_pc_2a72d:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = call i64 @__decompiler_undefined_function_0()
  %2 = mul i64 %0, ptrtoint (i32* @global_var_1 to i64), !insn.addr !17668
  %3 = add i64 %p, -21, !insn.addr !17668
  %4 = add i64 %3, %2, !insn.addr !17668
  %5 = inttoptr i64 %4 to i8*, !insn.addr !17668
  %6 = load i8, i8* %5, align 1, !insn.addr !17668
  %7 = lshr i64 %1, ptrtoint (i8* @global_var_8 to i64), !insn.addr !17668
  %8 = trunc i64 %7 to i8, !insn.addr !17668
  %9 = add i8 %6, %8, !insn.addr !17668
  store i8 %9, i8* %5, align 1, !insn.addr !17668
  ret void, !insn.addr !17668
}

define i64 @function_2a749(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4, i64 %arg5) local_unnamed_addr {
dec_label_pc_2a749:
  %0 = call i64 @__stack_chk_fail(), !insn.addr !17669
  ret i64 %0, !insn.addr !17670
}

define i64 @nm131_fm_scan.118(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_2a75d:
  %rsi = alloca i64, align 8
  %0 = call i1 @__decompiler_undefined_function_2()
  %stack_var_-72 = alloca i64, align 8
  %1 = call i64 @mcount(), !insn.addr !17671
  %2 = ptrtoint i64* %stack_var_-72 to i64, !insn.addr !17672
  %3 = bitcast i64* %stack_var_-72 to i8*, !insn.addr !17673
  call void @__asm_rep_stosq_memset(i8* nonnull %3, i64 0, i64 ptrtoint (i8* @global_var_5 to i64)), !insn.addr !17673
  %4 = select i1 %0, i64 mul (i64 ptrtoint (i8* @global_var_5 to i64), i64 -8), i64 mul (i64 ptrtoint (i8* @global_var_8 to i64), i64 ptrtoint (i8* @global_var_5 to i64)), !insn.addr !17673
  %5 = add i64 %4, %2, !insn.addr !17673
  %6 = inttoptr i64 %5 to i32*, !insn.addr !17674
  store i32 0, i32* %6, align 4, !insn.addr !17674
  %7 = bitcast i64* %rsi to i32*
  %8 = load i32, i32* %7, align 8, !insn.addr !17675
  %9 = zext i32 %8 to i64, !insn.addr !17675
  ret i64 %9, !insn.addr !17676
}

define void @nm131_scan(i64 %pPrivate, i64 %p) local_unnamed_addr {
dec_label_pc_2a7aa:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = trunc i64 %0 to i16, !insn.addr !17677
  %2 = call i8 @__asm_in(i16 %1), !insn.addr !17677
  ret void, !insn.addr !17677
}

define i64 @function_2a7ad(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_2a7ad:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = call i64 @__decompiler_undefined_function_0()
  %2 = call i64 @nmi_delay.87(i64 %0, i64* bitcast (i32** @global_var_14 to i64*)), !insn.addr !17678
  %3 = call i64 @nm131_adec_get_rssi.119(i64 %0), !insn.addr !17679
  %4 = trunc i64 %3 to i16, !insn.addr !17680
  %5 = add i64 %1, ptrtoint (i16* @global_var_4 to i64), !insn.addr !17680
  %6 = inttoptr i64 %5 to i16*, !insn.addr !17680
  store i16 %4, i16* %6, align 2, !insn.addr !17680
  %7 = call i64 @nm131_get_overthcount.120(i64 %0), !insn.addr !17681
  %8 = trunc i64 %7 to i32, !insn.addr !17682
  %9 = add i64 %1, ptrtoint (i8* @global_var_8 to i64), !insn.addr !17682
  %10 = inttoptr i64 %9 to i32*, !insn.addr !17682
  store i32 %8, i32* %10, align 4, !insn.addr !17682
  ret i64 %7, !insn.addr !17683
}

define i64 @nm131_scan.117(i64 %arg1, i64* %arg2) local_unnamed_addr {
dec_label_pc_2a7da:
  %0 = ptrtoint i64* %arg2 to i64
  %1 = call i64 @mcount(), !insn.addr !17684
  %2 = call i64 @nm131_tune_internal.139(i64 %arg1, i64 %0, i64* bitcast (i32* @global_var_1 to i64*)), !insn.addr !17685
  %3 = call i64 @nmi_delay.87(i64 %arg1, i64* bitcast (i8** @global_var_1e to i64*)), !insn.addr !17686
  %4 = call i64 @rReg32.101(i64 %arg1, i64 492), !insn.addr !17687
  %5 = trunc i64 %4 to i32, !insn.addr !17688
  %6 = lshr i32 %5, ptrtoint (i8* @global_var_a to i32), !insn.addr !17688
  %7 = urem i32 %6, 1024, !insn.addr !17689
  %8 = zext i32 %7 to i64, !insn.addr !17689
  ret i64 %8, !insn.addr !17689
}

define void @nm131_software_sleep_lt(i64 %pPrivate) local_unnamed_addr {
dec_label_pc_2a819:
  ret void, !insn.addr !17690
}

define i64 @function_2a81e(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4, i64 %arg5) local_unnamed_addr {
dec_label_pc_2a81e:
  %0 = call i64 @__decompiler_undefined_function_0()
  %rbx = alloca i64, align 8
  %1 = call i64 @__decompiler_undefined_function_0()
  %2 = trunc i64 %1 to i32, !insn.addr !17691
  %3 = add i32 %2, -512, !insn.addr !17691
  %4 = sub i32 511, %2
  %5 = and i32 %4, %2, !insn.addr !17691
  %6 = icmp slt i32 %5, 0, !insn.addr !17691
  %7 = icmp slt i32 %3, 0, !insn.addr !17691
  %8 = icmp eq i1 %7, %6, !insn.addr !17692
  %.v = select i1 %8, i64 %arg3, i64 %1
  %9 = and i64 %.v, 4294967295, !insn.addr !17692
  %10 = trunc i64 %.v to i32, !insn.addr !17693
  %11 = add i64 %0, 48, !insn.addr !17693
  %12 = inttoptr i64 %11 to i32*, !insn.addr !17693
  store i32 %10, i32* %12, align 4, !insn.addr !17693
  %13 = bitcast i64* %rbx to i8*
  %14 = load i8, i8* %13, align 8, !insn.addr !17694
  %15 = zext i8 %14 to i64, !insn.addr !17695
  %16 = mul nuw nsw i64 %15, 184, !insn.addr !17695
  %17 = inttoptr i64 %16 to i16*, !insn.addr !17696
  %18 = load i16, i16* %17, align 8, !insn.addr !17696
  %19 = sext i16 %18 to i32, !insn.addr !17697
  %20 = sub i32 %10, %19, !insn.addr !17697
  %21 = xor i32 %10, %19, !insn.addr !17697
  %22 = xor i32 %20, %10, !insn.addr !17697
  %23 = and i32 %22, %21, !insn.addr !17697
  %24 = icmp slt i32 %23, 0, !insn.addr !17697
  %25 = icmp slt i32 %20, 0, !insn.addr !17697
  %26 = icmp eq i1 %25, %24, !insn.addr !17698
  %27 = zext i1 %26 to i8, !insn.addr !17698
  %28 = add i64 %0, 44, !insn.addr !17698
  %29 = inttoptr i64 %28 to i8*, !insn.addr !17698
  store i8 %27, i8* %29, align 1, !insn.addr !17698
  ret i64 %9, !insn.addr !17699
}

define i64 @nm131_software_sleep_lt.361(i64 %arg1) local_unnamed_addr {
dec_label_pc_2a849:
  %rdx.0.reg2mem = alloca i64, !insn.addr !17700
  %rdi = alloca i64, align 8
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = call i1 @__decompiler_undefined_function_2()
  %stack_var_-88 = alloca i64, align 8
  %2 = call i64 @mcount(), !insn.addr !17701
  %3 = bitcast i64* %rdi to i8*
  %4 = ptrtoint i64* %stack_var_-88 to i64, !insn.addr !17702
  %5 = bitcast i64* %stack_var_-88 to i8*, !insn.addr !17703
  call void @__asm_rep_stosq_memset(i8* nonnull %5, i64 0, i64 ptrtoint (i8* @global_var_5 to i64)), !insn.addr !17703
  %6 = select i1 %1, i64 mul (i64 ptrtoint (i8* @global_var_5 to i64), i64 -8), i64 mul (i64 ptrtoint (i8* @global_var_8 to i64), i64 ptrtoint (i8* @global_var_5 to i64)), !insn.addr !17703
  %7 = add i64 %6, %4, !insn.addr !17703
  %8 = inttoptr i64 %7 to i32*, !insn.addr !17704
  store i32 0, i32* %8, align 4, !insn.addr !17704
  store i64 474000000, i64* %stack_var_-88, align 8, !insn.addr !17705
  %9 = call i64 @nm131_tune_internal.139(i64 %arg1, i64 %4, i64* null), !insn.addr !17706
  %10 = urem i64 %0, 256, !insn.addr !17707
  %11 = mul nuw nsw i64 %10, 184, !insn.addr !17707
  %12 = or i64 %11, 2, !insn.addr !17708
  %13 = inttoptr i64 %12 to i8*, !insn.addr !17708
  store i8 ptrtoint (i32* @global_var_1 to i8), i8* %13, align 2, !insn.addr !17708
  %14 = call i64 @rReg32.101(i64 %arg1, i64 260), !insn.addr !17709
  %15 = and i64 %14, 4294967262, !insn.addr !17710
  %16 = or i64 %15, zext (i32 ptrtoint (i8* @global_var_10 to i32) to i64), !insn.addr !17711
  %17 = inttoptr i64 %16 to i64*, !insn.addr !17712
  %18 = call i64 @wReg32.436(i64 %arg1, i64 260, i64* %17), !insn.addr !17712
  %19 = call i64 @rReg8.103(i64 %arg1, i64 0), !insn.addr !17713
  %20 = trunc i64 %19 to i8, !insn.addr !17714
  %21 = or i64 %11, 3, !insn.addr !17714
  %22 = inttoptr i64 %21 to i8*, !insn.addr !17714
  store i8 %20, i8* %22, align 1, !insn.addr !17714
  %23 = call i64 @wReg8.135(i64 %arg1, i64* null, i64 ptrtoint ([3 x i8]* @global_var_d to i64)), !insn.addr !17715
  %24 = call i64 @rReg8.103(i64 %arg1, i64 ptrtoint (i8** @global_var_7 to i64)), !insn.addr !17716
  %25 = and i64 %24, 191, !insn.addr !17717
  %26 = call i64 @wReg8.135(i64 %arg1, i64* bitcast (i8** @global_var_7 to i64*), i64 %25), !insn.addr !17718
  %27 = call i64 @rReg8.103(i64 %arg1, i64 ptrtoint (i8** @global_var_9 to i64)), !insn.addr !17719
  %28 = and i64 %27, 239, !insn.addr !17720
  %29 = call i64 @wReg8.135(i64 %arg1, i64* bitcast (i8** @global_var_9 to i64*), i64 %28), !insn.addr !17721
  %30 = call i64 @rReg8.103(i64 %arg1, i64 ptrtoint (i8** @global_var_b to i64)), !insn.addr !17722
  %31 = and i64 %30, 239, !insn.addr !17723
  %32 = call i64 @wReg8.135(i64 %arg1, i64* bitcast (i8** @global_var_b to i64*), i64 %31), !insn.addr !17724
  %33 = call i64 @rReg8.103(i64 %arg1, i64 52), !insn.addr !17725
  %34 = trunc i64 %33 to i8, !insn.addr !17726
  %35 = or i64 %11, 4, !insn.addr !17726
  %36 = inttoptr i64 %35 to i8*, !insn.addr !17726
  store i8 %34, i8* %36, align 4, !insn.addr !17726
  %37 = call i64 @wReg8.135(i64 %arg1, i64* inttoptr (i64 52 to i64*), i64 0), !insn.addr !17727
  %38 = call i64 @rReg8.103(i64 %arg1, i64 53), !insn.addr !17728
  %39 = trunc i64 %38 to i8, !insn.addr !17729
  %40 = or i64 %11, 5, !insn.addr !17729
  %41 = inttoptr i64 %40 to i8*, !insn.addr !17729
  store i8 %39, i8* %41, align 1, !insn.addr !17729
  %42 = call i64 @wReg8.135(i64 %arg1, i64* inttoptr (i64 53 to i64*), i64 0), !insn.addr !17730
  %43 = call i64 @rReg8.103(i64 %arg1, i64 ptrtoint (i8* @global_var_5 to i64)), !insn.addr !17731
  %44 = trunc i64 %43 to i8, !insn.addr !17732
  %45 = or i64 %11, 6, !insn.addr !17732
  %46 = inttoptr i64 %45 to i8*, !insn.addr !17732
  store i8 %44, i8* %46, align 2, !insn.addr !17732
  %47 = call i64 @wReg8.135(i64 %arg1, i64* bitcast (i8* @global_var_5 to i64*), i64 ptrtoint (i8* @global_var_5 to i64)), !insn.addr !17733
  %48 = inttoptr i64 %11 to i8*, !insn.addr !17734
  store i8 ptrtoint (i8* @global_var_5 to i8), i8* %48, align 8, !insn.addr !17734
  %49 = call i64 @rReg8.103(i64 %arg1, i64 ptrtoint (i8* @global_var_a to i64)), !insn.addr !17735
  %50 = trunc i64 %49 to i8, !insn.addr !17736
  %51 = or i64 %11, 7, !insn.addr !17736
  %52 = inttoptr i64 %51 to i8*, !insn.addr !17736
  store i8 %50, i8* %52, align 1, !insn.addr !17736
  %53 = load i8, i8* %3, align 8, !insn.addr !17737
  %54 = zext i8 %53 to i64, !insn.addr !17738
  %55 = mul nuw nsw i64 %54, 184, !insn.addr !17738
  %56 = inttoptr i64 %55 to i32*, !insn.addr !17739
  %57 = load i32, i32* %56, align 8, !insn.addr !17739
  %58 = icmp ult i32 %57, 4
  store i64 244, i64* %rdx.0.reg2mem, !insn.addr !17740
  br i1 %58, label %dec_label_pc_2aa0b, label %dec_label_pc_2aa14, !insn.addr !17740

dec_label_pc_2aa0b:                               ; preds = %dec_label_pc_2a849
  %59 = zext i32 %57 to i64, !insn.addr !17739
  %60 = inttoptr i64 %59 to i8*, !insn.addr !17741
  %61 = load i8, i8* %60, align 1, !insn.addr !17741
  %62 = or i8 %61, -12
  %phitmp1 = zext i8 %62 to i64
  store i64 %phitmp1, i64* %rdx.0.reg2mem, !insn.addr !17741
  br label %dec_label_pc_2aa14, !insn.addr !17741

dec_label_pc_2aa14:                               ; preds = %dec_label_pc_2a849, %dec_label_pc_2aa0b
  %rdx.0.reload = load i64, i64* %rdx.0.reg2mem
  %63 = call i64 @wReg8.135(i64 %arg1, i64* bitcast (i8* @global_var_a to i64*), i64 %rdx.0.reload), !insn.addr !17742
  %64 = call i64 @rReg8.103(i64 %arg1, i64 54), !insn.addr !17743
  ret i64 %64, !insn.addr !17744
}

define void @nm131_notch_ctl(i64 %pPrivate, i32 %en, i32 %width) local_unnamed_addr {
dec_label_pc_2aa3f:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = call i64 @__decompiler_undefined_function_0()
  %2 = call i64 @__decompiler_undefined_function_0()
  %3 = call i64 @__decompiler_undefined_function_0()
  %4 = mul i64 %2, 184, !insn.addr !17745
  %5 = and i64 %4, 4294967288, !insn.addr !17745
  %6 = trunc i64 %3 to i8, !insn.addr !17746
  %7 = add i64 %0, 8, !insn.addr !17746
  %8 = add i64 %7, %5, !insn.addr !17746
  %9 = inttoptr i64 %8 to i8*, !insn.addr !17746
  store i8 %6, i8* %9, align 1, !insn.addr !17746
  %10 = call i64 @wReg8.135(i64 %1, i64* inttoptr (i64 54 to i64*), i64 120), !insn.addr !17747
  %11 = or i64 %5, 2, !insn.addr !17748
  %12 = add i64 %11, %0, !insn.addr !17748
  %13 = inttoptr i64 %12 to i8*, !insn.addr !17748
  store i8 0, i8* %13, align 1, !insn.addr !17748
  ret void, !insn.addr !17749
}

define i64 @nm131_notch_ctl.140(i64 %arg1, i64 %arg2, i64 %arg3) local_unnamed_addr {
dec_label_pc_2aa6f:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = call i64 @__decompiler_undefined_function_0()
  %2 = call i64 @__decompiler_undefined_function_0()
  %3 = call i64 @mcount(), !insn.addr !17750
  %4 = urem i64 %2, 256, !insn.addr !17751
  %5 = trunc i64 %arg2 to i32, !insn.addr !17752
  %6 = icmp eq i32 %5, 0, !insn.addr !17752
  %narrow6 = mul nuw nsw i64 %4, 184
  br i1 %6, label %dec_label_pc_2ab2a, label %dec_label_pc_2aa8b, !insn.addr !17753

dec_label_pc_2aa8b:                               ; preds = %dec_label_pc_2aa6f
  %7 = inttoptr i64 %narrow6 to i32*, !insn.addr !17754
  %8 = load i32, i32* %7, align 8, !insn.addr !17754
  %9 = icmp eq i32 %8, 13, !insn.addr !17755
  %10 = icmp eq i1 %9, false, !insn.addr !17756
  br i1 %10, label %dec_label_pc_2aae5, label %dec_label_pc_2aac7, !insn.addr !17756

dec_label_pc_2aac7:                               ; preds = %dec_label_pc_2aa8b
  %11 = zext i32 %8 to i128, !insn.addr !17757
  %12 = call i64 @nmi_debug.134(i64 %arg1, i64* bitcast (i8* @global_var_10 to i64*), i64 0, i128 %11, i64 %1, i64 %0), !insn.addr !17757
  ret i64 %12, !insn.addr !17758

dec_label_pc_2aae5:                               ; preds = %dec_label_pc_2aa8b
  %13 = trunc i64 %arg3 to i32, !insn.addr !17759
  %14 = and i32 %13, ptrtoint (i8** @global_var_7 to i32), !insn.addr !17759
  %15 = shl i32 %14, ptrtoint ([4 x i8]* @global_var_c to i32), !insn.addr !17760
  %16 = and i32 %8, -28675
  %17 = or i32 %16, %15, !insn.addr !17761
  %18 = zext i32 %17 to i64, !insn.addr !17761
  store i32 %17, i32* %7, align 8, !insn.addr !17762
  %19 = inttoptr i64 %18 to i64*, !insn.addr !17763
  %20 = call i64 @wReg32.436(i64 %arg1, i64 272, i64* %19), !insn.addr !17763
  %21 = zext i32 %16 to i128
  %22 = call i64 @nmi_debug.134(i64 %arg1, i64* bitcast (i8* @global_var_10 to i64*), i64 0, i128 %21, i64 %1, i64 %0), !insn.addr !17764
  ret i64 %22, !insn.addr !17765

dec_label_pc_2ab2a:                               ; preds = %dec_label_pc_2aa6f
  ret i64 %narrow6, !insn.addr !17766
}

define void @nm131_notch_spur(i64 %pPrivate) local_unnamed_addr {
dec_label_pc_2ab4b:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = call i64 @__decompiler_undefined_function_0()
  %2 = call i64 @__decompiler_undefined_function_0()
  %3 = call i64 @__decompiler_undefined_function_0()
  %4 = call i64 @__decompiler_undefined_function_0()
  %5 = call i64 @__decompiler_undefined_function_0()
  %6 = trunc i64 %3 to i32, !insn.addr !17767
  %7 = inttoptr i64 %5 to i32*, !insn.addr !17767
  store i32 %6, i32* %7, align 4, !insn.addr !17767
  %8 = inttoptr i64 %3 to i64*, !insn.addr !17768
  %9 = call i64 @wReg32.436(i64 %pPrivate, i64 272, i64* %8), !insn.addr !17768
  %10 = sext i64 %4 to i128, !insn.addr !17769
  %11 = call i64 @nmi_debug.134(i64 %2, i64* bitcast (i8* @global_var_10 to i64*), i64 0, i128 %10, i64 %1, i64 %0), !insn.addr !17769
  ret void, !insn.addr !17770
}

define i64 @nm131_notch_spur.141(i64 %arg1) local_unnamed_addr {
dec_label_pc_2ab7b:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = call i64 @mcount(), !insn.addr !17771
  %2 = urem i64 %0, 256, !insn.addr !17772
  %3 = mul nuw nsw i64 %2, 184, !insn.addr !17773
  %4 = inttoptr i64 %3 to i32*, !insn.addr !17774
  %5 = load i32, i32* %4, align 8, !insn.addr !17774
  switch i32 %5, label %dec_label_pc_2abbc [
    i32 6, label %dec_label_pc_2abc2
    i32 8, label %dec_label_pc_2abc2
    i32 12, label %dec_label_pc_2abc2
    i32 14, label %dec_label_pc_2abc2
    i32 15, label %dec_label_pc_2abc2
    i32 16, label %dec_label_pc_2abc2
  ]

dec_label_pc_2abbc:                               ; preds = %dec_label_pc_2ab7b
  %6 = icmp eq i32 %5, 13, !insn.addr !17775
  %7 = icmp eq i1 %6, false, !insn.addr !17776
  br i1 %7, label %dec_label_pc_2abd9, label %dec_label_pc_2abc2, !insn.addr !17776

dec_label_pc_2abc2:                               ; preds = %dec_label_pc_2ab7b, %dec_label_pc_2ab7b, %dec_label_pc_2ab7b, %dec_label_pc_2ab7b, %dec_label_pc_2ab7b, %dec_label_pc_2ab7b, %dec_label_pc_2abbc
  %8 = call i64 @nm131_notch_ctl.140(i64 %arg1, i64 0, i64 0), !insn.addr !17777
  ret i64 %8, !insn.addr !17778

dec_label_pc_2abd9:                               ; preds = %dec_label_pc_2abbc
  %9 = call i64 @nm131_notch_ctl.140(i64 %arg1, i64 0, i64 0), !insn.addr !17779
  ret i64 %9, !insn.addr !17780
}

define i32 @nm131_tune(i64 %pPrivate, i64 %tune) local_unnamed_addr {
dec_label_pc_2ac91:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = call i64 @__decompiler_undefined_function_0()
  %2 = call i64 @__decompiler_undefined_function_0()
  %3 = icmp eq i64 %1, ptrtoint (i32* @global_var_1 to i64), !insn.addr !17781
  br i1 %3, label %dec_label_pc_2ac97, label %dec_label_pc_2aca7, !insn.addr !17781

dec_label_pc_2ac97:                               ; preds = %dec_label_pc_2ac91
  %4 = add i64 %0, ptrtoint (i16** @global_var_e to i64), !insn.addr !17782
  %5 = inttoptr i64 %4 to i16*, !insn.addr !17782
  %6 = load i16, i16* %5, align 2, !insn.addr !17782
  %7 = zext i16 %6 to i32, !insn.addr !17783
  ret i32 %7, !insn.addr !17783

dec_label_pc_2aca7:                               ; preds = %dec_label_pc_2ac91
  %8 = trunc i64 %2 to i32
  %9 = or i32 %8, 193, !insn.addr !17784
  ret i32 %9, !insn.addr !17784
}

define i64 @nm131_tune.105(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_2acc1:
  %stack_var_-88 = alloca i64, align 8
  %0 = call i64 @mcount(), !insn.addr !17785
  %1 = add i64 %arg2, ptrtoint (i8* @global_var_10 to i64), !insn.addr !17786
  %2 = inttoptr i64 %1 to i32*, !insn.addr !17786
  %3 = load i32, i32* %2, align 4, !insn.addr !17786
  %4 = icmp ugt i32 %3, ptrtoint (i32* @global_var_1 to i32)
  br i1 %4, label %dec_label_pc_2adbb, label %dec_label_pc_2ad06, !insn.addr !17787

dec_label_pc_2ad06:                               ; preds = %dec_label_pc_2acc1
  %5 = add i64 %arg2, ptrtoint ([4 x i8]* @global_var_c to i64), !insn.addr !17788
  %6 = inttoptr i64 %5 to i32*, !insn.addr !17788
  %7 = load i32, i32* %6, align 4, !insn.addr !17788
  %8 = icmp eq i32 %7, ptrtoint ([3 x i8]* @global_var_d to i32), !insn.addr !17788
  %9 = icmp eq i1 %8, false, !insn.addr !17789
  br i1 %9, label %dec_label_pc_2ad1b, label %dec_label_pc_2ad0c, !insn.addr !17789

dec_label_pc_2ad0c:                               ; preds = %dec_label_pc_2ad06
  %10 = call i64 @nm131_tune_internal.139(i64 %arg1, i64 %arg2, i64* null), !insn.addr !17790
  ret i64 %10, !insn.addr !17791

dec_label_pc_2ad1b:                               ; preds = %dec_label_pc_2ad06
  %11 = add i64 %arg2, ptrtoint (i8** @global_var_15 to i64), !insn.addr !17792
  %12 = inttoptr i64 %11 to i8*, !insn.addr !17792
  %13 = load i8, i8* %12, align 1, !insn.addr !17792
  %14 = icmp eq i8 %13, 0, !insn.addr !17792
  %15 = icmp eq i1 %14, false, !insn.addr !17793
  br i1 %15, label %dec_label_pc_2ada7, label %dec_label_pc_2ad25, !insn.addr !17793

dec_label_pc_2ad25:                               ; preds = %dec_label_pc_2ad1b
  store i64 %arg2, i64* %stack_var_-88, align 8, !insn.addr !17794
  %16 = call i64 @nm131_scan.117(i64 %arg1, i64* nonnull %stack_var_-88), !insn.addr !17795
  %17 = call i16 @nm131_demod_get_snr(i64 %arg1), !insn.addr !17796
  %18 = sext i16 %17 to i32, !insn.addr !17797
  %19 = ashr i32 %18, ptrtoint (i8** @global_var_1f to i32), !insn.addr !17798
  %20 = xor i32 %19, %18, !insn.addr !17799
  %21 = sub nsw i32 %20, %19, !insn.addr !17800
  %22 = icmp slt i32 %21, 30001, !insn.addr !17801
  br i1 %22, label %dec_label_pc_2ad9d, label %dec_label_pc_2ad8b, !insn.addr !17801

dec_label_pc_2ad8b:                               ; preds = %dec_label_pc_2ad25
  %23 = trunc i64 %arg2 to i32
  %24 = add i32 %18, %23, !insn.addr !17802
  %25 = inttoptr i64 %arg2 to i32*, !insn.addr !17802
  store i32 %24, i32* %25, align 4, !insn.addr !17802
  %26 = call i64 @nm131_tune_internal.139(i64 %arg1, i64 %arg2, i64* null), !insn.addr !17803
  br label %dec_label_pc_2ad9d, !insn.addr !17803

dec_label_pc_2ad9d:                               ; preds = %dec_label_pc_2ad8b, %dec_label_pc_2ad25
  %27 = call i64 @nm131_notch_spur.141(i64 %arg1), !insn.addr !17804
  ret i64 %27, !insn.addr !17805

dec_label_pc_2ada7:                               ; preds = %dec_label_pc_2ad1b
  %28 = call i64 @nm131_tune_internal.139(i64 %arg1, i64 %arg2, i64* null), !insn.addr !17806
  %29 = call i64 @nm131_notch_spur.141(i64 %arg1), !insn.addr !17807
  ret i64 %29, !insn.addr !17808

dec_label_pc_2adbb:                               ; preds = %dec_label_pc_2acc1
  %30 = urem i64 %arg1, 256, !insn.addr !17809
  %narrow = mul nuw nsw i64 %30, 184
  ret i64 %narrow, !insn.addr !17810
}

define i32 @nm131_chip_init(i64 %pPrivate) local_unnamed_addr {
dec_label_pc_2add6:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = trunc i64 %0 to i32, !insn.addr !17811
  ret i32 %1, !insn.addr !17812
}

define i64 @nm131_chip_init.99(i64 %arg1) local_unnamed_addr {
dec_label_pc_2ae06:
  %rax.1.reg2mem = alloca i64, !insn.addr !17813
  %rbx.3.reg2mem = alloca i64, !insn.addr !17813
  %rbx.2.reg2mem = alloca i64, !insn.addr !17813
  %rbx.1.reg2mem = alloca i64, !insn.addr !17813
  %r13.0.reg2mem = alloca i64, !insn.addr !17813
  %rbx.0.reg2mem = alloca i64, !insn.addr !17813
  %rax.0.reg2mem = alloca i64, !insn.addr !17813
  %rdx.0.reg2mem = alloca i64, !insn.addr !17813
  %r14.0.reg2mem = alloca i64, !insn.addr !17813
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = call i64 @__decompiler_undefined_function_0()
  %rdi = alloca i64, align 8
  %2 = call i64 @__decompiler_undefined_function_0()
  %3 = call i64 @__decompiler_undefined_function_0()
  %4 = call i64 @mcount(), !insn.addr !17814
  %5 = urem i64 %2, 256, !insn.addr !17815
  %6 = call i64 @nm131_get_chipid.100(i64 %arg1), !insn.addr !17816
  %7 = mul nuw nsw i64 %5, 184, !insn.addr !17817
  %8 = trunc i64 %6 to i32, !insn.addr !17818
  %9 = inttoptr i64 %7 to i32*, !insn.addr !17818
  store i32 %8, i32* %9, align 8, !insn.addr !17818
  %10 = and i64 %6, 1048320, !insn.addr !17819
  switch i64 %10, label %dec_label_pc_2ae50 [
    i64 78080, label %dec_label_pc_2ae86
    i64 73728, label %dec_label_pc_2ae86
  ]

dec_label_pc_2ae50:                               ; preds = %dec_label_pc_2ae06
  %11 = and i64 %6, 16776960, !insn.addr !17820
  switch i64 %11, label %dec_label_pc_2ae63 [
    i64 77824, label %dec_label_pc_2ae86
    i64 8466432, label %dec_label_pc_2ae86
  ]

dec_label_pc_2ae63:                               ; preds = %dec_label_pc_2ae50
  %12 = sext i64 %3 to i128, !insn.addr !17821
  %13 = call i64 @nmi_debug.134(i64 %arg1, i64* bitcast (i32* @global_var_2 to i64*), i64 0, i128 %12, i64 %1, i64 %0), !insn.addr !17821
  store i64 4294967295, i64* %rax.1.reg2mem, !insn.addr !17822
  br label %dec_label_pc_2b261, !insn.addr !17822

dec_label_pc_2ae86:                               ; preds = %dec_label_pc_2ae50, %dec_label_pc_2ae50, %dec_label_pc_2ae06, %dec_label_pc_2ae06
  %14 = bitcast i64* %rdi to i8*
  %15 = call i64 @nm131_set_scan_level.352(i64 %arg1, i64* bitcast (i8** @global_var_7 to i64*)), !insn.addr !17823
  %16 = or i64 %7, 4, !insn.addr !17824
  %17 = inttoptr i64 %16 to i32*, !insn.addr !17824
  store i32 -1, i32* %17, align 4, !insn.addr !17824
  %18 = add nuw nsw i64 %7, 8, !insn.addr !17825
  %19 = inttoptr i64 %18 to i8*, !insn.addr !17825
  store i8 ptrtoint (i8* @global_var_f to i8), i8* %19, align 8, !insn.addr !17825
  %20 = inttoptr i64 %7 to i8*, !insn.addr !17826
  store i8 ptrtoint (i8* @global_var_f to i8), i8* %20, align 8, !insn.addr !17826
  %21 = add nuw nsw i64 %7, 9, !insn.addr !17827
  %22 = inttoptr i64 %21 to i8*, !insn.addr !17827
  store i8 ptrtoint (i8* @global_var_f to i8), i8* %22, align 1, !insn.addr !17827
  %23 = add nuw nsw i64 %7, 10, !insn.addr !17828
  %24 = inttoptr i64 %23 to i8*, !insn.addr !17828
  store i8 ptrtoint (i8* @global_var_8 to i8), i8* %24, align 2, !insn.addr !17828
  %25 = inttoptr i64 %18 to i32*, !insn.addr !17829
  store i32 -1, i32* %25, align 8, !insn.addr !17829
  %26 = add nuw nsw i64 %7, 12, !insn.addr !17830
  %27 = inttoptr i64 %26 to i32*, !insn.addr !17830
  store i32 -1, i32* %27, align 4, !insn.addr !17830
  store i32 17858, i32* %9, align 8, !insn.addr !17831
  %28 = add nuw nsw i64 %7, 11, !insn.addr !17832
  %29 = inttoptr i64 %28 to i8*, !insn.addr !17832
  store i8 -121, i8* %29, align 1, !insn.addr !17832
  %30 = load i8, i8* %14, align 8, !insn.addr !17833
  %31 = zext i8 %30 to i64, !insn.addr !17834
  %32 = mul nuw nsw i64 %31, 184, !insn.addr !17834
  %33 = inttoptr i64 %32 to i32*, !insn.addr !17835
  %34 = load i32, i32* %33, align 8, !insn.addr !17835
  %35 = mul i32 %34, ptrtoint ([3 x i8]* @global_var_3e8 to i32), !insn.addr !17835
  store i32 %35, i32* %33, align 8, !insn.addr !17836
  %36 = load i8, i8* %14, align 8, !insn.addr !17837
  %37 = zext i8 %36 to i64, !insn.addr !17838
  %38 = mul nuw nsw i64 %37, 184, !insn.addr !17838
  %39 = inttoptr i64 %38 to i32*, !insn.addr !17839
  %40 = load i32, i32* %39, align 8, !insn.addr !17839
  %41 = icmp eq i32 %40, 0, !insn.addr !17839
  br i1 %41, label %dec_label_pc_2b078, label %dec_label_pc_2af28, !insn.addr !17840

dec_label_pc_2af28:                               ; preds = %dec_label_pc_2ae86
  %42 = inttoptr i64 %38 to i64*, !insn.addr !17841
  %43 = load i64, i64* %42, align 8, !insn.addr !17841
  %44 = icmp slt i32 %40, 61, !insn.addr !17842
  br i1 %44, label %dec_label_pc_2af7a, label %dec_label_pc_2af43, !insn.addr !17842

dec_label_pc_2af43:                               ; preds = %dec_label_pc_2af28
  %45 = call i64 @nmi_get_tick.88(i64 %arg1), !insn.addr !17843
  %46 = and i64 %45, 4294967295, !insn.addr !17844
  %47 = zext i64 %46 to i128
  %48 = call i64 @nmi_debug.134(i64 %arg1, i64* bitcast (i8* @global_var_10 to i64*), i64 0, i128 %47, i64 %1, i64 %0), !insn.addr !17845
  store i64 60, i64* %r14.0.reg2mem, !insn.addr !17846
  br label %dec_label_pc_2af6c, !insn.addr !17846

dec_label_pc_2af6c:                               ; preds = %dec_label_pc_2af7a, %dec_label_pc_2af43
  %r14.0.reload = load i64, i64* %r14.0.reg2mem
  store i64 %43, i64* %rdx.0.reg2mem, !insn.addr !17847
  store i64 0, i64* %rax.0.reg2mem, !insn.addr !17847
  br label %dec_label_pc_2af84, !insn.addr !17847

dec_label_pc_2af7a:                               ; preds = %dec_label_pc_2af28
  %49 = zext i32 %40 to i64, !insn.addr !17848
  %50 = icmp slt i32 %40, 0, !insn.addr !17849
  %51 = icmp eq i1 %50, false, !insn.addr !17850
  store i64 %49, i64* %r14.0.reg2mem, !insn.addr !17850
  br i1 %51, label %dec_label_pc_2af6c, label %dec_label_pc_2b270, !insn.addr !17850

dec_label_pc_2af84:                               ; preds = %dec_label_pc_2af84, %dec_label_pc_2af6c
  %rax.0.reload = load i64, i64* %rax.0.reg2mem
  %rdx.0.reload = load i64, i64* %rdx.0.reg2mem
  %52 = trunc i64 %rax.0.reload to i8, !insn.addr !17851
  %53 = inttoptr i64 %rdx.0.reload to i8*, !insn.addr !17851
  store i8 %52, i8* %53, align 1, !insn.addr !17851
  %54 = add nuw nsw i64 %rax.0.reload, zext (i32 ptrtoint (i32* @global_var_1 to i32) to i64), !insn.addr !17852
  %55 = and i64 %54, 4294967295, !insn.addr !17852
  %56 = add i64 %rdx.0.reload, 1, !insn.addr !17853
  %57 = icmp ult i64 %55, %r14.0.reload, !insn.addr !17854
  store i64 %56, i64* %rdx.0.reg2mem, !insn.addr !17854
  store i64 %55, i64* %rax.0.reg2mem, !insn.addr !17854
  br i1 %57, label %dec_label_pc_2af84, label %dec_label_pc_2af92, !insn.addr !17854

dec_label_pc_2af92:                               ; preds = %dec_label_pc_2af84
  %58 = call i64 @nmi_get_tick.88(i64 %arg1), !insn.addr !17855
  %59 = and i64 %58, 4294967295, !insn.addr !17856
  %60 = zext i64 %59 to i128
  %61 = call i64 @nmi_debug.134(i64 %arg1, i64* bitcast (i8* @global_var_10 to i64*), i64 0, i128 %60, i64 %1, i64 %0), !insn.addr !17857
  %62 = call i64 @wRegBurst.137(i64 %arg1, i64 0, i64 %43, i64 %r14.0.reload), !insn.addr !17858
  %63 = call i64 @nmi_get_tick.88(i64 %arg1), !insn.addr !17859
  %64 = and i64 %63, 4294967295, !insn.addr !17860
  %65 = zext i64 %64 to i128
  %66 = call i64 @nmi_debug.134(i64 %arg1, i64* bitcast (i8* @global_var_10 to i64*), i64 0, i128 %65, i64 %1, i64 %0), !insn.addr !17861
  store i64 0, i64* %rbx.0.reg2mem, !insn.addr !17862
  store i64 %43, i64* %r13.0.reg2mem, !insn.addr !17862
  br label %dec_label_pc_2aff1, !insn.addr !17862

dec_label_pc_2aff1:                               ; preds = %dec_label_pc_2b007, %dec_label_pc_2af92
  %r13.0.reload = load i64, i64* %r13.0.reg2mem
  %rbx.0.reload = load i64, i64* %rbx.0.reg2mem
  %67 = urem i64 %rbx.0.reload, 256, !insn.addr !17863
  %68 = call i64 @rReg8.103(i64 %arg1, i64 %67), !insn.addr !17864
  %69 = trunc i64 %68 to i8, !insn.addr !17865
  %70 = inttoptr i64 %r13.0.reload to i8*, !insn.addr !17865
  store i8 %69, i8* %70, align 1, !insn.addr !17865
  %71 = trunc i64 %68 to i32, !insn.addr !17866
  %72 = trunc i64 %rbx.0.reload to i32, !insn.addr !17867
  %73 = urem i32 %71, 256, !insn.addr !17867
  %74 = icmp eq i32 %73, %72, !insn.addr !17867
  %75 = icmp eq i1 %74, false, !insn.addr !17868
  br i1 %75, label %dec_label_pc_2b015, label %dec_label_pc_2b007, !insn.addr !17868

dec_label_pc_2b007:                               ; preds = %dec_label_pc_2aff1
  %76 = add nuw nsw i64 %rbx.0.reload, zext (i32 ptrtoint (i32* @global_var_1 to i32) to i64), !insn.addr !17869
  %77 = and i64 %76, 4294967295, !insn.addr !17869
  %78 = add i64 %r13.0.reload, 1, !insn.addr !17870
  %79 = icmp ult i64 %77, %r14.0.reload, !insn.addr !17871
  store i64 %77, i64* %rbx.0.reg2mem, !insn.addr !17871
  store i64 %78, i64* %r13.0.reg2mem, !insn.addr !17871
  br i1 %79, label %dec_label_pc_2aff1, label %dec_label_pc_2b055, !insn.addr !17871

dec_label_pc_2b015:                               ; preds = %dec_label_pc_2aff1
  %80 = icmp ugt i64 %r14.0.reload, %rbx.0.reload, !insn.addr !17872
  br i1 %80, label %dec_label_pc_2b01a, label %dec_label_pc_2b055, !insn.addr !17872

dec_label_pc_2b01a:                               ; preds = %dec_label_pc_2b015
  %81 = call i64 @nmi_get_tick.88(i64 %arg1), !insn.addr !17873
  %82 = and i64 %81, 4294967295, !insn.addr !17874
  %83 = zext i64 %82 to i128
  %84 = call i64 @nmi_debug.134(i64 %arg1, i64* bitcast (i8* @global_var_10 to i64*), i64 0, i128 %83, i64 %rbx.0.reload, i64 %rbx.0.reload), !insn.addr !17875
  br label %dec_label_pc_2b078, !insn.addr !17876

dec_label_pc_2b055:                               ; preds = %dec_label_pc_2b007, %dec_label_pc_2b015
  %85 = call i64 @nmi_get_tick.88(i64 %arg1), !insn.addr !17877
  %86 = and i64 %85, 4294967295, !insn.addr !17878
  %87 = zext i64 %86 to i128
  %88 = call i64 @nmi_debug.134(i64 %arg1, i64* bitcast (i8* @global_var_10 to i64*), i64 0, i128 %87, i64 %1, i64 %0), !insn.addr !17879
  br label %dec_label_pc_2b078, !insn.addr !17879

dec_label_pc_2b078:                               ; preds = %dec_label_pc_2b01a, %dec_label_pc_2ae86, %dec_label_pc_2b055
  %89 = load i8, i8* %14, align 8, !insn.addr !17880
  %90 = zext i8 %89 to i64
  %91 = mul nuw nsw i64 %90, 184
  %92 = inttoptr i64 %91 to i8*, !insn.addr !17881
  %93 = load i8, i8* %92, align 8, !insn.addr !17881
  %94 = icmp eq i8 %93, 0, !insn.addr !17881
  %95 = icmp eq i1 %94, false, !insn.addr !17882
  store i64 0, i64* %rbx.1.reg2mem, !insn.addr !17882
  store i64 0, i64* %rax.1.reg2mem, !insn.addr !17882
  br i1 %95, label %dec_label_pc_2b261, label %dec_label_pc_2b0a9, !insn.addr !17882

dec_label_pc_2b0a9:                               ; preds = %dec_label_pc_2b078, %dec_label_pc_2b0a9
  %rbx.1.reload = load i64, i64* %rbx.1.reg2mem
  %96 = inttoptr i64 %rbx.1.reload to i8*, !insn.addr !17883
  %97 = load i8, i8* %96, align 4, !insn.addr !17883
  %98 = zext i8 %97 to i64, !insn.addr !17883
  %99 = mul i64 %rbx.1.reload, ptrtoint (i32* @global_var_1 to i64), !insn.addr !17884
  %100 = inttoptr i64 %99 to i8*, !insn.addr !17884
  %101 = load i8, i8* %100, align 16, !insn.addr !17884
  %102 = zext i8 %101 to i64, !insn.addr !17884
  %103 = inttoptr i64 %102 to i64*, !insn.addr !17885
  %104 = call i64 @wReg8.135(i64 %arg1, i64* %103, i64 %98), !insn.addr !17885
  %105 = add i64 %rbx.1.reload, ptrtoint (i32* @global_var_2 to i64), !insn.addr !17886
  %106 = icmp eq i64 %rbx.1.reload, sub (i64 0, i64 add (i64 ptrtoint (i32* @global_var_2 to i64), i64 -60)), !insn.addr !17887
  %107 = icmp eq i1 %106, false, !insn.addr !17888
  store i64 %105, i64* %rbx.1.reg2mem, !insn.addr !17888
  br i1 %107, label %dec_label_pc_2b0a9, label %dec_label_pc_2b0c5, !insn.addr !17888

dec_label_pc_2b0c5:                               ; preds = %dec_label_pc_2b0a9
  %108 = call i64 @rReg8.103(i64 %arg1, i64 54), !insn.addr !17889
  %109 = or i64 %108, 128, !insn.addr !17890
  %110 = urem i64 %108, 128, !insn.addr !17891
  %111 = inttoptr i64 %91 to i32*, !insn.addr !17892
  %112 = load i32, i32* %111, align 8, !insn.addr !17892
  %113 = icmp eq i32 %112, 0, !insn.addr !17892
  %114 = select i1 %113, i64 %110, i64 %109, !insn.addr !17893
  %115 = urem i64 %114, 256, !insn.addr !17894
  %116 = call i64 @wReg8.135(i64 %arg1, i64* inttoptr (i64 54 to i64*), i64 %115), !insn.addr !17895
  %117 = call i64 @wReg32.436(i64 %arg1, i64 356, i64* inttoptr (i64 2048 to i64*)), !insn.addr !17896
  %118 = call i64 @wReg32.436(i64 %arg1, i64 448, i64* inttoptr (i64 764156359 to i64*)), !insn.addr !17897
  %119 = load i32, i32* %9, align 8, !insn.addr !17898
  %120 = and i32 %119, 1048320, !insn.addr !17899
  %121 = icmp eq i32 %120, 73728, !insn.addr !17900
  %122 = icmp eq i1 %121, false, !insn.addr !17901
  br i1 %122, label %dec_label_pc_2b17b, label %dec_label_pc_2b14a, !insn.addr !17901

dec_label_pc_2b14a:                               ; preds = %dec_label_pc_2b0c5
  %123 = and i64 %105, -256, !insn.addr !17902
  store i64 %123, i64* %rbx.2.reg2mem, !insn.addr !17903
  br label %dec_label_pc_2b15a, !insn.addr !17903

dec_label_pc_2b15a:                               ; preds = %dec_label_pc_2b15a, %dec_label_pc_2b14a
  %rbx.2.reload = load i64, i64* %rbx.2.reg2mem
  %124 = inttoptr i64 %rbx.2.reload to i8*, !insn.addr !17904
  %125 = load i8, i8* %124, align 1, !insn.addr !17904
  %126 = zext i8 %125 to i64, !insn.addr !17904
  %127 = mul i64 %rbx.2.reload, ptrtoint (i32* @global_var_1 to i64), !insn.addr !17905
  %128 = inttoptr i64 %127 to i8*, !insn.addr !17905
  %129 = load i8, i8* %128, align 4, !insn.addr !17905
  %130 = zext i8 %129 to i64, !insn.addr !17905
  %131 = inttoptr i64 %130 to i64*, !insn.addr !17906
  %132 = call i64 @wReg8.135(i64 %arg1, i64* %131, i64 %126), !insn.addr !17906
  %133 = add i64 %rbx.2.reload, ptrtoint (i32* @global_var_2 to i64), !insn.addr !17907
  %134 = icmp eq i64 %133, ptrtoint (i32** @global_var_12 to i64), !insn.addr !17908
  %135 = icmp eq i1 %134, false, !insn.addr !17909
  store i64 %133, i64* %rbx.2.reg2mem, !insn.addr !17909
  br i1 %135, label %dec_label_pc_2b15a, label %dec_label_pc_2b20f, !insn.addr !17909

dec_label_pc_2b17b:                               ; preds = %dec_label_pc_2b0c5
  %136 = and i32 %119, 16776960
  %137 = icmp eq i32 %136, 77824, !insn.addr !17910
  %138 = icmp eq i1 %137, false, !insn.addr !17911
  store i64 0, i64* %rbx.3.reg2mem, !insn.addr !17911
  br i1 %138, label %dec_label_pc_2b1b8, label %dec_label_pc_2b19a, !insn.addr !17911

dec_label_pc_2b19a:                               ; preds = %dec_label_pc_2b17b, %dec_label_pc_2b19a
  %rbx.3.reload = load i64, i64* %rbx.3.reg2mem
  %139 = inttoptr i64 %rbx.3.reload to i8*, !insn.addr !17912
  %140 = load i8, i8* %139, align 4, !insn.addr !17912
  %141 = zext i8 %140 to i64, !insn.addr !17912
  %142 = mul i64 %rbx.3.reload, ptrtoint (i32* @global_var_1 to i64), !insn.addr !17913
  %143 = inttoptr i64 %142 to i8*, !insn.addr !17913
  %144 = load i8, i8* %143, align 16, !insn.addr !17913
  %145 = zext i8 %144 to i64, !insn.addr !17913
  %146 = inttoptr i64 %145 to i64*, !insn.addr !17914
  %147 = call i64 @wReg8.135(i64 %arg1, i64* %146, i64 %141), !insn.addr !17914
  %148 = add i64 %rbx.3.reload, ptrtoint (i32* @global_var_2 to i64), !insn.addr !17915
  %149 = icmp eq i64 %148, ptrtoint (i16** @global_var_e to i64), !insn.addr !17916
  %150 = icmp eq i1 %149, false, !insn.addr !17917
  store i64 %148, i64* %rbx.3.reg2mem, !insn.addr !17917
  br i1 %150, label %dec_label_pc_2b19a, label %dec_label_pc_2b20f, !insn.addr !17917

dec_label_pc_2b1b8:                               ; preds = %dec_label_pc_2b17b
  %151 = icmp eq i32 %136, 8466432, !insn.addr !17918
  %152 = icmp eq i1 %151, false, !insn.addr !17919
  br i1 %152, label %dec_label_pc_2b20f, label %dec_label_pc_2b1bf, !insn.addr !17919

dec_label_pc_2b1bf:                               ; preds = %dec_label_pc_2b1b8
  %153 = call i64 @wReg8.135(i64 %arg1, i64* inttoptr (i64 40 to i64*), i64 0), !insn.addr !17920
  %154 = call i64 @wReg8.135(i64 %arg1, i64* inttoptr (i64 46 to i64*), i64 86), !insn.addr !17921
  %155 = call i64 @wReg8.135(i64 %arg1, i64* inttoptr (i64 52 to i64*), i64 120), !insn.addr !17922
  br label %dec_label_pc_2b20f, !insn.addr !17923

dec_label_pc_2b20f:                               ; preds = %dec_label_pc_2b15a, %dec_label_pc_2b19a, %dec_label_pc_2b1b8, %dec_label_pc_2b1bf
  %156 = or i64 %7, 2, !insn.addr !17924
  %157 = inttoptr i64 %156 to i8*, !insn.addr !17924
  store i8 0, i8* %157, align 2, !insn.addr !17924
  %158 = call i64 @rReg8.103(i64 %arg1, i64 0), !insn.addr !17925
  %159 = trunc i64 %158 to i8, !insn.addr !17926
  %160 = or i64 %7, 3, !insn.addr !17926
  %161 = inttoptr i64 %160 to i8*, !insn.addr !17926
  store i8 %159, i8* %161, align 1, !insn.addr !17926
  %162 = call i64 @rReg8.103(i64 %arg1, i64 52), !insn.addr !17927
  %163 = trunc i64 %162 to i8, !insn.addr !17928
  %164 = inttoptr i64 %16 to i8*, !insn.addr !17928
  store i8 %163, i8* %164, align 4, !insn.addr !17928
  %165 = call i64 @rReg8.103(i64 %arg1, i64 53), !insn.addr !17929
  %166 = trunc i64 %165 to i8, !insn.addr !17930
  %167 = or i64 %7, 5, !insn.addr !17930
  %168 = inttoptr i64 %167 to i8*, !insn.addr !17930
  store i8 %166, i8* %168, align 1, !insn.addr !17930
  store i64 0, i64* %rax.1.reg2mem, !insn.addr !17931
  br label %dec_label_pc_2b261, !insn.addr !17931

dec_label_pc_2b261:                               ; preds = %dec_label_pc_2ae63, %dec_label_pc_2b20f, %dec_label_pc_2b078
  %rax.1.reload = load i64, i64* %rax.1.reg2mem
  ret i64 %rax.1.reload, !insn.addr !17932

dec_label_pc_2b270:                               ; preds = %dec_label_pc_2af7a
  %169 = call i64 @nmi_get_tick.88(i64 %arg1), !insn.addr !17933
  %170 = and i64 %169, 4294967295, !insn.addr !17934
  %171 = zext i64 %170 to i128
  %172 = call i64 @nmi_debug.134(i64 %arg1, i64* bitcast (i8* @global_var_10 to i64*), i64 0, i128 %171, i64 %1, i64 %0), !insn.addr !17935
  %173 = call i64 @wRegBurst.137(i64 %arg1, i64 0, i64 %43, i64 %49), !insn.addr !17936
  %174 = call i64 @nmi_get_tick.88(i64 %arg1), !insn.addr !17937
  ret i64 %174, !insn.addr !17938
}

define i8 @I2C_PortingLayer_Write(i8* %pDeviceExtension, i8 %I2CDeviceAddress, i8* %pWriteBuffer, i16 %WriteBufferLength) local_unnamed_addr {
dec_label_pc_2b2bc:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = call i64 @__decompiler_undefined_function_0()
  %2 = sext i16 %WriteBufferLength to i64
  %3 = ptrtoint i8* %pWriteBuffer to i64
  %4 = sext i8 %I2CDeviceAddress to i64
  %5 = ptrtoint i8* %pDeviceExtension to i64
  %6 = mul i64 %2, ptrtoint (i16* @global_var_4 to i64), !insn.addr !17939
  %7 = add nsw i64 %2, -25, !insn.addr !17939
  %8 = add i64 %7, %6, !insn.addr !17939
  %9 = inttoptr i64 %8 to i8*, !insn.addr !17939
  %10 = load i8, i8* %9, align 1, !insn.addr !17939
  %11 = trunc i16 %WriteBufferLength to i8, !insn.addr !17939
  %12 = add i8 %10, %11, !insn.addr !17939
  store i8 %12, i8* %9, align 1, !insn.addr !17939
  %13 = inttoptr i64 %4 to i64*, !insn.addr !17940
  %14 = sext i16 %WriteBufferLength to i128, !insn.addr !17940
  %15 = call i64 @nmi_debug.134(i64 %5, i64* %13, i64 %3, i128 %14, i64 %1, i64 %0), !insn.addr !17940
  %16 = trunc i64 %15 to i8, !insn.addr !17941
  ret i8 %16, !insn.addr !17941
}

define i8 @I2C_PortingLayer_Read(i8* %pDeviceExtension, i8 %I2CDeviceAddress, i8* %pWriteBuffer, i16 %WriteBufferLength, i8* %pReadBuffer, i16 %ReadBufferLength) local_unnamed_addr {
dec_label_pc_2b2e2:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = trunc i64 %0 to i8, !insn.addr !17942
  ret i8 %1, !insn.addr !17942
}

define i64 @function_2b2e5() local_unnamed_addr {
dec_label_pc_2b2e5:
  %0 = call i64 @__decompiler_undefined_function_0()
  ret i64 %0, !insn.addr !17943
}

define i64 @I2C_PortingLayer_Write.296(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4) local_unnamed_addr {
dec_label_pc_2b2ec:
  %0 = call i64 @mcount(), !insn.addr !17944
  %1 = urem i64 %arg2, 256, !insn.addr !17945
  %2 = call i64 @TLIB_I2C_Write_Middle.204(i64 %arg1, i64 %1, i64 0), !insn.addr !17946
  ret i64 %2, !insn.addr !17947
}

define i64 @I2C_PortingLayer_Read.494(i64 %arg1, i64 %arg2, i8* %arg3, i64* %arg4, i8* %arg5, i64* %arg6) local_unnamed_addr {
dec_label_pc_2b312:
  %0 = call i64 @mcount(), !insn.addr !17948
  %1 = urem i64 %arg2, 256, !insn.addr !17949
  %2 = call i64 @TLIB_I2C_Write_Middle.204(i64 %arg1, i64 %1, i64 0), !insn.addr !17950
  ret i64 %2, !insn.addr !17951
}

define void @DriverDebugMessage(i8* %Msg) local_unnamed_addr {
dec_label_pc_2b364:
  ret void, !insn.addr !17952
}

define void @DriverDebugPrint(i8* %format, ...) local_unnamed_addr {
dec_label_pc_2b36f:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = call i64 @__decompiler_undefined_function_0()
  %2 = call i64 @__decompiler_undefined_function_0()
  %3 = call i64 @__decompiler_undefined_function_0()
  %4 = call i64 @__decompiler_undefined_function_0()
  %5 = ptrtoint i8* %format to i64
  %6 = call i64 @TLIB_I2C_Read_Middle.272(i64 %5, i64 %2, i64 %3, i64 %4, i64 %1, i64 %0), !insn.addr !17953
  ret void, !insn.addr !17953
}

define i64 @function_2b378() local_unnamed_addr {
dec_label_pc_2b378:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = call i64 @__decompiler_undefined_function_0()
  %2 = and i64 %0, zext (i32 ptrtoint (i32* @global_var_1 to i32) to i64)
  %3 = and i64 %2, %1, !insn.addr !17954
  ret i64 %3, !insn.addr !17955
}

define i64 @DriverDebugMessage.510(i64 %arg1) local_unnamed_addr {
dec_label_pc_2b394:
  %0 = call i64 @mcount(), !insn.addr !17956
  ret i64 %0, !insn.addr !17957
}

define i64 @DriverDebugPrint.467(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_2b39f:
  %0 = call i64 @mcount(), !insn.addr !17958
  ret i64 %0, !insn.addr !17959
}

define i64 @asv5220_fini.4() local_unnamed_addr {
dec_label_pc_2b3ac:
  %0 = call i64 @mcount(), !insn.addr !17960
  %1 = call i64 @pci_unregister_driver(i64 0), !insn.addr !17961
  %2 = load i64, i64* @global_var_36f40, align 8, !insn.addr !17962
  %3 = call i64 @class_destroy(i64 %2), !insn.addr !17963
  ret i64 %3, !insn.addr !17964
}

define i64 @asv5220_finidev(i64 %arg1) local_unnamed_addr {
dec_label_pc_2b3cf:
  %r13.0.reg2mem = alloca i32, !insn.addr !17965
  %r12.0.reg2mem = alloca i64, !insn.addr !17965
  %0 = call i64 @mcount(), !insn.addr !17966
  %1 = add i64 %arg1, 144, !insn.addr !17967
  %2 = call i64 @dev_get_drvdata(i64 %1), !insn.addr !17968
  %3 = add i64 %2, 1304, !insn.addr !17969
  %4 = inttoptr i64 %3 to i64*, !insn.addr !17969
  %5 = load i64, i64* %4, align 8, !insn.addr !17969
  %6 = call i64 @DTV_PollingThreadClose.532(i64 %5), !insn.addr !17970
  %7 = load i64, i64* %4, align 8, !insn.addr !17971
  %8 = call i64 @ASV5220_BcasThreadClose.346(i64 %7), !insn.addr !17972
  %9 = load i64, i64* %4, align 8, !insn.addr !17973
  %10 = call i64 @DTV_UnInit.331(i64 %9), !insn.addr !17974
  %11 = add i64 %2, 1296, !insn.addr !17975
  %12 = inttoptr i64 %11 to i64*, !insn.addr !17975
  %13 = load i64, i64* %12, align 8, !insn.addr !17975
  %14 = call i64 @DTV_PollingThreadClose.532(i64 %13), !insn.addr !17976
  %15 = load i64, i64* %12, align 8, !insn.addr !17977
  %16 = call i64 @ASV5220_BcasThreadClose.346(i64 %15), !insn.addr !17978
  %17 = load i64, i64* %12, align 8, !insn.addr !17979
  %18 = call i64 @DTV_UnInit.331(i64 %17), !insn.addr !17980
  %19 = add i64 %2, 1288, !insn.addr !17981
  %20 = inttoptr i64 %19 to i64*, !insn.addr !17981
  %21 = load i64, i64* %20, align 8, !insn.addr !17981
  %22 = call i64 @DTV_PollingThreadClose.532(i64 %21), !insn.addr !17982
  %23 = load i64, i64* %20, align 8, !insn.addr !17983
  %24 = call i64 @ASV5220_BcasThreadClose.346(i64 %23), !insn.addr !17984
  %25 = load i64, i64* %20, align 8, !insn.addr !17985
  %26 = call i64 @DTV_UnInit.331(i64 %25), !insn.addr !17986
  %27 = add i64 %2, 1280, !insn.addr !17987
  %28 = inttoptr i64 %27 to i64*, !insn.addr !17987
  %29 = load i64, i64* %28, align 8, !insn.addr !17987
  %30 = call i64 @DTV_PollingThreadClose.532(i64 %29), !insn.addr !17988
  %31 = load i64, i64* %28, align 8, !insn.addr !17989
  %32 = call i64 @ASV5220_BcasThreadClose.346(i64 %31), !insn.addr !17990
  %33 = load i64, i64* %28, align 8, !insn.addr !17991
  %34 = call i64 @DTV_UnInit.331(i64 %33), !insn.addr !17992
  %35 = add i64 %2, 1272, !insn.addr !17993
  %36 = inttoptr i64 %35 to i64*, !insn.addr !17993
  %37 = load i64, i64* %36, align 8, !insn.addr !17993
  %38 = call i64 @DTV_PollingThreadClose.532(i64 %37), !insn.addr !17994
  %39 = load i64, i64* %36, align 8, !insn.addr !17995
  %40 = call i64 @ASV5220_BcasThreadClose.346(i64 %39), !insn.addr !17996
  %41 = load i64, i64* %36, align 8, !insn.addr !17997
  %42 = call i64 @DTV_UnInit.331(i64 %41), !insn.addr !17998
  %43 = add i64 %2, ptrtoint (i64* @global_var_4f0 to i64), !insn.addr !17999
  %44 = inttoptr i64 %43 to i64*, !insn.addr !17999
  %45 = load i64, i64* %44, align 8, !insn.addr !17999
  %46 = call i64 @DTV_PollingThreadClose.532(i64 %45), !insn.addr !18000
  %47 = load i64, i64* %44, align 8, !insn.addr !18001
  %48 = call i64 @ASV5220_BcasThreadClose.346(i64 %47), !insn.addr !18002
  %49 = load i64, i64* %44, align 8, !insn.addr !18003
  %50 = call i64 @DTV_UnInit.331(i64 %49), !insn.addr !18004
  %51 = add i64 %2, 1256, !insn.addr !18005
  %52 = inttoptr i64 %51 to i64*, !insn.addr !18005
  %53 = load i64, i64* %52, align 8, !insn.addr !18005
  %54 = call i64 @DTV_PollingThreadClose.532(i64 %53), !insn.addr !18006
  %55 = load i64, i64* %52, align 8, !insn.addr !18007
  %56 = call i64 @ASV5220_BcasThreadClose.346(i64 %55), !insn.addr !18008
  %57 = load i64, i64* %52, align 8, !insn.addr !18009
  %58 = call i64 @DTV_UnInit.331(i64 %57), !insn.addr !18010
  %59 = add i64 %2, ptrtoint (i64* @global_var_4e0 to i64), !insn.addr !18011
  %60 = inttoptr i64 %59 to i64*, !insn.addr !18011
  %61 = load i64, i64* %60, align 8, !insn.addr !18011
  %62 = call i64 @DTV_PollingThreadClose.532(i64 %61), !insn.addr !18012
  %63 = load i64, i64* %60, align 8, !insn.addr !18013
  %64 = call i64 @ASV5220_BcasThreadClose.346(i64 %63), !insn.addr !18014
  %65 = load i64, i64* %60, align 8, !insn.addr !18015
  %66 = call i64 @DTV_UnInit.331(i64 %65), !insn.addr !18016
  %67 = add i64 %2, 21464, !insn.addr !18017
  %68 = inttoptr i64 %67 to i8*, !insn.addr !18017
  store i8 ptrtoint (i32* @global_var_1 to i8), i8* %68, align 1, !insn.addr !18017
  %69 = add i64 %2, 22520, !insn.addr !18018
  %70 = inttoptr i64 %69 to i64*, !insn.addr !18018
  %71 = load i64, i64* %70, align 8, !insn.addr !18018
  %72 = add i64 %2, 25384, !insn.addr !18019
  %73 = inttoptr i64 %72 to i32*, !insn.addr !18019
  %74 = load i32, i32* %73, align 4, !insn.addr !18019
  %75 = sext i32 %74 to i64, !insn.addr !18019
  %76 = mul i64 %75, 8, !insn.addr !18020
  %77 = inttoptr i64 %76 to i64*, !insn.addr !18020
  store i64 0, i64* %77, align 8, !insn.addr !18020
  %78 = add i64 %2, 25392, !insn.addr !18021
  %79 = add i64 %2, 25376
  %80 = inttoptr i64 %79 to i32*
  store i64 0, i64* %r12.0.reg2mem, !insn.addr !18022
  store i32 ptrtoint (i8* @global_var_8 to i32), i32* %r13.0.reg2mem, !insn.addr !18022
  br label %dec_label_pc_2b54b, !insn.addr !18022

dec_label_pc_2b54b:                               ; preds = %dec_label_pc_2b54b, %dec_label_pc_2b3cf
  %r13.0.reload = load i32, i32* %r13.0.reg2mem
  %r12.0.reload = load i64, i64* %r12.0.reg2mem
  %sext = mul i64 %r12.0.reload, 4294967296
  %81 = sdiv i64 %sext, 4294967296, !insn.addr !18023
  %narrow = mul nsw i64 %81, 104
  %82 = add i64 %78, %narrow, !insn.addr !18021
  %83 = call i64 @cdev_del(i64 %82), !insn.addr !18024
  %84 = load i32, i32* %80, align 4, !insn.addr !18025
  %85 = urem i32 %84, 1048576, !insn.addr !18026
  %86 = trunc i64 %r12.0.reload to i32
  %87 = add i32 %85, %86, !insn.addr !18027
  %88 = and i32 %84, -1048576, !insn.addr !18028
  %89 = or i32 %87, %88, !insn.addr !18029
  %90 = load i64, i64* @global_var_36f40, align 8, !insn.addr !18030
  %91 = call i64 @device_destroy(i64 %90, i32 %89), !insn.addr !18031
  %92 = add nuw nsw i64 %r12.0.reload, zext (i32 ptrtoint (i32* @global_var_1 to i32) to i64), !insn.addr !18032
  %93 = and i64 %92, 4294967295, !insn.addr !18032
  %94 = sub i32 %r13.0.reload, ptrtoint (i32* @global_var_1 to i32), !insn.addr !18033
  %95 = icmp eq i32 %94, 0, !insn.addr !18033
  %96 = icmp eq i1 %95, false, !insn.addr !18034
  store i64 %93, i64* %r12.0.reg2mem, !insn.addr !18034
  store i32 %94, i32* %r13.0.reg2mem, !insn.addr !18034
  br i1 %96, label %dec_label_pc_2b54b, label %dec_label_pc_2b58e, !insn.addr !18034

dec_label_pc_2b58e:                               ; preds = %dec_label_pc_2b54b
  %97 = load i32, i32* %80, align 4, !insn.addr !18035
  %98 = load i32, i32* bitcast (i64** @global_var_31ba0 to i32*), align 8, !insn.addr !18036
  %99 = call i64 @unregister_chrdev_region(i32 %97, i32 %98), !insn.addr !18037
  %100 = call i64 @FUSBDTV_Stop.553(i64 %2), !insn.addr !18038
  %101 = call i64 @FUSBDTV_Remove.405(i64 %2), !insn.addr !18039
  %102 = call i64 @pci_iounmap(i64 %arg1, i64 %71), !insn.addr !18040
  %103 = call i64 @pci_release_regions(i64 %arg1), !insn.addr !18041
  %104 = call i64 @dev_set_drvdata(i64 %1, i64 0), !insn.addr !18042
  %105 = call i64 @pci_disable_device(i64 %arg1), !insn.addr !18043
  ret i64 %105, !insn.addr !18044
}

define i64 @asv5220_initdev(i64 %arg1) local_unnamed_addr {
dec_label_pc_2b62e:
  %r15.1.reg2mem = alloca i64, !insn.addr !18045
  %r15.0.reg2mem = alloca i64, !insn.addr !18045
  %rbx.1.reg2mem = alloca i64, !insn.addr !18045
  %stack_var_-76.0.reg2mem = alloca i32, !insn.addr !18045
  %r13.0.reg2mem = alloca i64, !insn.addr !18045
  %rbx.0.reg2mem = alloca i64, !insn.addr !18045
  %stack_var_-58 = alloca i8, align 1
  %stack_var_-72 = alloca i64, align 8
  %0 = call i64 @mcount(), !insn.addr !18046
  %1 = call i64 @pci_enable_device(i64 %arg1), !insn.addr !18047
  %2 = and i64 %1, 4294967295, !insn.addr !18048
  %3 = trunc i64 %1 to i32, !insn.addr !18049
  %4 = icmp eq i32 %3, 0, !insn.addr !18049
  %5 = icmp eq i1 %4, false, !insn.addr !18050
  store i64 %2, i64* %r15.1.reg2mem, !insn.addr !18050
  br i1 %5, label %dec_label_pc_2bb58, label %dec_label_pc_2b641, !insn.addr !18050

dec_label_pc_2b641:                               ; preds = %dec_label_pc_2b62e
  %6 = call i64 @pci_set_dma_mask(i64 %arg1, i64 4294967295), !insn.addr !18051
  %7 = and i64 %6, 4294967295, !insn.addr !18052
  %8 = trunc i64 %6 to i32, !insn.addr !18053
  %9 = icmp eq i32 %8, 0, !insn.addr !18053
  br i1 %9, label %dec_label_pc_2b668, label %dec_label_pc_2b655, !insn.addr !18054

dec_label_pc_2b655:                               ; preds = %dec_label_pc_2b641
  %10 = call i64 @printk(i64 0), !insn.addr !18055
  store i64 %7, i64* %r15.0.reg2mem, !insn.addr !18056
  br label %dec_label_pc_2bb50, !insn.addr !18056

dec_label_pc_2b668:                               ; preds = %dec_label_pc_2b641
  %11 = add i64 %arg1, 56, !insn.addr !18057
  %12 = inttoptr i64 %11 to i32*, !insn.addr !18057
  %13 = load i32, i32* %12, align 4, !insn.addr !18057
  %14 = add i64 %arg1, ptrtoint (i8* @global_var_10 to i64), !insn.addr !18058
  %15 = inttoptr i64 %14 to i64*, !insn.addr !18058
  %16 = load i64, i64* %15, align 8, !insn.addr !18058
  %17 = bitcast i8* %stack_var_-58 to i64*, !insn.addr !18059
  %18 = call i64 @pci_bus_read_config_word(i64 %16, i32 %13, i64* bitcast (i16* @global_var_4 to i64*), i64* nonnull %17), !insn.addr !18059
  %19 = load i8, i8* %stack_var_-58, align 1, !insn.addr !18060
  %20 = and i8 %19, ptrtoint (i16* @global_var_4 to i8), !insn.addr !18060
  %21 = icmp eq i8 %20, 0, !insn.addr !18060
  %22 = icmp eq i1 %21, false, !insn.addr !18061
  br i1 %22, label %dec_label_pc_2b6c1, label %dec_label_pc_2b684, !insn.addr !18061

dec_label_pc_2b684:                               ; preds = %dec_label_pc_2b668
  %23 = call i64 @pci_set_master(i64 %arg1), !insn.addr !18062
  %24 = load i32, i32* %12, align 4, !insn.addr !18063
  %25 = load i64, i64* %15, align 8, !insn.addr !18064
  %26 = call i64 @pci_bus_read_config_word(i64 %25, i32 %24, i64* bitcast (i16* @global_var_4 to i64*), i64* nonnull %17), !insn.addr !18065
  %27 = load i8, i8* %stack_var_-58, align 1, !insn.addr !18066
  %28 = and i8 %27, ptrtoint (i16* @global_var_4 to i8), !insn.addr !18066
  %29 = icmp eq i8 %28, 0, !insn.addr !18066
  %30 = icmp eq i1 %29, false, !insn.addr !18067
  br i1 %30, label %dec_label_pc_2b6c1, label %dec_label_pc_2b6a8, !insn.addr !18067

dec_label_pc_2b6a8:                               ; preds = %dec_label_pc_2b684
  %31 = call i64 @printk(i64 0), !insn.addr !18068
  store i64 4294967291, i64* %r15.0.reg2mem, !insn.addr !18069
  br label %dec_label_pc_2bb50, !insn.addr !18069

dec_label_pc_2b6c1:                               ; preds = %dec_label_pc_2b684, %dec_label_pc_2b668
  %32 = call i64 @pci_request_regions(i64 %arg1, i64 0), !insn.addr !18070
  %33 = trunc i64 %32 to i32, !insn.addr !18071
  %34 = icmp slt i32 %33, 0, !insn.addr !18071
  %35 = icmp eq i1 %34, false, !insn.addr !18072
  br i1 %35, label %dec_label_pc_2b6dc, label %dec_label_pc_2b6d4, !insn.addr !18072

dec_label_pc_2b6d4:                               ; preds = %dec_label_pc_2b6c1
  %36 = and i64 %32, 4294967295, !insn.addr !18073
  store i64 %36, i64* %r15.0.reg2mem, !insn.addr !18074
  br label %dec_label_pc_2bb50, !insn.addr !18074

dec_label_pc_2b6dc:                               ; preds = %dec_label_pc_2b6c1
  %37 = call i64 @pci_iomap(i64 %arg1, i64 0, i64 0), !insn.addr !18075
  %38 = icmp eq i64 %37, 0, !insn.addr !18076
  br i1 %38, label %dec_label_pc_2bb42, label %dec_label_pc_2b7b8, !insn.addr !18077

dec_label_pc_2b7b8:                               ; preds = %dec_label_pc_2b6dc
  %39 = call i64 @FUSBDTV_Add.153(i64* nonnull %stack_var_-72), !insn.addr !18078
  %40 = load i64, i64* %stack_var_-72, align 8, !insn.addr !18079
  %41 = add i64 %40, 22512, !insn.addr !18080
  %42 = inttoptr i64 %41 to i64*, !insn.addr !18080
  store i64 %arg1, i64* %42, align 8, !insn.addr !18080
  %43 = load i64, i64* %stack_var_-72, align 8, !insn.addr !18081
  %44 = add i64 %43, 22520, !insn.addr !18082
  %45 = inttoptr i64 %44 to i64*, !insn.addr !18082
  store i64 %37, i64* %45, align 8, !insn.addr !18082
  %46 = load i64, i64* %stack_var_-72, align 8, !insn.addr !18083
  %47 = add i64 %arg1, 692, !insn.addr !18084
  %48 = inttoptr i64 %47 to i32*, !insn.addr !18084
  %49 = load i32, i32* %48, align 4, !insn.addr !18084
  %50 = zext i32 %49 to i64, !insn.addr !18084
  %51 = add i64 %46, 22536, !insn.addr !18085
  %52 = inttoptr i64 %51 to i64*, !insn.addr !18085
  store i64 %50, i64* %52, align 8, !insn.addr !18085
  %53 = load i64, i64* %stack_var_-72, align 8, !insn.addr !18086
  %54 = add i64 %53, 26224, !insn.addr !18087
  %55 = call i64 @__mutex_init(i64 %54, i64 0, i64 0), !insn.addr !18088
  %56 = load i64, i64* %stack_var_-72, align 8, !insn.addr !18089
  %57 = add i64 %56, 25376, !insn.addr !18090
  %58 = load i32, i32* bitcast (i64** @global_var_31ba0 to i32*), align 8, !insn.addr !18091
  %59 = load i32, i32* @global_var_36ae4, align 4, !insn.addr !18092
  %60 = call i64 @alloc_chrdev_region(i64 %57, i32 %59, i32 %58, i64 0), !insn.addr !18093
  %61 = load i32, i32* @global_var_36ae8, align 4, !insn.addr !18094
  %62 = lshr i32 %61, ptrtoint (i32** @global_var_14 to i32), !insn.addr !18095
  store i32 %62, i32* bitcast (i64* @global_var_36ae0 to i32*), align 8, !insn.addr !18096
  %63 = load i64, i64* %stack_var_-72, align 8, !insn.addr !18097
  %64 = add i64 %63, 25376, !insn.addr !18098
  %65 = inttoptr i64 %64 to i32*, !insn.addr !18098
  %66 = load i32, i32* %65, align 4, !insn.addr !18098
  %67 = urem i32 %66, 1048576, !insn.addr !18099
  %68 = add i64 %63, 25380, !insn.addr !18100
  %69 = inttoptr i64 %68 to i32*, !insn.addr !18100
  store i32 %67, i32* %69, align 4, !insn.addr !18100
  store i64 0, i64* %rbx.0.reg2mem, !insn.addr !18101
  store i64 0, i64* %r13.0.reg2mem, !insn.addr !18101
  br label %dec_label_pc_2b7d5, !insn.addr !18101

dec_label_pc_2b7d5:                               ; preds = %dec_label_pc_2b7d5, %dec_label_pc_2b7b8
  %r13.0.reload = load i64, i64* %r13.0.reg2mem
  %rbx.0.reload = load i64, i64* %rbx.0.reg2mem
  %sext3 = mul i64 %r13.0.reload, 4294967296
  %70 = sdiv i64 %sext3, 4294967296, !insn.addr !18102
  %71 = load i64, i64* %stack_var_-72, align 8, !insn.addr !18103
  %72 = mul i64 %70, ptrtoint (i8* @global_var_8 to i64), !insn.addr !18104
  %73 = add i64 %71, ptrtoint (i64* @global_var_4e0 to i64), !insn.addr !18104
  %74 = add i64 %73, %72, !insn.addr !18104
  %75 = inttoptr i64 %74 to i64*, !insn.addr !18104
  %76 = load i64, i64* %75, align 8, !insn.addr !18104
  %77 = add i64 %76, 600504, !insn.addr !18105
  %78 = call i64 @__mutex_init(i64 %77, i64 0, i64 0), !insn.addr !18106
  %79 = load i64, i64* %stack_var_-72, align 8, !insn.addr !18107
  %80 = add i64 %79, 25376, !insn.addr !18108
  %81 = inttoptr i64 %80 to i32*, !insn.addr !18108
  %82 = load i32, i32* %81, align 4, !insn.addr !18108
  %83 = urem i32 %82, 1048576, !insn.addr !18109
  %84 = trunc i64 %r13.0.reload to i32
  %85 = add i32 %83, %84, !insn.addr !18110
  %86 = add i64 %76, 600540, !insn.addr !18111
  %87 = inttoptr i64 %86 to i32*, !insn.addr !18111
  store i32 %85, i32* %87, align 4, !insn.addr !18111
  %88 = inttoptr i64 %rbx.0.reload to i32*, !insn.addr !18112
  %89 = load i32, i32* %88, align 4, !insn.addr !18112
  %90 = add i64 %76, 600536, !insn.addr !18113
  %91 = inttoptr i64 %90 to i32*, !insn.addr !18113
  store i32 %89, i32* %91, align 4, !insn.addr !18113
  %92 = load i32, i32* %88, align 4, !insn.addr !18114
  %93 = add i64 %76, 600544, !insn.addr !18115
  %94 = inttoptr i64 %93 to i32*, !insn.addr !18115
  store i32 %92, i32* %94, align 4, !insn.addr !18115
  %95 = add nuw nsw i64 %r13.0.reload, zext (i32 ptrtoint (i32* @global_var_1 to i32) to i64), !insn.addr !18116
  %96 = and i64 %95, 4294967295, !insn.addr !18116
  %97 = add i64 %rbx.0.reload, ptrtoint (i16* @global_var_4 to i64), !insn.addr !18117
  %98 = trunc i64 %95 to i32, !insn.addr !18118
  %99 = icmp eq i32 %98, ptrtoint (i8* @global_var_8 to i32), !insn.addr !18118
  %100 = icmp eq i1 %99, false, !insn.addr !18119
  store i64 %97, i64* %rbx.0.reg2mem, !insn.addr !18119
  store i64 %96, i64* %r13.0.reg2mem, !insn.addr !18119
  store i32 ptrtoint (i8* @global_var_8 to i32), i32* %stack_var_-76.0.reg2mem, !insn.addr !18119
  store i64 0, i64* %rbx.1.reg2mem, !insn.addr !18119
  br i1 %100, label %dec_label_pc_2b7d5, label %dec_label_pc_2b851, !insn.addr !18119

dec_label_pc_2b851:                               ; preds = %dec_label_pc_2b7d5, %dec_label_pc_2b851
  %rbx.1.reload = load i64, i64* %rbx.1.reg2mem
  %stack_var_-76.0.reload = load i32, i32* %stack_var_-76.0.reg2mem
  %sext4 = mul i64 %rbx.1.reload, 4294967296
  %101 = sdiv i64 %sext4, 4294967296, !insn.addr !18120
  %narrow = mul nsw i64 %101, 104
  %102 = add nsw i64 %narrow, 25392, !insn.addr !18121
  %103 = load i64, i64* %stack_var_-72, align 8, !insn.addr !18122
  %104 = add i64 %102, %103, !insn.addr !18122
  %105 = call i64 @cdev_init(i64 %104, i64 0), !insn.addr !18123
  %106 = load i64, i64* %stack_var_-72, align 8, !insn.addr !18124
  %107 = add i64 %106, 25456, !insn.addr !18124
  %108 = add i64 %107, %narrow, !insn.addr !18125
  %109 = inttoptr i64 %108 to i64*, !insn.addr !18125
  store i64 0, i64* %109, align 8, !insn.addr !18125
  %110 = load i64, i64* %stack_var_-72, align 8, !insn.addr !18126
  %111 = add i64 %110, 25376, !insn.addr !18127
  %112 = inttoptr i64 %111 to i32*, !insn.addr !18127
  %113 = load i32, i32* %112, align 4, !insn.addr !18127
  %114 = urem i32 %113, 1048576, !insn.addr !18128
  %115 = trunc i64 %rbx.1.reload to i32
  %116 = add i32 %114, %115, !insn.addr !18129
  %117 = and i32 %113, -1048576, !insn.addr !18130
  %118 = or i32 %116, %117, !insn.addr !18131
  %119 = add i64 %110, %102, !insn.addr !18132
  %120 = call i64 @cdev_add(i64 %119, i32 %118, i64* bitcast (i32* @global_var_1 to i64*)), !insn.addr !18133
  %121 = load i64, i64* %stack_var_-72, align 8, !insn.addr !18134
  %122 = add i64 %121, 25376, !insn.addr !18135
  %123 = inttoptr i64 %122 to i32*, !insn.addr !18135
  %124 = load i32, i32* %123, align 4, !insn.addr !18135
  %125 = urem i32 %124, 1048576, !insn.addr !18136
  %126 = add i32 %125, %115, !insn.addr !18137
  %127 = add i64 %121, 25384, !insn.addr !18138
  %128 = inttoptr i64 %127 to i32*, !insn.addr !18138
  %129 = load i32, i32* %128, align 4, !insn.addr !18138
  %130 = and i32 %124, -1048576, !insn.addr !18139
  %131 = or i32 %126, %130, !insn.addr !18140
  %132 = mul i32 %129, 8, !insn.addr !18141
  %133 = add i32 %132, %126, !insn.addr !18141
  %134 = zext i32 %133 to i64, !insn.addr !18141
  %135 = load i64, i64* @global_var_36f40, align 8, !insn.addr !18142
  %136 = call i64 @device_create(i64 %135, i64 0, i32 %131, i64 0, i64 0, i64 %134), !insn.addr !18143
  %137 = add nuw nsw i64 %rbx.1.reload, zext (i32 ptrtoint (i32* @global_var_1 to i32) to i64), !insn.addr !18144
  %138 = and i64 %137, 4294967295, !insn.addr !18144
  %139 = sub i32 %stack_var_-76.0.reload, ptrtoint (i32* @global_var_1 to i32), !insn.addr !18145
  %140 = icmp eq i32 %139, 0, !insn.addr !18145
  %141 = icmp eq i1 %140, false, !insn.addr !18146
  store i32 %139, i32* %stack_var_-76.0.reg2mem, !insn.addr !18146
  store i64 %138, i64* %rbx.1.reg2mem, !insn.addr !18146
  br i1 %141, label %dec_label_pc_2b851, label %dec_label_pc_2b8ff, !insn.addr !18146

dec_label_pc_2b8ff:                               ; preds = %dec_label_pc_2b851
  %142 = load i64, i64* %stack_var_-72, align 8, !insn.addr !18147
  %143 = call i64 @FUSBDTV_Start.426(i64 %142), !insn.addr !18148
  %144 = add i64 %arg1, 144, !insn.addr !18149
  %145 = load i64, i64* %stack_var_-72, align 8, !insn.addr !18150
  %146 = call i64 @dev_set_drvdata(i64 %144, i64 %145), !insn.addr !18151
  %147 = load i64, i64* %stack_var_-72, align 8, !insn.addr !18152
  %148 = add i64 %147, 21464, !insn.addr !18153
  %149 = inttoptr i64 %148 to i8*, !insn.addr !18153
  store i8 0, i8* %149, align 1, !insn.addr !18153
  %150 = load i64, i64* %stack_var_-72, align 8, !insn.addr !18154
  %151 = add i64 %150, 21465, !insn.addr !18155
  %152 = inttoptr i64 %151 to i8*, !insn.addr !18155
  store i8 0, i8* %152, align 1, !insn.addr !18155
  %153 = load i64, i64* %stack_var_-72, align 8, !insn.addr !18156
  %154 = call i64 @TC_MOS_POWER.323(i64 %153, i64 0, i64* bitcast (i32* @global_var_1 to i64*)), !insn.addr !18157
  %155 = load i64, i64* %stack_var_-72, align 8, !insn.addr !18158
  %156 = add i64 %155, ptrtoint (i64* @global_var_4e0 to i64), !insn.addr !18159
  %157 = inttoptr i64 %156 to i64*, !insn.addr !18159
  %158 = load i64, i64* %157, align 8, !insn.addr !18159
  %159 = call i64 @DTV_Init.236(i64 %158, i64* bitcast (i32* @global_var_2 to i64*), i64* bitcast (i32* @global_var_1 to i64*)), !insn.addr !18160
  %160 = trunc i64 %159 to i32, !insn.addr !18161
  %161 = icmp eq i32 %160, ptrtoint (i32* @global_var_1 to i32), !insn.addr !18161
  %162 = icmp eq i1 %161, false, !insn.addr !18162
  br i1 %162, label %dec_label_pc_2b987, label %dec_label_pc_2b967, !insn.addr !18162

dec_label_pc_2b967:                               ; preds = %dec_label_pc_2b8ff
  %163 = load i64, i64* %stack_var_-72, align 8, !insn.addr !18163
  %164 = add i64 %163, ptrtoint (i64* @global_var_4e0 to i64), !insn.addr !18164
  %165 = inttoptr i64 %164 to i64*, !insn.addr !18164
  %166 = load i64, i64* %165, align 8, !insn.addr !18164
  %167 = call i64 @DTV_PollingThreadInit.322(i64 %166), !insn.addr !18165
  %168 = load i64, i64* %stack_var_-72, align 8, !insn.addr !18166
  %169 = add i64 %168, ptrtoint (i64* @global_var_4e0 to i64), !insn.addr !18167
  %170 = inttoptr i64 %169 to i64*, !insn.addr !18167
  %171 = load i64, i64* %170, align 8, !insn.addr !18167
  %172 = call i64 @ASV5220_BcasThreadInit.315(i64 %171), !insn.addr !18168
  br label %dec_label_pc_2b987, !insn.addr !18168

dec_label_pc_2b987:                               ; preds = %dec_label_pc_2b967, %dec_label_pc_2b8ff
  %173 = load i64, i64* %stack_var_-72, align 8, !insn.addr !18169
  %174 = add i64 %173, 1256, !insn.addr !18170
  %175 = inttoptr i64 %174 to i64*, !insn.addr !18170
  %176 = load i64, i64* %175, align 8, !insn.addr !18170
  %177 = call i64 @DTV_Init.236(i64 %176, i64* bitcast (i32* @global_var_2 to i64*), i64* bitcast (i32* @global_var_1 to i64*)), !insn.addr !18171
  %178 = trunc i64 %177 to i32, !insn.addr !18172
  %179 = icmp eq i32 %178, ptrtoint (i32* @global_var_1 to i32), !insn.addr !18172
  %180 = icmp eq i1 %179, false, !insn.addr !18173
  br i1 %180, label %dec_label_pc_2b9c6, label %dec_label_pc_2b9a6, !insn.addr !18173

dec_label_pc_2b9a6:                               ; preds = %dec_label_pc_2b987
  %181 = load i64, i64* %stack_var_-72, align 8, !insn.addr !18174
  %182 = add i64 %181, 1256, !insn.addr !18175
  %183 = inttoptr i64 %182 to i64*, !insn.addr !18175
  %184 = load i64, i64* %183, align 8, !insn.addr !18175
  %185 = call i64 @DTV_PollingThreadInit.322(i64 %184), !insn.addr !18176
  %186 = load i64, i64* %stack_var_-72, align 8, !insn.addr !18177
  %187 = add i64 %186, 1256, !insn.addr !18178
  %188 = inttoptr i64 %187 to i64*, !insn.addr !18178
  %189 = load i64, i64* %188, align 8, !insn.addr !18178
  %190 = call i64 @ASV5220_BcasThreadInit.315(i64 %189), !insn.addr !18179
  br label %dec_label_pc_2b9c6, !insn.addr !18179

dec_label_pc_2b9c6:                               ; preds = %dec_label_pc_2b9a6, %dec_label_pc_2b987
  %191 = load i64, i64* %stack_var_-72, align 8, !insn.addr !18180
  %192 = add i64 %191, ptrtoint (i64* @global_var_4f0 to i64), !insn.addr !18181
  %193 = inttoptr i64 %192 to i64*, !insn.addr !18181
  %194 = load i64, i64* %193, align 8, !insn.addr !18181
  %195 = call i64 @DTV_Init.236(i64 %194, i64* bitcast (i32* @global_var_2 to i64*), i64* bitcast (i32* @global_var_1 to i64*)), !insn.addr !18182
  %196 = trunc i64 %195 to i32, !insn.addr !18183
  %197 = icmp eq i32 %196, ptrtoint (i32* @global_var_1 to i32), !insn.addr !18183
  %198 = icmp eq i1 %197, false, !insn.addr !18184
  br i1 %198, label %dec_label_pc_2ba05, label %dec_label_pc_2b9e5, !insn.addr !18184

dec_label_pc_2b9e5:                               ; preds = %dec_label_pc_2b9c6
  %199 = load i64, i64* %stack_var_-72, align 8, !insn.addr !18185
  %200 = add i64 %199, ptrtoint (i64* @global_var_4f0 to i64), !insn.addr !18186
  %201 = inttoptr i64 %200 to i64*, !insn.addr !18186
  %202 = load i64, i64* %201, align 8, !insn.addr !18186
  %203 = call i64 @DTV_PollingThreadInit.322(i64 %202), !insn.addr !18187
  %204 = load i64, i64* %stack_var_-72, align 8, !insn.addr !18188
  %205 = add i64 %204, ptrtoint (i64* @global_var_4f0 to i64), !insn.addr !18189
  %206 = inttoptr i64 %205 to i64*, !insn.addr !18189
  %207 = load i64, i64* %206, align 8, !insn.addr !18189
  %208 = call i64 @ASV5220_BcasThreadInit.315(i64 %207), !insn.addr !18190
  br label %dec_label_pc_2ba05, !insn.addr !18190

dec_label_pc_2ba05:                               ; preds = %dec_label_pc_2b9e5, %dec_label_pc_2b9c6
  %209 = load i64, i64* %stack_var_-72, align 8, !insn.addr !18191
  %210 = add i64 %209, 1272, !insn.addr !18192
  %211 = inttoptr i64 %210 to i64*, !insn.addr !18192
  %212 = load i64, i64* %211, align 8, !insn.addr !18192
  %213 = call i64 @DTV_Init.236(i64 %212, i64* bitcast (i32* @global_var_2 to i64*), i64* bitcast (i32* @global_var_1 to i64*)), !insn.addr !18193
  %214 = trunc i64 %213 to i32, !insn.addr !18194
  %215 = icmp eq i32 %214, ptrtoint (i32* @global_var_1 to i32), !insn.addr !18194
  %216 = icmp eq i1 %215, false, !insn.addr !18195
  br i1 %216, label %dec_label_pc_2ba44, label %dec_label_pc_2ba24, !insn.addr !18195

dec_label_pc_2ba24:                               ; preds = %dec_label_pc_2ba05
  %217 = load i64, i64* %stack_var_-72, align 8, !insn.addr !18196
  %218 = add i64 %217, 1272, !insn.addr !18197
  %219 = inttoptr i64 %218 to i64*, !insn.addr !18197
  %220 = load i64, i64* %219, align 8, !insn.addr !18197
  %221 = call i64 @DTV_PollingThreadInit.322(i64 %220), !insn.addr !18198
  %222 = load i64, i64* %stack_var_-72, align 8, !insn.addr !18199
  %223 = add i64 %222, 1272, !insn.addr !18200
  %224 = inttoptr i64 %223 to i64*, !insn.addr !18200
  %225 = load i64, i64* %224, align 8, !insn.addr !18200
  %226 = call i64 @ASV5220_BcasThreadInit.315(i64 %225), !insn.addr !18201
  br label %dec_label_pc_2ba44, !insn.addr !18201

dec_label_pc_2ba44:                               ; preds = %dec_label_pc_2ba24, %dec_label_pc_2ba05
  %227 = load i64, i64* %stack_var_-72, align 8, !insn.addr !18202
  %228 = add i64 %227, 1280, !insn.addr !18203
  %229 = inttoptr i64 %228 to i64*, !insn.addr !18203
  %230 = load i64, i64* %229, align 8, !insn.addr !18203
  %231 = call i64 @DTV_Init.236(i64 %230, i64* bitcast (i32* @global_var_2 to i64*), i64* bitcast (i32* @global_var_1 to i64*)), !insn.addr !18204
  %232 = trunc i64 %231 to i32, !insn.addr !18205
  %233 = icmp eq i32 %232, ptrtoint (i32* @global_var_1 to i32), !insn.addr !18205
  %234 = icmp eq i1 %233, false, !insn.addr !18206
  br i1 %234, label %dec_label_pc_2ba83, label %dec_label_pc_2ba63, !insn.addr !18206

dec_label_pc_2ba63:                               ; preds = %dec_label_pc_2ba44
  %235 = load i64, i64* %stack_var_-72, align 8, !insn.addr !18207
  %236 = add i64 %235, 1280, !insn.addr !18208
  %237 = inttoptr i64 %236 to i64*, !insn.addr !18208
  %238 = load i64, i64* %237, align 8, !insn.addr !18208
  %239 = call i64 @DTV_PollingThreadInit.322(i64 %238), !insn.addr !18209
  %240 = load i64, i64* %stack_var_-72, align 8, !insn.addr !18210
  %241 = add i64 %240, 1280, !insn.addr !18211
  %242 = inttoptr i64 %241 to i64*, !insn.addr !18211
  %243 = load i64, i64* %242, align 8, !insn.addr !18211
  %244 = call i64 @ASV5220_BcasThreadInit.315(i64 %243), !insn.addr !18212
  br label %dec_label_pc_2ba83, !insn.addr !18212

dec_label_pc_2ba83:                               ; preds = %dec_label_pc_2ba63, %dec_label_pc_2ba44
  %245 = load i64, i64* %stack_var_-72, align 8, !insn.addr !18213
  %246 = add i64 %245, 1288, !insn.addr !18214
  %247 = inttoptr i64 %246 to i64*, !insn.addr !18214
  %248 = load i64, i64* %247, align 8, !insn.addr !18214
  %249 = call i64 @DTV_Init.236(i64 %248, i64* bitcast (i32* @global_var_2 to i64*), i64* bitcast (i32* @global_var_1 to i64*)), !insn.addr !18215
  %250 = trunc i64 %249 to i32, !insn.addr !18216
  %251 = icmp eq i32 %250, ptrtoint (i32* @global_var_1 to i32), !insn.addr !18216
  %252 = icmp eq i1 %251, false, !insn.addr !18217
  br i1 %252, label %dec_label_pc_2bac2, label %dec_label_pc_2baa2, !insn.addr !18217

dec_label_pc_2baa2:                               ; preds = %dec_label_pc_2ba83
  %253 = load i64, i64* %stack_var_-72, align 8, !insn.addr !18218
  %254 = add i64 %253, 1288, !insn.addr !18219
  %255 = inttoptr i64 %254 to i64*, !insn.addr !18219
  %256 = load i64, i64* %255, align 8, !insn.addr !18219
  %257 = call i64 @DTV_PollingThreadInit.322(i64 %256), !insn.addr !18220
  %258 = load i64, i64* %stack_var_-72, align 8, !insn.addr !18221
  %259 = add i64 %258, 1288, !insn.addr !18222
  %260 = inttoptr i64 %259 to i64*, !insn.addr !18222
  %261 = load i64, i64* %260, align 8, !insn.addr !18222
  %262 = call i64 @ASV5220_BcasThreadInit.315(i64 %261), !insn.addr !18223
  br label %dec_label_pc_2bac2, !insn.addr !18223

dec_label_pc_2bac2:                               ; preds = %dec_label_pc_2baa2, %dec_label_pc_2ba83
  %263 = load i64, i64* %stack_var_-72, align 8, !insn.addr !18224
  %264 = add i64 %263, 1296, !insn.addr !18225
  %265 = inttoptr i64 %264 to i64*, !insn.addr !18225
  %266 = load i64, i64* %265, align 8, !insn.addr !18225
  %267 = call i64 @DTV_Init.236(i64 %266, i64* bitcast (i32* @global_var_2 to i64*), i64* bitcast (i32* @global_var_1 to i64*)), !insn.addr !18226
  %268 = trunc i64 %267 to i32, !insn.addr !18227
  %269 = icmp eq i32 %268, ptrtoint (i32* @global_var_1 to i32), !insn.addr !18227
  %270 = icmp eq i1 %269, false, !insn.addr !18228
  br i1 %270, label %dec_label_pc_2bb01, label %dec_label_pc_2bae1, !insn.addr !18228

dec_label_pc_2bae1:                               ; preds = %dec_label_pc_2bac2
  %271 = load i64, i64* %stack_var_-72, align 8, !insn.addr !18229
  %272 = add i64 %271, 1296, !insn.addr !18230
  %273 = inttoptr i64 %272 to i64*, !insn.addr !18230
  %274 = load i64, i64* %273, align 8, !insn.addr !18230
  %275 = call i64 @DTV_PollingThreadInit.322(i64 %274), !insn.addr !18231
  %276 = load i64, i64* %stack_var_-72, align 8, !insn.addr !18232
  %277 = add i64 %276, 1296, !insn.addr !18233
  %278 = inttoptr i64 %277 to i64*, !insn.addr !18233
  %279 = load i64, i64* %278, align 8, !insn.addr !18233
  %280 = call i64 @ASV5220_BcasThreadInit.315(i64 %279), !insn.addr !18234
  br label %dec_label_pc_2bb01, !insn.addr !18234

dec_label_pc_2bb01:                               ; preds = %dec_label_pc_2bae1, %dec_label_pc_2bac2
  %281 = load i64, i64* %stack_var_-72, align 8, !insn.addr !18235
  %282 = add i64 %281, 1304, !insn.addr !18236
  %283 = inttoptr i64 %282 to i64*, !insn.addr !18236
  %284 = load i64, i64* %283, align 8, !insn.addr !18236
  %285 = call i64 @DTV_Init.236(i64 %284, i64* bitcast (i32* @global_var_2 to i64*), i64* bitcast (i32* @global_var_1 to i64*)), !insn.addr !18237
  %286 = trunc i64 %285 to i32, !insn.addr !18238
  %287 = icmp eq i32 %286, ptrtoint (i32* @global_var_1 to i32), !insn.addr !18238
  %288 = icmp eq i1 %287, false, !insn.addr !18239
  store i64 %7, i64* %r15.1.reg2mem, !insn.addr !18239
  br i1 %288, label %dec_label_pc_2bb58, label %dec_label_pc_2bb20, !insn.addr !18239

dec_label_pc_2bb20:                               ; preds = %dec_label_pc_2bb01
  %289 = load i64, i64* %stack_var_-72, align 8, !insn.addr !18240
  %290 = add i64 %289, 1304, !insn.addr !18241
  %291 = inttoptr i64 %290 to i64*, !insn.addr !18241
  %292 = load i64, i64* %291, align 8, !insn.addr !18241
  %293 = call i64 @DTV_PollingThreadInit.322(i64 %292), !insn.addr !18242
  %294 = load i64, i64* %stack_var_-72, align 8, !insn.addr !18243
  %295 = add i64 %294, 1304, !insn.addr !18244
  %296 = inttoptr i64 %295 to i64*, !insn.addr !18244
  %297 = load i64, i64* %296, align 8, !insn.addr !18244
  %298 = call i64 @ASV5220_BcasThreadInit.315(i64 %297), !insn.addr !18245
  store i64 %7, i64* %r15.1.reg2mem, !insn.addr !18246
  br label %dec_label_pc_2bb58, !insn.addr !18246

dec_label_pc_2bb42:                               ; preds = %dec_label_pc_2b6dc
  %299 = call i64 @pci_release_regions(i64 %arg1), !insn.addr !18247
  store i64 4294967291, i64* %r15.0.reg2mem, !insn.addr !18248
  br label %dec_label_pc_2bb50, !insn.addr !18248

dec_label_pc_2bb50:                               ; preds = %dec_label_pc_2bb42, %dec_label_pc_2b6d4, %dec_label_pc_2b6a8, %dec_label_pc_2b655
  %r15.0.reload = load i64, i64* %r15.0.reg2mem
  %300 = call i64 @pci_disable_device(i64 %arg1), !insn.addr !18249
  store i64 %r15.0.reload, i64* %r15.1.reg2mem, !insn.addr !18249
  br label %dec_label_pc_2bb58, !insn.addr !18249

dec_label_pc_2bb58:                               ; preds = %dec_label_pc_2bb50, %dec_label_pc_2bb20, %dec_label_pc_2bb01, %dec_label_pc_2b62e
  %r15.1.reload = load i64, i64* %r15.1.reg2mem
  %301 = and i64 %r15.1.reload, 4294967295, !insn.addr !18250
  ret i64 %301, !insn.addr !18251
}

define i64 @init_module() local_unnamed_addr {
dec_label_pc_2bb6a:
  %rax.0.reg2mem = alloca i64, !insn.addr !18252
  %rdx.0.reg2mem = alloca i64, !insn.addr !18252
  %0 = call i64 @__class_create(i64 0, i64 0, i64 0), !insn.addr !18253
  store i64 %0, i64* @global_var_36f40, align 8, !insn.addr !18254
  %1 = icmp ult i64 %0, -4095
  store i64 0, i64* %rdx.0.reg2mem, !insn.addr !18255
  store i64 %0, i64* %rax.0.reg2mem, !insn.addr !18255
  br i1 %1, label %dec_label_pc_2bba7, label %dec_label_pc_2bbd3, !insn.addr !18255

dec_label_pc_2bba7:                               ; preds = %dec_label_pc_2bb6a, %dec_label_pc_2bba7
  %rdx.0.reload = load i64, i64* %rdx.0.reg2mem
  %2 = inttoptr i64 %rdx.0.reload to i64*, !insn.addr !18256
  store i64 0, i64* %2, align 8, !insn.addr !18256
  %3 = add i64 %rdx.0.reload, ptrtoint (i8* @global_var_8 to i64), !insn.addr !18257
  %4 = icmp eq i64 %rdx.0.reload, sub (i64 0, i64 add (i64 ptrtoint (i8* @global_var_8 to i64), i64 -64)), !insn.addr !18258
  %5 = icmp eq i1 %4, false, !insn.addr !18259
  store i64 %3, i64* %rdx.0.reg2mem, !insn.addr !18259
  br i1 %5, label %dec_label_pc_2bba7, label %dec_label_pc_2bbb9, !insn.addr !18259

dec_label_pc_2bbb9:                               ; preds = %dec_label_pc_2bba7
  %6 = call i64 @__pci_register_driver(i64 0, i64 0, i64 0), !insn.addr !18260
  store i64 %6, i64* %rax.0.reg2mem, !insn.addr !18260
  br label %dec_label_pc_2bbd3, !insn.addr !18260

dec_label_pc_2bbd3:                               ; preds = %dec_label_pc_2bb6a, %dec_label_pc_2bbb9
  %rax.0.reload = load i64, i64* %rax.0.reg2mem
  ret i64 %rax.0.reload, !insn.addr !18261
}

define i64 @function_c8a05c8() local_unnamed_addr {
dec_label_pc_c8a05c8:
  %0 = call i64 @__decompiler_undefined_function_0()
  ret i64 %0
}

define i64 @function_eee5a94() local_unnamed_addr {
dec_label_pc_eee5a94:
  %0 = call i64 @__decompiler_undefined_function_0()
  ret i64 %0
}

define i64 @function_4c00000118bec209() local_unnamed_addr {
dec_label_pc_4c00000118bec209:
  %0 = call i64 @__decompiler_undefined_function_0()
  ret i64 %0
}

define i64 @function_ffffffff8a024063() local_unnamed_addr {
dec_label_pc_ffffffff8a024063:
  %0 = call i64 @__decompiler_undefined_function_0()
  ret i64 %0
}

define i64 @function_ffffffffc801ed24() local_unnamed_addr {
dec_label_pc_ffffffffc801ed24:
  %0 = call i64 @__decompiler_undefined_function_0()
  ret i64 %0
}

define i64 @function_fffffffff3c9dcc7() local_unnamed_addr {
dec_label_pc_fffffffff3c9dcc7:
  %0 = call i64 @__decompiler_undefined_function_0()
  ret i64 %0
}

declare i64 @unknown_ffffffffc1c1dcc3() local_unnamed_addr

declare i64 @unknown_fffffffff067f109() local_unnamed_addr

declare i64 @unknown_fffffffff067f89f() local_unnamed_addr

declare i64 @pci_save_state() local_unnamed_addr

declare i64 @free_irq(i64, i64) local_unnamed_addr

declare i64 @alloc_chrdev_region(i64, i32, i32, i64) local_unnamed_addr

declare i64 @__udelay(i64) local_unnamed_addr

declare i64 @dev_get_drvdata(i64) local_unnamed_addr

declare i64 @copy_from_user(i64*, i64, i64*) local_unnamed_addr

declare i64 @vsprintf(i8*, i64, i64*, i64*) local_unnamed_addr

declare i64 @__class_create(i64, i64, i64) local_unnamed_addr

declare i64 @pci_enable_device(i64) local_unnamed_addr

declare i64 @pci_iomap(i64, i64, i64) local_unnamed_addr

declare i64 @pci_choose_state(i64, i64) local_unnamed_addr

declare i64 @complete(i64) local_unnamed_addr

declare i64 @class_destroy(i64) local_unnamed_addr

declare i64 @__pci_register_driver(i64, i64, i64) local_unnamed_addr

declare i64 @up(i64) local_unnamed_addr

declare i64 @pci_request_regions(i64, i64) local_unnamed_addr

declare i64 @memcpy(i64, i64, i64, i64) local_unnamed_addr

declare i64 @kthread_create(i64, i64, i64) local_unnamed_addr

declare i64 @kfree(i64) local_unnamed_addr

declare i64 @kthread_should_stop() local_unnamed_addr

declare i64 @pci_set_power_state(i64, i64) local_unnamed_addr

declare i64 @msleep_interruptible() local_unnamed_addr

declare i64 @pci_unregister_driver(i64) local_unnamed_addr

declare i64 @wake_up_process(i64) local_unnamed_addr

declare i64 @__stack_chk_fail() local_unnamed_addr

declare i64 @pci_bus_read_config_word(i64, i32, i64*, i64*) local_unnamed_addr

declare i64 @cdev_add(i64, i32, i64*) local_unnamed_addr

declare i64 @request_threaded_irq(i64, i64, i64, i64, i64, i64) local_unnamed_addr

declare i64 @device_create(i64, i64, i32, i64, i64, i64) local_unnamed_addr

declare i64 @down(i64, i64) local_unnamed_addr

declare i64 @mutex_lock(i64) local_unnamed_addr

declare i64 @warn_slowpath_null(i64, i64) local_unnamed_addr

declare i64 @mcount() local_unnamed_addr

declare i64 @copy_to_user(i64, i32*, i64*) local_unnamed_addr

declare i64 @strncpy(i64, i64, i64) local_unnamed_addr

declare i64 @kthread_stop(i64) local_unnamed_addr

declare i64 @printk(i64) local_unnamed_addr

declare i64 @__mutex_init(i64, i64, i64) local_unnamed_addr

declare i64 @pci_iounmap(i64, i64) local_unnamed_addr

declare i64 @pci_restore_state(i64) local_unnamed_addr

declare i64 @kmem_cache_alloc_notrace(i64, i64*) local_unnamed_addr

declare i64 @pci_set_dma_mask(i64, i64) local_unnamed_addr

declare i64 @memset(i64, i64, i64) local_unnamed_addr

declare i64 @pci_set_master(i64) local_unnamed_addr

declare i64 @wait_for_completion(i64, i32, i32) local_unnamed_addr

declare i64 @__init_waitqueue_head(i64, i64, i64, i64) local_unnamed_addr

declare i64 @sprintf(i64, i64, i64, i8, i64, i64) local_unnamed_addr

declare i64 @unregister_chrdev_region(i32, i32) local_unnamed_addr

declare i64 @mutex_unlock(i64) local_unnamed_addr

declare i64 @pci_release_regions(i64) local_unnamed_addr

declare i64 @device_destroy(i64, i32) local_unnamed_addr

declare i64 @pci_disable_device(i64) local_unnamed_addr

declare i64 @slab_buffer_size(i64) local_unnamed_addr

declare i64 @dev_set_drvdata(i64, i64) local_unnamed_addr

declare i64 @cdev_init(i64, i64) local_unnamed_addr

declare i64 @__kmalloc(i64, i64*, i64) local_unnamed_addr

declare i64 @cdev_del(i64) local_unnamed_addr

declare i64 @unknown_ba7333() local_unnamed_addr

declare i64 @unknown_4d8cc1e2() local_unnamed_addr

declare i64 @unknown_758cbdde() local_unnamed_addr

declare i64 @unknown_fffffffff06f75c4() local_unnamed_addr

declare i64 @unknown_fffffffff077646b() local_unnamed_addr

declare i64 @unknown_fffffffff07765b7() local_unnamed_addr

declare i64 @unknown_fffffffff0777964() local_unnamed_addr

declare i64 @__asm_int1() local_unnamed_addr

declare i64 @__asm_sti() local_unnamed_addr

declare void @__asm_out(i16, i32) local_unnamed_addr

declare void @__asm_out.621(i64, i32) local_unnamed_addr

declare i8 @__asm_in(i16) local_unnamed_addr

declare void @__asm_out.622(i16, i8) local_unnamed_addr

declare i64 @__asm_iretd() local_unnamed_addr

declare void @__asm_rep_stosq_memset(i8*, i64, i64) local_unnamed_addr

declare void @__asm_rep_movsq_memcpy(i8*, i8*, i64) local_unnamed_addr

declare i32 @__asm_in.623(i16) local_unnamed_addr

declare i128 @__asm_vpalignr(i128, i128, i64) local_unnamed_addr

declare i32 @__asm_in.624(i32) local_unnamed_addr

declare i32 @__asm_insd(i16) local_unnamed_addr

declare i8 @__asm_in.625(i8) local_unnamed_addr

declare i64 @__asm_wait() local_unnamed_addr

declare void @__asm_outsd(i16, i32) local_unnamed_addr

declare i64 @__readgsqword(i64) local_unnamed_addr

declare i32 @__readgsdword(i64) local_unnamed_addr

declare void @__writegsdword(i64, i32) local_unnamed_addr

declare i8 @__readgsbyte(i64) local_unnamed_addr

declare void @__writegsbyte(i64, i8) local_unnamed_addr

declare i64 @__decompiler_undefined_function_0() local_unnamed_addr

declare i8 @__decompiler_undefined_function_1() local_unnamed_addr

declare i1 @__decompiler_undefined_function_2() local_unnamed_addr

declare i32 @__decompiler_undefined_function_3() local_unnamed_addr

declare i16 @__decompiler_undefined_function_4() local_unnamed_addr

declare i8* @__decompiler_undefined_function_5() local_unnamed_addr

declare x86_fp80 @__decompiler_undefined_function_6() local_unnamed_addr

declare i128 @__decompiler_undefined_function_8() local_unnamed_addr

; Function Attrs: cold noreturn nounwind
declare void @llvm.trap() #0

attributes #0 = { cold noreturn nounwind }

!0 = !{i64 65}
!1 = !{i64 73}
!2 = !{i64 82}
!3 = !{i64 86}
!4 = !{i64 88}
!5 = !{i64 92}
!6 = !{i64 99}
!7 = !{i64 101}
!8 = !{i64 106}
!9 = !{i64 111}
!10 = !{i64 116}
!11 = !{i64 133}
!12 = !{i64 141}
!13 = !{i64 152}
!14 = !{i64 159}
!15 = !{i64 164}
!16 = !{i64 167}
!17 = !{i64 172}
!18 = !{i64 178}
!19 = !{i64 183}
!20 = !{i64 188}
!21 = !{i64 193}
!22 = !{i64 195}
!23 = !{i64 200}
!24 = !{i64 214}
!25 = !{i64 226}
!26 = !{i64 231}
!27 = !{i64 374}
!28 = !{i64 381}
!29 = !{i64 388}
!30 = !{i64 398}
!31 = !{i64 403}
!32 = !{i64 413}
!33 = !{i64 427}
!34 = !{i64 434}
!35 = !{i64 438}
!36 = !{i64 452}
!37 = !{i64 459}
!38 = !{i64 463}
!39 = !{i64 473}
!40 = !{i64 480}
!41 = !{i64 484}
!42 = !{i64 494}
!43 = !{i64 501}
!44 = !{i64 508}
!45 = !{i64 515}
!46 = !{i64 520}
!47 = !{i64 531}
!48 = !{i64 541}
!49 = !{i64 551}
!50 = !{i64 568}
!51 = !{i64 571}
!52 = !{i64 580}
!53 = !{i64 590}
!54 = !{i64 594}
!55 = !{i64 603}
!56 = !{i64 605}
!57 = !{i64 618}
!58 = !{i64 619}
!59 = !{i64 636}
!60 = !{i64 645}
!61 = !{i64 665}
!62 = !{i64 767}
!63 = !{i64 774}
!64 = !{i64 779}
!65 = !{i64 783}
!66 = !{i64 658}
!67 = !{i64 790}
!68 = !{i64 794}
!69 = !{i64 800}
!70 = !{i64 809}
!71 = !{i64 822}
!72 = !{i64 824}
!73 = !{i64 831}
!74 = !{i64 833}
!75 = !{i64 840}
!76 = !{i64 850}
!77 = !{i64 852}
!78 = !{i64 866}
!79 = !{i64 873}
!80 = !{i64 883}
!81 = !{i64 891}
!82 = !{i64 971}
!83 = !{i64 972}
!84 = !{i64 988}
!85 = !{i64 996}
!86 = !{i64 1011}
!87 = !{i64 1028}
!88 = !{i64 1034}
!89 = !{i64 1018}
!90 = !{i64 1046}
!91 = !{i64 1048}
!92 = !{i64 1054}
!93 = !{i64 1066}
!94 = !{i64 1068}
!95 = !{i64 1074}
!96 = !{i64 1138}
!97 = !{i64 1144}
!98 = !{i64 1156}
!99 = !{i64 1255}
!100 = !{i64 1260}
!101 = !{i64 1266}
!102 = !{i64 1268}
!103 = !{i64 1270}
!104 = !{i64 1273}
!105 = !{i64 1279}
!106 = !{i64 1286}
!107 = !{i64 1289}
!108 = !{i64 1295}
!109 = !{i64 1308}
!110 = !{i64 1314}
!111 = !{i64 1325}
!112 = !{i64 1332}
!113 = !{i64 1335}
!114 = !{i64 1337}
!115 = !{i64 1350}
!116 = !{i64 1356}
!117 = !{i64 1396}
!118 = !{i64 973}
!119 = !{i64 1416}
!120 = !{i64 1421}
!121 = !{i64 1428}
!122 = !{i64 1435}
!123 = !{i64 1437}
!124 = !{i64 1447}
!125 = !{i64 1452}
!126 = !{i64 1490}
!127 = !{i64 1495}
!128 = !{i64 1505}
!129 = !{i64 1520}
!130 = !{i64 1528}
!131 = !{i64 1533}
!132 = !{i64 1535}
!133 = !{i64 1511}
!134 = !{i64 1541}
!135 = !{i64 1557}
!136 = !{i64 1567}
!137 = !{i64 1579}
!138 = !{i64 1590}
!139 = !{i64 1595}
!140 = !{i64 1605}
!141 = !{i64 1615}
!142 = !{i64 1625}
!143 = !{i64 1637}
!144 = !{i64 1653}
!145 = !{i64 1663}
!146 = !{i64 1675}
!147 = !{i64 1685}
!148 = !{i64 1690}
!149 = !{i64 1697}
!150 = !{i64 1718}
!151 = !{i64 1728}
!152 = !{i64 1750}
!153 = !{i64 1760}
!154 = !{i64 1782}
!155 = !{i64 1792}
!156 = !{i64 1797}
!157 = !{i64 1807}
!158 = !{i64 1829}
!159 = !{i64 1835}
!160 = !{i64 1842}
!161 = !{i64 1844}
!162 = !{i64 1847}
!163 = !{i64 1853}
!164 = !{i64 1875}
!165 = !{i64 1885}
!166 = !{i64 1890}
!167 = !{i64 1905}
!168 = !{i64 1915}
!169 = !{i64 1935}
!170 = !{i64 1962}
!171 = !{i64 1972}
!172 = !{i64 1985}
!173 = !{i64 2005}
!174 = !{i64 2020}
!175 = !{i64 2033}
!176 = !{i64 2074}
!177 = !{i64 2081}
!178 = !{i64 2089}
!179 = !{i64 2097}
!180 = !{i64 2112}
!181 = !{i64 2117}
!182 = !{i64 2119}
!183 = !{i64 2121}
!184 = !{i64 2130}
!185 = !{i64 2138}
!186 = !{i64 2146}
!187 = !{i64 2156}
!188 = !{i64 2164}
!189 = !{i64 2174}
!190 = !{i64 2194}
!191 = !{i64 2199}
!192 = !{i64 2208}
!193 = !{i64 2221}
!194 = !{i64 2241}
!195 = !{i64 2275}
!196 = !{i64 2290}
!197 = !{i64 2372}
!198 = !{i64 2377}
!199 = !{i64 2384}
!200 = !{i64 2397}
!201 = !{i64 2414}
!202 = !{i64 2419}
!203 = !{i64 2421}
!204 = !{i64 2428}
!205 = !{i64 2431}
!206 = !{i64 2444}
!207 = !{i64 2461}
!208 = !{i64 2466}
!209 = !{i64 2468}
!210 = !{i64 2485}
!211 = !{i64 2495}
!212 = !{i64 2512}
!213 = !{i64 2517}
!214 = !{i64 2522}
!215 = !{i64 2536}
!216 = !{i64 2540}
!217 = !{i64 2549}
!218 = !{i64 2551}
!219 = !{i64 2569}
!220 = !{i64 2570}
!221 = !{i64 2587}
!222 = !{i64 2598}
!223 = !{i64 2605}
!224 = !{i64 2612}
!225 = !{i64 2620}
!226 = !{i64 2656}
!227 = !{i64 2633}
!228 = !{i64 2635}
!229 = !{i64 2643}
!230 = !{i64 2648}
!231 = !{i64 2654}
!232 = !{i64 2663}
!233 = !{i64 2673}
!234 = !{i64 2681}
!235 = !{i64 2690}
!236 = !{i64 2700}
!237 = !{i64 2702}
!238 = !{i64 2706}
!239 = !{i64 2714}
!240 = !{i64 2724}
!241 = !{i64 2730}
!242 = !{i64 2733}
!243 = !{i64 2740}
!244 = !{i64 2769}
!245 = !{i64 2776}
!246 = !{i64 2787}
!247 = !{i64 2792}
!248 = !{i64 2803}
!249 = !{i64 2808}
!250 = !{i64 2819}
!251 = !{i64 2824}
!252 = !{i64 2829}
!253 = !{i64 2836}
!254 = !{i64 2842}
!255 = !{i64 2848}
!256 = !{i64 2855}
!257 = !{i64 2866}
!258 = !{i64 2873}
!259 = !{i64 2880}
!260 = !{i64 2885}
!261 = !{i64 2896}
!262 = !{i64 2903}
!263 = !{i64 2910}
!264 = !{i64 2915}
!265 = !{i64 2926}
!266 = !{i64 2933}
!267 = !{i64 2940}
!268 = !{i64 2945}
!269 = !{i64 2956}
!270 = !{i64 2963}
!271 = !{i64 2970}
!272 = !{i64 2975}
!273 = !{i64 2986}
!274 = !{i64 2993}
!275 = !{i64 3000}
!276 = !{i64 3005}
!277 = !{i64 3016}
!278 = !{i64 3023}
!279 = !{i64 3030}
!280 = !{i64 3035}
!281 = !{i64 3046}
!282 = !{i64 3053}
!283 = !{i64 3060}
!284 = !{i64 3065}
!285 = !{i64 3076}
!286 = !{i64 3083}
!287 = !{i64 3090}
!288 = !{i64 3095}
!289 = !{i64 3106}
!290 = !{i64 3113}
!291 = !{i64 3120}
!292 = !{i64 3125}
!293 = !{i64 3136}
!294 = !{i64 3143}
!295 = !{i64 3150}
!296 = !{i64 3155}
!297 = !{i64 3166}
!298 = !{i64 3173}
!299 = !{i64 3180}
!300 = !{i64 3185}
!301 = !{i64 3196}
!302 = !{i64 3203}
!303 = !{i64 3210}
!304 = !{i64 3212}
!305 = !{i64 3223}
!306 = !{i64 3230}
!307 = !{i64 3237}
!308 = !{i64 3239}
!309 = !{i64 3250}
!310 = !{i64 3257}
!311 = !{i64 3264}
!312 = !{i64 3266}
!313 = !{i64 3277}
!314 = !{i64 3284}
!315 = !{i64 3291}
!316 = !{i64 3302}
!317 = !{i64 3304}
!318 = !{i64 3311}
!319 = !{i64 3329}
!320 = !{i64 3339}
!321 = !{i64 3347}
!322 = !{i64 3352}
!323 = !{i64 3357}
!324 = !{i64 3364}
!325 = !{i64 3370}
!326 = !{i64 3376}
!327 = !{i64 4716}
!328 = !{i64 4723}
!329 = !{i64 4730}
!330 = !{i64 4740}
!331 = !{i64 4743}
!332 = !{i64 4748}
!333 = !{i64 4749}
!334 = !{i64 4751}
!335 = !{i64 4758}
!336 = !{i64 4765}
!337 = !{i64 4772}
!338 = !{i64 4779}
!339 = !{i64 4787}
!340 = !{i64 4788}
!341 = !{i64 4816}
!342 = !{i64 4824}
!343 = !{i64 4831}
!344 = !{i64 4838}
!345 = !{i64 4843}
!346 = !{i64 4850}
!347 = !{i64 4853}
!348 = !{i64 4869}
!349 = !{i64 4925}
!350 = !{i64 4928}
!351 = !{i64 4942}
!352 = !{i64 4949}
!353 = !{i64 4958}
!354 = !{i64 4968}
!355 = !{i64 4996}
!356 = !{i64 5001}
!357 = !{i64 5006}
!358 = !{i64 5017}
!359 = !{i64 5018}
!360 = !{i64 5027}
!361 = !{i64 5040}
!362 = !{i64 5045}
!363 = !{i64 5052}
!364 = !{i64 5086}
!365 = !{i64 5106}
!366 = !{i64 5130}
!367 = !{i64 5137}
!368 = !{i64 5140}
!369 = !{i64 5148}
!370 = !{i64 5150}
!371 = !{i64 5157}
!372 = !{i64 5190}
!373 = !{i64 5264}
!374 = !{i64 5276}
!375 = !{i64 5283}
!376 = !{i64 5297}
!377 = !{i64 5307}
!378 = !{i64 5309}
!379 = !{i64 5315}
!380 = !{i64 5317}
!381 = !{i64 5319}
!382 = !{i64 5341}
!383 = !{i64 5344}
!384 = !{i64 5351}
!385 = !{i64 5353}
!386 = !{i64 5364}
!387 = !{i64 5377}
!388 = !{i64 5391}
!389 = !{i64 5412}
!390 = !{i64 5423}
!391 = !{i64 5431}
!392 = !{i64 5434}
!393 = !{i64 5443}
!394 = !{i64 5458}
!395 = !{i64 5466}
!396 = !{i64 5469}
!397 = !{i64 5477}
!398 = !{i64 5480}
!399 = !{i64 5485}
!400 = !{i64 5501}
!401 = !{i64 5508}
!402 = !{i64 5513}
!403 = !{i64 5516}
!404 = !{i64 5521}
!405 = !{i64 5526}
!406 = !{i64 5536}
!407 = !{i64 5542}
!408 = !{i64 5557}
!409 = !{i64 5562}
!410 = !{i64 5569}
!411 = !{i64 5577}
!412 = !{i64 5596}
!413 = !{i64 5606}
!414 = !{i64 5611}
!415 = !{i64 5614}
!416 = !{i64 5626}
!417 = !{i64 5631}
!418 = !{i64 5642}
!419 = !{i64 5646}
!420 = !{i64 5661}
!421 = !{i64 5671}
!422 = !{i64 5682}
!423 = !{i64 5689}
!424 = !{i64 5697}
!425 = !{i64 5701}
!426 = !{i64 5710}
!427 = !{i64 5715}
!428 = !{i64 5731}
!429 = !{i64 5736}
!430 = !{i64 5738}
!431 = !{i64 5740}
!432 = !{i64 5748}
!433 = !{i64 5752}
!434 = !{i64 5767}
!435 = !{i64 5772}
!436 = !{i64 5783}
!437 = !{i64 5788}
!438 = !{i64 5799}
!439 = !{i64 5804}
!440 = !{i64 5815}
!441 = !{i64 5825}
!442 = !{i64 5830}
!443 = !{i64 5834}
!444 = !{i64 5840}
!445 = !{i64 5843}
!446 = !{i64 5845}
!447 = !{i64 5850}
!448 = !{i64 5857}
!449 = !{i64 5860}
!450 = !{i64 5862}
!451 = !{i64 5870}
!452 = !{i64 5881}
!453 = !{i64 5882}
!454 = !{i64 5910}
!455 = !{i64 5988}
!456 = !{i64 6018}
!457 = !{i64 6021}
!458 = !{i64 6025}
!459 = !{i64 6031}
!460 = !{i64 6052}
!461 = !{i64 6057}
!462 = !{i64 6064}
!463 = !{i64 6075}
!464 = !{i64 6086}
!465 = !{i64 6097}
!466 = !{i64 6118}
!467 = !{i64 6123}
!468 = !{i64 6130}
!469 = !{i64 6141}
!470 = !{i64 6152}
!471 = !{i64 6328}
!472 = !{i64 6163}
!473 = !{i64 5930}
!474 = !{i64 5943}
!475 = !{i64 6171}
!476 = !{i64 6175}
!477 = !{i64 6187}
!478 = !{i64 6192}
!479 = !{i64 6199}
!480 = !{i64 6210}
!481 = !{i64 6221}
!482 = !{i64 6235}
!483 = !{i64 6239}
!484 = !{i64 6251}
!485 = !{i64 6256}
!486 = !{i64 6263}
!487 = !{i64 6274}
!488 = !{i64 6285}
!489 = !{i64 5924}
!490 = !{i64 6300}
!491 = !{i64 6308}
!492 = !{i64 6321}
!493 = !{i64 6335}
!494 = !{i64 6341}
!495 = !{i64 6347}
!496 = !{i64 6351}
!497 = !{i64 6353}
!498 = !{i64 6360}
!499 = !{i64 6388}
!500 = !{i64 6398}
!501 = !{i64 6403}
!502 = !{i64 6408}
!503 = !{i64 6410}
!504 = !{i64 6413}
!505 = !{i64 6418}
!506 = !{i64 6422}
!507 = !{i64 6424}
!508 = !{i64 6431}
!509 = !{i64 6433}
!510 = !{i64 6440}
!511 = !{i64 6442}
!512 = !{i64 6455}
!513 = !{i64 6456}
!514 = !{i64 6484}
!515 = !{i64 6492}
!516 = !{i64 6499}
!517 = !{i64 6506}
!518 = !{i64 6514}
!519 = !{i64 6517}
!520 = !{i64 6538}
!521 = !{i64 6556}
!522 = !{i64 6563}
!523 = !{i64 6573}
!524 = !{i64 6594}
!525 = !{i64 6602}
!526 = !{i64 6623}
!527 = !{i64 6641}
!528 = !{i64 6659}
!529 = !{i64 6664}
!530 = !{i64 6674}
!531 = !{i64 6685}
!532 = !{i64 6691}
!533 = !{i64 6696}
!534 = !{i64 6700}
!535 = !{i64 6704}
!536 = !{i64 6708}
!537 = !{i64 6710}
!538 = !{i64 6717}
!539 = !{i64 6728}
!540 = !{i64 6739}
!541 = !{i64 6750}
!542 = !{i64 6761}
!543 = !{i64 6772}
!544 = !{i64 6783}
!545 = !{i64 6794}
!546 = !{i64 6805}
!547 = !{i64 6816}
!548 = !{i64 6827}
!549 = !{i64 6838}
!550 = !{i64 6849}
!551 = !{i64 6860}
!552 = !{i64 6871}
!553 = !{i64 6882}
!554 = !{i64 6893}
!555 = !{i64 6904}
!556 = !{i64 6915}
!557 = !{i64 6926}
!558 = !{i64 6937}
!559 = !{i64 6948}
!560 = !{i64 6959}
!561 = !{i64 6970}
!562 = !{i64 6981}
!563 = !{i64 6992}
!564 = !{i64 7003}
!565 = !{i64 7014}
!566 = !{i64 7025}
!567 = !{i64 7036}
!568 = !{i64 7047}
!569 = !{i64 7058}
!570 = !{i64 7098}
!571 = !{i64 7103}
!572 = !{i64 7105}
!573 = !{i64 7111}
!574 = !{i64 7122}
!575 = !{i64 7133}
!576 = !{i64 7144}
!577 = !{i64 7155}
!578 = !{i64 7166}
!579 = !{i64 7177}
!580 = !{i64 7188}
!581 = !{i64 7199}
!582 = !{i64 7210}
!583 = !{i64 7221}
!584 = !{i64 7232}
!585 = !{i64 7243}
!586 = !{i64 7254}
!587 = !{i64 7265}
!588 = !{i64 7276}
!589 = !{i64 7287}
!590 = !{i64 7298}
!591 = !{i64 7309}
!592 = !{i64 7320}
!593 = !{i64 7331}
!594 = !{i64 7342}
!595 = !{i64 7353}
!596 = !{i64 7364}
!597 = !{i64 7375}
!598 = !{i64 7386}
!599 = !{i64 7397}
!600 = !{i64 7408}
!601 = !{i64 7419}
!602 = !{i64 7430}
!603 = !{i64 7441}
!604 = !{i64 7452}
!605 = !{i64 7468}
!606 = !{i64 7481}
!607 = !{i64 7513}
!608 = !{i64 7527}
!609 = !{i64 7543}
!610 = !{i64 7562}
!611 = !{i64 7577}
!612 = !{i64 7582}
!613 = !{i64 7593}
!614 = !{i64 7611}
!615 = !{i64 7612}
!616 = !{i64 7625}
!617 = !{i64 7633}
!618 = !{i64 7641}
!619 = !{i64 7652}
!620 = !{i64 7646}
!621 = !{i64 7663}
!622 = !{i64 7671}
!623 = !{i64 7679}
!624 = !{i64 7684}
!625 = !{i64 7688}
!626 = !{i64 7692}
!627 = !{i64 7697}
!628 = !{i64 7702}
!629 = !{i64 7724}
!630 = !{i64 7729}
!631 = !{i64 7736}
!632 = !{i64 7741}
!633 = !{i64 7752}
!634 = !{i64 7759}
!635 = !{i64 7764}
!636 = !{i64 7775}
!637 = !{i64 7778}
!638 = !{i64 7786}
!639 = !{i64 7789}
!640 = !{i64 7791}
!641 = !{i64 7796}
!642 = !{i64 7808}
!643 = !{i64 7812}
!644 = !{i64 7819}
!645 = !{i64 7821}
!646 = !{i64 7826}
!647 = !{i64 7834}
!648 = !{i64 7837}
!649 = !{i64 7839}
!650 = !{i64 7844}
!651 = !{i64 7856}
!652 = !{i64 7864}
!653 = !{i64 7867}
!654 = !{i64 7869}
!655 = !{i64 7874}
!656 = !{i64 7886}
!657 = !{i64 7890}
!658 = !{i64 7894}
!659 = !{i64 7896}
!660 = !{i64 7899}
!661 = !{i64 7907}
!662 = !{i64 7912}
!663 = !{i64 7916}
!664 = !{i64 7920}
!665 = !{i64 7934}
!666 = !{i64 7941}
!667 = !{i64 7945}
!668 = !{i64 7951}
!669 = !{i64 7954}
!670 = !{i64 7983}
!671 = !{i64 7998}
!672 = !{i64 8012}
!673 = !{i64 8025}
!674 = !{i64 8032}
!675 = !{i64 8034}
!676 = !{i64 8040}
!677 = !{i64 8051}
!678 = !{i64 8055}
!679 = !{i64 8072}
!680 = !{i64 8079}
!681 = !{i64 8084}
!682 = !{i64 8089}
!683 = !{i64 8096}
!684 = !{i64 8102}
!685 = !{i64 8107}
!686 = !{i64 8115}
!687 = !{i64 8119}
!688 = !{i64 8140}
!689 = !{i64 8161}
!690 = !{i64 8175}
!691 = !{i64 8178}
!692 = !{i64 8186}
!693 = !{i64 8194}
!694 = !{i64 8202}
!695 = !{i64 8225}
!696 = !{i64 8226}
!697 = !{i64 8240}
!698 = !{i64 8251}
!699 = !{i64 8282}
!700 = !{i64 8290}
!701 = !{i64 8293}
!702 = !{i64 8298}
!703 = !{i64 8300}
!704 = !{i64 8306}
!705 = !{i64 8317}
!706 = !{i64 8349}
!707 = !{i64 8381}
!708 = !{i64 8425}
!709 = !{i64 8497}
!710 = !{i64 8429}
!711 = !{i64 8431}
!712 = !{i64 8434}
!713 = !{i64 8437}
!714 = !{i64 8441}
!715 = !{i64 8444}
!716 = !{i64 8448}
!717 = !{i64 8452}
!718 = !{i64 8456}
!719 = !{i64 8460}
!720 = !{i64 8462}
!721 = !{i64 8466}
!722 = !{i64 8473}
!723 = !{i64 8475}
!724 = !{i64 8484}
!725 = !{i64 8573}
!726 = !{i64 8488}
!727 = !{i64 8508}
!728 = !{i64 8510}
!729 = !{i64 8513}
!730 = !{i64 8516}
!731 = !{i64 8520}
!732 = !{i64 8523}
!733 = !{i64 8527}
!734 = !{i64 8531}
!735 = !{i64 8535}
!736 = !{i64 8539}
!737 = !{i64 8541}
!738 = !{i64 8545}
!739 = !{i64 8549}
!740 = !{i64 8551}
!741 = !{i64 8560}
!742 = !{i64 8637}
!743 = !{i64 8564}
!744 = !{i64 8584}
!745 = !{i64 8586}
!746 = !{i64 8589}
!747 = !{i64 8592}
!748 = !{i64 8596}
!749 = !{i64 8599}
!750 = !{i64 8603}
!751 = !{i64 8607}
!752 = !{i64 8611}
!753 = !{i64 8615}
!754 = !{i64 8617}
!755 = !{i64 8621}
!756 = !{i64 8628}
!757 = !{i64 8648}
!758 = !{i64 8650}
!759 = !{i64 8690}
!760 = !{i64 8730}
!761 = !{i64 8770}
!762 = !{i64 8810}
!763 = !{i64 8850}
!764 = !{i64 8890}
!765 = !{i64 8930}
!766 = !{i64 8970}
!767 = !{i64 9010}
!768 = !{i64 9072}
!769 = !{i64 9079}
!770 = !{i64 9082}
!771 = !{i64 9084}
!772 = !{i64 9087}
!773 = !{i64 9094}
!774 = !{i64 9097}
!775 = !{i64 9101}
!776 = !{i64 9107}
!777 = !{i64 9114}
!778 = !{i64 9118}
!779 = !{i64 9122}
!780 = !{i64 9135}
!781 = !{i64 9212}
!782 = !{i64 9142}
!783 = !{i64 9144}
!784 = !{i64 9146}
!785 = !{i64 9148}
!786 = !{i64 9152}
!787 = !{i64 9154}
!788 = !{i64 9158}
!789 = !{i64 9162}
!790 = !{i64 9166}
!791 = !{i64 9170}
!792 = !{i64 9172}
!793 = !{i64 9176}
!794 = !{i64 9183}
!795 = !{i64 9185}
!796 = !{i64 9195}
!797 = !{i64 9293}
!798 = !{i64 9202}
!799 = !{i64 9204}
!800 = !{i64 9223}
!801 = !{i64 9225}
!802 = !{i64 9227}
!803 = !{i64 9229}
!804 = !{i64 9233}
!805 = !{i64 9235}
!806 = !{i64 9239}
!807 = !{i64 9243}
!808 = !{i64 9247}
!809 = !{i64 9251}
!810 = !{i64 9253}
!811 = !{i64 9257}
!812 = !{i64 9264}
!813 = !{i64 9266}
!814 = !{i64 9276}
!815 = !{i64 9374}
!816 = !{i64 9283}
!817 = !{i64 9285}
!818 = !{i64 9304}
!819 = !{i64 9306}
!820 = !{i64 9308}
!821 = !{i64 9310}
!822 = !{i64 9314}
!823 = !{i64 9316}
!824 = !{i64 9320}
!825 = !{i64 9324}
!826 = !{i64 9328}
!827 = !{i64 9332}
!828 = !{i64 9334}
!829 = !{i64 9338}
!830 = !{i64 9345}
!831 = !{i64 9347}
!832 = !{i64 9357}
!833 = !{i64 9455}
!834 = !{i64 9364}
!835 = !{i64 9366}
!836 = !{i64 9385}
!837 = !{i64 9387}
!838 = !{i64 9389}
!839 = !{i64 9391}
!840 = !{i64 9395}
!841 = !{i64 9397}
!842 = !{i64 9401}
!843 = !{i64 9405}
!844 = !{i64 9409}
!845 = !{i64 9413}
!846 = !{i64 9415}
!847 = !{i64 9419}
!848 = !{i64 9426}
!849 = !{i64 9428}
!850 = !{i64 9438}
!851 = !{i64 9536}
!852 = !{i64 9445}
!853 = !{i64 9447}
!854 = !{i64 9466}
!855 = !{i64 9468}
!856 = !{i64 9470}
!857 = !{i64 9472}
!858 = !{i64 9476}
!859 = !{i64 9478}
!860 = !{i64 9482}
!861 = !{i64 9486}
!862 = !{i64 9490}
!863 = !{i64 9494}
!864 = !{i64 9496}
!865 = !{i64 9500}
!866 = !{i64 9507}
!867 = !{i64 9509}
!868 = !{i64 9519}
!869 = !{i64 9617}
!870 = !{i64 9526}
!871 = !{i64 9528}
!872 = !{i64 9547}
!873 = !{i64 9549}
!874 = !{i64 9551}
!875 = !{i64 9553}
!876 = !{i64 9557}
!877 = !{i64 9559}
!878 = !{i64 9563}
!879 = !{i64 9567}
!880 = !{i64 9571}
!881 = !{i64 9575}
!882 = !{i64 9577}
!883 = !{i64 9581}
!884 = !{i64 9588}
!885 = !{i64 9590}
!886 = !{i64 9600}
!887 = !{i64 9698}
!888 = !{i64 9607}
!889 = !{i64 9609}
!890 = !{i64 9628}
!891 = !{i64 9630}
!892 = !{i64 9632}
!893 = !{i64 9634}
!894 = !{i64 9638}
!895 = !{i64 9640}
!896 = !{i64 9644}
!897 = !{i64 9648}
!898 = !{i64 9652}
!899 = !{i64 9656}
!900 = !{i64 9658}
!901 = !{i64 9662}
!902 = !{i64 9669}
!903 = !{i64 9671}
!904 = !{i64 9681}
!905 = !{i64 9779}
!906 = !{i64 9688}
!907 = !{i64 9690}
!908 = !{i64 9709}
!909 = !{i64 9711}
!910 = !{i64 9713}
!911 = !{i64 9715}
!912 = !{i64 9719}
!913 = !{i64 9721}
!914 = !{i64 9725}
!915 = !{i64 9729}
!916 = !{i64 9733}
!917 = !{i64 9737}
!918 = !{i64 9739}
!919 = !{i64 9743}
!920 = !{i64 9750}
!921 = !{i64 9752}
!922 = !{i64 9762}
!923 = !{i64 9860}
!924 = !{i64 9769}
!925 = !{i64 9771}
!926 = !{i64 9790}
!927 = !{i64 9792}
!928 = !{i64 9794}
!929 = !{i64 9796}
!930 = !{i64 9800}
!931 = !{i64 9802}
!932 = !{i64 9806}
!933 = !{i64 9810}
!934 = !{i64 9814}
!935 = !{i64 9818}
!936 = !{i64 9820}
!937 = !{i64 9824}
!938 = !{i64 9831}
!939 = !{i64 9833}
!940 = !{i64 9843}
!941 = !{i64 9922}
!942 = !{i64 9850}
!943 = !{i64 9852}
!944 = !{i64 9871}
!945 = !{i64 9873}
!946 = !{i64 9875}
!947 = !{i64 9877}
!948 = !{i64 9881}
!949 = !{i64 9883}
!950 = !{i64 9887}
!951 = !{i64 9891}
!952 = !{i64 9895}
!953 = !{i64 9899}
!954 = !{i64 9901}
!955 = !{i64 9905}
!956 = !{i64 9912}
!957 = !{i64 9914}
!958 = !{i64 9933}
!959 = !{i64 9935}
!960 = !{i64 10006}
!961 = !{i64 10068}
!962 = !{i64 10130}
!963 = !{i64 10192}
!964 = !{i64 10254}
!965 = !{i64 10325}
!966 = !{i64 10378}
!967 = !{i64 10440}
!968 = !{i64 10511}
!969 = !{i64 10582}
!970 = !{i64 10625}
!971 = !{i64 10701}
!972 = !{i64 10632}
!973 = !{i64 10634}
!974 = !{i64 10637}
!975 = !{i64 10640}
!976 = !{i64 10644}
!977 = !{i64 10647}
!978 = !{i64 10651}
!979 = !{i64 10655}
!980 = !{i64 10659}
!981 = !{i64 10663}
!982 = !{i64 10665}
!983 = !{i64 10669}
!984 = !{i64 10673}
!985 = !{i64 10675}
!986 = !{i64 10684}
!987 = !{i64 10781}
!988 = !{i64 10691}
!989 = !{i64 10693}
!990 = !{i64 10712}
!991 = !{i64 10714}
!992 = !{i64 10717}
!993 = !{i64 10720}
!994 = !{i64 10724}
!995 = !{i64 10727}
!996 = !{i64 10731}
!997 = !{i64 10735}
!998 = !{i64 10739}
!999 = !{i64 10743}
!1000 = !{i64 10745}
!1001 = !{i64 10749}
!1002 = !{i64 10753}
!1003 = !{i64 10755}
!1004 = !{i64 10764}
!1005 = !{i64 10861}
!1006 = !{i64 10771}
!1007 = !{i64 10773}
!1008 = !{i64 10792}
!1009 = !{i64 10794}
!1010 = !{i64 10797}
!1011 = !{i64 10800}
!1012 = !{i64 10804}
!1013 = !{i64 10807}
!1014 = !{i64 10811}
!1015 = !{i64 10815}
!1016 = !{i64 10819}
!1017 = !{i64 10823}
!1018 = !{i64 10825}
!1019 = !{i64 10829}
!1020 = !{i64 10833}
!1021 = !{i64 10835}
!1022 = !{i64 10844}
!1023 = !{i64 10941}
!1024 = !{i64 10851}
!1025 = !{i64 10853}
!1026 = !{i64 10872}
!1027 = !{i64 10874}
!1028 = !{i64 10877}
!1029 = !{i64 10880}
!1030 = !{i64 10884}
!1031 = !{i64 10887}
!1032 = !{i64 10891}
!1033 = !{i64 10895}
!1034 = !{i64 10899}
!1035 = !{i64 10903}
!1036 = !{i64 10905}
!1037 = !{i64 10909}
!1038 = !{i64 10913}
!1039 = !{i64 10915}
!1040 = !{i64 10924}
!1041 = !{i64 11021}
!1042 = !{i64 10931}
!1043 = !{i64 10933}
!1044 = !{i64 10952}
!1045 = !{i64 10954}
!1046 = !{i64 10957}
!1047 = !{i64 10960}
!1048 = !{i64 10964}
!1049 = !{i64 10967}
!1050 = !{i64 10971}
!1051 = !{i64 10975}
!1052 = !{i64 10979}
!1053 = !{i64 10983}
!1054 = !{i64 10985}
!1055 = !{i64 10989}
!1056 = !{i64 10993}
!1057 = !{i64 10995}
!1058 = !{i64 11004}
!1059 = !{i64 11101}
!1060 = !{i64 11011}
!1061 = !{i64 11013}
!1062 = !{i64 11032}
!1063 = !{i64 11034}
!1064 = !{i64 11037}
!1065 = !{i64 11040}
!1066 = !{i64 11044}
!1067 = !{i64 11047}
!1068 = !{i64 11051}
!1069 = !{i64 11055}
!1070 = !{i64 11059}
!1071 = !{i64 11063}
!1072 = !{i64 11065}
!1073 = !{i64 11069}
!1074 = !{i64 11073}
!1075 = !{i64 11075}
!1076 = !{i64 11084}
!1077 = !{i64 11181}
!1078 = !{i64 11091}
!1079 = !{i64 11093}
!1080 = !{i64 11112}
!1081 = !{i64 11114}
!1082 = !{i64 11117}
!1083 = !{i64 11120}
!1084 = !{i64 11124}
!1085 = !{i64 11127}
!1086 = !{i64 11131}
!1087 = !{i64 11135}
!1088 = !{i64 11139}
!1089 = !{i64 11143}
!1090 = !{i64 11145}
!1091 = !{i64 11149}
!1092 = !{i64 11153}
!1093 = !{i64 11155}
!1094 = !{i64 11164}
!1095 = !{i64 11261}
!1096 = !{i64 11171}
!1097 = !{i64 11173}
!1098 = !{i64 11192}
!1099 = !{i64 11194}
!1100 = !{i64 11197}
!1101 = !{i64 11200}
!1102 = !{i64 11204}
!1103 = !{i64 11207}
!1104 = !{i64 11211}
!1105 = !{i64 11215}
!1106 = !{i64 11219}
!1107 = !{i64 11223}
!1108 = !{i64 11225}
!1109 = !{i64 11229}
!1110 = !{i64 11233}
!1111 = !{i64 11235}
!1112 = !{i64 11244}
!1113 = !{i64 11341}
!1114 = !{i64 11251}
!1115 = !{i64 11253}
!1116 = !{i64 11272}
!1117 = !{i64 11274}
!1118 = !{i64 11277}
!1119 = !{i64 11280}
!1120 = !{i64 11284}
!1121 = !{i64 11287}
!1122 = !{i64 11291}
!1123 = !{i64 11295}
!1124 = !{i64 11299}
!1125 = !{i64 11303}
!1126 = !{i64 11305}
!1127 = !{i64 11309}
!1128 = !{i64 11313}
!1129 = !{i64 11315}
!1130 = !{i64 11324}
!1131 = !{i64 11421}
!1132 = !{i64 11331}
!1133 = !{i64 11333}
!1134 = !{i64 11352}
!1135 = !{i64 11354}
!1136 = !{i64 11357}
!1137 = !{i64 11360}
!1138 = !{i64 11364}
!1139 = !{i64 11367}
!1140 = !{i64 11371}
!1141 = !{i64 11375}
!1142 = !{i64 11379}
!1143 = !{i64 11383}
!1144 = !{i64 11385}
!1145 = !{i64 11389}
!1146 = !{i64 11393}
!1147 = !{i64 11407}
!1148 = !{i64 11485}
!1149 = !{i64 11411}
!1150 = !{i64 11413}
!1151 = !{i64 11432}
!1152 = !{i64 11434}
!1153 = !{i64 11437}
!1154 = !{i64 11440}
!1155 = !{i64 11444}
!1156 = !{i64 11447}
!1157 = !{i64 11451}
!1158 = !{i64 11455}
!1159 = !{i64 11459}
!1160 = !{i64 11463}
!1161 = !{i64 11465}
!1162 = !{i64 11469}
!1163 = !{i64 11476}
!1164 = !{i64 11496}
!1165 = !{i64 11498}
!1166 = !{i64 11562}
!1167 = !{i64 11626}
!1168 = !{i64 11690}
!1169 = !{i64 11925}
!1170 = !{i64 11994}
!1171 = !{i64 11929}
!1172 = !{i64 11931}
!1173 = !{i64 11934}
!1174 = !{i64 11937}
!1175 = !{i64 11941}
!1176 = !{i64 11944}
!1177 = !{i64 11948}
!1178 = !{i64 11952}
!1179 = !{i64 11956}
!1180 = !{i64 11960}
!1181 = !{i64 11962}
!1182 = !{i64 11966}
!1183 = !{i64 11970}
!1184 = !{i64 11972}
!1185 = !{i64 11981}
!1186 = !{i64 12074}
!1187 = !{i64 11985}
!1188 = !{i64 12005}
!1189 = !{i64 12007}
!1190 = !{i64 12010}
!1191 = !{i64 12013}
!1192 = !{i64 12017}
!1193 = !{i64 12020}
!1194 = !{i64 12024}
!1195 = !{i64 12028}
!1196 = !{i64 12032}
!1197 = !{i64 12036}
!1198 = !{i64 12038}
!1199 = !{i64 12042}
!1200 = !{i64 12049}
!1201 = !{i64 12051}
!1202 = !{i64 12061}
!1203 = !{i64 12157}
!1204 = !{i64 12065}
!1205 = !{i64 12085}
!1206 = !{i64 12087}
!1207 = !{i64 12090}
!1208 = !{i64 12093}
!1209 = !{i64 12097}
!1210 = !{i64 12100}
!1211 = !{i64 12104}
!1212 = !{i64 12108}
!1213 = !{i64 12112}
!1214 = !{i64 12116}
!1215 = !{i64 12118}
!1216 = !{i64 12122}
!1217 = !{i64 12129}
!1218 = !{i64 12131}
!1219 = !{i64 12141}
!1220 = !{i64 12240}
!1221 = !{i64 12148}
!1222 = !{i64 12168}
!1223 = !{i64 12170}
!1224 = !{i64 12173}
!1225 = !{i64 12176}
!1226 = !{i64 12180}
!1227 = !{i64 12183}
!1228 = !{i64 12187}
!1229 = !{i64 12191}
!1230 = !{i64 12195}
!1231 = !{i64 12199}
!1232 = !{i64 12201}
!1233 = !{i64 12205}
!1234 = !{i64 12212}
!1235 = !{i64 12251}
!1236 = !{i64 12297}
!1237 = !{i64 12315}
!1238 = !{i64 12352}
!1239 = !{i64 12369}
!1240 = !{i64 12377}
!1241 = !{i64 12394}
!1242 = !{i64 12411}
!1243 = !{i64 12427}
!1244 = !{i64 12450}
!1245 = !{i64 12455}
!1246 = !{i64 12464}
!1247 = !{i64 12473}
!1248 = !{i64 12485}
!1249 = !{i64 12490}
!1250 = !{i64 12493}
!1251 = !{i64 12500}
!1252 = !{i64 12504}
!1253 = !{i64 12507}
!1254 = !{i64 12509}
!1255 = !{i64 12518}
!1256 = !{i64 12527}
!1257 = !{i64 12530}
!1258 = !{i64 12537}
!1259 = !{i64 12541}
!1260 = !{i64 12544}
!1261 = !{i64 12546}
!1262 = !{i64 12555}
!1263 = !{i64 12564}
!1264 = !{i64 12567}
!1265 = !{i64 12574}
!1266 = !{i64 12578}
!1267 = !{i64 12581}
!1268 = !{i64 12583}
!1269 = !{i64 12592}
!1270 = !{i64 12605}
!1271 = !{i64 12620}
!1272 = !{i64 12625}
!1273 = !{i64 12675}
!1274 = !{i64 12680}
!1275 = !{i64 12687}
!1276 = !{i64 12699}
!1277 = !{i64 12704}
!1278 = !{i64 12637}
!1279 = !{i64 12648}
!1280 = !{i64 12655}
!1281 = !{i64 12659}
!1282 = !{i64 12662}
!1283 = !{i64 12711}
!1284 = !{i64 12715}
!1285 = !{i64 12718}
!1286 = !{i64 12720}
!1287 = !{i64 12729}
!1288 = !{i64 12738}
!1289 = !{i64 12741}
!1290 = !{i64 12748}
!1291 = !{i64 12752}
!1292 = !{i64 12755}
!1293 = !{i64 12757}
!1294 = !{i64 12766}
!1295 = !{i64 12787}
!1296 = !{i64 12795}
!1297 = !{i64 12809}
!1298 = !{i64 12817}
!1299 = !{i64 12827}
!1300 = !{i64 12853}
!1301 = !{i64 12874}
!1302 = !{i64 12879}
!1303 = !{i64 12886}
!1304 = !{i64 12893}
!1305 = !{i64 12903}
!1306 = !{i64 12913}
!1307 = !{i64 12920}
!1308 = !{i64 12931}
!1309 = !{i64 12942}
!1310 = !{i64 12953}
!1311 = !{i64 12964}
!1312 = !{i64 12975}
!1313 = !{i64 12979}
!1314 = !{i64 12986}
!1315 = !{i64 12990}
!1316 = !{i64 12998}
!1317 = !{i64 13002}
!1318 = !{i64 13008}
!1319 = !{i64 13017}
!1320 = !{i64 13020}
!1321 = !{i64 13027}
!1322 = !{i64 13031}
!1323 = !{i64 13034}
!1324 = !{i64 13036}
!1325 = !{i64 13043}
!1326 = !{i64 13046}
!1327 = !{i64 13053}
!1328 = !{i64 13057}
!1329 = !{i64 13060}
!1330 = !{i64 13067}
!1331 = !{i64 13093}
!1332 = !{i64 13118}
!1333 = !{i64 13123}
!1334 = !{i64 13130}
!1335 = !{i64 13150}
!1336 = !{i64 13153}
!1337 = !{i64 13157}
!1338 = !{i64 13160}
!1339 = !{i64 13180}
!1340 = !{i64 13195}
!1341 = !{i64 13203}
!1342 = !{i64 13206}
!1343 = !{i64 13214}
!1344 = !{i64 13239}
!1345 = !{i64 13254}
!1346 = !{i64 13262}
!1347 = !{i64 13265}
!1348 = !{i64 13273}
!1349 = !{i64 13280}
!1350 = !{i64 13289}
!1351 = !{i64 13301}
!1352 = !{i64 13313}
!1353 = !{i64 13325}
!1354 = !{i64 13334}
!1355 = !{i64 13346}
!1356 = !{i64 13358}
!1357 = !{i64 13370}
!1358 = !{i64 13379}
!1359 = !{i64 13391}
!1360 = !{i64 13403}
!1361 = !{i64 13415}
!1362 = !{i64 13424}
!1363 = !{i64 13436}
!1364 = !{i64 13448}
!1365 = !{i64 13460}
!1366 = !{i64 13469}
!1367 = !{i64 13481}
!1368 = !{i64 13493}
!1369 = !{i64 13505}
!1370 = !{i64 13514}
!1371 = !{i64 13526}
!1372 = !{i64 13538}
!1373 = !{i64 13550}
!1374 = !{i64 13559}
!1375 = !{i64 13571}
!1376 = !{i64 13583}
!1377 = !{i64 13595}
!1378 = !{i64 13604}
!1379 = !{i64 13616}
!1380 = !{i64 13628}
!1381 = !{i64 13643}
!1382 = !{i64 13656}
!1383 = !{i64 13664}
!1384 = !{i64 13666}
!1385 = !{i64 13670}
!1386 = !{i64 13687}
!1387 = !{i64 13701}
!1388 = !{i64 13711}
!1389 = !{i64 13716}
!1390 = !{i64 13722}
!1391 = !{i64 13727}
!1392 = !{i64 13738}
!1393 = !{i64 13743}
!1394 = !{i64 13754}
!1395 = !{i64 13759}
!1396 = !{i64 13770}
!1397 = !{i64 13775}
!1398 = !{i64 13782}
!1399 = !{i64 13786}
!1400 = !{i64 13791}
!1401 = !{i64 13798}
!1402 = !{i64 13802}
!1403 = !{i64 13807}
!1404 = !{i64 13814}
!1405 = !{i64 13818}
!1406 = !{i64 13823}
!1407 = !{i64 13829}
!1408 = !{i64 13830}
!1409 = !{i64 13834}
!1410 = !{i64 13845}
!1411 = !{i64 13850}
!1412 = !{i64 13861}
!1413 = !{i64 13866}
!1414 = !{i64 13871}
!1415 = !{i64 13873}
!1416 = !{i64 13879}
!1417 = !{i64 13880}
!1418 = !{i64 13891}
!1419 = !{i64 13899}
!1420 = !{i64 13932}
!1421 = !{i64 13939}
!1422 = !{i64 13943}
!1423 = !{i64 13981}
!1424 = !{i64 14000}
!1425 = !{i64 14003}
!1426 = !{i64 14009}
!1427 = !{i64 14013}
!1428 = !{i64 14017}
!1429 = !{i64 14022}
!1430 = !{i64 14026}
!1431 = !{i64 14029}
!1432 = !{i64 14033}
!1433 = !{i64 14037}
!1434 = !{i64 14040}
!1435 = !{i64 13978}
!1436 = !{i64 14042}
!1437 = !{i64 14044}
!1438 = !{i64 14049}
!1439 = !{i64 14057}
!1440 = !{i64 14061}
!1441 = !{i64 14070}
!1442 = !{i64 14075}
!1443 = !{i64 14077}
!1444 = !{i64 14080}
!1445 = !{i64 14083}
!1446 = !{i64 14099}
!1447 = !{i64 14110}
!1448 = !{i64 14115}
!1449 = !{i64 14117}
!1450 = !{i64 14124}
!1451 = !{i64 14143}
!1452 = !{i64 14147}
!1453 = !{i64 14156}
!1454 = !{i64 14158}
!1455 = !{i64 14171}
!1456 = !{i64 14172}
!1457 = !{i64 14185}
!1458 = !{i64 14199}
!1459 = !{i64 14232}
!1460 = !{i64 14243}
!1461 = !{i64 14278}
!1462 = !{i64 14295}
!1463 = !{i64 14297}
!1464 = !{i64 14302}
!1465 = !{i64 14310}
!1466 = !{i64 14314}
!1467 = !{i64 14323}
!1468 = !{i64 14328}
!1469 = !{i64 14330}
!1470 = !{i64 14333}
!1471 = !{i64 14336}
!1472 = !{i64 14351}
!1473 = !{i64 14362}
!1474 = !{i64 14367}
!1475 = !{i64 14370}
!1476 = !{i64 14372}
!1477 = !{i64 14374}
!1478 = !{i64 14386}
!1479 = !{i64 14388}
!1480 = !{i64 14400}
!1481 = !{i64 14420}
!1482 = !{i64 14425}
!1483 = !{i64 14437}
!1484 = !{i64 14441}
!1485 = !{i64 14450}
!1486 = !{i64 14452}
!1487 = !{i64 14467}
!1488 = !{i64 14477}
!1489 = !{i64 14485}
!1490 = !{i64 14489}
!1491 = !{i64 14492}
!1492 = !{i64 14494}
!1493 = !{i64 14500}
!1494 = !{i64 14506}
!1495 = !{i64 14510}
!1496 = !{i64 14498}
!1497 = !{i64 14540}
!1498 = !{i64 14553}
!1499 = !{i64 14568}
!1500 = !{i64 14599}
!1501 = !{i64 14604}
!1502 = !{i64 14658}
!1503 = !{i64 14667}
!1504 = !{i64 14675}
!1505 = !{i64 14678}
!1506 = !{i64 14709}
!1507 = !{i64 14725}
!1508 = !{i64 14743}
!1509 = !{i64 14751}
!1510 = !{i64 14758}
!1511 = !{i64 14765}
!1512 = !{i64 14771}
!1513 = !{i64 14774}
!1514 = !{i64 14792}
!1515 = !{i64 14795}
!1516 = !{i64 14803}
!1517 = !{i64 14805}
!1518 = !{i64 14809}
!1519 = !{i64 14816}
!1520 = !{i64 14822}
!1521 = !{i64 14830}
!1522 = !{i64 14850}
!1523 = !{i64 14860}
!1524 = !{i64 14882}
!1525 = !{i64 14894}
!1526 = !{i64 14897}
!1527 = !{i64 14902}
!1528 = !{i64 14905}
!1529 = !{i64 14909}
!1530 = !{i64 14916}
!1531 = !{i64 14918}
!1532 = !{i64 14924}
!1533 = !{i64 14930}
!1534 = !{i64 14932}
!1535 = !{i64 14944}
!1536 = !{i64 14949}
!1537 = !{i64 14954}
!1538 = !{i64 14966}
!1539 = !{i64 14977}
!1540 = !{i64 14987}
!1541 = !{i64 14992}
!1542 = !{i64 14996}
!1543 = !{i64 14998}
!1544 = !{i64 15000}
!1545 = !{i64 15007}
!1546 = !{i64 15009}
!1547 = !{i64 15016}
!1548 = !{i64 15021}
!1549 = !{i64 15023}
!1550 = !{i64 15025}
!1551 = !{i64 15032}
!1552 = !{i64 15043}
!1553 = !{i64 15048}
!1554 = !{i64 15053}
!1555 = !{i64 15061}
!1556 = !{i64 15068}
!1557 = !{i64 15071}
!1558 = !{i64 15074}
!1559 = !{i64 15079}
!1560 = !{i64 15097}
!1561 = !{i64 15109}
!1562 = !{i64 15117}
!1563 = !{i64 15137}
!1564 = !{i64 15181}
!1565 = !{i64 15186}
!1566 = !{i64 15217}
!1567 = !{i64 15250}
!1568 = !{i64 15260}
!1569 = !{i64 15265}
!1570 = !{i64 15280}
!1571 = !{i64 15288}
!1572 = !{i64 15293}
!1573 = !{i64 15301}
!1574 = !{i64 15319}
!1575 = !{i64 15324}
!1576 = !{i64 15329}
!1577 = !{i64 15335}
!1578 = !{i64 15336}
!1579 = !{i64 15345}
!1580 = !{i64 15367}
!1581 = !{i64 15392}
!1582 = !{i64 15399}
!1583 = !{i64 15402}
!1584 = !{i64 15417}
!1585 = !{i64 15419}
!1586 = !{i64 15421}
!1587 = !{i64 15428}
!1588 = !{i64 15430}
!1589 = !{i64 15437}
!1590 = !{i64 15440}
!1591 = !{i64 15444}
!1592 = !{i64 15447}
!1593 = !{i64 15463}
!1594 = !{i64 15468}
!1595 = !{i64 15474}
!1596 = !{i64 15484}
!1597 = !{i64 15489}
!1598 = !{i64 15496}
!1599 = !{i64 15501}
!1600 = !{i64 15525}
!1601 = !{i64 15530}
!1602 = !{i64 15532}
!1603 = !{i64 15542}
!1604 = !{i64 15547}
!1605 = !{i64 15554}
!1606 = !{i64 15559}
!1607 = !{i64 15566}
!1608 = !{i64 15573}
!1609 = !{i64 15583}
!1610 = !{i64 15588}
!1611 = !{i64 15601}
!1612 = !{i64 15611}
!1613 = !{i64 15632}
!1614 = !{i64 15637}
!1615 = !{i64 15643}
!1616 = !{i64 15650}
!1617 = !{i64 15655}
!1618 = !{i64 15662}
!1619 = !{i64 15667}
!1620 = !{i64 15691}
!1621 = !{i64 15696}
!1622 = !{i64 15698}
!1623 = !{i64 15705}
!1624 = !{i64 15710}
!1625 = !{i64 15717}
!1626 = !{i64 15722}
!1627 = !{i64 15729}
!1628 = !{i64 15736}
!1629 = !{i64 15746}
!1630 = !{i64 15751}
!1631 = !{i64 15764}
!1632 = !{i64 15765}
!1633 = !{i64 15774}
!1634 = !{i64 15782}
!1635 = !{i64 15784}
!1636 = !{i64 15796}
!1637 = !{i64 15800}
!1638 = !{i64 15802}
!1639 = !{i64 15808}
!1640 = !{i64 15810}
!1641 = !{i64 15812}
!1642 = !{i64 15815}
!1643 = !{i64 15822}
!1644 = !{i64 15827}
!1645 = !{i64 15830}
!1646 = !{i64 15834}
!1647 = !{i64 15837}
!1648 = !{i64 15859}
!1649 = !{i64 15862}
!1650 = !{i64 15853}
!1651 = !{i64 15864}
!1652 = !{i64 15871}
!1653 = !{i64 15873}
!1654 = !{i64 15880}
!1655 = !{i64 15883}
!1656 = !{i64 15887}
!1657 = !{i64 15890}
!1658 = !{i64 15847}
!1659 = !{i64 15906}
!1660 = !{i64 15911}
!1661 = !{i64 15929}
!1662 = !{i64 15936}
!1663 = !{i64 15943}
!1664 = !{i64 15945}
!1665 = !{i64 15955}
!1666 = !{i64 15962}
!1667 = !{i64 15964}
!1668 = !{i64 15971}
!1669 = !{i64 15978}
!1670 = !{i64 15985}
!1671 = !{i64 15992}
!1672 = !{i64 16002}
!1673 = !{i64 16009}
!1674 = !{i64 16016}
!1675 = !{i64 16018}
!1676 = !{i64 16028}
!1677 = !{i64 16035}
!1678 = !{i64 16049}
!1679 = !{i64 16051}
!1680 = !{i64 16058}
!1681 = !{i64 16065}
!1682 = !{i64 16090}
!1683 = !{i64 16100}
!1684 = !{i64 16121}
!1685 = !{i64 16126}
!1686 = !{i64 16141}
!1687 = !{i64 16157}
!1688 = !{i64 16167}
!1689 = !{i64 16176}
!1690 = !{i64 16187}
!1691 = !{i64 16201}
!1692 = !{i64 16208}
!1693 = !{i64 16213}
!1694 = !{i64 16220}
!1695 = !{i64 16224}
!1696 = !{i64 16226}
!1697 = !{i64 16228}
!1698 = !{i64 16234}
!1699 = !{i64 16260}
!1700 = !{i64 16271}
!1701 = !{i64 16276}
!1702 = !{i64 16287}
!1703 = !{i64 16292}
!1704 = !{i64 16303}
!1705 = !{i64 16308}
!1706 = !{i64 16319}
!1707 = !{i64 16343}
!1708 = !{i64 16364}
!1709 = !{i64 16368}
!1710 = !{i64 16371}
!1711 = !{i64 16374}
!1712 = !{i64 16376}
!1713 = !{i64 16379}
!1714 = !{i64 16399}
!1715 = !{i64 16404}
!1716 = !{i64 16415}
!1717 = !{i64 16420}
!1718 = !{i64 16431}
!1719 = !{i64 16436}
!1720 = !{i64 16447}
!1721 = !{i64 16452}
!1722 = !{i64 16463}
!1723 = !{i64 16468}
!1724 = !{i64 16479}
!1725 = !{i64 16484}
!1726 = !{i64 16495}
!1727 = !{i64 16500}
!1728 = !{i64 16511}
!1729 = !{i64 16516}
!1730 = !{i64 16527}
!1731 = !{i64 16532}
!1732 = !{i64 16543}
!1733 = !{i64 16548}
!1734 = !{i64 16559}
!1735 = !{i64 16564}
!1736 = !{i64 16575}
!1737 = !{i64 16580}
!1738 = !{i64 16591}
!1739 = !{i64 16596}
!1740 = !{i64 16607}
!1741 = !{i64 16612}
!1742 = !{i64 16623}
!1743 = !{i64 16628}
!1744 = !{i64 16639}
!1745 = !{i64 16644}
!1746 = !{i64 16655}
!1747 = !{i64 16660}
!1748 = !{i64 16671}
!1749 = !{i64 16676}
!1750 = !{i64 16687}
!1751 = !{i64 16692}
!1752 = !{i64 16703}
!1753 = !{i64 16708}
!1754 = !{i64 16719}
!1755 = !{i64 16724}
!1756 = !{i64 16735}
!1757 = !{i64 16740}
!1758 = !{i64 16751}
!1759 = !{i64 16756}
!1760 = !{i64 16767}
!1761 = !{i64 16772}
!1762 = !{i64 16783}
!1763 = !{i64 16788}
!1764 = !{i64 16795}
!1765 = !{i64 16799}
!1766 = !{i64 16801}
!1767 = !{i64 16806}
!1768 = !{i64 16815}
!1769 = !{i64 16817}
!1770 = !{i64 16822}
!1771 = !{i64 16831}
!1772 = !{i64 16833}
!1773 = !{i64 16838}
!1774 = !{i64 16839}
!1775 = !{i64 16842}
!1776 = !{i64 16847}
!1777 = !{i64 16853}
!1778 = !{i64 16858}
!1779 = !{i64 16869}
!1780 = !{i64 16874}
!1781 = !{i64 16885}
!1782 = !{i64 16890}
!1783 = !{i64 16901}
!1784 = !{i64 16907}
!1785 = !{i64 16912}
!1786 = !{i64 16915}
!1787 = !{i64 16918}
!1788 = !{i64 16923}
!1789 = !{i64 16952}
!1790 = !{i64 16954}
!1791 = !{i64 16956}
!1792 = !{i64 16961}
!1793 = !{i64 16965}
!1794 = !{i64 16968}
!1795 = !{i64 16970}
!1796 = !{i64 16973}
!1797 = !{i64 16977}
!1798 = !{i64 16979}
!1799 = !{i64 16983}
!1800 = !{i64 16999}
!1801 = !{i64 17009}
!1802 = !{i64 17014}
!1803 = !{i64 17020}
!1804 = !{i64 17034}
!1805 = !{i64 17039}
!1806 = !{i64 17043}
!1807 = !{i64 17051}
!1808 = !{i64 17054}
!1809 = !{i64 17056}
!1810 = !{i64 17065}
!1811 = !{i64 17066}
!1812 = !{i64 17083}
!1813 = !{i64 17101}
!1814 = !{i64 17137}
!1815 = !{i64 17142}
!1816 = !{i64 17174}
!1817 = !{i64 17179}
!1818 = !{i64 17183}
!1819 = !{i64 17196}
!1820 = !{i64 17216}
!1821 = !{i64 17225}
!1822 = !{i64 17230}
!1823 = !{i64 17233}
!1824 = !{i64 17236}
!1825 = !{i64 17238}
!1826 = !{i64 17270}
!1827 = !{i64 17275}
!1828 = !{i64 17278}
!1829 = !{i64 17295}
!1830 = !{i64 17300}
!1831 = !{i64 17304}
!1832 = !{i64 17309}
!1833 = !{i64 17312}
!1834 = !{i64 17314}
!1835 = !{i64 17346}
!1836 = !{i64 17351}
!1837 = !{i64 17354}
!1838 = !{i64 17371}
!1839 = !{i64 17376}
!1840 = !{i64 17380}
!1841 = !{i64 17382}
!1842 = !{i64 17385}
!1843 = !{i64 17387}
!1844 = !{i64 17419}
!1845 = !{i64 17424}
!1846 = !{i64 17427}
!1847 = !{i64 17444}
!1848 = !{i64 17449}
!1849 = !{i64 17453}
!1850 = !{i64 17458}
!1851 = !{i64 17460}
!1852 = !{i64 17463}
!1853 = !{i64 17480}
!1854 = !{i64 17485}
!1855 = !{i64 17492}
!1856 = !{i64 17518}
!1857 = !{i64 17527}
!1858 = !{i64 17552}
!1859 = !{i64 17563}
!1860 = !{i64 17564}
!1861 = !{i64 17570}
!1862 = !{i64 17584}
!1863 = !{i64 17608}
!1864 = !{i64 17620}
!1865 = !{i64 17632}
!1866 = !{i64 17664}
!1867 = !{i64 17677}
!1868 = !{i64 17681}
!1869 = !{i64 17701}
!1870 = !{i64 17719}
!1871 = !{i64 17736}
!1872 = !{i64 17744}
!1873 = !{i64 17772}
!1874 = !{i64 17785}
!1875 = !{i64 17809}
!1876 = !{i64 17822}
!1877 = !{i64 17846}
!1878 = !{i64 17859}
!1879 = !{i64 17883}
!1880 = !{i64 17896}
!1881 = !{i64 17920}
!1882 = !{i64 17933}
!1883 = !{i64 17957}
!1884 = !{i64 17966}
!1885 = !{i64 17990}
!1886 = !{i64 17999}
!1887 = !{i64 18023}
!1888 = !{i64 18030}
!1889 = !{i64 18056}
!1890 = !{i64 18061}
!1891 = !{i64 18063}
!1892 = !{i64 18066}
!1893 = !{i64 18085}
!1894 = !{i64 18086}
!1895 = !{i64 18103}
!1896 = !{i64 18163}
!1897 = !{i64 18176}
!1898 = !{i64 18197}
!1899 = !{i64 18207}
!1900 = !{i64 18210}
!1901 = !{i64 18212}
!1902 = !{i64 18216}
!1903 = !{i64 18218}
!1904 = !{i64 18250}
!1905 = !{i64 18255}
!1906 = !{i64 18258}
!1907 = !{i64 18275}
!1908 = !{i64 18280}
!1909 = !{i64 18283}
!1910 = !{i64 18288}
!1911 = !{i64 18291}
!1912 = !{i64 18293}
!1913 = !{i64 18297}
!1914 = !{i64 18299}
!1915 = !{i64 18331}
!1916 = !{i64 18336}
!1917 = !{i64 18339}
!1918 = !{i64 18356}
!1919 = !{i64 18361}
!1920 = !{i64 18364}
!1921 = !{i64 18369}
!1922 = !{i64 18372}
!1923 = !{i64 18374}
!1924 = !{i64 18378}
!1925 = !{i64 18380}
!1926 = !{i64 18412}
!1927 = !{i64 18417}
!1928 = !{i64 18420}
!1929 = !{i64 18437}
!1930 = !{i64 18442}
!1931 = !{i64 18445}
!1932 = !{i64 18450}
!1933 = !{i64 18452}
!1934 = !{i64 18456}
!1935 = !{i64 18458}
!1936 = !{i64 18461}
!1937 = !{i64 18478}
!1938 = !{i64 18483}
!1939 = !{i64 18486}
!1940 = !{i64 18488}
!1941 = !{i64 18492}
!1942 = !{i64 18496}
!1943 = !{i64 18498}
!1944 = !{i64 18531}
!1945 = !{i64 18541}
!1946 = !{i64 18546}
!1947 = !{i64 18551}
!1948 = !{i64 18553}
!1949 = !{i64 18578}
!1950 = !{i64 18584}
!1951 = !{i64 18591}
!1952 = !{i64 18596}
!1953 = !{i64 18600}
!1954 = !{i64 18631}
!1955 = !{i64 18636}
!1956 = !{i64 18641}
!1957 = !{i64 18652}
!1958 = !{i64 18653}
!1959 = !{i64 18664}
!1960 = !{i64 18676}
!1961 = !{i64 18708}
!1962 = !{i64 18713}
!1963 = !{i64 18745}
!1964 = !{i64 18750}
!1965 = !{i64 18782}
!1966 = !{i64 18787}
!1967 = !{i64 18819}
!1968 = !{i64 18840}
!1969 = !{i64 18845}
!1970 = !{i64 18865}
!1971 = !{i64 18870}
!1972 = !{i64 18880}
!1973 = !{i64 18885}
!1974 = !{i64 18888}
!1975 = !{i64 18891}
!1976 = !{i64 18893}
!1977 = !{i64 18917}
!1978 = !{i64 18925}
!1979 = !{i64 18927}
!1980 = !{i64 18931}
!1981 = !{i64 18954}
!1982 = !{i64 18972}
!1983 = !{i64 18984}
!1984 = !{i64 18996}
!1985 = !{i64 19018}
!1986 = !{i64 19023}
!1987 = !{i64 19043}
!1988 = !{i64 19051}
!1989 = !{i64 19053}
!1990 = !{i64 19058}
!1991 = !{i64 19078}
!1992 = !{i64 19093}
!1993 = !{i64 19096}
!1994 = !{i64 19101}
!1995 = !{i64 19111}
!1996 = !{i64 19114}
!1997 = !{i64 19124}
!1998 = !{i64 19128}
!1999 = !{i64 19133}
!2000 = !{i64 19135}
!2001 = !{i64 19138}
!2002 = !{i64 19142}
!2003 = !{i64 19158}
!2004 = !{i64 19172}
!2005 = !{i64 19186}
!2006 = !{i64 19207}
!2007 = !{i64 19210}
!2008 = !{i64 19219}
!2009 = !{i64 19235}
!2010 = !{i64 19253}
!2011 = !{i64 19267}
!2012 = !{i64 19312}
!2013 = !{i64 19330}
!2014 = !{i64 19337}
!2015 = !{i64 19359}
!2016 = !{i64 19360}
!2017 = !{i64 19377}
!2018 = !{i64 19388}
!2019 = !{i64 19403}
!2020 = !{i64 19406}
!2021 = !{i64 19415}
!2022 = !{i64 19419}
!2023 = !{i64 19423}
!2024 = !{i64 19426}
!2025 = !{i64 19433}
!2026 = !{i64 19437}
!2027 = !{i64 19455}
!2028 = !{i64 19474}
!2029 = !{i64 19503}
!2030 = !{i64 19468}
!2031 = !{i64 19508}
!2032 = !{i64 19512}
!2033 = !{i64 19515}
!2034 = !{i64 19510}
!2035 = !{i64 19523}
!2036 = !{i64 19527}
!2037 = !{i64 19531}
!2038 = !{i64 19538}
!2039 = !{i64 19552}
!2040 = !{i64 19567}
!2041 = !{i64 19581}
!2042 = !{i64 19589}
!2043 = !{i64 19593}
!2044 = !{i64 19596}
!2045 = !{i64 19601}
!2046 = !{i64 19604}
!2047 = !{i64 19606}
!2048 = !{i64 19610}
!2049 = !{i64 19614}
!2050 = !{i64 19617}
!2051 = !{i64 19667}
!2052 = !{i64 19672}
!2053 = !{i64 19682}
!2054 = !{i64 19685}
!2055 = !{i64 19695}
!2056 = !{i64 19699}
!2057 = !{i64 19704}
!2058 = !{i64 19706}
!2059 = !{i64 19709}
!2060 = !{i64 19713}
!2061 = !{i64 19714}
!2062 = !{i64 19731}
!2063 = !{i64 19745}
!2064 = !{i64 19754}
!2065 = !{i64 19748}
!2066 = !{i64 19768}
!2067 = !{i64 19775}
!2068 = !{i64 19784}
!2069 = !{i64 19791}
!2070 = !{i64 19798}
!2071 = !{i64 19809}
!2072 = !{i64 19811}
!2073 = !{i64 19818}
!2074 = !{i64 19820}
!2075 = !{i64 19827}
!2076 = !{i64 19829}
!2077 = !{i64 19833}
!2078 = !{i64 19839}
!2079 = !{i64 19843}
!2080 = !{i64 19849}
!2081 = !{i64 19853}
!2082 = !{i64 19859}
!2083 = !{i64 19863}
!2084 = !{i64 19869}
!2085 = !{i64 19876}
!2086 = !{i64 19888}
!2087 = !{i64 19896}
!2088 = !{i64 20271}
!2089 = !{i64 20305}
!2090 = !{i64 20131}
!2091 = !{i64 20138}
!2092 = !{i64 20204}
!2093 = !{i64 19907}
!2094 = !{i64 19914}
!2095 = !{i64 19919}
!2096 = !{i64 19922}
!2097 = !{i64 19928}
!2098 = !{i64 19938}
!2099 = !{i64 19941}
!2100 = !{i64 19954}
!2101 = !{i64 19959}
!2102 = !{i64 19964}
!2103 = !{i64 19966}
!2104 = !{i64 19973}
!2105 = !{i64 19981}
!2106 = !{i64 19992}
!2107 = !{i64 19994}
!2108 = !{i64 20001}
!2109 = !{i64 20009}
!2110 = !{i64 20018}
!2111 = !{i64 20069}
!2112 = !{i64 20025}
!2113 = !{i64 20032}
!2114 = !{i64 20035}
!2115 = !{i64 20044}
!2116 = !{i64 20056}
!2117 = !{i64 20061}
!2118 = !{i64 20064}
!2119 = !{i64 20067}
!2120 = !{i64 20076}
!2121 = !{i64 20083}
!2122 = !{i64 20095}
!2123 = !{i64 20100}
!2124 = !{i64 20112}
!2125 = !{i64 20117}
!2126 = !{i64 20124}
!2127 = !{i64 20145}
!2128 = !{i64 20150}
!2129 = !{i64 20154}
!2130 = !{i64 20161}
!2131 = !{i64 20165}
!2132 = !{i64 20168}
!2133 = !{i64 20172}
!2134 = !{i64 20179}
!2135 = !{i64 20186}
!2136 = !{i64 20190}
!2137 = !{i64 20193}
!2138 = !{i64 20197}
!2139 = !{i64 20214}
!2140 = !{i64 20216}
!2141 = !{i64 20220}
!2142 = !{i64 20227}
!2143 = !{i64 20236}
!2144 = !{i64 20243}
!2145 = !{i64 20247}
!2146 = !{i64 20254}
!2147 = !{i64 20260}
!2148 = !{i64 20278}
!2149 = !{i64 20292}
!2150 = !{i64 20302}
!2151 = !{i64 20318}
!2152 = !{i64 20323}
!2153 = !{i64 20328}
!2154 = !{i64 20330}
!2155 = !{i64 20337}
!2156 = !{i64 20345}
!2157 = !{i64 20356}
!2158 = !{i64 20358}
!2159 = !{i64 20365}
!2160 = !{i64 20373}
!2161 = !{i64 20382}
!2162 = !{i64 20430}
!2163 = !{i64 20389}
!2164 = !{i64 20396}
!2165 = !{i64 20399}
!2166 = !{i64 20408}
!2167 = !{i64 20420}
!2168 = !{i64 20422}
!2169 = !{i64 20425}
!2170 = !{i64 20428}
!2171 = !{i64 20437}
!2172 = !{i64 20444}
!2173 = !{i64 20456}
!2174 = !{i64 20458}
!2175 = !{i64 20470}
!2176 = !{i64 20491}
!2177 = !{i64 20496}
!2178 = !{i64 20498}
!2179 = !{i64 20505}
!2180 = !{i64 20513}
!2181 = !{i64 20544}
!2182 = !{i64 20571}
!2183 = !{i64 20582}
!2184 = !{i64 20585}
!2185 = !{i64 20651}
!2186 = !{i64 20661}
!2187 = !{i64 20668}
!2188 = !{i64 20675}
!2189 = !{i64 20682}
!2190 = !{i64 20684}
!2191 = !{i64 20687}
!2192 = !{i64 20700}
!2193 = !{i64 20705}
!2194 = !{i64 20713}
!2195 = !{i64 20716}
!2196 = !{i64 20723}
!2197 = !{i64 20731}
!2198 = !{i64 20738}
!2199 = !{i64 20752}
!2200 = !{i64 20754}
!2201 = !{i64 20767}
!2202 = !{i64 20772}
!2203 = !{i64 20779}
!2204 = !{i64 20786}
!2205 = !{i64 20793}
!2206 = !{i64 20795}
!2207 = !{i64 20806}
!2208 = !{i64 20813}
!2209 = !{i64 20853}
!2210 = !{i64 20854}
!2211 = !{i64 20881}
!2212 = !{i64 20892}
!2213 = !{i64 20896}
!2214 = !{i64 20943}
!2215 = !{i64 20953}
!2216 = !{i64 20960}
!2217 = !{i64 20967}
!2218 = !{i64 20974}
!2219 = !{i64 20976}
!2220 = !{i64 20979}
!2221 = !{i64 20992}
!2222 = !{i64 20997}
!2223 = !{i64 21005}
!2224 = !{i64 21008}
!2225 = !{i64 21015}
!2226 = !{i64 21023}
!2227 = !{i64 21030}
!2228 = !{i64 21044}
!2229 = !{i64 21046}
!2230 = !{i64 21059}
!2231 = !{i64 21064}
!2232 = !{i64 21071}
!2233 = !{i64 21078}
!2234 = !{i64 21085}
!2235 = !{i64 21087}
!2236 = !{i64 21098}
!2237 = !{i64 21105}
!2238 = !{i64 21145}
!2239 = !{i64 21163}
!2240 = !{i64 21262}
!2241 = !{i64 21311}
!2242 = !{i64 21318}
!2243 = !{i64 21427}
!2244 = !{i64 21434}
!2245 = !{i64 21439}
!2246 = !{i64 21477}
!2247 = !{i64 21503}
!2248 = !{i64 21506}
!2249 = !{i64 21556}
!2250 = !{i64 21603}
!2251 = !{i64 21621}
!2252 = !{i64 21626}
!2253 = !{i64 21630}
!2254 = !{i64 21653}
!2255 = !{i64 21663}
!2256 = !{i64 21668}
!2257 = !{i64 21682}
!2258 = !{i64 21684}
!2259 = !{i64 21686}
!2260 = !{i64 21688}
!2261 = !{i64 21690}
!2262 = !{i64 21701}
!2263 = !{i64 21714}
!2264 = !{i64 21729}
!2265 = !{i64 21730}
!2266 = !{i64 21747}
!2267 = !{i64 21792}
!2268 = !{i64 21802}
!2269 = !{i64 21807}
!2270 = !{i64 21815}
!2271 = !{i64 21768}
!2272 = !{i64 21817}
!2273 = !{i64 21831}
!2274 = !{i64 21836}
!2275 = !{i64 21848}
!2276 = !{i64 21856}
!2277 = !{i64 21860}
!2278 = !{i64 21867}
!2279 = !{i64 21877}
!2280 = !{i64 21888}
!2281 = !{i64 21891}
!2282 = !{i64 21902}
!2283 = !{i64 21948}
!2284 = !{i64 21951}
!2285 = !{i64 21958}
!2286 = !{i64 21979}
!2287 = !{i64 21987}
!2288 = !{i64 22008}
!2289 = !{i64 22013}
!2290 = !{i64 22016}
!2291 = !{i64 22019}
!2292 = !{i64 22024}
!2293 = !{i64 22026}
!2294 = !{i64 22033}
!2295 = !{i64 22038}
!2296 = !{i64 22042}
!2297 = !{i64 22046}
!2298 = !{i64 22051}
!2299 = !{i64 22058}
!2300 = !{i64 22064}
!2301 = !{i64 22066}
!2302 = !{i64 22078}
!2303 = !{i64 22083}
!2304 = !{i64 22111}
!2305 = !{i64 22112}
!2306 = !{i64 22129}
!2307 = !{i64 22177}
!2308 = !{i64 22187}
!2309 = !{i64 22192}
!2310 = !{i64 22200}
!2311 = !{i64 22202}
!2312 = !{i64 22216}
!2313 = !{i64 22221}
!2314 = !{i64 22237}
!2315 = !{i64 22279}
!2316 = !{i64 22282}
!2317 = !{i64 22288}
!2318 = !{i64 22316}
!2319 = !{i64 22320}
!2320 = !{i64 22291}
!2321 = !{i64 22296}
!2322 = !{i64 22306}
!2323 = !{i64 22341}
!2324 = !{i64 22349}
!2325 = !{i64 22370}
!2326 = !{i64 22375}
!2327 = !{i64 22378}
!2328 = !{i64 22382}
!2329 = !{i64 22387}
!2330 = !{i64 22389}
!2331 = !{i64 22396}
!2332 = !{i64 22401}
!2333 = !{i64 22405}
!2334 = !{i64 22409}
!2335 = !{i64 22418}
!2336 = !{i64 22423}
!2337 = !{i64 22425}
!2338 = !{i64 22433}
!2339 = !{i64 22441}
!2340 = !{i64 22448}
!2341 = !{i64 22458}
!2342 = !{i64 22467}
!2343 = !{i64 22471}
!2344 = !{i64 22476}
!2345 = !{i64 22524}
!2346 = !{i64 22549}
!2347 = !{i64 22556}
!2348 = !{i64 22558}
!2349 = !{i64 22564}
!2350 = !{i64 22569}
!2351 = !{i64 22582}
!2352 = !{i64 22587}
!2353 = !{i64 22592}
!2354 = !{i64 22603}
!2355 = !{i64 22604}
!2356 = !{i64 22621}
!2357 = !{i64 22645}
!2358 = !{i64 22650}
!2359 = !{i64 22652}
!2360 = !{i64 22632}
!2361 = !{i64 22661}
!2362 = !{i64 22676}
!2363 = !{i64 22684}
!2364 = !{i64 22681}
!2365 = !{i64 22693}
!2366 = !{i64 22696}
!2367 = !{i64 22698}
!2368 = !{i64 22705}
!2369 = !{i64 22716}
!2370 = !{i64 22734}
!2371 = !{i64 22741}
!2372 = !{i64 22743}
!2373 = !{i64 22750}
!2374 = !{i64 22761}
!2375 = !{i64 22774}
!2376 = !{i64 22779}
!2377 = !{i64 22781}
!2378 = !{i64 22783}
!2379 = !{i64 22787}
!2380 = !{i64 22790}
!2381 = !{i64 22792}
!2382 = !{i64 22797}
!2383 = !{i64 22800}
!2384 = !{i64 22808}
!2385 = !{i64 22810}
!2386 = !{i64 22812}
!2387 = !{i64 22821}
!2388 = !{i64 22835}
!2389 = !{i64 22840}
!2390 = !{i64 22845}
!2391 = !{i64 22848}
!2392 = !{i64 22856}
!2393 = !{i64 22866}
!2394 = !{i64 22871}
!2395 = !{i64 22895}
!2396 = !{i64 22896}
!2397 = !{i64 22900}
!2398 = !{i64 22905}
!2399 = !{i64 22908}
!2400 = !{i64 22910}
!2401 = !{i64 22917}
!2402 = !{i64 22923}
!2403 = !{i64 22944}
!2404 = !{i64 22949}
!2405 = !{i64 22956}
!2406 = !{i64 22985}
!2407 = !{i64 22996}
!2408 = !{i64 23001}
!2409 = !{i64 23014}
!2410 = !{i64 23023}
!2411 = !{i64 23026}
!2412 = !{i64 23035}
!2413 = !{i64 23044}
!2414 = !{i64 23046}
!2415 = !{i64 23068}
!2416 = !{i64 23073}
!2417 = !{i64 23078}
!2418 = !{i64 23085}
!2419 = !{i64 23091}
!2420 = !{i64 23119}
!2421 = !{i64 23177}
!2422 = !{i64 23190}
!2423 = !{i64 23153}
!2424 = !{i64 23227}
!2425 = !{i64 23251}
!2426 = !{i64 23258}
!2427 = !{i64 23278}
!2428 = !{i64 23281}
!2429 = !{i64 23290}
!2430 = !{i64 23297}
!2431 = !{i64 23300}
!2432 = !{i64 23307}
!2433 = !{i64 23318}
!2434 = !{i64 23322}
!2435 = !{i64 23329}
!2436 = !{i64 23339}
!2437 = !{i64 23346}
!2438 = !{i64 23353}
!2439 = !{i64 23364}
!2440 = !{i64 23371}
!2441 = !{i64 23382}
!2442 = !{i64 23393}
!2443 = !{i64 23404}
!2444 = !{i64 23408}
!2445 = !{i64 23415}
!2446 = !{i64 23422}
!2447 = !{i64 23433}
!2448 = !{i64 23444}
!2449 = !{i64 23455}
!2450 = !{i64 23465}
!2451 = !{i64 23479}
!2452 = !{i64 23484}
!2453 = !{i64 23491}
!2454 = !{i64 23502}
!2455 = !{i64 23521}
!2456 = !{i64 23529}
!2457 = !{i64 23532}
!2458 = !{i64 23540}
!2459 = !{i64 23549}
!2460 = !{i64 23560}
!2461 = !{i64 23596}
!2462 = !{i64 23606}
!2463 = !{i64 23617}
!2464 = !{i64 23639}
!2465 = !{i64 23654}
!2466 = !{i64 23657}
!2467 = !{i64 23663}
!2468 = !{i64 23667}
!2469 = !{i64 23670}
!2470 = !{i64 23676}
!2471 = !{i64 23680}
!2472 = !{i64 23683}
!2473 = !{i64 23687}
!2474 = !{i64 23690}
!2475 = !{i64 23704}
!2476 = !{i64 23706}
!2477 = !{i64 23713}
!2478 = !{i64 23721}
!2479 = !{i64 23743}
!2480 = !{i64 23748}
!2481 = !{i64 23753}
!2482 = !{i64 23757}
!2483 = !{i64 23789}
!2484 = !{i64 23810}
!2485 = !{i64 23829}
!2486 = !{i64 23835}
!2487 = !{i64 23838}
!2488 = !{i64 23843}
!2489 = !{i64 23859}
!2490 = !{i64 23877}
!2491 = !{i64 23881}
!2492 = !{i64 23899}
!2493 = !{i64 23904}
!2494 = !{i64 23907}
!2495 = !{i64 23912}
!2496 = !{i64 23914}
!2497 = !{i64 23917}
!2498 = !{i64 23920}
!2499 = !{i64 23924}
!2500 = !{i64 23933}
!2501 = !{i64 23935}
!2502 = !{i64 23961}
!2503 = !{i64 23973}
!2504 = !{i64 23983}
!2505 = !{i64 24002}
!2506 = !{i64 24033}
!2507 = !{i64 24037}
!2508 = !{i64 24052}
!2509 = !{i64 24059}
!2510 = !{i64 24065}
!2511 = !{i64 24081}
!2512 = !{i64 24098}
!2513 = !{i64 24103}
!2514 = !{i64 24106}
!2515 = !{i64 24125}
!2516 = !{i64 24136}
!2517 = !{i64 24155}
!2518 = !{i64 24159}
!2519 = !{i64 24168}
!2520 = !{i64 24170}
!2521 = !{i64 24183}
!2522 = !{i64 24204}
!2523 = !{i64 24219}
!2524 = !{i64 24244}
!2525 = !{i64 24249}
!2526 = !{i64 24252}
!2527 = !{i64 24303}
!2528 = !{i64 24308}
!2529 = !{i64 24311}
!2530 = !{i64 24316}
!2531 = !{i64 24321}
!2532 = !{i64 24323}
!2533 = !{i64 24325}
!2534 = !{i64 24329}
!2535 = !{i64 24332}
!2536 = !{i64 24335}
!2537 = !{i64 24340}
!2538 = !{i64 24363}
!2539 = !{i64 24364}
!2540 = !{i64 24377}
!2541 = !{i64 24395}
!2542 = !{i64 24420}
!2543 = !{i64 24425}
!2544 = !{i64 24428}
!2545 = !{i64 24433}
!2546 = !{i64 24435}
!2547 = !{i64 24452}
!2548 = !{i64 24455}
!2549 = !{i64 24458}
!2550 = !{i64 24460}
!2551 = !{i64 24464}
!2552 = !{i64 24467}
!2553 = !{i64 24469}
!2554 = !{i64 24494}
!2555 = !{i64 24499}
!2556 = !{i64 24502}
!2557 = !{i64 24507}
!2558 = !{i64 24509}
!2559 = !{i64 24594}
!2560 = !{i64 24603}
!2561 = !{i64 24605}
!2562 = !{i64 24624}
!2563 = !{i64 24629}
!2564 = !{i64 24632}
!2565 = !{i64 24646}
!2566 = !{i64 24660}
!2567 = !{i64 24692}
!2568 = !{i64 24701}
!2569 = !{i64 24705}
!2570 = !{i64 24715}
!2571 = !{i64 24717}
!2572 = !{i64 24719}
!2573 = !{i64 24726}
!2574 = !{i64 24729}
!2575 = !{i64 24731}
!2576 = !{i64 24748}
!2577 = !{i64 24769}
!2578 = !{i64 24780}
!2579 = !{i64 24787}
!2580 = !{i64 24812}
!2581 = !{i64 24817}
!2582 = !{i64 24820}
!2583 = !{i64 24834}
!2584 = !{i64 24843}
!2585 = !{i64 24864}
!2586 = !{i64 24872}
!2587 = !{i64 24882}
!2588 = !{i64 24890}
!2589 = !{i64 24895}
!2590 = !{i64 24897}
!2591 = !{i64 24903}
!2592 = !{i64 24919}
!2593 = !{i64 24921}
!2594 = !{i64 24928}
!2595 = !{i64 24930}
!2596 = !{i64 24937}
!2597 = !{i64 24944}
!2598 = !{i64 24949}
!2599 = !{i64 24954}
!2600 = !{i64 24964}
!2601 = !{i64 24975}
!2602 = !{i64 24980}
!2603 = !{i64 24991}
!2604 = !{i64 24996}
!2605 = !{i64 25007}
!2606 = !{i64 25012}
!2607 = !{i64 25023}
!2608 = !{i64 25028}
!2609 = !{i64 25202}
!2610 = !{i64 25203}
!2611 = !{i64 25208}
!2612 = !{i64 25217}
!2613 = !{i64 25227}
!2614 = !{i64 25233}
!2615 = !{i64 25248}
!2616 = !{i64 25253}
!2617 = !{i64 25264}
!2618 = !{i64 25269}
!2619 = !{i64 25275}
!2620 = !{i64 25277}
!2621 = !{i64 25280}
!2622 = !{i64 25281}
!2623 = !{i64 25285}
!2624 = !{i64 25294}
!2625 = !{i64 25297}
!2626 = !{i64 25303}
!2627 = !{i64 25308}
!2628 = !{i64 25316}
!2629 = !{i64 25322}
!2630 = !{i64 25327}
!2631 = !{i64 25389}
!2632 = !{i64 25392}
!2633 = !{i64 25402}
!2634 = !{i64 25404}
!2635 = !{i64 25408}
!2636 = !{i64 25410}
!2637 = !{i64 25413}
!2638 = !{i64 25418}
!2639 = !{i64 25420}
!2640 = !{i64 25424}
!2641 = !{i64 25426}
!2642 = !{i64 25429}
!2643 = !{i64 25452}
!2644 = !{i64 25463}
!2645 = !{i64 25468}
!2646 = !{i64 25479}
!2647 = !{i64 25484}
!2648 = !{i64 25495}
!2649 = !{i64 25500}
!2650 = !{i64 25507}
!2651 = !{i64 25511}
!2652 = !{i64 25516}
!2653 = !{i64 25523}
!2654 = !{i64 25527}
!2655 = !{i64 25532}
!2656 = !{i64 25539}
!2657 = !{i64 25543}
!2658 = !{i64 25548}
!2659 = !{i64 25554}
!2660 = !{i64 25559}
!2661 = !{i64 25570}
!2662 = !{i64 25575}
!2663 = !{i64 25586}
!2664 = !{i64 25591}
!2665 = !{i64 25602}
!2666 = !{i64 25604}
!2667 = !{i64 25618}
!2668 = !{i64 25623}
!2669 = !{i64 25628}
!2670 = !{i64 25634}
!2671 = !{i64 25639}
!2672 = !{i64 25649}
!2673 = !{i64 25657}
!2674 = !{i64 25659}
!2675 = !{i64 25667}
!2676 = !{i64 25680}
!2677 = !{i64 25685}
!2678 = !{i64 25696}
!2679 = !{i64 25701}
!2680 = !{i64 25712}
!2681 = !{i64 25717}
!2682 = !{i64 25728}
!2683 = !{i64 25733}
!2684 = !{i64 25744}
!2685 = !{i64 25746}
!2686 = !{i64 25753}
!2687 = !{i64 25756}
!2688 = !{i64 25758}
!2689 = !{i64 25760}
!2690 = !{i64 25763}
!2691 = !{i64 25765}
!2692 = !{i64 25771}
!2693 = !{i64 25776}
!2694 = !{i64 25778}
!2695 = !{i64 25781}
!2696 = !{i64 25787}
!2697 = !{i64 25792}
!2698 = !{i64 25800}
!2699 = !{i64 25801}
!2700 = !{i64 25825}
!2701 = !{i64 25833}
!2702 = !{i64 25870}
!2703 = !{i64 25879}
!2704 = !{i64 25892}
!2705 = !{i64 25904}
!2706 = !{i64 25931}
!2707 = !{i64 25940}
!2708 = !{i64 25944}
!2709 = !{i64 25947}
!2710 = !{i64 25954}
!2711 = !{i64 25961}
!2712 = !{i64 25965}
!2713 = !{i64 25970}
!2714 = !{i64 25977}
!2715 = !{i64 25984}
!2716 = !{i64 25986}
!2717 = !{i64 26008}
!2718 = !{i64 26024}
!2719 = !{i64 26051}
!2720 = !{i64 26054}
!2721 = !{i64 26063}
!2722 = !{i64 26072}
!2723 = !{i64 26084}
!2724 = !{i64 26106}
!2725 = !{i64 26111}
!2726 = !{i64 26116}
!2727 = !{i64 26153}
!2728 = !{i64 26163}
!2729 = !{i64 26176}
!2730 = !{i64 26194}
!2731 = !{i64 26204}
!2732 = !{i64 26222}
!2733 = !{i64 26229}
!2734 = !{i64 26231}
!2735 = !{i64 26233}
!2736 = !{i64 26235}
!2737 = !{i64 26250}
!2738 = !{i64 26260}
!2739 = !{i64 26276}
!2740 = !{i64 26286}
!2741 = !{i64 26294}
!2742 = !{i64 26319}
!2743 = !{i64 26328}
!2744 = !{i64 26331}
!2745 = !{i64 26338}
!2746 = !{i64 26342}
!2747 = !{i64 26344}
!2748 = !{i64 26352}
!2749 = !{i64 26354}
!2750 = !{i64 26362}
!2751 = !{i64 26380}
!2752 = !{i64 26410}
!2753 = !{i64 26417}
!2754 = !{i64 26461}
!2755 = !{i64 26470}
!2756 = !{i64 26477}
!2757 = !{i64 26500}
!2758 = !{i64 26512}
!2759 = !{i64 26514}
!2760 = !{i64 26516}
!2761 = !{i64 26520}
!2762 = !{i64 26524}
!2763 = !{i64 26529}
!2764 = !{i64 26537}
!2765 = !{i64 26540}
!2766 = !{i64 26563}
!2767 = !{i64 26575}
!2768 = !{i64 26577}
!2769 = !{i64 26579}
!2770 = !{i64 26584}
!2771 = !{i64 26609}
!2772 = !{i64 26623}
!2773 = !{i64 26630}
!2774 = !{i64 26637}
!2775 = !{i64 26641}
!2776 = !{i64 26665}
!2777 = !{i64 26674}
!2778 = !{i64 26678}
!2779 = !{i64 26685}
!2780 = !{i64 26694}
!2781 = !{i64 26688}
!2782 = !{i64 26699}
!2783 = !{i64 26702}
!2784 = !{i64 26704}
!2785 = !{i64 26734}
!2786 = !{i64 26743}
!2787 = !{i64 26747}
!2788 = !{i64 26757}
!2789 = !{i64 26759}
!2790 = !{i64 26763}
!2791 = !{i64 26768}
!2792 = !{i64 26771}
!2793 = !{i64 26773}
!2794 = !{i64 26806}
!2795 = !{i64 26835}
!2796 = !{i64 26849}
!2797 = !{i64 26856}
!2798 = !{i64 26863}
!2799 = !{i64 26867}
!2800 = !{i64 26890}
!2801 = !{i64 26903}
!2802 = !{i64 26922}
!2803 = !{i64 26948}
!2804 = !{i64 26961}
!2805 = !{i64 26965}
!2806 = !{i64 26972}
!2807 = !{i64 26990}
!2808 = !{i64 26998}
!2809 = !{i64 27008}
!2810 = !{i64 27001}
!2811 = !{i64 27011}
!2812 = !{i64 27015}
!2813 = !{i64 27045}
!2814 = !{i64 27097}
!2815 = !{i64 27106}
!2816 = !{i64 27110}
!2817 = !{i64 27117}
!2818 = !{i64 27129}
!2819 = !{i64 27147}
!2820 = !{i64 27150}
!2821 = !{i64 27154}
!2822 = !{i64 27157}
!2823 = !{i64 27161}
!2824 = !{i64 27197}
!2825 = !{i64 27206}
!2826 = !{i64 27215}
!2827 = !{i64 27221}
!2828 = !{i64 27223}
!2829 = !{i64 27236}
!2830 = !{i64 27243}
!2831 = !{i64 27248}
!2832 = !{i64 27250}
!2833 = !{i64 27252}
!2834 = !{i64 27256}
!2835 = !{i64 27259}
!2836 = !{i64 27263}
!2837 = !{i64 27265}
!2838 = !{i64 27268}
!2839 = !{i64 27277}
!2840 = !{i64 27282}
!2841 = !{i64 27286}
!2842 = !{i64 27307}
!2843 = !{i64 27320}
!2844 = !{i64 27324}
!2845 = !{i64 27331}
!2846 = !{i64 27368}
!2847 = !{i64 27370}
!2848 = !{i64 27464}
!2849 = !{i64 27466}
!2850 = !{i64 27476}
!2851 = !{i64 27478}
!2852 = !{i64 27500}
!2853 = !{i64 27511}
!2854 = !{i64 27520}
!2855 = !{i64 27533}
!2856 = !{i64 27544}
!2857 = !{i64 27550}
!2858 = !{i64 27562}
!2859 = !{i64 27564}
!2860 = !{i64 27566}
!2861 = !{i64 27570}
!2862 = !{i64 27573}
!2863 = !{i64 27577}
!2864 = !{i64 27580}
!2865 = !{i64 27582}
!2866 = !{i64 27586}
!2867 = !{i64 27588}
!2868 = !{i64 27591}
!2869 = !{i64 27600}
!2870 = !{i64 27605}
!2871 = !{i64 27609}
!2872 = !{i64 27630}
!2873 = !{i64 27650}
!2874 = !{i64 27654}
!2875 = !{i64 27661}
!2876 = !{i64 27670}
!2877 = !{i64 27664}
!2878 = !{i64 27694}
!2879 = !{i64 27696}
!2880 = !{i64 27783}
!2881 = !{i64 27784}
!2882 = !{i64 27840}
!2883 = !{i64 27849}
!2884 = !{i64 27870}
!2885 = !{i64 27872}
!2886 = !{i64 27884}
!2887 = !{i64 27886}
!2888 = !{i64 27888}
!2889 = !{i64 27892}
!2890 = !{i64 27895}
!2891 = !{i64 27899}
!2892 = !{i64 27902}
!2893 = !{i64 27904}
!2894 = !{i64 27908}
!2895 = !{i64 27915}
!2896 = !{i64 27922}
!2897 = !{i64 27933}
!2898 = !{i64 27962}
!2899 = !{i64 27970}
!2900 = !{i64 27974}
!2901 = !{i64 27997}
!2902 = !{i64 28021}
!2903 = !{i64 28047}
!2904 = !{i64 28063}
!2905 = !{i64 28084}
!2906 = !{i64 28087}
!2907 = !{i64 28091}
!2908 = !{i64 28099}
!2909 = !{i64 28101}
!2910 = !{i64 28134}
!2911 = !{i64 28144}
!2912 = !{i64 28153}
!2913 = !{i64 28174}
!2914 = !{i64 28176}
!2915 = !{i64 28190}
!2916 = !{i64 28197}
!2917 = !{i64 28199}
!2918 = !{i64 28203}
!2919 = !{i64 28206}
!2920 = !{i64 28208}
!2921 = !{i64 28212}
!2922 = !{i64 28219}
!2923 = !{i64 28226}
!2924 = !{i64 28231}
!2925 = !{i64 28240}
!2926 = !{i64 28269}
!2927 = !{i64 28277}
!2928 = !{i64 28281}
!2929 = !{i64 28304}
!2930 = !{i64 28328}
!2931 = !{i64 28354}
!2932 = !{i64 28370}
!2933 = !{i64 28391}
!2934 = !{i64 28397}
!2935 = !{i64 28406}
!2936 = !{i64 28408}
!2937 = !{i64 28444}
!2938 = !{i64 28456}
!2939 = !{i64 28467}
!2940 = !{i64 28492}
!2941 = !{i64 28496}
!2942 = !{i64 28517}
!2943 = !{i64 28549}
!2944 = !{i64 28553}
!2945 = !{i64 28556}
!2946 = !{i64 28561}
!2947 = !{i64 28563}
!2948 = !{i64 28576}
!2949 = !{i64 28583}
!2950 = !{i64 28628}
!2951 = !{i64 28639}
!2952 = !{i64 28661}
!2953 = !{i64 28663}
!2954 = !{i64 28676}
!2955 = !{i64 28685}
!2956 = !{i64 28698}
!2957 = !{i64 28707}
!2958 = !{i64 28725}
!2959 = !{i64 28729}
!2960 = !{i64 28746}
!2961 = !{i64 28760}
!2962 = !{i64 28767}
!2963 = !{i64 28776}
!2964 = !{i64 28787}
!2965 = !{i64 28789}
!2966 = !{i64 28795}
!2967 = !{i64 28802}
!2968 = !{i64 28807}
!2969 = !{i64 28809}
!2970 = !{i64 28811}
!2971 = !{i64 28821}
!2972 = !{i64 28834}
!2973 = !{i64 28855}
!2974 = !{i64 28895}
!2975 = !{i64 28914}
!2976 = !{i64 28916}
!2977 = !{i64 28922}
!2978 = !{i64 28928}
!2979 = !{i64 28957}
!2980 = !{i64 28962}
!2981 = !{i64 28964}
!2982 = !{i64 28980}
!2983 = !{i64 28985}
!2984 = !{i64 28999}
!2985 = !{i64 29003}
!2986 = !{i64 29016}
!2987 = !{i64 29049}
!2988 = !{i64 29059}
!2989 = !{i64 29067}
!2990 = !{i64 29069}
!2991 = !{i64 29085}
!2992 = !{i64 29095}
!2993 = !{i64 29113}
!2994 = !{i64 29123}
!2995 = !{i64 29141}
!2996 = !{i64 29151}
!2997 = !{i64 29169}
!2998 = !{i64 29179}
!2999 = !{i64 29197}
!3000 = !{i64 29207}
!3001 = !{i64 29225}
!3002 = !{i64 29235}
!3003 = !{i64 29253}
!3004 = !{i64 29263}
!3005 = !{i64 29281}
!3006 = !{i64 29291}
!3007 = !{i64 29309}
!3008 = !{i64 29319}
!3009 = !{i64 29337}
!3010 = !{i64 29347}
!3011 = !{i64 29365}
!3012 = !{i64 29375}
!3013 = !{i64 29380}
!3014 = !{i64 29387}
!3015 = !{i64 29405}
!3016 = !{i64 29415}
!3017 = !{i64 29425}
!3018 = !{i64 29433}
!3019 = !{i64 29443}
!3020 = !{i64 29461}
!3021 = !{i64 29477}
!3022 = !{i64 29482}
!3023 = !{i64 29512}
!3024 = !{i64 29516}
!3025 = !{i64 29563}
!3026 = !{i64 29572}
!3027 = !{i64 29577}
!3028 = !{i64 29579}
!3029 = !{i64 29581}
!3030 = !{i64 29589}
!3031 = !{i64 29605}
!3032 = !{i64 29607}
!3033 = !{i64 29612}
!3034 = !{i64 29614}
!3035 = !{i64 29617}
!3036 = !{i64 29619}
!3037 = !{i64 29624}
!3038 = !{i64 29627}
!3039 = !{i64 29629}
!3040 = !{i64 29653}
!3041 = !{i64 29655}
!3042 = !{i64 29660}
!3043 = !{i64 29662}
!3044 = !{i64 29666}
!3045 = !{i64 29667}
!3046 = !{i64 29684}
!3047 = !{i64 29716}
!3048 = !{i64 29720}
!3049 = !{i64 29740}
!3050 = !{i64 29752}
!3051 = !{i64 29755}
!3052 = !{i64 29779}
!3053 = !{i64 29788}
!3054 = !{i64 29796}
!3055 = !{i64 29803}
!3056 = !{i64 29805}
!3057 = !{i64 29930}
!3058 = !{i64 29944}
!3059 = !{i64 29946}
!3060 = !{i64 29948}
!3061 = !{i64 29951}
!3062 = !{i64 29954}
!3063 = !{i64 29961}
!3064 = !{i64 29982}
!3065 = !{i64 29987}
!3066 = !{i64 29989}
!3067 = !{i64 29993}
!3068 = !{i64 30018}
!3069 = !{i64 30032}
!3070 = !{i64 30057}
!3071 = !{i64 30060}
!3072 = !{i64 30062}
!3073 = !{i64 30081}
!3074 = !{i64 30096}
!3075 = !{i64 30099}
!3076 = !{i64 30112}
!3077 = !{i64 30143}
!3078 = !{i64 30158}
!3079 = !{i64 30176}
!3080 = !{i64 30181}
!3081 = !{i64 30183}
!3082 = !{i64 30186}
!3083 = !{i64 30194}
!3084 = !{i64 30210}
!3085 = !{i64 30214}
!3086 = !{i64 30228}
!3087 = !{i64 30231}
!3088 = !{i64 30246}
!3089 = !{i64 30264}
!3090 = !{i64 30269}
!3091 = !{i64 30271}
!3092 = !{i64 30281}
!3093 = !{i64 30285}
!3094 = !{i64 30294}
!3095 = !{i64 30296}
!3096 = !{i64 30318}
!3097 = !{i64 30319}
!3098 = !{i64 30327}
!3099 = !{i64 30332}
!3100 = !{i64 30357}
!3101 = !{i64 30360}
!3102 = !{i64 30375}
!3103 = !{i64 30379}
!3104 = !{i64 30381}
!3105 = !{i64 30383}
!3106 = !{i64 30387}
!3107 = !{i64 30391}
!3108 = !{i64 30395}
!3109 = !{i64 30400}
!3110 = !{i64 30404}
!3111 = !{i64 30407}
!3112 = !{i64 30411}
!3113 = !{i64 30415}
!3114 = !{i64 30418}
!3115 = !{i64 30432}
!3116 = !{i64 30420}
!3117 = !{i64 30424}
!3118 = !{i64 30445}
!3119 = !{i64 30454}
!3120 = !{i64 30459}
!3121 = !{i64 30476}
!3122 = !{i64 30478}
!3123 = !{i64 30480}
!3124 = !{i64 30484}
!3125 = !{i64 30488}
!3126 = !{i64 30492}
!3127 = !{i64 30497}
!3128 = !{i64 30501}
!3129 = !{i64 30504}
!3130 = !{i64 30508}
!3131 = !{i64 30512}
!3132 = !{i64 30515}
!3133 = !{i64 30529}
!3134 = !{i64 30537}
!3135 = !{i64 30542}
!3136 = !{i64 30551}
!3137 = !{i64 30563}
!3138 = !{i64 30567}
!3139 = !{i64 30576}
!3140 = !{i64 30578}
!3141 = !{i64 30584}
!3142 = !{i64 30585}
!3143 = !{i64 30602}
!3144 = !{i64 30614}
!3145 = !{i64 30782}
!3146 = !{i64 30786}
!3147 = !{i64 30887}
!3148 = !{i64 30788}
!3149 = !{i64 30792}
!3150 = !{i64 30800}
!3151 = !{i64 30804}
!3152 = !{i64 30807}
!3153 = !{i64 30837}
!3154 = !{i64 30846}
!3155 = !{i64 30850}
!3156 = !{i64 30853}
!3157 = !{i64 30855}
!3158 = !{i64 30896}
!3159 = !{i64 30924}
!3160 = !{i64 30941}
!3161 = !{i64 30956}
!3162 = !{i64 30961}
!3163 = !{i64 30966}
!3164 = !{i64 30968}
!3165 = !{i64 30992}
!3166 = !{i64 31004}
!3167 = !{i64 31012}
!3168 = !{i64 31039}
!3169 = !{i64 31052}
!3170 = !{i64 31056}
!3171 = !{i64 31080}
!3172 = !{i64 31119}
!3173 = !{i64 31132}
!3174 = !{i64 31136}
!3175 = !{i64 31160}
!3176 = !{i64 31178}
!3177 = !{i64 31209}
!3178 = !{i64 31218}
!3179 = !{i64 31222}
!3180 = !{i64 31246}
!3181 = !{i64 31278}
!3182 = !{i64 31298}
!3183 = !{i64 31313}
!3184 = !{i64 31318}
!3185 = !{i64 31323}
!3186 = !{i64 31325}
!3187 = !{i64 31343}
!3188 = !{i64 31344}
!3189 = !{i64 31361}
!3190 = !{i64 31372}
!3191 = !{i64 31387}
!3192 = !{i64 31394}
!3193 = !{i64 31403}
!3194 = !{i64 31413}
!3195 = !{i64 31436}
!3196 = !{i64 31446}
!3197 = !{i64 31470}
!3198 = !{i64 31480}
!3199 = !{i64 31503}
!3200 = !{i64 31513}
!3201 = !{i64 31537}
!3202 = !{i64 31547}
!3203 = !{i64 31570}
!3204 = !{i64 31580}
!3205 = !{i64 31601}
!3206 = !{i64 31611}
!3207 = !{i64 31628}
!3208 = !{i64 31642}
!3209 = !{i64 31659}
!3210 = !{i64 31684}
!3211 = !{i64 31702}
!3212 = !{i64 31710}
!3213 = !{i64 31733}
!3214 = !{i64 31735}
!3215 = !{i64 31741}
!3216 = !{i64 31747}
!3217 = !{i64 31749}
!3218 = !{i64 31757}
!3219 = !{i64 31762}
!3220 = !{i64 31766}
!3221 = !{i64 31773}
!3222 = !{i64 31869}
!3223 = !{i64 31873}
!3224 = !{i64 31879}
!3225 = !{i64 31883}
!3226 = !{i64 31886}
!3227 = !{i64 31910}
!3228 = !{i64 31923}
!3229 = !{i64 31927}
!3230 = !{i64 31931}
!3231 = !{i64 31935}
!3232 = !{i64 31937}
!3233 = !{i64 31966}
!3234 = !{i64 32004}
!3235 = !{i64 32022}
!3236 = !{i64 32027}
!3237 = !{i64 32052}
!3238 = !{i64 32092}
!3239 = !{i64 32105}
!3240 = !{i64 32112}
!3241 = !{i64 32116}
!3242 = !{i64 32124}
!3243 = !{i64 32130}
!3244 = !{i64 31856}
!3245 = !{i64 32141}
!3246 = !{i64 32165}
!3247 = !{i64 32178}
!3248 = !{i64 32182}
!3249 = !{i64 32207}
!3250 = !{i64 32220}
!3251 = !{i64 32245}
!3252 = !{i64 32263}
!3253 = !{i64 32268}
!3254 = !{i64 32273}
!3255 = !{i64 32275}
!3256 = !{i64 32281}
!3257 = !{i64 32292}
!3258 = !{i64 32316}
!3259 = !{i64 32329}
!3260 = !{i64 32333}
!3261 = !{i64 32358}
!3262 = !{i64 32371}
!3263 = !{i64 32396}
!3264 = !{i64 32414}
!3265 = !{i64 32419}
!3266 = !{i64 32446}
!3267 = !{i64 32462}
!3268 = !{i64 32474}
!3269 = !{i64 32504}
!3270 = !{i64 32509}
!3271 = !{i64 32511}
!3272 = !{i64 32514}
!3273 = !{i64 32544}
!3274 = !{i64 32551}
!3275 = !{i64 32558}
!3276 = !{i64 32563}
!3277 = !{i64 32571}
!3278 = !{i64 32573}
!3279 = !{i64 32575}
!3280 = !{i64 32577}
!3281 = !{i64 32579}
!3282 = !{i64 32598}
!3283 = !{i64 32599}
!3284 = !{i64 32612}
!3285 = !{i64 32620}
!3286 = !{i64 32635}
!3287 = !{i64 32641}
!3288 = !{i64 32644}
!3289 = !{i64 32658}
!3290 = !{i64 32660}
!3291 = !{i64 32663}
!3292 = !{i64 32665}
!3293 = !{i64 32668}
!3294 = !{i64 32672}
!3295 = !{i64 32675}
!3296 = !{i64 32677}
!3297 = !{i64 32687}
!3298 = !{i64 32696}
!3299 = !{i64 32703}
!3300 = !{i64 32694}
!3301 = !{i64 32705}
!3302 = !{i64 32708}
!3303 = !{i64 32710}
!3304 = !{i64 32714}
!3305 = !{i64 32721}
!3306 = !{i64 32733}
!3307 = !{i64 32737}
!3308 = !{i64 32741}
!3309 = !{i64 32744}
!3310 = !{i64 32746}
!3311 = !{i64 32750}
!3312 = !{i64 32754}
!3313 = !{i64 32757}
!3314 = !{i64 32782}
!3315 = !{i64 32787}
!3316 = !{i64 32789}
!3317 = !{i64 32792}
!3318 = !{i64 32797}
!3319 = !{i64 32801}
!3320 = !{i64 32808}
!3321 = !{i64 32820}
!3322 = !{i64 32824}
!3323 = !{i64 32828}
!3324 = !{i64 32831}
!3325 = !{i64 32833}
!3326 = !{i64 32837}
!3327 = !{i64 32841}
!3328 = !{i64 32844}
!3329 = !{i64 32846}
!3330 = !{i64 32871}
!3331 = !{i64 32887}
!3332 = !{i64 32892}
!3333 = !{i64 32900}
!3334 = !{i64 32924}
!3335 = !{i64 32942}
!3336 = !{i64 32958}
!3337 = !{i64 32966}
!3338 = !{i64 33005}
!3339 = !{i64 33021}
!3340 = !{i64 33050}
!3341 = !{i64 33053}
!3342 = !{i64 33058}
!3343 = !{i64 33060}
!3344 = !{i64 33070}
!3345 = !{i64 33074}
!3346 = !{i64 33083}
!3347 = !{i64 33085}
!3348 = !{i64 33100}
!3349 = !{i64 33101}
!3350 = !{i64 33114}
!3351 = !{i64 33122}
!3352 = !{i64 33137}
!3353 = !{i64 33143}
!3354 = !{i64 33146}
!3355 = !{i64 33160}
!3356 = !{i64 33162}
!3357 = !{i64 33165}
!3358 = !{i64 33167}
!3359 = !{i64 33170}
!3360 = !{i64 33174}
!3361 = !{i64 33177}
!3362 = !{i64 33179}
!3363 = !{i64 33189}
!3364 = !{i64 33193}
!3365 = !{i64 33200}
!3366 = !{i64 33212}
!3367 = !{i64 33216}
!3368 = !{i64 33220}
!3369 = !{i64 33223}
!3370 = !{i64 33225}
!3371 = !{i64 33229}
!3372 = !{i64 33233}
!3373 = !{i64 33236}
!3374 = !{i64 33238}
!3375 = !{i64 33263}
!3376 = !{i64 33279}
!3377 = !{i64 33284}
!3378 = !{i64 33292}
!3379 = !{i64 33316}
!3380 = !{i64 33334}
!3381 = !{i64 33350}
!3382 = !{i64 33358}
!3383 = !{i64 33397}
!3384 = !{i64 33413}
!3385 = !{i64 33442}
!3386 = !{i64 33445}
!3387 = !{i64 33450}
!3388 = !{i64 33452}
!3389 = !{i64 33462}
!3390 = !{i64 33466}
!3391 = !{i64 33475}
!3392 = !{i64 33477}
!3393 = !{i64 33492}
!3394 = !{i64 33504}
!3395 = !{i64 33585}
!3396 = !{i64 33591}
!3397 = !{i64 33593}
!3398 = !{i64 33595}
!3399 = !{i64 33604}
!3400 = !{i64 33609}
!3401 = !{i64 33611}
!3402 = !{i64 33613}
!3403 = !{i64 33623}
!3404 = !{i64 33638}
!3405 = !{i64 33648}
!3406 = !{i64 33653}
!3407 = !{i64 33659}
!3408 = !{i64 33664}
!3409 = !{i64 33676}
!3410 = !{i64 33678}
!3411 = !{i64 33680}
!3412 = !{i64 33684}
!3413 = !{i64 33691}
!3414 = !{i64 33696}
!3415 = !{i64 33706}
!3416 = !{i64 33727}
!3417 = !{i64 33748}
!3418 = !{i64 33751}
!3419 = !{i64 33775}
!3420 = !{i64 33783}
!3421 = !{i64 33846}
!3422 = !{i64 33867}
!3423 = !{i64 33871}
!3424 = !{i64 33880}
!3425 = !{i64 33885}
!3426 = !{i64 33887}
!3427 = !{i64 33892}
!3428 = !{i64 33894}
!3429 = !{i64 33896}
!3430 = !{i64 33900}
!3431 = !{i64 33907}
!3432 = !{i64 33912}
!3433 = !{i64 33916}
!3434 = !{i64 33932}
!3435 = !{i64 33933}
!3436 = !{i64 33953}
!3437 = !{i64 34323}
!3438 = !{i64 34329}
!3439 = !{i64 34335}
!3440 = !{i64 34341}
!3441 = !{i64 34353}
!3442 = !{i64 34358}
!3443 = !{i64 34377}
!3444 = !{i64 33934}
!3445 = !{i64 34385}
!3446 = !{i64 34389}
!3447 = !{i64 34408}
!3448 = !{i64 34410}
!3449 = !{i64 34416}
!3450 = !{i64 34424}
!3451 = !{i64 34426}
!3452 = !{i64 34437}
!3453 = !{i64 34443}
!3454 = !{i64 34445}
!3455 = !{i64 34450}
!3456 = !{i64 34457}
!3457 = !{i64 34465}
!3458 = !{i64 34472}
!3459 = !{i64 34482}
!3460 = !{i64 34506}
!3461 = !{i64 34519}
!3462 = !{i64 34526}
!3463 = !{i64 34534}
!3464 = !{i64 34541}
!3465 = !{i64 34544}
!3466 = !{i64 34548}
!3467 = !{i64 34552}
!3468 = !{i64 34556}
!3469 = !{i64 34560}
!3470 = !{i64 34563}
!3471 = !{i64 34569}
!3472 = !{i64 34607}
!3473 = !{i64 34612}
!3474 = !{i64 34620}
!3475 = !{i64 34635}
!3476 = !{i64 34646}
!3477 = !{i64 34653}
!3478 = !{i64 34661}
!3479 = !{i64 34668}
!3480 = !{i64 34680}
!3481 = !{i64 34696}
!3482 = !{i64 34699}
!3483 = !{i64 34706}
!3484 = !{i64 34710}
!3485 = !{i64 34712}
!3486 = !{i64 34716}
!3487 = !{i64 34727}
!3488 = !{i64 34733}
!3489 = !{i64 34738}
!3490 = !{i64 34773}
!3491 = !{i64 34798}
!3492 = !{i64 34819}
!3493 = !{i64 34861}
!3494 = !{i64 34874}
!3495 = !{i64 34918}
!3496 = !{i64 34931}
!3497 = !{i64 34936}
!3498 = !{i64 34938}
!3499 = !{i64 34943}
!3500 = !{i64 34959}
!3501 = !{i64 34975}
!3502 = !{i64 34982}
!3503 = !{i64 35000}
!3504 = !{i64 35021}
!3505 = !{i64 35041}
!3506 = !{i64 35046}
!3507 = !{i64 35049}
!3508 = !{i64 35052}
!3509 = !{i64 35055}
!3510 = !{i64 35057}
!3511 = !{i64 35065}
!3512 = !{i64 35069}
!3513 = !{i64 35071}
!3514 = !{i64 35079}
!3515 = !{i64 35081}
!3516 = !{i64 35083}
!3517 = !{i64 35094}
!3518 = !{i64 35096}
!3519 = !{i64 35098}
!3520 = !{i64 35104}
!3521 = !{i64 35122}
!3522 = !{i64 35133}
!3523 = !{i64 35137}
!3524 = !{i64 35143}
!3525 = !{i64 35155}
!3526 = !{i64 35173}
!3527 = !{i64 35194}
!3528 = !{i64 35207}
!3529 = !{i64 35212}
!3530 = !{i64 35228}
!3531 = !{i64 35244}
!3532 = !{i64 35257}
!3533 = !{i64 35262}
!3534 = !{i64 35294}
!3535 = !{i64 35307}
!3536 = !{i64 35311}
!3537 = !{i64 35323}
!3538 = !{i64 35334}
!3539 = !{i64 35338}
!3540 = !{i64 35371}
!3541 = !{i64 35389}
!3542 = !{i64 35410}
!3543 = !{i64 35423}
!3544 = !{i64 35428}
!3545 = !{i64 35444}
!3546 = !{i64 35460}
!3547 = !{i64 35473}
!3548 = !{i64 35478}
!3549 = !{i64 35510}
!3550 = !{i64 35523}
!3551 = !{i64 35527}
!3552 = !{i64 35536}
!3553 = !{i64 35554}
!3554 = !{i64 35575}
!3555 = !{i64 35588}
!3556 = !{i64 35593}
!3557 = !{i64 35609}
!3558 = !{i64 35625}
!3559 = !{i64 35638}
!3560 = !{i64 35643}
!3561 = !{i64 35675}
!3562 = !{i64 35718}
!3563 = !{i64 35731}
!3564 = !{i64 35768}
!3565 = !{i64 35781}
!3566 = !{i64 35786}
!3567 = !{i64 35818}
!3568 = !{i64 35831}
!3569 = !{i64 35836}
!3570 = !{i64 35840}
!3571 = !{i64 35871}
!3572 = !{i64 35884}
!3573 = !{i64 35889}
!3574 = !{i64 35921}
!3575 = !{i64 35934}
!3576 = !{i64 35938}
!3577 = !{i64 35950}
!3578 = !{i64 35961}
!3579 = !{i64 35965}
!3580 = !{i64 35998}
!3581 = !{i64 36016}
!3582 = !{i64 36037}
!3583 = !{i64 36050}
!3584 = !{i64 36055}
!3585 = !{i64 36071}
!3586 = !{i64 36087}
!3587 = !{i64 36100}
!3588 = !{i64 36105}
!3589 = !{i64 36137}
!3590 = !{i64 36150}
!3591 = !{i64 36154}
!3592 = !{i64 36161}
!3593 = !{i64 36179}
!3594 = !{i64 36200}
!3595 = !{i64 36213}
!3596 = !{i64 36218}
!3597 = !{i64 36234}
!3598 = !{i64 36250}
!3599 = !{i64 36263}
!3600 = !{i64 36268}
!3601 = !{i64 36300}
!3602 = !{i64 36343}
!3603 = !{i64 36356}
!3604 = !{i64 36393}
!3605 = !{i64 36406}
!3606 = !{i64 36411}
!3607 = !{i64 36443}
!3608 = !{i64 36456}
!3609 = !{i64 36461}
!3610 = !{i64 36465}
!3611 = !{i64 36496}
!3612 = !{i64 36509}
!3613 = !{i64 36514}
!3614 = !{i64 36546}
!3615 = !{i64 36559}
!3616 = !{i64 36563}
!3617 = !{i64 36575}
!3618 = !{i64 36586}
!3619 = !{i64 36590}
!3620 = !{i64 36596}
!3621 = !{i64 36608}
!3622 = !{i64 36626}
!3623 = !{i64 36647}
!3624 = !{i64 36660}
!3625 = !{i64 36665}
!3626 = !{i64 36681}
!3627 = !{i64 36697}
!3628 = !{i64 36710}
!3629 = !{i64 36715}
!3630 = !{i64 36747}
!3631 = !{i64 36790}
!3632 = !{i64 36803}
!3633 = !{i64 36840}
!3634 = !{i64 36853}
!3635 = !{i64 36858}
!3636 = !{i64 36890}
!3637 = !{i64 36903}
!3638 = !{i64 36908}
!3639 = !{i64 36912}
!3640 = !{i64 36943}
!3641 = !{i64 36956}
!3642 = !{i64 36961}
!3643 = !{i64 36993}
!3644 = !{i64 37006}
!3645 = !{i64 37010}
!3646 = !{i64 37027}
!3647 = !{i64 37048}
!3648 = !{i64 37061}
!3649 = !{i64 37066}
!3650 = !{i64 37082}
!3651 = !{i64 37098}
!3652 = !{i64 37111}
!3653 = !{i64 37116}
!3654 = !{i64 37148}
!3655 = !{i64 37161}
!3656 = !{i64 37165}
!3657 = !{i64 37173}
!3658 = !{i64 37177}
!3659 = !{i64 37185}
!3660 = !{i64 37193}
!3661 = !{i64 37201}
!3662 = !{i64 37205}
!3663 = !{i64 37212}
!3664 = !{i64 37228}
!3665 = !{i64 37233}
!3666 = !{i64 37235}
!3667 = !{i64 37241}
!3668 = !{i64 37246}
!3669 = !{i64 37256}
!3670 = !{i64 37273}
!3671 = !{i64 37278}
!3672 = !{i64 37280}
!3673 = !{i64 37299}
!3674 = !{i64 37304}
!3675 = !{i64 37318}
!3676 = !{i64 37340}
!3677 = !{i64 37345}
!3678 = !{i64 37359}
!3679 = !{i64 37381}
!3680 = !{i64 37386}
!3681 = !{i64 37400}
!3682 = !{i64 37424}
!3683 = !{i64 37428}
!3684 = !{i64 37445}
!3685 = !{i64 37450}
!3686 = !{i64 37452}
!3687 = !{i64 37471}
!3688 = !{i64 37476}
!3689 = !{i64 37490}
!3690 = !{i64 37512}
!3691 = !{i64 37517}
!3692 = !{i64 37531}
!3693 = !{i64 37553}
!3694 = !{i64 37558}
!3695 = !{i64 37572}
!3696 = !{i64 37598}
!3697 = !{i64 37592}
!3698 = !{i64 37623}
!3699 = !{i64 37646}
!3700 = !{i64 37651}
!3701 = !{i64 37655}
!3702 = !{i64 37657}
!3703 = !{i64 37659}
!3704 = !{i64 37678}
!3705 = !{i64 37683}
!3706 = !{i64 37697}
!3707 = !{i64 37716}
!3708 = !{i64 37721}
!3709 = !{i64 37735}
!3710 = !{i64 37821}
!3711 = !{i64 37836}
!3712 = !{i64 37840}
!3713 = !{i64 37849}
!3714 = !{i64 37854}
!3715 = !{i64 37856}
!3716 = !{i64 37861}
!3717 = !{i64 37863}
!3718 = !{i64 37865}
!3719 = !{i64 37869}
!3720 = !{i64 37876}
!3721 = !{i64 37881}
!3722 = !{i64 37885}
!3723 = !{i64 37901}
!3724 = !{i64 37918}
!3725 = !{i64 37933}
!3726 = !{i64 37937}
!3727 = !{i64 37946}
!3728 = !{i64 37951}
!3729 = !{i64 37953}
!3730 = !{i64 37958}
!3731 = !{i64 37960}
!3732 = !{i64 37962}
!3733 = !{i64 37966}
!3734 = !{i64 37973}
!3735 = !{i64 37978}
!3736 = !{i64 37982}
!3737 = !{i64 37998}
!3738 = !{i64 38015}
!3739 = !{i64 38022}
!3740 = !{i64 38026}
!3741 = !{i64 38033}
!3742 = !{i64 38045}
!3743 = !{i64 38047}
!3744 = !{i64 38049}
!3745 = !{i64 38052}
!3746 = !{i64 38059}
!3747 = !{i64 38073}
!3748 = !{i64 38087}
!3749 = !{i64 38108}
!3750 = !{i64 38128}
!3751 = !{i64 38135}
!3752 = !{i64 38156}
!3753 = !{i64 38160}
!3754 = !{i64 38163}
!3755 = !{i64 38165}
!3756 = !{i64 38212}
!3757 = !{i64 38246}
!3758 = !{i64 38249}
!3759 = !{i64 38256}
!3760 = !{i64 38262}
!3761 = !{i64 38273}
!3762 = !{i64 38278}
!3763 = !{i64 38285}
!3764 = !{i64 38290}
!3765 = !{i64 38294}
!3766 = !{i64 38329}
!3767 = !{i64 38334}
!3768 = !{i64 38404}
!3769 = !{i64 38409}
!3770 = !{i64 38413}
!3771 = !{i64 38416}
!3772 = !{i64 38423}
!3773 = !{i64 38456}
!3774 = !{i64 38466}
!3775 = !{i64 38474}
!3776 = !{i64 38481}
!3777 = !{i64 38488}
!3778 = !{i64 38490}
!3779 = !{i64 38499}
!3780 = !{i64 38503}
!3781 = !{i64 38505}
!3782 = !{i64 38507}
!3783 = !{i64 38514}
!3784 = !{i64 38519}
!3785 = !{i64 38526}
!3786 = !{i64 38538}
!3787 = !{i64 38546}
!3788 = !{i64 38556}
!3789 = !{i64 38564}
!3790 = !{i64 38571}
!3791 = !{i64 38578}
!3792 = !{i64 38585}
!3793 = !{i64 38587}
!3794 = !{i64 38596}
!3795 = !{i64 38599}
!3796 = !{i64 38600}
!3797 = !{i64 38603}
!3798 = !{i64 38609}
!3799 = !{i64 38611}
!3800 = !{i64 38616}
!3801 = !{i64 38623}
!3802 = !{i64 38635}
!3803 = !{i64 38643}
!3804 = !{i64 38644}
!3805 = !{i64 38661}
!3806 = !{i64 38706}
!3807 = !{i64 38713}
!3808 = !{i64 38720}
!3809 = !{i64 38729}
!3810 = !{i64 38734}
!3811 = !{i64 38732}
!3812 = !{i64 38746}
!3813 = !{i64 38753}
!3814 = !{i64 38757}
!3815 = !{i64 38782}
!3816 = !{i64 38789}
!3817 = !{i64 38797}
!3818 = !{i64 38800}
!3819 = !{i64 38807}
!3820 = !{i64 38814}
!3821 = !{i64 38821}
!3822 = !{i64 38679}
!3823 = !{i64 38826}
!3824 = !{i64 38833}
!3825 = !{i64 38845}
!3826 = !{i64 38847}
!3827 = !{i64 38851}
!3828 = !{i64 38858}
!3829 = !{i64 38862}
!3830 = !{i64 38906}
!3831 = !{i64 38910}
!3832 = !{i64 38914}
!3833 = !{i64 38917}
!3834 = !{i64 38920}
!3835 = !{i64 38927}
!3836 = !{i64 38934}
!3837 = !{i64 38937}
!3838 = !{i64 38943}
!3839 = !{i64 38947}
!3840 = !{i64 38953}
!3841 = !{i64 38956}
!3842 = !{i64 38960}
!3843 = !{i64 38966}
!3844 = !{i64 38969}
!3845 = !{i64 38973}
!3846 = !{i64 38978}
!3847 = !{i64 38981}
!3848 = !{i64 38988}
!3849 = !{i64 38995}
!3850 = !{i64 39009}
!3851 = !{i64 39013}
!3852 = !{i64 39015}
!3853 = !{i64 39019}
!3854 = !{i64 39023}
!3855 = !{i64 39027}
!3856 = !{i64 39030}
!3857 = !{i64 39034}
!3858 = !{i64 39038}
!3859 = !{i64 39041}
!3860 = !{i64 39045}
!3861 = !{i64 39049}
!3862 = !{i64 39052}
!3863 = !{i64 39059}
!3864 = !{i64 39066}
!3865 = !{i64 39068}
!3866 = !{i64 39071}
!3867 = !{i64 39080}
!3868 = !{i64 39083}
!3869 = !{i64 39074}
!3870 = !{i64 39089}
!3871 = !{i64 39093}
!3872 = !{i64 39096}
!3873 = !{i64 39103}
!3874 = !{i64 39110}
!3875 = !{i64 39113}
!3876 = !{i64 39119}
!3877 = !{i64 39122}
!3878 = !{i64 39128}
!3879 = !{i64 39135}
!3880 = !{i64 39142}
!3881 = !{i64 39161}
!3882 = !{i64 39163}
!3883 = !{i64 39169}
!3884 = !{i64 39171}
!3885 = !{i64 39177}
!3886 = !{i64 39181}
!3887 = !{i64 39187}
!3888 = !{i64 39190}
!3889 = !{i64 39194}
!3890 = !{i64 39200}
!3891 = !{i64 39203}
!3892 = !{i64 39207}
!3893 = !{i64 39212}
!3894 = !{i64 39222}
!3895 = !{i64 39229}
!3896 = !{i64 39231}
!3897 = !{i64 39235}
!3898 = !{i64 39238}
!3899 = !{i64 39245}
!3900 = !{i64 39251}
!3901 = !{i64 39255}
!3902 = !{i64 39261}
!3903 = !{i64 39264}
!3904 = !{i64 39268}
!3905 = !{i64 39274}
!3906 = !{i64 39277}
!3907 = !{i64 39281}
!3908 = !{i64 39286}
!3909 = !{i64 39289}
!3910 = !{i64 39296}
!3911 = !{i64 39303}
!3912 = !{i64 39305}
!3913 = !{i64 39309}
!3914 = !{i64 39312}
!3915 = !{i64 39314}
!3916 = !{i64 39317}
!3917 = !{i64 39319}
!3918 = !{i64 39321}
!3919 = !{i64 39325}
!3920 = !{i64 39328}
!3921 = !{i64 39337}
!3922 = !{i64 39342}
!3923 = !{i64 39349}
!3924 = !{i64 39356}
!3925 = !{i64 39365}
!3926 = !{i64 39394}
!3927 = !{i64 39370}
!3928 = !{i64 39403}
!3929 = !{i64 39406}
!3930 = !{i64 39424}
!3931 = !{i64 39431}
!3932 = !{i64 39437}
!3933 = !{i64 39455}
!3934 = !{i64 39463}
!3935 = !{i64 39468}
!3936 = !{i64 39477}
!3937 = !{i64 39479}
!3938 = !{i64 39486}
!3939 = !{i64 39494}
!3940 = !{i64 39524}
!3941 = !{i64 39553}
!3942 = !{i64 39574}
!3943 = !{i64 39589}
!3944 = !{i64 39610}
!3945 = !{i64 39618}
!3946 = !{i64 39621}
!3947 = !{i64 39647}
!3948 = !{i64 39655}
!3949 = !{i64 39659}
!3950 = !{i64 39667}
!3951 = !{i64 39673}
!3952 = !{i64 39699}
!3953 = !{i64 39717}
!3954 = !{i64 39829}
!3955 = !{i64 39836}
!3956 = !{i64 39848}
!3957 = !{i64 39863}
!3958 = !{i64 39875}
!3959 = !{i64 39882}
!3960 = !{i64 39884}
!3961 = !{i64 39887}
!3962 = !{i64 39895}
!3963 = !{i64 39899}
!3964 = !{i64 39917}
!3965 = !{i64 39922}
!3966 = !{i64 39937}
!3967 = !{i64 39940}
!3968 = !{i64 39944}
!3969 = !{i64 39947}
!3970 = !{i64 39950}
!3971 = !{i64 39957}
!3972 = !{i64 39964}
!3973 = !{i64 39966}
!3974 = !{i64 39969}
!3975 = !{i64 39973}
!3976 = !{i64 39976}
!3977 = !{i64 39979}
!3978 = !{i64 39986}
!3979 = !{i64 39993}
!3980 = !{i64 40008}
!3981 = !{i64 40018}
!3982 = !{i64 40023}
!3983 = !{i64 40030}
!3984 = !{i64 40037}
!3985 = !{i64 40049}
!3986 = !{i64 40053}
!3987 = !{i64 40039}
!3988 = !{i64 40059}
!3989 = !{i64 40063}
!3990 = !{i64 40073}
!3991 = !{i64 40075}
!3992 = !{i64 40087}
!3993 = !{i64 40140}
!3994 = !{i64 40080}
!3995 = !{i64 40094}
!3996 = !{i64 40100}
!3997 = !{i64 40107}
!3998 = !{i64 40111}
!3999 = !{i64 40119}
!4000 = !{i64 40123}
!4001 = !{i64 40132}
!4002 = !{i64 40137}
!4003 = !{i64 40150}
!4004 = !{i64 40143}
!4005 = !{i64 40157}
!4006 = !{i64 40164}
!4007 = !{i64 40171}
!4008 = !{i64 40173}
!4009 = !{i64 40183}
!4010 = !{i64 40185}
!4011 = !{i64 40197}
!4012 = !{i64 40262}
!4013 = !{i64 40279}
!4014 = !{i64 40306}
!4015 = !{i64 40310}
!4016 = !{i64 40317}
!4017 = !{i64 40328}
!4018 = !{i64 40333}
!4019 = !{i64 40336}
!4020 = !{i64 40343}
!4021 = !{i64 40354}
!4022 = !{i64 40359}
!4023 = !{i64 40366}
!4024 = !{i64 40373}
!4025 = !{i64 40382}
!4026 = !{i64 40387}
!4027 = !{i64 40385}
!4028 = !{i64 40403}
!4029 = !{i64 40410}
!4030 = !{i64 40414}
!4031 = !{i64 40439}
!4032 = !{i64 40446}
!4033 = !{i64 40454}
!4034 = !{i64 40457}
!4035 = !{i64 40464}
!4036 = !{i64 40471}
!4037 = !{i64 40478}
!4038 = !{i64 40483}
!4039 = !{i64 40490}
!4040 = !{i64 40497}
!4041 = !{i64 40502}
!4042 = !{i64 40504}
!4043 = !{i64 40511}
!4044 = !{i64 40522}
!4045 = !{i64 40527}
!4046 = !{i64 40534}
!4047 = !{i64 40546}
!4048 = !{i64 40548}
!4049 = !{i64 40552}
!4050 = !{i64 40558}
!4051 = !{i64 40595}
!4052 = !{i64 40606}
!4053 = !{i64 41175}
!4054 = !{i64 41182}
!4055 = !{i64 41189}
!4056 = !{i64 41197}
!4057 = !{i64 41219}
!4058 = !{i64 41248}
!4059 = !{i64 41269}
!4060 = !{i64 41284}
!4061 = !{i64 41305}
!4062 = !{i64 41313}
!4063 = !{i64 41316}
!4064 = !{i64 41342}
!4065 = !{i64 41350}
!4066 = !{i64 41354}
!4067 = !{i64 41362}
!4068 = !{i64 41368}
!4069 = !{i64 41394}
!4070 = !{i64 41412}
!4071 = !{i64 41457}
!4072 = !{i64 41461}
!4073 = !{i64 41468}
!4074 = !{i64 41479}
!4075 = !{i64 41484}
!4076 = !{i64 41487}
!4077 = !{i64 41494}
!4078 = !{i64 41505}
!4079 = !{i64 41510}
!4080 = !{i64 41517}
!4081 = !{i64 41524}
!4082 = !{i64 41535}
!4083 = !{i64 41539}
!4084 = !{i64 41537}
!4085 = !{i64 41553}
!4086 = !{i64 41564}
!4087 = !{i64 41576}
!4088 = !{i64 41588}
!4089 = !{i64 41591}
!4090 = !{i64 41594}
!4091 = !{i64 41599}
!4092 = !{i64 41672}
!4093 = !{i64 41683}
!4094 = !{i64 42079}
!4095 = !{i64 42086}
!4096 = !{i64 42093}
!4097 = !{i64 42095}
!4098 = !{i64 42123}
!4099 = !{i64 42148}
!4100 = !{i64 42167}
!4101 = !{i64 42195}
!4102 = !{i64 42199}
!4103 = !{i64 42205}
!4104 = !{i64 42245}
!4105 = !{i64 42250}
!4106 = !{i64 42293}
!4107 = !{i64 42298}
!4108 = !{i64 42310}
!4109 = !{i64 42312}
!4110 = !{i64 42316}
!4111 = !{i64 42320}
!4112 = !{i64 42328}
!4113 = !{i64 42350}
!4114 = !{i64 42355}
!4115 = !{i64 42365}
!4116 = !{i64 42370}
!4117 = !{i64 42382}
!4118 = !{i64 42395}
!4119 = !{i64 42417}
!4120 = !{i64 42418}
!4121 = !{i64 42435}
!4122 = !{i64 42456}
!4123 = !{i64 42466}
!4124 = !{i64 42471}
!4125 = !{i64 42478}
!4126 = !{i64 42480}
!4127 = !{i64 42490}
!4128 = !{i64 42495}
!4129 = !{i64 42499}
!4130 = !{i64 42506}
!4131 = !{i64 42516}
!4132 = !{i64 42537}
!4133 = !{i64 42545}
!4134 = !{i64 42561}
!4135 = !{i64 42566}
!4136 = !{i64 42569}
!4137 = !{i64 42579}
!4138 = !{i64 42587}
!4139 = !{i64 42588}
!4140 = !{i64 42590}
!4141 = !{i64 42598}
!4142 = !{i64 42607}
!4143 = !{i64 42616}
!4144 = !{i64 42623}
!4145 = !{i64 42628}
!4146 = !{i64 42634}
!4147 = !{i64 42635}
!4148 = !{i64 42639}
!4149 = !{i64 42645}
!4150 = !{i64 42650}
!4151 = !{i64 42656}
!4152 = !{i64 42661}
!4153 = !{i64 42667}
!4154 = !{i64 42672}
!4155 = !{i64 42683}
!4156 = !{i64 42688}
!4157 = !{i64 42712}
!4158 = !{i64 42714}
!4159 = !{i64 42718}
!4160 = !{i64 42729}
!4161 = !{i64 42731}
!4162 = !{i64 42734}
!4163 = !{i64 42743}
!4164 = !{i64 42748}
!4165 = !{i64 42759}
!4166 = !{i64 42764}
!4167 = !{i64 42775}
!4168 = !{i64 42780}
!4169 = !{i64 42791}
!4170 = !{i64 42796}
!4171 = !{i64 42806}
!4172 = !{i64 42807}
!4173 = !{i64 42812}
!4174 = !{i64 42823}
!4175 = !{i64 42824}
!4176 = !{i64 42828}
!4177 = !{i64 42838}
!4178 = !{i64 42845}
!4179 = !{i64 42847}
!4180 = !{i64 42854}
!4181 = !{i64 42859}
!4182 = !{i64 42868}
!4183 = !{i64 42875}
!4184 = !{i64 42877}
!4185 = !{i64 42922}
!4186 = !{i64 42923}
!4187 = !{i64 42925}
!4188 = !{i64 42927}
!4189 = !{i64 42932}
!4190 = !{i64 42934}
!4191 = !{i64 42946}
!4192 = !{i64 42949}
!4193 = !{i64 42953}
!4194 = !{i64 42956}
!4195 = !{i64 42962}
!4196 = !{i64 42964}
!4197 = !{i64 42972}
!4198 = !{i64 42977}
!4199 = !{i64 42986}
!4200 = !{i64 42988}
!4201 = !{i64 42995}
!4202 = !{i64 42999}
!4203 = !{i64 43005}
!4204 = !{i64 43007}
!4205 = !{i64 43009}
!4206 = !{i64 43012}
!4207 = !{i64 43015}
!4208 = !{i64 43019}
!4209 = !{i64 43024}
!4210 = !{i64 43031}
!4211 = !{i64 43033}
!4212 = !{i64 43035}
!4213 = !{i64 43039}
!4214 = !{i64 43041}
!4215 = !{i64 43046}
!4216 = !{i64 43043}
!4217 = !{i64 43050}
!4218 = !{i64 43059}
!4219 = !{i64 43070}
!4220 = !{i64 43075}
!4221 = !{i64 43086}
!4222 = !{i64 43091}
!4223 = !{i64 43097}
!4224 = !{i64 43098}
!4225 = !{i64 43099}
!4226 = !{i64 43110}
!4227 = !{i64 43115}
!4228 = !{i64 43173}
!4229 = !{i64 43141}
!4230 = !{i64 43150}
!4231 = !{i64 43158}
!4232 = !{i64 43161}
!4233 = !{i64 43164}
!4234 = !{i64 43168}
!4235 = !{i64 43170}
!4236 = !{i64 43180}
!4237 = !{i64 43183}
!4238 = !{i64 43185}
!4239 = !{i64 43189}
!4240 = !{i64 43192}
!4241 = !{i64 43195}
!4242 = !{i64 43197}
!4243 = !{i64 43218}
!4244 = !{i64 43220}
!4245 = !{i64 43223}
!4246 = !{i64 43226}
!4247 = !{i64 43234}
!4248 = !{i64 43238}
!4249 = !{i64 43241}
!4250 = !{i64 43244}
!4251 = !{i64 43246}
!4252 = !{i64 43249}
!4253 = !{i64 43253}
!4254 = !{i64 43256}
!4255 = !{i64 43259}
!4256 = !{i64 43267}
!4257 = !{i64 43269}
!4258 = !{i64 43292}
!4259 = !{i64 43294}
!4260 = !{i64 43297}
!4261 = !{i64 43300}
!4262 = !{i64 43308}
!4263 = !{i64 43312}
!4264 = !{i64 43315}
!4265 = !{i64 43318}
!4266 = !{i64 43320}
!4267 = !{i64 43323}
!4268 = !{i64 43327}
!4269 = !{i64 43330}
!4270 = !{i64 43333}
!4271 = !{i64 43340}
!4272 = !{i64 43564}
!4273 = !{i64 43618}
!4274 = !{i64 43622}
!4275 = !{i64 43626}
!4276 = !{i64 43630}
!4277 = !{i64 43633}
!4278 = !{i64 43636}
!4279 = !{i64 43638}
!4280 = !{i64 43642}
!4281 = !{i64 43646}
!4282 = !{i64 43650}
!4283 = !{i64 43653}
!4284 = !{i64 43893}
!4285 = !{i64 43897}
!4286 = !{i64 43929}
!4287 = !{i64 43933}
!4288 = !{i64 43942}
!4289 = !{i64 43944}
!4290 = !{i64 43958}
!4291 = !{i64 43963}
!4292 = !{i64 43971}
!4293 = !{i64 43973}
!4294 = !{i64 43977}
!4295 = !{i64 43980}
!4296 = !{i64 43984}
!4297 = !{i64 43987}
!4298 = !{i64 43991}
!4299 = !{i64 44008}
!4300 = !{i64 44035}
!4301 = !{i64 44050}
!4302 = !{i64 44059}
!4303 = !{i64 44063}
!4304 = !{i64 44066}
!4305 = !{i64 44069}
!4306 = !{i64 44090}
!4307 = !{i64 44095}
!4308 = !{i64 44266}
!4309 = !{i64 44270}
!4310 = !{i64 44273}
!4311 = !{i64 44276}
!4312 = !{i64 44280}
!4313 = !{i64 44286}
!4314 = !{i64 44289}
!4315 = !{i64 44291}
!4316 = !{i64 44295}
!4317 = !{i64 44301}
!4318 = !{i64 44303}
!4319 = !{i64 44307}
!4320 = !{i64 44313}
!4321 = !{i64 44316}
!4322 = !{i64 44323}
!4323 = !{i64 44413}
!4324 = !{i64 44426}
!4325 = !{i64 44429}
!4326 = !{i64 44433}
!4327 = !{i64 44437}
!4328 = !{i64 44446}
!4329 = !{i64 44447}
!4330 = !{i64 44455}
!4331 = !{i64 44460}
!4332 = !{i64 44475}
!4333 = !{i64 44479}
!4334 = !{i64 44483}
!4335 = !{i64 44486}
!4336 = !{i64 44488}
!4337 = !{i64 44490}
!4338 = !{i64 44494}
!4339 = !{i64 44498}
!4340 = !{i64 44502}
!4341 = !{i64 44505}
!4342 = !{i64 44807}
!4343 = !{i64 44809}
!4344 = !{i64 44811}
!4345 = !{i64 44814}
!4346 = !{i64 44818}
!4347 = !{i64 44821}
!4348 = !{i64 44827}
!4349 = !{i64 44871}
!4350 = !{i64 44876}
!4351 = !{i64 44912}
!4352 = !{i64 44915}
!4353 = !{i64 44938}
!4354 = !{i64 44946}
!4355 = !{i64 44956}
!4356 = !{i64 44960}
!4357 = !{i64 44969}
!4358 = !{i64 44971}
!4359 = !{i64 44985}
!4360 = !{i64 44987}
!4361 = !{i64 44994}
!4362 = !{i64 45000}
!4363 = !{i64 45003}
!4364 = !{i64 45005}
!4365 = !{i64 45012}
!4366 = !{i64 45015}
!4367 = !{i64 45018}
!4368 = !{i64 45022}
!4369 = !{i64 45026}
!4370 = !{i64 45033}
!4371 = !{i64 45035}
!4372 = !{i64 45041}
!4373 = !{i64 45062}
!4374 = !{i64 45087}
!4375 = !{i64 45090}
!4376 = !{i64 45096}
!4377 = !{i64 45100}
!4378 = !{i64 45102}
!4379 = !{i64 45113}
!4380 = !{i64 45117}
!4381 = !{i64 45120}
!4382 = !{i64 45125}
!4383 = !{i64 45127}
!4384 = !{i64 45132}
!4385 = !{i64 45134}
!4386 = !{i64 45158}
!4387 = !{i64 45167}
!4388 = !{i64 45178}
!4389 = !{i64 45193}
!4390 = !{i64 45308}
!4391 = !{i64 45318}
!4392 = !{i64 45320}
!4393 = !{i64 45328}
!4394 = !{i64 45331}
!4395 = !{i64 45339}
!4396 = !{i64 45344}
!4397 = !{i64 45348}
!4398 = !{i64 45357}
!4399 = !{i64 45359}
!4400 = !{i64 45365}
!4401 = !{i64 45375}
!4402 = !{i64 45383}
!4403 = !{i64 45386}
!4404 = !{i64 45398}
!4405 = !{i64 45401}
!4406 = !{i64 45410}
!4407 = !{i64 45415}
!4408 = !{i64 45418}
!4409 = !{i64 45444}
!4410 = !{i64 45449}
!4411 = !{i64 45451}
!4412 = !{i64 45462}
!4413 = !{i64 45472}
!4414 = !{i64 45480}
!4415 = !{i64 45483}
!4416 = !{i64 45495}
!4417 = !{i64 45502}
!4418 = !{i64 45511}
!4419 = !{i64 45517}
!4420 = !{i64 45519}
!4421 = !{i64 45545}
!4422 = !{i64 45550}
!4423 = !{i64 45553}
!4424 = !{i64 45564}
!4425 = !{i64 45569}
!4426 = !{i64 45574}
!4427 = !{i64 45577}
!4428 = !{i64 45579}
!4429 = !{i64 45582}
!4430 = !{i64 45584}
!4431 = !{i64 45601}
!4432 = !{i64 45608}
!4433 = !{i64 45620}
!4434 = !{i64 45622}
!4435 = !{i64 45625}
!4436 = !{i64 45642}
!4437 = !{i64 45650}
!4438 = !{i64 45658}
!4439 = !{i64 45663}
!4440 = !{i64 45669}
!4441 = !{i64 45679}
!4442 = !{i64 45687}
!4443 = !{i64 45690}
!4444 = !{i64 45702}
!4445 = !{i64 45709}
!4446 = !{i64 45718}
!4447 = !{i64 45724}
!4448 = !{i64 45726}
!4449 = !{i64 45736}
!4450 = !{i64 45740}
!4451 = !{i64 45752}
!4452 = !{i64 45757}
!4453 = !{i64 45760}
!4454 = !{i64 45771}
!4455 = !{i64 45781}
!4456 = !{i64 45789}
!4457 = !{i64 45792}
!4458 = !{i64 45804}
!4459 = !{i64 45811}
!4460 = !{i64 45820}
!4461 = !{i64 45830}
!4462 = !{i64 45838}
!4463 = !{i64 45842}
!4464 = !{i64 45854}
!4465 = !{i64 45873}
!4466 = !{i64 45878}
!4467 = !{i64 45890}
!4468 = !{i64 45896}
!4469 = !{i64 45898}
!4470 = !{i64 45902}
!4471 = !{i64 45908}
!4472 = !{i64 45913}
!4473 = !{i64 45918}
!4474 = !{i64 45921}
!4475 = !{i64 45925}
!4476 = !{i64 45929}
!4477 = !{i64 45933}
!4478 = !{i64 45937}
!4479 = !{i64 45943}
!4480 = !{i64 45944}
!4481 = !{i64 45972}
!4482 = !{i64 45995}
!4483 = !{i64 46034}
!4484 = !{i64 46044}
!4485 = !{i64 46049}
!4486 = !{i64 46056}
!4487 = !{i64 46061}
!4488 = !{i64 46071}
!4489 = !{i64 46076}
!4490 = !{i64 46086}
!4491 = !{i64 46090}
!4492 = !{i64 46097}
!4493 = !{i64 46104}
!4494 = !{i64 46112}
!4495 = !{i64 46124}
!4496 = !{i64 46130}
!4497 = !{i64 46145}
!4498 = !{i64 46153}
!4499 = !{i64 46172}
!4500 = !{i64 46179}
!4501 = !{i64 46184}
!4502 = !{i64 46191}
!4503 = !{i64 46196}
!4504 = !{i64 46207}
!4505 = !{i64 46224}
!4506 = !{i64 46240}
!4507 = !{i64 46244}
!4508 = !{i64 46253}
!4509 = !{i64 46260}
!4510 = !{i64 46270}
!4511 = !{i64 46282}
!4512 = !{i64 46293}
!4513 = !{i64 46301}
!4514 = !{i64 46308}
!4515 = !{i64 46317}
!4516 = !{i64 46321}
!4517 = !{i64 46334}
!4518 = !{i64 46336}
!4519 = !{i64 46339}
!4520 = !{i64 46341}
!4521 = !{i64 46345}
!4522 = !{i64 46381}
!4523 = !{i64 46382}
!4524 = !{i64 46410}
!4525 = !{i64 46426}
!4526 = !{i64 46429}
!4527 = !{i64 46435}
!4528 = !{i64 46442}
!4529 = !{i64 46452}
!4530 = !{i64 46457}
!4531 = !{i64 46464}
!4532 = !{i64 46469}
!4533 = !{i64 46479}
!4534 = !{i64 46484}
!4535 = !{i64 46491}
!4536 = !{i64 46498}
!4537 = !{i64 46506}
!4538 = !{i64 46512}
!4539 = !{i64 46522}
!4540 = !{i64 46525}
!4541 = !{i64 46528}
!4542 = !{i64 46547}
!4543 = !{i64 46559}
!4544 = !{i64 46566}
!4545 = !{i64 46571}
!4546 = !{i64 46574}
!4547 = !{i64 46576}
!4548 = !{i64 46583}
!4549 = !{i64 46592}
!4550 = !{i64 46603}
!4551 = !{i64 46605}
!4552 = !{i64 46616}
!4553 = !{i64 46627}
!4554 = !{i64 46632}
!4555 = !{i64 46678}
!4556 = !{i64 46639}
!4557 = !{i64 46646}
!4558 = !{i64 46650}
!4559 = !{i64 46659}
!4560 = !{i64 46666}
!4561 = !{i64 46668}
!4562 = !{i64 46676}
!4563 = !{i64 46685}
!4564 = !{i64 46692}
!4565 = !{i64 46703}
!4566 = !{i64 46705}
!4567 = !{i64 46712}
!4568 = !{i64 46722}
!4569 = !{i64 46727}
!4570 = !{i64 46753}
!4571 = !{i64 46762}
!4572 = !{i64 46778}
!4573 = !{i64 46782}
!4574 = !{i64 46788}
!4575 = !{i64 46790}
!4576 = !{i64 46794}
!4577 = !{i64 46798}
!4578 = !{i64 46801}
!4579 = !{i64 46805}
!4580 = !{i64 46807}
!4581 = !{i64 46810}
!4582 = !{i64 46813}
!4583 = !{i64 46817}
!4584 = !{i64 46821}
!4585 = !{i64 46824}
!4586 = !{i64 46828}
!4587 = !{i64 46830}
!4588 = !{i64 46832}
!4589 = !{i64 46834}
!4590 = !{i64 46838}
!4591 = !{i64 46842}
!4592 = !{i64 46852}
!4593 = !{i64 46845}
!4594 = !{i64 46847}
!4595 = !{i64 46850}
!4596 = !{i64 46860}
!4597 = !{i64 46862}
!4598 = !{i64 46866}
!4599 = !{i64 46868}
!4600 = !{i64 46872}
!4601 = !{i64 46874}
!4602 = !{i64 46876}
!4603 = !{i64 46880}
!4604 = !{i64 46884}
!4605 = !{i64 46888}
!4606 = !{i64 46890}
!4607 = !{i64 46892}
!4608 = !{i64 46896}
!4609 = !{i64 46905}
!4610 = !{i64 46910}
!4611 = !{i64 46938}
!4612 = !{i64 46961}
!4613 = !{i64 47000}
!4614 = !{i64 47010}
!4615 = !{i64 47015}
!4616 = !{i64 47022}
!4617 = !{i64 47027}
!4618 = !{i64 47037}
!4619 = !{i64 47042}
!4620 = !{i64 47052}
!4621 = !{i64 47056}
!4622 = !{i64 47063}
!4623 = !{i64 47070}
!4624 = !{i64 47078}
!4625 = !{i64 47086}
!4626 = !{i64 47092}
!4627 = !{i64 47099}
!4628 = !{i64 47110}
!4629 = !{i64 47119}
!4630 = !{i64 47124}
!4631 = !{i64 47131}
!4632 = !{i64 47136}
!4633 = !{i64 47143}
!4634 = !{i64 47148}
!4635 = !{i64 47156}
!4636 = !{i64 47165}
!4637 = !{i64 47172}
!4638 = !{i64 47174}
!4639 = !{i64 47188}
!4640 = !{i64 47196}
!4641 = !{i64 47203}
!4642 = !{i64 47212}
!4643 = !{i64 47216}
!4644 = !{i64 47234}
!4645 = !{i64 47236}
!4646 = !{i64 47240}
!4647 = !{i64 47276}
!4648 = !{i64 47277}
!4649 = !{i64 47305}
!4650 = !{i64 47330}
!4651 = !{i64 47337}
!4652 = !{i64 47347}
!4653 = !{i64 47352}
!4654 = !{i64 47359}
!4655 = !{i64 47364}
!4656 = !{i64 47374}
!4657 = !{i64 47379}
!4658 = !{i64 47386}
!4659 = !{i64 47407}
!4660 = !{i64 47417}
!4661 = !{i64 47420}
!4662 = !{i64 47423}
!4663 = !{i64 47434}
!4664 = !{i64 47443}
!4665 = !{i64 47448}
!4666 = !{i64 47451}
!4667 = !{i64 47453}
!4668 = !{i64 47460}
!4669 = !{i64 47469}
!4670 = !{i64 47480}
!4671 = !{i64 47482}
!4672 = !{i64 47485}
!4673 = !{i64 47496}
!4674 = !{i64 47501}
!4675 = !{i64 47547}
!4676 = !{i64 47508}
!4677 = !{i64 47515}
!4678 = !{i64 47519}
!4679 = !{i64 47528}
!4680 = !{i64 47535}
!4681 = !{i64 47537}
!4682 = !{i64 47545}
!4683 = !{i64 47554}
!4684 = !{i64 47561}
!4685 = !{i64 47572}
!4686 = !{i64 47574}
!4687 = !{i64 47581}
!4688 = !{i64 47591}
!4689 = !{i64 47598}
!4690 = !{i64 47600}
!4691 = !{i64 47622}
!4692 = !{i64 47674}
!4693 = !{i64 47682}
!4694 = !{i64 47965}
!4695 = !{i64 47967}
!4696 = !{i64 47970}
!4697 = !{i64 47972}
!4698 = !{i64 47976}
!4699 = !{i64 48012}
!4700 = !{i64 48013}
!4701 = !{i64 48041}
!4702 = !{i64 48066}
!4703 = !{i64 48073}
!4704 = !{i64 48083}
!4705 = !{i64 48088}
!4706 = !{i64 48095}
!4707 = !{i64 48100}
!4708 = !{i64 48110}
!4709 = !{i64 48115}
!4710 = !{i64 48122}
!4711 = !{i64 48143}
!4712 = !{i64 48153}
!4713 = !{i64 48156}
!4714 = !{i64 48159}
!4715 = !{i64 48170}
!4716 = !{i64 48179}
!4717 = !{i64 48184}
!4718 = !{i64 48187}
!4719 = !{i64 48189}
!4720 = !{i64 48196}
!4721 = !{i64 48205}
!4722 = !{i64 48216}
!4723 = !{i64 48218}
!4724 = !{i64 48221}
!4725 = !{i64 48232}
!4726 = !{i64 48237}
!4727 = !{i64 48283}
!4728 = !{i64 48244}
!4729 = !{i64 48251}
!4730 = !{i64 48255}
!4731 = !{i64 48264}
!4732 = !{i64 48271}
!4733 = !{i64 48273}
!4734 = !{i64 48281}
!4735 = !{i64 48290}
!4736 = !{i64 48297}
!4737 = !{i64 48308}
!4738 = !{i64 48310}
!4739 = !{i64 48317}
!4740 = !{i64 48327}
!4741 = !{i64 48333}
!4742 = !{i64 48335}
!4743 = !{i64 48358}
!4744 = !{i64 48385}
!4745 = !{i64 48390}
!4746 = !{i64 48418}
!4747 = !{i64 48422}
!4748 = !{i64 48428}
!4749 = !{i64 48430}
!4750 = !{i64 48432}
!4751 = !{i64 48439}
!4752 = !{i64 48441}
!4753 = !{i64 48447}
!4754 = !{i64 48459}
!4755 = !{i64 48461}
!4756 = !{i64 48463}
!4757 = !{i64 48469}
!4758 = !{i64 48474}
!4759 = !{i64 48482}
!4760 = !{i64 48489}
!4761 = !{i64 48491}
!4762 = !{i64 48494}
!4763 = !{i64 48496}
!4764 = !{i64 48503}
!4765 = !{i64 48508}
!4766 = !{i64 48518}
!4767 = !{i64 48520}
!4768 = !{i64 48528}
!4769 = !{i64 48536}
!4770 = !{i64 48546}
!4771 = !{i64 48554}
!4772 = !{i64 48584}
!4773 = !{i64 48594}
!4774 = !{i64 48597}
!4775 = !{i64 48602}
!4776 = !{i64 48611}
!4777 = !{i64 48616}
!4778 = !{i64 48618}
!4779 = !{i64 48606}
!4780 = !{i64 48620}
!4781 = !{i64 48631}
!4782 = !{i64 48644}
!4783 = !{i64 48654}
!4784 = !{i64 48662}
!4785 = !{i64 48692}
!4786 = !{i64 48702}
!4787 = !{i64 48705}
!4788 = !{i64 48710}
!4789 = !{i64 48719}
!4790 = !{i64 48724}
!4791 = !{i64 48726}
!4792 = !{i64 48714}
!4793 = !{i64 48728}
!4794 = !{i64 48739}
!4795 = !{i64 48752}
!4796 = !{i64 48757}
!4797 = !{i64 48765}
!4798 = !{i64 48771}
!4799 = !{i64 48772}
!4800 = !{i64 48774}
!4801 = !{i64 48777}
!4802 = !{i64 48784}
!4803 = !{i64 48791}
!4804 = !{i64 48793}
!4805 = !{i64 48800}
!4806 = !{i64 48810}
!4807 = !{i64 48818}
!4808 = !{i64 48823}
!4809 = !{i64 48831}
!4810 = !{i64 48838}
!4811 = !{i64 48840}
!4812 = !{i64 48843}
!4813 = !{i64 48845}
!4814 = !{i64 48852}
!4815 = !{i64 48857}
!4816 = !{i64 48867}
!4817 = !{i64 48869}
!4818 = !{i64 48877}
!4819 = !{i64 48885}
!4820 = !{i64 48890}
!4821 = !{i64 48898}
!4822 = !{i64 48905}
!4823 = !{i64 48912}
!4824 = !{i64 48921}
!4825 = !{i64 48923}
!4826 = !{i64 48927}
!4827 = !{i64 48933}
!4828 = !{i64 48951}
!4829 = !{i64 48956}
!4830 = !{i64 48961}
!4831 = !{i64 48967}
!4832 = !{i64 48996}
!4833 = !{i64 49004}
!4834 = !{i64 49007}
!4835 = !{i64 49014}
!4836 = !{i64 49041}
!4837 = !{i64 49043}
!4838 = !{i64 49053}
!4839 = !{i64 49057}
!4840 = !{i64 49060}
!4841 = !{i64 49076}
!4842 = !{i64 49081}
!4843 = !{i64 49099}
!4844 = !{i64 49106}
!4845 = !{i64 49113}
!4846 = !{i64 49123}
!4847 = !{i64 49029}
!4848 = !{i64 49133}
!4849 = !{i64 49146}
!4850 = !{i64 49150}
!4851 = !{i64 49172}
!4852 = !{i64 49190}
!4853 = !{i64 49215}
!4854 = !{i64 49220}
!4855 = !{i64 49223}
!4856 = !{i64 49248}
!4857 = !{i64 49274}
!4858 = !{i64 49283}
!4859 = !{i64 49285}
!4860 = !{i64 49298}
!4861 = !{i64 49322}
!4862 = !{i64 49327}
!4863 = !{i64 49339}
!4864 = !{i64 49344}
!4865 = !{i64 49356}
!4866 = !{i64 49360}
!4867 = !{i64 49412}
!4868 = !{i64 49446}
!4869 = !{i64 49459}
!4870 = !{i64 49462}
!4871 = !{i64 49466}
!4872 = !{i64 49480}
!4873 = !{i64 49485}
!4874 = !{i64 49490}
!4875 = !{i64 49497}
!4876 = !{i64 49501}
!4877 = !{i64 49529}
!4878 = !{i64 49571}
!4879 = !{i64 49638}
!4880 = !{i64 49656}
!4881 = !{i64 49693}
!4882 = !{i64 49700}
!4883 = !{i64 49713}
!4884 = !{i64 49718}
!4885 = !{i64 49747}
!4886 = !{i64 49752}
!4887 = !{i64 49767}
!4888 = !{i64 49796}
!4889 = !{i64 49804}
!4890 = !{i64 49808}
!4891 = !{i64 49815}
!4892 = !{i64 49826}
!4893 = !{i64 49831}
!4894 = !{i64 49847}
!4895 = !{i64 49857}
!4896 = !{i64 49862}
!4897 = !{i64 49865}
!4898 = !{i64 49868}
!4899 = !{i64 49870}
!4900 = !{i64 49877}
!4901 = !{i64 49880}
!4902 = !{i64 49882}
!4903 = !{i64 49889}
!4904 = !{i64 49894}
!4905 = !{i64 49899}
!4906 = !{i64 49901}
!4907 = !{i64 49903}
!4908 = !{i64 49912}
!4909 = !{i64 49913}
!4910 = !{i64 49944}
!4911 = !{i64 49958}
!4912 = !{i64 49976}
!4913 = !{i64 49983}
!4914 = !{i64 49986}
!4915 = !{i64 49992}
!4916 = !{i64 50003}
!4917 = !{i64 50008}
!4918 = !{i64 50012}
!4919 = !{i64 50010}
!4920 = !{i64 49955}
!4921 = !{i64 50036}
!4922 = !{i64 50045}
!4923 = !{i64 50048}
!4924 = !{i64 50056}
!4925 = !{i64 50063}
!4926 = !{i64 50191}
!4927 = !{i64 50065}
!4928 = !{i64 50068}
!4929 = !{i64 50070}
!4930 = !{i64 50077}
!4931 = !{i64 50083}
!4932 = !{i64 50088}
!4933 = !{i64 50100}
!4934 = !{i64 50125}
!4935 = !{i64 50102}
!4936 = !{i64 50109}
!4937 = !{i64 50112}
!4938 = !{i64 50116}
!4939 = !{i64 50120}
!4940 = !{i64 50123}
!4941 = !{i64 50128}
!4942 = !{i64 50131}
!4943 = !{i64 50142}
!4944 = !{i64 50153}
!4945 = !{i64 50155}
!4946 = !{i64 50162}
!4947 = !{i64 50179}
!4948 = !{i64 50184}
!4949 = !{i64 50204}
!4950 = !{i64 50209}
!4951 = !{i64 50223}
!4952 = !{i64 50234}
!4953 = !{i64 50242}
!4954 = !{i64 50271}
!4955 = !{i64 50294}
!4956 = !{i64 50305}
!4957 = !{i64 50323}
!4958 = !{i64 50330}
!4959 = !{i64 50345}
!4960 = !{i64 50349}
!4961 = !{i64 50358}
!4962 = !{i64 50360}
!4963 = !{i64 50370}
!4964 = !{i64 50382}
!4965 = !{i64 50384}
!4966 = !{i64 50414}
!4967 = !{i64 50417}
!4968 = !{i64 50424}
!4969 = !{i64 50429}
!4970 = !{i64 50435}
!4971 = !{i64 50438}
!4972 = !{i64 50441}
!4973 = !{i64 50448}
!4974 = !{i64 50466}
!4975 = !{i64 50475}
!4976 = !{i64 50481}
!4977 = !{i64 50484}
!4978 = !{i64 50487}
!4979 = !{i64 50494}
!4980 = !{i64 50508}
!4981 = !{i64 50524}
!4982 = !{i64 50542}
!4983 = !{i64 50546}
!4984 = !{i64 50555}
!4985 = !{i64 50557}
!4986 = !{i64 50575}
!4987 = !{i64 50576}
!4988 = !{i64 50580}
!4989 = !{i64 50609}
!4990 = !{i64 50612}
!4991 = !{i64 50614}
!4992 = !{i64 50616}
!4993 = !{i64 50624}
!4994 = !{i64 50620}
!4995 = !{i64 50628}
!4996 = !{i64 50630}
!4997 = !{i64 50633}
!4998 = !{i64 50637}
!4999 = !{i64 50641}
!5000 = !{i64 50645}
!5001 = !{i64 50647}
!5002 = !{i64 50649}
!5003 = !{i64 50653}
!5004 = !{i64 50657}
!5005 = !{i64 50660}
!5006 = !{i64 50663}
!5007 = !{i64 50665}
!5008 = !{i64 50668}
!5009 = !{i64 50672}
!5010 = !{i64 50674}
!5011 = !{i64 50676}
!5012 = !{i64 50680}
!5013 = !{i64 50684}
!5014 = !{i64 50686}
!5015 = !{i64 50689}
!5016 = !{i64 50693}
!5017 = !{i64 50697}
!5018 = !{i64 50699}
!5019 = !{i64 50701}
!5020 = !{i64 50704}
!5021 = !{i64 50706}
!5022 = !{i64 50710}
!5023 = !{i64 50713}
!5024 = !{i64 50717}
!5025 = !{i64 50720}
!5026 = !{i64 50724}
!5027 = !{i64 50734}
!5028 = !{i64 50753}
!5029 = !{i64 50756}
!5030 = !{i64 50758}
!5031 = !{i64 50761}
!5032 = !{i64 50763}
!5033 = !{i64 50766}
!5034 = !{i64 50768}
!5035 = !{i64 50774}
!5036 = !{i64 50782}
!5037 = !{i64 50785}
!5038 = !{i64 50803}
!5039 = !{i64 50804}
!5040 = !{i64 50808}
!5041 = !{i64 50835}
!5042 = !{i64 50838}
!5043 = !{i64 50840}
!5044 = !{i64 50842}
!5045 = !{i64 50850}
!5046 = !{i64 50846}
!5047 = !{i64 50854}
!5048 = !{i64 50856}
!5049 = !{i64 50859}
!5050 = !{i64 50863}
!5051 = !{i64 50867}
!5052 = !{i64 50871}
!5053 = !{i64 50873}
!5054 = !{i64 50875}
!5055 = !{i64 50879}
!5056 = !{i64 50883}
!5057 = !{i64 50886}
!5058 = !{i64 50889}
!5059 = !{i64 50891}
!5060 = !{i64 50894}
!5061 = !{i64 50898}
!5062 = !{i64 50900}
!5063 = !{i64 50902}
!5064 = !{i64 50906}
!5065 = !{i64 50910}
!5066 = !{i64 50912}
!5067 = !{i64 50915}
!5068 = !{i64 50919}
!5069 = !{i64 50923}
!5070 = !{i64 50925}
!5071 = !{i64 50927}
!5072 = !{i64 50930}
!5073 = !{i64 50932}
!5074 = !{i64 50936}
!5075 = !{i64 50939}
!5076 = !{i64 50943}
!5077 = !{i64 50946}
!5078 = !{i64 50950}
!5079 = !{i64 50963}
!5080 = !{i64 50953}
!5081 = !{i64 50966}
!5082 = !{i64 50969}
!5083 = !{i64 50973}
!5084 = !{i64 50977}
!5085 = !{i64 50980}
!5086 = !{i64 50983}
!5087 = !{i64 50984}
!5088 = !{i64 50988}
!5089 = !{i64 51022}
!5090 = !{i64 51025}
!5091 = !{i64 51027}
!5092 = !{i64 51029}
!5093 = !{i64 51037}
!5094 = !{i64 51033}
!5095 = !{i64 51041}
!5096 = !{i64 51043}
!5097 = !{i64 51046}
!5098 = !{i64 51050}
!5099 = !{i64 51054}
!5100 = !{i64 51058}
!5101 = !{i64 51060}
!5102 = !{i64 51062}
!5103 = !{i64 51066}
!5104 = !{i64 51070}
!5105 = !{i64 51073}
!5106 = !{i64 51076}
!5107 = !{i64 51078}
!5108 = !{i64 51081}
!5109 = !{i64 51085}
!5110 = !{i64 51087}
!5111 = !{i64 51089}
!5112 = !{i64 51093}
!5113 = !{i64 51097}
!5114 = !{i64 51099}
!5115 = !{i64 51102}
!5116 = !{i64 51106}
!5117 = !{i64 51110}
!5118 = !{i64 51112}
!5119 = !{i64 51114}
!5120 = !{i64 51117}
!5121 = !{i64 51119}
!5122 = !{i64 51123}
!5123 = !{i64 51126}
!5124 = !{i64 51130}
!5125 = !{i64 51133}
!5126 = !{i64 51137}
!5127 = !{i64 51147}
!5128 = !{i64 51158}
!5129 = !{i64 51172}
!5130 = !{i64 51173}
!5131 = !{i64 51176}
!5132 = !{i64 51178}
!5133 = !{i64 51184}
!5134 = !{i64 51192}
!5135 = !{i64 51209}
!5136 = !{i64 51210}
!5137 = !{i64 51214}
!5138 = !{i64 51243}
!5139 = !{i64 51246}
!5140 = !{i64 51248}
!5141 = !{i64 51250}
!5142 = !{i64 51258}
!5143 = !{i64 51254}
!5144 = !{i64 51262}
!5145 = !{i64 51264}
!5146 = !{i64 51267}
!5147 = !{i64 51271}
!5148 = !{i64 51275}
!5149 = !{i64 51279}
!5150 = !{i64 51281}
!5151 = !{i64 51283}
!5152 = !{i64 51287}
!5153 = !{i64 51291}
!5154 = !{i64 51294}
!5155 = !{i64 51297}
!5156 = !{i64 51299}
!5157 = !{i64 51302}
!5158 = !{i64 51306}
!5159 = !{i64 51308}
!5160 = !{i64 51310}
!5161 = !{i64 51314}
!5162 = !{i64 51318}
!5163 = !{i64 51320}
!5164 = !{i64 51323}
!5165 = !{i64 51327}
!5166 = !{i64 51331}
!5167 = !{i64 51333}
!5168 = !{i64 51335}
!5169 = !{i64 51338}
!5170 = !{i64 51340}
!5171 = !{i64 51344}
!5172 = !{i64 51347}
!5173 = !{i64 51351}
!5174 = !{i64 51354}
!5175 = !{i64 51358}
!5176 = !{i64 51368}
!5177 = !{i64 51387}
!5178 = !{i64 51390}
!5179 = !{i64 51392}
!5180 = !{i64 51395}
!5181 = !{i64 51397}
!5182 = !{i64 51400}
!5183 = !{i64 51402}
!5184 = !{i64 51408}
!5185 = !{i64 51416}
!5186 = !{i64 51419}
!5187 = !{i64 51437}
!5188 = !{i64 51438}
!5189 = !{i64 51458}
!5190 = !{i64 51466}
!5191 = !{i64 51474}
!5192 = !{i64 51491}
!5193 = !{i64 51496}
!5194 = !{i64 51501}
!5195 = !{i64 51499}
!5196 = !{i64 51511}
!5197 = !{i64 51489}
!5198 = !{i64 51523}
!5199 = !{i64 51548}
!5200 = !{i64 51551}
!5201 = !{i64 51553}
!5202 = !{i64 51555}
!5203 = !{i64 51558}
!5204 = !{i64 51561}
!5205 = !{i64 51566}
!5206 = !{i64 51570}
!5207 = !{i64 51572}
!5208 = !{i64 51576}
!5209 = !{i64 51580}
!5210 = !{i64 51583}
!5211 = !{i64 51602}
!5212 = !{i64 51605}
!5213 = !{i64 51612}
!5214 = !{i64 51616}
!5215 = !{i64 51625}
!5216 = !{i64 51627}
!5217 = !{i64 51649}
!5218 = !{i64 51650}
!5219 = !{i64 51670}
!5220 = !{i64 51678}
!5221 = !{i64 51693}
!5222 = !{i64 51708}
!5223 = !{i64 51711}
!5224 = !{i64 51713}
!5225 = !{i64 51715}
!5226 = !{i64 51722}
!5227 = !{i64 51719}
!5228 = !{i64 51726}
!5229 = !{i64 51728}
!5230 = !{i64 51731}
!5231 = !{i64 51735}
!5232 = !{i64 51738}
!5233 = !{i64 51742}
!5234 = !{i64 51744}
!5235 = !{i64 51746}
!5236 = !{i64 51750}
!5237 = !{i64 51753}
!5238 = !{i64 51755}
!5239 = !{i64 51758}
!5240 = !{i64 51760}
!5241 = !{i64 51763}
!5242 = !{i64 51766}
!5243 = !{i64 51768}
!5244 = !{i64 51770}
!5245 = !{i64 51774}
!5246 = !{i64 51777}
!5247 = !{i64 51779}
!5248 = !{i64 51782}
!5249 = !{i64 51786}
!5250 = !{i64 51789}
!5251 = !{i64 51791}
!5252 = !{i64 51793}
!5253 = !{i64 51813}
!5254 = !{i64 51816}
!5255 = !{i64 51828}
!5256 = !{i64 51835}
!5257 = !{i64 51838}
!5258 = !{i64 51841}
!5259 = !{i64 51844}
!5260 = !{i64 51847}
!5261 = !{i64 51851}
!5262 = !{i64 51855}
!5263 = !{i64 51859}
!5264 = !{i64 51862}
!5265 = !{i64 51864}
!5266 = !{i64 51878}
!5267 = !{i64 51892}
!5268 = !{i64 51906}
!5269 = !{i64 51917}
!5270 = !{i64 51931}
!5271 = !{i64 51934}
!5272 = !{i64 51977}
!5273 = !{i64 51982}
!5274 = !{i64 51986}
!5275 = !{i64 51990}
!5276 = !{i64 51997}
!5277 = !{i64 52006}
!5278 = !{i64 52014}
!5279 = !{i64 52019}
!5280 = !{i64 52047}
!5281 = !{i64 52048}
!5282 = !{i64 52051}
!5283 = !{i64 52058}
!5284 = !{i64 52062}
!5285 = !{i64 52071}
!5286 = !{i64 52073}
!5287 = !{i64 52095}
!5288 = !{i64 52113}
!5289 = !{i64 52140}
!5290 = !{i64 52149}
!5291 = !{i64 52154}
!5292 = !{i64 52158}
!5293 = !{i64 52162}
!5294 = !{i64 52196}
!5295 = !{i64 52197}
!5296 = !{i64 52217}
!5297 = !{i64 52225}
!5298 = !{i64 52240}
!5299 = !{i64 52255}
!5300 = !{i64 52258}
!5301 = !{i64 52260}
!5302 = !{i64 52262}
!5303 = !{i64 52269}
!5304 = !{i64 52266}
!5305 = !{i64 52273}
!5306 = !{i64 52275}
!5307 = !{i64 52278}
!5308 = !{i64 52282}
!5309 = !{i64 52285}
!5310 = !{i64 52289}
!5311 = !{i64 52291}
!5312 = !{i64 52293}
!5313 = !{i64 52297}
!5314 = !{i64 52300}
!5315 = !{i64 52302}
!5316 = !{i64 52305}
!5317 = !{i64 52307}
!5318 = !{i64 52310}
!5319 = !{i64 52313}
!5320 = !{i64 52315}
!5321 = !{i64 52317}
!5322 = !{i64 52321}
!5323 = !{i64 52324}
!5324 = !{i64 52326}
!5325 = !{i64 52329}
!5326 = !{i64 52333}
!5327 = !{i64 52336}
!5328 = !{i64 52338}
!5329 = !{i64 52357}
!5330 = !{i64 52360}
!5331 = !{i64 52363}
!5332 = !{i64 52369}
!5333 = !{i64 52372}
!5334 = !{i64 52374}
!5335 = !{i64 52378}
!5336 = !{i64 52381}
!5337 = !{i64 52385}
!5338 = !{i64 52388}
!5339 = !{i64 52392}
!5340 = !{i64 52395}
!5341 = !{i64 52399}
!5342 = !{i64 52406}
!5343 = !{i64 52419}
!5344 = !{i64 52459}
!5345 = !{i64 52429}
!5346 = !{i64 52432}
!5347 = !{i64 52435}
!5348 = !{i64 52438}
!5349 = !{i64 52441}
!5350 = !{i64 52444}
!5351 = !{i64 52448}
!5352 = !{i64 52451}
!5353 = !{i64 52454}
!5354 = !{i64 52462}
!5355 = !{i64 52465}
!5356 = !{i64 52469}
!5357 = !{i64 52473}
!5358 = !{i64 52477}
!5359 = !{i64 52481}
!5360 = !{i64 52484}
!5361 = !{i64 52486}
!5362 = !{i64 52493}
!5363 = !{i64 52501}
!5364 = !{i64 52516}
!5365 = !{i64 52534}
!5366 = !{i64 52567}
!5367 = !{i64 52572}
!5368 = !{i64 52579}
!5369 = !{i64 52583}
!5370 = !{i64 52586}
!5371 = !{i64 52589}
!5372 = !{i64 52593}
!5373 = !{i64 52602}
!5374 = !{i64 52604}
!5375 = !{i64 52626}
!5376 = !{i64 52644}
!5377 = !{i64 52671}
!5378 = !{i64 52680}
!5379 = !{i64 52685}
!5380 = !{i64 52689}
!5381 = !{i64 52693}
!5382 = !{i64 52727}
!5383 = !{i64 52728}
!5384 = !{i64 52748}
!5385 = !{i64 52767}
!5386 = !{i64 52792}
!5387 = !{i64 52806}
!5388 = !{i64 52813}
!5389 = !{i64 52815}
!5390 = !{i64 52821}
!5391 = !{i64 52823}
!5392 = !{i64 52832}
!5393 = !{i64 52835}
!5394 = !{i64 52840}
!5395 = !{i64 52847}
!5396 = !{i64 52856}
!5397 = !{i64 52859}
!5398 = !{i64 52866}
!5399 = !{i64 52868}
!5400 = !{i64 52878}
!5401 = !{i64 52880}
!5402 = !{i64 52890}
!5403 = !{i64 52897}
!5404 = !{i64 52901}
!5405 = !{i64 52909}
!5406 = !{i64 52917}
!5407 = !{i64 52924}
!5408 = !{i64 52928}
!5409 = !{i64 52939}
!5410 = !{i64 52944}
!5411 = !{i64 52952}
!5412 = !{i64 52970}
!5413 = !{i64 52991}
!5414 = !{i64 52996}
!5415 = !{i64 53000}
!5416 = !{i64 53004}
!5417 = !{i64 53011}
!5418 = !{i64 53016}
!5419 = !{i64 53041}
!5420 = !{i64 53044}
!5421 = !{i64 53051}
!5422 = !{i64 53058}
!5423 = !{i64 53061}
!5424 = !{i64 53066}
!5425 = !{i64 53082}
!5426 = !{i64 53123}
!5427 = !{i64 53137}
!5428 = !{i64 53157}
!5429 = !{i64 53206}
!5430 = !{i64 53213}
!5431 = !{i64 53251}
!5432 = !{i64 53260}
!5433 = !{i64 53316}
!5434 = !{i64 53336}
!5435 = !{i64 53354}
!5436 = !{i64 53376}
!5437 = !{i64 53383}
!5438 = !{i64 53351}
!5439 = !{i64 53369}
!5440 = !{i64 53400}
!5441 = !{i64 53420}
!5442 = !{i64 53432}
!5443 = !{i64 53440}
!5444 = !{i64 53442}
!5445 = !{i64 53446}
!5446 = !{i64 53461}
!5447 = !{i64 53467}
!5448 = !{i64 53478}
!5449 = !{i64 53489}
!5450 = !{i64 53514}
!5451 = !{i64 53526}
!5452 = !{i64 53533}
!5453 = !{i64 53541}
!5454 = !{i64 53554}
!5455 = !{i64 53559}
!5456 = !{i64 53570}
!5457 = !{i64 53576}
!5458 = !{i64 53580}
!5459 = !{i64 53589}
!5460 = !{i64 53596}
!5461 = !{i64 53600}
!5462 = !{i64 53605}
!5463 = !{i64 53612}
!5464 = !{i64 53616}
!5465 = !{i64 53621}
!5466 = !{i64 53628}
!5467 = !{i64 53635}
!5468 = !{i64 53639}
!5469 = !{i64 53642}
!5470 = !{i64 53664}
!5471 = !{i64 53667}
!5472 = !{i64 53674}
!5473 = !{i64 53676}
!5474 = !{i64 53680}
!5475 = !{i64 53684}
!5476 = !{i64 53687}
!5477 = !{i64 53689}
!5478 = !{i64 53697}
!5479 = !{i64 53735}
!5480 = !{i64 53744}
!5481 = !{i64 53750}
!5482 = !{i64 53754}
!5483 = !{i64 53772}
!5484 = !{i64 53775}
!5485 = !{i64 53783}
!5486 = !{i64 53785}
!5487 = !{i64 53789}
!5488 = !{i64 53793}
!5489 = !{i64 53796}
!5490 = !{i64 53798}
!5491 = !{i64 53817}
!5492 = !{i64 53841}
!5493 = !{i64 53849}
!5494 = !{i64 53855}
!5495 = !{i64 53861}
!5496 = !{i64 53863}
!5497 = !{i64 53866}
!5498 = !{i64 53875}
!5499 = !{i64 53879}
!5500 = !{i64 53882}
!5501 = !{i64 53886}
!5502 = !{i64 53890}
!5503 = !{i64 53892}
!5504 = !{i64 53895}
!5505 = !{i64 53897}
!5506 = !{i64 53906}
!5507 = !{i64 53908}
!5508 = !{i64 53915}
!5509 = !{i64 53921}
!5510 = !{i64 53957}
!5511 = !{i64 53974}
!5512 = !{i64 53964}
!5513 = !{i64 53967}
!5514 = !{i64 53970}
!5515 = !{i64 53982}
!5516 = !{i64 53986}
!5517 = !{i64 53988}
!5518 = !{i64 53991}
!5519 = !{i64 53993}
!5520 = !{i64 53997}
!5521 = !{i64 54001}
!5522 = !{i64 54004}
!5523 = !{i64 54008}
!5524 = !{i64 54010}
!5525 = !{i64 54013}
!5526 = !{i64 54016}
!5527 = !{i64 54020}
!5528 = !{i64 54024}
!5529 = !{i64 54027}
!5530 = !{i64 54031}
!5531 = !{i64 54033}
!5532 = !{i64 54035}
!5533 = !{i64 54037}
!5534 = !{i64 54041}
!5535 = !{i64 54045}
!5536 = !{i64 54048}
!5537 = !{i64 54050}
!5538 = !{i64 54053}
!5539 = !{i64 54055}
!5540 = !{i64 54104}
!5541 = !{i64 54110}
!5542 = !{i64 54118}
!5543 = !{i64 54124}
!5544 = !{i64 54139}
!5545 = !{i64 54166}
!5546 = !{i64 54212}
!5547 = !{i64 54222}
!5548 = !{i64 54216}
!5549 = !{i64 54219}
!5550 = !{i64 54227}
!5551 = !{i64 54235}
!5552 = !{i64 54239}
!5553 = !{i64 54241}
!5554 = !{i64 54244}
!5555 = !{i64 54246}
!5556 = !{i64 54250}
!5557 = !{i64 54254}
!5558 = !{i64 54257}
!5559 = !{i64 54261}
!5560 = !{i64 54263}
!5561 = !{i64 54266}
!5562 = !{i64 54269}
!5563 = !{i64 54273}
!5564 = !{i64 54277}
!5565 = !{i64 54280}
!5566 = !{i64 54284}
!5567 = !{i64 54286}
!5568 = !{i64 54288}
!5569 = !{i64 54290}
!5570 = !{i64 54294}
!5571 = !{i64 54298}
!5572 = !{i64 54301}
!5573 = !{i64 54303}
!5574 = !{i64 54306}
!5575 = !{i64 54308}
!5576 = !{i64 54354}
!5577 = !{i64 54360}
!5578 = !{i64 54369}
!5579 = !{i64 54394}
!5580 = !{i64 54405}
!5581 = !{i64 54434}
!5582 = !{i64 54554}
!5583 = !{i64 54601}
!5584 = !{i64 54446}
!5585 = !{i64 54453}
!5586 = !{i64 54461}
!5587 = !{i64 54470}
!5588 = !{i64 54476}
!5589 = !{i64 54480}
!5590 = !{i64 54489}
!5591 = !{i64 54496}
!5592 = !{i64 54500}
!5593 = !{i64 54505}
!5594 = !{i64 54512}
!5595 = !{i64 54516}
!5596 = !{i64 54521}
!5597 = !{i64 54528}
!5598 = !{i64 54535}
!5599 = !{i64 54539}
!5600 = !{i64 54542}
!5601 = !{i64 54568}
!5602 = !{i64 54571}
!5603 = !{i64 54578}
!5604 = !{i64 54580}
!5605 = !{i64 54584}
!5606 = !{i64 54588}
!5607 = !{i64 54591}
!5608 = !{i64 54593}
!5609 = !{i64 54639}
!5610 = !{i64 54648}
!5611 = !{i64 54654}
!5612 = !{i64 54658}
!5613 = !{i64 54676}
!5614 = !{i64 54679}
!5615 = !{i64 54687}
!5616 = !{i64 54689}
!5617 = !{i64 54693}
!5618 = !{i64 54697}
!5619 = !{i64 54700}
!5620 = !{i64 54702}
!5621 = !{i64 54724}
!5622 = !{i64 54745}
!5623 = !{i64 54753}
!5624 = !{i64 54759}
!5625 = !{i64 54765}
!5626 = !{i64 54767}
!5627 = !{i64 54770}
!5628 = !{i64 54779}
!5629 = !{i64 54783}
!5630 = !{i64 54786}
!5631 = !{i64 54790}
!5632 = !{i64 54794}
!5633 = !{i64 54796}
!5634 = !{i64 54799}
!5635 = !{i64 54801}
!5636 = !{i64 54810}
!5637 = !{i64 54812}
!5638 = !{i64 54819}
!5639 = !{i64 54825}
!5640 = !{i64 54861}
!5641 = !{i64 54878}
!5642 = !{i64 54868}
!5643 = !{i64 54871}
!5644 = !{i64 54874}
!5645 = !{i64 54886}
!5646 = !{i64 54890}
!5647 = !{i64 54892}
!5648 = !{i64 54895}
!5649 = !{i64 54897}
!5650 = !{i64 54901}
!5651 = !{i64 54905}
!5652 = !{i64 54908}
!5653 = !{i64 54912}
!5654 = !{i64 54914}
!5655 = !{i64 54917}
!5656 = !{i64 54920}
!5657 = !{i64 54924}
!5658 = !{i64 54928}
!5659 = !{i64 54931}
!5660 = !{i64 54935}
!5661 = !{i64 54937}
!5662 = !{i64 54939}
!5663 = !{i64 54941}
!5664 = !{i64 54945}
!5665 = !{i64 54949}
!5666 = !{i64 54952}
!5667 = !{i64 54954}
!5668 = !{i64 54957}
!5669 = !{i64 54959}
!5670 = !{i64 55008}
!5671 = !{i64 55014}
!5672 = !{i64 55022}
!5673 = !{i64 55028}
!5674 = !{i64 55046}
!5675 = !{i64 55070}
!5676 = !{i64 55116}
!5677 = !{i64 55126}
!5678 = !{i64 55120}
!5679 = !{i64 55123}
!5680 = !{i64 55131}
!5681 = !{i64 55139}
!5682 = !{i64 55143}
!5683 = !{i64 55145}
!5684 = !{i64 55148}
!5685 = !{i64 55150}
!5686 = !{i64 55154}
!5687 = !{i64 55158}
!5688 = !{i64 55161}
!5689 = !{i64 55165}
!5690 = !{i64 55167}
!5691 = !{i64 55170}
!5692 = !{i64 55173}
!5693 = !{i64 55177}
!5694 = !{i64 55181}
!5695 = !{i64 55184}
!5696 = !{i64 55188}
!5697 = !{i64 55190}
!5698 = !{i64 55192}
!5699 = !{i64 55194}
!5700 = !{i64 55198}
!5701 = !{i64 55202}
!5702 = !{i64 55205}
!5703 = !{i64 55207}
!5704 = !{i64 55210}
!5705 = !{i64 55212}
!5706 = !{i64 55258}
!5707 = !{i64 55264}
!5708 = !{i64 55273}
!5709 = !{i64 53405}
!5710 = !{i64 53425}
!5711 = !{i64 55286}
!5712 = !{i64 55298}
!5713 = !{i64 55312}
!5714 = !{i64 55323}
!5715 = !{i64 55325}
!5716 = !{i64 55332}
!5717 = !{i64 55339}
!5718 = !{i64 55346}
!5719 = !{i64 55357}
!5720 = !{i64 55369}
!5721 = !{i64 55376}
!5722 = !{i64 55381}
!5723 = !{i64 55411}
!5724 = !{i64 55467}
!5725 = !{i64 55484}
!5726 = !{i64 55495}
!5727 = !{i64 55510}
!5728 = !{i64 55571}
!5729 = !{i64 55579}
!5730 = !{i64 55586}
!5731 = !{i64 55609}
!5732 = !{i64 55590}
!5733 = !{i64 55594}
!5734 = !{i64 55612}
!5735 = !{i64 55622}
!5736 = !{i64 55625}
!5737 = !{i64 55638}
!5738 = !{i64 55641}
!5739 = !{i64 55643}
!5740 = !{i64 55645}
!5741 = !{i64 55649}
!5742 = !{i64 55653}
!5743 = !{i64 55656}
!5744 = !{i64 55660}
!5745 = !{i64 55664}
!5746 = !{i64 55668}
!5747 = !{i64 55670}
!5748 = !{i64 55689}
!5749 = !{i64 55697}
!5750 = !{i64 55705}
!5751 = !{i64 55707}
!5752 = !{i64 55709}
!5753 = !{i64 55725}
!5754 = !{i64 55730}
!5755 = !{i64 55741}
!5756 = !{i64 55748}
!5757 = !{i64 55755}
!5758 = !{i64 55758}
!5759 = !{i64 55773}
!5760 = !{i64 55783}
!5761 = !{i64 55788}
!5762 = !{i64 55797}
!5763 = !{i64 55812}
!5764 = !{i64 55823}
!5765 = !{i64 55828}
!5766 = !{i64 55839}
!5767 = !{i64 55846}
!5768 = !{i64 55853}
!5769 = !{i64 55856}
!5770 = !{i64 55870}
!5771 = !{i64 55877}
!5772 = !{i64 55880}
!5773 = !{i64 55890}
!5774 = !{i64 55894}
!5775 = !{i64 55903}
!5776 = !{i64 55905}
!5777 = !{i64 55924}
!5778 = !{i64 55925}
!5779 = !{i64 55945}
!5780 = !{i64 55967}
!5781 = !{i64 55982}
!5782 = !{i64 55997}
!5783 = !{i64 56001}
!5784 = !{i64 56003}
!5785 = !{i64 56005}
!5786 = !{i64 56012}
!5787 = !{i64 56009}
!5788 = !{i64 56016}
!5789 = !{i64 56018}
!5790 = !{i64 56021}
!5791 = !{i64 56025}
!5792 = !{i64 56028}
!5793 = !{i64 56032}
!5794 = !{i64 56034}
!5795 = !{i64 56036}
!5796 = !{i64 56040}
!5797 = !{i64 56043}
!5798 = !{i64 56045}
!5799 = !{i64 56048}
!5800 = !{i64 56050}
!5801 = !{i64 56053}
!5802 = !{i64 56056}
!5803 = !{i64 56058}
!5804 = !{i64 56060}
!5805 = !{i64 56064}
!5806 = !{i64 56067}
!5807 = !{i64 56069}
!5808 = !{i64 56072}
!5809 = !{i64 56076}
!5810 = !{i64 56079}
!5811 = !{i64 56081}
!5812 = !{i64 56083}
!5813 = !{i64 56091}
!5814 = !{i64 56114}
!5815 = !{i64 56118}
!5816 = !{i64 56121}
!5817 = !{i64 56123}
!5818 = !{i64 56127}
!5819 = !{i64 56131}
!5820 = !{i64 56134}
!5821 = !{i64 56136}
!5822 = !{i64 56150}
!5823 = !{i64 56164}
!5824 = !{i64 56198}
!5825 = !{i64 56227}
!5826 = !{i64 56229}
!5827 = !{i64 56233}
!5828 = !{i64 56237}
!5829 = !{i64 56241}
!5830 = !{i64 56250}
!5831 = !{i64 56253}
!5832 = !{i64 56265}
!5833 = !{i64 56309}
!5834 = !{i64 56314}
!5835 = !{i64 56324}
!5836 = !{i64 56329}
!5837 = !{i64 56332}
!5838 = !{i64 56339}
!5839 = !{i64 56343}
!5840 = !{i64 56345}
!5841 = !{i64 56355}
!5842 = !{i64 56360}
!5843 = !{i64 56365}
!5844 = !{i64 56375}
!5845 = !{i64 56380}
!5846 = !{i64 56390}
!5847 = !{i64 56393}
!5848 = !{i64 56396}
!5849 = !{i64 56399}
!5850 = !{i64 56403}
!5851 = !{i64 56407}
!5852 = !{i64 56411}
!5853 = !{i64 56414}
!5854 = !{i64 56458}
!5855 = !{i64 56463}
!5856 = !{i64 56466}
!5857 = !{i64 56482}
!5858 = !{i64 56474}
!5859 = !{i64 56488}
!5860 = !{i64 56493}
!5861 = !{i64 56501}
!5862 = !{i64 56503}
!5863 = !{i64 56522}
!5864 = !{i64 56527}
!5865 = !{i64 56532}
!5866 = !{i64 56534}
!5867 = !{i64 56547}
!5868 = !{i64 56563}
!5869 = !{i64 56568}
!5870 = !{i64 56570}
!5871 = !{i64 56574}
!5872 = !{i64 56581}
!5873 = !{i64 56578}
!5874 = !{i64 56587}
!5875 = !{i64 56585}
!5876 = !{i64 56590}
!5877 = !{i64 56593}
!5878 = !{i64 56597}
!5879 = !{i64 56601}
!5880 = !{i64 56604}
!5881 = !{i64 56610}
!5882 = !{i64 56608}
!5883 = !{i64 56612}
!5884 = !{i64 56614}
!5885 = !{i64 56618}
!5886 = !{i64 56622}
!5887 = !{i64 56632}
!5888 = !{i64 56625}
!5889 = !{i64 56627}
!5890 = !{i64 56630}
!5891 = !{i64 56640}
!5892 = !{i64 56652}
!5893 = !{i64 56676}
!5894 = !{i64 56683}
!5895 = !{i64 56695}
!5896 = !{i64 56705}
!5897 = !{i64 56707}
!5898 = !{i64 56711}
!5899 = !{i64 56714}
!5900 = !{i64 56718}
!5901 = !{i64 56721}
!5902 = !{i64 56725}
!5903 = !{i64 56728}
!5904 = !{i64 56742}
!5905 = !{i64 56759}
!5906 = !{i64 56766}
!5907 = !{i64 56787}
!5908 = !{i64 56790}
!5909 = !{i64 56794}
!5910 = !{i64 56802}
!5911 = !{i64 56816}
!5912 = !{i64 56828}
!5913 = !{i64 56833}
!5914 = !{i64 56837}
!5915 = !{i64 56845}
!5916 = !{i64 56850}
!5917 = !{i64 56854}
!5918 = !{i64 56859}
!5919 = !{i64 56863}
!5920 = !{i64 56868}
!5921 = !{i64 56872}
!5922 = !{i64 56877}
!5923 = !{i64 56881}
!5924 = !{i64 56886}
!5925 = !{i64 56890}
!5926 = !{i64 56895}
!5927 = !{i64 56899}
!5928 = !{i64 56904}
!5929 = !{i64 56908}
!5930 = !{i64 56921}
!5931 = !{i64 56925}
!5932 = !{i64 56990}
!5933 = !{i64 57017}
!5934 = !{i64 57031}
!5935 = !{i64 57035}
!5936 = !{i64 57039}
!5937 = !{i64 57078}
!5938 = !{i64 57079}
!5939 = !{i64 57106}
!5940 = !{i64 57120}
!5941 = !{i64 57142}
!5942 = !{i64 57149}
!5943 = !{i64 57151}
!5944 = !{i64 57135}
!5945 = !{i64 57157}
!5946 = !{i64 57164}
!5947 = !{i64 57166}
!5948 = !{i64 57172}
!5949 = !{i64 57179}
!5950 = !{i64 57181}
!5951 = !{i64 57183}
!5952 = !{i64 57190}
!5953 = !{i64 57195}
!5954 = !{i64 57197}
!5955 = !{i64 57199}
!5956 = !{i64 57216}
!5957 = !{i64 57221}
!5958 = !{i64 57223}
!5959 = !{i64 57230}
!5960 = !{i64 57236}
!5961 = !{i64 57243}
!5962 = !{i64 57245}
!5963 = !{i64 57260}
!5964 = !{i64 57265}
!5965 = !{i64 57270}
!5966 = !{i64 57274}
!5967 = !{i64 57280}
!5968 = !{i64 57272}
!5969 = !{i64 57295}
!5970 = !{i64 57300}
!5971 = !{i64 57305}
!5972 = !{i64 57307}
!5973 = !{i64 57322}
!5974 = !{i64 57327}
!5975 = !{i64 57332}
!5976 = !{i64 57334}
!5977 = !{i64 57340}
!5978 = !{i64 57347}
!5979 = !{i64 57351}
!5980 = !{i64 57358}
!5981 = !{i64 57369}
!5982 = !{i64 57380}
!5983 = !{i64 57391}
!5984 = !{i64 57395}
!5985 = !{i64 57402}
!5986 = !{i64 57411}
!5987 = !{i64 57424}
!5988 = !{i64 57437}
!5989 = !{i64 57409}
!5990 = !{i64 57418}
!5991 = !{i64 57421}
!5992 = !{i64 57431}
!5993 = !{i64 57434}
!5994 = !{i64 57444}
!5995 = !{i64 57447}
!5996 = !{i64 57450}
!5997 = !{i64 57453}
!5998 = !{i64 57457}
!5999 = !{i64 57460}
!6000 = !{i64 57462}
!6001 = !{i64 57469}
!6002 = !{i64 57485}
!6003 = !{i64 57501}
!6004 = !{i64 57506}
!6005 = !{i64 57521}
!6006 = !{i64 57537}
!6007 = !{i64 57542}
!6008 = !{i64 57547}
!6009 = !{i64 57549}
!6010 = !{i64 57555}
!6011 = !{i64 57565}
!6012 = !{i64 57568}
!6013 = !{i64 57572}
!6014 = !{i64 57575}
!6015 = !{i64 57577}
!6016 = !{i64 57581}
!6017 = !{i64 57585}
!6018 = !{i64 57588}
!6019 = !{i64 57590}
!6020 = !{i64 57597}
!6021 = !{i64 57604}
!6022 = !{i64 57613}
!6023 = !{i64 57626}
!6024 = !{i64 57639}
!6025 = !{i64 57611}
!6026 = !{i64 57620}
!6027 = !{i64 57623}
!6028 = !{i64 57633}
!6029 = !{i64 57636}
!6030 = !{i64 57646}
!6031 = !{i64 57649}
!6032 = !{i64 57652}
!6033 = !{i64 57655}
!6034 = !{i64 57659}
!6035 = !{i64 57662}
!6036 = !{i64 57667}
!6037 = !{i64 57679}
!6038 = !{i64 57683}
!6039 = !{i64 57685}
!6040 = !{i64 57688}
!6041 = !{i64 57692}
!6042 = !{i64 57696}
!6043 = !{i64 57703}
!6044 = !{i64 57700}
!6045 = !{i64 57709}
!6046 = !{i64 57707}
!6047 = !{i64 57712}
!6048 = !{i64 57715}
!6049 = !{i64 57719}
!6050 = !{i64 57723}
!6051 = !{i64 57726}
!6052 = !{i64 57732}
!6053 = !{i64 57730}
!6054 = !{i64 57734}
!6055 = !{i64 57736}
!6056 = !{i64 57740}
!6057 = !{i64 57744}
!6058 = !{i64 57754}
!6059 = !{i64 57747}
!6060 = !{i64 57749}
!6061 = !{i64 57752}
!6062 = !{i64 57810}
!6063 = !{i64 57819}
!6064 = !{i64 57813}
!6065 = !{i64 57827}
!6066 = !{i64 57842}
!6067 = !{i64 57844}
!6068 = !{i64 57861}
!6069 = !{i64 57868}
!6070 = !{i64 57875}
!6071 = !{i64 57881}
!6072 = !{i64 57888}
!6073 = !{i64 57890}
!6074 = !{i64 57905}
!6075 = !{i64 57910}
!6076 = !{i64 57915}
!6077 = !{i64 57919}
!6078 = !{i64 57921}
!6079 = !{i64 57917}
!6080 = !{i64 57936}
!6081 = !{i64 57941}
!6082 = !{i64 57946}
!6083 = !{i64 57948}
!6084 = !{i64 57963}
!6085 = !{i64 57968}
!6086 = !{i64 57973}
!6087 = !{i64 57975}
!6088 = !{i64 57981}
!6089 = !{i64 57986}
!6090 = !{i64 57990}
!6091 = !{i64 57996}
!6092 = !{i64 58000}
!6093 = !{i64 58006}
!6094 = !{i64 58010}
!6095 = !{i64 58016}
!6096 = !{i64 58023}
!6097 = !{i64 58031}
!6098 = !{i64 58041}
!6099 = !{i64 58061}
!6100 = !{i64 58081}
!6101 = !{i64 58038}
!6102 = !{i64 58048}
!6103 = !{i64 58051}
!6104 = !{i64 58058}
!6105 = !{i64 58068}
!6106 = !{i64 58071}
!6107 = !{i64 58078}
!6108 = !{i64 58088}
!6109 = !{i64 58091}
!6110 = !{i64 58098}
!6111 = !{i64 58101}
!6112 = !{i64 58108}
!6113 = !{i64 58115}
!6114 = !{i64 58118}
!6115 = !{i64 58120}
!6116 = !{i64 58127}
!6117 = !{i64 58131}
!6118 = !{i64 58136}
!6119 = !{i64 58152}
!6120 = !{i64 58157}
!6121 = !{i64 58164}
!6122 = !{i64 58172}
!6123 = !{i64 58188}
!6124 = !{i64 58193}
!6125 = !{i64 58198}
!6126 = !{i64 58200}
!6127 = !{i64 58206}
!6128 = !{i64 58211}
!6129 = !{i64 58215}
!6130 = !{i64 58221}
!6131 = !{i64 58225}
!6132 = !{i64 58231}
!6133 = !{i64 58235}
!6134 = !{i64 58241}
!6135 = !{i64 58248}
!6136 = !{i64 58256}
!6137 = !{i64 58266}
!6138 = !{i64 58286}
!6139 = !{i64 58306}
!6140 = !{i64 58263}
!6141 = !{i64 58273}
!6142 = !{i64 58276}
!6143 = !{i64 58283}
!6144 = !{i64 58293}
!6145 = !{i64 58296}
!6146 = !{i64 58303}
!6147 = !{i64 58313}
!6148 = !{i64 58316}
!6149 = !{i64 58323}
!6150 = !{i64 58326}
!6151 = !{i64 58333}
!6152 = !{i64 58340}
!6153 = !{i64 58343}
!6154 = !{i64 58348}
!6155 = !{i64 58356}
!6156 = !{i64 58360}
!6157 = !{i64 58367}
!6158 = !{i64 58375}
!6159 = !{i64 58382}
!6160 = !{i64 58379}
!6161 = !{i64 58388}
!6162 = !{i64 58386}
!6163 = !{i64 58391}
!6164 = !{i64 58394}
!6165 = !{i64 58398}
!6166 = !{i64 58402}
!6167 = !{i64 58405}
!6168 = !{i64 58411}
!6169 = !{i64 58409}
!6170 = !{i64 58413}
!6171 = !{i64 58415}
!6172 = !{i64 58419}
!6173 = !{i64 58423}
!6174 = !{i64 58433}
!6175 = !{i64 58426}
!6176 = !{i64 58428}
!6177 = !{i64 58431}
!6178 = !{i64 58485}
!6179 = !{i64 58489}
!6180 = !{i64 58498}
!6181 = !{i64 58514}
!6182 = !{i64 58536}
!6183 = !{i64 58537}
!6184 = !{i64 58557}
!6185 = !{i64 58593}
!6186 = !{i64 58608}
!6187 = !{i64 58672}
!6188 = !{i64 58701}
!6189 = !{i64 58707}
!6190 = !{i64 58717}
!6191 = !{i64 58724}
!6192 = !{i64 58731}
!6193 = !{i64 58747}
!6194 = !{i64 58752}
!6195 = !{i64 58756}
!6196 = !{i64 58760}
!6197 = !{i64 58763}
!6198 = !{i64 58772}
!6199 = !{i64 58812}
!6200 = !{i64 58822}
!6201 = !{i64 58829}
!6202 = !{i64 58833}
!6203 = !{i64 58842}
!6204 = !{i64 58845}
!6205 = !{i64 58850}
!6206 = !{i64 58853}
!6207 = !{i64 58859}
!6208 = !{i64 58862}
!6209 = !{i64 58866}
!6210 = !{i64 58870}
!6211 = !{i64 58874}
!6212 = !{i64 58878}
!6213 = !{i64 58892}
!6214 = !{i64 58897}
!6215 = !{i64 58914}
!6216 = !{i64 58921}
!6217 = !{i64 58937}
!6218 = !{i64 58942}
!6219 = !{i64 58946}
!6220 = !{i64 58950}
!6221 = !{i64 58953}
!6222 = !{i64 58986}
!6223 = !{i64 59003}
!6224 = !{i64 59007}
!6225 = !{i64 59016}
!6226 = !{i64 59019}
!6227 = !{i64 59024}
!6228 = !{i64 59027}
!6229 = !{i64 59033}
!6230 = !{i64 59036}
!6231 = !{i64 59040}
!6232 = !{i64 59044}
!6233 = !{i64 59048}
!6234 = !{i64 59052}
!6235 = !{i64 59054}
!6236 = !{i64 59068}
!6237 = !{i64 59119}
!6238 = !{i64 59122}
!6239 = !{i64 59126}
!6240 = !{i64 59133}
!6241 = !{i64 59151}
!6242 = !{i64 59156}
!6243 = !{i64 59160}
!6244 = !{i64 59164}
!6245 = !{i64 59167}
!6246 = !{i64 59200}
!6247 = !{i64 59217}
!6248 = !{i64 59221}
!6249 = !{i64 59230}
!6250 = !{i64 59233}
!6251 = !{i64 59238}
!6252 = !{i64 59241}
!6253 = !{i64 59247}
!6254 = !{i64 59250}
!6255 = !{i64 59254}
!6256 = !{i64 59258}
!6257 = !{i64 59262}
!6258 = !{i64 59266}
!6259 = !{i64 59290}
!6260 = !{i64 59293}
!6261 = !{i64 59296}
!6262 = !{i64 59299}
!6263 = !{i64 59306}
!6264 = !{i64 59310}
!6265 = !{i64 59314}
!6266 = !{i64 59318}
!6267 = !{i64 59322}
!6268 = !{i64 59325}
!6269 = !{i64 59347}
!6270 = !{i64 59350}
!6271 = !{i64 59388}
!6272 = !{i64 59390}
!6273 = !{i64 59395}
!6274 = !{i64 59569}
!6275 = !{i64 59577}
!6276 = !{i64 59580}
!6277 = !{i64 59585}
!6278 = !{i64 59594}
!6279 = !{i64 59599}
!6280 = !{i64 59611}
!6281 = !{i64 59425}
!6282 = !{i64 59445}
!6283 = !{i64 59450}
!6284 = !{i64 59454}
!6285 = !{i64 59458}
!6286 = !{i64 59461}
!6287 = !{i64 59470}
!6288 = !{i64 59501}
!6289 = !{i64 59506}
!6290 = !{i64 59537}
!6291 = !{i64 59542}
!6292 = !{i64 59559}
!6293 = !{i64 59564}
!6294 = !{i64 59616}
!6295 = !{i64 59626}
!6296 = !{i64 59630}
!6297 = !{i64 59639}
!6298 = !{i64 59641}
!6299 = !{i64 59663}
!6300 = !{i64 59664}
!6301 = !{i64 59678}
!6302 = !{i64 59686}
!6303 = !{i64 59701}
!6304 = !{i64 59884}
!6305 = !{i64 59894}
!6306 = !{i64 59902}
!6307 = !{i64 59909}
!6308 = !{i64 59916}
!6309 = !{i64 59924}
!6310 = !{i64 59931}
!6311 = !{i64 59940}
!6312 = !{i64 59947}
!6313 = !{i64 59956}
!6314 = !{i64 59963}
!6315 = !{i64 59972}
!6316 = !{i64 59979}
!6317 = !{i64 59988}
!6318 = !{i64 59995}
!6319 = !{i64 60007}
!6320 = !{i64 60011}
!6321 = !{i64 60015}
!6322 = !{i64 60022}
!6323 = !{i64 60024}
!6324 = !{i64 60028}
!6325 = !{i64 60032}
!6326 = !{i64 60035}
!6327 = !{i64 59891}
!6328 = !{i64 59918}
!6329 = !{i64 59934}
!6330 = !{i64 59950}
!6331 = !{i64 59966}
!6332 = !{i64 59982}
!6333 = !{i64 59998}
!6334 = !{i64 59665}
!6335 = !{i64 59906}
!6336 = !{i64 59921}
!6337 = !{i64 59937}
!6338 = !{i64 59953}
!6339 = !{i64 59969}
!6340 = !{i64 59985}
!6341 = !{i64 60037}
!6342 = !{i64 60041}
!6343 = !{i64 60045}
!6344 = !{i64 60055}
!6345 = !{i64 60049}
!6346 = !{i64 60052}
!6347 = !{i64 60060}
!6348 = !{i64 60063}
!6349 = !{i64 60067}
!6350 = !{i64 60071}
!6351 = !{i64 60074}
!6352 = !{i64 60001}
!6353 = !{i64 60084}
!6354 = !{i64 60132}
!6355 = !{i64 60136}
!6356 = !{i64 60140}
!6357 = !{i64 60144}
!6358 = !{i64 60147}
!6359 = !{i64 60150}
!6360 = !{i64 60153}
!6361 = !{i64 60156}
!6362 = !{i64 60160}
!6363 = !{i64 60164}
!6364 = !{i64 60168}
!6365 = !{i64 60171}
!6366 = !{i64 60181}
!6367 = !{i64 60186}
!6368 = !{i64 60191}
!6369 = !{i64 60197}
!6370 = !{i64 60204}
!6371 = !{i64 60209}
!6372 = !{i64 60226}
!6373 = !{i64 60231}
!6374 = !{i64 60241}
!6375 = !{i64 60244}
!6376 = !{i64 60248}
!6377 = !{i64 60251}
!6378 = !{i64 60253}
!6379 = !{i64 60291}
!6380 = !{i64 60264}
!6381 = !{i64 60273}
!6382 = !{i64 60276}
!6383 = !{i64 60279}
!6384 = !{i64 60284}
!6385 = !{i64 60287}
!6386 = !{i64 60299}
!6387 = !{i64 60302}
!6388 = !{i64 60305}
!6389 = !{i64 60307}
!6390 = !{i64 60311}
!6391 = !{i64 60314}
!6392 = !{i64 60317}
!6393 = !{i64 60319}
!6394 = !{i64 60340}
!6395 = !{i64 60342}
!6396 = !{i64 60345}
!6397 = !{i64 60348}
!6398 = !{i64 60356}
!6399 = !{i64 60359}
!6400 = !{i64 60363}
!6401 = !{i64 60366}
!6402 = !{i64 60368}
!6403 = !{i64 60370}
!6404 = !{i64 60374}
!6405 = !{i64 60377}
!6406 = !{i64 60380}
!6407 = !{i64 60388}
!6408 = !{i64 60390}
!6409 = !{i64 60411}
!6410 = !{i64 60413}
!6411 = !{i64 60416}
!6412 = !{i64 60419}
!6413 = !{i64 60427}
!6414 = !{i64 60429}
!6415 = !{i64 60431}
!6416 = !{i64 60434}
!6417 = !{i64 60437}
!6418 = !{i64 60439}
!6419 = !{i64 60442}
!6420 = !{i64 60446}
!6421 = !{i64 60449}
!6422 = !{i64 60452}
!6423 = !{i64 60462}
!6424 = !{i64 60475}
!6425 = !{i64 60485}
!6426 = !{i64 60490}
!6427 = !{i64 60498}
!6428 = !{i64 60499}
!6429 = !{i64 60504}
!6430 = !{i64 60514}
!6431 = !{i64 60518}
!6432 = !{i64 60527}
!6433 = !{i64 60529}
!6434 = !{i64 60545}
!6435 = !{i64 60546}
!6436 = !{i64 60563}
!6437 = !{i64 60581}
!6438 = !{i64 60593}
!6439 = !{i64 60595}
!6440 = !{i64 60575}
!6441 = !{i64 60600}
!6442 = !{i64 60603}
!6443 = !{i64 60616}
!6444 = !{i64 60619}
!6445 = !{i64 60623}
!6446 = !{i64 60630}
!6447 = !{i64 60635}
!6448 = !{i64 60639}
!6449 = !{i64 60648}
!6450 = !{i64 60650}
!6451 = !{i64 60664}
!6452 = !{i64 60666}
!6453 = !{i64 60686}
!6454 = !{i64 60689}
!6455 = !{i64 60701}
!6456 = !{i64 60704}
!6457 = !{i64 60715}
!6458 = !{i64 60726}
!6459 = !{i64 60738}
!6460 = !{i64 60741}
!6461 = !{i64 60747}
!6462 = !{i64 60758}
!6463 = !{i64 60767}
!6464 = !{i64 60770}
!6465 = !{i64 60776}
!6466 = !{i64 60783}
!6467 = !{i64 60791}
!6468 = !{i64 60799}
!6469 = !{i64 60823}
!6470 = !{i64 60824}
!6471 = !{i64 60841}
!6472 = !{i64 60859}
!6473 = !{i64 60874}
!6474 = !{i64 60886}
!6475 = !{i64 60888}
!6476 = !{i64 60853}
!6477 = !{i64 60896}
!6478 = !{i64 60909}
!6479 = !{i64 60912}
!6480 = !{i64 60916}
!6481 = !{i64 60923}
!6482 = !{i64 60928}
!6483 = !{i64 60932}
!6484 = !{i64 60941}
!6485 = !{i64 60943}
!6486 = !{i64 60957}
!6487 = !{i64 60959}
!6488 = !{i64 60979}
!6489 = !{i64 60982}
!6490 = !{i64 60994}
!6491 = !{i64 60997}
!6492 = !{i64 60999}
!6493 = !{i64 61001}
!6494 = !{i64 61008}
!6495 = !{i64 61019}
!6496 = !{i64 61031}
!6497 = !{i64 61034}
!6498 = !{i64 61040}
!6499 = !{i64 61051}
!6500 = !{i64 61060}
!6501 = !{i64 61063}
!6502 = !{i64 61069}
!6503 = !{i64 61076}
!6504 = !{i64 61083}
!6505 = !{i64 61091}
!6506 = !{i64 61116}
!6507 = !{i64 61121}
!6508 = !{i64 61129}
!6509 = !{i64 61137}
!6510 = !{i64 61144}
!6511 = !{i64 61149}
!6512 = !{i64 61171}
!6513 = !{i64 61178}
!6514 = !{i64 61185}
!6515 = !{i64 61195}
!6516 = !{i64 61200}
!6517 = !{i64 61202}
!6518 = !{i64 61209}
!6519 = !{i64 61210}
!6520 = !{i64 61215}
!6521 = !{i64 61222}
!6522 = !{i64 61232}
!6523 = !{i64 61256}
!6524 = !{i64 61285}
!6525 = !{i64 61365}
!6526 = !{i64 61372}
!6527 = !{i64 61376}
!6528 = !{i64 61385}
!6529 = !{i64 61427}
!6530 = !{i64 61432}
!6531 = !{i64 61457}
!6532 = !{i64 61460}
!6533 = !{i64 61463}
!6534 = !{i64 61483}
!6535 = !{i64 61496}
!6536 = !{i64 61499}
!6537 = !{i64 61507}
!6538 = !{i64 61519}
!6539 = !{i64 61559}
!6540 = !{i64 61591}
!6541 = !{i64 61596}
!6542 = !{i64 61632}
!6543 = !{i64 61637}
!6544 = !{i64 61642}
!6545 = !{i64 61675}
!6546 = !{i64 61685}
!6547 = !{i64 61716}
!6548 = !{i64 61719}
!6549 = !{i64 61727}
!6550 = !{i64 61732}
!6551 = !{i64 61742}
!6552 = !{i64 61744}
!6553 = !{i64 61751}
!6554 = !{i64 61753}
!6555 = !{i64 61760}
!6556 = !{i64 61765}
!6557 = !{i64 61778}
!6558 = !{i64 61781}
!6559 = !{i64 61783}
!6560 = !{i64 61789}
!6561 = !{i64 61790}
!6562 = !{i64 61821}
!6563 = !{i64 61843}
!6564 = !{i64 61858}
!6565 = !{i64 61865}
!6566 = !{i64 61868}
!6567 = !{i64 61906}
!6568 = !{i64 61911}
!6569 = !{i64 61915}
!6570 = !{i64 61924}
!6571 = !{i64 61936}
!6572 = !{i64 61948}
!6573 = !{i64 61960}
!6574 = !{i64 61965}
!6575 = !{i64 61985}
!6576 = !{i64 62000}
!6577 = !{i64 62016}
!6578 = !{i64 62020}
!6579 = !{i64 62029}
!6580 = !{i64 62048}
!6581 = !{i64 62050}
!6582 = !{i64 62057}
!6583 = !{i64 62079}
!6584 = !{i64 62084}
!6585 = !{i64 62088}
!6586 = !{i64 62098}
!6587 = !{i64 62101}
!6588 = !{i64 62105}
!6589 = !{i64 62116}
!6590 = !{i64 62124}
!6591 = !{i64 62127}
!6592 = !{i64 62131}
!6593 = !{i64 62148}
!6594 = !{i64 62159}
!6595 = !{i64 62165}
!6596 = !{i64 62169}
!6597 = !{i64 62178}
!6598 = !{i64 62180}
!6599 = !{i64 62193}
!6600 = !{i64 62206}
!6601 = !{i64 62211}
!6602 = !{i64 62222}
!6603 = !{i64 62224}
!6604 = !{i64 62231}
!6605 = !{i64 62236}
!6606 = !{i64 62240}
!6607 = !{i64 62244}
!6608 = !{i64 62245}
!6609 = !{i64 62257}
!6610 = !{i64 62265}
!6611 = !{i64 62315}
!6612 = !{i64 62319}
!6613 = !{i64 62333}
!6614 = !{i64 62371}
!6615 = !{i64 62374}
!6616 = !{i64 62378}
!6617 = !{i64 62385}
!6618 = !{i64 62382}
!6619 = !{i64 62388}
!6620 = !{i64 62392}
!6621 = !{i64 62395}
!6622 = !{i64 62401}
!6623 = !{i64 62410}
!6624 = !{i64 62437}
!6625 = !{i64 62458}
!6626 = !{i64 62467}
!6627 = !{i64 62476}
!6628 = !{i64 62478}
!6629 = !{i64 62481}
!6630 = !{i64 62487}
!6631 = !{i64 62489}
!6632 = !{i64 62499}
!6633 = !{i64 62505}
!6634 = !{i64 62511}
!6635 = !{i64 62513}
!6636 = !{i64 62523}
!6637 = !{i64 62528}
!6638 = !{i64 62531}
!6639 = !{i64 62538}
!6640 = !{i64 62541}
!6641 = !{i64 62545}
!6642 = !{i64 62549}
!6643 = !{i64 62555}
!6644 = !{i64 62560}
!6645 = !{i64 62562}
!6646 = !{i64 62572}
!6647 = !{i64 62575}
!6648 = !{i64 62593}
!6649 = !{i64 62597}
!6650 = !{i64 62606}
!6651 = !{i64 62608}
!6652 = !{i64 62622}
!6653 = !{i64 62632}
!6654 = !{i64 62647}
!6655 = !{i64 62655}
!6656 = !{i64 62657}
!6657 = !{i64 62663}
!6658 = !{i64 62670}
!6659 = !{i64 62675}
!6660 = !{i64 62683}
!6661 = !{i64 62685}
!6662 = !{i64 62702}
!6663 = !{i64 62703}
!6664 = !{i64 62712}
!6665 = !{i64 62717}
!6666 = !{i64 62724}
!6667 = !{i64 62739}
!6668 = !{i64 62746}
!6669 = !{i64 62751}
!6670 = !{i64 62759}
!6671 = !{i64 62761}
!6672 = !{i64 62763}
!6673 = !{i64 62765}
!6674 = !{i64 62772}
!6675 = !{i64 62774}
!6676 = !{i64 62777}
!6677 = !{i64 62781}
!6678 = !{i64 62783}
!6679 = !{i64 62790}
!6680 = !{i64 62798}
!6681 = !{i64 62813}
!6682 = !{i64 62821}
!6683 = !{i64 62823}
!6684 = !{i64 62830}
!6685 = !{i64 62835}
!6686 = !{i64 62837}
!6687 = !{i64 62845}
!6688 = !{i64 62866}
!6689 = !{i64 62867}
!6690 = !{i64 62876}
!6691 = !{i64 62881}
!6692 = !{i64 62888}
!6693 = !{i64 62903}
!6694 = !{i64 62910}
!6695 = !{i64 62915}
!6696 = !{i64 62923}
!6697 = !{i64 62925}
!6698 = !{i64 62927}
!6699 = !{i64 62929}
!6700 = !{i64 62936}
!6701 = !{i64 62938}
!6702 = !{i64 62941}
!6703 = !{i64 62945}
!6704 = !{i64 62947}
!6705 = !{i64 62954}
!6706 = !{i64 62962}
!6707 = !{i64 62977}
!6708 = !{i64 62985}
!6709 = !{i64 62987}
!6710 = !{i64 62989}
!6711 = !{i64 62993}
!6712 = !{i64 62995}
!6713 = !{i64 63002}
!6714 = !{i64 63009}
!6715 = !{i64 63030}
!6716 = !{i64 63031}
!6717 = !{i64 63040}
!6718 = !{i64 63045}
!6719 = !{i64 63052}
!6720 = !{i64 63067}
!6721 = !{i64 63074}
!6722 = !{i64 63079}
!6723 = !{i64 63087}
!6724 = !{i64 63089}
!6725 = !{i64 63091}
!6726 = !{i64 63093}
!6727 = !{i64 63100}
!6728 = !{i64 63102}
!6729 = !{i64 63105}
!6730 = !{i64 63109}
!6731 = !{i64 63111}
!6732 = !{i64 63118}
!6733 = !{i64 63126}
!6734 = !{i64 63144}
!6735 = !{i64 63152}
!6736 = !{i64 63164}
!6737 = !{i64 63166}
!6738 = !{i64 63173}
!6739 = !{i64 63180}
!6740 = !{i64 63187}
!6741 = !{i64 63208}
!6742 = !{i64 63218}
!6743 = !{i64 63250}
!6744 = !{i64 63257}
!6745 = !{i64 63267}
!6746 = !{i64 63281}
!6747 = !{i64 63286}
!6748 = !{i64 63304}
!6749 = !{i64 63322}
!6750 = !{i64 63327}
!6751 = !{i64 63356}
!6752 = !{i64 63363}
!6753 = !{i64 63334}
!6754 = !{i64 63369}
!6755 = !{i64 63383}
!6756 = !{i64 63385}
!6757 = !{i64 63392}
!6758 = !{i64 63402}
!6759 = !{i64 63416}
!6760 = !{i64 63443}
!6761 = !{i64 63448}
!6762 = !{i64 63524}
!6763 = !{i64 63529}
!6764 = !{i64 63558}
!6765 = !{i64 63565}
!6766 = !{i64 63536}
!6767 = !{i64 63571}
!6768 = !{i64 63585}
!6769 = !{i64 63587}
!6770 = !{i64 63594}
!6771 = !{i64 63601}
!6772 = !{i64 63611}
!6773 = !{i64 63625}
!6774 = !{i64 63652}
!6775 = !{i64 63657}
!6776 = !{i64 63733}
!6777 = !{i64 63738}
!6778 = !{i64 63758}
!6779 = !{i64 63765}
!6780 = !{i64 63745}
!6781 = !{i64 63771}
!6782 = !{i64 63785}
!6783 = !{i64 63787}
!6784 = !{i64 63794}
!6785 = !{i64 63804}
!6786 = !{i64 63818}
!6787 = !{i64 63823}
!6788 = !{i64 63832}
!6789 = !{i64 63841}
!6790 = !{i64 63843}
!6791 = !{i64 63848}
!6792 = !{i64 63879}
!6793 = !{i64 63908}
!6794 = !{i64 63939}
!6795 = !{i64 63956}
!6796 = !{i64 63946}
!6797 = !{i64 63963}
!6798 = !{i64 63979}
!6799 = !{i64 63984}
!6800 = !{i64 63986}
!6801 = !{i64 63988}
!6802 = !{i64 63992}
!6803 = !{i64 64006}
!6804 = !{i64 64011}
!6805 = !{i64 64024}
!6806 = !{i64 64029}
!6807 = !{i64 64042}
!6808 = !{i64 64044}
!6809 = !{i64 64051}
!6810 = !{i64 64058}
!6811 = !{i64 64084}
!6812 = !{i64 64085}
!6813 = !{i64 64105}
!6814 = !{i64 64110}
!6815 = !{i64 64128}
!6816 = !{i64 64135}
!6817 = !{i64 64157}
!6818 = !{i64 64150}
!6819 = !{i64 64165}
!6820 = !{i64 64168}
!6821 = !{i64 64200}
!6822 = !{i64 64207}
!6823 = !{i64 64209}
!6824 = !{i64 64215}
!6825 = !{i64 64226}
!6826 = !{i64 64237}
!6827 = !{i64 64248}
!6828 = !{i64 64260}
!6829 = !{i64 64275}
!6830 = !{i64 64280}
!6831 = !{i64 64287}
!6832 = !{i64 64289}
!6833 = !{i64 64296}
!6834 = !{i64 64305}
!6835 = !{i64 64312}
!6836 = !{i64 64321}
!6837 = !{i64 64327}
!6838 = !{i64 64336}
!6839 = !{i64 64338}
!6840 = !{i64 64345}
!6841 = !{i64 64355}
!6842 = !{i64 64360}
!6843 = !{i64 64375}
!6844 = !{i64 64380}
!6845 = !{i64 64387}
!6846 = !{i64 64414}
!6847 = !{i64 64419}
!6848 = !{i64 64421}
!6849 = !{i64 64423}
!6850 = !{i64 64430}
!6851 = !{i64 64440}
!6852 = !{i64 64445}
!6853 = !{i64 64452}
!6854 = !{i64 64460}
!6855 = !{i64 64465}
!6856 = !{i64 64490}
!6857 = !{i64 64507}
!6858 = !{i64 64529}
!6859 = !{i64 64534}
!6860 = !{i64 64541}
!6861 = !{i64 64543}
!6862 = !{i64 64550}
!6863 = !{i64 64557}
!6864 = !{i64 64178}
!6865 = !{i64 64567}
!6866 = !{i64 64572}
!6867 = !{i64 64579}
!6868 = !{i64 64584}
!6869 = !{i64 64586}
!6870 = !{i64 64592}
!6871 = !{i64 64599}
!6872 = !{i64 64606}
!6873 = !{i64 64618}
!6874 = !{i64 64623}
!6875 = !{i64 64625}
!6876 = !{i64 64627}
!6877 = !{i64 64634}
!6878 = !{i64 64636}
!6879 = !{i64 64643}
!6880 = !{i64 64653}
!6881 = !{i64 64658}
!6882 = !{i64 64665}
!6883 = !{i64 64670}
!6884 = !{i64 64677}
!6885 = !{i64 64682}
!6886 = !{i64 64689}
!6887 = !{i64 64699}
!6888 = !{i64 64704}
!6889 = !{i64 64711}
!6890 = !{i64 64716}
!6891 = !{i64 64723}
!6892 = !{i64 64728}
!6893 = !{i64 64735}
!6894 = !{i64 64745}
!6895 = !{i64 64750}
!6896 = !{i64 64757}
!6897 = !{i64 64762}
!6898 = !{i64 64764}
!6899 = !{i64 64770}
!6900 = !{i64 64777}
!6901 = !{i64 64802}
!6902 = !{i64 64807}
!6903 = !{i64 64815}
!6904 = !{i64 64823}
!6905 = !{i64 64829}
!6906 = !{i64 64833}
!6907 = !{i64 64844}
!6908 = !{i64 64849}
!6909 = !{i64 64856}
!6910 = !{i64 64864}
!6911 = !{i64 64867}
!6912 = !{i64 64890}
!6913 = !{i64 64895}
!6914 = !{i64 64899}
!6915 = !{i64 64906}
!6916 = !{i64 64788}
!6917 = !{i64 64795}
!6918 = !{i64 64911}
!6919 = !{i64 64916}
!6920 = !{i64 64923}
!6921 = !{i64 64937}
!6922 = !{i64 64942}
!6923 = !{i64 64948}
!6924 = !{i64 64954}
!6925 = !{i64 64961}
!6926 = !{i64 64982}
!6927 = !{i64 64985}
!6928 = !{i64 64989}
!6929 = !{i64 65009}
!6930 = !{i64 65018}
!6931 = !{i64 65027}
!6932 = !{i64 65043}
!6933 = !{i64 65050}
!6934 = !{i64 65058}
!6935 = !{i64 65065}
!6936 = !{i64 65070}
!6937 = !{i64 65074}
!6938 = !{i64 65086}
!6939 = !{i64 65079}
!6940 = !{i64 65094}
!6941 = !{i64 65098}
!6942 = !{i64 65101}
!6943 = !{i64 65103}
!6944 = !{i64 65107}
!6945 = !{i64 65113}
!6946 = !{i64 65124}
!6947 = !{i64 65137}
!6948 = !{i64 65144}
!6949 = !{i64 65151}
!6950 = !{i64 65161}
!6951 = !{i64 65170}
!6952 = !{i64 65178}
!6953 = !{i64 65180}
!6954 = !{i64 65182}
!6955 = !{i64 65190}
!6956 = !{i64 65200}
!6957 = !{i64 65207}
!6958 = !{i64 65231}
!6959 = !{i64 65211}
!6960 = !{i64 65218}
!6961 = !{i64 65222}
!6962 = !{i64 65224}
!6963 = !{i64 65226}
!6964 = !{i64 65257}
!6965 = !{i64 65264}
!6966 = !{i64 65266}
!6967 = !{i64 65273}
!6968 = !{i64 65281}
!6969 = !{i64 65287}
!6970 = !{i64 65294}
!6971 = !{i64 65304}
!6972 = !{i64 65309}
!6973 = !{i64 65317}
!6974 = !{i64 65323}
!6975 = !{i64 65330}
!6976 = !{i64 65340}
!6977 = !{i64 65348}
!6978 = !{i64 65351}
!6979 = !{i64 65361}
!6980 = !{i64 65366}
!6981 = !{i64 65372}
!6982 = !{i64 65378}
!6983 = !{i64 65381}
!6984 = !{i64 65388}
!6985 = !{i64 65395}
!6986 = !{i64 65403}
!6987 = !{i64 65408}
!6988 = !{i64 65411}
!6989 = !{i64 65416}
!6990 = !{i64 65419}
!6991 = !{i64 65427}
!6992 = !{i64 65433}
!6993 = !{i64 65440}
!6994 = !{i64 65444}
!6995 = !{i64 65447}
!6996 = !{i64 65455}
!6997 = !{i64 65452}
!6998 = !{i64 65463}
!6999 = !{i64 65471}
!7000 = !{i64 65486}
!7001 = !{i64 65493}
!7002 = !{i64 65500}
!7003 = !{i64 65523}
!7004 = !{i64 65528}
!7005 = !{i64 65535}
!7006 = !{i64 65537}
!7007 = !{i64 65544}
!7008 = !{i64 65551}
!7009 = !{i64 65557}
!7010 = !{i64 65560}
!7011 = !{i64 65567}
!7012 = !{i64 65572}
!7013 = !{i64 65581}
!7014 = !{i64 65631}
!7015 = !{i64 65638}
!7016 = !{i64 65640}
!7017 = !{i64 65666}
!7018 = !{i64 65682}
!7019 = !{i64 65689}
!7020 = !{i64 65703}
!7021 = !{i64 65708}
!7022 = !{i64 65714}
!7023 = !{i64 65720}
!7024 = !{i64 65730}
!7025 = !{i64 65733}
!7026 = !{i64 65741}
!7027 = !{i64 65744}
!7028 = !{i64 65753}
!7029 = !{i64 65758}
!7030 = !{i64 65768}
!7031 = !{i64 65771}
!7032 = !{i64 65779}
!7033 = !{i64 65782}
!7034 = !{i64 65791}
!7035 = !{i64 65796}
!7036 = !{i64 65802}
!7037 = !{i64 65806}
!7038 = !{i64 65814}
!7039 = !{i64 65822}
!7040 = !{i64 65828}
!7041 = !{i64 65832}
!7042 = !{i64 65843}
!7043 = !{i64 65848}
!7044 = !{i64 65855}
!7045 = !{i64 65866}
!7046 = !{i64 65892}
!7047 = !{i64 65897}
!7048 = !{i64 65901}
!7049 = !{i64 65905}
!7050 = !{i64 65912}
!7051 = !{i64 65917}
!7052 = !{i64 65934}
!7053 = !{i64 65939}
!7054 = !{i64 65941}
!7055 = !{i64 65948}
!7056 = !{i64 65958}
!7057 = !{i64 65963}
!7058 = !{i64 65970}
!7059 = !{i64 65972}
!7060 = !{i64 65979}
!7061 = !{i64 65981}
!7062 = !{i64 65988}
!7063 = !{i64 65998}
!7064 = !{i64 66003}
!7065 = !{i64 66010}
!7066 = !{i64 66017}
!7067 = !{i64 66026}
!7068 = !{i64 66039}
!7069 = !{i64 66050}
!7070 = !{i64 66052}
!7071 = !{i64 66054}
!7072 = !{i64 66057}
!7073 = !{i64 66069}
!7074 = !{i64 66075}
!7075 = !{i64 66087}
!7076 = !{i64 66092}
!7077 = !{i64 66099}
!7078 = !{i64 66101}
!7079 = !{i64 66108}
!7080 = !{i64 66115}
!7081 = !{i64 66127}
!7082 = !{i64 66132}
!7083 = !{i64 66141}
!7084 = !{i64 66147}
!7085 = !{i64 66156}
!7086 = !{i64 66165}
!7087 = !{i64 66173}
!7088 = !{i64 66179}
!7089 = !{i64 66182}
!7090 = !{i64 66191}
!7091 = !{i64 66204}
!7092 = !{i64 66226}
!7093 = !{i64 66227}
!7094 = !{i64 66255}
!7095 = !{i64 66266}
!7096 = !{i64 66269}
!7097 = !{i64 66276}
!7098 = !{i64 66318}
!7099 = !{i64 66337}
!7100 = !{i64 66351}
!7101 = !{i64 66363}
!7102 = !{i64 66369}
!7103 = !{i64 66371}
!7104 = !{i64 66396}
!7105 = !{i64 66401}
!7106 = !{i64 66415}
!7107 = !{i64 66440}
!7108 = !{i64 66431}
!7109 = !{i64 66437}
!7110 = !{i64 66453}
!7111 = !{i64 66458}
!7112 = !{i64 66460}
!7113 = !{i64 66462}
!7114 = !{i64 66469}
!7115 = !{i64 66471}
!7116 = !{i64 66488}
!7117 = !{i64 66499}
!7118 = !{i64 66501}
!7119 = !{i64 66505}
!7120 = !{i64 66508}
!7121 = !{i64 66511}
!7122 = !{i64 66514}
!7123 = !{i64 66525}
!7124 = !{i64 66527}
!7125 = !{i64 66533}
!7126 = !{i64 66536}
!7127 = !{i64 66539}
!7128 = !{i64 66546}
!7129 = !{i64 66553}
!7130 = !{i64 66557}
!7131 = !{i64 66559}
!7132 = !{i64 66555}
!7133 = !{i64 66569}
!7134 = !{i64 66574}
!7135 = !{i64 66576}
!7136 = !{i64 66582}
!7137 = !{i64 66585}
!7138 = !{i64 66598}
!7139 = !{i64 66603}
!7140 = !{i64 66610}
!7141 = !{i64 66612}
!7142 = !{i64 66619}
!7143 = !{i64 66632}
!7144 = !{i64 66635}
!7145 = !{i64 66651}
!7146 = !{i64 66656}
!7147 = !{i64 66661}
!7148 = !{i64 66663}
!7149 = !{i64 66681}
!7150 = !{i64 66694}
!7151 = !{i64 66696}
!7152 = !{i64 66699}
!7153 = !{i64 66705}
!7154 = !{i64 66708}
!7155 = !{i64 66720}
!7156 = !{i64 66725}
!7157 = !{i64 66735}
!7158 = !{i64 66740}
!7159 = !{i64 66743}
!7160 = !{i64 66756}
!7161 = !{i64 66762}
!7162 = !{i64 66769}
!7163 = !{i64 66775}
!7164 = !{i64 66782}
!7165 = !{i64 66789}
!7166 = !{i64 66801}
!7167 = !{i64 66834}
!7168 = !{i64 66839}
!7169 = !{i64 66842}
!7170 = !{i64 66849}
!7171 = !{i64 66856}
!7172 = !{i64 66860}
!7173 = !{i64 66862}
!7174 = !{i64 66858}
!7175 = !{i64 66878}
!7176 = !{i64 66886}
!7177 = !{i64 66899}
!7178 = !{i64 66901}
!7179 = !{i64 66904}
!7180 = !{i64 66913}
!7181 = !{i64 66925}
!7182 = !{i64 66930}
!7183 = !{i64 66935}
!7184 = !{i64 66942}
!7185 = !{i64 66949}
!7186 = !{i64 66961}
!7187 = !{i64 66966}
!7188 = !{i64 66994}
!7189 = !{i64 66999}
!7190 = !{i64 67002}
!7191 = !{i64 67009}
!7192 = !{i64 67016}
!7193 = !{i64 67020}
!7194 = !{i64 67022}
!7195 = !{i64 67018}
!7196 = !{i64 67067}
!7197 = !{i64 67069}
!7198 = !{i64 67072}
!7199 = !{i64 67078}
!7200 = !{i64 67081}
!7201 = !{i64 66975}
!7202 = !{i64 67054}
!7203 = !{i64 67093}
!7204 = !{i64 67098}
!7205 = !{i64 67102}
!7206 = !{i64 67112}
!7207 = !{i64 67114}
!7208 = !{i64 67118}
!7209 = !{i64 67121}
!7210 = !{i64 67124}
!7211 = !{i64 67127}
!7212 = !{i64 67129}
!7213 = !{i64 67135}
!7214 = !{i64 67138}
!7215 = !{i64 67140}
!7216 = !{i64 67150}
!7217 = !{i64 67155}
!7218 = !{i64 67165}
!7219 = !{i64 66359}
!7220 = !{i64 67177}
!7221 = !{i64 67183}
!7222 = !{i64 67190}
!7223 = !{i64 67196}
!7224 = !{i64 67221}
!7225 = !{i64 67232}
!7226 = !{i64 67240}
!7227 = !{i64 67243}
!7228 = !{i64 67249}
!7229 = !{i64 67255}
!7230 = !{i64 67259}
!7231 = !{i64 67263}
!7232 = !{i64 67266}
!7233 = !{i64 67226}
!7234 = !{i64 67268}
!7235 = !{i64 67275}
!7236 = !{i64 67279}
!7237 = !{i64 67281}
!7238 = !{i64 67277}
!7239 = !{i64 67288}
!7240 = !{i64 67294}
!7241 = !{i64 67297}
!7242 = !{i64 67305}
!7243 = !{i64 67314}
!7244 = !{i64 67317}
!7245 = !{i64 67320}
!7246 = !{i64 67322}
!7247 = !{i64 67329}
!7248 = !{i64 67335}
!7249 = !{i64 67338}
!7250 = !{i64 67340}
!7251 = !{i64 67342}
!7252 = !{i64 67353}
!7253 = !{i64 67358}
!7254 = !{i64 67367}
!7255 = !{i64 67375}
!7256 = !{i64 67382}
!7257 = !{i64 67386}
!7258 = !{i64 67393}
!7259 = !{i64 67397}
!7260 = !{i64 67401}
!7261 = !{i64 67404}
!7262 = !{i64 67406}
!7263 = !{i64 67420}
!7264 = !{i64 67423}
!7265 = !{i64 67426}
!7266 = !{i64 67436}
!7267 = !{i64 67456}
!7268 = !{i64 67461}
!7269 = !{i64 67464}
!7270 = !{i64 67471}
!7271 = !{i64 67475}
!7272 = !{i64 67477}
!7273 = !{i64 67473}
!7274 = !{i64 67487}
!7275 = !{i64 67489}
!7276 = !{i64 67493}
!7277 = !{i64 67496}
!7278 = !{i64 67499}
!7279 = !{i64 67502}
!7280 = !{i64 67508}
!7281 = !{i64 67517}
!7282 = !{i64 67520}
!7283 = !{i64 67523}
!7284 = !{i64 67525}
!7285 = !{i64 67535}
!7286 = !{i64 67537}
!7287 = !{i64 67541}
!7288 = !{i64 67544}
!7289 = !{i64 67547}
!7290 = !{i64 67550}
!7291 = !{i64 67558}
!7292 = !{i64 67561}
!7293 = !{i64 67571}
!7294 = !{i64 67573}
!7295 = !{i64 67576}
!7296 = !{i64 67579}
!7297 = !{i64 67591}
!7298 = !{i64 67600}
!7299 = !{i64 67603}
!7300 = !{i64 67606}
!7301 = !{i64 67610}
!7302 = !{i64 67629}
!7303 = !{i64 67632}
!7304 = !{i64 67646}
!7305 = !{i64 67652}
!7306 = !{i64 67663}
!7307 = !{i64 67674}
!7308 = !{i64 67688}
!7309 = !{i64 67695}
!7310 = !{i64 67698}
!7311 = !{i64 67706}
!7312 = !{i64 67709}
!7313 = !{i64 67722}
!7314 = !{i64 67727}
!7315 = !{i64 67729}
!7316 = !{i64 67731}
!7317 = !{i64 67738}
!7318 = !{i64 67745}
!7319 = !{i64 67747}
!7320 = !{i64 67758}
!7321 = !{i64 67763}
!7322 = !{i64 67779}
!7323 = !{i64 67787}
!7324 = !{i64 67798}
!7325 = !{i64 67800}
!7326 = !{i64 67804}
!7327 = !{i64 67807}
!7328 = !{i64 67810}
!7329 = !{i64 67813}
!7330 = !{i64 67824}
!7331 = !{i64 67826}
!7332 = !{i64 67832}
!7333 = !{i64 67835}
!7334 = !{i64 67838}
!7335 = !{i64 67845}
!7336 = !{i64 67852}
!7337 = !{i64 67854}
!7338 = !{i64 67861}
!7339 = !{i64 67871}
!7340 = !{i64 67873}
!7341 = !{i64 67876}
!7342 = !{i64 67882}
!7343 = !{i64 67885}
!7344 = !{i64 67904}
!7345 = !{i64 67909}
!7346 = !{i64 67911}
!7347 = !{i64 67925}
!7348 = !{i64 67938}
!7349 = !{i64 67940}
!7350 = !{i64 67943}
!7351 = !{i64 67949}
!7352 = !{i64 67952}
!7353 = !{i64 67964}
!7354 = !{i64 67969}
!7355 = !{i64 67987}
!7356 = !{i64 68042}
!7357 = !{i64 68069}
!7358 = !{i64 68077}
!7359 = !{i64 68084}
!7360 = !{i64 68095}
!7361 = !{i64 68104}
!7362 = !{i64 68111}
!7363 = !{i64 68113}
!7364 = !{i64 68157}
!7365 = !{i64 68165}
!7366 = !{i64 68167}
!7367 = !{i64 68207}
!7368 = !{i64 68212}
!7369 = !{i64 68215}
!7370 = !{i64 68219}
!7371 = !{i64 68221}
!7372 = !{i64 68228}
!7373 = !{i64 68241}
!7374 = !{i64 68246}
!7375 = !{i64 68262}
!7376 = !{i64 68266}
!7377 = !{i64 68268}
!7378 = !{i64 68273}
!7379 = !{i64 68278}
!7380 = !{i64 68301}
!7381 = !{i64 68330}
!7382 = !{i64 68358}
!7383 = !{i64 68365}
!7384 = !{i64 68367}
!7385 = !{i64 68370}
!7386 = !{i64 68372}
!7387 = !{i64 68380}
!7388 = !{i64 68393}
!7389 = !{i64 68398}
!7390 = !{i64 68404}
!7391 = !{i64 68409}
!7392 = !{i64 68412}
!7393 = !{i64 68417}
!7394 = !{i64 68422}
!7395 = !{i64 68431}
!7396 = !{i64 68450}
!7397 = !{i64 68451}
!7398 = !{i64 68452}
!7399 = !{i64 68456}
!7400 = !{i64 68466}
!7401 = !{i64 68473}
!7402 = !{i64 68480}
!7403 = !{i64 68487}
!7404 = !{i64 68489}
!7405 = !{i64 68494}
!7406 = !{i64 68498}
!7407 = !{i64 68499}
!7408 = !{i64 68507}
!7409 = !{i64 68544}
!7410 = !{i64 68549}
!7411 = !{i64 68552}
!7412 = !{i64 68547}
!7413 = !{i64 68559}
!7414 = !{i64 68527}
!7415 = !{i64 68577}
!7416 = !{i64 68571}
!7417 = !{i64 68579}
!7418 = !{i64 68583}
!7419 = !{i64 68587}
!7420 = !{i64 68608}
!7421 = !{i64 68612}
!7422 = !{i64 68624}
!7423 = !{i64 68643}
!7424 = !{i64 68659}
!7425 = !{i64 68673}
!7426 = !{i64 68709}
!7427 = !{i64 68719}
!7428 = !{i64 68729}
!7429 = !{i64 68749}
!7430 = !{i64 68757}
!7431 = !{i64 68783}
!7432 = !{i64 68818}
!7433 = !{i64 68823}
!7434 = !{i64 68834}
!7435 = !{i64 68839}
!7436 = !{i64 68844}
!7437 = !{i64 68935}
!7438 = !{i64 68943}
!7439 = !{i64 68954}
!7440 = !{i64 68964}
!7441 = !{i64 68967}
!7442 = !{i64 68971}
!7443 = !{i64 68980}
!7444 = !{i64 68982}
!7445 = !{i64 68999}
!7446 = !{i64 69004}
!7447 = !{i64 69009}
!7448 = !{i64 69016}
!7449 = !{i64 69021}
!7450 = !{i64 69024}
!7451 = !{i64 69026}
!7452 = !{i64 69033}
!7453 = !{i64 69037}
!7454 = !{i64 69045}
!7455 = !{i64 69052}
!7456 = !{i64 69063}
!7457 = !{i64 69064}
!7458 = !{i64 69068}
!7459 = !{i64 69073}
!7460 = !{i64 69081}
!7461 = !{i64 69085}
!7462 = !{i64 69097}
!7463 = !{i64 69102}
!7464 = !{i64 69104}
!7465 = !{i64 69106}
!7466 = !{i64 69108}
!7467 = !{i64 69112}
!7468 = !{i64 69133}
!7469 = !{i64 69147}
!7470 = !{i64 69154}
!7471 = !{i64 69161}
!7472 = !{i64 69168}
!7473 = !{i64 69172}
!7474 = !{i64 69192}
!7475 = !{i64 69196}
!7476 = !{i64 69199}
!7477 = !{i64 69202}
!7478 = !{i64 69200}
!7479 = !{i64 69217}
!7480 = !{i64 69222}
!7481 = !{i64 69224}
!7482 = !{i64 69227}
!7483 = !{i64 69243}
!7484 = !{i64 69272}
!7485 = !{i64 69284}
!7486 = !{i64 69291}
!7487 = !{i64 69302}
!7488 = !{i64 69311}
!7489 = !{i64 69321}
!7490 = !{i64 69326}
!7491 = !{i64 69335}
!7492 = !{i64 69343}
!7493 = !{i64 69348}
!7494 = !{i64 69359}
!7495 = !{i64 69374}
!7496 = !{i64 69378}
!7497 = !{i64 69392}
!7498 = !{i64 69397}
!7499 = !{i64 69404}
!7500 = !{i64 69412}
!7501 = !{i64 69422}
!7502 = !{i64 69446}
!7503 = !{i64 69451}
!7504 = !{i64 69453}
!7505 = !{i64 69458}
!7506 = !{i64 69461}
!7507 = !{i64 69463}
!7508 = !{i64 69474}
!7509 = !{i64 69500}
!7510 = !{i64 69509}
!7511 = !{i64 69514}
!7512 = !{i64 69521}
!7513 = !{i64 69527}
!7514 = !{i64 69531}
!7515 = !{i64 69546}
!7516 = !{i64 69550}
!7517 = !{i64 69552}
!7518 = !{i64 69556}
!7519 = !{i64 69561}
!7520 = !{i64 69563}
!7521 = !{i64 69567}
!7522 = !{i64 69576}
!7523 = !{i64 69601}
!7524 = !{i64 69615}
!7525 = !{i64 69629}
!7526 = !{i64 69631}
!7527 = !{i64 69668}
!7528 = !{i64 69669}
!7529 = !{i64 69680}
!7530 = !{i64 69708}
!7531 = !{i64 69727}
!7532 = !{i64 69729}
!7533 = !{i64 69731}
!7534 = !{i64 69742}
!7535 = !{i64 69745}
!7536 = !{i64 69748}
!7537 = !{i64 69755}
!7538 = !{i64 69757}
!7539 = !{i64 69761}
!7540 = !{i64 69768}
!7541 = !{i64 69770}
!7542 = !{i64 69774}
!7543 = !{i64 69789}
!7544 = !{i64 69791}
!7545 = !{i64 69797}
!7546 = !{i64 69804}
!7547 = !{i64 69810}
!7548 = !{i64 69837}
!7549 = !{i64 69849}
!7550 = !{i64 69851}
!7551 = !{i64 69878}
!7552 = !{i64 69882}
!7553 = !{i64 69886}
!7554 = !{i64 69892}
!7555 = !{i64 69919}
!7556 = !{i64 69924}
!7557 = !{i64 69928}
!7558 = !{i64 69930}
!7559 = !{i64 69957}
!7560 = !{i64 69975}
!7561 = !{i64 69984}
!7562 = !{i64 70062}
!7563 = !{i64 70072}
!7564 = !{i64 70138}
!7565 = !{i64 70177}
!7566 = !{i64 70194}
!7567 = !{i64 70197}
!7568 = !{i64 70199}
!7569 = !{i64 70235}
!7570 = !{i64 70259}
!7571 = !{i64 70264}
!7572 = !{i64 70160}
!7573 = !{i64 70266}
!7574 = !{i64 70269}
!7575 = !{i64 70273}
!7576 = !{i64 70275}
!7577 = !{i64 70284}
!7578 = !{i64 70287}
!7579 = !{i64 70296}
!7580 = !{i64 70300}
!7581 = !{i64 70323}
!7582 = !{i64 70332}
!7583 = !{i64 70341}
!7584 = !{i64 70351}
!7585 = !{i64 70367}
!7586 = !{i64 70385}
!7587 = !{i64 70386}
!7588 = !{i64 70414}
!7589 = !{i64 70476}
!7590 = !{i64 70483}
!7591 = !{i64 70490}
!7592 = !{i64 70500}
!7593 = !{i64 70428}
!7594 = !{i64 70435}
!7595 = !{i64 70446}
!7596 = !{i64 70548}
!7597 = !{i64 70569}
!7598 = !{i64 70576}
!7599 = !{i64 70581}
!7600 = !{i64 70590}
!7601 = !{i64 70592}
!7602 = !{i64 70607}
!7603 = !{i64 70617}
!7604 = !{i64 70625}
!7605 = !{i64 70634}
!7606 = !{i64 70641}
!7607 = !{i64 70645}
!7608 = !{i64 70657}
!7609 = !{i64 70664}
!7610 = !{i64 70668}
!7611 = !{i64 70680}
!7612 = !{i64 70687}
!7613 = !{i64 70691}
!7614 = !{i64 70703}
!7615 = !{i64 70713}
!7616 = !{i64 70718}
!7617 = !{i64 70720}
!7618 = !{i64 70722}
!7619 = !{i64 70729}
!7620 = !{i64 70739}
!7621 = !{i64 70746}
!7622 = !{i64 70755}
!7623 = !{i64 70769}
!7624 = !{i64 70774}
!7625 = !{i64 70788}
!7626 = !{i64 70796}
!7627 = !{i64 70805}
!7628 = !{i64 70812}
!7629 = !{i64 70814}
!7630 = !{i64 70823}
!7631 = !{i64 70826}
!7632 = !{i64 70835}
!7633 = !{i64 70837}
!7634 = !{i64 70846}
!7635 = !{i64 70849}
!7636 = !{i64 70858}
!7637 = !{i64 70860}
!7638 = !{i64 70862}
!7639 = !{i64 70871}
!7640 = !{i64 70876}
!7641 = !{i64 70883}
!7642 = !{i64 70889}
!7643 = !{i64 70896}
!7644 = !{i64 70902}
!7645 = !{i64 70909}
!7646 = !{i64 70911}
!7647 = !{i64 70924}
!7648 = !{i64 70927}
!7649 = !{i64 70936}
!7650 = !{i64 70941}
!7651 = !{i64 70950}
!7652 = !{i64 70978}
!7653 = !{i64 70996}
!7654 = !{i64 71027}
!7655 = !{i64 71032}
!7656 = !{i64 71034}
!7657 = !{i64 71036}
!7658 = !{i64 71067}
!7659 = !{i64 71085}
!7660 = !{i64 71116}
!7661 = !{i64 71123}
!7662 = !{i64 71134}
!7663 = !{i64 71139}
!7664 = !{i64 71158}
!7665 = !{i64 71160}
!7666 = !{i64 71169}
!7667 = !{i64 71176}
!7668 = !{i64 71201}
!7669 = !{i64 71206}
!7670 = !{i64 71209}
!7671 = !{i64 71257}
!7672 = !{i64 71266}
!7673 = !{i64 71268}
!7674 = !{i64 71281}
!7675 = !{i64 71292}
!7676 = !{i64 71297}
!7677 = !{i64 71312}
!7678 = !{i64 71320}
!7679 = !{i64 71325}
!7680 = !{i64 71367}
!7681 = !{i64 71372}
!7682 = !{i64 71410}
!7683 = !{i64 71431}
!7684 = !{i64 71450}
!7685 = !{i64 71455}
!7686 = !{i64 71457}
!7687 = !{i64 71461}
!7688 = !{i64 71462}
!7689 = !{i64 71473}
!7690 = !{i64 71478}
!7691 = !{i64 71482}
!7692 = !{i64 71501}
!7693 = !{i64 71508}
!7694 = !{i64 71513}
!7695 = !{i64 71527}
!7696 = !{i64 71532}
!7697 = !{i64 71534}
!7698 = !{i64 71536}
!7699 = !{i64 71543}
!7700 = !{i64 71545}
!7701 = !{i64 71548}
!7702 = !{i64 71552}
!7703 = !{i64 71554}
!7704 = !{i64 71556}
!7705 = !{i64 71564}
!7706 = !{i64 71578}
!7707 = !{i64 71745}
!7708 = !{i64 71790}
!7709 = !{i64 71810}
!7710 = !{i64 71833}
!7711 = !{i64 71866}
!7712 = !{i64 71876}
!7713 = !{i64 71883}
!7714 = !{i64 71885}
!7715 = !{i64 71893}
!7716 = !{i64 71912}
!7717 = !{i64 71914}
!7718 = !{i64 71919}
!7719 = !{i64 71926}
!7720 = !{i64 71932}
!7721 = !{i64 71959}
!7722 = !{i64 71964}
!7723 = !{i64 71968}
!7724 = !{i64 71973}
!7725 = !{i64 71980}
!7726 = !{i64 71982}
!7727 = !{i64 71989}
!7728 = !{i64 71996}
!7729 = !{i64 72001}
!7730 = !{i64 72012}
!7731 = !{i64 72019}
!7732 = !{i64 72022}
!7733 = !{i64 72024}
!7734 = !{i64 72029}
!7735 = !{i64 72036}
!7736 = !{i64 72039}
!7737 = !{i64 72041}
!7738 = !{i64 72047}
!7739 = !{i64 72058}
!7740 = !{i64 72071}
!7741 = !{i64 72094}
!7742 = !{i64 72103}
!7743 = !{i64 72128}
!7744 = !{i64 72155}
!7745 = !{i64 72160}
!7746 = !{i64 72163}
!7747 = !{i64 72216}
!7748 = !{i64 72241}
!7749 = !{i64 72255}
!7750 = !{i64 72261}
!7751 = !{i64 72266}
!7752 = !{i64 72269}
!7753 = !{i64 72271}
!7754 = !{i64 72308}
!7755 = !{i64 72313}
!7756 = !{i64 72375}
!7757 = !{i64 72383}
!7758 = !{i64 72385}
!7759 = !{i64 72390}
!7760 = !{i64 72424}
!7761 = !{i64 72430}
!7762 = !{i64 72435}
!7763 = !{i64 72440}
!7764 = !{i64 72447}
!7765 = !{i64 72453}
!7766 = !{i64 72454}
!7767 = !{i64 72482}
!7768 = !{i64 72490}
!7769 = !{i64 72494}
!7770 = !{i64 72502}
!7771 = !{i64 72506}
!7772 = !{i64 72509}
!7773 = !{i64 72544}
!7774 = !{i64 72549}
!7775 = !{i64 72551}
!7776 = !{i64 72553}
!7777 = !{i64 72557}
!7778 = !{i64 72590}
!7779 = !{i64 72600}
!7780 = !{i64 72618}
!7781 = !{i64 72628}
!7782 = !{i64 72646}
!7783 = !{i64 72656}
!7784 = !{i64 72671}
!7785 = !{i64 72711}
!7786 = !{i64 72716}
!7787 = !{i64 72718}
!7788 = !{i64 72725}
!7789 = !{i64 72758}
!7790 = !{i64 72778}
!7791 = !{i64 72786}
!7792 = !{i64 72788}
!7793 = !{i64 72829}
!7794 = !{i64 72837}
!7795 = !{i64 72841}
!7796 = !{i64 72844}
!7797 = !{i64 72846}
!7798 = !{i64 72854}
!7799 = !{i64 72862}
!7800 = !{i64 72867}
!7801 = !{i64 72876}
!7802 = !{i64 72878}
!7803 = !{i64 72895}
!7804 = !{i64 72897}
!7805 = !{i64 72902}
!7806 = !{i64 72904}
!7807 = !{i64 72916}
!7808 = !{i64 72921}
!7809 = !{i64 72923}
!7810 = !{i64 72935}
!7811 = !{i64 72940}
!7812 = !{i64 72948}
!7813 = !{i64 72954}
!7814 = !{i64 72969}
!7815 = !{i64 72974}
!7816 = !{i64 72981}
!7817 = !{i64 72991}
!7818 = !{i64 72998}
!7819 = !{i64 73008}
!7820 = !{i64 73018}
!7821 = !{i64 73028}
!7822 = !{i64 73035}
!7823 = !{i64 73045}
!7824 = !{i64 73055}
!7825 = !{i64 73065}
!7826 = !{i64 73076}
!7827 = !{i64 73083}
!7828 = !{i64 73091}
!7829 = !{i64 73104}
!7830 = !{i64 73106}
!7831 = !{i64 73114}
!7832 = !{i64 73118}
!7833 = !{i64 73127}
!7834 = !{i64 73151}
!7835 = !{i64 73152}
!7836 = !{i64 73172}
!7837 = !{i64 73189}
!7838 = !{i64 73204}
!7839 = !{i64 73211}
!7840 = !{i64 73426}
!7841 = !{i64 73435}
!7842 = !{i64 73446}
!7843 = !{i64 73457}
!7844 = !{i64 73468}
!7845 = !{i64 73475}
!7846 = !{i64 73482}
!7847 = !{i64 73493}
!7848 = !{i64 73523}
!7849 = !{i64 73528}
!7850 = !{i64 73530}
!7851 = !{i64 73532}
!7852 = !{i64 73541}
!7853 = !{i64 73539}
!7854 = !{i64 73550}
!7855 = !{i64 73557}
!7856 = !{i64 73564}
!7857 = !{i64 73566}
!7858 = !{i64 73573}
!7859 = !{i64 73580}
!7860 = !{i64 73587}
!7861 = !{i64 73594}
!7862 = !{i64 73597}
!7863 = !{i64 73603}
!7864 = !{i64 73667}
!7865 = !{i64 73674}
!7866 = !{i64 73691}
!7867 = !{i64 73698}
!7868 = !{i64 73702}
!7869 = !{i64 73709}
!7870 = !{i64 73713}
!7871 = !{i64 73716}
!7872 = !{i64 73723}
!7873 = !{i64 73725}
!7874 = !{i64 73729}
!7875 = !{i64 73733}
!7876 = !{i64 73736}
!7877 = !{i64 73738}
!7878 = !{i64 73758}
!7879 = !{i64 73761}
!7880 = !{i64 73781}
!7881 = !{i64 73786}
!7882 = !{i64 73790}
!7883 = !{i64 73794}
!7884 = !{i64 73797}
!7885 = !{i64 73806}
!7886 = !{i64 73814}
!7887 = !{i64 73837}
!7888 = !{i64 73842}
!7889 = !{i64 73865}
!7890 = !{i64 73870}
!7891 = !{i64 73887}
!7892 = !{i64 73892}
!7893 = !{i64 73894}
!7894 = !{i64 73909}
!7895 = !{i64 73914}
!7896 = !{i64 73934}
!7897 = !{i64 73939}
!7898 = !{i64 73942}
!7899 = !{i64 73952}
!7900 = !{i64 73957}
!7901 = !{i64 73964}
!7902 = !{i64 73966}
!7903 = !{i64 73983}
!7904 = !{i64 73993}
!7905 = !{i64 74006}
!7906 = !{i64 74016}
!7907 = !{i64 74034}
!7908 = !{i64 74039}
!7909 = !{i64 74042}
!7910 = !{i64 74052}
!7911 = !{i64 74062}
!7912 = !{i64 74067}
!7913 = !{i64 74077}
!7914 = !{i64 74090}
!7915 = !{i64 74095}
!7916 = !{i64 74102}
!7917 = !{i64 74109}
!7918 = !{i64 74120}
!7919 = !{i64 74127}
!7920 = !{i64 74134}
!7921 = !{i64 74141}
!7922 = !{i64 74152}
!7923 = !{i64 74159}
!7924 = !{i64 74169}
!7925 = !{i64 74178}
!7926 = !{i64 74180}
!7927 = !{i64 74189}
!7928 = !{i64 74192}
!7929 = !{i64 74201}
!7930 = !{i64 74203}
!7931 = !{i64 74212}
!7932 = !{i64 74215}
!7933 = !{i64 74224}
!7934 = !{i64 74226}
!7935 = !{i64 74228}
!7936 = !{i64 74234}
!7937 = !{i64 74241}
!7938 = !{i64 74256}
!7939 = !{i64 74258}
!7940 = !{i64 74269}
!7941 = !{i64 74275}
!7942 = !{i64 74279}
!7943 = !{i64 74283}
!7944 = !{i64 74288}
!7945 = !{i64 74290}
!7946 = !{i64 74292}
!7947 = !{i64 74304}
!7948 = !{i64 74309}
!7949 = !{i64 74324}
!7950 = !{i64 74326}
!7951 = !{i64 74328}
!7952 = !{i64 74335}
!7953 = !{i64 74337}
!7954 = !{i64 74339}
!7955 = !{i64 74341}
!7956 = !{i64 74348}
!7957 = !{i64 74382}
!7958 = !{i64 74405}
!7959 = !{i64 74412}
!7960 = !{i64 74417}
!7961 = !{i64 74422}
!7962 = !{i64 74424}
!7963 = !{i64 74445}
!7964 = !{i64 74455}
!7965 = !{i64 74464}
!7966 = !{i64 74488}
!7967 = !{i64 74498}
!7968 = !{i64 74507}
!7969 = !{i64 74512}
!7970 = !{i64 74519}
!7971 = !{i64 74540}
!7972 = !{i64 74550}
!7973 = !{i64 74559}
!7974 = !{i64 74593}
!7975 = !{i64 74601}
!7976 = !{i64 74606}
!7977 = !{i64 74608}
!7978 = !{i64 74610}
!7979 = !{i64 74619}
!7980 = !{i64 74629}
!7981 = !{i64 74631}
!7982 = !{i64 74640}
!7983 = !{i64 74650}
!7984 = !{i64 74657}
!7985 = !{i64 74667}
!7986 = !{i64 74674}
!7987 = !{i64 74691}
!7988 = !{i64 74696}
!7989 = !{i64 74713}
!7990 = !{i64 74718}
!7991 = !{i64 74725}
!7992 = !{i64 74745}
!7993 = !{i64 74748}
!7994 = !{i64 74760}
!7995 = !{i64 74763}
!7996 = !{i64 74767}
!7997 = !{i64 74794}
!7998 = !{i64 74799}
!7999 = !{i64 74801}
!8000 = !{i64 74803}
!8001 = !{i64 74813}
!8002 = !{i64 74818}
!8003 = !{i64 74825}
!8004 = !{i64 74895}
!8005 = !{i64 74902}
!8006 = !{i64 74905}
!8007 = !{i64 74909}
!8008 = !{i64 74929}
!8009 = !{i64 74935}
!8010 = !{i64 74939}
!8011 = !{i64 74962}
!8012 = !{i64 74967}
!8013 = !{i64 74971}
!8014 = !{i64 74975}
!8015 = !{i64 74978}
!8016 = !{i64 74987}
!8017 = !{i64 74995}
!8018 = !{i64 75018}
!8019 = !{i64 75023}
!8020 = !{i64 75046}
!8021 = !{i64 75051}
!8022 = !{i64 75068}
!8023 = !{i64 75076}
!8024 = !{i64 75081}
!8025 = !{i64 75088}
!8026 = !{i64 75119}
!8027 = !{i64 75124}
!8028 = !{i64 75134}
!8029 = !{i64 75140}
!8030 = !{i64 75143}
!8031 = !{i64 75149}
!8032 = !{i64 75171}
!8033 = !{i64 75179}
!8034 = !{i64 75184}
!8035 = !{i64 75253}
!8036 = !{i64 75273}
!8037 = !{i64 75279}
!8038 = !{i64 75283}
!8039 = !{i64 75306}
!8040 = !{i64 75311}
!8041 = !{i64 75315}
!8042 = !{i64 75319}
!8043 = !{i64 75322}
!8044 = !{i64 75331}
!8045 = !{i64 75339}
!8046 = !{i64 75362}
!8047 = !{i64 75367}
!8048 = !{i64 75390}
!8049 = !{i64 75395}
!8050 = !{i64 75412}
!8051 = !{i64 75417}
!8052 = !{i64 75424}
!8053 = !{i64 75446}
!8054 = !{i64 75451}
!8055 = !{i64 75458}
!8056 = !{i64 75467}
!8057 = !{i64 75469}
!8058 = !{i64 75476}
!8059 = !{i64 75478}
!8060 = !{i64 75485}
!8061 = !{i64 75494}
!8062 = !{i64 75496}
!8063 = !{i64 75503}
!8064 = !{i64 75505}
!8065 = !{i64 75512}
!8066 = !{i64 75532}
!8067 = !{i64 75537}
!8068 = !{i64 75544}
!8069 = !{i64 75546}
!8070 = !{i64 75553}
!8071 = !{i64 75574}
!8072 = !{i64 75582}
!8073 = !{i64 75586}
!8074 = !{i64 75593}
!8075 = !{i64 75600}
!8076 = !{i64 75604}
!8077 = !{i64 75607}
!8078 = !{i64 75609}
!8079 = !{i64 75619}
!8080 = !{i64 75626}
!8081 = !{i64 75630}
!8082 = !{i64 75635}
!8083 = !{i64 75643}
!8084 = !{i64 75645}
!8085 = !{i64 75647}
!8086 = !{i64 75649}
!8087 = !{i64 75651}
!8088 = !{i64 75673}
!8089 = !{i64 75675}
!8090 = !{i64 75691}
!8091 = !{i64 75694}
!8092 = !{i64 75698}
!8093 = !{i64 75708}
!8094 = !{i64 75713}
!8095 = !{i64 75716}
!8096 = !{i64 75721}
!8097 = !{i64 75723}
!8098 = !{i64 75727}
!8099 = !{i64 75736}
!8100 = !{i64 75782}
!8101 = !{i64 75789}
!8102 = !{i64 75795}
!8103 = !{i64 75800}
!8104 = !{i64 75803}
!8105 = !{i64 75842}
!8106 = !{i64 75843}
!8107 = !{i64 75847}
!8108 = !{i64 75860}
!8109 = !{i64 75863}
!8110 = !{i64 75867}
!8111 = !{i64 75873}
!8112 = !{i64 75878}
!8113 = !{i64 75881}
!8114 = !{i64 75886}
!8115 = !{i64 75888}
!8116 = !{i64 75892}
!8117 = !{i64 75901}
!8118 = !{i64 75931}
!8119 = !{i64 75943}
!8120 = !{i64 75953}
!8121 = !{i64 75955}
!8122 = !{i64 75990}
!8123 = !{i64 75991}
!8124 = !{i64 76008}
!8125 = !{i64 76032}
!8126 = !{i64 76039}
!8127 = !{i64 76072}
!8128 = !{i64 76076}
!8129 = !{i64 76088}
!8130 = !{i64 76097}
!8131 = !{i64 76106}
!8132 = !{i64 76140}
!8133 = !{i64 76145}
!8134 = !{i64 76147}
!8135 = !{i64 76186}
!8136 = !{i64 76222}
!8137 = !{i64 76227}
!8138 = !{i64 76231}
!8139 = !{i64 76253}
!8140 = !{i64 76256}
!8141 = !{i64 76262}
!8142 = !{i64 76267}
!8143 = !{i64 76293}
!8144 = !{i64 76295}
!8145 = !{i64 76329}
!8146 = !{i64 76334}
!8147 = !{i64 76337}
!8148 = !{i64 76332}
!8149 = !{i64 76339}
!8150 = !{i64 76341}
!8151 = !{i64 76344}
!8152 = !{i64 76373}
!8153 = !{i64 76383}
!8154 = !{i64 76417}
!8155 = !{i64 76422}
!8156 = !{i64 76426}
!8157 = !{i64 76430}
!8158 = !{i64 76433}
!8159 = !{i64 76440}
!8160 = !{i64 76451}
!8161 = !{i64 76455}
!8162 = !{i64 76465}
!8163 = !{i64 76469}
!8164 = !{i64 76474}
!8165 = !{i64 76477}
!8166 = !{i64 76504}
!8167 = !{i64 76513}
!8168 = !{i64 76522}
!8169 = !{i64 76560}
!8170 = !{i64 76565}
!8171 = !{i64 76567}
!8172 = !{i64 76603}
!8173 = !{i64 76641}
!8174 = !{i64 76646}
!8175 = !{i64 76650}
!8176 = !{i64 76672}
!8177 = !{i64 76675}
!8178 = !{i64 76681}
!8179 = !{i64 76686}
!8180 = !{i64 76690}
!8181 = !{i64 76697}
!8182 = !{i64 76715}
!8183 = !{i64 76741}
!8184 = !{i64 76747}
!8185 = !{i64 76751}
!8186 = !{i64 76745}
!8187 = !{i64 76753}
!8188 = !{i64 76756}
!8189 = !{i64 76759}
!8190 = !{i64 76788}
!8191 = !{i64 76799}
!8192 = !{i64 76833}
!8193 = !{i64 76838}
!8194 = !{i64 76841}
!8195 = !{i64 76849}
!8196 = !{i64 76852}
!8197 = !{i64 76859}
!8198 = !{i64 76861}
!8199 = !{i64 76868}
!8200 = !{i64 76870}
!8201 = !{i64 76879}
!8202 = !{i64 76890}
!8203 = !{i64 76892}
!8204 = !{i64 76894}
!8205 = !{i64 76900}
!8206 = !{i64 76926}
!8207 = !{i64 76927}
!8208 = !{i64 76944}
!8209 = !{i64 76958}
!8210 = !{i64 76965}
!8211 = !{i64 76973}
!8212 = !{i64 76977}
!8213 = !{i64 76980}
!8214 = !{i64 77010}
!8215 = !{i64 77015}
!8216 = !{i64 77018}
!8217 = !{i64 77023}
!8218 = !{i64 77029}
!8219 = !{i64 77058}
!8220 = !{i64 77067}
!8221 = !{i64 77080}
!8222 = !{i64 77084}
!8223 = !{i64 77078}
!8224 = !{i64 77086}
!8225 = !{i64 77089}
!8226 = !{i64 77092}
!8227 = !{i64 77121}
!8228 = !{i64 77126}
!8229 = !{i64 77129}
!8230 = !{i64 77138}
!8231 = !{i64 77165}
!8232 = !{i64 77170}
!8233 = !{i64 77174}
!8234 = !{i64 77182}
!8235 = !{i64 77194}
!8236 = !{i64 77200}
!8237 = !{i64 77202}
!8238 = !{i64 77208}
!8239 = !{i64 77214}
!8240 = !{i64 77226}
!8241 = !{i64 77247}
!8242 = !{i64 77248}
!8243 = !{i64 77266}
!8244 = !{i64 77274}
!8245 = !{i64 77324}
!8246 = !{i64 77328}
!8247 = !{i64 77342}
!8248 = !{i64 77371}
!8249 = !{i64 77375}
!8250 = !{i64 77382}
!8251 = !{i64 77384}
!8252 = !{i64 77388}
!8253 = !{i64 77392}
!8254 = !{i64 77395}
!8255 = !{i64 77400}
!8256 = !{i64 77402}
!8257 = !{i64 77406}
!8258 = !{i64 77409}
!8259 = !{i64 77411}
!8260 = !{i64 77415}
!8261 = !{i64 77422}
!8262 = !{i64 77426}
!8263 = !{i64 77433}
!8264 = !{i64 77430}
!8265 = !{i64 77436}
!8266 = !{i64 77440}
!8267 = !{i64 77443}
!8268 = !{i64 77445}
!8269 = !{i64 77457}
!8270 = !{i64 77466}
!8271 = !{i64 77493}
!8272 = !{i64 77497}
!8273 = !{i64 77516}
!8274 = !{i64 77529}
!8275 = !{i64 77538}
!8276 = !{i64 77540}
!8277 = !{i64 77543}
!8278 = !{i64 77550}
!8279 = !{i64 77558}
!8280 = !{i64 77560}
!8281 = !{i64 77566}
!8282 = !{i64 77572}
!8283 = !{i64 77574}
!8284 = !{i64 77584}
!8285 = !{i64 77590}
!8286 = !{i64 77593}
!8287 = !{i64 77598}
!8288 = !{i64 77606}
!8289 = !{i64 77610}
!8290 = !{i64 77614}
!8291 = !{i64 77618}
!8292 = !{i64 77624}
!8293 = !{i64 77630}
!8294 = !{i64 77634}
!8295 = !{i64 77645}
!8296 = !{i64 77656}
!8297 = !{i64 77659}
!8298 = !{i64 77666}
!8299 = !{i64 77678}
!8300 = !{i64 77682}
!8301 = !{i64 77691}
!8302 = !{i64 77693}
!8303 = !{i64 77713}
!8304 = !{i64 77714}
!8305 = !{i64 77742}
!8306 = !{i64 77776}
!8307 = !{i64 77783}
!8308 = !{i64 77798}
!8309 = !{i64 77800}
!8310 = !{i64 77802}
!8311 = !{i64 77808}
!8312 = !{i64 77810}
!8313 = !{i64 77841}
!8314 = !{i64 77845}
!8315 = !{i64 77849}
!8316 = !{i64 77851}
!8317 = !{i64 77858}
!8318 = !{i64 77865}
!8319 = !{i64 77870}
!8320 = !{i64 77877}
!8321 = !{i64 77879}
!8322 = !{i64 77897}
!8323 = !{i64 77926}
!8324 = !{i64 77946}
!8325 = !{i64 77958}
!8326 = !{i64 77965}
!8327 = !{i64 78017}
!8328 = !{i64 78018}
!8329 = !{i64 78038}
!8330 = !{i64 78056}
!8331 = !{i64 78085}
!8332 = !{i64 78089}
!8333 = !{i64 78149}
!8334 = !{i64 78154}
!8335 = !{i64 78152}
!8336 = !{i64 78175}
!8337 = !{i64 78180}
!8338 = !{i64 78244}
!8339 = !{i64 78356}
!8340 = !{i64 78363}
!8341 = !{i64 78369}
!8342 = !{i64 78417}
!8343 = !{i64 78428}
!8344 = !{i64 78439}
!8345 = !{i64 78454}
!8346 = !{i64 78469}
!8347 = !{i64 78484}
!8348 = !{i64 78523}
!8349 = !{i64 78525}
!8350 = !{i64 78532}
!8351 = !{i64 78541}
!8352 = !{i64 78543}
!8353 = !{i64 78549}
!8354 = !{i64 78551}
!8355 = !{i64 78557}
!8356 = !{i64 78564}
!8357 = !{i64 78576}
!8358 = !{i64 78578}
!8359 = !{i64 78584}
!8360 = !{i64 78586}
!8361 = !{i64 78592}
!8362 = !{i64 78611}
!8363 = !{i64 78613}
!8364 = !{i64 78619}
!8365 = !{i64 78621}
!8366 = !{i64 78678}
!8367 = !{i64 78639}
!8368 = !{i64 78647}
!8369 = !{i64 78660}
!8370 = !{i64 78667}
!8371 = !{i64 78676}
!8372 = !{i64 78681}
!8373 = !{i64 78687}
!8374 = !{i64 78690}
!8375 = !{i64 78708}
!8376 = !{i64 78711}
!8377 = !{i64 78714}
!8378 = !{i64 78717}
!8379 = !{i64 78721}
!8380 = !{i64 78727}
!8381 = !{i64 78731}
!8382 = !{i64 78739}
!8383 = !{i64 78742}
!8384 = !{i64 78756}
!8385 = !{i64 78759}
!8386 = !{i64 78782}
!8387 = !{i64 78789}
!8388 = !{i64 78792}
!8389 = !{i64 78794}
!8390 = !{i64 78798}
!8391 = !{i64 78802}
!8392 = !{i64 78805}
!8393 = !{i64 78825}
!8394 = !{i64 78834}
!8395 = !{i64 78837}
!8396 = !{i64 78853}
!8397 = !{i64 78860}
!8398 = !{i64 78863}
!8399 = !{i64 78865}
!8400 = !{i64 78867}
!8401 = !{i64 78871}
!8402 = !{i64 78875}
!8403 = !{i64 78878}
!8404 = !{i64 78887}
!8405 = !{i64 78894}
!8406 = !{i64 78901}
!8407 = !{i64 78907}
!8408 = !{i64 78912}
!8409 = !{i64 78916}
!8410 = !{i64 78920}
!8411 = !{i64 78924}
!8412 = !{i64 78928}
!8413 = !{i64 78955}
!8414 = !{i64 79065}
!8415 = !{i64 79122}
!8416 = !{i64 79075}
!8417 = !{i64 79083}
!8418 = !{i64 79096}
!8419 = !{i64 79103}
!8420 = !{i64 79112}
!8421 = !{i64 79124}
!8422 = !{i64 79130}
!8423 = !{i64 79133}
!8424 = !{i64 79144}
!8425 = !{i64 79151}
!8426 = !{i64 79154}
!8427 = !{i64 79157}
!8428 = !{i64 79161}
!8429 = !{i64 79167}
!8430 = !{i64 79171}
!8431 = !{i64 79179}
!8432 = !{i64 79182}
!8433 = !{i64 79203}
!8434 = !{i64 79206}
!8435 = !{i64 79225}
!8436 = !{i64 79229}
!8437 = !{i64 79232}
!8438 = !{i64 79234}
!8439 = !{i64 79238}
!8440 = !{i64 79242}
!8441 = !{i64 79245}
!8442 = !{i64 79265}
!8443 = !{i64 79277}
!8444 = !{i64 79280}
!8445 = !{i64 79283}
!8446 = !{i64 79299}
!8447 = !{i64 79306}
!8448 = !{i64 79309}
!8449 = !{i64 79311}
!8450 = !{i64 79313}
!8451 = !{i64 79317}
!8452 = !{i64 79321}
!8453 = !{i64 79324}
!8454 = !{i64 79340}
!8455 = !{i64 79347}
!8456 = !{i64 79366}
!8457 = !{i64 79369}
!8458 = !{i64 79375}
!8459 = !{i64 79380}
!8460 = !{i64 79384}
!8461 = !{i64 79388}
!8462 = !{i64 79392}
!8463 = !{i64 79396}
!8464 = !{i64 79583}
!8465 = !{i64 79594}
!8466 = !{i64 79603}
!8467 = !{i64 79630}
!8468 = !{i64 79634}
!8469 = !{i64 79636}
!8470 = !{i64 79654}
!8471 = !{i64 79682}
!8472 = !{i64 79702}
!8473 = !{i64 79714}
!8474 = !{i64 79723}
!8475 = !{i64 79732}
!8476 = !{i64 79777}
!8477 = !{i64 79792}
!8478 = !{i64 79834}
!8479 = !{i64 79849}
!8480 = !{i64 79862}
!8481 = !{i64 79868}
!8482 = !{i64 79877}
!8483 = !{i64 79903}
!8484 = !{i64 79908}
!8485 = !{i64 79913}
!8486 = !{i64 79925}
!8487 = !{i64 79937}
!8488 = !{i64 79949}
!8489 = !{i64 79953}
!8490 = !{i64 79959}
!8491 = !{i64 79971}
!8492 = !{i64 79979}
!8493 = !{i64 80003}
!8494 = !{i64 80008}
!8495 = !{i64 80017}
!8496 = !{i64 80019}
!8497 = !{i64 80031}
!8498 = !{i64 80040}
!8499 = !{i64 80042}
!8500 = !{i64 80093}
!8501 = !{i64 80106}
!8502 = !{i64 80113}
!8503 = !{i64 80099}
!8504 = !{i64 80119}
!8505 = !{i64 80127}
!8506 = !{i64 80135}
!8507 = !{i64 80140}
!8508 = !{i64 80167}
!8509 = !{i64 80181}
!8510 = !{i64 80186}
!8511 = !{i64 80200}
!8512 = !{i64 80210}
!8513 = !{i64 80216}
!8514 = !{i64 80223}
!8515 = !{i64 80229}
!8516 = !{i64 80256}
!8517 = !{i64 80274}
!8518 = !{i64 80289}
!8519 = !{i64 80306}
!8520 = !{i64 80312}
!8521 = !{i64 80355}
!8522 = !{i64 80362}
!8523 = !{i64 80445}
!8524 = !{i64 80457}
!8525 = !{i64 80468}
!8526 = !{i64 80474}
!8527 = !{i64 80481}
!8528 = !{i64 80487}
!8529 = !{i64 80514}
!8530 = !{i64 80532}
!8531 = !{i64 80595}
!8532 = !{i64 80602}
!8533 = !{i64 80638}
!8534 = !{i64 80643}
!8535 = !{i64 80656}
!8536 = !{i64 80927}
!8537 = !{i64 80932}
!8538 = !{i64 80936}
!8539 = !{i64 80940}
!8540 = !{i64 80944}
!8541 = !{i64 80951}
!8542 = !{i64 80960}
!8543 = !{i64 80967}
!8544 = !{i64 80972}
!8545 = !{i64 80980}
!8546 = !{i64 80983}
!8547 = !{i64 80989}
!8548 = !{i64 80996}
!8549 = !{i64 81002}
!8550 = !{i64 81028}
!8551 = !{i64 81037}
!8552 = !{i64 81010}
!8553 = !{i64 81021}
!8554 = !{i64 81043}
!8555 = !{i64 81050}
!8556 = !{i64 81052}
!8557 = !{i64 81058}
!8558 = !{i64 81068}
!8559 = !{i64 81079}
!8560 = !{i64 81090}
!8561 = !{i64 81101}
!8562 = !{i64 81108}
!8563 = !{i64 81115}
!8564 = !{i64 81149}
!8565 = !{i64 81159}
!8566 = !{i64 81164}
!8567 = !{i64 81171}
!8568 = !{i64 81205}
!8569 = !{i64 81210}
!8570 = !{i64 81217}
!8571 = !{i64 81251}
!8572 = !{i64 81256}
!8573 = !{i64 81263}
!8574 = !{i64 81297}
!8575 = !{i64 81302}
!8576 = !{i64 81322}
!8577 = !{i64 81330}
!8578 = !{i64 81342}
!8579 = !{i64 81369}
!8580 = !{i64 81374}
!8581 = !{i64 81381}
!8582 = !{i64 81387}
!8583 = !{i64 81396}
!8584 = !{i64 81419}
!8585 = !{i64 81429}
!8586 = !{i64 81434}
!8587 = !{i64 81441}
!8588 = !{i64 81475}
!8589 = !{i64 81480}
!8590 = !{i64 81487}
!8591 = !{i64 81521}
!8592 = !{i64 81531}
!8593 = !{i64 81536}
!8594 = !{i64 81545}
!8595 = !{i64 81551}
!8596 = !{i64 81558}
!8597 = !{i64 81592}
!8598 = !{i64 81597}
!8599 = !{i64 81611}
!8600 = !{i64 81634}
!8601 = !{i64 81639}
!8602 = !{i64 81646}
!8603 = !{i64 81680}
!8604 = !{i64 81685}
!8605 = !{i64 81692}
!8606 = !{i64 81699}
!8607 = !{i64 81706}
!8608 = !{i64 81713}
!8609 = !{i64 81720}
!8610 = !{i64 81726}
!8611 = !{i64 81742}
!8612 = !{i64 81749}
!8613 = !{i64 81755}
!8614 = !{i64 81760}
!8615 = !{i64 81767}
!8616 = !{i64 81779}
!8617 = !{i64 81791}
!8618 = !{i64 81796}
!8619 = !{i64 81815}
!8620 = !{i64 81826}
!8621 = !{i64 81835}
!8622 = !{i64 81840}
!8623 = !{i64 81847}
!8624 = !{i64 81880}
!8625 = !{i64 81885}
!8626 = !{i64 81889}
!8627 = !{i64 81894}
!8628 = !{i64 81904}
!8629 = !{i64 81914}
!8630 = !{i64 81921}
!8631 = !{i64 81943}
!8632 = !{i64 81948}
!8633 = !{i64 81953}
!8634 = !{i64 81955}
!8635 = !{i64 81961}
!8636 = !{i64 82004}
!8637 = !{i64 82008}
!8638 = !{i64 82016}
!8639 = !{i64 82028}
!8640 = !{i64 82034}
!8641 = !{i64 82038}
!8642 = !{i64 82053}
!8643 = !{i64 82058}
!8644 = !{i64 82065}
!8645 = !{i64 82083}
!8646 = !{i64 82093}
!8647 = !{i64 82090}
!8648 = !{i64 82116}
!8649 = !{i64 82121}
!8650 = !{i64 82125}
!8651 = !{i64 82132}
!8652 = !{i64 82137}
!8653 = !{i64 81967}
!8654 = !{i64 82021}
!8655 = !{i64 82151}
!8656 = !{i64 82156}
!8657 = !{i64 82163}
!8658 = !{i64 82170}
!8659 = !{i64 82177}
!8660 = !{i64 82182}
!8661 = !{i64 82188}
!8662 = !{i64 82194}
!8663 = !{i64 82201}
!8664 = !{i64 82222}
!8665 = !{i64 82225}
!8666 = !{i64 82232}
!8667 = !{i64 82245}
!8668 = !{i64 82259}
!8669 = !{i64 82264}
!8670 = !{i64 82268}
!8671 = !{i64 82277}
!8672 = !{i64 82295}
!8673 = !{i64 82284}
!8674 = !{i64 82305}
!8675 = !{i64 82308}
!8676 = !{i64 82330}
!8677 = !{i64 82333}
!8678 = !{i64 82340}
!8679 = !{i64 82345}
!8680 = !{i64 82351}
!8681 = !{i64 82355}
!8682 = !{i64 82358}
!8683 = !{i64 82360}
!8684 = !{i64 82370}
!8685 = !{i64 82377}
!8686 = !{i64 82384}
!8687 = !{i64 82398}
!8688 = !{i64 82404}
!8689 = !{i64 82415}
!8690 = !{i64 82418}
!8691 = !{i64 82430}
!8692 = !{i64 82423}
!8693 = !{i64 82438}
!8694 = !{i64 82442}
!8695 = !{i64 82445}
!8696 = !{i64 82453}
!8697 = !{i64 82456}
!8698 = !{i64 82462}
!8699 = !{i64 82483}
!8700 = !{i64 82488}
!8701 = !{i64 82495}
!8702 = !{i64 82500}
!8703 = !{i64 82502}
!8704 = !{i64 82504}
!8705 = !{i64 82511}
!8706 = !{i64 82514}
!8707 = !{i64 82521}
!8708 = !{i64 82523}
!8709 = !{i64 82527}
!8710 = !{i64 82531}
!8711 = !{i64 82540}
!8712 = !{i64 82544}
!8713 = !{i64 82555}
!8714 = !{i64 82559}
!8715 = !{i64 82566}
!8716 = !{i64 82572}
!8717 = !{i64 82579}
!8718 = !{i64 82583}
!8719 = !{i64 82588}
!8720 = !{i64 82595}
!8721 = !{i64 82600}
!8722 = !{i64 82602}
!8723 = !{i64 82608}
!8724 = !{i64 82615}
!8725 = !{i64 82641}
!8726 = !{i64 82654}
!8727 = !{i64 82668}
!8728 = !{i64 82683}
!8729 = !{i64 82686}
!8730 = !{i64 82693}
!8731 = !{i64 82700}
!8732 = !{i64 82704}
!8733 = !{i64 82706}
!8734 = !{i64 82712}
!8735 = !{i64 82717}
!8736 = !{i64 82719}
!8737 = !{i64 82782}
!8738 = !{i64 82789}
!8739 = !{i64 82791}
!8740 = !{i64 82805}
!8741 = !{i64 82827}
!8742 = !{i64 82830}
!8743 = !{i64 82838}
!8744 = !{i64 82843}
!8745 = !{i64 82850}
!8746 = !{i64 82857}
!8747 = !{i64 82862}
!8748 = !{i64 82864}
!8749 = !{i64 82874}
!8750 = !{i64 82757}
!8751 = !{i64 82881}
!8752 = !{i64 82888}
!8753 = !{i64 82894}
!8754 = !{i64 82901}
!8755 = !{i64 82908}
!8756 = !{i64 82914}
!8757 = !{i64 82921}
!8758 = !{i64 82928}
!8759 = !{i64 82934}
!8760 = !{i64 82940}
!8761 = !{i64 82960}
!8762 = !{i64 82964}
!8763 = !{i64 82966}
!8764 = !{i64 82967}
!8765 = !{i64 82973}
!8766 = !{i64 82977}
!8767 = !{i64 82979}
!8768 = !{i64 82981}
!8769 = !{i64 82984}
!8770 = !{i64 82988}
!8771 = !{i64 82990}
!8772 = !{i64 82991}
!8773 = !{i64 82994}
!8774 = !{i64 82996}
!8775 = !{i64 82999}
!8776 = !{i64 83001}
!8777 = !{i64 83004}
!8778 = !{i64 83007}
!8779 = !{i64 83009}
!8780 = !{i64 83010}
!8781 = !{i64 83013}
!8782 = !{i64 83015}
!8783 = !{i64 83017}
!8784 = !{i64 83020}
!8785 = !{i64 83022}
!8786 = !{i64 83023}
!8787 = !{i64 83030}
!8788 = !{i64 83040}
!8789 = !{i64 83045}
!8790 = !{i64 83050}
!8791 = !{i64 83057}
!8792 = !{i64 83064}
!8793 = !{i64 83072}
!8794 = !{i64 83078}
!8795 = !{i64 83081}
!8796 = !{i64 83084}
!8797 = !{i64 83091}
!8798 = !{i64 83096}
!8799 = !{i64 83102}
!8800 = !{i64 83108}
!8801 = !{i64 83111}
!8802 = !{i64 83117}
!8803 = !{i64 83122}
!8804 = !{i64 83129}
!8805 = !{i64 83136}
!8806 = !{i64 83148}
!8807 = !{i64 83165}
!8808 = !{i64 83172}
!8809 = !{i64 83174}
!8810 = !{i64 83176}
!8811 = !{i64 83244}
!8812 = !{i64 83178}
!8813 = !{i64 83185}
!8814 = !{i64 83193}
!8815 = !{i64 83199}
!8816 = !{i64 83202}
!8817 = !{i64 83205}
!8818 = !{i64 83212}
!8819 = !{i64 83217}
!8820 = !{i64 83223}
!8821 = !{i64 83229}
!8822 = !{i64 83232}
!8823 = !{i64 83238}
!8824 = !{i64 83250}
!8825 = !{i64 83257}
!8826 = !{i64 83260}
!8827 = !{i64 83267}
!8828 = !{i64 83286}
!8829 = !{i64 83290}
!8830 = !{i64 83293}
!8831 = !{i64 83300}
!8832 = !{i64 83303}
!8833 = !{i64 83305}
!8834 = !{i64 83312}
!8835 = !{i64 83314}
!8836 = !{i64 83318}
!8837 = !{i64 83322}
!8838 = !{i64 83325}
!8839 = !{i64 83327}
!8840 = !{i64 83331}
!8841 = !{i64 83341}
!8842 = !{i64 83344}
!8843 = !{i64 83346}
!8844 = !{i64 83350}
!8845 = !{i64 83353}
!8846 = !{i64 83355}
!8847 = !{i64 83362}
!8848 = !{i64 83364}
!8849 = !{i64 83371}
!8850 = !{i64 83386}
!8851 = !{i64 83394}
!8852 = !{i64 83407}
!8853 = !{i64 83434}
!8854 = !{i64 83439}
!8855 = !{i64 83449}
!8856 = !{i64 83452}
!8857 = !{i64 83460}
!8858 = !{i64 83463}
!8859 = !{i64 83465}
!8860 = !{i64 83473}
!8861 = !{i64 83476}
!8862 = !{i64 83478}
!8863 = !{i64 83490}
!8864 = !{i64 83493}
!8865 = !{i64 83495}
!8866 = !{i64 83500}
!8867 = !{i64 83509}
!8868 = !{i64 83513}
!8869 = !{i64 83507}
!8870 = !{i64 83515}
!8871 = !{i64 83522}
!8872 = !{i64 83525}
!8873 = !{i64 83527}
!8874 = !{i64 83534}
!8875 = !{i64 83540}
!8876 = !{i64 83543}
!8877 = !{i64 83550}
!8878 = !{i64 83555}
!8879 = !{i64 83564}
!8880 = !{i64 83614}
!8881 = !{i64 83621}
!8882 = !{i64 83623}
!8883 = !{i64 83649}
!8884 = !{i64 83665}
!8885 = !{i64 83672}
!8886 = !{i64 83679}
!8887 = !{i64 83686}
!8888 = !{i64 83691}
!8889 = !{i64 83697}
!8890 = !{i64 83703}
!8891 = !{i64 83713}
!8892 = !{i64 83716}
!8893 = !{i64 83724}
!8894 = !{i64 83727}
!8895 = !{i64 83729}
!8896 = !{i64 83736}
!8897 = !{i64 83741}
!8898 = !{i64 83751}
!8899 = !{i64 83754}
!8900 = !{i64 83762}
!8901 = !{i64 83765}
!8902 = !{i64 83774}
!8903 = !{i64 83779}
!8904 = !{i64 83790}
!8905 = !{i64 83797}
!8906 = !{i64 83878}
!8907 = !{i64 83799}
!8908 = !{i64 83806}
!8909 = !{i64 83814}
!8910 = !{i64 83820}
!8911 = !{i64 83827}
!8912 = !{i64 83830}
!8913 = !{i64 83837}
!8914 = !{i64 83842}
!8915 = !{i64 83850}
!8916 = !{i64 83856}
!8917 = !{i64 83863}
!8918 = !{i64 83866}
!8919 = !{i64 83873}
!8920 = !{i64 83884}
!8921 = !{i64 83888}
!8922 = !{i64 83896}
!8923 = !{i64 83908}
!8924 = !{i64 83914}
!8925 = !{i64 83918}
!8926 = !{i64 83933}
!8927 = !{i64 83938}
!8928 = !{i64 83945}
!8929 = !{i64 83982}
!8930 = !{i64 84008}
!8931 = !{i64 84013}
!8932 = !{i64 84016}
!8933 = !{i64 84020}
!8934 = !{i64 84027}
!8935 = !{i64 84032}
!8936 = !{i64 84042}
!8937 = !{i64 84056}
!8938 = !{i64 84061}
!8939 = !{i64 84068}
!8940 = !{i64 84075}
!8941 = !{i64 84082}
!8942 = !{i64 84322}
!8943 = !{i64 84331}
!8944 = !{i64 84376}
!8945 = !{i64 84379}
!8946 = !{i64 84388}
!8947 = !{i64 84415}
!8948 = !{i64 84420}
!8949 = !{i64 84427}
!8950 = !{i64 84429}
!8951 = !{i64 84441}
!8952 = !{i64 84446}
!8953 = !{i64 84455}
!8954 = !{i64 84457}
!8955 = !{i64 84461}
!8956 = !{i64 84465}
!8957 = !{i64 84470}
!8958 = !{i64 84479}
!8959 = !{i64 84488}
!8960 = !{i64 84497}
!8961 = !{i64 84506}
!8962 = !{i64 84514}
!8963 = !{i64 84523}
!8964 = !{i64 84534}
!8965 = !{i64 84549}
!8966 = !{i64 84552}
!8967 = !{i64 84560}
!8968 = !{i64 84568}
!8969 = !{i64 84588}
!8970 = !{i64 84638}
!8971 = !{i64 84651}
!8972 = !{i64 84654}
!8973 = !{i64 84662}
!8974 = !{i64 84667}
!8975 = !{i64 84670}
!8976 = !{i64 84675}
!8977 = !{i64 84677}
!8978 = !{i64 84681}
!8979 = !{i64 84686}
!8980 = !{i64 84699}
!8981 = !{i64 84702}
!8982 = !{i64 84710}
!8983 = !{i64 84715}
!8984 = !{i64 84718}
!8985 = !{i64 84723}
!8986 = !{i64 84725}
!8987 = !{i64 84729}
!8988 = !{i64 84754}
!8989 = !{i64 84788}
!8990 = !{i64 84793}
!8991 = !{i64 84807}
!8992 = !{i64 84816}
!8993 = !{i64 84845}
!8994 = !{i64 84867}
!8995 = !{i64 84892}
!8996 = !{i64 84940}
!8997 = !{i64 84961}
!8998 = !{i64 84966}
!8999 = !{i64 84990}
!9000 = !{i64 84999}
!9001 = !{i64 85023}
!9002 = !{i64 85050}
!9003 = !{i64 85055}
!9004 = !{i64 85058}
!9005 = !{i64 85065}
!9006 = !{i64 85081}
!9007 = !{i64 85088}
!9008 = !{i64 85094}
!9009 = !{i64 85099}
!9010 = !{i64 85104}
!9011 = !{i64 85129}
!9012 = !{i64 85140}
!9013 = !{i64 85151}
!9014 = !{i64 85156}
!9015 = !{i64 85330}
!9016 = !{i64 85333}
!9017 = !{i64 85336}
!9018 = !{i64 85371}
!9019 = !{i64 85373}
!9020 = !{i64 85380}
!9021 = !{i64 85381}
!9022 = !{i64 85385}
!9023 = !{i64 85390}
!9024 = !{i64 85419}
!9025 = !{i64 85442}
!9026 = !{i64 85444}
!9027 = !{i64 85463}
!9028 = !{i64 85469}
!9029 = !{i64 85471}
!9030 = !{i64 85486}
!9031 = !{i64 85490}
!9032 = !{i64 85498}
!9033 = !{i64 85522}
!9034 = !{i64 85525}
!9035 = !{i64 85527}
!9036 = !{i64 85553}
!9037 = !{i64 85583}
!9038 = !{i64 85588}
!9039 = !{i64 85618}
!9040 = !{i64 85634}
!9041 = !{i64 85645}
!9042 = !{i64 85652}
!9043 = !{i64 85663}
!9044 = !{i64 85665}
!9045 = !{i64 85667}
!9046 = !{i64 85669}
!9047 = !{i64 85672}
!9048 = !{i64 85676}
!9049 = !{i64 85684}
!9050 = !{i64 85689}
!9051 = !{i64 85695}
!9052 = !{i64 85698}
!9053 = !{i64 85702}
!9054 = !{i64 85705}
!9055 = !{i64 85710}
!9056 = !{i64 85715}
!9057 = !{i64 85720}
!9058 = !{i64 85724}
!9059 = !{i64 85728}
!9060 = !{i64 85732}
!9061 = !{i64 85745}
!9062 = !{i64 85748}
!9063 = !{i64 85758}
!9064 = !{i64 85765}
!9065 = !{i64 85771}
!9066 = !{i64 85776}
!9067 = !{i64 85781}
!9068 = !{i64 85785}
!9069 = !{i64 85789}
!9070 = !{i64 85793}
!9071 = !{i64 85806}
!9072 = !{i64 85809}
!9073 = !{i64 85819}
!9074 = !{i64 85826}
!9075 = !{i64 85832}
!9076 = !{i64 85837}
!9077 = !{i64 85842}
!9078 = !{i64 85862}
!9079 = !{i64 85867}
!9080 = !{i64 85870}
!9081 = !{i64 85876}
!9082 = !{i64 85880}
!9083 = !{i64 85888}
!9084 = !{i64 85894}
!9085 = !{i64 85899}
!9086 = !{i64 85904}
!9087 = !{i64 85908}
!9088 = !{i64 85914}
!9089 = !{i64 85927}
!9090 = !{i64 85946}
!9091 = !{i64 85951}
!9092 = !{i64 85956}
!9093 = !{i64 85961}
!9094 = !{i64 85981}
!9095 = !{i64 85999}
!9096 = !{i64 86023}
!9097 = !{i64 86025}
!9098 = !{i64 86044}
!9099 = !{i64 86046}
!9100 = !{i64 86049}
!9101 = !{i64 86062}
!9102 = !{i64 86066}
!9103 = !{i64 86068}
!9104 = !{i64 86073}
!9105 = !{i64 86078}
!9106 = !{i64 86087}
!9107 = !{i64 86093}
!9108 = !{i64 86102}
!9109 = !{i64 86107}
!9110 = !{i64 86111}
!9111 = !{i64 86129}
!9112 = !{i64 86134}
!9113 = !{i64 86139}
!9114 = !{i64 86157}
!9115 = !{i64 86227}
!9116 = !{i64 86235}
!9117 = !{i64 86238}
!9118 = !{i64 86241}
!9119 = !{i64 86245}
!9120 = !{i64 86249}
!9121 = !{i64 86251}
!9122 = !{i64 86253}
!9123 = !{i64 86259}
!9124 = !{i64 86285}
!9125 = !{i64 86290}
!9126 = !{i64 86294}
!9127 = !{i64 86300}
!9128 = !{i64 86313}
!9129 = !{i64 86320}
!9130 = !{i64 86325}
!9131 = !{i64 86327}
!9132 = !{i64 86331}
!9133 = !{i64 86337}
!9134 = !{i64 86340}
!9135 = !{i64 86353}
!9136 = !{i64 86355}
!9137 = !{i64 86360}
!9138 = !{i64 86368}
!9139 = !{i64 86387}
!9140 = !{i64 86392}
!9141 = !{i64 86431}
!9142 = !{i64 86435}
!9143 = !{i64 86439}
!9144 = !{i64 86444}
!9145 = !{i64 86449}
!9146 = !{i64 86453}
!9147 = !{i64 86455}
!9148 = !{i64 86459}
!9149 = !{i64 86467}
!9150 = !{i64 86473}
!9151 = !{i64 86476}
!9152 = !{i64 86489}
!9153 = !{i64 86491}
!9154 = !{i64 86496}
!9155 = !{i64 86498}
!9156 = !{i64 86509}
!9157 = !{i64 86518}
!9158 = !{i64 86520}
!9159 = !{i64 86554}
!9160 = !{i64 86558}
!9161 = !{i64 86562}
!9162 = !{i64 86591}
!9163 = !{i64 86612}
!9164 = !{i64 86614}
!9165 = !{i64 86616}
!9166 = !{i64 86626}
!9167 = !{i64 86641}
!9168 = !{i64 86660}
!9169 = !{i64 86678}
!9170 = !{i64 86683}
!9171 = !{i64 86695}
!9172 = !{i64 86699}
!9173 = !{i64 86724}
!9174 = !{i64 86733}
!9175 = !{i64 86763}
!9176 = !{i64 86770}
!9177 = !{i64 86775}
!9178 = !{i64 86777}
!9179 = !{i64 86793}
!9180 = !{i64 86800}
!9181 = !{i64 86822}
!9182 = !{i64 86827}
!9183 = !{i64 86832}
!9184 = !{i64 86836}
!9185 = !{i64 86847}
!9186 = !{i64 86865}
!9187 = !{i64 86881}
!9188 = !{i64 87054}
!9189 = !{i64 87066}
!9190 = !{i64 87070}
!9191 = !{i64 87077}
!9192 = !{i64 87079}
!9193 = !{i64 87101}
!9194 = !{i64 87106}
!9195 = !{i64 87114}
!9196 = !{i64 87116}
!9197 = !{i64 87118}
!9198 = !{i64 87124}
!9199 = !{i64 87129}
!9200 = !{i64 87134}
!9201 = !{i64 87140}
!9202 = !{i64 87142}
!9203 = !{i64 87150}
!9204 = !{i64 87156}
!9205 = !{i64 87164}
!9206 = !{i64 87195}
!9207 = !{i64 87201}
!9208 = !{i64 87209}
!9209 = !{i64 87214}
!9210 = !{i64 87219}
!9211 = !{i64 87222}
!9212 = !{i64 87217}
!9213 = !{i64 87229}
!9214 = !{i64 87231}
!9215 = !{i64 87238}
!9216 = !{i64 87241}
!9217 = !{i64 87243}
!9218 = !{i64 87247}
!9219 = !{i64 87250}
!9220 = !{i64 87252}
!9221 = !{i64 87256}
!9222 = !{i64 87259}
!9223 = !{i64 87261}
!9224 = !{i64 87264}
!9225 = !{i64 87268}
!9226 = !{i64 87275}
!9227 = !{i64 87278}
!9228 = !{i64 87280}
!9229 = !{i64 87284}
!9230 = !{i64 87287}
!9231 = !{i64 87289}
!9232 = !{i64 87293}
!9233 = !{i64 87296}
!9234 = !{i64 87298}
!9235 = !{i64 87301}
!9236 = !{i64 87315}
!9237 = !{i64 87321}
!9238 = !{i64 87329}
!9239 = !{i64 87334}
!9240 = !{i64 87344}
!9241 = !{i64 87347}
!9242 = !{i64 87354}
!9243 = !{i64 87371}
!9244 = !{i64 87373}
!9245 = !{i64 87378}
!9246 = !{i64 87380}
!9247 = !{i64 87385}
!9248 = !{i64 87388}
!9249 = !{i64 87390}
!9250 = !{i64 87404}
!9251 = !{i64 87412}
!9252 = !{i64 87414}
!9253 = !{i64 87418}
!9254 = !{i64 87424}
!9255 = !{i64 87431}
!9256 = !{i64 87444}
!9257 = !{i64 87448}
!9258 = !{i64 87454}
!9259 = !{i64 87456}
!9260 = !{i64 87459}
!9261 = !{i64 87464}
!9262 = !{i64 87474}
!9263 = !{i64 87479}
!9264 = !{i64 87482}
!9265 = !{i64 87484}
!9266 = !{i64 87487}
!9267 = !{i64 87495}
!9268 = !{i64 87500}
!9269 = !{i64 87507}
!9270 = !{i64 87509}
!9271 = !{i64 87511}
!9272 = !{i64 87514}
!9273 = !{i64 87518}
!9274 = !{i64 87523}
!9275 = !{i64 87528}
!9276 = !{i64 87533}
!9277 = !{i64 87536}
!9278 = !{i64 87542}
!9279 = !{i64 87544}
!9280 = !{i64 87547}
!9281 = !{i64 87549}
!9282 = !{i64 87551}
!9283 = !{i64 87554}
!9284 = !{i64 87558}
!9285 = !{i64 87563}
!9286 = !{i64 87568}
!9287 = !{i64 87570}
!9288 = !{i64 87604}
!9289 = !{i64 87606}
!9290 = !{i64 87608}
!9291 = !{i64 87613}
!9292 = !{i64 87611}
!9293 = !{i64 87616}
!9294 = !{i64 87620}
!9295 = !{i64 87625}
!9296 = !{i64 87630}
!9297 = !{i64 87635}
!9298 = !{i64 87638}
!9299 = !{i64 87642}
!9300 = !{i64 87644}
!9301 = !{i64 87646}
!9302 = !{i64 87649}
!9303 = !{i64 87653}
!9304 = !{i64 87671}
!9305 = !{i64 87687}
!9306 = !{i64 87689}
!9307 = !{i64 87692}
!9308 = !{i64 87709}
!9309 = !{i64 87800}
!9310 = !{i64 87805}
!9311 = !{i64 87810}
!9312 = !{i64 87819}
!9313 = !{i64 87847}
!9314 = !{i64 87848}
!9315 = !{i64 87868}
!9316 = !{i64 87879}
!9317 = !{i64 87882}
!9318 = !{i64 87897}
!9319 = !{i64 87902}
!9320 = !{i64 87911}
!9321 = !{i64 87922}
!9322 = !{i64 87926}
!9323 = !{i64 87905}
!9324 = !{i64 87990}
!9325 = !{i64 87993}
!9326 = !{i64 88004}
!9327 = !{i64 88007}
!9328 = !{i64 88041}
!9329 = !{i64 88054}
!9330 = !{i64 88058}
!9331 = !{i64 88069}
!9332 = !{i64 88050}
!9333 = !{i64 88037}
!9334 = !{i64 88033}
!9335 = !{i64 88029}
!9336 = !{i64 88023}
!9337 = !{i64 88026}
!9338 = !{i64 88010}
!9339 = !{i64 88078}
!9340 = !{i64 88081}
!9341 = !{i64 88099}
!9342 = !{i64 88200}
!9343 = !{i64 88485}
!9344 = !{i64 88514}
!9345 = !{i64 88117}
!9346 = !{i64 88124}
!9347 = !{i64 88127}
!9348 = !{i64 88130}
!9349 = !{i64 88134}
!9350 = !{i64 88137}
!9351 = !{i64 88139}
!9352 = !{i64 88143}
!9353 = !{i64 88145}
!9354 = !{i64 88149}
!9355 = !{i64 88152}
!9356 = !{i64 88157}
!9357 = !{i64 88161}
!9358 = !{i64 88164}
!9359 = !{i64 88168}
!9360 = !{i64 88171}
!9361 = !{i64 88173}
!9362 = !{i64 88177}
!9363 = !{i64 88179}
!9364 = !{i64 88183}
!9365 = !{i64 88186}
!9366 = !{i64 88194}
!9367 = !{i64 88202}
!9368 = !{i64 88223}
!9369 = !{i64 88227}
!9370 = !{i64 88230}
!9371 = !{i64 88234}
!9372 = !{i64 88242}
!9373 = !{i64 88246}
!9374 = !{i64 88249}
!9375 = !{i64 88253}
!9376 = !{i64 88258}
!9377 = !{i64 88261}
!9378 = !{i64 88265}
!9379 = !{i64 88268}
!9380 = !{i64 88274}
!9381 = !{i64 88278}
!9382 = !{i64 88284}
!9383 = !{i64 88288}
!9384 = !{i64 88291}
!9385 = !{i64 88294}
!9386 = !{i64 88297}
!9387 = !{i64 88304}
!9388 = !{i64 88308}
!9389 = !{i64 88313}
!9390 = !{i64 88316}
!9391 = !{i64 88320}
!9392 = !{i64 88326}
!9393 = !{i64 88329}
!9394 = !{i64 88336}
!9395 = !{i64 88340}
!9396 = !{i64 88345}
!9397 = !{i64 88347}
!9398 = !{i64 88354}
!9399 = !{i64 88358}
!9400 = !{i64 88366}
!9401 = !{i64 88370}
!9402 = !{i64 88373}
!9403 = !{i64 88378}
!9404 = !{i64 88382}
!9405 = !{i64 88388}
!9406 = !{i64 88391}
!9407 = !{i64 88394}
!9408 = !{i64 88397}
!9409 = !{i64 88400}
!9410 = !{i64 88407}
!9411 = !{i64 88411}
!9412 = !{i64 88416}
!9413 = !{i64 88419}
!9414 = !{i64 88423}
!9415 = !{i64 88426}
!9416 = !{i64 88428}
!9417 = !{i64 88431}
!9418 = !{i64 88433}
!9419 = !{i64 88439}
!9420 = !{i64 88443}
!9421 = !{i64 88479}
!9422 = !{i64 88494}
!9423 = !{i64 88500}
!9424 = !{i64 88507}
!9425 = !{i64 88523}
!9426 = !{i64 88529}
!9427 = !{i64 88446}
!9428 = !{i64 88452}
!9429 = !{i64 88449}
!9430 = !{i64 88455}
!9431 = !{i64 88461}
!9432 = !{i64 88467}
!9433 = !{i64 88476}
!9434 = !{i64 88488}
!9435 = !{i64 88491}
!9436 = !{i64 88497}
!9437 = !{i64 88520}
!9438 = !{i64 88532}
!9439 = !{i64 88536}
!9440 = !{i64 88543}
!9441 = !{i64 88562}
!9442 = !{i64 88565}
!9443 = !{i64 88570}
!9444 = !{i64 88574}
!9445 = !{i64 88597}
!9446 = !{i64 88599}
!9447 = !{i64 88617}
!9448 = !{i64 88622}
!9449 = !{i64 88627}
!9450 = !{i64 88630}
!9451 = !{i64 88682}
!9452 = !{i64 88689}
!9453 = !{i64 88692}
!9454 = !{i64 88695}
!9455 = !{i64 88697}
!9456 = !{i64 88701}
!9457 = !{i64 88707}
!9458 = !{i64 88711}
!9459 = !{i64 88713}
!9460 = !{i64 88767}
!9461 = !{i64 88795}
!9462 = !{i64 88808}
!9463 = !{i64 88823}
!9464 = !{i64 88831}
!9465 = !{i64 88840}
!9466 = !{i64 88849}
!9467 = !{i64 88834}
!9468 = !{i64 88805}
!9469 = !{i64 88918}
!9470 = !{i64 88921}
!9471 = !{i64 88929}
!9472 = !{i64 88934}
!9473 = !{i64 88937}
!9474 = !{i64 88959}
!9475 = !{i64 89029}
!9476 = !{i64 88965}
!9477 = !{i64 88968}
!9478 = !{i64 88971}
!9479 = !{i64 88975}
!9480 = !{i64 88978}
!9481 = !{i64 88980}
!9482 = !{i64 88984}
!9483 = !{i64 88986}
!9484 = !{i64 88990}
!9485 = !{i64 88993}
!9486 = !{i64 89032}
!9487 = !{i64 89043}
!9488 = !{i64 89060}
!9489 = !{i64 89065}
!9490 = !{i64 89070}
!9491 = !{i64 89073}
!9492 = !{i64 89077}
!9493 = !{i64 89080}
!9494 = !{i64 89085}
!9495 = !{i64 89088}
!9496 = !{i64 89091}
!9497 = !{i64 89102}
!9498 = !{i64 89110}
!9499 = !{i64 89118}
!9500 = !{i64 89121}
!9501 = !{i64 89128}
!9502 = !{i64 89136}
!9503 = !{i64 89124}
!9504 = !{i64 89142}
!9505 = !{i64 89146}
!9506 = !{i64 89149}
!9507 = !{i64 89152}
!9508 = !{i64 89154}
!9509 = !{i64 89163}
!9510 = !{i64 89167}
!9511 = !{i64 89173}
!9512 = !{i64 89176}
!9513 = !{i64 89185}
!9514 = !{i64 89202}
!9515 = !{i64 89207}
!9516 = !{i64 89212}
!9517 = !{i64 89215}
!9518 = !{i64 89271}
!9519 = !{i64 89275}
!9520 = !{i64 89278}
!9521 = !{i64 89281}
!9522 = !{i64 89283}
!9523 = !{i64 89287}
!9524 = !{i64 89293}
!9525 = !{i64 89298}
!9526 = !{i64 89300}
!9527 = !{i64 89308}
!9528 = !{i64 89313}
!9529 = !{i64 89321}
!9530 = !{i64 89323}
!9531 = !{i64 89325}
!9532 = !{i64 89327}
!9533 = !{i64 89329}
!9534 = !{i64 89355}
!9535 = !{i64 89387}
!9536 = !{i64 89408}
!9537 = !{i64 89425}
!9538 = !{i64 89430}
!9539 = !{i64 89433}
!9540 = !{i64 89440}
!9541 = !{i64 89447}
!9542 = !{i64 89450}
!9543 = !{i64 89453}
!9544 = !{i64 89461}
!9545 = !{i64 89466}
!9546 = !{i64 89476}
!9547 = !{i64 89479}
!9548 = !{i64 89484}
!9549 = !{i64 89487}
!9550 = !{i64 89502}
!9551 = !{i64 89510}
!9552 = !{i64 89515}
!9553 = !{i64 89531}
!9554 = !{i64 89536}
!9555 = !{i64 89542}
!9556 = !{i64 89550}
!9557 = !{i64 89560}
!9558 = !{i64 89563}
!9559 = !{i64 89566}
!9560 = !{i64 89577}
!9561 = !{i64 89582}
!9562 = !{i64 89595}
!9563 = !{i64 89598}
!9564 = !{i64 89603}
!9565 = !{i64 89609}
!9566 = !{i64 89614}
!9567 = !{i64 89624}
!9568 = !{i64 89629}
!9569 = !{i64 89635}
!9570 = !{i64 89661}
!9571 = !{i64 89669}
!9572 = !{i64 89677}
!9573 = !{i64 89685}
!9574 = !{i64 89690}
!9575 = !{i64 89693}
!9576 = !{i64 89688}
!9577 = !{i64 89700}
!9578 = !{i64 89705}
!9579 = !{i64 89716}
!9580 = !{i64 89719}
!9581 = !{i64 89721}
!9582 = !{i64 89727}
!9583 = !{i64 89730}
!9584 = !{i64 89732}
!9585 = !{i64 89738}
!9586 = !{i64 89741}
!9587 = !{i64 89743}
!9588 = !{i64 89746}
!9589 = !{i64 89751}
!9590 = !{i64 89755}
!9591 = !{i64 89758}
!9592 = !{i64 89761}
!9593 = !{i64 89763}
!9594 = !{i64 89767}
!9595 = !{i64 89770}
!9596 = !{i64 89772}
!9597 = !{i64 89776}
!9598 = !{i64 89781}
!9599 = !{i64 89783}
!9600 = !{i64 89786}
!9601 = !{i64 89791}
!9602 = !{i64 89795}
!9603 = !{i64 89798}
!9604 = !{i64 89801}
!9605 = !{i64 89803}
!9606 = !{i64 89807}
!9607 = !{i64 89810}
!9608 = !{i64 89812}
!9609 = !{i64 89816}
!9610 = !{i64 89821}
!9611 = !{i64 89823}
!9612 = !{i64 89826}
!9613 = !{i64 89830}
!9614 = !{i64 89836}
!9615 = !{i64 89841}
!9616 = !{i64 89844}
!9617 = !{i64 89846}
!9618 = !{i64 89852}
!9619 = !{i64 89855}
!9620 = !{i64 89857}
!9621 = !{i64 89863}
!9622 = !{i64 89866}
!9623 = !{i64 89868}
!9624 = !{i64 89871}
!9625 = !{i64 89876}
!9626 = !{i64 89879}
!9627 = !{i64 89886}
!9628 = !{i64 89891}
!9629 = !{i64 89895}
!9630 = !{i64 89902}
!9631 = !{i64 89907}
!9632 = !{i64 89923}
!9633 = !{i64 89924}
!9634 = !{i64 89928}
!9635 = !{i64 89933}
!9636 = !{i64 89951}
!9637 = !{i64 89955}
!9638 = !{i64 89962}
!9639 = !{i64 89970}
!9640 = !{i64 89984}
!9641 = !{i64 89988}
!9642 = !{i64 89990}
!9643 = !{i64 89992}
!9644 = !{i64 89996}
!9645 = !{i64 90006}
!9646 = !{i64 90012}
!9647 = !{i64 90015}
!9648 = !{i64 90017}
!9649 = !{i64 90026}
!9650 = !{i64 90028}
!9651 = !{i64 90030}
!9652 = !{i64 90033}
!9653 = !{i64 90040}
!9654 = !{i64 90042}
!9655 = !{i64 90044}
!9656 = !{i64 90046}
!9657 = !{i64 90053}
!9658 = !{i64 90060}
!9659 = !{i64 90087}
!9660 = !{i64 90092}
!9661 = !{i64 90107}
!9662 = !{i64 90118}
!9663 = !{i64 90133}
!9664 = !{i64 90140}
!9665 = !{i64 90142}
!9666 = !{i64 90149}
!9667 = !{i64 90152}
!9668 = !{i64 90177}
!9669 = !{i64 90181}
!9670 = !{i64 90185}
!9671 = !{i64 90209}
!9672 = !{i64 90213}
!9673 = !{i64 90215}
!9674 = !{i64 90219}
!9675 = !{i64 90223}
!9676 = !{i64 90226}
!9677 = !{i64 90228}
!9678 = !{i64 90231}
!9679 = !{i64 90233}
!9680 = !{i64 90236}
!9681 = !{i64 90239}
!9682 = !{i64 90241}
!9683 = !{i64 90243}
!9684 = !{i64 90272}
!9685 = !{i64 90280}
!9686 = !{i64 90283}
!9687 = !{i64 90291}
!9688 = !{i64 90300}
!9689 = !{i64 90308}
!9690 = !{i64 90316}
!9691 = !{i64 90324}
!9692 = !{i64 90332}
!9693 = !{i64 90345}
!9694 = !{i64 90347}
!9695 = !{i64 90353}
!9696 = !{i64 90355}
!9697 = !{i64 90358}
!9698 = !{i64 90362}
!9699 = !{i64 90364}
!9700 = !{i64 90376}
!9701 = !{i64 90392}
!9702 = !{i64 90394}
!9703 = !{i64 90402}
!9704 = !{i64 90407}
!9705 = !{i64 90410}
!9706 = !{i64 90412}
!9707 = !{i64 90414}
!9708 = !{i64 90417}
!9709 = !{i64 90419}
!9710 = !{i64 90421}
!9711 = !{i64 90426}
!9712 = !{i64 90432}
!9713 = !{i64 90447}
!9714 = !{i64 90457}
!9715 = !{i64 90462}
!9716 = !{i64 90465}
!9717 = !{i64 90470}
!9718 = !{i64 90474}
!9719 = !{i64 90483}
!9720 = !{i64 90493}
!9721 = !{i64 90498}
!9722 = !{i64 90503}
!9723 = !{i64 90524}
!9724 = !{i64 90547}
!9725 = !{i64 90548}
!9726 = !{i64 90552}
!9727 = !{i64 90574}
!9728 = !{i64 90579}
!9729 = !{i64 90590}
!9730 = !{i64 90596}
!9731 = !{i64 90601}
!9732 = !{i64 90614}
!9733 = !{i64 90640}
!9734 = !{i64 90645}
!9735 = !{i64 90665}
!9736 = !{i64 90670}
!9737 = !{i64 90673}
!9738 = !{i64 90707}
!9739 = !{i64 90725}
!9740 = !{i64 90736}
!9741 = !{i64 90760}
!9742 = !{i64 90761}
!9743 = !{i64 90764}
!9744 = !{i64 90767}
!9745 = !{i64 90769}
!9746 = !{i64 90786}
!9747 = !{i64 90788}
!9748 = !{i64 90793}
!9749 = !{i64 90795}
!9750 = !{i64 90811}
!9751 = !{i64 90813}
!9752 = !{i64 90818}
!9753 = !{i64 90820}
!9754 = !{i64 90840}
!9755 = !{i64 90845}
!9756 = !{i64 90865}
!9757 = !{i64 90875}
!9758 = !{i64 90880}
!9759 = !{i64 90891}
!9760 = !{i64 90905}
!9761 = !{i64 90930}
!9762 = !{i64 90940}
!9763 = !{i64 90945}
!9764 = !{i64 90951}
!9765 = !{i64 90956}
!9766 = !{i64 90970}
!9767 = !{i64 90984}
!9768 = !{i64 90992}
!9769 = !{i64 90995}
!9770 = !{i64 91000}
!9771 = !{i64 91008}
!9772 = !{i64 91039}
!9773 = !{i64 91047}
!9774 = !{i64 91088}
!9775 = !{i64 91091}
!9776 = !{i64 91097}
!9777 = !{i64 91104}
!9778 = !{i64 91112}
!9779 = !{i64 91117}
!9780 = !{i64 91147}
!9781 = !{i64 91154}
!9782 = !{i64 91157}
!9783 = !{i64 91164}
!9784 = !{i64 91166}
!9785 = !{i64 91170}
!9786 = !{i64 91172}
!9787 = !{i64 91178}
!9788 = !{i64 91182}
!9789 = !{i64 91176}
!9790 = !{i64 91184}
!9791 = !{i64 91191}
!9792 = !{i64 91214}
!9793 = !{i64 91221}
!9794 = !{i64 91223}
!9795 = !{i64 91230}
!9796 = !{i64 91237}
!9797 = !{i64 91239}
!9798 = !{i64 91243}
!9799 = !{i64 91251}
!9800 = !{i64 91256}
!9801 = !{i64 91263}
!9802 = !{i64 91267}
!9803 = !{i64 91271}
!9804 = !{i64 91274}
!9805 = !{i64 91277}
!9806 = !{i64 91281}
!9807 = !{i64 91285}
!9808 = !{i64 91289}
!9809 = !{i64 91293}
!9810 = !{i64 91297}
!9811 = !{i64 91301}
!9812 = !{i64 91308}
!9813 = !{i64 91312}
!9814 = !{i64 91316}
!9815 = !{i64 91320}
!9816 = !{i64 91323}
!9817 = !{i64 91325}
!9818 = !{i64 91328}
!9819 = !{i64 91336}
!9820 = !{i64 91357}
!9821 = !{i64 91365}
!9822 = !{i64 91391}
!9823 = !{i64 91406}
!9824 = !{i64 91411}
!9825 = !{i64 91416}
!9826 = !{i64 91420}
!9827 = !{i64 91422}
!9828 = !{i64 91426}
!9829 = !{i64 91430}
!9830 = !{i64 91437}
!9831 = !{i64 91442}
!9832 = !{i64 91458}
!9833 = !{i64 91459}
!9834 = !{i64 91486}
!9835 = !{i64 91505}
!9836 = !{i64 91513}
!9837 = !{i64 91529}
!9838 = !{i64 91516}
!9839 = !{i64 91539}
!9840 = !{i64 91547}
!9841 = !{i64 91550}
!9842 = !{i64 91552}
!9843 = !{i64 91556}
!9844 = !{i64 91591}
!9845 = !{i64 91596}
!9846 = !{i64 91600}
!9847 = !{i64 91604}
!9848 = !{i64 91648}
!9849 = !{i64 91652}
!9850 = !{i64 91657}
!9851 = !{i64 91665}
!9852 = !{i64 91668}
!9853 = !{i64 91671}
!9854 = !{i64 91676}
!9855 = !{i64 91680}
!9856 = !{i64 91683}
!9857 = !{i64 91688}
!9858 = !{i64 91692}
!9859 = !{i64 91695}
!9860 = !{i64 91697}
!9861 = !{i64 91702}
!9862 = !{i64 91706}
!9863 = !{i64 91710}
!9864 = !{i64 91713}
!9865 = !{i64 91716}
!9866 = !{i64 91721}
!9867 = !{i64 91724}
!9868 = !{i64 91729}
!9869 = !{i64 91733}
!9870 = !{i64 91736}
!9871 = !{i64 91739}
!9872 = !{i64 91744}
!9873 = !{i64 91748}
!9874 = !{i64 91752}
!9875 = !{i64 91755}
!9876 = !{i64 91758}
!9877 = !{i64 91763}
!9878 = !{i64 91766}
!9879 = !{i64 91771}
!9880 = !{i64 91775}
!9881 = !{i64 91778}
!9882 = !{i64 91781}
!9883 = !{i64 91786}
!9884 = !{i64 91790}
!9885 = !{i64 91794}
!9886 = !{i64 91797}
!9887 = !{i64 91800}
!9888 = !{i64 91805}
!9889 = !{i64 91808}
!9890 = !{i64 91813}
!9891 = !{i64 91817}
!9892 = !{i64 91820}
!9893 = !{i64 91823}
!9894 = !{i64 91829}
!9895 = !{i64 91838}
!9896 = !{i64 91863}
!9897 = !{i64 91842}
!9898 = !{i64 91845}
!9899 = !{i64 91849}
!9900 = !{i64 91856}
!9901 = !{i64 91870}
!9902 = !{i64 91876}
!9903 = !{i64 91881}
!9904 = !{i64 91886}
!9905 = !{i64 91894}
!9906 = !{i64 91906}
!9907 = !{i64 91913}
!9908 = !{i64 91919}
!9909 = !{i64 91925}
!9910 = !{i64 91932}
!9911 = !{i64 91941}
!9912 = !{i64 91943}
!9913 = !{i64 91945}
!9914 = !{i64 91948}
!9915 = !{i64 91951}
!9916 = !{i64 91954}
!9917 = !{i64 91957}
!9918 = !{i64 91960}
!9919 = !{i64 91963}
!9920 = !{i64 91967}
!9921 = !{i64 91970}
!9922 = !{i64 91976}
!9923 = !{i64 91981}
!9924 = !{i64 91986}
!9925 = !{i64 91990}
!9926 = !{i64 91994}
!9927 = !{i64 91997}
!9928 = !{i64 92000}
!9929 = !{i64 92005}
!9930 = !{i64 92008}
!9931 = !{i64 92013}
!9932 = !{i64 92017}
!9933 = !{i64 92020}
!9934 = !{i64 92023}
!9935 = !{i64 92028}
!9936 = !{i64 92032}
!9937 = !{i64 92036}
!9938 = !{i64 92039}
!9939 = !{i64 92042}
!9940 = !{i64 92047}
!9941 = !{i64 92050}
!9942 = !{i64 92055}
!9943 = !{i64 92059}
!9944 = !{i64 92062}
!9945 = !{i64 92065}
!9946 = !{i64 92071}
!9947 = !{i64 92089}
!9948 = !{i64 92104}
!9949 = !{i64 92082}
!9950 = !{i64 92085}
!9951 = !{i64 92097}
!9952 = !{i64 92111}
!9953 = !{i64 92117}
!9954 = !{i64 92122}
!9955 = !{i64 92127}
!9956 = !{i64 92135}
!9957 = !{i64 92147}
!9958 = !{i64 92154}
!9959 = !{i64 92160}
!9960 = !{i64 92166}
!9961 = !{i64 92173}
!9962 = !{i64 92182}
!9963 = !{i64 92184}
!9964 = !{i64 92186}
!9965 = !{i64 92189}
!9966 = !{i64 92192}
!9967 = !{i64 92195}
!9968 = !{i64 92198}
!9969 = !{i64 92201}
!9970 = !{i64 92204}
!9971 = !{i64 92208}
!9972 = !{i64 92212}
!9973 = !{i64 92219}
!9974 = !{i64 92224}
!9975 = !{i64 92227}
!9976 = !{i64 92230}
!9977 = !{i64 92233}
!9978 = !{i64 92236}
!9979 = !{i64 92241}
!9980 = !{i64 92246}
!9981 = !{i64 92250}
!9982 = !{i64 92254}
!9983 = !{i64 92257}
!9984 = !{i64 92260}
!9985 = !{i64 92265}
!9986 = !{i64 92268}
!9987 = !{i64 92273}
!9988 = !{i64 92277}
!9989 = !{i64 92280}
!9990 = !{i64 92283}
!9991 = !{i64 92288}
!9992 = !{i64 92292}
!9993 = !{i64 92296}
!9994 = !{i64 92299}
!9995 = !{i64 92302}
!9996 = !{i64 92307}
!9997 = !{i64 92310}
!9998 = !{i64 92314}
!9999 = !{i64 92317}
!10000 = !{i64 92319}
!10001 = !{i64 92344}
!10002 = !{i64 92347}
!10003 = !{i64 92351}
!10004 = !{i64 92358}
!10005 = !{i64 92365}
!10006 = !{i64 92373}
!10007 = !{i64 92380}
!10008 = !{i64 92386}
!10009 = !{i64 92390}
!10010 = !{i64 92393}
!10011 = !{i64 92402}
!10012 = !{i64 92408}
!10013 = !{i64 92416}
!10014 = !{i64 92424}
!10015 = !{i64 92431}
!10016 = !{i64 92434}
!10017 = !{i64 92437}
!10018 = !{i64 92444}
!10019 = !{i64 92450}
!10020 = !{i64 92452}
!10021 = !{i64 92454}
!10022 = !{i64 92457}
!10023 = !{i64 92460}
!10024 = !{i64 92463}
!10025 = !{i64 92466}
!10026 = !{i64 92469}
!10027 = !{i64 92480}
!10028 = !{i64 92553}
!10029 = !{i64 92559}
!10030 = !{i64 92561}
!10031 = !{i64 92563}
!10032 = !{i64 92569}
!10033 = !{i64 92572}
!10034 = !{i64 92574}
!10035 = !{i64 92577}
!10036 = !{i64 92580}
!10037 = !{i64 92583}
!10038 = !{i64 92586}
!10039 = !{i64 92589}
!10040 = !{i64 92592}
!10041 = !{i64 92595}
!10042 = !{i64 92607}
!10043 = !{i64 92614}
!10044 = !{i64 92625}
!10045 = !{i64 92630}
!10046 = !{i64 92637}
!10047 = !{i64 92639}
!10048 = !{i64 92672}
!10049 = !{i64 92694}
!10050 = !{i64 92716}
!10051 = !{i64 92641}
!10052 = !{i64 92646}
!10053 = !{i64 92649}
!10054 = !{i64 92653}
!10055 = !{i64 92656}
!10056 = !{i64 92659}
!10057 = !{i64 92663}
!10058 = !{i64 92666}
!10059 = !{i64 92669}
!10060 = !{i64 92677}
!10061 = !{i64 92680}
!10062 = !{i64 92685}
!10063 = !{i64 92688}
!10064 = !{i64 92691}
!10065 = !{i64 92699}
!10066 = !{i64 92702}
!10067 = !{i64 92707}
!10068 = !{i64 92710}
!10069 = !{i64 92713}
!10070 = !{i64 92721}
!10071 = !{i64 92724}
!10072 = !{i64 92729}
!10073 = !{i64 92732}
!10074 = !{i64 92735}
!10075 = !{i64 92738}
!10076 = !{i64 92741}
!10077 = !{i64 92746}
!10078 = !{i64 92769}
!10079 = !{i64 92773}
!10080 = !{i64 92780}
!10081 = !{i64 92790}
!10082 = !{i64 92793}
!10083 = !{i64 92795}
!10084 = !{i64 92803}
!10085 = !{i64 92810}
!10086 = !{i64 92819}
!10087 = !{i64 92825}
!10088 = !{i64 92833}
!10089 = !{i64 92840}
!10090 = !{i64 92843}
!10091 = !{i64 92853}
!10092 = !{i64 92860}
!10093 = !{i64 92864}
!10094 = !{i64 92872}
!10095 = !{i64 92882}
!10096 = !{i64 92885}
!10097 = !{i64 92887}
!10098 = !{i64 92895}
!10099 = !{i64 92902}
!10100 = !{i64 92911}
!10101 = !{i64 92917}
!10102 = !{i64 92925}
!10103 = !{i64 92932}
!10104 = !{i64 92935}
!10105 = !{i64 92945}
!10106 = !{i64 92952}
!10107 = !{i64 92957}
!10108 = !{i64 92965}
!10109 = !{i64 92975}
!10110 = !{i64 92978}
!10111 = !{i64 92980}
!10112 = !{i64 92988}
!10113 = !{i64 92995}
!10114 = !{i64 93004}
!10115 = !{i64 93010}
!10116 = !{i64 93018}
!10117 = !{i64 93025}
!10118 = !{i64 93028}
!10119 = !{i64 93038}
!10120 = !{i64 93045}
!10121 = !{i64 93100}
!10122 = !{i64 93109}
!10123 = !{i64 93111}
!10124 = !{i64 93118}
!10125 = !{i64 93121}
!10126 = !{i64 93131}
!10127 = !{i64 93138}
!10128 = !{i64 93156}
!10129 = !{i64 93157}
!10130 = !{i64 93177}
!10131 = !{i64 93185}
!10132 = !{i64 93196}
!10133 = !{i64 93207}
!10134 = !{i64 93211}
!10135 = !{i64 93222}
!10136 = !{i64 93226}
!10137 = !{i64 93230}
!10138 = !{i64 93243}
!10139 = !{i64 93246}
!10140 = !{i64 93259}
!10141 = !{i64 93263}
!10142 = !{i64 93233}
!10143 = !{i64 93249}
!10144 = !{i64 93266}
!10145 = !{i64 93269}
!10146 = !{i64 93280}
!10147 = !{i64 93291}
!10148 = !{i64 93299}
!10149 = !{i64 93303}
!10150 = !{i64 93307}
!10151 = !{i64 93311}
!10152 = !{i64 93322}
!10153 = !{i64 93325}
!10154 = !{i64 93328}
!10155 = !{i64 93338}
!10156 = !{i64 93342}
!10157 = !{i64 93345}
!10158 = !{i64 93352}
!10159 = !{i64 93355}
!10160 = !{i64 93358}
!10161 = !{i64 93361}
!10162 = !{i64 93369}
!10163 = !{i64 93373}
!10164 = !{i64 93377}
!10165 = !{i64 93385}
!10166 = !{i64 93389}
!10167 = !{i64 93393}
!10168 = !{i64 93397}
!10169 = !{i64 93404}
!10170 = !{i64 93407}
!10171 = !{i64 93410}
!10172 = !{i64 93416}
!10173 = !{i64 93420}
!10174 = !{i64 93423}
!10175 = !{i64 93429}
!10176 = !{i64 93432}
!10177 = !{i64 93435}
!10178 = !{i64 93437}
!10179 = !{i64 93445}
!10180 = !{i64 93453}
!10181 = !{i64 93461}
!10182 = !{i64 93469}
!10183 = !{i64 93473}
!10184 = !{i64 93480}
!10185 = !{i64 93484}
!10186 = !{i64 93487}
!10187 = !{i64 93493}
!10188 = !{i64 93497}
!10189 = !{i64 93500}
!10190 = !{i64 93506}
!10191 = !{i64 93510}
!10192 = !{i64 93513}
!10193 = !{i64 93515}
!10194 = !{i64 93522}
!10195 = !{i64 93525}
!10196 = !{i64 93528}
!10197 = !{i64 93536}
!10198 = !{i64 93542}
!10199 = !{i64 93545}
!10200 = !{i64 93549}
!10201 = !{i64 93589}
!10202 = !{i64 93613}
!10203 = !{i64 93624}
!10204 = !{i64 93569}
!10205 = !{i64 93621}
!10206 = !{i64 93572}
!10207 = !{i64 93575}
!10208 = !{i64 93579}
!10209 = !{i64 93585}
!10210 = !{i64 93582}
!10211 = !{i64 93597}
!10212 = !{i64 93639}
!10213 = !{i64 93643}
!10214 = !{i64 93650}
!10215 = !{i64 93646}
!10216 = !{i64 93654}
!10217 = !{i64 93662}
!10218 = !{i64 93675}
!10219 = !{i64 93686}
!10220 = !{i64 93694}
!10221 = !{i64 93697}
!10222 = !{i64 93701}
!10223 = !{i64 93711}
!10224 = !{i64 93715}
!10225 = !{i64 93723}
!10226 = !{i64 93736}
!10227 = !{i64 93750}
!10228 = !{i64 93758}
!10229 = !{i64 93761}
!10230 = !{i64 93766}
!10231 = !{i64 93763}
!10232 = !{i64 93770}
!10233 = !{i64 93778}
!10234 = !{i64 93789}
!10235 = !{i64 93806}
!10236 = !{i64 93814}
!10237 = !{i64 93818}
!10238 = !{i64 93821}
!10239 = !{i64 93850}
!10240 = !{i64 93853}
!10241 = !{i64 93857}
!10242 = !{i64 93868}
!10243 = !{i64 93871}
!10244 = !{i64 93874}
!10245 = !{i64 93888}
!10246 = !{i64 93896}
!10247 = !{i64 93902}
!10248 = !{i64 93905}
!10249 = !{i64 93914}
!10250 = !{i64 93916}
!10251 = !{i64 93928}
!10252 = !{i64 93936}
!10253 = !{i64 93944}
!10254 = !{i64 93953}
!10255 = !{i64 93964}
!10256 = !{i64 93979}
!10257 = !{i64 93987}
!10258 = !{i64 93993}
!10259 = !{i64 93997}
!10260 = !{i64 94006}
!10261 = !{i64 94008}
!10262 = !{i64 94020}
!10263 = !{i64 94028}
!10264 = !{i64 94036}
!10265 = !{i64 94042}
!10266 = !{i64 94053}
!10267 = !{i64 94067}
!10268 = !{i64 94075}
!10269 = !{i64 94081}
!10270 = !{i64 94085}
!10271 = !{i64 94094}
!10272 = !{i64 94096}
!10273 = !{i64 94108}
!10274 = !{i64 94116}
!10275 = !{i64 94123}
!10276 = !{i64 94131}
!10277 = !{i64 94139}
!10278 = !{i64 94152}
!10279 = !{i64 94160}
!10280 = !{i64 94180}
!10281 = !{i64 94226}
!10282 = !{i64 94231}
!10283 = !{i64 94236}
!10284 = !{i64 94242}
!10285 = !{i64 94245}
!10286 = !{i64 94248}
!10287 = !{i64 94251}
!10288 = !{i64 94256}
!10289 = !{i64 94259}
!10290 = !{i64 94266}
!10291 = !{i64 94272}
!10292 = !{i64 94275}
!10293 = !{i64 94282}
!10294 = !{i64 94291}
!10295 = !{i64 94294}
!10296 = !{i64 94297}
!10297 = !{i64 94300}
!10298 = !{i64 94307}
!10299 = !{i64 94313}
!10300 = !{i64 94316}
!10301 = !{i64 94323}
!10302 = !{i64 94328}
!10303 = !{i64 94331}
!10304 = !{i64 94335}
!10305 = !{i64 94341}
!10306 = !{i64 94344}
!10307 = !{i64 94346}
!10308 = !{i64 94349}
!10309 = !{i64 94353}
!10310 = !{i64 94357}
!10311 = !{i64 94364}
!10312 = !{i64 94368}
!10313 = !{i64 94371}
!10314 = !{i64 94375}
!10315 = !{i64 94382}
!10316 = !{i64 94387}
!10317 = !{i64 94390}
!10318 = !{i64 94401}
!10319 = !{i64 94405}
!10320 = !{i64 94407}
!10321 = !{i64 94409}
!10322 = !{i64 94412}
!10323 = !{i64 94416}
!10324 = !{i64 94419}
!10325 = !{i64 94423}
!10326 = !{i64 94442}
!10327 = !{i64 94443}
!10328 = !{i64 94463}
!10329 = !{i64 94471}
!10330 = !{i64 94482}
!10331 = !{i64 94493}
!10332 = !{i64 94497}
!10333 = !{i64 94508}
!10334 = !{i64 94512}
!10335 = !{i64 94515}
!10336 = !{i64 94528}
!10337 = !{i64 94532}
!10338 = !{i64 94538}
!10339 = !{i64 94541}
!10340 = !{i64 94518}
!10341 = !{i64 94535}
!10342 = !{i64 94544}
!10343 = !{i64 94547}
!10344 = !{i64 94558}
!10345 = !{i64 94569}
!10346 = !{i64 94577}
!10347 = !{i64 94581}
!10348 = !{i64 94585}
!10349 = !{i64 94588}
!10350 = !{i64 94591}
!10351 = !{i64 94595}
!10352 = !{i64 94598}
!10353 = !{i64 94607}
!10354 = !{i64 94611}
!10355 = !{i64 94614}
!10356 = !{i64 94620}
!10357 = !{i64 94624}
!10358 = !{i64 94627}
!10359 = !{i64 94629}
!10360 = !{i64 94637}
!10361 = !{i64 94641}
!10362 = !{i64 94645}
!10363 = !{i64 94653}
!10364 = !{i64 94657}
!10365 = !{i64 94661}
!10366 = !{i64 94665}
!10367 = !{i64 94668}
!10368 = !{i64 94671}
!10369 = !{i64 94674}
!10370 = !{i64 94680}
!10371 = !{i64 94684}
!10372 = !{i64 94687}
!10373 = !{i64 94693}
!10374 = !{i64 94697}
!10375 = !{i64 94700}
!10376 = !{i64 94702}
!10377 = !{i64 94710}
!10378 = !{i64 94718}
!10379 = !{i64 94726}
!10380 = !{i64 94734}
!10381 = !{i64 94738}
!10382 = !{i64 94746}
!10383 = !{i64 94750}
!10384 = !{i64 94753}
!10385 = !{i64 94760}
!10386 = !{i64 94764}
!10387 = !{i64 94767}
!10388 = !{i64 94774}
!10389 = !{i64 94778}
!10390 = !{i64 94781}
!10391 = !{i64 94784}
!10392 = !{i64 94788}
!10393 = !{i64 94794}
!10394 = !{i64 94800}
!10395 = !{i64 94805}
!10396 = !{i64 94814}
!10397 = !{i64 94817}
!10398 = !{i64 94821}
!10399 = !{i64 94863}
!10400 = !{i64 94871}
!10401 = !{i64 94891}
!10402 = !{i64 94902}
!10403 = !{i64 94843}
!10404 = !{i64 94899}
!10405 = !{i64 94879}
!10406 = !{i64 94917}
!10407 = !{i64 94927}
!10408 = !{i64 94924}
!10409 = !{i64 94935}
!10410 = !{i64 94943}
!10411 = !{i64 94957}
!10412 = !{i64 94968}
!10413 = !{i64 94989}
!10414 = !{i64 94986}
!10415 = !{i64 94997}
!10416 = !{i64 95005}
!10417 = !{i64 95022}
!10418 = !{i64 95036}
!10419 = !{i64 95053}
!10420 = !{i64 95049}
!10421 = !{i64 95061}
!10422 = !{i64 95069}
!10423 = !{i64 95078}
!10424 = !{i64 95095}
!10425 = !{i64 95103}
!10426 = !{i64 95107}
!10427 = !{i64 95110}
!10428 = !{i64 95149}
!10429 = !{i64 95160}
!10430 = !{i64 95163}
!10431 = !{i64 95166}
!10432 = !{i64 95183}
!10433 = !{i64 95191}
!10434 = !{i64 95197}
!10435 = !{i64 95208}
!10436 = !{i64 95216}
!10437 = !{i64 95229}
!10438 = !{i64 95237}
!10439 = !{i64 95244}
!10440 = !{i64 95248}
!10441 = !{i64 95264}
!10442 = !{i64 95272}
!10443 = !{i64 95277}
!10444 = !{i64 95291}
!10445 = !{i64 95299}
!10446 = !{i64 95318}
!10447 = !{i64 95326}
!10448 = !{i64 95336}
!10449 = !{i64 95340}
!10450 = !{i64 95359}
!10451 = !{i64 95367}
!10452 = !{i64 95374}
!10453 = !{i64 95388}
!10454 = !{i64 95396}
!10455 = !{i64 95412}
!10456 = !{i64 95420}
!10457 = !{i64 95450}
!10458 = !{i64 95458}
!10459 = !{i64 95514}
!10460 = !{i64 95517}
!10461 = !{i64 95519}
!10462 = !{i64 95522}
!10463 = !{i64 95526}
!10464 = !{i64 95530}
!10465 = !{i64 95536}
!10466 = !{i64 95539}
!10467 = !{i64 95543}
!10468 = !{i64 95546}
!10469 = !{i64 95553}
!10470 = !{i64 95557}
!10471 = !{i64 95560}
!10472 = !{i64 95567}
!10473 = !{i64 95576}
!10474 = !{i64 95582}
!10475 = !{i64 95585}
!10476 = !{i64 95592}
!10477 = !{i64 95598}
!10478 = !{i64 95601}
!10479 = !{i64 95608}
!10480 = !{i64 95613}
!10481 = !{i64 95616}
!10482 = !{i64 95620}
!10483 = !{i64 95626}
!10484 = !{i64 95632}
!10485 = !{i64 95635}
!10486 = !{i64 95639}
!10487 = !{i64 95644}
!10488 = !{i64 95651}
!10489 = !{i64 95657}
!10490 = !{i64 95660}
!10491 = !{i64 95664}
!10492 = !{i64 95670}
!10493 = !{i64 95676}
!10494 = !{i64 95683}
!10495 = !{i64 95687}
!10496 = !{i64 95689}
!10497 = !{i64 95699}
!10498 = !{i64 95701}
!10499 = !{i64 95706}
!10500 = !{i64 95710}
!10501 = !{i64 95714}
!10502 = !{i64 95734}
!10503 = !{i64 95735}
!10504 = !{i64 95766}
!10505 = !{i64 95785}
!10506 = !{i64 95800}
!10507 = !{i64 95805}
!10508 = !{i64 95808}
!10509 = !{i64 95803}
!10510 = !{i64 95815}
!10511 = !{i64 95823}
!10512 = !{i64 95825}
!10513 = !{i64 95841}
!10514 = !{i64 95843}
!10515 = !{i64 95862}
!10516 = !{i64 95904}
!10517 = !{i64 95935}
!10518 = !{i64 95907}
!10519 = !{i64 95910}
!10520 = !{i64 95914}
!10521 = !{i64 95917}
!10522 = !{i64 95924}
!10523 = !{i64 95963}
!10524 = !{i64 95968}
!10525 = !{i64 95975}
!10526 = !{i64 95982}
!10527 = !{i64 95993}
!10528 = !{i64 95998}
!10529 = !{i64 96007}
!10530 = !{i64 96014}
!10531 = !{i64 96066}
!10532 = !{i64 96069}
!10533 = !{i64 96076}
!10534 = !{i64 96087}
!10535 = !{i64 96098}
!10536 = !{i64 96115}
!10537 = !{i64 96127}
!10538 = !{i64 96134}
!10539 = !{i64 96145}
!10540 = !{i64 96153}
!10541 = !{i64 96208}
!10542 = !{i64 96212}
!10543 = !{i64 96234}
!10544 = !{i64 96251}
!10545 = !{i64 96261}
!10546 = !{i64 96264}
!10547 = !{i64 96268}
!10548 = !{i64 96271}
!10549 = !{i64 96273}
!10550 = !{i64 96280}
!10551 = !{i64 96285}
!10552 = !{i64 96288}
!10553 = !{i64 96303}
!10554 = !{i64 96306}
!10555 = !{i64 96314}
!10556 = !{i64 96318}
!10557 = !{i64 96322}
!10558 = !{i64 96331}
!10559 = !{i64 96339}
!10560 = !{i64 96341}
!10561 = !{i64 96346}
!10562 = !{i64 96358}
!10563 = !{i64 96361}
!10564 = !{i64 96363}
!10565 = !{i64 96367}
!10566 = !{i64 96374}
!10567 = !{i64 96378}
!10568 = !{i64 96380}
!10569 = !{i64 96385}
!10570 = !{i64 96387}
!10571 = !{i64 96422}
!10572 = !{i64 96437}
!10573 = !{i64 96454}
!10574 = !{i64 96498}
!10575 = !{i64 96529}
!10576 = !{i64 96533}
!10577 = !{i64 96536}
!10578 = !{i64 96538}
!10579 = !{i64 96543}
!10580 = !{i64 96546}
!10581 = !{i64 96550}
!10582 = !{i64 96553}
!10583 = !{i64 96556}
!10584 = !{i64 96563}
!10585 = !{i64 96568}
!10586 = !{i64 96572}
!10587 = !{i64 96578}
!10588 = !{i64 96582}
!10589 = !{i64 96586}
!10590 = !{i64 96591}
!10591 = !{i64 96600}
!10592 = !{i64 96603}
!10593 = !{i64 96607}
!10594 = !{i64 96610}
!10595 = !{i64 96612}
!10596 = !{i64 96619}
!10597 = !{i64 96624}
!10598 = !{i64 96627}
!10599 = !{i64 96646}
!10600 = !{i64 96649}
!10601 = !{i64 96656}
!10602 = !{i64 96660}
!10603 = !{i64 96664}
!10604 = !{i64 96673}
!10605 = !{i64 96681}
!10606 = !{i64 96683}
!10607 = !{i64 96688}
!10608 = !{i64 96700}
!10609 = !{i64 96703}
!10610 = !{i64 96705}
!10611 = !{i64 96707}
!10612 = !{i64 96714}
!10613 = !{i64 96717}
!10614 = !{i64 96720}
!10615 = !{i64 96722}
!10616 = !{i64 96725}
!10617 = !{i64 96730}
!10618 = !{i64 96710}
!10619 = !{i64 96732}
!10620 = !{i64 96736}
!10621 = !{i64 96445}
!10622 = !{i64 96741}
!10623 = !{i64 96744}
!10624 = !{i64 96750}
!10625 = !{i64 96760}
!10626 = !{i64 96765}
!10627 = !{i64 96768}
!10628 = !{i64 96774}
!10629 = !{i64 96784}
!10630 = !{i64 96789}
!10631 = !{i64 96792}
!10632 = !{i64 96796}
!10633 = !{i64 96809}
!10634 = !{i64 96816}
!10635 = !{i64 96818}
!10636 = !{i64 96858}
!10637 = !{i64 96868}
!10638 = !{i64 96878}
!10639 = !{i64 96887}
!10640 = !{i64 96890}
!10641 = !{i64 96899}
!10642 = !{i64 96905}
!10643 = !{i64 96913}
!10644 = !{i64 96918}
!10645 = !{i64 96925}
!10646 = !{i64 96934}
!10647 = !{i64 96942}
!10648 = !{i64 96953}
!10649 = !{i64 97018}
!10650 = !{i64 97030}
!10651 = !{i64 97036}
!10652 = !{i64 97038}
!10653 = !{i64 97044}
!10654 = !{i64 97046}
!10655 = !{i64 97067}
!10656 = !{i64 97083}
!10657 = !{i64 97089}
!10658 = !{i64 97096}
!10659 = !{i64 97102}
!10660 = !{i64 97103}
!10661 = !{i64 97105}
!10662 = !{i64 97111}
!10663 = !{i64 97114}
!10664 = !{i64 97120}
!10665 = !{i64 97128}
!10666 = !{i64 97133}
!10667 = !{i64 97140}
!10668 = !{i64 97149}
!10669 = !{i64 97155}
!10670 = !{i64 97162}
!10671 = !{i64 97167}
!10672 = !{i64 97180}
!10673 = !{i64 97193}
!10674 = !{i64 97198}
!10675 = !{i64 97209}
!10676 = !{i64 97214}
!10677 = !{i64 97218}
!10678 = !{i64 97245}
!10679 = !{i64 97251}
!10680 = !{i64 97256}
!10681 = !{i64 97262}
!10682 = !{i64 97268}
!10683 = !{i64 97276}
!10684 = !{i64 97282}
!10685 = !{i64 97289}
!10686 = !{i64 97294}
!10687 = !{i64 97308}
!10688 = !{i64 97316}
!10689 = !{i64 97327}
!10690 = !{i64 97332}
!10691 = !{i64 97341}
!10692 = !{i64 97335}
!10693 = !{i64 97348}
!10694 = !{i64 97350}
!10695 = !{i64 97360}
!10696 = !{i64 97364}
!10697 = !{i64 97370}
!10698 = !{i64 97374}
!10699 = !{i64 97377}
!10700 = !{i64 97379}
!10701 = !{i64 97391}
!10702 = !{i64 97393}
!10703 = !{i64 97399}
!10704 = !{i64 97403}
!10705 = !{i64 97409}
!10706 = !{i64 97412}
!10707 = !{i64 97414}
!10708 = !{i64 97424}
!10709 = !{i64 97438}
!10710 = !{i64 97443}
!10711 = !{i64 97448}
!10712 = !{i64 97461}
!10713 = !{i64 97464}
!10714 = !{i64 97466}
!10715 = !{i64 97474}
!10716 = !{i64 97480}
!10717 = !{i64 97488}
!10718 = !{i64 97506}
!10719 = !{i64 97520}
!10720 = !{i64 97521}
!10721 = !{i64 97526}
!10722 = !{i64 97533}
!10723 = !{i64 97546}
!10724 = !{i64 97549}
!10725 = !{i64 97551}
!10726 = !{i64 97553}
!10727 = !{i64 97560}
!10728 = !{i64 97565}
!10729 = !{i64 97584}
!10730 = !{i64 97591}
!10731 = !{i64 97614}
!10732 = !{i64 97644}
!10733 = !{i64 97648}
!10734 = !{i64 97651}
!10735 = !{i64 97656}
!10736 = !{i64 97659}
!10737 = !{i64 97664}
!10738 = !{i64 97691}
!10739 = !{i64 97697}
!10740 = !{i64 97705}
!10741 = !{i64 97710}
!10742 = !{i64 97715}
!10743 = !{i64 97718}
!10744 = !{i64 97725}
!10745 = !{i64 97734}
!10746 = !{i64 97737}
!10747 = !{i64 97744}
!10748 = !{i64 97750}
!10749 = !{i64 97753}
!10750 = !{i64 97760}
!10751 = !{i64 97767}
!10752 = !{i64 97775}
!10753 = !{i64 97777}
!10754 = !{i64 97781}
!10755 = !{i64 97782}
!10756 = !{i64 97786}
!10757 = !{i64 97791}
!10758 = !{i64 97801}
!10759 = !{i64 97803}
!10760 = !{i64 97806}
!10761 = !{i64 97810}
!10762 = !{i64 97813}
!10763 = !{i64 97815}
!10764 = !{i64 97818}
!10765 = !{i64 97822}
!10766 = !{i64 97834}
!10767 = !{i64 97859}
!10768 = !{i64 97875}
!10769 = !{i64 97879}
!10770 = !{i64 97884}
!10771 = !{i64 97917}
!10772 = !{i64 97929}
!10773 = !{i64 97954}
!10774 = !{i64 97990}
!10775 = !{i64 97992}
!10776 = !{i64 97999}
!10777 = !{i64 98037}
!10778 = !{i64 98042}
!10779 = !{i64 98050}
!10780 = !{i64 98052}
!10781 = !{i64 98056}
!10782 = !{i64 98065}
!10783 = !{i64 98068}
!10784 = !{i64 98071}
!10785 = !{i64 98074}
!10786 = !{i64 98077}
!10787 = !{i64 98080}
!10788 = !{i64 98083}
!10789 = !{i64 98086}
!10790 = !{i64 98089}
!10791 = !{i64 98092}
!10792 = !{i64 98095}
!10793 = !{i64 98098}
!10794 = !{i64 98101}
!10795 = !{i64 98105}
!10796 = !{i64 98107}
!10797 = !{i64 98110}
!10798 = !{i64 98114}
!10799 = !{i64 98117}
!10800 = !{i64 98123}
!10801 = !{i64 98126}
!10802 = !{i64 98129}
!10803 = !{i64 98132}
!10804 = !{i64 98135}
!10805 = !{i64 98138}
!10806 = !{i64 98141}
!10807 = !{i64 98144}
!10808 = !{i64 98148}
!10809 = !{i64 98153}
!10810 = !{i64 98161}
!10811 = !{i64 98163}
!10812 = !{i64 98167}
!10813 = !{i64 98176}
!10814 = !{i64 98179}
!10815 = !{i64 98182}
!10816 = !{i64 98185}
!10817 = !{i64 98188}
!10818 = !{i64 98191}
!10819 = !{i64 98194}
!10820 = !{i64 98197}
!10821 = !{i64 98201}
!10822 = !{i64 98203}
!10823 = !{i64 98208}
!10824 = !{i64 98215}
!10825 = !{i64 98219}
!10826 = !{i64 98222}
!10827 = !{i64 98226}
!10828 = !{i64 98228}
!10829 = !{i64 98231}
!10830 = !{i64 98235}
!10831 = !{i64 98238}
!10832 = !{i64 98240}
!10833 = !{i64 98243}
!10834 = !{i64 98246}
!10835 = !{i64 98249}
!10836 = !{i64 98252}
!10837 = !{i64 98255}
!10838 = !{i64 98260}
!10839 = !{i64 98263}
!10840 = !{i64 98266}
!10841 = !{i64 98269}
!10842 = !{i64 98312}
!10843 = !{i64 98351}
!10844 = !{i64 98373}
!10845 = !{i64 98377}
!10846 = !{i64 98396}
!10847 = !{i64 98420}
!10848 = !{i64 98425}
!10849 = !{i64 98442}
!10850 = !{i64 98456}
!10851 = !{i64 98462}
!10852 = !{i64 98468}
!10853 = !{i64 98471}
!10854 = !{i64 98473}
!10855 = !{i64 98475}
!10856 = !{i64 98478}
!10857 = !{i64 98481}
!10858 = !{i64 98483}
!10859 = !{i64 98486}
!10860 = !{i64 98489}
!10861 = !{i64 98491}
!10862 = !{i64 98498}
!10863 = !{i64 98500}
!10864 = !{i64 98509}
!10865 = !{i64 98510}
!10866 = !{i64 98521}
!10867 = !{i64 98529}
!10868 = !{i64 98536}
!10869 = !{i64 98563}
!10870 = !{i64 98581}
!10871 = !{i64 98585}
!10872 = !{i64 98589}
!10873 = !{i64 98592}
!10874 = !{i64 98594}
!10875 = !{i64 98601}
!10876 = !{i64 98603}
!10877 = !{i64 98620}
!10878 = !{i64 98627}
!10879 = !{i64 98511}
!10880 = !{i64 98633}
!10881 = !{i64 98640}
!10882 = !{i64 98643}
!10883 = !{i64 98651}
!10884 = !{i64 98661}
!10885 = !{i64 98669}
!10886 = !{i64 98671}
!10887 = !{i64 98674}
!10888 = !{i64 98678}
!10889 = !{i64 98681}
!10890 = !{i64 98645}
!10891 = !{i64 98683}
!10892 = !{i64 98686}
!10893 = !{i64 98699}
!10894 = !{i64 98703}
!10895 = !{i64 98710}
!10896 = !{i64 98714}
!10897 = !{i64 98717}
!10898 = !{i64 98728}
!10899 = !{i64 98740}
!10900 = !{i64 98742}
!10901 = !{i64 98745}
!10902 = !{i64 98754}
!10903 = !{i64 98758}
!10904 = !{i64 98762}
!10905 = !{i64 98765}
!10906 = !{i64 98790}
!10907 = !{i64 98767}
!10908 = !{i64 98796}
!10909 = !{i64 98808}
!10910 = !{i64 98805}
!10911 = !{i64 98812}
!10912 = !{i64 98817}
!10913 = !{i64 98831}
!10914 = !{i64 98837}
!10915 = !{i64 98849}
!10916 = !{i64 98851}
!10917 = !{i64 98854}
!10918 = !{i64 98857}
!10919 = !{i64 98859}
!10920 = !{i64 98865}
!10921 = !{i64 98867}
!10922 = !{i64 98875}
!10923 = !{i64 98883}
!10924 = !{i64 98888}
!10925 = !{i64 98896}
!10926 = !{i64 98900}
!10927 = !{i64 98904}
!10928 = !{i64 98908}
!10929 = !{i64 98915}
!10930 = !{i64 98923}
!10931 = !{i64 98931}
!10932 = !{i64 98939}
!10933 = !{i64 98947}
!10934 = !{i64 98961}
!10935 = !{i64 98969}
!10936 = !{i64 98986}
!10937 = !{i64 98991}
!10938 = !{i64 99008}
!10939 = !{i64 99013}
!10940 = !{i64 99055}
!10941 = !{i64 99065}
!10942 = !{i64 99071}
!10943 = !{i64 99075}
!10944 = !{i64 99088}
!10945 = !{i64 99089}
!10946 = !{i64 99092}
!10947 = !{i64 99098}
!10948 = !{i64 99104}
!10949 = !{i64 99108}
!10950 = !{i64 99121}
!10951 = !{i64 99122}
!10952 = !{i64 99125}
!10953 = !{i64 99131}
!10954 = !{i64 99137}
!10955 = !{i64 99141}
!10956 = !{i64 99154}
!10957 = !{i64 99231}
!10958 = !{i64 99273}
!10959 = !{i64 99275}
!10960 = !{i64 99277}
!10961 = !{i64 99279}
!10962 = !{i64 99281}
!10963 = !{i64 99283}
!10964 = !{i64 99291}
!10965 = !{i64 99298}
!10966 = !{i64 99301}
!10967 = !{i64 99303}
!10968 = !{i64 99310}
!10969 = !{i64 99314}
!10970 = !{i64 99317}
!10971 = !{i64 99320}
!10972 = !{i64 99328}
!10973 = !{i64 99334}
!10974 = !{i64 99367}
!10975 = !{i64 99384}
!10976 = !{i64 99392}
!10977 = !{i64 99402}
!10978 = !{i64 99423}
!10979 = !{i64 99487}
!10980 = !{i64 99493}
!10981 = !{i64 99495}
!10982 = !{i64 99499}
!10983 = !{i64 99509}
!10984 = !{i64 99514}
!10985 = !{i64 99520}
!10986 = !{i64 99522}
!10987 = !{i64 99528}
!10988 = !{i64 99530}
!10989 = !{i64 99534}
!10990 = !{i64 99544}
!10991 = !{i64 99549}
!10992 = !{i64 99555}
!10993 = !{i64 99557}
!10994 = !{i64 99567}
!10995 = !{i64 99569}
!10996 = !{i64 99579}
!10997 = !{i64 99584}
!10998 = !{i64 99631}
!10999 = !{i64 99639}
!11000 = !{i64 99649}
!11001 = !{i64 99670}
!11002 = !{i64 99734}
!11003 = !{i64 99740}
!11004 = !{i64 99742}
!11005 = !{i64 99746}
!11006 = !{i64 99756}
!11007 = !{i64 99761}
!11008 = !{i64 99767}
!11009 = !{i64 99769}
!11010 = !{i64 99775}
!11011 = !{i64 99777}
!11012 = !{i64 99781}
!11013 = !{i64 99791}
!11014 = !{i64 99796}
!11015 = !{i64 99802}
!11016 = !{i64 99804}
!11017 = !{i64 99814}
!11018 = !{i64 99816}
!11019 = !{i64 99826}
!11020 = !{i64 99831}
!11021 = !{i64 99878}
!11022 = !{i64 99896}
!11023 = !{i64 99904}
!11024 = !{i64 99909}
!11025 = !{i64 99915}
!11026 = !{i64 99917}
!11027 = !{i64 99924}
!11028 = !{i64 99926}
!11029 = !{i64 99941}
!11030 = !{i64 99946}
!11031 = !{i64 99962}
!11032 = !{i64 99991}
!11033 = !{i64 99996}
!11034 = !{i64 100000}
!11035 = !{i64 100004}
!11036 = !{i64 100008}
!11037 = !{i64 100012}
!11038 = !{i64 100015}
!11039 = !{i64 100019}
!11040 = !{i64 100023}
!11041 = !{i64 100056}
!11042 = !{i64 100059}
!11043 = !{i64 100063}
!11044 = !{i64 100067}
!11045 = !{i64 100071}
!11046 = !{i64 100075}
!11047 = !{i64 100079}
!11048 = !{i64 100083}
!11049 = !{i64 100087}
!11050 = !{i64 100091}
!11051 = !{i64 100095}
!11052 = !{i64 100099}
!11053 = !{i64 100103}
!11054 = !{i64 100107}
!11055 = !{i64 100111}
!11056 = !{i64 100115}
!11057 = !{i64 100119}
!11058 = !{i64 100123}
!11059 = !{i64 100127}
!11060 = !{i64 100131}
!11061 = !{i64 100135}
!11062 = !{i64 100139}
!11063 = !{i64 100142}
!11064 = !{i64 100146}
!11065 = !{i64 100150}
!11066 = !{i64 100154}
!11067 = !{i64 100158}
!11068 = !{i64 100161}
!11069 = !{i64 100165}
!11070 = !{i64 100169}
!11071 = !{i64 100173}
!11072 = !{i64 100177}
!11073 = !{i64 100201}
!11074 = !{i64 100219}
!11075 = !{i64 100246}
!11076 = !{i64 100305}
!11077 = !{i64 100309}
!11078 = !{i64 100312}
!11079 = !{i64 100316}
!11080 = !{i64 100318}
!11081 = !{i64 100321}
!11082 = !{i64 100325}
!11083 = !{i64 100327}
!11084 = !{i64 100339}
!11085 = !{i64 100343}
!11086 = !{i64 100345}
!11087 = !{i64 100353}
!11088 = !{i64 100253}
!11089 = !{i64 100293}
!11090 = !{i64 100296}
!11091 = !{i64 100299}
!11092 = !{i64 100303}
!11093 = !{i64 100355}
!11094 = !{i64 100363}
!11095 = !{i64 100282}
!11096 = !{i64 100330}
!11097 = !{i64 100335}
!11098 = !{i64 100374}
!11099 = !{i64 100379}
!11100 = !{i64 100387}
!11101 = !{i64 100399}
!11102 = !{i64 100420}
!11103 = !{i64 100422}
!11104 = !{i64 100426}
!11105 = !{i64 100438}
!11106 = !{i64 100458}
!11107 = !{i64 100463}
!11108 = !{i64 100471}
!11109 = !{i64 100476}
!11110 = !{i64 100478}
!11111 = !{i64 100480}
!11112 = !{i64 100482}
!11113 = !{i64 100484}
!11114 = !{i64 100487}
!11115 = !{i64 100523}
!11116 = !{i64 100541}
!11117 = !{i64 100563}
!11118 = !{i64 100586}
!11119 = !{i64 100590}
!11120 = !{i64 100995}
!11121 = !{i64 101013}
!11122 = !{i64 101035}
!11123 = !{i64 101058}
!11124 = !{i64 101062}
!11125 = !{i64 101463}
!11126 = !{i64 101473}
!11127 = !{i64 101478}
!11128 = !{i64 101484}
!11129 = !{i64 101487}
!11130 = !{i64 101489}
!11131 = !{i64 101494}
!11132 = !{i64 101501}
!11133 = !{i64 101509}
!11134 = !{i64 101517}
!11135 = !{i64 101530}
!11136 = !{i64 101540}
!11137 = !{i64 101548}
!11138 = !{i64 101554}
!11139 = !{i64 101557}
!11140 = !{i64 101564}
!11141 = !{i64 101572}
!11142 = !{i64 101580}
!11143 = !{i64 101588}
!11144 = !{i64 101601}
!11145 = !{i64 101611}
!11146 = !{i64 101619}
!11147 = !{i64 101623}
!11148 = !{i64 101628}
!11149 = !{i64 101632}
!11150 = !{i64 101637}
!11151 = !{i64 101644}
!11152 = !{i64 101649}
!11153 = !{i64 101656}
!11154 = !{i64 101671}
!11155 = !{i64 101677}
!11156 = !{i64 101683}
!11157 = !{i64 101685}
!11158 = !{i64 101687}
!11159 = !{i64 101689}
!11160 = !{i64 101696}
!11161 = !{i64 101699}
!11162 = !{i64 101707}
!11163 = !{i64 101724}
!11164 = !{i64 101725}
!11165 = !{i64 101753}
!11166 = !{i64 101761}
!11167 = !{i64 101765}
!11168 = !{i64 101769}
!11169 = !{i64 101784}
!11170 = !{i64 101788}
!11171 = !{i64 101791}
!11172 = !{i64 101794}
!11173 = !{i64 101796}
!11174 = !{i64 101802}
!11175 = !{i64 101808}
!11176 = !{i64 101812}
!11177 = !{i64 101817}
!11178 = !{i64 101821}
!11179 = !{i64 101825}
!11180 = !{i64 101828}
!11181 = !{i64 101835}
!11182 = !{i64 101849}
!11183 = !{i64 101856}
!11184 = !{i64 101862}
!11185 = !{i64 101873}
!11186 = !{i64 101884}
!11187 = !{i64 101895}
!11188 = !{i64 101914}
!11189 = !{i64 101918}
!11190 = !{i64 101923}
!11191 = !{i64 101926}
!11192 = !{i64 101930}
!11193 = !{i64 101936}
!11194 = !{i64 101934}
!11195 = !{i64 101943}
!11196 = !{i64 101947}
!11197 = !{i64 101951}
!11198 = !{i64 101953}
!11199 = !{i64 101959}
!11200 = !{i64 101963}
!11201 = !{i64 101969}
!11202 = !{i64 101972}
!11203 = !{i64 101983}
!11204 = !{i64 101990}
!11205 = !{i64 101996}
!11206 = !{i64 102005}
!11207 = !{i64 102014}
!11208 = !{i64 102021}
!11209 = !{i64 102023}
!11210 = !{i64 102027}
!11211 = !{i64 102034}
!11212 = !{i64 102047}
!11213 = !{i64 102051}
!11214 = !{i64 102053}
!11215 = !{i64 102056}
!11216 = !{i64 102059}
!11217 = !{i64 102068}
!11218 = !{i64 102080}
!11219 = !{i64 102091}
!11220 = !{i64 102106}
!11221 = !{i64 102089}
!11222 = !{i64 102112}
!11223 = !{i64 102116}
!11224 = !{i64 102126}
!11225 = !{i64 102135}
!11226 = !{i64 102148}
!11227 = !{i64 102156}
!11228 = !{i64 101773}
!11229 = !{i64 101777}
!11230 = !{i64 101780}
!11231 = !{i64 102174}
!11232 = !{i64 102187}
!11233 = !{i64 102195}
!11234 = !{i64 102198}
!11235 = !{i64 102202}
!11236 = !{i64 102205}
!11237 = !{i64 102210}
!11238 = !{i64 102212}
!11239 = !{i64 102218}
!11240 = !{i64 102223}
!11241 = !{i64 102230}
!11242 = !{i64 102232}
!11243 = !{i64 102238}
!11244 = !{i64 102245}
!11245 = !{i64 102248}
!11246 = !{i64 102250}
!11247 = !{i64 102255}
!11248 = !{i64 102266}
!11249 = !{i64 102273}
!11250 = !{i64 102282}
!11251 = !{i64 102290}
!11252 = !{i64 102311}
!11253 = !{i64 102318}
!11254 = !{i64 102327}
!11255 = !{i64 102337}
!11256 = !{i64 102464}
!11257 = !{i64 102465}
!11258 = !{i64 102472}
!11259 = !{i64 102480}
!11260 = !{i64 102487}
!11261 = !{i64 102494}
!11262 = !{i64 102501}
!11263 = !{i64 102508}
!11264 = !{i64 102512}
!11265 = !{i64 102517}
!11266 = !{i64 102521}
!11267 = !{i64 102526}
!11268 = !{i64 102533}
!11269 = !{i64 102538}
!11270 = !{i64 102545}
!11271 = !{i64 102550}
!11272 = !{i64 102557}
!11273 = !{i64 102562}
!11274 = !{i64 102569}
!11275 = !{i64 102574}
!11276 = !{i64 102581}
!11277 = !{i64 102586}
!11278 = !{i64 102593}
!11279 = !{i64 102598}
!11280 = !{i64 102608}
!11281 = !{i64 102615}
!11282 = !{i64 102622}
!11283 = !{i64 102629}
!11284 = !{i64 102636}
!11285 = !{i64 102643}
!11286 = !{i64 102648}
!11287 = !{i64 102655}
!11288 = !{i64 102660}
!11289 = !{i64 102668}
!11290 = !{i64 102670}
!11291 = !{i64 102677}
!11292 = !{i64 102705}
!11293 = !{i64 102685}
!11294 = !{i64 102699}
!11295 = !{i64 102712}
!11296 = !{i64 102717}
!11297 = !{i64 102721}
!11298 = !{i64 102728}
!11299 = !{i64 102730}
!11300 = !{i64 102737}
!11301 = !{i64 102742}
!11302 = !{i64 102753}
!11303 = !{i64 102763}
!11304 = !{i64 102780}
!11305 = !{i64 102785}
!11306 = !{i64 102795}
!11307 = !{i64 102802}
!11308 = !{i64 102807}
!11309 = !{i64 102814}
!11310 = !{i64 102821}
!11311 = !{i64 102826}
!11312 = !{i64 102833}
!11313 = !{i64 102842}
!11314 = !{i64 102852}
!11315 = !{i64 102857}
!11316 = !{i64 102875}
!11317 = !{i64 102882}
!11318 = !{i64 102884}
!11319 = !{i64 102887}
!11320 = !{i64 102889}
!11321 = !{i64 102895}
!11322 = !{i64 102905}
!11323 = !{i64 102909}
!11324 = !{i64 102915}
!11325 = !{i64 102917}
!11326 = !{i64 102928}
!11327 = !{i64 102930}
!11328 = !{i64 102937}
!11329 = !{i64 102942}
!11330 = !{i64 102950}
!11331 = !{i64 102953}
!11332 = !{i64 102958}
!11333 = !{i64 102966}
!11334 = !{i64 102977}
!11335 = !{i64 102978}
!11336 = !{i64 102998}
!11337 = !{i64 103006}
!11338 = !{i64 103083}
!11339 = !{i64 103090}
!11340 = !{i64 103098}
!11341 = !{i64 103100}
!11342 = !{i64 103106}
!11343 = !{i64 103108}
!11344 = !{i64 103116}
!11345 = !{i64 103119}
!11346 = !{i64 103125}
!11347 = !{i64 103128}
!11348 = !{i64 103130}
!11349 = !{i64 103137}
!11350 = !{i64 103145}
!11351 = !{i64 103158}
!11352 = !{i64 103163}
!11353 = !{i64 103171}
!11354 = !{i64 103179}
!11355 = !{i64 103184}
!11356 = !{i64 103192}
!11357 = !{i64 103195}
!11358 = !{i64 103210}
!11359 = !{i64 103215}
!11360 = !{i64 103223}
!11361 = !{i64 103226}
!11362 = !{i64 103236}
!11363 = !{i64 103255}
!11364 = !{i64 103257}
!11365 = !{i64 103337}
!11366 = !{i64 103385}
!11367 = !{i64 103408}
!11368 = !{i64 103419}
!11369 = !{i64 103448}
!11370 = !{i64 103456}
!11371 = !{i64 103463}
!11372 = !{i64 103471}
!11373 = !{i64 103551}
!11374 = !{i64 103563}
!11375 = !{i64 103572}
!11376 = !{i64 103581}
!11377 = !{i64 103624}
!11378 = !{i64 103629}
!11379 = !{i64 103632}
!11380 = !{i64 103637}
!11381 = !{i64 103640}
!11382 = !{i64 103642}
!11383 = !{i64 103665}
!11384 = !{i64 103645}
!11385 = !{i64 103652}
!11386 = !{i64 103648}
!11387 = !{i64 103667}
!11388 = !{i64 103670}
!11389 = !{i64 103673}
!11390 = !{i64 103675}
!11391 = !{i64 103679}
!11392 = !{i64 103680}
!11393 = !{i64 103707}
!11394 = !{i64 103712}
!11395 = !{i64 103727}
!11396 = !{i64 103738}
!11397 = !{i64 103753}
!11398 = !{i64 103760}
!11399 = !{i64 103762}
!11400 = !{i64 103769}
!11401 = !{i64 103772}
!11402 = !{i64 103797}
!11403 = !{i64 103801}
!11404 = !{i64 103805}
!11405 = !{i64 103834}
!11406 = !{i64 103839}
!11407 = !{i64 103847}
!11408 = !{i64 103856}
!11409 = !{i64 103865}
!11410 = !{i64 103874}
!11411 = !{i64 103882}
!11412 = !{i64 103885}
!11413 = !{i64 103893}
!11414 = !{i64 103901}
!11415 = !{i64 103909}
!11416 = !{i64 103917}
!11417 = !{i64 103925}
!11418 = !{i64 103933}
!11419 = !{i64 103941}
!11420 = !{i64 103949}
!11421 = !{i64 103957}
!11422 = !{i64 103965}
!11423 = !{i64 103973}
!11424 = !{i64 103981}
!11425 = !{i64 103989}
!11426 = !{i64 103997}
!11427 = !{i64 104008}
!11428 = !{i64 104019}
!11429 = !{i64 104036}
!11430 = !{i64 104038}
!11431 = !{i64 104040}
!11432 = !{i64 104043}
!11433 = !{i64 104050}
!11434 = !{i64 104052}
!11435 = !{i64 104083}
!11436 = !{i64 104084}
!11437 = !{i64 104095}
!11438 = !{i64 104103}
!11439 = !{i64 104107}
!11440 = !{i64 104111}
!11441 = !{i64 104115}
!11442 = !{i64 104118}
!11443 = !{i64 104122}
!11444 = !{i64 104125}
!11445 = !{i64 104130}
!11446 = !{i64 104141}
!11447 = !{i64 104152}
!11448 = !{i64 104185}
!11449 = !{i64 104190}
!11450 = !{i64 104198}
!11451 = !{i64 104200}
!11452 = !{i64 104207}
!11453 = !{i64 104235}
!11454 = !{i64 104215}
!11455 = !{i64 104229}
!11456 = !{i64 104242}
!11457 = !{i64 104247}
!11458 = !{i64 104251}
!11459 = !{i64 104258}
!11460 = !{i64 104260}
!11461 = !{i64 104267}
!11462 = !{i64 104272}
!11463 = !{i64 104283}
!11464 = !{i64 104293}
!11465 = !{i64 104310}
!11466 = !{i64 104315}
!11467 = !{i64 104345}
!11468 = !{i64 104360}
!11469 = !{i64 104386}
!11470 = !{i64 104415}
!11471 = !{i64 104426}
!11472 = !{i64 104429}
!11473 = !{i64 104435}
!11474 = !{i64 104472}
!11475 = !{i64 104474}
!11476 = !{i64 104493}
!11477 = !{i64 104500}
!11478 = !{i64 104519}
!11479 = !{i64 104520}
!11480 = !{i64 104547}
!11481 = !{i64 104555}
!11482 = !{i64 104571}
!11483 = !{i64 104574}
!11484 = !{i64 104584}
!11485 = !{i64 104589}
!11486 = !{i64 104591}
!11487 = !{i64 104595}
!11488 = !{i64 104597}
!11489 = !{i64 104608}
!11490 = !{i64 104637}
!11491 = !{i64 104648}
!11492 = !{i64 104653}
!11493 = !{i64 104655}
!11494 = !{i64 104660}
!11495 = !{i64 104665}
!11496 = !{i64 104668}
!11497 = !{i64 104671}
!11498 = !{i64 104673}
!11499 = !{i64 104679}
!11500 = !{i64 104688}
!11501 = !{i64 104693}
!11502 = !{i64 104710}
!11503 = !{i64 104713}
!11504 = !{i64 104716}
!11505 = !{i64 104721}
!11506 = !{i64 104751}
!11507 = !{i64 104772}
!11508 = !{i64 104795}
!11509 = !{i64 104799}
!11510 = !{i64 104801}
!11511 = !{i64 104808}
!11512 = !{i64 104813}
!11513 = !{i64 104817}
!11514 = !{i64 104819}
!11515 = !{i64 104827}
!11516 = !{i64 104837}
!11517 = !{i64 104842}
!11518 = !{i64 104864}
!11519 = !{i64 104885}
!11520 = !{i64 104899}
!11521 = !{i64 104907}
!11522 = !{i64 104911}
!11523 = !{i64 104913}
!11524 = !{i64 104923}
!11525 = !{i64 104929}
!11526 = !{i64 104931}
!11527 = !{i64 104934}
!11528 = !{i64 104941}
!11529 = !{i64 104946}
!11530 = !{i64 104948}
!11531 = !{i64 104950}
!11532 = !{i64 104903}
!11533 = !{i64 104952}
!11534 = !{i64 104954}
!11535 = !{i64 104960}
!11536 = !{i64 104967}
!11537 = !{i64 104974}
!11538 = !{i64 104986}
!11539 = !{i64 105039}
!11540 = !{i64 105056}
!11541 = !{i64 105064}
!11542 = !{i64 105070}
!11543 = !{i64 105074}
!11544 = !{i64 105081}
!11545 = !{i64 105098}
!11546 = !{i64 105351}
!11547 = !{i64 105355}
!11548 = !{i64 105359}
!11549 = !{i64 105107}
!11550 = !{i64 105110}
!11551 = !{i64 105122}
!11552 = !{i64 105127}
!11553 = !{i64 105130}
!11554 = !{i64 105146}
!11555 = !{i64 105155}
!11556 = !{i64 105163}
!11557 = !{i64 105166}
!11558 = !{i64 105172}
!11559 = !{i64 105184}
!11560 = !{i64 105189}
!11561 = !{i64 105191}
!11562 = !{i64 105197}
!11563 = !{i64 105205}
!11564 = !{i64 105207}
!11565 = !{i64 105210}
!11566 = !{i64 105215}
!11567 = !{i64 105224}
!11568 = !{i64 105226}
!11569 = !{i64 105228}
!11570 = !{i64 105241}
!11571 = !{i64 105249}
!11572 = !{i64 105251}
!11573 = !{i64 105257}
!11574 = !{i64 105262}
!11575 = !{i64 105264}
!11576 = !{i64 105270}
!11577 = !{i64 105275}
!11578 = !{i64 105277}
!11579 = !{i64 105279}
!11580 = !{i64 105288}
!11581 = !{i64 105294}
!11582 = !{i64 105302}
!11583 = !{i64 105312}
!11584 = !{i64 105321}
!11585 = !{i64 105329}
!11586 = !{i64 105334}
!11587 = !{i64 105336}
!11588 = !{i64 105338}
!11589 = !{i64 105342}
!11590 = !{i64 105365}
!11591 = !{i64 105372}
!11592 = !{i64 105379}
!11593 = !{i64 105398}
!11594 = !{i64 105405}
!11595 = !{i64 105408}
!11596 = !{i64 105424}
!11597 = !{i64 105430}
!11598 = !{i64 105454}
!11599 = !{i64 105471}
!11600 = !{i64 105472}
!11601 = !{i64 105481}
!11602 = !{i64 105489}
!11603 = !{i64 105493}
!11604 = !{i64 105497}
!11605 = !{i64 105501}
!11606 = !{i64 105503}
!11607 = !{i64 105507}
!11608 = !{i64 105509}
!11609 = !{i64 105511}
!11610 = !{i64 105513}
!11611 = !{i64 105518}
!11612 = !{i64 105522}
!11613 = !{i64 105524}
!11614 = !{i64 105538}
!11615 = !{i64 105541}
!11616 = !{i64 105543}
!11617 = !{i64 105546}
!11618 = !{i64 105550}
!11619 = !{i64 105554}
!11620 = !{i64 105559}
!11621 = !{i64 105561}
!11622 = !{i64 105565}
!11623 = !{i64 105575}
!11624 = !{i64 105588}
!11625 = !{i64 105589}
!11626 = !{i64 105609}
!11627 = !{i64 105617}
!11628 = !{i64 105632}
!11629 = !{i64 105641}
!11630 = !{i64 105648}
!11631 = !{i64 105662}
!11632 = !{i64 105665}
!11633 = !{i64 105671}
!11634 = !{i64 105685}
!11635 = !{i64 105692}
!11636 = !{i64 105698}
!11637 = !{i64 105703}
!11638 = !{i64 105708}
!11639 = !{i64 105710}
!11640 = !{i64 105870}
!11641 = !{i64 108578}
!11642 = !{i64 108582}
!11643 = !{i64 108589}
!11644 = !{i64 105716}
!11645 = !{i64 105728}
!11646 = !{i64 105740}
!11647 = !{i64 105755}
!11648 = !{i64 105770}
!11649 = !{i64 105785}
!11650 = !{i64 105800}
!11651 = !{i64 105815}
!11652 = !{i64 105830}
!11653 = !{i64 105845}
!11654 = !{i64 105952}
!11655 = !{i64 105956}
!11656 = !{i64 105974}
!11657 = !{i64 105979}
!11658 = !{i64 105982}
!11659 = !{i64 106001}
!11660 = !{i64 106026}
!11661 = !{i64 106034}
!11662 = !{i64 106037}
!11663 = !{i64 106039}
!11664 = !{i64 106054}
!11665 = !{i64 106063}
!11666 = !{i64 106069}
!11667 = !{i64 106080}
!11668 = !{i64 108645}
!11669 = !{i64 106086}
!11670 = !{i64 106094}
!11671 = !{i64 106103}
!11672 = !{i64 106106}
!11673 = !{i64 106108}
!11674 = !{i64 106117}
!11675 = !{i64 106123}
!11676 = !{i64 106125}
!11677 = !{i64 106136}
!11678 = !{i64 106138}
!11679 = !{i64 106145}
!11680 = !{i64 106147}
!11681 = !{i64 106154}
!11682 = !{i64 106161}
!11683 = !{i64 106163}
!11684 = !{i64 106169}
!11685 = !{i64 106174}
!11686 = !{i64 106176}
!11687 = !{i64 106178}
!11688 = !{i64 106184}
!11689 = !{i64 106190}
!11690 = !{i64 106196}
!11691 = !{i64 106200}
!11692 = !{i64 106210}
!11693 = !{i64 106217}
!11694 = !{i64 106225}
!11695 = !{i64 106235}
!11696 = !{i64 106239}
!11697 = !{i64 106241}
!11698 = !{i64 106245}
!11699 = !{i64 106247}
!11700 = !{i64 106255}
!11701 = !{i64 106310}
!11702 = !{i64 106317}
!11703 = !{i64 106321}
!11704 = !{i64 106328}
!11705 = !{i64 106335}
!11706 = !{i64 106337}
!11707 = !{i64 106344}
!11708 = !{i64 106347}
!11709 = !{i64 106389}
!11710 = !{i64 106425}
!11711 = !{i64 106429}
!11712 = !{i64 106444}
!11713 = !{i64 106452}
!11714 = !{i64 106454}
!11715 = !{i64 106457}
!11716 = !{i64 106462}
!11717 = !{i64 106469}
!11718 = !{i64 106472}
!11719 = !{i64 106478}
!11720 = !{i64 106496}
!11721 = !{i64 106498}
!11722 = !{i64 106507}
!11723 = !{i64 106514}
!11724 = !{i64 106517}
!11725 = !{i64 106578}
!11726 = !{i64 106580}
!11727 = !{i64 106531}
!11728 = !{i64 106594}
!11729 = !{i64 106614}
!11730 = !{i64 106619}
!11731 = !{i64 106621}
!11732 = !{i64 106640}
!11733 = !{i64 106652}
!11734 = !{i64 106673}
!11735 = !{i64 106684}
!11736 = !{i64 106686}
!11737 = !{i64 106699}
!11738 = !{i64 106704}
!11739 = !{i64 106706}
!11740 = !{i64 106719}
!11741 = !{i64 106724}
!11742 = !{i64 106726}
!11743 = !{i64 106728}
!11744 = !{i64 106737}
!11745 = !{i64 106753}
!11746 = !{i64 106758}
!11747 = !{i64 106760}
!11748 = !{i64 106769}
!11749 = !{i64 106781}
!11750 = !{i64 106800}
!11751 = !{i64 106812}
!11752 = !{i64 106820}
!11753 = !{i64 106825}
!11754 = !{i64 106831}
!11755 = !{i64 106836}
!11756 = !{i64 106843}
!11757 = !{i64 106862}
!11758 = !{i64 106875}
!11759 = !{i64 106892}
!11760 = !{i64 106903}
!11761 = !{i64 106905}
!11762 = !{i64 106914}
!11763 = !{i64 106919}
!11764 = !{i64 106921}
!11765 = !{i64 106930}
!11766 = !{i64 106935}
!11767 = !{i64 106937}
!11768 = !{i64 106939}
!11769 = !{i64 106947}
!11770 = !{i64 106952}
!11771 = !{i64 106964}
!11772 = !{i64 106969}
!11773 = !{i64 106979}
!11774 = !{i64 106987}
!11775 = !{i64 106992}
!11776 = !{i64 107003}
!11777 = !{i64 107014}
!11778 = !{i64 107016}
!11779 = !{i64 107027}
!11780 = !{i64 107031}
!11781 = !{i64 107037}
!11782 = !{i64 107047}
!11783 = !{i64 107064}
!11784 = !{i64 107075}
!11785 = !{i64 107077}
!11786 = !{i64 107086}
!11787 = !{i64 107091}
!11788 = !{i64 107093}
!11789 = !{i64 107102}
!11790 = !{i64 107107}
!11791 = !{i64 107109}
!11792 = !{i64 107111}
!11793 = !{i64 107119}
!11794 = !{i64 107121}
!11795 = !{i64 107138}
!11796 = !{i64 107143}
!11797 = !{i64 107145}
!11798 = !{i64 107150}
!11799 = !{i64 107162}
!11800 = !{i64 107170}
!11801 = !{i64 107177}
!11802 = !{i64 107185}
!11803 = !{i64 107193}
!11804 = !{i64 107204}
!11805 = !{i64 107206}
!11806 = !{i64 107215}
!11807 = !{i64 107220}
!11808 = !{i64 107225}
!11809 = !{i64 107233}
!11810 = !{i64 107245}
!11811 = !{i64 107266}
!11812 = !{i64 107284}
!11813 = !{i64 107289}
!11814 = !{i64 107291}
!11815 = !{i64 107304}
!11816 = !{i64 107309}
!11817 = !{i64 107311}
!11818 = !{i64 107313}
!11819 = !{i64 107322}
!11820 = !{i64 107338}
!11821 = !{i64 107343}
!11822 = !{i64 107345}
!11823 = !{i64 107354}
!11824 = !{i64 107359}
!11825 = !{i64 107375}
!11826 = !{i64 107387}
!11827 = !{i64 107392}
!11828 = !{i64 107404}
!11829 = !{i64 107409}
!11830 = !{i64 107414}
!11831 = !{i64 107421}
!11832 = !{i64 107454}
!11833 = !{i64 107465}
!11834 = !{i64 107467}
!11835 = !{i64 107480}
!11836 = !{i64 107485}
!11837 = !{i64 107487}
!11838 = !{i64 107500}
!11839 = !{i64 107505}
!11840 = !{i64 107507}
!11841 = !{i64 107509}
!11842 = !{i64 107518}
!11843 = !{i64 107534}
!11844 = !{i64 107539}
!11845 = !{i64 107541}
!11846 = !{i64 107550}
!11847 = !{i64 107562}
!11848 = !{i64 107581}
!11849 = !{i64 107593}
!11850 = !{i64 107598}
!11851 = !{i64 107610}
!11852 = !{i64 107619}
!11853 = !{i64 107624}
!11854 = !{i64 107632}
!11855 = !{i64 107644}
!11856 = !{i64 107665}
!11857 = !{i64 107676}
!11858 = !{i64 107678}
!11859 = !{i64 107691}
!11860 = !{i64 107696}
!11861 = !{i64 107698}
!11862 = !{i64 107711}
!11863 = !{i64 107716}
!11864 = !{i64 107718}
!11865 = !{i64 107720}
!11866 = !{i64 107729}
!11867 = !{i64 107745}
!11868 = !{i64 107750}
!11869 = !{i64 107752}
!11870 = !{i64 107761}
!11871 = !{i64 107773}
!11872 = !{i64 107792}
!11873 = !{i64 107804}
!11874 = !{i64 107812}
!11875 = !{i64 107823}
!11876 = !{i64 107825}
!11877 = !{i64 107839}
!11878 = !{i64 107851}
!11879 = !{i64 107872}
!11880 = !{i64 107884}
!11881 = !{i64 107889}
!11882 = !{i64 107891}
!11883 = !{i64 107900}
!11884 = !{i64 107905}
!11885 = !{i64 107907}
!11886 = !{i64 107909}
!11887 = !{i64 107918}
!11888 = !{i64 107934}
!11889 = !{i64 107939}
!11890 = !{i64 107941}
!11891 = !{i64 107950}
!11892 = !{i64 107955}
!11893 = !{i64 107971}
!11894 = !{i64 107983}
!11895 = !{i64 107991}
!11896 = !{i64 108002}
!11897 = !{i64 108004}
!11898 = !{i64 108037}
!11899 = !{i64 108048}
!11900 = !{i64 108050}
!11901 = !{i64 108063}
!11902 = !{i64 108068}
!11903 = !{i64 108070}
!11904 = !{i64 108083}
!11905 = !{i64 108088}
!11906 = !{i64 108090}
!11907 = !{i64 108092}
!11908 = !{i64 108101}
!11909 = !{i64 108117}
!11910 = !{i64 108122}
!11911 = !{i64 108124}
!11912 = !{i64 108133}
!11913 = !{i64 108145}
!11914 = !{i64 108164}
!11915 = !{i64 108176}
!11916 = !{i64 108184}
!11917 = !{i64 108195}
!11918 = !{i64 108197}
!11919 = !{i64 108211}
!11920 = !{i64 108223}
!11921 = !{i64 108244}
!11922 = !{i64 108256}
!11923 = !{i64 108261}
!11924 = !{i64 108263}
!11925 = !{i64 108272}
!11926 = !{i64 108277}
!11927 = !{i64 108279}
!11928 = !{i64 108281}
!11929 = !{i64 108290}
!11930 = !{i64 108306}
!11931 = !{i64 108311}
!11932 = !{i64 108313}
!11933 = !{i64 108322}
!11934 = !{i64 108327}
!11935 = !{i64 108343}
!11936 = !{i64 108355}
!11937 = !{i64 108363}
!11938 = !{i64 108374}
!11939 = !{i64 108376}
!11940 = !{i64 108409}
!11941 = !{i64 108420}
!11942 = !{i64 108422}
!11943 = !{i64 108435}
!11944 = !{i64 108440}
!11945 = !{i64 108442}
!11946 = !{i64 108451}
!11947 = !{i64 108456}
!11948 = !{i64 108458}
!11949 = !{i64 108460}
!11950 = !{i64 108469}
!11951 = !{i64 108485}
!11952 = !{i64 108490}
!11953 = !{i64 108492}
!11954 = !{i64 108501}
!11955 = !{i64 108513}
!11956 = !{i64 108529}
!11957 = !{i64 108541}
!11958 = !{i64 108549}
!11959 = !{i64 108560}
!11960 = !{i64 108562}
!11961 = !{i64 108619}
!11962 = !{i64 108629}
!11963 = !{i64 108640}
!11964 = !{i64 108654}
!11965 = !{i64 108661}
!11966 = !{i64 108674}
!11967 = !{i64 108702}
!11968 = !{i64 108730}
!11969 = !{i64 108741}
!11970 = !{i64 108749}
!11971 = !{i64 108754}
!11972 = !{i64 108757}
!11973 = !{i64 108752}
!11974 = !{i64 108765}
!11975 = !{i64 108770}
!11976 = !{i64 108775}
!11977 = !{i64 108786}
!11978 = !{i64 108791}
!11979 = !{i64 108793}
!11980 = !{i64 108799}
!11981 = !{i64 108806}
!11982 = !{i64 108811}
!11983 = !{i64 108819}
!11984 = !{i64 108821}
!11985 = !{i64 108827}
!11986 = !{i64 108834}
!11987 = !{i64 108840}
!11988 = !{i64 108847}
!11989 = !{i64 108853}
!11990 = !{i64 108859}
!11991 = !{i64 108863}
!11992 = !{i64 108870}
!11993 = !{i64 108895}
!11994 = !{i64 109088}
!11995 = !{i64 109092}
!11996 = !{i64 109096}
!11997 = !{i64 108904}
!11998 = !{i64 108908}
!11999 = !{i64 108920}
!12000 = !{i64 108925}
!12001 = !{i64 108928}
!12002 = !{i64 108944}
!12003 = !{i64 108953}
!12004 = !{i64 108955}
!12005 = !{i64 108963}
!12006 = !{i64 108965}
!12007 = !{i64 108968}
!12008 = !{i64 108976}
!12009 = !{i64 108978}
!12010 = !{i64 108992}
!12011 = !{i64 108997}
!12012 = !{i64 109000}
!12013 = !{i64 109002}
!12014 = !{i64 109008}
!12015 = !{i64 109013}
!12016 = !{i64 109015}
!12017 = !{i64 109021}
!12018 = !{i64 109026}
!12019 = !{i64 109028}
!12020 = !{i64 109030}
!12021 = !{i64 109037}
!12022 = !{i64 109043}
!12023 = !{i64 109051}
!12024 = !{i64 109061}
!12025 = !{i64 109070}
!12026 = !{i64 109075}
!12027 = !{i64 109079}
!12028 = !{i64 109113}
!12029 = !{i64 109102}
!12030 = !{i64 109109}
!12031 = !{i64 109117}
!12032 = !{i64 109122}
!12033 = !{i64 109124}
!12034 = !{i64 109129}
!12035 = !{i64 109134}
!12036 = !{i64 109137}
!12037 = !{i64 109140}
!12038 = !{i64 109146}
!12039 = !{i64 109153}
!12040 = !{i64 109179}
!12041 = !{i64 109189}
!12042 = !{i64 109194}
!12043 = !{i64 109196}
!12044 = !{i64 109205}
!12045 = !{i64 109213}
!12046 = !{i64 109215}
!12047 = !{i64 109224}
!12048 = !{i64 109229}
!12049 = !{i64 109231}
!12050 = !{i64 109237}
!12051 = !{i64 109251}
!12052 = !{i64 109257}
!12053 = !{i64 109260}
!12054 = !{i64 109268}
!12055 = !{i64 109274}
!12056 = !{i64 109284}
!12057 = !{i64 109295}
!12058 = !{i64 109303}
!12059 = !{i64 109324}
!12060 = !{i64 109331}
!12061 = !{i64 109366}
!12062 = !{i64 109380}
!12063 = !{i64 109386}
!12064 = !{i64 109393}
!12065 = !{i64 109397}
!12066 = !{i64 109402}
!12067 = !{i64 109404}
!12068 = !{i64 109409}
!12069 = !{i64 109414}
!12070 = !{i64 109419}
!12071 = !{i64 109433}
!12072 = !{i64 109440}
!12073 = !{i64 109451}
!12074 = !{i64 109455}
!12075 = !{i64 109457}
!12076 = !{i64 109460}
!12077 = !{i64 109462}
!12078 = !{i64 109466}
!12079 = !{i64 109473}
!12080 = !{i64 109470}
!12081 = !{i64 109477}
!12082 = !{i64 109479}
!12083 = !{i64 109482}
!12084 = !{i64 109485}
!12085 = !{i64 109489}
!12086 = !{i64 109493}
!12087 = !{i64 109496}
!12088 = !{i64 109500}
!12089 = !{i64 109502}
!12090 = !{i64 109504}
!12091 = !{i64 109506}
!12092 = !{i64 109510}
!12093 = !{i64 109514}
!12094 = !{i64 109517}
!12095 = !{i64 109519}
!12096 = !{i64 109522}
!12097 = !{i64 109524}
!12098 = !{i64 109532}
!12099 = !{i64 109544}
!12100 = !{i64 109546}
!12101 = !{i64 109548}
!12102 = !{i64 109556}
!12103 = !{i64 109571}
!12104 = !{i64 109575}
!12105 = !{i64 109579}
!12106 = !{i64 109586}
!12107 = !{i64 109598}
!12108 = !{i64 109605}
!12109 = !{i64 109612}
!12110 = !{i64 109629}
!12111 = !{i64 109636}
!12112 = !{i64 109645}
!12113 = !{i64 109650}
!12114 = !{i64 109660}
!12115 = !{i64 109668}
!12116 = !{i64 109670}
!12117 = !{i64 109676}
!12118 = !{i64 109686}
!12119 = !{i64 109694}
!12120 = !{i64 109699}
!12121 = !{i64 109701}
!12122 = !{i64 109707}
!12123 = !{i64 109713}
!12124 = !{i64 109717}
!12125 = !{i64 109724}
!12126 = !{i64 109741}
!12127 = !{i64 110054}
!12128 = !{i64 110058}
!12129 = !{i64 110062}
!12130 = !{i64 109760}
!12131 = !{i64 109764}
!12132 = !{i64 109776}
!12133 = !{i64 109781}
!12134 = !{i64 109784}
!12135 = !{i64 109800}
!12136 = !{i64 109811}
!12137 = !{i64 109819}
!12138 = !{i64 109822}
!12139 = !{i64 109828}
!12140 = !{i64 109836}
!12141 = !{i64 109842}
!12142 = !{i64 109857}
!12143 = !{i64 109862}
!12144 = !{i64 109864}
!12145 = !{i64 109870}
!12146 = !{i64 109878}
!12147 = !{i64 109880}
!12148 = !{i64 109883}
!12149 = !{i64 109888}
!12150 = !{i64 109900}
!12151 = !{i64 109903}
!12152 = !{i64 109905}
!12153 = !{i64 109918}
!12154 = !{i64 109923}
!12155 = !{i64 109938}
!12156 = !{i64 109943}
!12157 = !{i64 109945}
!12158 = !{i64 109951}
!12159 = !{i64 109956}
!12160 = !{i64 109958}
!12161 = !{i64 109960}
!12162 = !{i64 109969}
!12163 = !{i64 109975}
!12164 = !{i64 109984}
!12165 = !{i64 109994}
!12166 = !{i64 110003}
!12167 = !{i64 110011}
!12168 = !{i64 110016}
!12169 = !{i64 110018}
!12170 = !{i64 110027}
!12171 = !{i64 110031}
!12172 = !{i64 110037}
!12173 = !{i64 110040}
!12174 = !{i64 110074}
!12175 = !{i64 110081}
!12176 = !{i64 110085}
!12177 = !{i64 110088}
!12178 = !{i64 110093}
!12179 = !{i64 110098}
!12180 = !{i64 110100}
!12181 = !{i64 110102}
!12182 = !{i64 110116}
!12183 = !{i64 110118}
!12184 = !{i64 110121}
!12185 = !{i64 110129}
!12186 = !{i64 110131}
!12187 = !{i64 110138}
!12188 = !{i64 110151}
!12189 = !{i64 110153}
!12190 = !{i64 110163}
!12191 = !{i64 110174}
!12192 = !{i64 110182}
!12193 = !{i64 110190}
!12194 = !{i64 110197}
!12195 = !{i64 110204}
!12196 = !{i64 110211}
!12197 = !{i64 110218}
!12198 = !{i64 110225}
!12199 = !{i64 110231}
!12200 = !{i64 110239}
!12201 = !{i64 110244}
!12202 = !{i64 110246}
!12203 = !{i64 110248}
!12204 = !{i64 110261}
!12205 = !{i64 110277}
!12206 = !{i64 110284}
!12207 = !{i64 110291}
!12208 = !{i64 110298}
!12209 = !{i64 110350}
!12210 = !{i64 110370}
!12211 = !{i64 110378}
!12212 = !{i64 110407}
!12213 = !{i64 110423}
!12214 = !{i64 110431}
!12215 = !{i64 110436}
!12216 = !{i64 110446}
!12217 = !{i64 110462}
!12218 = !{i64 110469}
!12219 = !{i64 110486}
!12220 = !{i64 110489}
!12221 = !{i64 110492}
!12222 = !{i64 110506}
!12223 = !{i64 110513}
!12224 = !{i64 110520}
!12225 = !{i64 110525}
!12226 = !{i64 112889}
!12227 = !{i64 112897}
!12228 = !{i64 112901}
!12229 = !{i64 110452}
!12230 = !{i64 110544}
!12231 = !{i64 110558}
!12232 = !{i64 110572}
!12233 = !{i64 110586}
!12234 = !{i64 110600}
!12235 = !{i64 110614}
!12236 = !{i64 110628}
!12237 = !{i64 110639}
!12238 = !{i64 110653}
!12239 = !{i64 110664}
!12240 = !{i64 110685}
!12241 = !{i64 110692}
!12242 = !{i64 110714}
!12243 = !{i64 110722}
!12244 = !{i64 110703}
!12245 = !{i64 110739}
!12246 = !{i64 110744}
!12247 = !{i64 110753}
!12248 = !{i64 110881}
!12249 = !{i64 110885}
!12250 = !{i64 110888}
!12251 = !{i64 110781}
!12252 = !{i64 110766}
!12253 = !{i64 110804}
!12254 = !{i64 110807}
!12255 = !{i64 110809}
!12256 = !{i64 110813}
!12257 = !{i64 110816}
!12258 = !{i64 110819}
!12259 = !{i64 110821}
!12260 = !{i64 110826}
!12261 = !{i64 110836}
!12262 = !{i64 110839}
!12263 = !{i64 110843}
!12264 = !{i64 110846}
!12265 = !{i64 110849}
!12266 = !{i64 110854}
!12267 = !{i64 110856}
!12268 = !{i64 110861}
!12269 = !{i64 110870}
!12270 = !{i64 110872}
!12271 = !{i64 110874}
!12272 = !{i64 110878}
!12273 = !{i64 110899}
!12274 = !{i64 110902}
!12275 = !{i64 110918}
!12276 = !{i64 110933}
!12277 = !{i64 110945}
!12278 = !{i64 110948}
!12279 = !{i64 110950}
!12280 = !{i64 110957}
!12281 = !{i64 110961}
!12282 = !{i64 110966}
!12283 = !{i64 110975}
!12284 = !{i64 110979}
!12285 = !{i64 110981}
!12286 = !{i64 110984}
!12287 = !{i64 110989}
!12288 = !{i64 110993}
!12289 = !{i64 110996}
!12290 = !{i64 110999}
!12291 = !{i64 111009}
!12292 = !{i64 111015}
!12293 = !{i64 111022}
!12294 = !{i64 111025}
!12295 = !{i64 111040}
!12296 = !{i64 111042}
!12297 = !{i64 111055}
!12298 = !{i64 111076}
!12299 = !{i64 111081}
!12300 = !{i64 111083}
!12301 = !{i64 111100}
!12302 = !{i64 111107}
!12303 = !{i64 111116}
!12304 = !{i64 111126}
!12305 = !{i64 111137}
!12306 = !{i64 111142}
!12307 = !{i64 111145}
!12308 = !{i64 111147}
!12309 = !{i64 111156}
!12310 = !{i64 111161}
!12311 = !{i64 111163}
!12312 = !{i64 111172}
!12313 = !{i64 111177}
!12314 = !{i64 111179}
!12315 = !{i64 111185}
!12316 = !{i64 111192}
!12317 = !{i64 111194}
!12318 = !{i64 111211}
!12319 = !{i64 111216}
!12320 = !{i64 111218}
!12321 = !{i64 111223}
!12322 = !{i64 111232}
!12323 = !{i64 111240}
!12324 = !{i64 111244}
!12325 = !{i64 111252}
!12326 = !{i64 111257}
!12327 = !{i64 111268}
!12328 = !{i64 111273}
!12329 = !{i64 111276}
!12330 = !{i64 111278}
!12331 = !{i64 111296}
!12332 = !{i64 111299}
!12333 = !{i64 111308}
!12334 = !{i64 111315}
!12335 = !{i64 111326}
!12336 = !{i64 111331}
!12337 = !{i64 111334}
!12338 = !{i64 111336}
!12339 = !{i64 111345}
!12340 = !{i64 111350}
!12341 = !{i64 111352}
!12342 = !{i64 111361}
!12343 = !{i64 111366}
!12344 = !{i64 111368}
!12345 = !{i64 111374}
!12346 = !{i64 111381}
!12347 = !{i64 111383}
!12348 = !{i64 111397}
!12349 = !{i64 111402}
!12350 = !{i64 111404}
!12351 = !{i64 111409}
!12352 = !{i64 111418}
!12353 = !{i64 111429}
!12354 = !{i64 111433}
!12355 = !{i64 111441}
!12356 = !{i64 111450}
!12357 = !{i64 111458}
!12358 = !{i64 111460}
!12359 = !{i64 111469}
!12360 = !{i64 111481}
!12361 = !{i64 111485}
!12362 = !{i64 111490}
!12363 = !{i64 111497}
!12364 = !{i64 111506}
!12365 = !{i64 111521}
!12366 = !{i64 111536}
!12367 = !{i64 111541}
!12368 = !{i64 111543}
!12369 = !{i64 111552}
!12370 = !{i64 111557}
!12371 = !{i64 111559}
!12372 = !{i64 111561}
!12373 = !{i64 111569}
!12374 = !{i64 111585}
!12375 = !{i64 111590}
!12376 = !{i64 111592}
!12377 = !{i64 111601}
!12378 = !{i64 111606}
!12379 = !{i64 111622}
!12380 = !{i64 111634}
!12381 = !{i64 111639}
!12382 = !{i64 111650}
!12383 = !{i64 111526}
!12384 = !{i64 111655}
!12385 = !{i64 111660}
!12386 = !{i64 111664}
!12387 = !{i64 111688}
!12388 = !{i64 111693}
!12389 = !{i64 111696}
!12390 = !{i64 111698}
!12391 = !{i64 111711}
!12392 = !{i64 111716}
!12393 = !{i64 111718}
!12394 = !{i64 111731}
!12395 = !{i64 111736}
!12396 = !{i64 111738}
!12397 = !{i64 111740}
!12398 = !{i64 111748}
!12399 = !{i64 111764}
!12400 = !{i64 111769}
!12401 = !{i64 111771}
!12402 = !{i64 111780}
!12403 = !{i64 111789}
!12404 = !{i64 111808}
!12405 = !{i64 111820}
!12406 = !{i64 111825}
!12407 = !{i64 111836}
!12408 = !{i64 111845}
!12409 = !{i64 111850}
!12410 = !{i64 111859}
!12411 = !{i64 111868}
!12412 = !{i64 111883}
!12413 = !{i64 111888}
!12414 = !{i64 111891}
!12415 = !{i64 111893}
!12416 = !{i64 111906}
!12417 = !{i64 111911}
!12418 = !{i64 111913}
!12419 = !{i64 111926}
!12420 = !{i64 111931}
!12421 = !{i64 111933}
!12422 = !{i64 111935}
!12423 = !{i64 111943}
!12424 = !{i64 111959}
!12425 = !{i64 111964}
!12426 = !{i64 111966}
!12427 = !{i64 111975}
!12428 = !{i64 111984}
!12429 = !{i64 112003}
!12430 = !{i64 112015}
!12431 = !{i64 112023}
!12432 = !{i64 112028}
!12433 = !{i64 112031}
!12434 = !{i64 112033}
!12435 = !{i64 112051}
!12436 = !{i64 112060}
!12437 = !{i64 112075}
!12438 = !{i64 112087}
!12439 = !{i64 112092}
!12440 = !{i64 112094}
!12441 = !{i64 112103}
!12442 = !{i64 112108}
!12443 = !{i64 112110}
!12444 = !{i64 112112}
!12445 = !{i64 112120}
!12446 = !{i64 112136}
!12447 = !{i64 112141}
!12448 = !{i64 112143}
!12449 = !{i64 112152}
!12450 = !{i64 112157}
!12451 = !{i64 112173}
!12452 = !{i64 112185}
!12453 = !{i64 112193}
!12454 = !{i64 112198}
!12455 = !{i64 112201}
!12456 = !{i64 112203}
!12457 = !{i64 112227}
!12458 = !{i64 112232}
!12459 = !{i64 112235}
!12460 = !{i64 112237}
!12461 = !{i64 112250}
!12462 = !{i64 112255}
!12463 = !{i64 112257}
!12464 = !{i64 112270}
!12465 = !{i64 112275}
!12466 = !{i64 112277}
!12467 = !{i64 112279}
!12468 = !{i64 112287}
!12469 = !{i64 112303}
!12470 = !{i64 112308}
!12471 = !{i64 112310}
!12472 = !{i64 112319}
!12473 = !{i64 112328}
!12474 = !{i64 112347}
!12475 = !{i64 112359}
!12476 = !{i64 112367}
!12477 = !{i64 112372}
!12478 = !{i64 112375}
!12479 = !{i64 112377}
!12480 = !{i64 112395}
!12481 = !{i64 112404}
!12482 = !{i64 112416}
!12483 = !{i64 112425}
!12484 = !{i64 112430}
!12485 = !{i64 112432}
!12486 = !{i64 112438}
!12487 = !{i64 112443}
!12488 = !{i64 112445}
!12489 = !{i64 112447}
!12490 = !{i64 112455}
!12491 = !{i64 112468}
!12492 = !{i64 112473}
!12493 = !{i64 112475}
!12494 = !{i64 112481}
!12495 = !{i64 112486}
!12496 = !{i64 112499}
!12497 = !{i64 112508}
!12498 = !{i64 112516}
!12499 = !{i64 112521}
!12500 = !{i64 112524}
!12501 = !{i64 112526}
!12502 = !{i64 112547}
!12503 = !{i64 112552}
!12504 = !{i64 112555}
!12505 = !{i64 112557}
!12506 = !{i64 112567}
!12507 = !{i64 112572}
!12508 = !{i64 112574}
!12509 = !{i64 112584}
!12510 = !{i64 112589}
!12511 = !{i64 112591}
!12512 = !{i64 112593}
!12513 = !{i64 112601}
!12514 = !{i64 112614}
!12515 = !{i64 112619}
!12516 = !{i64 112621}
!12517 = !{i64 112627}
!12518 = !{i64 112636}
!12519 = !{i64 112652}
!12520 = !{i64 112661}
!12521 = !{i64 112669}
!12522 = !{i64 112674}
!12523 = !{i64 112677}
!12524 = !{i64 112679}
!12525 = !{i64 112696}
!12526 = !{i64 112705}
!12527 = !{i64 112720}
!12528 = !{i64 112725}
!12529 = !{i64 112728}
!12530 = !{i64 112730}
!12531 = !{i64 112743}
!12532 = !{i64 112748}
!12533 = !{i64 112750}
!12534 = !{i64 112763}
!12535 = !{i64 112768}
!12536 = !{i64 112770}
!12537 = !{i64 112772}
!12538 = !{i64 112780}
!12539 = !{i64 112796}
!12540 = !{i64 112801}
!12541 = !{i64 112803}
!12542 = !{i64 112812}
!12543 = !{i64 112821}
!12544 = !{i64 112840}
!12545 = !{i64 112852}
!12546 = !{i64 112860}
!12547 = !{i64 112868}
!12548 = !{i64 112870}
!12549 = !{i64 112879}
!12550 = !{i64 112883}
!12551 = !{i64 110480}
!12552 = !{i64 112986}
!12553 = !{i64 112999}
!12554 = !{i64 113008}
!12555 = !{i64 113037}
!12556 = !{i64 113044}
!12557 = !{i64 113056}
!12558 = !{i64 113064}
!12559 = !{i64 113066}
!12560 = !{i64 113068}
!12561 = !{i64 113072}
!12562 = !{i64 113108}
!12563 = !{i64 113112}
!12564 = !{i64 113129}
!12565 = !{i64 113147}
!12566 = !{i64 113162}
!12567 = !{i64 113174}
!12568 = !{i64 113177}
!12569 = !{i64 113181}
!12570 = !{i64 113188}
!12571 = !{i64 113204}
!12572 = !{i64 113209}
!12573 = !{i64 113213}
!12574 = !{i64 113217}
!12575 = !{i64 113220}
!12576 = !{i64 113226}
!12577 = !{i64 113253}
!12578 = !{i64 113258}
!12579 = !{i64 113282}
!12580 = !{i64 113287}
!12581 = !{i64 113300}
!12582 = !{i64 113305}
!12583 = !{i64 113309}
!12584 = !{i64 113318}
!12585 = !{i64 113320}
!12586 = !{i64 113339}
!12587 = !{i64 113367}
!12588 = !{i64 113381}
!12589 = !{i64 113409}
!12590 = !{i64 113432}
!12591 = !{i64 113438}
!12592 = !{i64 113443}
!12593 = !{i64 113448}
!12594 = !{i64 113452}
!12595 = !{i64 113461}
!12596 = !{i64 113463}
!12597 = !{i64 113485}
!12598 = !{i64 113513}
!12599 = !{i64 113527}
!12600 = !{i64 113555}
!12601 = !{i64 113581}
!12602 = !{i64 113592}
!12603 = !{i64 113597}
!12604 = !{i64 113601}
!12605 = !{i64 113610}
!12606 = !{i64 113612}
!12607 = !{i64 113634}
!12608 = !{i64 113636}
!12609 = !{i64 113641}
!12610 = !{i64 113646}
!12611 = !{i64 113650}
!12612 = !{i64 113653}
!12613 = !{i64 113657}
!12614 = !{i64 113660}
!12615 = !{i64 113664}
!12616 = !{i64 113668}
!12617 = !{i64 113671}
!12618 = !{i64 113675}
!12619 = !{i64 113679}
!12620 = !{i64 113682}
!12621 = !{i64 113686}
!12622 = !{i64 113690}
!12623 = !{i64 113694}
!12624 = !{i64 113698}
!12625 = !{i64 113701}
!12626 = !{i64 113705}
!12627 = !{i64 113708}
!12628 = !{i64 113712}
!12629 = !{i64 113716}
!12630 = !{i64 113722}
!12631 = !{i64 113726}
!12632 = !{i64 113729}
!12633 = !{i64 113735}
!12634 = !{i64 113738}
!12635 = !{i64 113742}
!12636 = !{i64 113760}
!12637 = !{i64 113776}
!12638 = !{i64 113779}
!12639 = !{i64 113787}
!12640 = !{i64 113791}
!12641 = !{i64 113809}
!12642 = !{i64 113817}
!12643 = !{i64 113821}
!12644 = !{i64 113834}
!12645 = !{i64 113842}
!12646 = !{i64 113845}
!12647 = !{i64 113858}
!12648 = !{i64 113866}
!12649 = !{i64 113870}
!12650 = !{i64 113883}
!12651 = !{i64 113891}
!12652 = !{i64 113895}
!12653 = !{i64 113908}
!12654 = !{i64 113916}
!12655 = !{i64 113920}
!12656 = !{i64 113923}
!12657 = !{i64 113927}
!12658 = !{i64 113935}
!12659 = !{i64 113939}
!12660 = !{i64 113951}
!12661 = !{i64 113959}
!12662 = !{i64 113973}
!12663 = !{i64 113981}
!12664 = !{i64 113985}
!12665 = !{i64 113998}
!12666 = !{i64 114016}
!12667 = !{i64 114024}
!12668 = !{i64 114027}
!12669 = !{i64 114040}
!12670 = !{i64 114048}
!12671 = !{i64 114052}
!12672 = !{i64 114065}
!12673 = !{i64 114073}
!12674 = !{i64 114077}
!12675 = !{i64 114090}
!12676 = !{i64 114098}
!12677 = !{i64 114102}
!12678 = !{i64 114105}
!12679 = !{i64 114109}
!12680 = !{i64 114117}
!12681 = !{i64 114121}
!12682 = !{i64 114127}
!12683 = !{i64 114133}
!12684 = !{i64 114146}
!12685 = !{i64 114161}
!12686 = !{i64 114165}
!12687 = !{i64 114171}
!12688 = !{i64 114180}
!12689 = !{i64 114184}
!12690 = !{i64 114187}
!12691 = !{i64 114195}
!12692 = !{i64 114200}
!12693 = !{i64 114204}
!12694 = !{i64 114211}
!12695 = !{i64 114220}
!12696 = !{i64 114224}
!12697 = !{i64 114228}
!12698 = !{i64 114231}
!12699 = !{i64 114246}
!12700 = !{i64 114253}
!12701 = !{i64 114264}
!12702 = !{i64 114278}
!12703 = !{i64 114284}
!12704 = !{i64 114290}
!12705 = !{i64 114297}
!12706 = !{i64 114307}
!12707 = !{i64 114314}
!12708 = !{i64 114324}
!12709 = !{i64 114331}
!12710 = !{i64 114341}
!12711 = !{i64 114348}
!12712 = !{i64 114358}
!12713 = !{i64 114365}
!12714 = !{i64 114371}
!12715 = !{i64 114374}
!12716 = !{i64 114381}
!12717 = !{i64 114387}
!12718 = !{i64 114394}
!12719 = !{i64 114405}
!12720 = !{i64 114412}
!12721 = !{i64 114418}
!12722 = !{i64 114422}
!12723 = !{i64 114429}
!12724 = !{i64 114435}
!12725 = !{i64 114439}
!12726 = !{i64 114446}
!12727 = !{i64 114452}
!12728 = !{i64 114456}
!12729 = !{i64 114463}
!12730 = !{i64 114473}
!12731 = !{i64 114486}
!12732 = !{i64 114489}
!12733 = !{i64 114502}
!12734 = !{i64 114515}
!12735 = !{i64 114519}
!12736 = !{i64 114529}
!12737 = !{i64 114533}
!12738 = !{i64 114543}
!12739 = !{i64 114553}
!12740 = !{i64 114557}
!12741 = !{i64 114567}
!12742 = !{i64 114571}
!12743 = !{i64 114581}
!12744 = !{i64 114585}
!12745 = !{i64 114480}
!12746 = !{i64 114496}
!12747 = !{i64 114509}
!12748 = !{i64 114523}
!12749 = !{i64 114537}
!12750 = !{i64 114547}
!12751 = !{i64 114561}
!12752 = !{i64 114575}
!12753 = !{i64 114589}
!12754 = !{i64 114592}
!12755 = !{i64 114904}
!12756 = !{i64 114912}
!12757 = !{i64 114914}
!12758 = !{i64 114919}
!12759 = !{i64 114936}
!12760 = !{i64 114952}
!12761 = !{i64 114964}
!12762 = !{i64 114969}
!12763 = !{i64 114973}
!12764 = !{i64 114979}
!12765 = !{i64 114985}
!12766 = !{i64 114993}
!12767 = !{i64 114997}
!12768 = !{i64 115014}
!12769 = !{i64 115022}
!12770 = !{i64 115027}
!12771 = !{i64 115034}
!12772 = !{i64 115038}
!12773 = !{i64 115046}
!12774 = !{i64 115050}
!12775 = !{i64 115074}
!12776 = !{i64 115075}
!12777 = !{i64 115082}
!12778 = !{i64 115099}
!12779 = !{i64 115102}
!12780 = !{i64 115106}
!12781 = !{i64 115108}
!12782 = !{i64 115112}
!12783 = !{i64 115125}
!12784 = !{i64 115128}
!12785 = !{i64 115116}
!12786 = !{i64 115142}
!12787 = !{i64 115145}
!12788 = !{i64 115153}
!12789 = !{i64 115156}
!12790 = !{i64 115164}
!12791 = !{i64 115166}
!12792 = !{i64 115171}
!12793 = !{i64 115175}
!12794 = !{i64 115185}
!12795 = !{i64 115189}
!12796 = !{i64 115193}
!12797 = !{i64 115196}
!12798 = !{i64 115202}
!12799 = !{i64 115206}
!12800 = !{i64 115209}
!12801 = !{i64 115215}
!12802 = !{i64 115218}
!12803 = !{i64 115222}
!12804 = !{i64 115228}
!12805 = !{i64 115232}
!12806 = !{i64 115235}
!12807 = !{i64 115241}
!12808 = !{i64 115244}
!12809 = !{i64 115248}
!12810 = !{i64 115254}
!12811 = !{i64 115258}
!12812 = !{i64 115261}
!12813 = !{i64 115267}
!12814 = !{i64 115270}
!12815 = !{i64 115274}
!12816 = !{i64 115280}
!12817 = !{i64 115284}
!12818 = !{i64 115287}
!12819 = !{i64 115293}
!12820 = !{i64 115296}
!12821 = !{i64 115300}
!12822 = !{i64 115306}
!12823 = !{i64 115310}
!12824 = !{i64 115313}
!12825 = !{i64 115316}
!12826 = !{i64 115323}
!12827 = !{i64 115326}
!12828 = !{i64 115332}
!12829 = !{i64 115335}
!12830 = !{i64 115341}
!12831 = !{i64 115345}
!12832 = !{i64 115348}
!12833 = !{i64 115351}
!12834 = !{i64 115395}
!12835 = !{i64 115414}
!12836 = !{i64 115433}
!12837 = !{i64 115449}
!12838 = !{i64 115464}
!12839 = !{i64 115483}
!12840 = !{i64 115502}
!12841 = !{i64 115354}
!12842 = !{i64 115362}
!12843 = !{i64 115369}
!12844 = !{i64 115376}
!12845 = !{i64 115380}
!12846 = !{i64 115383}
!12847 = !{i64 115391}
!12848 = !{i64 115406}
!12849 = !{i64 115410}
!12850 = !{i64 115425}
!12851 = !{i64 115429}
!12852 = !{i64 115441}
!12853 = !{i64 115445}
!12854 = !{i64 115460}
!12855 = !{i64 115475}
!12856 = !{i64 115479}
!12857 = !{i64 115494}
!12858 = !{i64 115498}
!12859 = !{i64 115510}
!12860 = !{i64 115514}
!12861 = !{i64 115518}
!12862 = !{i64 115525}
!12863 = !{i64 115533}
!12864 = !{i64 115540}
!12865 = !{i64 115544}
!12866 = !{i64 115547}
!12867 = !{i64 115555}
!12868 = !{i64 115559}
!12869 = !{i64 115570}
!12870 = !{i64 115574}
!12871 = !{i64 115578}
!12872 = !{i64 115589}
!12873 = !{i64 115593}
!12874 = !{i64 115597}
!12875 = !{i64 115605}
!12876 = !{i64 115609}
!12877 = !{i64 115613}
!12878 = !{i64 115624}
!12879 = !{i64 115628}
!12880 = !{i64 115639}
!12881 = !{i64 115643}
!12882 = !{i64 115647}
!12883 = !{i64 115658}
!12884 = !{i64 115662}
!12885 = !{i64 115666}
!12886 = !{i64 115674}
!12887 = !{i64 115678}
!12888 = !{i64 115682}
!12889 = !{i64 115686}
!12890 = !{i64 115690}
!12891 = !{i64 115696}
!12892 = !{i64 115705}
!12893 = !{i64 115708}
!12894 = !{i64 115712}
!12895 = !{i64 115715}
!12896 = !{i64 115721}
!12897 = !{i64 115724}
!12898 = !{i64 115729}
!12899 = !{i64 115732}
!12900 = !{i64 115738}
!12901 = !{i64 115741}
!12902 = !{i64 115745}
!12903 = !{i64 115751}
!12904 = !{i64 115757}
!12905 = !{i64 115761}
!12906 = !{i64 115764}
!12907 = !{i64 115770}
!12908 = !{i64 115773}
!12909 = !{i64 115777}
!12910 = !{i64 115783}
!12911 = !{i64 115787}
!12912 = !{i64 115790}
!12913 = !{i64 115795}
!12914 = !{i64 115798}
!12915 = !{i64 115802}
!12916 = !{i64 115808}
!12917 = !{i64 115815}
!12918 = !{i64 115821}
!12919 = !{i64 115824}
!12920 = !{i64 115828}
!12921 = !{i64 115834}
!12922 = !{i64 115838}
!12923 = !{i64 115841}
!12924 = !{i64 115849}
!12925 = !{i64 115853}
!12926 = !{i64 115856}
!12927 = !{i64 115861}
!12928 = !{i64 115864}
!12929 = !{i64 115872}
!12930 = !{i64 115876}
!12931 = !{i64 115883}
!12932 = !{i64 115890}
!12933 = !{i64 115892}
!12934 = !{i64 115897}
!12935 = !{i64 115900}
!12936 = !{i64 115908}
!12937 = !{i64 115912}
!12938 = !{i64 115917}
!12939 = !{i64 115921}
!12940 = !{i64 115930}
!12941 = !{i64 115948}
!12942 = !{i64 115976}
!12943 = !{i64 116149}
!12944 = !{i64 116152}
!12945 = !{i64 116182}
!12946 = !{i64 116242}
!12947 = !{i64 116291}
!12948 = !{i64 116300}
!12949 = !{i64 116306}
!12950 = !{i64 116662}
!12951 = !{i64 116668}
!12952 = !{i64 116658}
!12953 = !{i64 116338}
!12954 = !{i64 116342}
!12955 = !{i64 116348}
!12956 = !{i64 116352}
!12957 = !{i64 116355}
!12958 = !{i64 116363}
!12959 = !{i64 116367}
!12960 = !{i64 116378}
!12961 = !{i64 116382}
!12962 = !{i64 116386}
!12963 = !{i64 116397}
!12964 = !{i64 116401}
!12965 = !{i64 116405}
!12966 = !{i64 116413}
!12967 = !{i64 116417}
!12968 = !{i64 116421}
!12969 = !{i64 116432}
!12970 = !{i64 116436}
!12971 = !{i64 116447}
!12972 = !{i64 116451}
!12973 = !{i64 116455}
!12974 = !{i64 116466}
!12975 = !{i64 116470}
!12976 = !{i64 116474}
!12977 = !{i64 116482}
!12978 = !{i64 116486}
!12979 = !{i64 116490}
!12980 = !{i64 116497}
!12981 = !{i64 116505}
!12982 = !{i64 116512}
!12983 = !{i64 116516}
!12984 = !{i64 116519}
!12985 = !{i64 116527}
!12986 = !{i64 116531}
!12987 = !{i64 116542}
!12988 = !{i64 116546}
!12989 = !{i64 116550}
!12990 = !{i64 116561}
!12991 = !{i64 116565}
!12992 = !{i64 116569}
!12993 = !{i64 116577}
!12994 = !{i64 116581}
!12995 = !{i64 116585}
!12996 = !{i64 116596}
!12997 = !{i64 116600}
!12998 = !{i64 116611}
!12999 = !{i64 116615}
!13000 = !{i64 116619}
!13001 = !{i64 116630}
!13002 = !{i64 116634}
!13003 = !{i64 116638}
!13004 = !{i64 116646}
!13005 = !{i64 116650}
!13006 = !{i64 116654}
!13007 = !{i64 116680}
!13008 = !{i64 116683}
!13009 = !{i64 116687}
!13010 = !{i64 116690}
!13011 = !{i64 116696}
!13012 = !{i64 116699}
!13013 = !{i64 116706}
!13014 = !{i64 116709}
!13015 = !{i64 116715}
!13016 = !{i64 116721}
!13017 = !{i64 116725}
!13018 = !{i64 116728}
!13019 = !{i64 116735}
!13020 = !{i64 116739}
!13021 = !{i64 116742}
!13022 = !{i64 116750}
!13023 = !{i64 116753}
!13024 = !{i64 116757}
!13025 = !{i64 116763}
!13026 = !{i64 116767}
!13027 = !{i64 116770}
!13028 = !{i64 116776}
!13029 = !{i64 116779}
!13030 = !{i64 116783}
!13031 = !{i64 116789}
!13032 = !{i64 116796}
!13033 = !{i64 116803}
!13034 = !{i64 116806}
!13035 = !{i64 116810}
!13036 = !{i64 116816}
!13037 = !{i64 116820}
!13038 = !{i64 116823}
!13039 = !{i64 116832}
!13040 = !{i64 116836}
!13041 = !{i64 116839}
!13042 = !{i64 116843}
!13043 = !{i64 116846}
!13044 = !{i64 116849}
!13045 = !{i64 116856}
!13046 = !{i64 116860}
!13047 = !{i64 116864}
!13048 = !{i64 116871}
!13049 = !{i64 116875}
!13050 = !{i64 116879}
!13051 = !{i64 116882}
!13052 = !{i64 116886}
!13053 = !{i64 116889}
!13054 = !{i64 116892}
!13055 = !{i64 116903}
!13056 = !{i64 116908}
!13057 = !{i64 116918}
!13058 = !{i64 116934}
!13059 = !{i64 116943}
!13060 = !{i64 116954}
!13061 = !{i64 116960}
!13062 = !{i64 116965}
!13063 = !{i64 116971}
!13064 = !{i64 116976}
!13065 = !{i64 116985}
!13066 = !{i64 116995}
!13067 = !{i64 117000}
!13068 = !{i64 117008}
!13069 = !{i64 117012}
!13070 = !{i64 117020}
!13071 = !{i64 117024}
!13072 = !{i64 117030}
!13073 = !{i64 117035}
!13074 = !{i64 117043}
!13075 = !{i64 117050}
!13076 = !{i64 117057}
!13077 = !{i64 117065}
!13078 = !{i64 117069}
!13079 = !{i64 117081}
!13080 = !{i64 117087}
!13081 = !{i64 117092}
!13082 = !{i64 117100}
!13083 = !{i64 117107}
!13084 = !{i64 117114}
!13085 = !{i64 117122}
!13086 = !{i64 117126}
!13087 = !{i64 117138}
!13088 = !{i64 117144}
!13089 = !{i64 117149}
!13090 = !{i64 117195}
!13091 = !{i64 117201}
!13092 = !{i64 117206}
!13093 = !{i64 117278}
!13094 = !{i64 117285}
!13095 = !{i64 117287}
!13096 = !{i64 117295}
!13097 = !{i64 117303}
!13098 = !{i64 117307}
!13099 = !{i64 117314}
!13100 = !{i64 117325}
!13101 = !{i64 117331}
!13102 = !{i64 117343}
!13103 = !{i64 117351}
!13104 = !{i64 117358}
!13105 = !{i64 117365}
!13106 = !{i64 117367}
!13107 = !{i64 117370}
!13108 = !{i64 117373}
!13109 = !{i64 117380}
!13110 = !{i64 117388}
!13111 = !{i64 117392}
!13112 = !{i64 117411}
!13113 = !{i64 117416}
!13114 = !{i64 117420}
!13115 = !{i64 117423}
!13116 = !{i64 117425}
!13117 = !{i64 117429}
!13118 = !{i64 117436}
!13119 = !{i64 117440}
!13120 = !{i64 117454}
!13121 = !{i64 117465}
!13122 = !{i64 117472}
!13123 = !{i64 117481}
!13124 = !{i64 117488}
!13125 = !{i64 117505}
!13126 = !{i64 117510}
!13127 = !{i64 117525}
!13128 = !{i64 117536}
!13129 = !{i64 117543}
!13130 = !{i64 117545}
!13131 = !{i64 117552}
!13132 = !{i64 117556}
!13133 = !{i64 117562}
!13134 = !{i64 117563}
!13135 = !{i64 117566}
!13136 = !{i64 117571}
!13137 = !{i64 117576}
!13138 = !{i64 117580}
!13139 = !{i64 117585}
!13140 = !{i64 117590}
!13141 = !{i64 117591}
!13142 = !{i64 117594}
!13143 = !{i64 117597}
!13144 = !{i64 117599}
!13145 = !{i64 117601}
!13146 = !{i64 117603}
!13147 = !{i64 117607}
!13148 = !{i64 117613}
!13149 = !{i64 117614}
!13150 = !{i64 117617}
!13151 = !{i64 117622}
!13152 = !{i64 117627}
!13153 = !{i64 117633}
!13154 = !{i64 117635}
!13155 = !{i64 117641}
!13156 = !{i64 117646}
!13157 = !{i64 117651}
!13158 = !{i64 117658}
!13159 = !{i64 117664}
!13160 = !{i64 117669}
!13161 = !{i64 117674}
!13162 = !{i64 117680}
!13163 = !{i64 117698}
!13164 = !{i64 117729}
!13165 = !{i64 117739}
!13166 = !{i64 117754}
!13167 = !{i64 117768}
!13168 = !{i64 117802}
!13169 = !{i64 117810}
!13170 = !{i64 117835}
!13171 = !{i64 117873}
!13172 = !{i64 117898}
!13173 = !{i64 117908}
!13174 = !{i64 117923}
!13175 = !{i64 117937}
!13176 = !{i64 117963}
!13177 = !{i64 117971}
!13178 = !{i64 117996}
!13179 = !{i64 118034}
!13180 = !{i64 118059}
!13181 = !{i64 118069}
!13182 = !{i64 118074}
!13183 = !{i64 118082}
!13184 = !{i64 118084}
!13185 = !{i64 118098}
!13186 = !{i64 118103}
!13187 = !{i64 118107}
!13188 = !{i64 118114}
!13189 = !{i64 118124}
!13190 = !{i64 118131}
!13191 = !{i64 118135}
!13192 = !{i64 118139}
!13193 = !{i64 118155}
!13194 = !{i64 118160}
!13195 = !{i64 118166}
!13196 = !{i64 118172}
!13197 = !{i64 118174}
!13198 = !{i64 118179}
!13199 = !{i64 118186}
!13200 = !{i64 118191}
!13201 = !{i64 118216}
!13202 = !{i64 118224}
!13203 = !{i64 118229}
!13204 = !{i64 118236}
!13205 = !{i64 118242}
!13206 = !{i64 118250}
!13207 = !{i64 118253}
!13208 = !{i64 118281}
!13209 = !{i64 118284}
!13210 = !{i64 118297}
!13211 = !{i64 118302}
!13212 = !{i64 118307}
!13213 = !{i64 118314}
!13214 = !{i64 118320}
!13215 = !{i64 118322}
!13216 = !{i64 118329}
!13217 = !{i64 118335}
!13218 = !{i64 118337}
!13219 = !{i64 118339}
!13220 = !{i64 118343}
!13221 = !{i64 118344}
!13222 = !{i64 118348}
!13223 = !{i64 118353}
!13224 = !{i64 118360}
!13225 = !{i64 118367}
!13226 = !{i64 118369}
!13227 = !{i64 118376}
!13228 = !{i64 118382}
!13229 = !{i64 118384}
!13230 = !{i64 118386}
!13231 = !{i64 118389}
!13232 = !{i64 118393}
!13233 = !{i64 118398}
!13234 = !{i64 118403}
!13235 = !{i64 118410}
!13236 = !{i64 118417}
!13237 = !{i64 118419}
!13238 = !{i64 118421}
!13239 = !{i64 118426}
!13240 = !{i64 118430}
!13241 = !{i64 118436}
!13242 = !{i64 118439}
!13243 = !{i64 118446}
!13244 = !{i64 118453}
!13245 = !{i64 118455}
!13246 = !{i64 118462}
!13247 = !{i64 118473}
!13248 = !{i64 118478}
!13249 = !{i64 118483}
!13250 = !{i64 118490}
!13251 = !{i64 118497}
!13252 = !{i64 118499}
!13253 = !{i64 118507}
!13254 = !{i64 118513}
!13255 = !{i64 118516}
!13256 = !{i64 118519}
!13257 = !{i64 118526}
!13258 = !{i64 118533}
!13259 = !{i64 118535}
!13260 = !{i64 118542}
!13261 = !{i64 118548}
!13262 = !{i64 118559}
!13263 = !{i64 118564}
!13264 = !{i64 118569}
!13265 = !{i64 118581}
!13266 = !{i64 118584}
!13267 = !{i64 118589}
!13268 = !{i64 118618}
!13269 = !{i64 118595}
!13270 = !{i64 118602}
!13271 = !{i64 118609}
!13272 = !{i64 118630}
!13273 = !{i64 118634}
!13274 = !{i64 118636}
!13275 = !{i64 118643}
!13276 = !{i64 118652}
!13277 = !{i64 118659}
!13278 = !{i64 118661}
!13279 = !{i64 118669}
!13280 = !{i64 118667}
!13281 = !{i64 118678}
!13282 = !{i64 118685}
!13283 = !{i64 118784}
!13284 = !{i64 118791}
!13285 = !{i64 118798}
!13286 = !{i64 118838}
!13287 = !{i64 118843}
!13288 = !{i64 118848}
!13289 = !{i64 118860}
!13290 = !{i64 118863}
!13291 = !{i64 118868}
!13292 = !{i64 118898}
!13293 = !{i64 118875}
!13294 = !{i64 118882}
!13295 = !{i64 118889}
!13296 = !{i64 118910}
!13297 = !{i64 118914}
!13298 = !{i64 118916}
!13299 = !{i64 118923}
!13300 = !{i64 118932}
!13301 = !{i64 118939}
!13302 = !{i64 118941}
!13303 = !{i64 118949}
!13304 = !{i64 118947}
!13305 = !{i64 118958}
!13306 = !{i64 118965}
!13307 = !{i64 119064}
!13308 = !{i64 119071}
!13309 = !{i64 119078}
!13310 = !{i64 119118}
!13311 = !{i64 119119}
!13312 = !{i64 119128}
!13313 = !{i64 119149}
!13314 = !{i64 119157}
!13315 = !{i64 119167}
!13316 = !{i64 119174}
!13317 = !{i64 119299}
!13318 = !{i64 119306}
!13319 = !{i64 119176}
!13320 = !{i64 119183}
!13321 = !{i64 119190}
!13322 = !{i64 119197}
!13323 = !{i64 119208}
!13324 = !{i64 119215}
!13325 = !{i64 119217}
!13326 = !{i64 119224}
!13327 = !{i64 119236}
!13328 = !{i64 119238}
!13329 = !{i64 119245}
!13330 = !{i64 119257}
!13331 = !{i64 119259}
!13332 = !{i64 119262}
!13333 = !{i64 119269}
!13334 = !{i64 119276}
!13335 = !{i64 119278}
!13336 = !{i64 119292}
!13337 = !{i64 119313}
!13338 = !{i64 119315}
!13339 = !{i64 119324}
!13340 = !{i64 119331}
!13341 = !{i64 119333}
!13342 = !{i64 119340}
!13343 = !{i64 119352}
!13344 = !{i64 119360}
!13345 = !{i64 119363}
!13346 = !{i64 119366}
!13347 = !{i64 119373}
!13348 = !{i64 119375}
!13349 = !{i64 119380}
!13350 = !{i64 119387}
!13351 = !{i64 119394}
!13352 = !{i64 119396}
!13353 = !{i64 119408}
!13354 = !{i64 119417}
!13355 = !{i64 119432}
!13356 = !{i64 119440}
!13357 = !{i64 119450}
!13358 = !{i64 119457}
!13359 = !{i64 119582}
!13360 = !{i64 119589}
!13361 = !{i64 119459}
!13362 = !{i64 119466}
!13363 = !{i64 119473}
!13364 = !{i64 119480}
!13365 = !{i64 119491}
!13366 = !{i64 119498}
!13367 = !{i64 119500}
!13368 = !{i64 119507}
!13369 = !{i64 119519}
!13370 = !{i64 119521}
!13371 = !{i64 119528}
!13372 = !{i64 119540}
!13373 = !{i64 119542}
!13374 = !{i64 119545}
!13375 = !{i64 119552}
!13376 = !{i64 119559}
!13377 = !{i64 119561}
!13378 = !{i64 119575}
!13379 = !{i64 119596}
!13380 = !{i64 119598}
!13381 = !{i64 119607}
!13382 = !{i64 119614}
!13383 = !{i64 119616}
!13384 = !{i64 119623}
!13385 = !{i64 119635}
!13386 = !{i64 119643}
!13387 = !{i64 119652}
!13388 = !{i64 119654}
!13389 = !{i64 119657}
!13390 = !{i64 119663}
!13391 = !{i64 119670}
!13392 = !{i64 119677}
!13393 = !{i64 119690}
!13394 = !{i64 119691}
!13395 = !{i64 119719}
!13396 = !{i64 119727}
!13397 = !{i64 119730}
!13398 = !{i64 119737}
!13399 = !{i64 119743}
!13400 = !{i64 119746}
!13401 = !{i64 119749}
!13402 = !{i64 119762}
!13403 = !{i64 119766}
!13404 = !{i64 119775}
!13405 = !{i64 119780}
!13406 = !{i64 119787}
!13407 = !{i64 119789}
!13408 = !{i64 119801}
!13409 = !{i64 119808}
!13410 = !{i64 119815}
!13411 = !{i64 119821}
!13412 = !{i64 119828}
!13413 = !{i64 119840}
!13414 = !{i64 119842}
!13415 = !{i64 119844}
!13416 = !{i64 119851}
!13417 = !{i64 119860}
!13418 = !{i64 119867}
!13419 = !{i64 119869}
!13420 = !{i64 119876}
!13421 = !{i64 119874}
!13422 = !{i64 119884}
!13423 = !{i64 119891}
!13424 = !{i64 119893}
!13425 = !{i64 119900}
!13426 = !{i64 119912}
!13427 = !{i64 119917}
!13428 = !{i64 120014}
!13429 = !{i64 120021}
!13430 = !{i64 120028}
!13431 = !{i64 120035}
!13432 = !{i64 120037}
!13433 = !{i64 120041}
!13434 = !{i64 120048}
!13435 = !{i64 120055}
!13436 = !{i64 120058}
!13437 = !{i64 120112}
!13438 = !{i64 120117}
!13439 = !{i64 120124}
!13440 = !{i64 120126}
!13441 = !{i64 120136}
!13442 = !{i64 120143}
!13443 = !{i64 120147}
!13444 = !{i64 120154}
!13445 = !{i64 120161}
!13446 = !{i64 120164}
!13447 = !{i64 120167}
!13448 = !{i64 120174}
!13449 = !{i64 120179}
!13450 = !{i64 120182}
!13451 = !{i64 120186}
!13452 = !{i64 120188}
!13453 = !{i64 120190}
!13454 = !{i64 120197}
!13455 = !{i64 120206}
!13456 = !{i64 120213}
!13457 = !{i64 120215}
!13458 = !{i64 120222}
!13459 = !{i64 120220}
!13460 = !{i64 120230}
!13461 = !{i64 120237}
!13462 = !{i64 120239}
!13463 = !{i64 120246}
!13464 = !{i64 120258}
!13465 = !{i64 120263}
!13466 = !{i64 120265}
!13467 = !{i64 120269}
!13468 = !{i64 120274}
!13469 = !{i64 120279}
!13470 = !{i64 120283}
!13471 = !{i64 120285}
!13472 = !{i64 120287}
!13473 = !{i64 120294}
!13474 = !{i64 120303}
!13475 = !{i64 120310}
!13476 = !{i64 120312}
!13477 = !{i64 120319}
!13478 = !{i64 120317}
!13479 = !{i64 120327}
!13480 = !{i64 120334}
!13481 = !{i64 120336}
!13482 = !{i64 120343}
!13483 = !{i64 120355}
!13484 = !{i64 120372}
!13485 = !{i64 120374}
!13486 = !{i64 120381}
!13487 = !{i64 120383}
!13488 = !{i64 120387}
!13489 = !{i64 120394}
!13490 = !{i64 120401}
!13491 = !{i64 120404}
!13492 = !{i64 120421}
!13493 = !{i64 120433}
!13494 = !{i64 120435}
!13495 = !{i64 120442}
!13496 = !{i64 120445}
!13497 = !{i64 120461}
!13498 = !{i64 120474}
!13499 = !{i64 120484}
!13500 = !{i64 120495}
!13501 = !{i64 120497}
!13502 = !{i64 120504}
!13503 = !{i64 120515}
!13504 = !{i64 120520}
!13505 = !{i64 120525}
!13506 = !{i64 120532}
!13507 = !{i64 120535}
!13508 = !{i64 120538}
!13509 = !{i64 120566}
!13510 = !{i64 120592}
!13511 = !{i64 120596}
!13512 = !{i64 120604}
!13513 = !{i64 120613}
!13514 = !{i64 120622}
!13515 = !{i64 120631}
!13516 = !{i64 120635}
!13517 = !{i64 120643}
!13518 = !{i64 120793}
!13519 = !{i64 120796}
!13520 = !{i64 120800}
!13521 = !{i64 120805}
!13522 = !{i64 120840}
!13523 = !{i64 120841}
!13524 = !{i64 120869}
!13525 = !{i64 120883}
!13526 = !{i64 120891}
!13527 = !{i64 120900}
!13528 = !{i64 120894}
!13529 = !{i64 120927}
!13530 = !{i64 120932}
!13531 = !{i64 120942}
!13532 = !{i64 120944}
!13533 = !{i64 120948}
!13534 = !{i64 120952}
!13535 = !{i64 120956}
!13536 = !{i64 120960}
!13537 = !{i64 120966}
!13538 = !{i64 120971}
!13539 = !{i64 120975}
!13540 = !{i64 120979}
!13541 = !{i64 121001}
!13542 = !{i64 121004}
!13543 = !{i64 121051}
!13544 = !{i64 121054}
!13545 = !{i64 121057}
!13546 = !{i64 121107}
!13547 = !{i64 121113}
!13548 = !{i64 121114}
!13549 = !{i64 121124}
!13550 = !{i64 121161}
!13551 = !{i64 121189}
!13552 = !{i64 121206}
!13553 = !{i64 121214}
!13554 = !{i64 121223}
!13555 = !{i64 121232}
!13556 = !{i64 121217}
!13557 = !{i64 121259}
!13558 = !{i64 121264}
!13559 = !{i64 121274}
!13560 = !{i64 121276}
!13561 = !{i64 121280}
!13562 = !{i64 121284}
!13563 = !{i64 121288}
!13564 = !{i64 121292}
!13565 = !{i64 121298}
!13566 = !{i64 121303}
!13567 = !{i64 121307}
!13568 = !{i64 121311}
!13569 = !{i64 121333}
!13570 = !{i64 121336}
!13571 = !{i64 121383}
!13572 = !{i64 121386}
!13573 = !{i64 121389}
!13574 = !{i64 121439}
!13575 = !{i64 121445}
!13576 = !{i64 121446}
!13577 = !{i64 121456}
!13578 = !{i64 121493}
!13579 = !{i64 121498}
!13580 = !{i64 121506}
!13581 = !{i64 121511}
!13582 = !{i64 121516}
!13583 = !{i64 121519}
!13584 = !{i64 121514}
!13585 = !{i64 121526}
!13586 = !{i64 121542}
!13587 = !{i64 121551}
!13588 = !{i64 121554}
!13589 = !{i64 121556}
!13590 = !{i64 121558}
!13591 = !{i64 121560}
!13592 = !{i64 121564}
!13593 = !{i64 121568}
!13594 = !{i64 121578}
!13595 = !{i64 121592}
!13596 = !{i64 121595}
!13597 = !{i64 121603}
!13598 = !{i64 121605}
!13599 = !{i64 121607}
!13600 = !{i64 121611}
!13601 = !{i64 121615}
!13602 = !{i64 121622}
!13603 = !{i64 121624}
!13604 = !{i64 121626}
!13605 = !{i64 121630}
!13606 = !{i64 121642}
!13607 = !{i64 121652}
!13608 = !{i64 121660}
!13609 = !{i64 121665}
!13610 = !{i64 121667}
!13611 = !{i64 121669}
!13612 = !{i64 121674}
!13613 = !{i64 121682}
!13614 = !{i64 121690}
!13615 = !{i64 121698}
!13616 = !{i64 121712}
!13617 = !{i64 121713}
!13618 = !{i64 121741}
!13619 = !{i64 121749}
!13620 = !{i64 121774}
!13621 = !{i64 121779}
!13622 = !{i64 121794}
!13623 = !{i64 121805}
!13624 = !{i64 121820}
!13625 = !{i64 121827}
!13626 = !{i64 121829}
!13627 = !{i64 121840}
!13628 = !{i64 121843}
!13629 = !{i64 121871}
!13630 = !{i64 121880}
!13631 = !{i64 121884}
!13632 = !{i64 121889}
!13633 = !{i64 121913}
!13634 = !{i64 121918}
!13635 = !{i64 121922}
!13636 = !{i64 121926}
!13637 = !{i64 121933}
!13638 = !{i64 121937}
!13639 = !{i64 121943}
!13640 = !{i64 121953}
!13641 = !{i64 121984}
!13642 = !{i64 121985}
!13643 = !{i64 121987}
!13644 = !{i64 121994}
!13645 = !{i64 121999}
!13646 = !{i64 122007}
!13647 = !{i64 122010}
!13648 = !{i64 122015}
!13649 = !{i64 122023}
!13650 = !{i64 122034}
!13651 = !{i64 122035}
!13652 = !{i64 122063}
!13653 = !{i64 122074}
!13654 = !{i64 122089}
!13655 = !{i64 122100}
!13656 = !{i64 122115}
!13657 = !{i64 122122}
!13658 = !{i64 122124}
!13659 = !{i64 122135}
!13660 = !{i64 122138}
!13661 = !{i64 122166}
!13662 = !{i64 122175}
!13663 = !{i64 122179}
!13664 = !{i64 122199}
!13665 = !{i64 122202}
!13666 = !{i64 122205}
!13667 = !{i64 122212}
!13668 = !{i64 122215}
!13669 = !{i64 122223}
!13670 = !{i64 122236}
!13671 = !{i64 122238}
!13672 = !{i64 122241}
!13673 = !{i64 122244}
!13674 = !{i64 122246}
!13675 = !{i64 122249}
!13676 = !{i64 122252}
!13677 = !{i64 122254}
!13678 = !{i64 122258}
!13679 = !{i64 122261}
!13680 = !{i64 122275}
!13681 = !{i64 122280}
!13682 = !{i64 122288}
!13683 = !{i64 122295}
!13684 = !{i64 122299}
!13685 = !{i64 122304}
!13686 = !{i64 122310}
!13687 = !{i64 122315}
!13688 = !{i64 122326}
!13689 = !{i64 122331}
!13690 = !{i64 122342}
!13691 = !{i64 122347}
!13692 = !{i64 122354}
!13693 = !{i64 122358}
!13694 = !{i64 122363}
!13695 = !{i64 122374}
!13696 = !{i64 122379}
!13697 = !{i64 122390}
!13698 = !{i64 122395}
!13699 = !{i64 122401}
!13700 = !{i64 122402}
!13701 = !{i64 122409}
!13702 = !{i64 122425}
!13703 = !{i64 122438}
!13704 = !{i64 122445}
!13705 = !{i64 122454}
!13706 = !{i64 122467}
!13707 = !{i64 122481}
!13708 = !{i64 122486}
!13709 = !{i64 122493}
!13710 = !{i64 122500}
!13711 = !{i64 122512}
!13712 = !{i64 122524}
!13713 = !{i64 122536}
!13714 = !{i64 122548}
!13715 = !{i64 122552}
!13716 = !{i64 122556}
!13717 = !{i64 122560}
!13718 = !{i64 122562}
!13719 = !{i64 122569}
!13720 = !{i64 122576}
!13721 = !{i64 122583}
!13722 = !{i64 122590}
!13723 = !{i64 122597}
!13724 = !{i64 122608}
!13725 = !{i64 122613}
!13726 = !{i64 122620}
!13727 = !{i64 122634}
!13728 = !{i64 122639}
!13729 = !{i64 122646}
!13730 = !{i64 122657}
!13731 = !{i64 122662}
!13732 = !{i64 122669}
!13733 = !{i64 122680}
!13734 = !{i64 122685}
!13735 = !{i64 122692}
!13736 = !{i64 122702}
!13737 = !{i64 122712}
!13738 = !{i64 122719}
!13739 = !{i64 122726}
!13740 = !{i64 122733}
!13741 = !{i64 122743}
!13742 = !{i64 122753}
!13743 = !{i64 122760}
!13744 = !{i64 122767}
!13745 = !{i64 122774}
!13746 = !{i64 122784}
!13747 = !{i64 122794}
!13748 = !{i64 122801}
!13749 = !{i64 122808}
!13750 = !{i64 122815}
!13751 = !{i64 122825}
!13752 = !{i64 122835}
!13753 = !{i64 122842}
!13754 = !{i64 122849}
!13755 = !{i64 122856}
!13756 = !{i64 122866}
!13757 = !{i64 122876}
!13758 = !{i64 122883}
!13759 = !{i64 122890}
!13760 = !{i64 122897}
!13761 = !{i64 122907}
!13762 = !{i64 122917}
!13763 = !{i64 122924}
!13764 = !{i64 122931}
!13765 = !{i64 122938}
!13766 = !{i64 122945}
!13767 = !{i64 122955}
!13768 = !{i64 122965}
!13769 = !{i64 122972}
!13770 = !{i64 122979}
!13771 = !{i64 122986}
!13772 = !{i64 122996}
!13773 = !{i64 123006}
!13774 = !{i64 123013}
!13775 = !{i64 123020}
!13776 = !{i64 123027}
!13777 = !{i64 123037}
!13778 = !{i64 123047}
!13779 = !{i64 123054}
!13780 = !{i64 123061}
!13781 = !{i64 123071}
!13782 = !{i64 123081}
!13783 = !{i64 123088}
!13784 = !{i64 123095}
!13785 = !{i64 123106}
!13786 = !{i64 123117}
!13787 = !{i64 123128}
!13788 = !{i64 123135}
!13789 = !{i64 123145}
!13790 = !{i64 123155}
!13791 = !{i64 123162}
!13792 = !{i64 123175}
!13793 = !{i64 123177}
!13794 = !{i64 123180}
!13795 = !{i64 123182}
!13796 = !{i64 123184}
!13797 = !{i64 123186}
!13798 = !{i64 123196}
!13799 = !{i64 123203}
!13800 = !{i64 123219}
!13801 = !{i64 123224}
!13802 = !{i64 123229}
!13803 = !{i64 123234}
!13804 = !{i64 123237}
!13805 = !{i64 123232}
!13806 = !{i64 123244}
!13807 = !{i64 123246}
!13808 = !{i64 123257}
!13809 = !{i64 123284}
!13810 = !{i64 123292}
!13811 = !{i64 123299}
!13812 = !{i64 123306}
!13813 = !{i64 123316}
!13814 = !{i64 123321}
!13815 = !{i64 123356}
!13816 = !{i64 123361}
!13817 = !{i64 123373}
!13818 = !{i64 123382}
!13819 = !{i64 123387}
!13820 = !{i64 123399}
!13821 = !{i64 123401}
!13822 = !{i64 123404}
!13823 = !{i64 123411}
!13824 = !{i64 123416}
!13825 = !{i64 123428}
!13826 = !{i64 123430}
!13827 = !{i64 123434}
!13828 = !{i64 123441}
!13829 = !{i64 123446}
!13830 = !{i64 123458}
!13831 = !{i64 123460}
!13832 = !{i64 123464}
!13833 = !{i64 123471}
!13834 = !{i64 123476}
!13835 = !{i64 123488}
!13836 = !{i64 123490}
!13837 = !{i64 123494}
!13838 = !{i64 123501}
!13839 = !{i64 123506}
!13840 = !{i64 123518}
!13841 = !{i64 123520}
!13842 = !{i64 123524}
!13843 = !{i64 123531}
!13844 = !{i64 123536}
!13845 = !{i64 123548}
!13846 = !{i64 123550}
!13847 = !{i64 123554}
!13848 = !{i64 123561}
!13849 = !{i64 123566}
!13850 = !{i64 123578}
!13851 = !{i64 123580}
!13852 = !{i64 123584}
!13853 = !{i64 123591}
!13854 = !{i64 123596}
!13855 = !{i64 123608}
!13856 = !{i64 123610}
!13857 = !{i64 123614}
!13858 = !{i64 123621}
!13859 = !{i64 123626}
!13860 = !{i64 123638}
!13861 = !{i64 123640}
!13862 = !{i64 123644}
!13863 = !{i64 123651}
!13864 = !{i64 123656}
!13865 = !{i64 123668}
!13866 = !{i64 123670}
!13867 = !{i64 123674}
!13868 = !{i64 123681}
!13869 = !{i64 123684}
!13870 = !{i64 123696}
!13871 = !{i64 123698}
!13872 = !{i64 123702}
!13873 = !{i64 123709}
!13874 = !{i64 123712}
!13875 = !{i64 123724}
!13876 = !{i64 123726}
!13877 = !{i64 123730}
!13878 = !{i64 123737}
!13879 = !{i64 123740}
!13880 = !{i64 123752}
!13881 = !{i64 123754}
!13882 = !{i64 123758}
!13883 = !{i64 123765}
!13884 = !{i64 123768}
!13885 = !{i64 123780}
!13886 = !{i64 123782}
!13887 = !{i64 123786}
!13888 = !{i64 123793}
!13889 = !{i64 123796}
!13890 = !{i64 123808}
!13891 = !{i64 123810}
!13892 = !{i64 123814}
!13893 = !{i64 123821}
!13894 = !{i64 123833}
!13895 = !{i64 123835}
!13896 = !{i64 123839}
!13897 = !{i64 123846}
!13898 = !{i64 123849}
!13899 = !{i64 123861}
!13900 = !{i64 123863}
!13901 = !{i64 123867}
!13902 = !{i64 123874}
!13903 = !{i64 123877}
!13904 = !{i64 123889}
!13905 = !{i64 123891}
!13906 = !{i64 123895}
!13907 = !{i64 123902}
!13908 = !{i64 123905}
!13909 = !{i64 123917}
!13910 = !{i64 123919}
!13911 = !{i64 123923}
!13912 = !{i64 123930}
!13913 = !{i64 123933}
!13914 = !{i64 123942}
!13915 = !{i64 123944}
!13916 = !{i64 123948}
!13917 = !{i64 123955}
!13918 = !{i64 123958}
!13919 = !{i64 123967}
!13920 = !{i64 123969}
!13921 = !{i64 123973}
!13922 = !{i64 123980}
!13923 = !{i64 123985}
!13924 = !{i64 123996}
!13925 = !{i64 124000}
!13926 = !{i64 124013}
!13927 = !{i64 124038}
!13928 = !{i64 124040}
!13929 = !{i64 124043}
!13930 = !{i64 124044}
!13931 = !{i64 124048}
!13932 = !{i64 124050}
!13933 = !{i64 124058}
!13934 = !{i64 124063}
!13935 = !{i64 124071}
!13936 = !{i64 124078}
!13937 = !{i64 124085}
!13938 = !{i64 124086}
!13939 = !{i64 124097}
!13940 = !{i64 124113}
!13941 = !{i64 124116}
!13942 = !{i64 124129}
!13943 = !{i64 124132}
!13944 = !{i64 124135}
!13945 = !{i64 124138}
!13946 = !{i64 124149}
!13947 = !{i64 124152}
!13948 = !{i64 124145}
!13949 = !{i64 124203}
!13950 = !{i64 124205}
!13951 = !{i64 124207}
!13952 = !{i64 124210}
!13953 = !{i64 124213}
!13954 = !{i64 124245}
!13955 = !{i64 124247}
!13956 = !{i64 124250}
!13957 = !{i64 124257}
!13958 = !{i64 124260}
!13959 = !{i64 124264}
!13960 = !{i64 124267}
!13961 = !{i64 124292}
!13962 = !{i64 124310}
!13963 = !{i64 124331}
!13964 = !{i64 124409}
!13965 = !{i64 124881}
!13966 = !{i64 124929}
!13967 = !{i64 124933}
!13968 = !{i64 124938}
!13969 = !{i64 124941}
!13970 = !{i64 124943}
!13971 = !{i64 124946}
!13972 = !{i64 124975}
!13973 = !{i64 124978}
!13974 = !{i64 124980}
!13975 = !{i64 124983}
!13976 = !{i64 124986}
!13977 = !{i64 125031}
!13978 = !{i64 125033}
!13979 = !{i64 125036}
!13980 = !{i64 125049}
!13981 = !{i64 125052}
!13982 = !{i64 125055}
!13983 = !{i64 125072}
!13984 = !{i64 125083}
!13985 = !{i64 125128}
!13986 = !{i64 125144}
!13987 = !{i64 125154}
!13988 = !{i64 125161}
!13989 = !{i64 125170}
!13990 = !{i64 125178}
!13991 = !{i64 125185}
!13992 = !{i64 125194}
!13993 = !{i64 125199}
!13994 = !{i64 125206}
!13995 = !{i64 125215}
!13996 = !{i64 125220}
!13997 = !{i64 125227}
!13998 = !{i64 125236}
!13999 = !{i64 125241}
!14000 = !{i64 125248}
!14001 = !{i64 125257}
!14002 = !{i64 125274}
!14003 = !{i64 125276}
!14004 = !{i64 125278}
!14005 = !{i64 125292}
!14006 = !{i64 125295}
!14007 = !{i64 125297}
!14008 = !{i64 125299}
!14009 = !{i64 125308}
!14010 = !{i64 125310}
!14011 = !{i64 125313}
!14012 = !{i64 125316}
!14013 = !{i64 125322}
!14014 = !{i64 125326}
!14015 = !{i64 125335}
!14016 = !{i64 125339}
!14017 = !{i64 125344}
!14018 = !{i64 125355}
!14019 = !{i64 125360}
!14020 = !{i64 125371}
!14021 = !{i64 125376}
!14022 = !{i64 125382}
!14023 = !{i64 125407}
!14024 = !{i64 125481}
!14025 = !{i64 125484}
!14026 = !{i64 125509}
!14027 = !{i64 125518}
!14028 = !{i64 125532}
!14029 = !{i64 125536}
!14030 = !{i64 125554}
!14031 = !{i64 125565}
!14032 = !{i64 125570}
!14033 = !{i64 125575}
!14034 = !{i64 125579}
!14035 = !{i64 125585}
!14036 = !{i64 125587}
!14037 = !{i64 125593}
!14038 = !{i64 125601}
!14039 = !{i64 125611}
!14040 = !{i64 125645}
!14041 = !{i64 125649}
!14042 = !{i64 125657}
!14043 = !{i64 125686}
!14044 = !{i64 125688}
!14045 = !{i64 125690}
!14046 = !{i64 125695}
!14047 = !{i64 125704}
!14048 = !{i64 125733}
!14049 = !{i64 125744}
!14050 = !{i64 125752}
!14051 = !{i64 125799}
!14052 = !{i64 125976}
!14053 = !{i64 126168}
!14054 = !{i64 126219}
!14055 = !{i64 126221}
!14056 = !{i64 126290}
!14057 = !{i64 126296}
!14058 = !{i64 126307}
!14059 = !{i64 126313}
!14060 = !{i64 126324}
!14061 = !{i64 126332}
!14062 = !{i64 126330}
!14063 = !{i64 126348}
!14064 = !{i64 126354}
!14065 = !{i64 126362}
!14066 = !{i64 126368}
!14067 = !{i64 126382}
!14068 = !{i64 126360}
!14069 = !{i64 126392}
!14070 = !{i64 126394}
!14071 = !{i64 126402}
!14072 = !{i64 126404}
!14073 = !{i64 126407}
!14074 = !{i64 126409}
!14075 = !{i64 126413}
!14076 = !{i64 126415}
!14077 = !{i64 126419}
!14078 = !{i64 126427}
!14079 = !{i64 126433}
!14080 = !{i64 126439}
!14081 = !{i64 126451}
!14082 = !{i64 126437}
!14083 = !{i64 126460}
!14084 = !{i64 126464}
!14085 = !{i64 126468}
!14086 = !{i64 126476}
!14087 = !{i64 126482}
!14088 = !{i64 126483}
!14089 = !{i64 126493}
!14090 = !{i64 126530}
!14091 = !{i64 126546}
!14092 = !{i64 126557}
!14093 = !{i64 126563}
!14094 = !{i64 126569}
!14095 = !{i64 126577}
!14096 = !{i64 126618}
!14097 = !{i64 126620}
!14098 = !{i64 126633}
!14099 = !{i64 126654}
!14100 = !{i64 126667}
!14101 = !{i64 126681}
!14102 = !{i64 126699}
!14103 = !{i64 126714}
!14104 = !{i64 126719}
!14105 = !{i64 126724}
!14106 = !{i64 126728}
!14107 = !{i64 126733}
!14108 = !{i64 126738}
!14109 = !{i64 126746}
!14110 = !{i64 126752}
!14111 = !{i64 126754}
!14112 = !{i64 126816}
!14113 = !{i64 126827}
!14114 = !{i64 126831}
!14115 = !{i64 126834}
!14116 = !{i64 126856}
!14117 = !{i64 126873}
!14118 = !{i64 126878}
!14119 = !{i64 126882}
!14120 = !{i64 126887}
!14121 = !{i64 126891}
!14122 = !{i64 126899}
!14123 = !{i64 126904}
!14124 = !{i64 126908}
!14125 = !{i64 126913}
!14126 = !{i64 126917}
!14127 = !{i64 126922}
!14128 = !{i64 126926}
!14129 = !{i64 126931}
!14130 = !{i64 126935}
!14131 = !{i64 126940}
!14132 = !{i64 126944}
!14133 = !{i64 126949}
!14134 = !{i64 126953}
!14135 = !{i64 126958}
!14136 = !{i64 126962}
!14137 = !{i64 126967}
!14138 = !{i64 126971}
!14139 = !{i64 126976}
!14140 = !{i64 126980}
!14141 = !{i64 126985}
!14142 = !{i64 126989}
!14143 = !{i64 126994}
!14144 = !{i64 126998}
!14145 = !{i64 127003}
!14146 = !{i64 127007}
!14147 = !{i64 127012}
!14148 = !{i64 127016}
!14149 = !{i64 127024}
!14150 = !{i64 127028}
!14151 = !{i64 127036}
!14152 = !{i64 127040}
!14153 = !{i64 127048}
!14154 = !{i64 127056}
!14155 = !{i64 127063}
!14156 = !{i64 127068}
!14157 = !{i64 127076}
!14158 = !{i64 127083}
!14159 = !{i64 127087}
!14160 = !{i64 127096}
!14161 = !{i64 127099}
!14162 = !{i64 127103}
!14163 = !{i64 127108}
!14164 = !{i64 127116}
!14165 = !{i64 127124}
!14166 = !{i64 127131}
!14167 = !{i64 127134}
!14168 = !{i64 127142}
!14169 = !{i64 127145}
!14170 = !{i64 127148}
!14171 = !{i64 127152}
!14172 = !{i64 127156}
!14173 = !{i64 127160}
!14174 = !{i64 127163}
!14175 = !{i64 127167}
!14176 = !{i64 127171}
!14177 = !{i64 127189}
!14178 = !{i64 127194}
!14179 = !{i64 127271}
!14180 = !{i64 127275}
!14181 = !{i64 127286}
!14182 = !{i64 127300}
!14183 = !{i64 127316}
!14184 = !{i64 127317}
!14185 = !{i64 127321}
!14186 = !{i64 127334}
!14187 = !{i64 127331}
!14188 = !{i64 127341}
!14189 = !{i64 127346}
!14190 = !{i64 127350}
!14191 = !{i64 127368}
!14192 = !{i64 127391}
!14193 = !{i64 127402}
!14194 = !{i64 127425}
!14195 = !{i64 127676}
!14196 = !{i64 127679}
!14197 = !{i64 127683}
!14198 = !{i64 127693}
!14199 = !{i64 127720}
!14200 = !{i64 127732}
!14201 = !{i64 127995}
!14202 = !{i64 127999}
!14203 = !{i64 128002}
!14204 = !{i64 128010}
!14205 = !{i64 128014}
!14206 = !{i64 128017}
!14207 = !{i64 128029}
!14208 = !{i64 128032}
!14209 = !{i64 128041}
!14210 = !{i64 128045}
!14211 = !{i64 128048}
!14212 = !{i64 128054}
!14213 = !{i64 128373}
!14214 = !{i64 128381}
!14215 = !{i64 128384}
!14216 = !{i64 128388}
!14217 = !{i64 128392}
!14218 = !{i64 128400}
!14219 = !{i64 128404}
!14220 = !{i64 128407}
!14221 = !{i64 128397}
!14222 = !{i64 128411}
!14223 = !{i64 128423}
!14224 = !{i64 128435}
!14225 = !{i64 128437}
!14226 = !{i64 128440}
!14227 = !{i64 128442}
!14228 = !{i64 128482}
!14229 = !{i64 128494}
!14230 = !{i64 128598}
!14231 = !{i64 128608}
!14232 = !{i64 128611}
!14233 = !{i64 128685}
!14234 = !{i64 128698}
!14235 = !{i64 128711}
!14236 = !{i64 128720}
!14237 = !{i64 128775}
!14238 = !{i64 128779}
!14239 = !{i64 128834}
!14240 = !{i64 128838}
!14241 = !{i64 128889}
!14242 = !{i64 128893}
!14243 = !{i64 128896}
!14244 = !{i64 128926}
!14245 = !{i64 128940}
!14246 = !{i64 128942}
!14247 = !{i64 128944}
!14248 = !{i64 128951}
!14249 = !{i64 128955}
!14250 = !{i64 128958}
!14251 = !{i64 128961}
!14252 = !{i64 128965}
!14253 = !{i64 128968}
!14254 = !{i64 128979}
!14255 = !{i64 128988}
!14256 = !{i64 129005}
!14257 = !{i64 129012}
!14258 = !{i64 129015}
!14259 = !{i64 129019}
!14260 = !{i64 129021}
!14261 = !{i64 129023}
!14262 = !{i64 129052}
!14263 = !{i64 129071}
!14264 = !{i64 129210}
!14265 = !{i64 129271}
!14266 = !{i64 129300}
!14267 = !{i64 129312}
!14268 = !{i64 129314}
!14269 = !{i64 129317}
!14270 = !{i64 129319}
!14271 = !{i64 129359}
!14272 = !{i64 129384}
!14273 = !{i64 129398}
!14274 = !{i64 129417}
!14275 = !{i64 129427}
!14276 = !{i64 129443}
!14277 = !{i64 129452}
!14278 = !{i64 129455}
!14279 = !{i64 129462}
!14280 = !{i64 129465}
!14281 = !{i64 129469}
!14282 = !{i64 129471}
!14283 = !{i64 129479}
!14284 = !{i64 129486}
!14285 = !{i64 129491}
!14286 = !{i64 129493}
!14287 = !{i64 129495}
!14288 = !{i64 129497}
!14289 = !{i64 129501}
!14290 = !{i64 129510}
!14291 = !{i64 129531}
!14292 = !{i64 129539}
!14293 = !{i64 129550}
!14294 = !{i64 129561}
!14295 = !{i64 129569}
!14296 = !{i64 129575}
!14297 = !{i64 129583}
!14298 = !{i64 129585}
!14299 = !{i64 129587}
!14300 = !{i64 129636}
!14301 = !{i64 129640}
!14302 = !{i64 129642}
!14303 = !{i64 129644}
!14304 = !{i64 129648}
!14305 = !{i64 129654}
!14306 = !{i64 129664}
!14307 = !{i64 129658}
!14308 = !{i64 129662}
!14309 = !{i64 129675}
!14310 = !{i64 129669}
!14311 = !{i64 129673}
!14312 = !{i64 129941}
!14313 = !{i64 129682}
!14314 = !{i64 129685}
!14315 = !{i64 129691}
!14316 = !{i64 129694}
!14317 = !{i64 129696}
!14318 = !{i64 129699}
!14319 = !{i64 129705}
!14320 = !{i64 129708}
!14321 = !{i64 129719}
!14322 = !{i64 129800}
!14323 = !{i64 129860}
!14324 = !{i64 130001}
!14325 = !{i64 130082}
!14326 = !{i64 130086}
!14327 = !{i64 130150}
!14328 = !{i64 130227}
!14329 = !{i64 130231}
!14330 = !{i64 130244}
!14331 = !{i64 130256}
!14332 = !{i64 130258}
!14333 = !{i64 130261}
!14334 = !{i64 130263}
!14335 = !{i64 130303}
!14336 = !{i64 130304}
!14337 = !{i64 130315}
!14338 = !{i64 130326}
!14339 = !{i64 130334}
!14340 = !{i64 130339}
!14341 = !{i64 130385}
!14342 = !{i64 130337}
!14343 = !{i64 130393}
!14344 = !{i64 130399}
!14345 = !{i64 130403}
!14346 = !{i64 130409}
!14347 = !{i64 130413}
!14348 = !{i64 130419}
!14349 = !{i64 130423}
!14350 = !{i64 130473}
!14351 = !{i64 130477}
!14352 = !{i64 130483}
!14353 = !{i64 130487}
!14354 = !{i64 130509}
!14355 = !{i64 130518}
!14356 = !{i64 130533}
!14357 = !{i64 130535}
!14358 = !{i64 130537}
!14359 = !{i64 130541}
!14360 = !{i64 130544}
!14361 = !{i64 130548}
!14362 = !{i64 130550}
!14363 = !{i64 130553}
!14364 = !{i64 130565}
!14365 = !{i64 130577}
!14366 = !{i64 130939}
!14367 = !{i64 131152}
!14368 = !{i64 131154}
!14369 = !{i64 131157}
!14370 = !{i64 131159}
!14371 = !{i64 131199}
!14372 = !{i64 131220}
!14373 = !{i64 131231}
!14374 = !{i64 131247}
!14375 = !{i64 131250}
!14376 = !{i64 131252}
!14377 = !{i64 131255}
!14378 = !{i64 131257}
!14379 = !{i64 131260}
!14380 = !{i64 131302}
!14381 = !{i64 131310}
!14382 = !{i64 131339}
!14383 = !{i64 131347}
!14384 = !{i64 131373}
!14385 = !{i64 131381}
!14386 = !{i64 131391}
!14387 = !{i64 131398}
!14388 = !{i64 131405}
!14389 = !{i64 131433}
!14390 = !{i64 131438}
!14391 = !{i64 131440}
!14392 = !{i64 131442}
!14393 = !{i64 131462}
!14394 = !{i64 131490}
!14395 = !{i64 131498}
!14396 = !{i64 131517}
!14397 = !{i64 131522}
!14398 = !{i64 131524}
!14399 = !{i64 131527}
!14400 = !{i64 131530}
!14401 = !{i64 131538}
!14402 = !{i64 131539}
!14403 = !{i64 131543}
!14404 = !{i64 131548}
!14405 = !{i64 131550}
!14406 = !{i64 131552}
!14407 = !{i64 131558}
!14408 = !{i64 131569}
!14409 = !{i64 131570}
!14410 = !{i64 131581}
!14411 = !{i64 131920}
!14412 = !{i64 131926}
!14413 = !{i64 131935}
!14414 = !{i64 131948}
!14415 = !{i64 131952}
!14416 = !{i64 131958}
!14417 = !{i64 131967}
!14418 = !{i64 131970}
!14419 = !{i64 131974}
!14420 = !{i64 131978}
!14421 = !{i64 131984}
!14422 = !{i64 131993}
!14423 = !{i64 131996}
!14424 = !{i64 132000}
!14425 = !{i64 132004}
!14426 = !{i64 132008}
!14427 = !{i64 132015}
!14428 = !{i64 132019}
!14429 = !{i64 132034}
!14430 = !{i64 132113}
!14431 = !{i64 132125}
!14432 = !{i64 132127}
!14433 = !{i64 132130}
!14434 = !{i64 132132}
!14435 = !{i64 132172}
!14436 = !{i64 132184}
!14437 = !{i64 132207}
!14438 = !{i64 132268}
!14439 = !{i64 132271}
!14440 = !{i64 132275}
!14441 = !{i64 132279}
!14442 = !{i64 132283}
!14443 = !{i64 132287}
!14444 = !{i64 132294}
!14445 = !{i64 132298}
!14446 = !{i64 132301}
!14447 = !{i64 132304}
!14448 = !{i64 132306}
!14449 = !{i64 132310}
!14450 = !{i64 132314}
!14451 = !{i64 132318}
!14452 = !{i64 132322}
!14453 = !{i64 132326}
!14454 = !{i64 132396}
!14455 = !{i64 132409}
!14456 = !{i64 132422}
!14457 = !{i64 132427}
!14458 = !{i64 132431}
!14459 = !{i64 132435}
!14460 = !{i64 132439}
!14461 = !{i64 132443}
!14462 = !{i64 132451}
!14463 = !{i64 132483}
!14464 = !{i64 132487}
!14465 = !{i64 132498}
!14466 = !{i64 132499}
!14467 = !{i64 132527}
!14468 = !{i64 132628}
!14469 = !{i64 132656}
!14470 = !{i64 132660}
!14471 = !{i64 132669}
!14472 = !{i64 132673}
!14473 = !{i64 132677}
!14474 = !{i64 132681}
!14475 = !{i64 132685}
!14476 = !{i64 132692}
!14477 = !{i64 132696}
!14478 = !{i64 132707}
!14479 = !{i64 132731}
!14480 = !{i64 132741}
!14481 = !{i64 132788}
!14482 = !{i64 132813}
!14483 = !{i64 132846}
!14484 = !{i64 132905}
!14485 = !{i64 132912}
!14486 = !{i64 132916}
!14487 = !{i64 132919}
!14488 = !{i64 132921}
!14489 = !{i64 132924}
!14490 = !{i64 132929}
!14491 = !{i64 132933}
!14492 = !{i64 132936}
!14493 = !{i64 132956}
!14494 = !{i64 132968}
!14495 = !{i64 133384}
!14496 = !{i64 133393}
!14497 = !{i64 133405}
!14498 = !{i64 133407}
!14499 = !{i64 133410}
!14500 = !{i64 133412}
!14501 = !{i64 133452}
!14502 = !{i64 133464}
!14503 = !{i64 133497}
!14504 = !{i64 133568}
!14505 = !{i64 133580}
!14506 = !{i64 133593}
!14507 = !{i64 133606}
!14508 = !{i64 133619}
!14509 = !{i64 133632}
!14510 = !{i64 133644}
!14511 = !{i64 133650}
!14512 = !{i64 133701}
!14513 = !{i64 133708}
!14514 = !{i64 133712}
!14515 = !{i64 133715}
!14516 = !{i64 133721}
!14517 = !{i64 133725}
!14518 = !{i64 133728}
!14519 = !{i64 133734}
!14520 = !{i64 133738}
!14521 = !{i64 133741}
!14522 = !{i64 133744}
!14523 = !{i64 133748}
!14524 = !{i64 133751}
!14525 = !{i64 133754}
!14526 = !{i64 133758}
!14527 = !{i64 133766}
!14528 = !{i64 133798}
!14529 = !{i64 133802}
!14530 = !{i64 133813}
!14531 = !{i64 133825}
!14532 = !{i64 133858}
!14533 = !{i64 133911}
!14534 = !{i64 133987}
!14535 = !{i64 134000}
!14536 = !{i64 134013}
!14537 = !{i64 134026}
!14538 = !{i64 134036}
!14539 = !{i64 134091}
!14540 = !{i64 134098}
!14541 = !{i64 134102}
!14542 = !{i64 134105}
!14543 = !{i64 134111}
!14544 = !{i64 134115}
!14545 = !{i64 134118}
!14546 = !{i64 134124}
!14547 = !{i64 134128}
!14548 = !{i64 134131}
!14549 = !{i64 134134}
!14550 = !{i64 134138}
!14551 = !{i64 134141}
!14552 = !{i64 134188}
!14553 = !{i64 134192}
!14554 = !{i64 134199}
!14555 = !{i64 134245}
!14556 = !{i64 134248}
!14557 = !{i64 134254}
!14558 = !{i64 134258}
!14559 = !{i64 134261}
!14560 = !{i64 134267}
!14561 = !{i64 134271}
!14562 = !{i64 134274}
!14563 = !{i64 134277}
!14564 = !{i64 134281}
!14565 = !{i64 134284}
!14566 = !{i64 134295}
!14567 = !{i64 134307}
!14568 = !{i64 134348}
!14569 = !{i64 134467}
!14570 = !{i64 134478}
!14571 = !{i64 134487}
!14572 = !{i64 134493}
!14573 = !{i64 134499}
!14574 = !{i64 134506}
!14575 = !{i64 134513}
!14576 = !{i64 134520}
!14577 = !{i64 134527}
!14578 = !{i64 134533}
!14579 = !{i64 134540}
!14580 = !{i64 134543}
!14581 = !{i64 134557}
!14582 = !{i64 134586}
!14583 = !{i64 134605}
!14584 = !{i64 134612}
!14585 = !{i64 134614}
!14586 = !{i64 134618}
!14587 = !{i64 134621}
!14588 = !{i64 134623}
!14589 = !{i64 134627}
!14590 = !{i64 134629}
!14591 = !{i64 134636}
!14592 = !{i64 134648}
!14593 = !{i64 134655}
!14594 = !{i64 134657}
!14595 = !{i64 134661}
!14596 = !{i64 134663}
!14597 = !{i64 134670}
!14598 = !{i64 134697}
!14599 = !{i64 134716}
!14600 = !{i64 134933}
!14601 = !{i64 134945}
!14602 = !{i64 134947}
!14603 = !{i64 134950}
!14604 = !{i64 134952}
!14605 = !{i64 134992}
!14606 = !{i64 135004}
!14607 = !{i64 135090}
!14608 = !{i64 135144}
!14609 = !{i64 135152}
!14610 = !{i64 135156}
!14611 = !{i64 135165}
!14612 = !{i64 135168}
!14613 = !{i64 135170}
!14614 = !{i64 135196}
!14615 = !{i64 135200}
!14616 = !{i64 135212}
!14617 = !{i64 135233}
!14618 = !{i64 135308}
!14619 = !{i64 135316}
!14620 = !{i64 135324}
!14621 = !{i64 135334}
!14622 = !{i64 135360}
!14623 = !{i64 135364}
!14624 = !{i64 135381}
!14625 = !{i64 135382}
!14626 = !{i64 135402}
!14627 = !{i64 135413}
!14628 = !{i64 135450}
!14629 = !{i64 135479}
!14630 = !{i64 135487}
!14631 = !{i64 135495}
!14632 = !{i64 135503}
!14633 = !{i64 135519}
!14634 = !{i64 135530}
!14635 = !{i64 135538}
!14636 = !{i64 135553}
!14637 = !{i64 135557}
!14638 = !{i64 135567}
!14639 = !{i64 135571}
!14640 = !{i64 135589}
!14641 = !{i64 135600}
!14642 = !{i64 135626}
!14643 = !{i64 135730}
!14644 = !{i64 135737}
!14645 = !{i64 135743}
!14646 = !{i64 135747}
!14647 = !{i64 135753}
!14648 = !{i64 135542}
!14649 = !{i64 135560}
!14650 = !{i64 135574}
!14651 = !{i64 135563}
!14652 = !{i64 135775}
!14653 = !{i64 135786}
!14654 = !{i64 135784}
!14655 = !{i64 135544}
!14656 = !{i64 135577}
!14657 = !{i64 135807}
!14658 = !{i64 135810}
!14659 = !{i64 135826}
!14660 = !{i64 135830}
!14661 = !{i64 135834}
!14662 = !{i64 135851}
!14663 = !{i64 135858}
!14664 = !{i64 135983}
!14665 = !{i64 135987}
!14666 = !{i64 135994}
!14667 = !{i64 135998}
!14668 = !{i64 136015}
!14669 = !{i64 136031}
!14670 = !{i64 136035}
!14671 = !{i64 136039}
!14672 = !{i64 136044}
!14673 = !{i64 136072}
!14674 = !{i64 136096}
!14675 = !{i64 136097}
!14676 = !{i64 136117}
!14677 = !{i64 136131}
!14678 = !{i64 136135}
!14679 = !{i64 136142}
!14680 = !{i64 136154}
!14681 = !{i64 136168}
!14682 = !{i64 136187}
!14683 = !{i64 136181}
!14684 = !{i64 136207}
!14685 = !{i64 136212}
!14686 = !{i64 136214}
!14687 = !{i64 136216}
!14688 = !{i64 136196}
!14689 = !{i64 136229}
!14690 = !{i64 136234}
!14691 = !{i64 136237}
!14692 = !{i64 136239}
!14693 = !{i64 136243}
!14694 = !{i64 136249}
!14695 = !{i64 136253}
!14696 = !{i64 136259}
!14697 = !{i64 136263}
!14698 = !{i64 136269}
!14699 = !{i64 136273}
!14700 = !{i64 136299}
!14701 = !{i64 136312}
!14702 = !{i64 136325}
!14703 = !{i64 136331}
!14704 = !{i64 136379}
!14705 = !{i64 136390}
!14706 = !{i64 136392}
!14707 = !{i64 136401}
!14708 = !{i64 136406}
!14709 = !{i64 136410}
!14710 = !{i64 136526}
!14711 = !{i64 136530}
!14712 = !{i64 136543}
!14713 = !{i64 136559}
!14714 = !{i64 136563}
!14715 = !{i64 136567}
!14716 = !{i64 136572}
!14717 = !{i64 136608}
!14718 = !{i64 136613}
!14719 = !{i64 136621}
!14720 = !{i64 136632}
!14721 = !{i64 136654}
!14722 = !{i64 136670}
!14723 = !{i64 136692}
!14724 = !{i64 136709}
!14725 = !{i64 136739}
!14726 = !{i64 136754}
!14727 = !{i64 136776}
!14728 = !{i64 136788}
!14729 = !{i64 136803}
!14730 = !{i64 136820}
!14731 = !{i64 136829}
!14732 = !{i64 136835}
!14733 = !{i64 136860}
!14734 = !{i64 136872}
!14735 = !{i64 136876}
!14736 = !{i64 136882}
!14737 = !{i64 136884}
!14738 = !{i64 136888}
!14739 = !{i64 136890}
!14740 = !{i64 136894}
!14741 = !{i64 136922}
!14742 = !{i64 136933}
!14743 = !{i64 136943}
!14744 = !{i64 136963}
!14745 = !{i64 136974}
!14746 = !{i64 137005}
!14747 = !{i64 137014}
!14748 = !{i64 137023}
!14749 = !{i64 137018}
!14750 = !{i64 137045}
!14751 = !{i64 137054}
!14752 = !{i64 137057}
!14753 = !{i64 137061}
!14754 = !{i64 137063}
!14755 = !{i64 137067}
!14756 = !{i64 137086}
!14757 = !{i64 137088}
!14758 = !{i64 137098}
!14759 = !{i64 137102}
!14760 = !{i64 137180}
!14761 = !{i64 137194}
!14762 = !{i64 137208}
!14763 = !{i64 137221}
!14764 = !{i64 137223}
!14765 = !{i64 137236}
!14766 = !{i64 137239}
!14767 = !{i64 137271}
!14768 = !{i64 137285}
!14769 = !{i64 137295}
!14770 = !{i64 137298}
!14771 = !{i64 137307}
!14772 = !{i64 137305}
!14773 = !{i64 137335}
!14774 = !{i64 137339}
!14775 = !{i64 137343}
!14776 = !{i64 137347}
!14777 = !{i64 137349}
!14778 = !{i64 137352}
!14779 = !{i64 137414}
!14780 = !{i64 137457}
!14781 = !{i64 137459}
!14782 = !{i64 137478}
!14783 = !{i64 137486}
!14784 = !{i64 137545}
!14785 = !{i64 137550}
!14786 = !{i64 137609}
!14787 = !{i64 137614}
!14788 = !{i64 137673}
!14789 = !{i64 137698}
!14790 = !{i64 137704}
!14791 = !{i64 137723}
!14792 = !{i64 137725}
!14793 = !{i64 137728}
!14794 = !{i64 137733}
!14795 = !{i64 137735}
!14796 = !{i64 137737}
!14797 = !{i64 137752}
!14798 = !{i64 137761}
!14799 = !{i64 137769}
!14800 = !{i64 137772}
!14801 = !{i64 137775}
!14802 = !{i64 137781}
!14803 = !{i64 137789}
!14804 = !{i64 137830}
!14805 = !{i64 137832}
!14806 = !{i64 137978}
!14807 = !{i64 138040}
!14808 = !{i64 138104}
!14809 = !{i64 138560}
!14810 = !{i64 138760}
!14811 = !{i64 138890}
!14812 = !{i64 139017}
!14813 = !{i64 139022}
!14814 = !{i64 139035}
!14815 = !{i64 139043}
!14816 = !{i64 139051}
!14817 = !{i64 139057}
!14818 = !{i64 139063}
!14819 = !{i64 139104}
!14820 = !{i64 139106}
!14821 = !{i64 139122}
!14822 = !{i64 139599}
!14823 = !{i64 139643}
!14824 = !{i64 139654}
!14825 = !{i64 139657}
!14826 = !{i64 139652}
!14827 = !{i64 139790}
!14828 = !{i64 139805}
!14829 = !{i64 139819}
!14830 = !{i64 139822}
!14831 = !{i64 139824}
!14832 = !{i64 139866}
!14833 = !{i64 139883}
!14834 = !{i64 139894}
!14835 = !{i64 139897}
!14836 = !{i64 139969}
!14837 = !{i64 139982}
!14838 = !{i64 140029}
!14839 = !{i64 140034}
!14840 = !{i64 140109}
!14841 = !{i64 140114}
!14842 = !{i64 140117}
!14843 = !{i64 140132}
!14844 = !{i64 140155}
!14845 = !{i64 140161}
!14846 = !{i64 140171}
!14847 = !{i64 140179}
!14848 = !{i64 140182}
!14849 = !{i64 140461}
!14850 = !{i64 140471}
!14851 = !{i64 140473}
!14852 = !{i64 140475}
!14853 = !{i64 140478}
!14854 = !{i64 140480}
!14855 = !{i64 140518}
!14856 = !{i64 140530}
!14857 = !{i64 140541}
!14858 = !{i64 140549}
!14859 = !{i64 140551}
!14860 = !{i64 143034}
!14861 = !{i64 143105}
!14862 = !{i64 143121}
!14863 = !{i64 143126}
!14864 = !{i64 143131}
!14865 = !{i64 143172}
!14866 = !{i64 143174}
!14867 = !{i64 143261}
!14868 = !{i64 144416}
!14869 = !{i64 144428}
!14870 = !{i64 144430}
!14871 = !{i64 144433}
!14872 = !{i64 144435}
!14873 = !{i64 144475}
!14874 = !{i64 144485}
!14875 = !{i64 144490}
!14876 = !{i64 144516}
!14877 = !{i64 144520}
!14878 = !{i64 144524}
!14879 = !{i64 144531}
!14880 = !{i64 144538}
!14881 = !{i64 144545}
!14882 = !{i64 144549}
!14883 = !{i64 144553}
!14884 = !{i64 144557}
!14885 = !{i64 144564}
!14886 = !{i64 144566}
!14887 = !{i64 144568}
!14888 = !{i64 144570}
!14889 = !{i64 144577}
!14890 = !{i64 144584}
!14891 = !{i64 144591}
!14892 = !{i64 144593}
!14893 = !{i64 144596}
!14894 = !{i64 144598}
!14895 = !{i64 144605}
!14896 = !{i64 144612}
!14897 = !{i64 144619}
!14898 = !{i64 144621}
!14899 = !{i64 144624}
!14900 = !{i64 144626}
!14901 = !{i64 144633}
!14902 = !{i64 144640}
!14903 = !{i64 144647}
!14904 = !{i64 144649}
!14905 = !{i64 144656}
!14906 = !{i64 144663}
!14907 = !{i64 144670}
!14908 = !{i64 144677}
!14909 = !{i64 144684}
!14910 = !{i64 144691}
!14911 = !{i64 144695}
!14912 = !{i64 144699}
!14913 = !{i64 144703}
!14914 = !{i64 144710}
!14915 = !{i64 144712}
!14916 = !{i64 144714}
!14917 = !{i64 144716}
!14918 = !{i64 144723}
!14919 = !{i64 144730}
!14920 = !{i64 144737}
!14921 = !{i64 144739}
!14922 = !{i64 144742}
!14923 = !{i64 144744}
!14924 = !{i64 144751}
!14925 = !{i64 144758}
!14926 = !{i64 144765}
!14927 = !{i64 144767}
!14928 = !{i64 144770}
!14929 = !{i64 144772}
!14930 = !{i64 144779}
!14931 = !{i64 144786}
!14932 = !{i64 144793}
!14933 = !{i64 144795}
!14934 = !{i64 144802}
!14935 = !{i64 144809}
!14936 = !{i64 144816}
!14937 = !{i64 144823}
!14938 = !{i64 144830}
!14939 = !{i64 144837}
!14940 = !{i64 144841}
!14941 = !{i64 144845}
!14942 = !{i64 144849}
!14943 = !{i64 144856}
!14944 = !{i64 144858}
!14945 = !{i64 144860}
!14946 = !{i64 144862}
!14947 = !{i64 144869}
!14948 = !{i64 144876}
!14949 = !{i64 144883}
!14950 = !{i64 144885}
!14951 = !{i64 144888}
!14952 = !{i64 144890}
!14953 = !{i64 144897}
!14954 = !{i64 144904}
!14955 = !{i64 144911}
!14956 = !{i64 144913}
!14957 = !{i64 144916}
!14958 = !{i64 144918}
!14959 = !{i64 144925}
!14960 = !{i64 144932}
!14961 = !{i64 144939}
!14962 = !{i64 144941}
!14963 = !{i64 144948}
!14964 = !{i64 144955}
!14965 = !{i64 144962}
!14966 = !{i64 144969}
!14967 = !{i64 144976}
!14968 = !{i64 144983}
!14969 = !{i64 144990}
!14970 = !{i64 144997}
!14971 = !{i64 145004}
!14972 = !{i64 145011}
!14973 = !{i64 145013}
!14974 = !{i64 145015}
!14975 = !{i64 145017}
!14976 = !{i64 145027}
!14977 = !{i64 145037}
!14978 = !{i64 145047}
!14979 = !{i64 145049}
!14980 = !{i64 145052}
!14981 = !{i64 145054}
!14982 = !{i64 145064}
!14983 = !{i64 145074}
!14984 = !{i64 145084}
!14985 = !{i64 145086}
!14986 = !{i64 145089}
!14987 = !{i64 145091}
!14988 = !{i64 145101}
!14989 = !{i64 145111}
!14990 = !{i64 145121}
!14991 = !{i64 145123}
!14992 = !{i64 145133}
!14993 = !{i64 145143}
!14994 = !{i64 145153}
!14995 = !{i64 145172}
!14996 = !{i64 145174}
!14997 = !{i64 145182}
!14998 = !{i64 145188}
!14999 = !{i64 145193}
!15000 = !{i64 145203}
!15001 = !{i64 145219}
!15002 = !{i64 145237}
!15003 = !{i64 145245}
!15004 = !{i64 145248}
!15005 = !{i64 146128}
!15006 = !{i64 146130}
!15007 = !{i64 146323}
!15008 = !{i64 146333}
!15009 = !{i64 146373}
!15010 = !{i64 146379}
!15011 = !{i64 146381}
!15012 = !{i64 146390}
!15013 = !{i64 146403}
!15014 = !{i64 146408}
!15015 = !{i64 146410}
!15016 = !{i64 146415}
!15017 = !{i64 146426}
!15018 = !{i64 146434}
!15019 = !{i64 146466}
!15020 = !{i64 146506}
!15021 = !{i64 146511}
!15022 = !{i64 146518}
!15023 = !{i64 146546}
!15024 = !{i64 146568}
!15025 = !{i64 146573}
!15026 = !{i64 146581}
!15027 = !{i64 146583}
!15028 = !{i64 146588}
!15029 = !{i64 146599}
!15030 = !{i64 146604}
!15031 = !{i64 146610}
!15032 = !{i64 146616}
!15033 = !{i64 146624}
!15034 = !{i64 146629}
!15035 = !{i64 146634}
!15036 = !{i64 146648}
!15037 = !{i64 146652}
!15038 = !{i64 146657}
!15039 = !{i64 146658}
!15040 = !{i64 146675}
!15041 = !{i64 146686}
!15042 = !{i64 146689}
!15043 = !{i64 146693}
!15044 = !{i64 146703}
!15045 = !{i64 146709}
!15046 = !{i64 146717}
!15047 = !{i64 146720}
!15048 = !{i64 146724}
!15049 = !{i64 146726}
!15050 = !{i64 146733}
!15051 = !{i64 146740}
!15052 = !{i64 146743}
!15053 = !{i64 146749}
!15054 = !{i64 146760}
!15055 = !{i64 146754}
!15056 = !{i64 146771}
!15057 = !{i64 146798}
!15058 = !{i64 146869}
!15059 = !{i64 146877}
!15060 = !{i64 146879}
!15061 = !{i64 146883}
!15062 = !{i64 146886}
!15063 = !{i64 146889}
!15064 = !{i64 146892}
!15065 = !{i64 146894}
!15066 = !{i64 146896}
!15067 = !{i64 146899}
!15068 = !{i64 146903}
!15069 = !{i64 146907}
!15070 = !{i64 146911}
!15071 = !{i64 146913}
!15072 = !{i64 146915}
!15073 = !{i64 146918}
!15074 = !{i64 146921}
!15075 = !{i64 146927}
!15076 = !{i64 146923}
!15077 = !{i64 146935}
!15078 = !{i64 146942}
!15079 = !{i64 146950}
!15080 = !{i64 146952}
!15081 = !{i64 146971}
!15082 = !{i64 147006}
!15083 = !{i64 147023}
!15084 = !{i64 147047}
!15085 = !{i64 147051}
!15086 = !{i64 147061}
!15087 = !{i64 147067}
!15088 = !{i64 147076}
!15089 = !{i64 147080}
!15090 = !{i64 147082}
!15091 = !{i64 147089}
!15092 = !{i64 147102}
!15093 = !{i64 147108}
!15094 = !{i64 147112}
!15095 = !{i64 147180}
!15096 = !{i64 147188}
!15097 = !{i64 147190}
!15098 = !{i64 147194}
!15099 = !{i64 147197}
!15100 = !{i64 147200}
!15101 = !{i64 147203}
!15102 = !{i64 147205}
!15103 = !{i64 147207}
!15104 = !{i64 147210}
!15105 = !{i64 147214}
!15106 = !{i64 147218}
!15107 = !{i64 147221}
!15108 = !{i64 147223}
!15109 = !{i64 147225}
!15110 = !{i64 147227}
!15111 = !{i64 147229}
!15112 = !{i64 147257}
!15113 = !{i64 147385}
!15114 = !{i64 147394}
!15115 = !{i64 147399}
!15116 = !{i64 147416}
!15117 = !{i64 147419}
!15118 = !{i64 147425}
!15119 = !{i64 147432}
!15120 = !{i64 147436}
!15121 = !{i64 147440}
!15122 = !{i64 147450}
!15123 = !{i64 147453}
!15124 = !{i64 147467}
!15125 = !{i64 147472}
!15126 = !{i64 147478}
!15127 = !{i64 147487}
!15128 = !{i64 147492}
!15129 = !{i64 147502}
!15130 = !{i64 147506}
!15131 = !{i64 147513}
!15132 = !{i64 147530}
!15133 = !{i64 147538}
!15134 = !{i64 147541}
!15135 = !{i64 147549}
!15136 = !{i64 147556}
!15137 = !{i64 147566}
!15138 = !{i64 147577}
!15139 = !{i64 147583}
!15140 = !{i64 147593}
!15141 = !{i64 147601}
!15142 = !{i64 147604}
!15143 = !{i64 147611}
!15144 = !{i64 147615}
!15145 = !{i64 147626}
!15146 = !{i64 147633}
!15147 = !{i64 147637}
!15148 = !{i64 147642}
!15149 = !{i64 147645}
!15150 = !{i64 147647}
!15151 = !{i64 147658}
!15152 = !{i64 147661}
!15153 = !{i64 147663}
!15154 = !{i64 147667}
!15155 = !{i64 147669}
!15156 = !{i64 147680}
!15157 = !{i64 147681}
!15158 = !{i64 147690}
!15159 = !{i64 147698}
!15160 = !{i64 147701}
!15161 = !{i64 147728}
!15162 = !{i64 147737}
!15163 = !{i64 147745}
!15164 = !{i64 147753}
!15165 = !{i64 147768}
!15166 = !{i64 147776}
!15167 = !{i64 147781}
!15168 = !{i64 147786}
!15169 = !{i64 147807}
!15170 = !{i64 147815}
!15171 = !{i64 148023}
!15172 = !{i64 148031}
!15173 = !{i64 148036}
!15174 = !{i64 148041}
!15175 = !{i64 148062}
!15176 = !{i64 148070}
!15177 = !{i64 148085}
!15178 = !{i64 148093}
!15179 = !{i64 148108}
!15180 = !{i64 148115}
!15181 = !{i64 148126}
!15182 = !{i64 148129}
!15183 = !{i64 148139}
!15184 = !{i64 148150}
!15185 = !{i64 148152}
!15186 = !{i64 148156}
!15187 = !{i64 148166}
!15188 = !{i64 148177}
!15189 = !{i64 148179}
!15190 = !{i64 148183}
!15191 = !{i64 148193}
!15192 = !{i64 148204}
!15193 = !{i64 148214}
!15194 = !{i64 148240}
!15195 = !{i64 148252}
!15196 = !{i64 148264}
!15197 = !{i64 148277}
!15198 = !{i64 148282}
!15199 = !{i64 148286}
!15200 = !{i64 148294}
!15201 = !{i64 148303}
!15202 = !{i64 148306}
!15203 = !{i64 148310}
!15204 = !{i64 148314}
!15205 = !{i64 148334}
!15206 = !{i64 148346}
!15207 = !{i64 148350}
!15208 = !{i64 148358}
!15209 = !{i64 148398}
!15210 = !{i64 148406}
!15211 = !{i64 148415}
!15212 = !{i64 148440}
!15213 = !{i64 148457}
!15214 = !{i64 148495}
!15215 = !{i64 148498}
!15216 = !{i64 148510}
!15217 = !{i64 148545}
!15218 = !{i64 148559}
!15219 = !{i64 148580}
!15220 = !{i64 148600}
!15221 = !{i64 148605}
!15222 = !{i64 148616}
!15223 = !{i64 148620}
!15224 = !{i64 148704}
!15225 = !{i64 148758}
!15226 = !{i64 148768}
!15227 = !{i64 148815}
!15228 = !{i64 148820}
!15229 = !{i64 148822}
!15230 = !{i64 148824}
!15231 = !{i64 148829}
!15232 = !{i64 148831}
!15233 = !{i64 148833}
!15234 = !{i64 148840}
!15235 = !{i64 148849}
!15236 = !{i64 148854}
!15237 = !{i64 148864}
!15238 = !{i64 148867}
!15239 = !{i64 148876}
!15240 = !{i64 148881}
!15241 = !{i64 148887}
!15242 = !{i64 148891}
!15243 = !{i64 148893}
!15244 = !{i64 148896}
!15245 = !{i64 148904}
!15246 = !{i64 148910}
!15247 = !{i64 148931}
!15248 = !{i64 148942}
!15249 = !{i64 148963}
!15250 = !{i64 148977}
!15251 = !{i64 148992}
!15252 = !{i64 148997}
!15253 = !{i64 149017}
!15254 = !{i64 149022}
!15255 = !{i64 149036}
!15256 = !{i64 149034}
!15257 = !{i64 149042}
!15258 = !{i64 149051}
!15259 = !{i64 149056}
!15260 = !{i64 149060}
!15261 = !{i64 149073}
!15262 = !{i64 149078}
!15263 = !{i64 149084}
!15264 = !{i64 149088}
!15265 = !{i64 149090}
!15266 = !{i64 149093}
!15267 = !{i64 149101}
!15268 = !{i64 149107}
!15269 = !{i64 149125}
!15270 = !{i64 149146}
!15271 = !{i64 149150}
!15272 = !{i64 149166}
!15273 = !{i64 149195}
!15274 = !{i64 149224}
!15275 = !{i64 149253}
!15276 = !{i64 149278}
!15277 = !{i64 149283}
!15278 = !{i64 149295}
!15279 = !{i64 149320}
!15280 = !{i64 149342}
!15281 = !{i64 149345}
!15282 = !{i64 149350}
!15283 = !{i64 149352}
!15284 = !{i64 149370}
!15285 = !{i64 149375}
!15286 = !{i64 149392}
!15287 = !{i64 149413}
!15288 = !{i64 149434}
!15289 = !{i64 149449}
!15290 = !{i64 149452}
!15291 = !{i64 149474}
!15292 = !{i64 149503}
!15293 = !{i64 149532}
!15294 = !{i64 149561}
!15295 = !{i64 149590}
!15296 = !{i64 149619}
!15297 = !{i64 149648}
!15298 = !{i64 149677}
!15299 = !{i64 149706}
!15300 = !{i64 149735}
!15301 = !{i64 149764}
!15302 = !{i64 149802}
!15303 = !{i64 149823}
!15304 = !{i64 149844}
!15305 = !{i64 149854}
!15306 = !{i64 149875}
!15307 = !{i64 149904}
!15308 = !{i64 149933}
!15309 = !{i64 149962}
!15310 = !{i64 149987}
!15311 = !{i64 150012}
!15312 = !{i64 150042}
!15313 = !{i64 150063}
!15314 = !{i64 150068}
!15315 = !{i64 150076}
!15316 = !{i64 150084}
!15317 = !{i64 150121}
!15318 = !{i64 150142}
!15319 = !{i64 150153}
!15320 = !{i64 150178}
!15321 = !{i64 150181}
!15322 = !{i64 150185}
!15323 = !{i64 150189}
!15324 = !{i64 150200}
!15325 = !{i64 150204}
!15326 = !{i64 150216}
!15327 = !{i64 150225}
!15328 = !{i64 150258}
!15329 = !{i64 150263}
!15330 = !{i64 150265}
!15331 = !{i64 150267}
!15332 = !{i64 150274}
!15333 = !{i64 150276}
!15334 = !{i64 150286}
!15335 = !{i64 150288}
!15336 = !{i64 150316}
!15337 = !{i64 150333}
!15338 = !{i64 150343}
!15339 = !{i64 150369}
!15340 = !{i64 150390}
!15341 = !{i64 150397}
!15342 = !{i64 150399}
!15343 = !{i64 150408}
!15344 = !{i64 150421}
!15345 = !{i64 150422}
!15346 = !{i64 150430}
!15347 = !{i64 150438}
!15348 = !{i64 150445}
!15349 = !{i64 150447}
!15350 = !{i64 150450}
!15351 = !{i64 150464}
!15352 = !{i64 150470}
!15353 = !{i64 150471}
!15354 = !{i64 150499}
!15355 = !{i64 150548}
!15356 = !{i64 150553}
!15357 = !{i64 150555}
!15358 = !{i64 150570}
!15359 = !{i64 150575}
!15360 = !{i64 150582}
!15361 = !{i64 150584}
!15362 = !{i64 150588}
!15363 = !{i64 150591}
!15364 = !{i64 150595}
!15365 = !{i64 150597}
!15366 = !{i64 150602}
!15367 = !{i64 150604}
!15368 = !{i64 150657}
!15369 = !{i64 150658}
!15370 = !{i64 150659}
!15371 = !{i64 150663}
!15372 = !{i64 150677}
!15373 = !{i64 150675}
!15374 = !{i64 150692}
!15375 = !{i64 150697}
!15376 = !{i64 150705}
!15377 = !{i64 150706}
!15378 = !{i64 150714}
!15379 = !{i64 150722}
!15380 = !{i64 150729}
!15381 = !{i64 150731}
!15382 = !{i64 150734}
!15383 = !{i64 150748}
!15384 = !{i64 150754}
!15385 = !{i64 150783}
!15386 = !{i64 150801}
!15387 = !{i64 150821}
!15388 = !{i64 150836}
!15389 = !{i64 150839}
!15390 = !{i64 150861}
!15391 = !{i64 150889}
!15392 = !{i64 150932}
!15393 = !{i64 150945}
!15394 = !{i64 150965}
!15395 = !{i64 150978}
!15396 = !{i64 151000}
!15397 = !{i64 151013}
!15398 = !{i64 151017}
!15399 = !{i64 151021}
!15400 = !{i64 151025}
!15401 = !{i64 151028}
!15402 = !{i64 151032}
!15403 = !{i64 151036}
!15404 = !{i64 151054}
!15405 = !{i64 151195}
!15406 = !{i64 151233}
!15407 = !{i64 151246}
!15408 = !{i64 151266}
!15409 = !{i64 151279}
!15410 = !{i64 151283}
!15411 = !{i64 151287}
!15412 = !{i64 151291}
!15413 = !{i64 151309}
!15414 = !{i64 151348}
!15415 = !{i64 151444}
!15416 = !{i64 151453}
!15417 = !{i64 151455}
!15418 = !{i64 151500}
!15419 = !{i64 151501}
!15420 = !{i64 151510}
!15421 = !{i64 151518}
!15422 = !{i64 151521}
!15423 = !{i64 151523}
!15424 = !{i64 151528}
!15425 = !{i64 151534}
!15426 = !{i64 151542}
!15427 = !{i64 151543}
!15428 = !{i64 151547}
!15429 = !{i64 151564}
!15430 = !{i64 151575}
!15431 = !{i64 151581}
!15432 = !{i64 151610}
!15433 = !{i64 151628}
!15434 = !{i64 151648}
!15435 = !{i64 151657}
!15436 = !{i64 151663}
!15437 = !{i64 151666}
!15438 = !{i64 151688}
!15439 = !{i64 151693}
!15440 = !{i64 151695}
!15441 = !{i64 151716}
!15442 = !{i64 151721}
!15443 = !{i64 151723}
!15444 = !{i64 151729}
!15445 = !{i64 151736}
!15446 = !{i64 151738}
!15447 = !{i64 151759}
!15448 = !{i64 151764}
!15449 = !{i64 151766}
!15450 = !{i64 151772}
!15451 = !{i64 151792}
!15452 = !{i64 151797}
!15453 = !{i64 151799}
!15454 = !{i64 151805}
!15455 = !{i64 151825}
!15456 = !{i64 151830}
!15457 = !{i64 151832}
!15458 = !{i64 151838}
!15459 = !{i64 151842}
!15460 = !{i64 151846}
!15461 = !{i64 151850}
!15462 = !{i64 151853}
!15463 = !{i64 151857}
!15464 = !{i64 151861}
!15465 = !{i64 151879}
!15466 = !{i64 151899}
!15467 = !{i64 151904}
!15468 = !{i64 151906}
!15469 = !{i64 151932}
!15470 = !{i64 152006}
!15471 = !{i64 152011}
!15472 = !{i64 152013}
!15473 = !{i64 152019}
!15474 = !{i64 152023}
!15475 = !{i64 152044}
!15476 = !{i64 152049}
!15477 = !{i64 152051}
!15478 = !{i64 152053}
!15479 = !{i64 152073}
!15480 = !{i64 152078}
!15481 = !{i64 152080}
!15482 = !{i64 152082}
!15483 = !{i64 152102}
!15484 = !{i64 152107}
!15485 = !{i64 152109}
!15486 = !{i64 152111}
!15487 = !{i64 152115}
!15488 = !{i64 152119}
!15489 = !{i64 152123}
!15490 = !{i64 152126}
!15491 = !{i64 152130}
!15492 = !{i64 152134}
!15493 = !{i64 152152}
!15494 = !{i64 152157}
!15495 = !{i64 152323}
!15496 = !{i64 152332}
!15497 = !{i64 152334}
!15498 = !{i64 152336}
!15499 = !{i64 152343}
!15500 = !{i64 152355}
!15501 = !{i64 152366}
!15502 = !{i64 152379}
!15503 = !{i64 152380}
!15504 = !{i64 152389}
!15505 = !{i64 152397}
!15506 = !{i64 152400}
!15507 = !{i64 152402}
!15508 = !{i64 152407}
!15509 = !{i64 152412}
!15510 = !{i64 152420}
!15511 = !{i64 152421}
!15512 = !{i64 152425}
!15513 = !{i64 152442}
!15514 = !{i64 152453}
!15515 = !{i64 152459}
!15516 = !{i64 152488}
!15517 = !{i64 152503}
!15518 = !{i64 152509}
!15519 = !{i64 152513}
!15520 = !{i64 152529}
!15521 = !{i64 152534}
!15522 = !{i64 152536}
!15523 = !{i64 152557}
!15524 = !{i64 152562}
!15525 = !{i64 152564}
!15526 = !{i64 152570}
!15527 = !{i64 152577}
!15528 = !{i64 152579}
!15529 = !{i64 152600}
!15530 = !{i64 152605}
!15531 = !{i64 152607}
!15532 = !{i64 152613}
!15533 = !{i64 152633}
!15534 = !{i64 152638}
!15535 = !{i64 152640}
!15536 = !{i64 152646}
!15537 = !{i64 152666}
!15538 = !{i64 152671}
!15539 = !{i64 152673}
!15540 = !{i64 152679}
!15541 = !{i64 152683}
!15542 = !{i64 152687}
!15543 = !{i64 152691}
!15544 = !{i64 152694}
!15545 = !{i64 152698}
!15546 = !{i64 152702}
!15547 = !{i64 152720}
!15548 = !{i64 152740}
!15549 = !{i64 152745}
!15550 = !{i64 152747}
!15551 = !{i64 152773}
!15552 = !{i64 152841}
!15553 = !{i64 152846}
!15554 = !{i64 152848}
!15555 = !{i64 152854}
!15556 = !{i64 152858}
!15557 = !{i64 152879}
!15558 = !{i64 152884}
!15559 = !{i64 152886}
!15560 = !{i64 152888}
!15561 = !{i64 152908}
!15562 = !{i64 152913}
!15563 = !{i64 152915}
!15564 = !{i64 152917}
!15565 = !{i64 152937}
!15566 = !{i64 152942}
!15567 = !{i64 152944}
!15568 = !{i64 152946}
!15569 = !{i64 152950}
!15570 = !{i64 152954}
!15571 = !{i64 152958}
!15572 = !{i64 152961}
!15573 = !{i64 152965}
!15574 = !{i64 152969}
!15575 = !{i64 152987}
!15576 = !{i64 152992}
!15577 = !{i64 153158}
!15578 = !{i64 153167}
!15579 = !{i64 153169}
!15580 = !{i64 153171}
!15581 = !{i64 153178}
!15582 = !{i64 153190}
!15583 = !{i64 153201}
!15584 = !{i64 153214}
!15585 = !{i64 153215}
!15586 = !{i64 153224}
!15587 = !{i64 153232}
!15588 = !{i64 153235}
!15589 = !{i64 153237}
!15590 = !{i64 153242}
!15591 = !{i64 153247}
!15592 = !{i64 153255}
!15593 = !{i64 153256}
!15594 = !{i64 153260}
!15595 = !{i64 153277}
!15596 = !{i64 153288}
!15597 = !{i64 153294}
!15598 = !{i64 153295}
!15599 = !{i64 153319}
!15600 = !{i64 153340}
!15601 = !{i64 153360}
!15602 = !{i64 153380}
!15603 = !{i64 153387}
!15604 = !{i64 153393}
!15605 = !{i64 153397}
!15606 = !{i64 153414}
!15607 = !{i64 153419}
!15608 = !{i64 153421}
!15609 = !{i64 153427}
!15610 = !{i64 153443}
!15611 = !{i64 153473}
!15612 = !{i64 153478}
!15613 = !{i64 153480}
!15614 = !{i64 153482}
!15615 = !{i64 153498}
!15616 = !{i64 153503}
!15617 = !{i64 153507}
!15618 = !{i64 153515}
!15619 = !{i64 153524}
!15620 = !{i64 153541}
!15621 = !{i64 153546}
!15622 = !{i64 153548}
!15623 = !{i64 153562}
!15624 = !{i64 153571}
!15625 = !{i64 153580}
!15626 = !{i64 153582}
!15627 = !{i64 153636}
!15628 = !{i64 153637}
!15629 = !{i64 153641}
!15630 = !{i64 153658}
!15631 = !{i64 153669}
!15632 = !{i64 153675}
!15633 = !{i64 153704}
!15634 = !{i64 153726}
!15635 = !{i64 153736}
!15636 = !{i64 153749}
!15637 = !{i64 153752}
!15638 = !{i64 153756}
!15639 = !{i64 153760}
!15640 = !{i64 153766}
!15641 = !{i64 153771}
!15642 = !{i64 153775}
!15643 = !{i64 153779}
!15644 = !{i64 153783}
!15645 = !{i64 153786}
!15646 = !{i64 153795}
!15647 = !{i64 153805}
!15648 = !{i64 153812}
!15649 = !{i64 153814}
!15650 = !{i64 153822}
!15651 = !{i64 153859}
!15652 = !{i64 153864}
!15653 = !{i64 153869}
!15654 = !{i64 153875}
!15655 = !{i64 153880}
!15656 = !{i64 153885}
!15657 = !{i64 153891}
!15658 = !{i64 153909}
!15659 = !{i64 153917}
!15660 = !{i64 153930}
!15661 = !{i64 153934}
!15662 = !{i64 153962}
!15663 = !{i64 153991}
!15664 = !{i64 154020}
!15665 = !{i64 154049}
!15666 = !{i64 154054}
!15667 = !{i64 154082}
!15668 = !{i64 154107}
!15669 = !{i64 154129}
!15670 = !{i64 154132}
!15671 = !{i64 154137}
!15672 = !{i64 154139}
!15673 = !{i64 154157}
!15674 = !{i64 154162}
!15675 = !{i64 154179}
!15676 = !{i64 154200}
!15677 = !{i64 154231}
!15678 = !{i64 154251}
!15679 = !{i64 154256}
!15680 = !{i64 154304}
!15681 = !{i64 154308}
!15682 = !{i64 154319}
!15683 = !{i64 154401}
!15684 = !{i64 154408}
!15685 = !{i64 154410}
!15686 = !{i64 154412}
!15687 = !{i64 154422}
!15688 = !{i64 154420}
!15689 = !{i64 154425}
!15690 = !{i64 154433}
!15691 = !{i64 154435}
!15692 = !{i64 154437}
!15693 = !{i64 154440}
!15694 = !{i64 154446}
!15695 = !{i64 154457}
!15696 = !{i64 154467}
!15697 = !{i64 154471}
!15698 = !{i64 154475}
!15699 = !{i64 154480}
!15700 = !{i64 154484}
!15701 = !{i64 154489}
!15702 = !{i64 154493}
!15703 = !{i64 154498}
!15704 = !{i64 154502}
!15705 = !{i64 154507}
!15706 = !{i64 154511}
!15707 = !{i64 154516}
!15708 = !{i64 154520}
!15709 = !{i64 154525}
!15710 = !{i64 154529}
!15711 = !{i64 154534}
!15712 = !{i64 154538}
!15713 = !{i64 154543}
!15714 = !{i64 154547}
!15715 = !{i64 154552}
!15716 = !{i64 154556}
!15717 = !{i64 154561}
!15718 = !{i64 154565}
!15719 = !{i64 154570}
!15720 = !{i64 154574}
!15721 = !{i64 154579}
!15722 = !{i64 154583}
!15723 = !{i64 154597}
!15724 = !{i64 154604}
!15725 = !{i64 154612}
!15726 = !{i64 154620}
!15727 = !{i64 154628}
!15728 = !{i64 154636}
!15729 = !{i64 154644}
!15730 = !{i64 154652}
!15731 = !{i64 154660}
!15732 = !{i64 154668}
!15733 = !{i64 154676}
!15734 = !{i64 154684}
!15735 = !{i64 154692}
!15736 = !{i64 154700}
!15737 = !{i64 154708}
!15738 = !{i64 154716}
!15739 = !{i64 154724}
!15740 = !{i64 154735}
!15741 = !{i64 154746}
!15742 = !{i64 154757}
!15743 = !{i64 154768}
!15744 = !{i64 154779}
!15745 = !{i64 154790}
!15746 = !{i64 154801}
!15747 = !{i64 154812}
!15748 = !{i64 154823}
!15749 = !{i64 154834}
!15750 = !{i64 154845}
!15751 = !{i64 154856}
!15752 = !{i64 154867}
!15753 = !{i64 154878}
!15754 = !{i64 154889}
!15755 = !{i64 154900}
!15756 = !{i64 154911}
!15757 = !{i64 154922}
!15758 = !{i64 154933}
!15759 = !{i64 154944}
!15760 = !{i64 154955}
!15761 = !{i64 154966}
!15762 = !{i64 154986}
!15763 = !{i64 154988}
!15764 = !{i64 154999}
!15765 = !{i64 155010}
!15766 = !{i64 155021}
!15767 = !{i64 155033}
!15768 = !{i64 155047}
!15769 = !{i64 155065}
!15770 = !{i64 155073}
!15771 = !{i64 155095}
!15772 = !{i64 155098}
!15773 = !{i64 155114}
!15774 = !{i64 155123}
!15775 = !{i64 155145}
!15776 = !{i64 155155}
!15777 = !{i64 155176}
!15778 = !{i64 155179}
!15779 = !{i64 155185}
!15780 = !{i64 155192}
!15781 = !{i64 155196}
!15782 = !{i64 155203}
!15783 = !{i64 155211}
!15784 = !{i64 155219}
!15785 = !{i64 155227}
!15786 = !{i64 155235}
!15787 = !{i64 155243}
!15788 = !{i64 155251}
!15789 = !{i64 155259}
!15790 = !{i64 155263}
!15791 = !{i64 155267}
!15792 = !{i64 155282}
!15793 = !{i64 155300}
!15794 = !{i64 155316}
!15795 = !{i64 155374}
!15796 = !{i64 155383}
!15797 = !{i64 155386}
!15798 = !{i64 155394}
!15799 = !{i64 155430}
!15800 = !{i64 155431}
!15801 = !{i64 155444}
!15802 = !{i64 155462}
!15803 = !{i64 155474}
!15804 = !{i64 155494}
!15805 = !{i64 155503}
!15806 = !{i64 155623}
!15807 = !{i64 155629}
!15808 = !{i64 155644}
!15809 = !{i64 155655}
!15810 = !{i64 155664}
!15811 = !{i64 155668}
!15812 = !{i64 155682}
!15813 = !{i64 155693}
!15814 = !{i64 155698}
!15815 = !{i64 155702}
!15816 = !{i64 155716}
!15817 = !{i64 155727}
!15818 = !{i64 155732}
!15819 = !{i64 155736}
!15820 = !{i64 155750}
!15821 = !{i64 155761}
!15822 = !{i64 155766}
!15823 = !{i64 155770}
!15824 = !{i64 155784}
!15825 = !{i64 155795}
!15826 = !{i64 155800}
!15827 = !{i64 155804}
!15828 = !{i64 155818}
!15829 = !{i64 155829}
!15830 = !{i64 155834}
!15831 = !{i64 155838}
!15832 = !{i64 155852}
!15833 = !{i64 155863}
!15834 = !{i64 155868}
!15835 = !{i64 155872}
!15836 = !{i64 155886}
!15837 = !{i64 155897}
!15838 = !{i64 155908}
!15839 = !{i64 155933}
!15840 = !{i64 155945}
!15841 = !{i64 155948}
!15842 = !{i64 155956}
!15843 = !{i64 155964}
!15844 = !{i64 155967}
!15845 = !{i64 155972}
!15846 = !{i64 155980}
!15847 = !{i64 155996}
!15848 = !{i64 156014}
!15849 = !{i64 156027}
!15850 = !{i64 156050}
!15851 = !{i64 156090}
!15852 = !{i64 156139}
!15853 = !{i64 156150}
!15854 = !{i64 156158}
!15855 = !{i64 156168}
!15856 = !{i64 156170}
!15857 = !{i64 156186}
!15858 = !{i64 156190}
!15859 = !{i64 156199}
!15860 = !{i64 156201}
!15861 = !{i64 156215}
!15862 = !{i64 156225}
!15863 = !{i64 156233}
!15864 = !{i64 156239}
!15865 = !{i64 156246}
!15866 = !{i64 156254}
!15867 = !{i64 156286}
!15868 = !{i64 156293}
!15869 = !{i64 156315}
!15870 = !{i64 156320}
!15871 = !{i64 156325}
!15872 = !{i64 156329}
!15873 = !{i64 156363}
!15874 = !{i64 156366}
!15875 = !{i64 156391}
!15876 = !{i64 156397}
!15877 = !{i64 156402}
!15878 = !{i64 156406}
!15879 = !{i64 156427}
!15880 = !{i64 156433}
!15881 = !{i64 156435}
!15882 = !{i64 156439}
!15883 = !{i64 156460}
!15884 = !{i64 156466}
!15885 = !{i64 156468}
!15886 = !{i64 156472}
!15887 = !{i64 156493}
!15888 = !{i64 156499}
!15889 = !{i64 156501}
!15890 = !{i64 156505}
!15891 = !{i64 156526}
!15892 = !{i64 156543}
!15893 = !{i64 156546}
!15894 = !{i64 156581}
!15895 = !{i64 156603}
!15896 = !{i64 156611}
!15897 = !{i64 156618}
!15898 = !{i64 156631}
!15899 = !{i64 156636}
!15900 = !{i64 156649}
!15901 = !{i64 156656}
!15902 = !{i64 156662}
!15903 = !{i64 156681}
!15904 = !{i64 156684}
!15905 = !{i64 156692}
!15906 = !{i64 156715}
!15907 = !{i64 156716}
!15908 = !{i64 156736}
!15909 = !{i64 156747}
!15910 = !{i64 156754}
!15911 = !{i64 156761}
!15912 = !{i64 156770}
!15913 = !{i64 156803}
!15914 = !{i64 156805}
!15915 = !{i64 156813}
!15916 = !{i64 156828}
!15917 = !{i64 156836}
!15918 = !{i64 156998}
!15919 = !{i64 157001}
!15920 = !{i64 157003}
!15921 = !{i64 156996}
!15922 = !{i64 157014}
!15923 = !{i64 157017}
!15924 = !{i64 157028}
!15925 = !{i64 157043}
!15926 = !{i64 157072}
!15927 = !{i64 157075}
!15928 = !{i64 157086}
!15929 = !{i64 157094}
!15930 = !{i64 157108}
!15931 = !{i64 157112}
!15932 = !{i64 157122}
!15933 = !{i64 157127}
!15934 = !{i64 157149}
!15935 = !{i64 157155}
!15936 = !{i64 157165}
!15937 = !{i64 157173}
!15938 = !{i64 157179}
!15939 = !{i64 157186}
!15940 = !{i64 157194}
!15941 = !{i64 157216}
!15942 = !{i64 157223}
!15943 = !{i64 157245}
!15944 = !{i64 157255}
!15945 = !{i64 157395}
!15946 = !{i64 157399}
!15947 = !{i64 157402}
!15948 = !{i64 157417}
!15949 = !{i64 157425}
!15950 = !{i64 157432}
!15951 = !{i64 157449}
!15952 = !{i64 157478}
!15953 = !{i64 157489}
!15954 = !{i64 157492}
!15955 = !{i64 157495}
!15956 = !{i64 157502}
!15957 = !{i64 157517}
!15958 = !{i64 157536}
!15959 = !{i64 157641}
!15960 = !{i64 157663}
!15961 = !{i64 157676}
!15962 = !{i64 157681}
!15963 = !{i64 157699}
!15964 = !{i64 157717}
!15965 = !{i64 157722}
!15966 = !{i64 157553}
!15967 = !{i64 157565}
!15968 = !{i64 157741}
!15969 = !{i64 157755}
!15970 = !{i64 157760}
!15971 = !{i64 157770}
!15972 = !{i64 157774}
!15973 = !{i64 157779}
!15974 = !{i64 157789}
!15975 = !{i64 157817}
!15976 = !{i64 157835}
!15977 = !{i64 157846}
!15978 = !{i64 157851}
!15979 = !{i64 157858}
!15980 = !{i64 157864}
!15981 = !{i64 157861}
!15982 = !{i64 157868}
!15983 = !{i64 157883}
!15984 = !{i64 157898}
!15985 = !{i64 157903}
!15986 = !{i64 157908}
!15987 = !{i64 157914}
!15988 = !{i64 157921}
!15989 = !{i64 157930}
!15990 = !{i64 157956}
!15991 = !{i64 157963}
!15992 = !{i64 157974}
!15993 = !{i64 158159}
!15994 = !{i64 158162}
!15995 = !{i64 158157}
!15996 = !{i64 158164}
!15997 = !{i64 158167}
!15998 = !{i64 158174}
!15999 = !{i64 158194}
!16000 = !{i64 158196}
!16001 = !{i64 158207}
!16002 = !{i64 158214}
!16003 = !{i64 158238}
!16004 = !{i64 158254}
!16005 = !{i64 158257}
!16006 = !{i64 158272}
!16007 = !{i64 158304}
!16008 = !{i64 158312}
!16009 = !{i64 158327}
!16010 = !{i64 158332}
!16011 = !{i64 158338}
!16012 = !{i64 158340}
!16013 = !{i64 158342}
!16014 = !{i64 158345}
!16015 = !{i64 158347}
!16016 = !{i64 158350}
!16017 = !{i64 158352}
!16018 = !{i64 158355}
!16019 = !{i64 158357}
!16020 = !{i64 158360}
!16021 = !{i64 158362}
!16022 = !{i64 158365}
!16023 = !{i64 158367}
!16024 = !{i64 158370}
!16025 = !{i64 158372}
!16026 = !{i64 158375}
!16027 = !{i64 158335}
!16028 = !{i64 158380}
!16029 = !{i64 158394}
!16030 = !{i64 158441}
!16031 = !{i64 158449}
!16032 = !{i64 158455}
!16033 = !{i64 158462}
!16034 = !{i64 158470}
!16035 = !{i64 158492}
!16036 = !{i64 158499}
!16037 = !{i64 158521}
!16038 = !{i64 158531}
!16039 = !{i64 158652}
!16040 = !{i64 158680}
!16041 = !{i64 158710}
!16042 = !{i64 158712}
!16043 = !{i64 158714}
!16044 = !{i64 158717}
!16045 = !{i64 158719}
!16046 = !{i64 158723}
!16047 = !{i64 158725}
!16048 = !{i64 158727}
!16049 = !{i64 158731}
!16050 = !{i64 158735}
!16051 = !{i64 158739}
!16052 = !{i64 158741}
!16053 = !{i64 158747}
!16054 = !{i64 158750}
!16055 = !{i64 158754}
!16056 = !{i64 158757}
!16057 = !{i64 158762}
!16058 = !{i64 158768}
!16059 = !{i64 158820}
!16060 = !{i64 158850}
!16061 = !{i64 158857}
!16062 = !{i64 158865}
!16063 = !{i64 158870}
!16064 = !{i64 158876}
!16065 = !{i64 158881}
!16066 = !{i64 158884}
!16067 = !{i64 158886}
!16068 = !{i64 158896}
!16069 = !{i64 158925}
!16070 = !{i64 158961}
!16071 = !{i64 158980}
!16072 = !{i64 158987}
!16073 = !{i64 158996}
!16074 = !{i64 159003}
!16075 = !{i64 159006}
!16076 = !{i64 158969}
!16077 = !{i64 159013}
!16078 = !{i64 159017}
!16079 = !{i64 159022}
!16080 = !{i64 159043}
!16081 = !{i64 159048}
!16082 = !{i64 159050}
!16083 = !{i64 159054}
!16084 = !{i64 159064}
!16085 = !{i64 159069}
!16086 = !{i64 159079}
!16087 = !{i64 159084}
!16088 = !{i64 159090}
!16089 = !{i64 159095}
!16090 = !{i64 159105}
!16091 = !{i64 159110}
!16092 = !{i64 159117}
!16093 = !{i64 159123}
!16094 = !{i64 159127}
!16095 = !{i64 159131}
!16096 = !{i64 159136}
!16097 = !{i64 159146}
!16098 = !{i64 159151}
!16099 = !{i64 159165}
!16100 = !{i64 159167}
!16101 = !{i64 159170}
!16102 = !{i64 159173}
!16103 = !{i64 159176}
!16104 = !{i64 159179}
!16105 = !{i64 159184}
!16106 = !{i64 159194}
!16107 = !{i64 159212}
!16108 = !{i64 159226}
!16109 = !{i64 159236}
!16110 = !{i64 159241}
!16111 = !{i64 159247}
!16112 = !{i64 159261}
!16113 = !{i64 159266}
!16114 = !{i64 159276}
!16115 = !{i64 159281}
!16116 = !{i64 159284}
!16117 = !{i64 159288}
!16118 = !{i64 159298}
!16119 = !{i64 159306}
!16120 = !{i64 159315}
!16121 = !{i64 159319}
!16122 = !{i64 159329}
!16123 = !{i64 159334}
!16124 = !{i64 159344}
!16125 = !{i64 159349}
!16126 = !{i64 159352}
!16127 = !{i64 159361}
!16128 = !{i64 159366}
!16129 = !{i64 159371}
!16130 = !{i64 159379}
!16131 = !{i64 159387}
!16132 = !{i64 159394}
!16133 = !{i64 159401}
!16134 = !{i64 159411}
!16135 = !{i64 159418}
!16136 = !{i64 159423}
!16137 = !{i64 159426}
!16138 = !{i64 159434}
!16139 = !{i64 159445}
!16140 = !{i64 159450}
!16141 = !{i64 159456}
!16142 = !{i64 159461}
!16143 = !{i64 159464}
!16144 = !{i64 159467}
!16145 = !{i64 159472}
!16146 = !{i64 159478}
!16147 = !{i64 159483}
!16148 = !{i64 159490}
!16149 = !{i64 159495}
!16150 = !{i64 159501}
!16151 = !{i64 159506}
!16152 = !{i64 159514}
!16153 = !{i64 159515}
!16154 = !{i64 159526}
!16155 = !{i64 159546}
!16156 = !{i64 159562}
!16157 = !{i64 159567}
!16158 = !{i64 159569}
!16159 = !{i64 159575}
!16160 = !{i64 159579}
!16161 = !{i64 159585}
!16162 = !{i64 159587}
!16163 = !{i64 159591}
!16164 = !{i64 159593}
!16165 = !{i64 159597}
!16166 = !{i64 159614}
!16167 = !{i64 159618}
!16168 = !{i64 159622}
!16169 = !{i64 159627}
!16170 = !{i64 159631}
!16171 = !{i64 159636}
!16172 = !{i64 159641}
!16173 = !{i64 159645}
!16174 = !{i64 159650}
!16175 = !{i64 159655}
!16176 = !{i64 159659}
!16177 = !{i64 159664}
!16178 = !{i64 159669}
!16179 = !{i64 159673}
!16180 = !{i64 159678}
!16181 = !{i64 159683}
!16182 = !{i64 159687}
!16183 = !{i64 159692}
!16184 = !{i64 159697}
!16185 = !{i64 159701}
!16186 = !{i64 159706}
!16187 = !{i64 159711}
!16188 = !{i64 159715}
!16189 = !{i64 159720}
!16190 = !{i64 159724}
!16191 = !{i64 159734}
!16192 = !{i64 159736}
!16193 = !{i64 159740}
!16194 = !{i64 159746}
!16195 = !{i64 159748}
!16196 = !{i64 159752}
!16197 = !{i64 159754}
!16198 = !{i64 159758}
!16199 = !{i64 159766}
!16200 = !{i64 159770}
!16201 = !{i64 159772}
!16202 = !{i64 159776}
!16203 = !{i64 159784}
!16204 = !{i64 159788}
!16205 = !{i64 159798}
!16206 = !{i64 159800}
!16207 = !{i64 159804}
!16208 = !{i64 159806}
!16209 = !{i64 159810}
!16210 = !{i64 159818}
!16211 = !{i64 159824}
!16212 = !{i64 159826}
!16213 = !{i64 159830}
!16214 = !{i64 159834}
!16215 = !{i64 159839}
!16216 = !{i64 159843}
!16217 = !{i64 159845}
!16218 = !{i64 159850}
!16219 = !{i64 159854}
!16220 = !{i64 159856}
!16221 = !{i64 159861}
!16222 = !{i64 159865}
!16223 = !{i64 159867}
!16224 = !{i64 159872}
!16225 = !{i64 159876}
!16226 = !{i64 159878}
!16227 = !{i64 159883}
!16228 = !{i64 159887}
!16229 = !{i64 159889}
!16230 = !{i64 159894}
!16231 = !{i64 159898}
!16232 = !{i64 159900}
!16233 = !{i64 159905}
!16234 = !{i64 159909}
!16235 = !{i64 159911}
!16236 = !{i64 159916}
!16237 = !{i64 159920}
!16238 = !{i64 159922}
!16239 = !{i64 159927}
!16240 = !{i64 159931}
!16241 = !{i64 159933}
!16242 = !{i64 159938}
!16243 = !{i64 159942}
!16244 = !{i64 159944}
!16245 = !{i64 159949}
!16246 = !{i64 159953}
!16247 = !{i64 159955}
!16248 = !{i64 159960}
!16249 = !{i64 159537}
!16250 = !{i64 159975}
!16251 = !{i64 159983}
!16252 = !{i64 159985}
!16253 = !{i64 159997}
!16254 = !{i64 160013}
!16255 = !{i64 160018}
!16256 = !{i64 160021}
!16257 = !{i64 160028}
!16258 = !{i64 160039}
!16259 = !{i64 160042}
!16260 = !{i64 160046}
!16261 = !{i64 160056}
!16262 = !{i64 160058}
!16263 = !{i64 160062}
!16264 = !{i64 160072}
!16265 = !{i64 160074}
!16266 = !{i64 160078}
!16267 = !{i64 160088}
!16268 = !{i64 160101}
!16269 = !{i64 160105}
!16270 = !{i64 160115}
!16271 = !{i64 160117}
!16272 = !{i64 160121}
!16273 = !{i64 160133}
!16274 = !{i64 160137}
!16275 = !{i64 160143}
!16276 = !{i64 160147}
!16277 = !{i64 160158}
!16278 = !{i64 160162}
!16279 = !{i64 160172}
!16280 = !{i64 160174}
!16281 = !{i64 160178}
!16282 = !{i64 160188}
!16283 = !{i64 160190}
!16284 = !{i64 160194}
!16285 = !{i64 160205}
!16286 = !{i64 160209}
!16287 = !{i64 160215}
!16288 = !{i64 160219}
!16289 = !{i64 160230}
!16290 = !{i64 160237}
!16291 = !{i64 160246}
!16292 = !{i64 160248}
!16293 = !{i64 160255}
!16294 = !{i64 160263}
!16295 = !{i64 160270}
!16296 = !{i64 160272}
!16297 = !{i64 160279}
!16298 = !{i64 160285}
!16299 = !{i64 160291}
!16300 = !{i64 160295}
!16301 = !{i64 160300}
!16302 = !{i64 160306}
!16303 = !{i64 160310}
!16304 = !{i64 160315}
!16305 = !{i64 160321}
!16306 = !{i64 160325}
!16307 = !{i64 160330}
!16308 = !{i64 160336}
!16309 = !{i64 160340}
!16310 = !{i64 160345}
!16311 = !{i64 160351}
!16312 = !{i64 160355}
!16313 = !{i64 160360}
!16314 = !{i64 160366}
!16315 = !{i64 160370}
!16316 = !{i64 160375}
!16317 = !{i64 160381}
!16318 = !{i64 160385}
!16319 = !{i64 160390}
!16320 = !{i64 160396}
!16321 = !{i64 160400}
!16322 = !{i64 160405}
!16323 = !{i64 160411}
!16324 = !{i64 160415}
!16325 = !{i64 160417}
!16326 = !{i64 160423}
!16327 = !{i64 160427}
!16328 = !{i64 160429}
!16329 = !{i64 160435}
!16330 = !{i64 160439}
!16331 = !{i64 160441}
!16332 = !{i64 160447}
!16333 = !{i64 160451}
!16334 = !{i64 160453}
!16335 = !{i64 160459}
!16336 = !{i64 160463}
!16337 = !{i64 160465}
!16338 = !{i64 160471}
!16339 = !{i64 160475}
!16340 = !{i64 160477}
!16341 = !{i64 160483}
!16342 = !{i64 160487}
!16343 = !{i64 160489}
!16344 = !{i64 160495}
!16345 = !{i64 160499}
!16346 = !{i64 160501}
!16347 = !{i64 160507}
!16348 = !{i64 160511}
!16349 = !{i64 160513}
!16350 = !{i64 160519}
!16351 = !{i64 160523}
!16352 = !{i64 160525}
!16353 = !{i64 160531}
!16354 = !{i64 160535}
!16355 = !{i64 160543}
!16356 = !{i64 160550}
!16357 = !{i64 160556}
!16358 = !{i64 160559}
!16359 = !{i64 160568}
!16360 = !{i64 160579}
!16361 = !{i64 160584}
!16362 = !{i64 160598}
!16363 = !{i64 160605}
!16364 = !{i64 160617}
!16365 = !{i64 160623}
!16366 = !{i64 160637}
!16367 = !{i64 160643}
!16368 = !{i64 160657}
!16369 = !{i64 160663}
!16370 = !{i64 160677}
!16371 = !{i64 160683}
!16372 = !{i64 160700}
!16373 = !{i64 160706}
!16374 = !{i64 160723}
!16375 = !{i64 160741}
!16376 = !{i64 160747}
!16377 = !{i64 160751}
!16378 = !{i64 160757}
!16379 = !{i64 160763}
!16380 = !{i64 160766}
!16381 = !{i64 160777}
!16382 = !{i64 160791}
!16383 = !{i64 160793}
!16384 = !{i64 160807}
!16385 = !{i64 160809}
!16386 = !{i64 160826}
!16387 = !{i64 160828}
!16388 = !{i64 160842}
!16389 = !{i64 160844}
!16390 = !{i64 160861}
!16391 = !{i64 160875}
!16392 = !{i64 160877}
!16393 = !{i64 160881}
!16394 = !{i64 160887}
!16395 = !{i64 160889}
!16396 = !{i64 160892}
!16397 = !{i64 160910}
!16398 = !{i64 160915}
!16399 = !{i64 160919}
!16400 = !{i64 160921}
!16401 = !{i64 160932}
!16402 = !{i64 160938}
!16403 = !{i64 160942}
!16404 = !{i64 160972}
!16405 = !{i64 160976}
!16406 = !{i64 161004}
!16407 = !{i64 161010}
!16408 = !{i64 161022}
!16409 = !{i64 161024}
!16410 = !{i64 161028}
!16411 = !{i64 161039}
!16412 = !{i64 161051}
!16413 = !{i64 161059}
!16414 = !{i64 161063}
!16415 = !{i64 161067}
!16416 = !{i64 161079}
!16417 = !{i64 161087}
!16418 = !{i64 161091}
!16419 = !{i64 161095}
!16420 = !{i64 161107}
!16421 = !{i64 161109}
!16422 = !{i64 161124}
!16423 = !{i64 161128}
!16424 = !{i64 161130}
!16425 = !{i64 161140}
!16426 = !{i64 161152}
!16427 = !{i64 161160}
!16428 = !{i64 161176}
!16429 = !{i64 161184}
!16430 = !{i64 161186}
!16431 = !{i64 161195}
!16432 = !{i64 161203}
!16433 = !{i64 161219}
!16434 = !{i64 161224}
!16435 = !{i64 161226}
!16436 = !{i64 161229}
!16437 = !{i64 161231}
!16438 = !{i64 161236}
!16439 = !{i64 161240}
!16440 = !{i64 161242}
!16441 = !{i64 161256}
!16442 = !{i64 161245}
!16443 = !{i64 161259}
!16444 = !{i64 161268}
!16445 = !{i64 161276}
!16446 = !{i64 161280}
!16447 = !{i64 161285}
!16448 = !{i64 161300}
!16449 = !{i64 161320}
!16450 = !{i64 161318}
!16451 = !{i64 161337}
!16452 = !{i64 161349}
!16453 = !{i64 161372}
!16454 = !{i64 161403}
!16455 = !{i64 161420}
!16456 = !{i64 161425}
!16457 = !{i64 161427}
!16458 = !{i64 161435}
!16459 = !{i64 161440}
!16460 = !{i64 161445}
!16461 = !{i64 161455}
!16462 = !{i64 161459}
!16463 = !{i64 161472}
!16464 = !{i64 161473}
!16465 = !{i64 161484}
!16466 = !{i64 161522}
!16467 = !{i64 161527}
!16468 = !{i64 161533}
!16469 = !{i64 161535}
!16470 = !{i64 161545}
!16471 = !{i64 161548}
!16472 = !{i64 161552}
!16473 = !{i64 161560}
!16474 = !{i64 161564}
!16475 = !{i64 161568}
!16476 = !{i64 161572}
!16477 = !{i64 161575}
!16478 = !{i64 161577}
!16479 = !{i64 161581}
!16480 = !{i64 161587}
!16481 = !{i64 161592}
!16482 = !{i64 161598}
!16483 = !{i64 161600}
!16484 = !{i64 161605}
!16485 = !{i64 161607}
!16486 = !{i64 161616}
!16487 = !{i64 161622}
!16488 = !{i64 161625}
!16489 = !{i64 161629}
!16490 = !{i64 161632}
!16491 = !{i64 161636}
!16492 = !{i64 161640}
!16493 = !{i64 161642}
!16494 = !{i64 161646}
!16495 = !{i64 161652}
!16496 = !{i64 161654}
!16497 = !{i64 161658}
!16498 = !{i64 161662}
!16499 = !{i64 161695}
!16500 = !{i64 161664}
!16501 = !{i64 161669}
!16502 = !{i64 161673}
!16503 = !{i64 161690}
!16504 = !{i64 161699}
!16505 = !{i64 161701}
!16506 = !{i64 161706}
!16507 = !{i64 161710}
!16508 = !{i64 161716}
!16509 = !{i64 161720}
!16510 = !{i64 161722}
!16511 = !{i64 161727}
!16512 = !{i64 161735}
!16513 = !{i64 161740}
!16514 = !{i64 161747}
!16515 = !{i64 161752}
!16516 = !{i64 161766}
!16517 = !{i64 161770}
!16518 = !{i64 161783}
!16519 = !{i64 161786}
!16520 = !{i64 161788}
!16521 = !{i64 161794}
!16522 = !{i64 161797}
!16523 = !{i64 161804}
!16524 = !{i64 161809}
!16525 = !{i64 161903}
!16526 = !{i64 161916}
!16527 = !{i64 161920}
!16528 = !{i64 161923}
!16529 = !{i64 161927}
!16530 = !{i64 161932}
!16531 = !{i64 161935}
!16532 = !{i64 161954}
!16533 = !{i64 161956}
!16534 = !{i64 161960}
!16535 = !{i64 161965}
!16536 = !{i64 161972}
!16537 = !{i64 161987}
!16538 = !{i64 161995}
!16539 = !{i64 162010}
!16540 = !{i64 162018}
!16541 = !{i64 162049}
!16542 = !{i64 161913}
!16543 = !{i64 162051}
!16544 = !{i64 162055}
!16545 = !{i64 162057}
!16546 = !{i64 162067}
!16547 = !{i64 162072}
!16548 = !{i64 162077}
!16549 = !{i64 162089}
!16550 = !{i64 162096}
!16551 = !{i64 162113}
!16552 = !{i64 162116}
!16553 = !{i64 162123}
!16554 = !{i64 162135}
!16555 = !{i64 162143}
!16556 = !{i64 162148}
!16557 = !{i64 162160}
!16558 = !{i64 162162}
!16559 = !{i64 162232}
!16560 = !{i64 162249}
!16561 = !{i64 162254}
!16562 = !{i64 162279}
!16563 = !{i64 162287}
!16564 = !{i64 162291}
!16565 = !{i64 162295}
!16566 = !{i64 162306}
!16567 = !{i64 162314}
!16568 = !{i64 162329}
!16569 = !{i64 162338}
!16570 = !{i64 162340}
!16571 = !{i64 162344}
!16572 = !{i64 162356}
!16573 = !{i64 162370}
!16574 = !{i64 162379}
!16575 = !{i64 162382}
!16576 = !{i64 162391}
!16577 = !{i64 162394}
!16578 = !{i64 162399}
!16579 = !{i64 162405}
!16580 = !{i64 162415}
!16581 = !{i64 162417}
!16582 = !{i64 162426}
!16583 = !{i64 162446}
!16584 = !{i64 162464}
!16585 = !{i64 162477}
!16586 = !{i64 162485}
!16587 = !{i64 162489}
!16588 = !{i64 162492}
!16589 = !{i64 162495}
!16590 = !{i64 162497}
!16591 = !{i64 162501}
!16592 = !{i64 162503}
!16593 = !{i64 162518}
!16594 = !{i64 162523}
!16595 = !{i64 162536}
!16596 = !{i64 162537}
!16597 = !{i64 162557}
!16598 = !{i64 162578}
!16599 = !{i64 162599}
!16600 = !{i64 162613}
!16601 = !{i64 162618}
!16602 = !{i64 162623}
!16603 = !{i64 162626}
!16604 = !{i64 162565}
!16605 = !{i64 162628}
!16606 = !{i64 162635}
!16607 = !{i64 162640}
!16608 = !{i64 162647}
!16609 = !{i64 162654}
!16610 = !{i64 162670}
!16611 = !{i64 162674}
!16612 = !{i64 162690}
!16613 = !{i64 162694}
!16614 = !{i64 162705}
!16615 = !{i64 162722}
!16616 = !{i64 162725}
!16617 = !{i64 162732}
!16618 = !{i64 162748}
!16619 = !{i64 162755}
!16620 = !{i64 162787}
!16621 = !{i64 162807}
!16622 = !{i64 162830}
!16623 = !{i64 162849}
!16624 = !{i64 162947}
!16625 = !{i64 162955}
!16626 = !{i64 163007}
!16627 = !{i64 163015}
!16628 = !{i64 163021}
!16629 = !{i64 163028}
!16630 = !{i64 163036}
!16631 = !{i64 163058}
!16632 = !{i64 163065}
!16633 = !{i64 163087}
!16634 = !{i64 163092}
!16635 = !{i64 163170}
!16636 = !{i64 163192}
!16637 = !{i64 163200}
!16638 = !{i64 163207}
!16639 = !{i64 163220}
!16640 = !{i64 163221}
!16641 = !{i64 163241}
!16642 = !{i64 163252}
!16643 = !{i64 163281}
!16644 = !{i64 163288}
!16645 = !{i64 163295}
!16646 = !{i64 163307}
!16647 = !{i64 163312}
!16648 = !{i64 163315}
!16649 = !{i64 163319}
!16650 = !{i64 163322}
!16651 = !{i64 163334}
!16652 = !{i64 163339}
!16653 = !{i64 163351}
!16654 = !{i64 163357}
!16655 = !{i64 163364}
!16656 = !{i64 163366}
!16657 = !{i64 163378}
!16658 = !{i64 163390}
!16659 = !{i64 163401}
!16660 = !{i64 163406}
!16661 = !{i64 163421}
!16662 = !{i64 163426}
!16663 = !{i64 163438}
!16664 = !{i64 163445}
!16665 = !{i64 163457}
!16666 = !{i64 163464}
!16667 = !{i64 163479}
!16668 = !{i64 163484}
!16669 = !{i64 163499}
!16670 = !{i64 163504}
!16671 = !{i64 163507}
!16672 = !{i64 163509}
!16673 = !{i64 163519}
!16674 = !{i64 163524}
!16675 = !{i64 163534}
!16676 = !{i64 163554}
!16677 = !{i64 163562}
!16678 = !{i64 163575}
!16679 = !{i64 163583}
!16680 = !{i64 163598}
!16681 = !{i64 163611}
!16682 = !{i64 163619}
!16683 = !{i64 163630}
!16684 = !{i64 163639}
!16685 = !{i64 163644}
!16686 = !{i64 163646}
!16687 = !{i64 163651}
!16688 = !{i64 163652}
!16689 = !{i64 163663}
!16690 = !{i64 163671}
!16691 = !{i64 163682}
!16692 = !{i64 163691}
!16693 = !{i64 163712}
!16694 = !{i64 163780}
!16695 = !{i64 163790}
!16696 = !{i64 163793}
!16697 = !{i64 163796}
!16698 = !{i64 163807}
!16699 = !{i64 163812}
!16700 = !{i64 163822}
!16701 = !{i64 163843}
!16702 = !{i64 163864}
!16703 = !{i64 163914}
!16704 = !{i64 163931}
!16705 = !{i64 163939}
!16706 = !{i64 163941}
!16707 = !{i64 163945}
!16708 = !{i64 163950}
!16709 = !{i64 163955}
!16710 = !{i64 163965}
!16711 = !{i64 163987}
!16712 = !{i64 164015}
!16713 = !{i64 164023}
!16714 = !{i64 164030}
!16715 = !{i64 164050}
!16716 = !{i64 164054}
!16717 = !{i64 164075}
!16718 = !{i64 164084}
!16719 = !{i64 164087}
!16720 = !{i64 164095}
!16721 = !{i64 164100}
!16722 = !{i64 164106}
!16723 = !{i64 164121}
!16724 = !{i64 164126}
!16725 = !{i64 164141}
!16726 = !{i64 164156}
!16727 = !{i64 164164}
!16728 = !{i64 164194}
!16729 = !{i64 164199}
!16730 = !{i64 164207}
!16731 = !{i64 164212}
!16732 = !{i64 164218}
!16733 = !{i64 164233}
!16734 = !{i64 164238}
!16735 = !{i64 164245}
!16736 = !{i64 164251}
!16737 = !{i64 164253}
!16738 = !{i64 164258}
!16739 = !{i64 164268}
!16740 = !{i64 164298}
!16741 = !{i64 164319}
!16742 = !{i64 164330}
!16743 = !{i64 164339}
!16744 = !{i64 164399}
!16745 = !{i64 164406}
!16746 = !{i64 164412}
!16747 = !{i64 164424}
!16748 = !{i64 164429}
!16749 = !{i64 164432}
!16750 = !{i64 164546}
!16751 = !{i64 164565}
!16752 = !{i64 164590}
!16753 = !{i64 164594}
!16754 = !{i64 164611}
!16755 = !{i64 164615}
!16756 = !{i64 164645}
!16757 = !{i64 164650}
!16758 = !{i64 164652}
!16759 = !{i64 164654}
!16760 = !{i64 164662}
!16761 = !{i64 164667}
!16762 = !{i64 164679}
!16763 = !{i64 164697}
!16764 = !{i64 164705}
!16765 = !{i64 164718}
!16766 = !{i64 164728}
!16767 = !{i64 164739}
!16768 = !{i64 164744}
!16769 = !{i64 164748}
!16770 = !{i64 164759}
!16771 = !{i64 164767}
!16772 = !{i64 164778}
!16773 = !{i64 164783}
!16774 = !{i64 164790}
!16775 = !{i64 164808}
!16776 = !{i64 164815}
!16777 = !{i64 164831}
!16778 = !{i64 164839}
!16779 = !{i64 164853}
!16780 = !{i64 164862}
!16781 = !{i64 164890}
!16782 = !{i64 164903}
!16783 = !{i64 164907}
!16784 = !{i64 164910}
!16785 = !{i64 164915}
!16786 = !{i64 164920}
!16787 = !{i64 164932}
!16788 = !{i64 164939}
!16789 = !{i64 164963}
!16790 = !{i64 164987}
!16791 = !{i64 164993}
!16792 = !{i64 164995}
!16793 = !{i64 165002}
!16794 = !{i64 165014}
!16795 = !{i64 165021}
!16796 = !{i64 165040}
!16797 = !{i64 165047}
!16798 = !{i64 165052}
!16799 = !{i64 165060}
!16800 = !{i64 165107}
!16801 = !{i64 165121}
!16802 = !{i64 165140}
!16803 = !{i64 165147}
!16804 = !{i64 165158}
!16805 = !{i64 165171}
!16806 = !{i64 165178}
!16807 = !{i64 165181}
!16808 = !{i64 165192}
!16809 = !{i64 165205}
!16810 = !{i64 165212}
!16811 = !{i64 165215}
!16812 = !{i64 165226}
!16813 = !{i64 165239}
!16814 = !{i64 165246}
!16815 = !{i64 165249}
!16816 = !{i64 165260}
!16817 = !{i64 165265}
!16818 = !{i64 165279}
!16819 = !{i64 165284}
!16820 = !{i64 165298}
!16821 = !{i64 165303}
!16822 = !{i64 165317}
!16823 = !{i64 165322}
!16824 = !{i64 165328}
!16825 = !{i64 165337}
!16826 = !{i64 165350}
!16827 = !{i64 165355}
!16828 = !{i64 165369}
!16829 = !{i64 165384}
!16830 = !{i64 165392}
!16831 = !{i64 165405}
!16832 = !{i64 165413}
!16833 = !{i64 165428}
!16834 = !{i64 165446}
!16835 = !{i64 165464}
!16836 = !{i64 165482}
!16837 = !{i64 165492}
!16838 = !{i64 165501}
!16839 = !{i64 165518}
!16840 = !{i64 165526}
!16841 = !{i64 165537}
!16842 = !{i64 165546}
!16843 = !{i64 165547}
!16844 = !{i64 165564}
!16845 = !{i64 165581}
!16846 = !{i64 165590}
!16847 = !{i64 165594}
!16848 = !{i64 165598}
!16849 = !{i64 165604}
!16850 = !{i64 165610}
!16851 = !{i64 165617}
!16852 = !{i64 165623}
!16853 = !{i64 165630}
!16854 = !{i64 165640}
!16855 = !{i64 165647}
!16856 = !{i64 165653}
!16857 = !{i64 165658}
!16858 = !{i64 165663}
!16859 = !{i64 165675}
!16860 = !{i64 165694}
!16861 = !{i64 165682}
!16862 = !{i64 165712}
!16863 = !{i64 165744}
!16864 = !{i64 165759}
!16865 = !{i64 165778}
!16866 = !{i64 165766}
!16867 = !{i64 165787}
!16868 = !{i64 165793}
!16869 = !{i64 165799}
!16870 = !{i64 165805}
!16871 = !{i64 165811}
!16872 = !{i64 165817}
!16873 = !{i64 165821}
!16874 = !{i64 165791}
!16875 = !{i64 165836}
!16876 = !{i64 165841}
!16877 = !{i64 165856}
!16878 = !{i64 165861}
!16879 = !{i64 165865}
!16880 = !{i64 165867}
!16881 = !{i64 165877}
!16882 = !{i64 165882}
!16883 = !{i64 165891}
!16884 = !{i64 165907}
!16885 = !{i64 165913}
!16886 = !{i64 165918}
!16887 = !{i64 165923}
!16888 = !{i64 165938}
!16889 = !{i64 165943}
!16890 = !{i64 165945}
!16891 = !{i64 165951}
!16892 = !{i64 165957}
!16893 = !{i64 165963}
!16894 = !{i64 165969}
!16895 = !{i64 165975}
!16896 = !{i64 165979}
!16897 = !{i64 165949}
!16898 = !{i64 165988}
!16899 = !{i64 166003}
!16900 = !{i64 166008}
!16901 = !{i64 166023}
!16902 = !{i64 166038}
!16903 = !{i64 166045}
!16904 = !{i64 166055}
!16905 = !{i64 166062}
!16906 = !{i64 166072}
!16907 = !{i64 166076}
!16908 = !{i64 166081}
!16909 = !{i64 166085}
!16910 = !{i64 166096}
!16911 = !{i64 166114}
!16912 = !{i64 166119}
!16913 = !{i64 166121}
!16914 = !{i64 166135}
!16915 = !{i64 166153}
!16916 = !{i64 166168}
!16917 = !{i64 166187}
!16918 = !{i64 166175}
!16919 = !{i64 166208}
!16920 = !{i64 166213}
!16921 = !{i64 166216}
!16922 = !{i64 166220}
!16923 = !{i64 166231}
!16924 = !{i64 166244}
!16925 = !{i64 166251}
!16926 = !{i64 166257}
!16927 = !{i64 168868}
!16928 = !{i64 168881}
!16929 = !{i64 168888}
!16930 = !{i64 166448}
!16931 = !{i64 166265}
!16932 = !{i64 166269}
!16933 = !{i64 166271}
!16934 = !{i64 166274}
!16935 = !{i64 166279}
!16936 = !{i64 166283}
!16937 = !{i64 166299}
!16938 = !{i64 166305}
!16939 = !{i64 166313}
!16940 = !{i64 166316}
!16941 = !{i64 166322}
!16942 = !{i64 166325}
!16943 = !{i64 166335}
!16944 = !{i64 166348}
!16945 = !{i64 166355}
!16946 = !{i64 166361}
!16947 = !{i64 166372}
!16948 = !{i64 166385}
!16949 = !{i64 166392}
!16950 = !{i64 166398}
!16951 = !{i64 166462}
!16952 = !{i64 166479}
!16953 = !{i64 166483}
!16954 = !{i64 166485}
!16955 = !{i64 166492}
!16956 = !{i64 166504}
!16957 = !{i64 166525}
!16958 = !{i64 166534}
!16959 = !{i64 166555}
!16960 = !{i64 166562}
!16961 = !{i64 166569}
!16962 = !{i64 166588}
!16963 = !{i64 166602}
!16964 = !{i64 166607}
!16965 = !{i64 166611}
!16966 = !{i64 166626}
!16967 = !{i64 166631}
!16968 = !{i64 166633}
!16969 = !{i64 166637}
!16970 = !{i64 166652}
!16971 = !{i64 166657}
!16972 = !{i64 166662}
!16973 = !{i64 166669}
!16974 = !{i64 166671}
!16975 = !{i64 166693}
!16976 = !{i64 166708}
!16977 = !{i64 166715}
!16978 = !{i64 166717}
!16979 = !{i64 166721}
!16980 = !{i64 166736}
!16981 = !{i64 166741}
!16982 = !{i64 166753}
!16983 = !{i64 166760}
!16984 = !{i64 166775}
!16985 = !{i64 166780}
!16986 = !{i64 166795}
!16987 = !{i64 166800}
!16988 = !{i64 166815}
!16989 = !{i64 166823}
!16990 = !{i64 166830}
!16991 = !{i64 166840}
!16992 = !{i64 166846}
!16993 = !{i64 166851}
!16994 = !{i64 166855}
!16995 = !{i64 166866}
!16996 = !{i64 166881}
!16997 = !{i64 166888}
!16998 = !{i64 166894}
!16999 = !{i64 166898}
!17000 = !{i64 166917}
!17001 = !{i64 166935}
!17002 = !{i64 166953}
!17003 = !{i64 166971}
!17004 = !{i64 166986}
!17005 = !{i64 167016}
!17006 = !{i64 167034}
!17007 = !{i64 167052}
!17008 = !{i64 167057}
!17009 = !{i64 167075}
!17010 = !{i64 167093}
!17011 = !{i64 167111}
!17012 = !{i64 167129}
!17013 = !{i64 167154}
!17014 = !{i64 167169}
!17015 = !{i64 167192}
!17016 = !{i64 167210}
!17017 = !{i64 167219}
!17018 = !{i64 167235}
!17019 = !{i64 167242}
!17020 = !{i64 167257}
!17021 = !{i64 167265}
!17022 = !{i64 167272}
!17023 = !{i64 167286}
!17024 = !{i64 167291}
!17025 = !{i64 167293}
!17026 = !{i64 167318}
!17027 = !{i64 167341}
!17028 = !{i64 167349}
!17029 = !{i64 167354}
!17030 = !{i64 167358}
!17031 = !{i64 167369}
!17032 = !{i64 167374}
!17033 = !{i64 167379}
!17034 = !{i64 167383}
!17035 = !{i64 167430}
!17036 = !{i64 167443}
!17037 = !{i64 167446}
!17038 = !{i64 167470}
!17039 = !{i64 167475}
!17040 = !{i64 167483}
!17041 = !{i64 167487}
!17042 = !{i64 167493}
!17043 = !{i64 167507}
!17044 = !{i64 167520}
!17045 = !{i64 167527}
!17046 = !{i64 167541}
!17047 = !{i64 167546}
!17048 = !{i64 167551}
!17049 = !{i64 167555}
!17050 = !{i64 167569}
!17051 = !{i64 167571}
!17052 = !{i64 167577}
!17053 = !{i64 167580}
!17054 = !{i64 167596}
!17055 = !{i64 167601}
!17056 = !{i64 167603}
!17057 = !{i64 167609}
!17058 = !{i64 167612}
!17059 = !{i64 167615}
!17060 = !{i64 167630}
!17061 = !{i64 167636}
!17062 = !{i64 167650}
!17063 = !{i64 167658}
!17064 = !{i64 167665}
!17065 = !{i64 167674}
!17066 = !{i64 167676}
!17067 = !{i64 167687}
!17068 = !{i64 167692}
!17069 = !{i64 167694}
!17070 = !{i64 167700}
!17071 = !{i64 167703}
!17072 = !{i64 167706}
!17073 = !{i64 167721}
!17074 = !{i64 167735}
!17075 = !{i64 167750}
!17076 = !{i64 167757}
!17077 = !{i64 167763}
!17078 = !{i64 167769}
!17079 = !{i64 167773}
!17080 = !{i64 167767}
!17081 = !{i64 167804}
!17082 = !{i64 167822}
!17083 = !{i64 167840}
!17084 = !{i64 167845}
!17085 = !{i64 167868}
!17086 = !{i64 167879}
!17087 = !{i64 167897}
!17088 = !{i64 167915}
!17089 = !{i64 167930}
!17090 = !{i64 167937}
!17091 = !{i64 167949}
!17092 = !{i64 167956}
!17093 = !{i64 167976}
!17094 = !{i64 167981}
!17095 = !{i64 167987}
!17096 = !{i64 167991}
!17097 = !{i64 167985}
!17098 = !{i64 167997}
!17099 = !{i64 168001}
!17100 = !{i64 168007}
!17101 = !{i64 168009}
!17102 = !{i64 168014}
!17103 = !{i64 168020}
!17104 = !{i64 168022}
!17105 = !{i64 168027}
!17106 = !{i64 168037}
!17107 = !{i64 168039}
!17108 = !{i64 168042}
!17109 = !{i64 168054}
!17110 = !{i64 168061}
!17111 = !{i64 168073}
!17112 = !{i64 168090}
!17113 = !{i64 168097}
!17114 = !{i64 168100}
!17115 = !{i64 168105}
!17116 = !{i64 168115}
!17117 = !{i64 168120}
!17118 = !{i64 168125}
!17119 = !{i64 168129}
!17120 = !{i64 168123}
!17121 = !{i64 168137}
!17122 = !{i64 168143}
!17123 = !{i64 168149}
!17124 = !{i64 168159}
!17125 = !{i64 168161}
!17126 = !{i64 168164}
!17127 = !{i64 168167}
!17128 = !{i64 168170}
!17129 = !{i64 168178}
!17130 = !{i64 168184}
!17131 = !{i64 168190}
!17132 = !{i64 168200}
!17133 = !{i64 168202}
!17134 = !{i64 168205}
!17135 = !{i64 168208}
!17136 = !{i64 168211}
!17137 = !{i64 168217}
!17138 = !{i64 168221}
!17139 = !{i64 168237}
!17140 = !{i64 168250}
!17141 = !{i64 168255}
!17142 = !{i64 168260}
!17143 = !{i64 168265}
!17144 = !{i64 168269}
!17145 = !{i64 168271}
!17146 = !{i64 168277}
!17147 = !{i64 168283}
!17148 = !{i64 168289}
!17149 = !{i64 168295}
!17150 = !{i64 168275}
!17151 = !{i64 168303}
!17152 = !{i64 168306}
!17153 = !{i64 168310}
!17154 = !{i64 168313}
!17155 = !{i64 168323}
!17156 = !{i64 168327}
!17157 = !{i64 168333}
!17158 = !{i64 168347}
!17159 = !{i64 168361}
!17160 = !{i64 168366}
!17161 = !{i64 168368}
!17162 = !{i64 168376}
!17163 = !{i64 168379}
!17164 = !{i64 168381}
!17165 = !{i64 168384}
!17166 = !{i64 168387}
!17167 = !{i64 168393}
!17168 = !{i64 168414}
!17169 = !{i64 168417}
!17170 = !{i64 168426}
!17171 = !{i64 168433}
!17172 = !{i64 168440}
!17173 = !{i64 168447}
!17174 = !{i64 168455}
!17175 = !{i64 168899}
!17176 = !{i64 168908}
!17177 = !{i64 168918}
!17178 = !{i64 168929}
!17179 = !{i64 168584}
!17180 = !{i64 168589}
!17181 = !{i64 168591}
!17182 = !{i64 168598}
!17183 = !{i64 168603}
!17184 = !{i64 168611}
!17185 = !{i64 168616}
!17186 = !{i64 168609}
!17187 = !{i64 168618}
!17188 = !{i64 168622}
!17189 = !{i64 168624}
!17190 = !{i64 168631}
!17191 = !{i64 168633}
!17192 = !{i64 168637}
!17193 = !{i64 168639}
!17194 = !{i64 168646}
!17195 = !{i64 168648}
!17196 = !{i64 168652}
!17197 = !{i64 168654}
!17198 = !{i64 168661}
!17199 = !{i64 168666}
!17200 = !{i64 168671}
!17201 = !{i64 168675}
!17202 = !{i64 168679}
!17203 = !{i64 168681}
!17204 = !{i64 168685}
!17205 = !{i64 168687}
!17206 = !{i64 168693}
!17207 = !{i64 168699}
!17208 = !{i64 168705}
!17209 = !{i64 168711}
!17210 = !{i64 168717}
!17211 = !{i64 168726}
!17212 = !{i64 168731}
!17213 = !{i64 168735}
!17214 = !{i64 168739}
!17215 = !{i64 168750}
!17216 = !{i64 168755}
!17217 = !{i64 168759}
!17218 = !{i64 168777}
!17219 = !{i64 168790}
!17220 = !{i64 168803}
!17221 = !{i64 168816}
!17222 = !{i64 168831}
!17223 = !{i64 168850}
!17224 = !{i64 168855}
!17225 = !{i64 168556}
!17226 = !{i64 168565}
!17227 = !{i64 168571}
!17228 = !{i64 168577}
!17229 = !{i64 168940}
!17230 = !{i64 168950}
!17231 = !{i64 168958}
!17232 = !{i64 168963}
!17233 = !{i64 168986}
!17234 = !{i64 169006}
!17235 = !{i64 169007}
!17236 = !{i64 169023}
!17237 = !{i64 169037}
!17238 = !{i64 169095}
!17239 = !{i64 169101}
!17240 = !{i64 169107}
!17241 = !{i64 169113}
!17242 = !{i64 169124}
!17243 = !{i64 169131}
!17244 = !{i64 169158}
!17245 = !{i64 169173}
!17246 = !{i64 169176}
!17247 = !{i64 169181}
!17248 = !{i64 169186}
!17249 = !{i64 169199}
!17250 = !{i64 169212}
!17251 = !{i64 169221}
!17252 = !{i64 169234}
!17253 = !{i64 169243}
!17254 = !{i64 169267}
!17255 = !{i64 169258}
!17256 = !{i64 169282}
!17257 = !{i64 169291}
!17258 = !{i64 169309}
!17259 = !{i64 169300}
!17260 = !{i64 169329}
!17261 = !{i64 169320}
!17262 = !{i64 169341}
!17263 = !{i64 169346}
!17264 = !{i64 169349}
!17265 = !{i64 169360}
!17266 = !{i64 169365}
!17267 = !{i64 169375}
!17268 = !{i64 169382}
!17269 = !{i64 169388}
!17270 = !{i64 169399}
!17271 = !{i64 169404}
!17272 = !{i64 169414}
!17273 = !{i64 169421}
!17274 = !{i64 169427}
!17275 = !{i64 169438}
!17276 = !{i64 169447}
!17277 = !{i64 169458}
!17278 = !{i64 169463}
!17279 = !{i64 169469}
!17280 = !{i64 169471}
!17281 = !{i64 169484}
!17282 = !{i64 169489}
!17283 = !{i64 169494}
!17284 = !{i64 169498}
!17285 = !{i64 169505}
!17286 = !{i64 169512}
!17287 = !{i64 169525}
!17288 = !{i64 169535}
!17289 = !{i64 169544}
!17290 = !{i64 169557}
!17291 = !{i64 169567}
!17292 = !{i64 169576}
!17293 = !{i64 169578}
!17294 = !{i64 169592}
!17295 = !{i64 169606}
!17296 = !{i64 169590}
!17297 = !{i64 169631}
!17298 = !{i64 169641}
!17299 = !{i64 169646}
!17300 = !{i64 169658}
!17301 = !{i64 169671}
!17302 = !{i64 169681}
!17303 = !{i64 169687}
!17304 = !{i64 169734}
!17305 = !{i64 169732}
!17306 = !{i64 169759}
!17307 = !{i64 169769}
!17308 = !{i64 169782}
!17309 = !{i64 169787}
!17310 = !{i64 169796}
!17311 = !{i64 169802}
!17312 = !{i64 169804}
!17313 = !{i64 169815}
!17314 = !{i64 169824}
!17315 = !{i64 169880}
!17316 = !{i64 169890}
!17317 = !{i64 169893}
!17318 = !{i64 169895}
!17319 = !{i64 169899}
!17320 = !{i64 169903}
!17321 = !{i64 169907}
!17322 = !{i64 169913}
!17323 = !{i64 169920}
!17324 = !{i64 169945}
!17325 = !{i64 169949}
!17326 = !{i64 169953}
!17327 = !{i64 169955}
!17328 = !{i64 169971}
!17329 = !{i64 169976}
!17330 = !{i64 169992}
!17331 = !{i64 169997}
!17332 = !{i64 170001}
!17333 = !{i64 170035}
!17334 = !{i64 170043}
!17335 = !{i64 170046}
!17336 = !{i64 170051}
!17337 = !{i64 170053}
!17338 = !{i64 170056}
!17339 = !{i64 170063}
!17340 = !{i64 170065}
!17341 = !{i64 170006}
!17342 = !{i64 170017}
!17343 = !{i64 170019}
!17344 = !{i64 170024}
!17345 = !{i64 170075}
!17346 = !{i64 170095}
!17347 = !{i64 170098}
!17348 = !{i64 170101}
!17349 = !{i64 170106}
!17350 = !{i64 170114}
!17351 = !{i64 170118}
!17352 = !{i64 170112}
!17353 = !{i64 170124}
!17354 = !{i64 170138}
!17355 = !{i64 170143}
!17356 = !{i64 170153}
!17357 = !{i64 170163}
!17358 = !{i64 170167}
!17359 = !{i64 170170}
!17360 = !{i64 170221}
!17361 = !{i64 170224}
!17362 = !{i64 170235}
!17363 = !{i64 170240}
!17364 = !{i64 170244}
!17365 = !{i64 170255}
!17366 = !{i64 170266}
!17367 = !{i64 170274}
!17368 = !{i64 170277}
!17369 = !{i64 170288}
!17370 = !{i64 170295}
!17371 = !{i64 170301}
!17372 = !{i64 170306}
!17373 = !{i64 170317}
!17374 = !{i64 170330}
!17375 = !{i64 170335}
!17376 = !{i64 170337}
!17377 = !{i64 170340}
!17378 = !{i64 170344}
!17379 = !{i64 170347}
!17380 = !{i64 170358}
!17381 = !{i64 170363}
!17382 = !{i64 170369}
!17383 = !{i64 170384}
!17384 = !{i64 170389}
!17385 = !{i64 170402}
!17386 = !{i64 170408}
!17387 = !{i64 170413}
!17388 = !{i64 170418}
!17389 = !{i64 170424}
!17390 = !{i64 170439}
!17391 = !{i64 170444}
!17392 = !{i64 170459}
!17393 = !{i64 170475}
!17394 = !{i64 170483}
!17395 = !{i64 170489}
!17396 = !{i64 170495}
!17397 = !{i64 170508}
!17398 = !{i64 170525}
!17399 = !{i64 170532}
!17400 = !{i64 170545}
!17401 = !{i64 170565}
!17402 = !{i64 170570}
!17403 = !{i64 170585}
!17404 = !{i64 170603}
!17405 = !{i64 170619}
!17406 = !{i64 170626}
!17407 = !{i64 170639}
!17408 = !{i64 170659}
!17409 = !{i64 170664}
!17410 = !{i64 170679}
!17411 = !{i64 170697}
!17412 = !{i64 170717}
!17413 = !{i64 170735}
!17414 = !{i64 170753}
!17415 = !{i64 170771}
!17416 = !{i64 170783}
!17417 = !{i64 170798}
!17418 = !{i64 170803}
!17419 = !{i64 170821}
!17420 = !{i64 170826}
!17421 = !{i64 170836}
!17422 = !{i64 170841}
!17423 = !{i64 170847}
!17424 = !{i64 170854}
!17425 = !{i64 170863}
!17426 = !{i64 170865}
!17427 = !{i64 170874}
!17428 = !{i64 170881}
!17429 = !{i64 170872}
!17430 = !{i64 170885}
!17431 = !{i64 170894}
!17432 = !{i64 170901}
!17433 = !{i64 170892}
!17434 = !{i64 170916}
!17435 = !{i64 170921}
!17436 = !{i64 170936}
!17437 = !{i64 170975}
!17438 = !{i64 170945}
!17439 = !{i64 170977}
!17440 = !{i64 170986}
!17441 = !{i64 170993}
!17442 = !{i64 170984}
!17443 = !{i64 171008}
!17444 = !{i64 171026}
!17445 = !{i64 171031}
!17446 = !{i64 171046}
!17447 = !{i64 171064}
!17448 = !{i64 171069}
!17449 = !{i64 171084}
!17450 = !{i64 171102}
!17451 = !{i64 171114}
!17452 = !{i64 171129}
!17453 = !{i64 171147}
!17454 = !{i64 171152}
!17455 = !{i64 171167}
!17456 = !{i64 171185}
!17457 = !{i64 171190}
!17458 = !{i64 171196}
!17459 = !{i64 171202}
!17460 = !{i64 171209}
!17461 = !{i64 171222}
!17462 = !{i64 171231}
!17463 = !{i64 171244}
!17464 = !{i64 171264}
!17465 = !{i64 171271}
!17466 = !{i64 171297}
!17467 = !{i64 171304}
!17468 = !{i64 171308}
!17469 = !{i64 171315}
!17470 = !{i64 171324}
!17471 = !{i64 171344}
!17472 = !{i64 171351}
!17473 = !{i64 171373}
!17474 = !{i64 171380}
!17475 = !{i64 171395}
!17476 = !{i64 171400}
!17477 = !{i64 171418}
!17478 = !{i64 171423}
!17479 = !{i64 171428}
!17480 = !{i64 171433}
!17481 = !{i64 171473}
!17482 = !{i64 171443}
!17483 = !{i64 171492}
!17484 = !{i64 171510}
!17485 = !{i64 171528}
!17486 = !{i64 171540}
!17487 = !{i64 171555}
!17488 = !{i64 171573}
!17489 = !{i64 171591}
!17490 = !{i64 171609}
!17491 = !{i64 171614}
!17492 = !{i64 171626}
!17493 = !{i64 171641}
!17494 = !{i64 171659}
!17495 = !{i64 171677}
!17496 = !{i64 171695}
!17497 = !{i64 171700}
!17498 = !{i64 171712}
!17499 = !{i64 171727}
!17500 = !{i64 171745}
!17501 = !{i64 171763}
!17502 = !{i64 171781}
!17503 = !{i64 171786}
!17504 = !{i64 171801}
!17505 = !{i64 171819}
!17506 = !{i64 171837}
!17507 = !{i64 171855}
!17508 = !{i64 171867}
!17509 = !{i64 171882}
!17510 = !{i64 171887}
!17511 = !{i64 171905}
!17512 = !{i64 171910}
!17513 = !{i64 171928}
!17514 = !{i64 171946}
!17515 = !{i64 171964}
!17516 = !{i64 171982}
!17517 = !{i64 172000}
!17518 = !{i64 172018}
!17519 = !{i64 172036}
!17520 = !{i64 172054}
!17521 = !{i64 172059}
!17522 = !{i64 172064}
!17523 = !{i64 172070}
!17524 = !{i64 172090}
!17525 = !{i64 172092}
!17526 = !{i64 172116}
!17527 = !{i64 172131}
!17528 = !{i64 172149}
!17529 = !{i64 172154}
!17530 = !{i64 172169}
!17531 = !{i64 172187}
!17532 = !{i64 172210}
!17533 = !{i64 172255}
!17534 = !{i64 172260}
!17535 = !{i64 172275}
!17536 = !{i64 172280}
!17537 = !{i64 172284}
!17538 = !{i64 172346}
!17539 = !{i64 172351}
!17540 = !{i64 172369}
!17541 = !{i64 172378}
!17542 = !{i64 172397}
!17543 = !{i64 172415}
!17544 = !{i64 172433}
!17545 = !{i64 172451}
!17546 = !{i64 172460}
!17547 = !{i64 172473}
!17548 = !{i64 172482}
!17549 = !{i64 172486}
!17550 = !{i64 172497}
!17551 = !{i64 172502}
!17552 = !{i64 172517}
!17553 = !{i64 172522}
!17554 = !{i64 172537}
!17555 = !{i64 172553}
!17556 = !{i64 172562}
!17557 = !{i64 172593}
!17558 = !{i64 172604}
!17559 = !{i64 172609}
!17560 = !{i64 172649}
!17561 = !{i64 172667}
!17562 = !{i64 172672}
!17563 = !{i64 172679}
!17564 = !{i64 172719}
!17565 = !{i64 172734}
!17566 = !{i64 172752}
!17567 = !{i64 172770}
!17568 = !{i64 172788}
!17569 = !{i64 172793}
!17570 = !{i64 172805}
!17571 = !{i64 172820}
!17572 = !{i64 172838}
!17573 = !{i64 172856}
!17574 = !{i64 172874}
!17575 = !{i64 172879}
!17576 = !{i64 172891}
!17577 = !{i64 172906}
!17578 = !{i64 172924}
!17579 = !{i64 172942}
!17580 = !{i64 172960}
!17581 = !{i64 172965}
!17582 = !{i64 172980}
!17583 = !{i64 172998}
!17584 = !{i64 173016}
!17585 = !{i64 173034}
!17586 = !{i64 173046}
!17587 = !{i64 173061}
!17588 = !{i64 173066}
!17589 = !{i64 173081}
!17590 = !{i64 173086}
!17591 = !{i64 173101}
!17592 = !{i64 173119}
!17593 = !{i64 173137}
!17594 = !{i64 173155}
!17595 = !{i64 173173}
!17596 = !{i64 173189}
!17597 = !{i64 173197}
!17598 = !{i64 173203}
!17599 = !{i64 173209}
!17600 = !{i64 173216}
!17601 = !{i64 173221}
!17602 = !{i64 173227}
!17603 = !{i64 173231}
!17604 = !{i64 173307}
!17605 = !{i64 173313}
!17606 = !{i64 173317}
!17607 = !{i64 173311}
!17608 = !{i64 173330}
!17609 = !{i64 173339}
!17610 = !{i64 173348}
!17611 = !{i64 173359}
!17612 = !{i64 173364}
!17613 = !{i64 173379}
!17614 = !{i64 173387}
!17615 = !{i64 173395}
!17616 = !{i64 173399}
!17617 = !{i64 173393}
!17618 = !{i64 173412}
!17619 = !{i64 173421}
!17620 = !{i64 173430}
!17621 = !{i64 173441}
!17622 = !{i64 173446}
!17623 = !{i64 173461}
!17624 = !{i64 173466}
!17625 = !{i64 173470}
!17626 = !{i64 173491}
!17627 = !{i64 173499}
!17628 = !{i64 173520}
!17629 = !{i64 173525}
!17630 = !{i64 173531}
!17631 = !{i64 173546}
!17632 = !{i64 173564}
!17633 = !{i64 173603}
!17634 = !{i64 173573}
!17635 = !{i64 173612}
!17636 = !{i64 173627}
!17637 = !{i64 173632}
!17638 = !{i64 173641}
!17639 = !{i64 173656}
!17640 = !{i64 173661}
!17641 = !{i64 173676}
!17642 = !{i64 173681}
!17643 = !{i64 173696}
!17644 = !{i64 173701}
!17645 = !{i64 173707}
!17646 = !{i64 173709}
!17647 = !{i64 173722}
!17648 = !{i64 170196}
!17649 = !{i64 170209}
!17650 = !{i64 173727}
!17651 = !{i64 173739}
!17652 = !{i64 173758}
!17653 = !{i64 173771}
!17654 = !{i64 173776}
!17655 = !{i64 173780}
!17656 = !{i64 173785}
!17657 = !{i64 173793}
!17658 = !{i64 173807}
!17659 = !{i64 173811}
!17660 = !{i64 173816}
!17661 = !{i64 173827}
!17662 = !{i64 173833}
!17663 = !{i64 173837}
!17664 = !{i64 173843}
!17665 = !{i64 173847}
!17666 = !{i64 173853}
!17667 = !{i64 173857}
!17668 = !{i64 173869}
!17669 = !{i64 173897}
!17670 = !{i64 173916}
!17671 = !{i64 173928}
!17672 = !{i64 173953}
!17673 = !{i64 173956}
!17674 = !{i64 173959}
!17675 = !{i64 173972}
!17676 = !{i64 173989}
!17677 = !{i64 173994}
!17678 = !{i64 174005}
!17679 = !{i64 174013}
!17680 = !{i64 174018}
!17681 = !{i64 174025}
!17682 = !{i64 174030}
!17683 = !{i64 174041}
!17684 = !{i64 174049}
!17685 = !{i64 174065}
!17686 = !{i64 174078}
!17687 = !{i64 174091}
!17688 = !{i64 174096}
!17689 = !{i64 174099}
!17690 = !{i64 174106}
!17691 = !{i64 174110}
!17692 = !{i64 174115}
!17693 = !{i64 174118}
!17694 = !{i64 174123}
!17695 = !{i64 174126}
!17696 = !{i64 174133}
!17697 = !{i64 174140}
!17698 = !{i64 174142}
!17699 = !{i64 174152}
!17700 = !{i64 174153}
!17701 = !{i64 174168}
!17702 = !{i64 174180}
!17703 = !{i64 174197}
!17704 = !{i64 174200}
!17705 = !{i64 174206}
!17706 = !{i64 174242}
!17707 = !{i64 174257}
!17708 = !{i64 174264}
!17709 = !{i64 174278}
!17710 = !{i64 174285}
!17711 = !{i64 174288}
!17712 = !{i64 174299}
!17713 = !{i64 174312}
!17714 = !{i64 174317}
!17715 = !{i64 174335}
!17716 = !{i64 174348}
!17717 = !{i64 174355}
!17718 = !{i64 174369}
!17719 = !{i64 174382}
!17720 = !{i64 174389}
!17721 = !{i64 174403}
!17722 = !{i64 174416}
!17723 = !{i64 174423}
!17724 = !{i64 174437}
!17725 = !{i64 174450}
!17726 = !{i64 174455}
!17727 = !{i64 174473}
!17728 = !{i64 174486}
!17729 = !{i64 174491}
!17730 = !{i64 174509}
!17731 = !{i64 174522}
!17732 = !{i64 174527}
!17733 = !{i64 174545}
!17734 = !{i64 174550}
!17735 = !{i64 174565}
!17736 = !{i64 174570}
!17737 = !{i64 174575}
!17738 = !{i64 174580}
!17739 = !{i64 174587}
!17740 = !{i64 174601}
!17741 = !{i64 174605}
!17742 = !{i64 174626}
!17743 = !{i64 174639}
!17744 = !{i64 174647}
!17745 = !{i64 174655}
!17746 = !{i64 174661}
!17747 = !{i64 174679}
!17748 = !{i64 174684}
!17749 = !{i64 174702}
!17750 = !{i64 174712}
!17751 = !{i64 174720}
!17752 = !{i64 174723}
!17753 = !{i64 174725}
!17754 = !{i64 174741}
!17755 = !{i64 174782}
!17756 = !{i64 174789}
!17757 = !{i64 174811}
!17758 = !{i64 174816}
!17759 = !{i64 174821}
!17760 = !{i64 174824}
!17761 = !{i64 174833}
!17762 = !{i64 174844}
!17763 = !{i64 174858}
!17764 = !{i64 174883}
!17765 = !{i64 174888}
!17766 = !{i64 174916}
!17767 = !{i64 174923}
!17768 = !{i64 174934}
!17769 = !{i64 174959}
!17770 = !{i64 174970}
!17771 = !{i64 174978}
!17772 = !{i64 174986}
!17773 = !{i64 174992}
!17774 = !{i64 174999}
!17775 = !{i64 175036}
!17776 = !{i64 175040}
!17777 = !{i64 175055}
!17778 = !{i64 175060}
!17779 = !{i64 175215}
!17780 = !{i64 175220}
!17781 = !{i64 175253}
!17782 = !{i64 175255}
!17783 = !{i64 175266}
!17784 = !{i64 175271}
!17785 = !{i64 175308}
!17786 = !{i64 175356}
!17787 = !{i64 175360}
!17788 = !{i64 175366}
!17789 = !{i64 175370}
!17790 = !{i64 175377}
!17791 = !{i64 175382}
!17792 = !{i64 175387}
!17793 = !{i64 175391}
!17794 = !{i64 175400}
!17795 = !{i64 175457}
!17796 = !{i64 175475}
!17797 = !{i64 175480}
!17798 = !{i64 175482}
!17799 = !{i64 175487}
!17800 = !{i64 175489}
!17801 = !{i64 175497}
!17802 = !{i64 175499}
!17803 = !{i64 175512}
!17804 = !{i64 175520}
!17805 = !{i64 175525}
!17806 = !{i64 175532}
!17807 = !{i64 175540}
!17808 = !{i64 175545}
!17809 = !{i64 175319}
!17810 = !{i64 175565}
!17811 = !{i64 175576}
!17812 = !{i64 175577}
!17813 = !{i64 175622}
!17814 = !{i64 175639}
!17815 = !{i64 175647}
!17816 = !{i64 175651}
!17817 = !{i64 175659}
!17818 = !{i64 175666}
!17819 = !{i64 175674}
!17820 = !{i64 175696}
!17821 = !{i64 175735}
!17822 = !{i64 175745}
!17823 = !{i64 175758}
!17824 = !{i64 175787}
!17825 = !{i64 175795}
!17826 = !{i64 175800}
!17827 = !{i64 175807}
!17828 = !{i64 175812}
!17829 = !{i64 175824}
!17830 = !{i64 175832}
!17831 = !{i64 175840}
!17832 = !{i64 175850}
!17833 = !{i64 175855}
!17834 = !{i64 175867}
!17835 = !{i64 175874}
!17836 = !{i64 175881}
!17837 = !{i64 175884}
!17838 = !{i64 175892}
!17839 = !{i64 175899}
!17840 = !{i64 175906}
!17841 = !{i64 175915}
!17842 = !{i64 175937}
!17843 = !{i64 175942}
!17844 = !{i64 175947}
!17845 = !{i64 175969}
!17846 = !{i64 175974}
!17847 = !{i64 175992}
!17848 = !{i64 175926}
!17849 = !{i64 175994}
!17850 = !{i64 175997}
!17851 = !{i64 176004}
!17852 = !{i64 176006}
!17853 = !{i64 176009}
!17854 = !{i64 176016}
!17855 = !{i64 176021}
!17856 = !{i64 176026}
!17857 = !{i64 176048}
!17858 = !{i64 176068}
!17859 = !{i64 176076}
!17860 = !{i64 176081}
!17861 = !{i64 176103}
!17862 = !{i64 176108}
!17863 = !{i64 176113}
!17864 = !{i64 176119}
!17865 = !{i64 176124}
!17866 = !{i64 176128}
!17867 = !{i64 176131}
!17868 = !{i64 176133}
!17869 = !{i64 176135}
!17870 = !{i64 176138}
!17871 = !{i64 176145}
!17872 = !{i64 176152}
!17873 = !{i64 176169}
!17874 = !{i64 176184}
!17875 = !{i64 176206}
!17876 = !{i64 176211}
!17877 = !{i64 176216}
!17878 = !{i64 176221}
!17879 = !{i64 176243}
!17880 = !{i64 176248}
!17881 = !{i64 176270}
!17882 = !{i64 176277}
!17883 = !{i64 176297}
!17884 = !{i64 176302}
!17885 = !{i64 176310}
!17886 = !{i64 176315}
!17887 = !{i64 176319}
!17888 = !{i64 176323}
!17889 = !{i64 176333}
!17890 = !{i64 176352}
!17891 = !{i64 176355}
!17892 = !{i64 176358}
!17893 = !{i64 176365}
!17894 = !{i64 176368}
!17895 = !{i64 176379}
!17896 = !{i64 176400}
!17897 = !{i64 176421}
!17898 = !{i64 176436}
!17899 = !{i64 176444}
!17900 = !{i64 176450}
!17901 = !{i64 176456}
!17902 = !{i64 176458}
!17903 = !{i64 176467}
!17904 = !{i64 176474}
!17905 = !{i64 176479}
!17906 = !{i64 176487}
!17907 = !{i64 176492}
!17908 = !{i64 176496}
!17909 = !{i64 176500}
!17910 = !{i64 176512}
!17911 = !{i64 176517}
!17912 = !{i64 176538}
!17913 = !{i64 176543}
!17914 = !{i64 176551}
!17915 = !{i64 176556}
!17916 = !{i64 176560}
!17917 = !{i64 176564}
!17918 = !{i64 176568}
!17919 = !{i64 176573}
!17920 = !{i64 176592}
!17921 = !{i64 176614}
!17922 = !{i64 176636}
!17923 = !{i64 176641}
!17924 = !{i64 176672}
!17925 = !{i64 176686}
!17926 = !{i64 176691}
!17927 = !{i64 176704}
!17928 = !{i64 176709}
!17929 = !{i64 176722}
!17930 = !{i64 176727}
!17931 = !{i64 176732}
!17932 = !{i64 176751}
!17933 = !{i64 176755}
!17934 = !{i64 176760}
!17935 = !{i64 176782}
!17936 = !{i64 176802}
!17937 = !{i64 176810}
!17938 = !{i64 176817}
!17939 = !{i64 176828}
!17940 = !{i64 176837}
!17941 = !{i64 176842}
!17942 = !{i64 176866}
!17943 = !{i64 176869}
!17944 = !{i64 176880}
!17945 = !{i64 176885}
!17946 = !{i64 176907}
!17947 = !{i64 176913}
!17948 = !{i64 176942}
!17949 = !{i64 176978}
!17950 = !{i64 176980}
!17951 = !{i64 176988}
!17952 = !{i64 177001}
!17953 = !{i64 177011}
!17954 = !{i64 177019}
!17955 = !{i64 177043}
!17956 = !{i64 177048}
!17957 = !{i64 177054}
!17958 = !{i64 177059}
!17959 = !{i64 177065}
!17960 = !{i64 177072}
!17961 = !{i64 177084}
!17962 = !{i64 177089}
!17963 = !{i64 177096}
!17964 = !{i64 177102}
!17965 = !{i64 177103}
!17966 = !{i64 177120}
!17967 = !{i64 177128}
!17968 = !{i64 177138}
!17969 = !{i64 177146}
!17970 = !{i64 177153}
!17971 = !{i64 177158}
!17972 = !{i64 177165}
!17973 = !{i64 177170}
!17974 = !{i64 177177}
!17975 = !{i64 177182}
!17976 = !{i64 177189}
!17977 = !{i64 177194}
!17978 = !{i64 177201}
!17979 = !{i64 177206}
!17980 = !{i64 177213}
!17981 = !{i64 177218}
!17982 = !{i64 177225}
!17983 = !{i64 177230}
!17984 = !{i64 177237}
!17985 = !{i64 177242}
!17986 = !{i64 177249}
!17987 = !{i64 177254}
!17988 = !{i64 177261}
!17989 = !{i64 177266}
!17990 = !{i64 177273}
!17991 = !{i64 177278}
!17992 = !{i64 177285}
!17993 = !{i64 177290}
!17994 = !{i64 177297}
!17995 = !{i64 177302}
!17996 = !{i64 177309}
!17997 = !{i64 177314}
!17998 = !{i64 177321}
!17999 = !{i64 177326}
!18000 = !{i64 177333}
!18001 = !{i64 177338}
!18002 = !{i64 177345}
!18003 = !{i64 177350}
!18004 = !{i64 177357}
!18005 = !{i64 177362}
!18006 = !{i64 177369}
!18007 = !{i64 177374}
!18008 = !{i64 177381}
!18009 = !{i64 177386}
!18010 = !{i64 177393}
!18011 = !{i64 177398}
!18012 = !{i64 177405}
!18013 = !{i64 177410}
!18014 = !{i64 177417}
!18015 = !{i64 177422}
!18016 = !{i64 177429}
!18017 = !{i64 177434}
!18018 = !{i64 177441}
!18019 = !{i64 177452}
!18020 = !{i64 177459}
!18021 = !{i64 177490}
!18022 = !{i64 177477}
!18023 = !{i64 177483}
!18024 = !{i64 177498}
!18025 = !{i64 177503}
!18026 = !{i64 177511}
!18027 = !{i64 177517}
!18028 = !{i64 177521}
!18029 = !{i64 177526}
!18030 = !{i64 177528}
!18031 = !{i64 177535}
!18032 = !{i64 177540}
!18033 = !{i64 177544}
!18034 = !{i64 177548}
!18035 = !{i64 177550}
!18036 = !{i64 177556}
!18037 = !{i64 177562}
!18038 = !{i64 177570}
!18039 = !{i64 177578}
!18040 = !{i64 177590}
!18041 = !{i64 177598}
!18042 = !{i64 177611}
!18043 = !{i64 177619}
!18044 = !{i64 177638}
!18045 = !{i64 177639}
!18046 = !{i64 177656}
!18047 = !{i64 177713}
!18048 = !{i64 177718}
!18049 = !{i64 177721}
!18050 = !{i64 177723}
!18051 = !{i64 177737}
!18052 = !{i64 177742}
!18053 = !{i64 177745}
!18054 = !{i64 177747}
!18055 = !{i64 177758}
!18056 = !{i64 177763}
!18057 = !{i64 177772}
!18058 = !{i64 177776}
!18059 = !{i64 177785}
!18060 = !{i64 177790}
!18061 = !{i64 177794}
!18062 = !{i64 177799}
!18063 = !{i64 177808}
!18064 = !{i64 177812}
!18065 = !{i64 177821}
!18066 = !{i64 177826}
!18067 = !{i64 177830}
!18068 = !{i64 177841}
!18069 = !{i64 177852}
!18070 = !{i64 177867}
!18071 = !{i64 177872}
!18072 = !{i64 177874}
!18073 = !{i64 177876}
!18074 = !{i64 177879}
!18075 = !{i64 177897}
!18076 = !{i64 177905}
!18077 = !{i64 177908}
!18078 = !{i64 177918}
!18079 = !{i64 177923}
!18080 = !{i64 177927}
!18081 = !{i64 177934}
!18082 = !{i64 177938}
!18083 = !{i64 177945}
!18084 = !{i64 177949}
!18085 = !{i64 177956}
!18086 = !{i64 177963}
!18087 = !{i64 177967}
!18088 = !{i64 177988}
!18089 = !{i64 177993}
!18090 = !{i64 177997}
!18091 = !{i64 178011}
!18092 = !{i64 178017}
!18093 = !{i64 178023}
!18094 = !{i64 178028}
!18095 = !{i64 178034}
!18096 = !{i64 178037}
!18097 = !{i64 178043}
!18098 = !{i64 178047}
!18099 = !{i64 178053}
!18100 = !{i64 178059}
!18101 = !{i64 178115}
!18102 = !{i64 178133}
!18103 = !{i64 178136}
!18104 = !{i64 178140}
!18105 = !{i64 178148}
!18106 = !{i64 178170}
!18107 = !{i64 178175}
!18108 = !{i64 178179}
!18109 = !{i64 178185}
!18110 = !{i64 178190}
!18111 = !{i64 178195}
!18112 = !{i64 178203}
!18113 = !{i64 178209}
!18114 = !{i64 178217}
!18115 = !{i64 178223}
!18116 = !{i64 178231}
!18117 = !{i64 178235}
!18118 = !{i64 178239}
!18119 = !{i64 178243}
!18120 = !{i64 178257}
!18121 = !{i64 178264}
!18122 = !{i64 178275}
!18123 = !{i64 178286}
!18124 = !{i64 178291}
!18125 = !{i64 178295}
!18126 = !{i64 178307}
!18127 = !{i64 178311}
!18128 = !{i64 178319}
!18129 = !{i64 178325}
!18130 = !{i64 178328}
!18131 = !{i64 178333}
!18132 = !{i64 178335}
!18133 = !{i64 178343}
!18134 = !{i64 178348}
!18135 = !{i64 178352}
!18136 = !{i64 178360}
!18137 = !{i64 178365}
!18138 = !{i64 178368}
!18139 = !{i64 178375}
!18140 = !{i64 178381}
!18141 = !{i64 178383}
!18142 = !{i64 178404}
!18143 = !{i64 178413}
!18144 = !{i64 178418}
!18145 = !{i64 178421}
!18146 = !{i64 178425}
!18147 = !{i64 178431}
!18148 = !{i64 178435}
!18149 = !{i64 178440}
!18150 = !{i64 178447}
!18151 = !{i64 178451}
!18152 = !{i64 178456}
!18153 = !{i64 178460}
!18154 = !{i64 178467}
!18155 = !{i64 178471}
!18156 = !{i64 178478}
!18157 = !{i64 178499}
!18158 = !{i64 178504}
!18159 = !{i64 178508}
!18160 = !{i64 178525}
!18161 = !{i64 178530}
!18162 = !{i64 178533}
!18163 = !{i64 178535}
!18164 = !{i64 178539}
!18165 = !{i64 178546}
!18166 = !{i64 178551}
!18167 = !{i64 178555}
!18168 = !{i64 178562}
!18169 = !{i64 178567}
!18170 = !{i64 178571}
!18171 = !{i64 178588}
!18172 = !{i64 178593}
!18173 = !{i64 178596}
!18174 = !{i64 178598}
!18175 = !{i64 178602}
!18176 = !{i64 178609}
!18177 = !{i64 178614}
!18178 = !{i64 178618}
!18179 = !{i64 178625}
!18180 = !{i64 178630}
!18181 = !{i64 178634}
!18182 = !{i64 178651}
!18183 = !{i64 178656}
!18184 = !{i64 178659}
!18185 = !{i64 178661}
!18186 = !{i64 178665}
!18187 = !{i64 178672}
!18188 = !{i64 178677}
!18189 = !{i64 178681}
!18190 = !{i64 178688}
!18191 = !{i64 178693}
!18192 = !{i64 178697}
!18193 = !{i64 178714}
!18194 = !{i64 178719}
!18195 = !{i64 178722}
!18196 = !{i64 178724}
!18197 = !{i64 178728}
!18198 = !{i64 178735}
!18199 = !{i64 178740}
!18200 = !{i64 178744}
!18201 = !{i64 178751}
!18202 = !{i64 178756}
!18203 = !{i64 178760}
!18204 = !{i64 178777}
!18205 = !{i64 178782}
!18206 = !{i64 178785}
!18207 = !{i64 178787}
!18208 = !{i64 178791}
!18209 = !{i64 178798}
!18210 = !{i64 178803}
!18211 = !{i64 178807}
!18212 = !{i64 178814}
!18213 = !{i64 178819}
!18214 = !{i64 178823}
!18215 = !{i64 178840}
!18216 = !{i64 178845}
!18217 = !{i64 178848}
!18218 = !{i64 178850}
!18219 = !{i64 178854}
!18220 = !{i64 178861}
!18221 = !{i64 178866}
!18222 = !{i64 178870}
!18223 = !{i64 178877}
!18224 = !{i64 178882}
!18225 = !{i64 178886}
!18226 = !{i64 178903}
!18227 = !{i64 178908}
!18228 = !{i64 178911}
!18229 = !{i64 178913}
!18230 = !{i64 178917}
!18231 = !{i64 178924}
!18232 = !{i64 178929}
!18233 = !{i64 178933}
!18234 = !{i64 178940}
!18235 = !{i64 178945}
!18236 = !{i64 178949}
!18237 = !{i64 178966}
!18238 = !{i64 178971}
!18239 = !{i64 178974}
!18240 = !{i64 178976}
!18241 = !{i64 178980}
!18242 = !{i64 178987}
!18243 = !{i64 178992}
!18244 = !{i64 178996}
!18245 = !{i64 179003}
!18246 = !{i64 179008}
!18247 = !{i64 179013}
!18248 = !{i64 179018}
!18249 = !{i64 179027}
!18250 = !{i64 179032}
!18251 = !{i64 179049}
!18252 = !{i64 179050}
!18253 = !{i64 179075}
!18254 = !{i64 179083}
!18255 = !{i64 179102}
!18256 = !{i64 179111}
!18257 = !{i64 179119}
!18258 = !{i64 179123}
!18259 = !{i64 179127}
!18260 = !{i64 179150}
!18261 = !{i64 179156}
